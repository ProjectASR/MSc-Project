
Revise_without_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08005900  08005900  00015900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000018  08005b18  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005b18  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b814  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8c  00000000  00000000  0002b89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac0  00000000  00000000  0002d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000083c  00000000  00000000  0002e0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263df  00000000  00000000  0002e92c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e056  00000000  00000000  00054d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eb26f  00000000  00000000  00062d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002fc4  00000000  00000000  0014dfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  00150f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080058e8 	.word	0x080058e8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	080058e8 	.word	0x080058e8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b970 	b.w	8000e9c <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9e08      	ldr	r6, [sp, #32]
 8000bda:	460d      	mov	r5, r1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	460f      	mov	r7, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14a      	bne.n	8000c7a <__udivmoddi4+0xa6>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4694      	mov	ip, r2
 8000be8:	d965      	bls.n	8000cb6 <__udivmoddi4+0xe2>
 8000bea:	fab2 f382 	clz	r3, r2
 8000bee:	b143      	cbz	r3, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf4:	f1c3 0220 	rsb	r2, r3, #32
 8000bf8:	409f      	lsls	r7, r3
 8000bfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	409c      	lsls	r4, r3
 8000c02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c06:	fa1f f58c 	uxth.w	r5, ip
 8000c0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c0e:	0c22      	lsrs	r2, r4, #16
 8000c10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c18:	fb01 f005 	mul.w	r0, r1, r5
 8000c1c:	4290      	cmp	r0, r2
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x62>
 8000c20:	eb1c 0202 	adds.w	r2, ip, r2
 8000c24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c28:	f080 811c 	bcs.w	8000e64 <__udivmoddi4+0x290>
 8000c2c:	4290      	cmp	r0, r2
 8000c2e:	f240 8119 	bls.w	8000e64 <__udivmoddi4+0x290>
 8000c32:	3902      	subs	r1, #2
 8000c34:	4462      	add	r2, ip
 8000c36:	1a12      	subs	r2, r2, r0
 8000c38:	b2a4      	uxth	r4, r4
 8000c3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c46:	fb00 f505 	mul.w	r5, r0, r5
 8000c4a:	42a5      	cmp	r5, r4
 8000c4c:	d90a      	bls.n	8000c64 <__udivmoddi4+0x90>
 8000c4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x294>
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x294>
 8000c60:	4464      	add	r4, ip
 8000c62:	3802      	subs	r0, #2
 8000c64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c68:	1b64      	subs	r4, r4, r5
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	b11e      	cbz	r6, 8000c76 <__udivmoddi4+0xa2>
 8000c6e:	40dc      	lsrs	r4, r3
 8000c70:	2300      	movs	r3, #0
 8000c72:	e9c6 4300 	strd	r4, r3, [r6]
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0xbc>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	f000 80ed 	beq.w	8000e5e <__udivmoddi4+0x28a>
 8000c84:	2100      	movs	r1, #0
 8000c86:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c90:	fab3 f183 	clz	r1, r3
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d149      	bne.n	8000d2c <__udivmoddi4+0x158>
 8000c98:	42ab      	cmp	r3, r5
 8000c9a:	d302      	bcc.n	8000ca2 <__udivmoddi4+0xce>
 8000c9c:	4282      	cmp	r2, r0
 8000c9e:	f200 80f8 	bhi.w	8000e92 <__udivmoddi4+0x2be>
 8000ca2:	1a84      	subs	r4, r0, r2
 8000ca4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ca8:	2001      	movs	r0, #1
 8000caa:	4617      	mov	r7, r2
 8000cac:	2e00      	cmp	r6, #0
 8000cae:	d0e2      	beq.n	8000c76 <__udivmoddi4+0xa2>
 8000cb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb4:	e7df      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xe6>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f382 	clz	r3, r2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f040 8090 	bne.w	8000de4 <__udivmoddi4+0x210>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2101      	movs	r1, #1
 8000cd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000cd8:	0c22      	lsrs	r2, r4, #16
 8000cda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cde:	fb0e f005 	mul.w	r0, lr, r5
 8000ce2:	4290      	cmp	r0, r2
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x124>
 8000ce6:	eb1c 0202 	adds.w	r2, ip, r2
 8000cea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x122>
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2b8>
 8000cf6:	4645      	mov	r5, r8
 8000cf8:	1a12      	subs	r2, r2, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d00:	fb07 2210 	mls	r2, r7, r0, r2
 8000d04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x14e>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x14c>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2c2>
 8000d20:	4610      	mov	r0, r2
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2a:	e79f      	b.n	8000c6c <__udivmoddi4+0x98>
 8000d2c:	f1c1 0720 	rsb	r7, r1, #32
 8000d30:	408b      	lsls	r3, r1
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000d3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d42:	40fd      	lsrs	r5, r7
 8000d44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d48:	4323      	orrs	r3, r4
 8000d4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	fb09 5518 	mls	r5, r9, r8, r5
 8000d56:	0c1c      	lsrs	r4, r3, #16
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b0>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2b4>
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2b4>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4464      	add	r4, ip
 8000d84:	1b64      	subs	r4, r4, r5
 8000d86:	b29d      	uxth	r5, r3
 8000d88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1da>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2ac>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2ac>
 8000daa:	3b02      	subs	r3, #2
 8000dac:	4464      	add	r4, ip
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fba3 9502 	umull	r9, r5, r3, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46ae      	mov	lr, r5
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x29c>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x298>
 8000dc4:	b156      	cbz	r6, 8000ddc <__udivmoddi4+0x208>
 8000dc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000dca:	eb64 040e 	sbc.w	r4, r4, lr
 8000dce:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd2:	40ca      	lsrs	r2, r1
 8000dd4:	40cc      	lsrs	r4, r1
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de4:	f1c3 0120 	rsb	r1, r3, #32
 8000de8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dec:	fa20 f201 	lsr.w	r2, r0, r1
 8000df0:	fa25 f101 	lsr.w	r1, r5, r1
 8000df4:	409d      	lsls	r5, r3
 8000df6:	432a      	orrs	r2, r5
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e04:	fb07 1510 	mls	r5, r7, r0, r1
 8000e08:	0c11      	lsrs	r1, r2, #16
 8000e0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000e12:	428d      	cmp	r5, r1
 8000e14:	fa04 f403 	lsl.w	r4, r4, r3
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x258>
 8000e1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b0>
 8000e24:	428d      	cmp	r5, r1
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b0>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4461      	add	r1, ip
 8000e2c:	1b49      	subs	r1, r1, r5
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e34:	fb07 1115 	mls	r1, r7, r5, r1
 8000e38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000e40:	4291      	cmp	r1, r2
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x282>
 8000e44:	eb1c 0202 	adds.w	r2, ip, r2
 8000e48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000e4e:	4291      	cmp	r1, r2
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000e52:	3d02      	subs	r5, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a52      	subs	r2, r2, r1
 8000e58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0xfc>
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e708      	b.n	8000c76 <__udivmoddi4+0xa2>
 8000e64:	4639      	mov	r1, r7
 8000e66:	e6e6      	b.n	8000c36 <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x90>
 8000e6c:	4548      	cmp	r0, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f0>
 8000e7c:	4645      	mov	r5, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x282>
 8000e80:	462b      	mov	r3, r5
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1da>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x258>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b0>
 8000e8c:	3d02      	subs	r5, #2
 8000e8e:	4462      	add	r2, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x124>
 8000e92:	4608      	mov	r0, r1
 8000e94:	e70a      	b.n	8000cac <__udivmoddi4+0xd8>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x14e>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Delay_us>:
 *
 */

#include "DFR_i2c.h"

void Delay_us(uint32_t delay) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	// Calculate the number of CPU cycles for the delay
	// change CLOCK preprocessor if the SCL is not compatible with the micro-controller
	uint32_t cycles = CLOCK* delay;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <Delay_us+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <Delay_us+0x44>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0e1a      	lsrs	r2, r3, #24
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	fb02 f303 	mul.w	r3, r2, r3
 8000eba:	60fb      	str	r3, [r7, #12]

	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	e003      	b.n	8000eca <Delay_us+0x2a>
		__asm__ __volatile__("nop");
 8000ec2:	bf00      	nop
	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d8f7      	bhi.n	8000ec2 <Delay_us+0x22>
	}
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	ee9bfab5 	.word	0xee9bfab5

08000ee8 <dfr_i2c_start>:

void dfr_i2c_start(DFRobot_GP8XXX_IIC *gp8xxx) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	/* Generate I2C start condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6858      	ldr	r0, [r3, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	891b      	ldrh	r3, [r3, #8]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4619      	mov	r1, r3
 8000efc:	f002 fbce 	bl	800369c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	68d8      	ldr	r0, [r3, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	8a1b      	ldrh	r3, [r3, #16]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f002 fbc6 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff ffc5 	bl	8000ea0 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68d8      	ldr	r0, [r3, #12]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8a1b      	ldrh	r3, [r3, #16]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4619      	mov	r1, r3
 8000f22:	f002 fbbb 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff ffba 	bl	8000ea0 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6858      	ldr	r0, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	891b      	ldrh	r3, [r3, #8]
 8000f34:	2200      	movs	r2, #0
 8000f36:	4619      	mov	r1, r3
 8000f38:	f002 fbb0 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8000f3c:	2005      	movs	r0, #5
 8000f3e:	f7ff ffaf 	bl	8000ea0 <Delay_us>

}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <dfr_i2c_stop>:

void dfr_i2c_stop(DFRobot_GP8XXX_IIC *gp8xxx) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]

	/* Generate I2C stop condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68d8      	ldr	r0, [r3, #12]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	8a1b      	ldrh	r3, [r3, #16]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f002 fb9d 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ff9c 	bl	8000ea0 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6858      	ldr	r0, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	891b      	ldrh	r3, [r3, #8]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4619      	mov	r1, r3
 8000f74:	f002 fb92 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f7ff ff91 	bl	8000ea0 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68d8      	ldr	r0, [r3, #12]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8a1b      	ldrh	r3, [r3, #16]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f002 fb87 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f7ff ff86 	bl	8000ea0 <Delay_us>

}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <dfr_i2c_write_byte>:
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
	Delay_us(I2C_CYCLE_AFTER);

}

HAL_StatusTypeDef dfr_i2c_write_byte(DFRobot_GP8XXX_IIC *gp8xxx,uint8_t data) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]

	/* Write a byte to the I2C bus */
	for (int i = 0; i < 8; i++) {
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e028      	b.n	8001000 <dfr_i2c_write_byte+0x64>
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	68d8      	ldr	r0, [r3, #12]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8a19      	ldrh	r1, [r3, #16]
				(data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	09db      	lsrs	r3, r3, #7
 8000fba:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f002 fb6d 	bl	800369c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_BEFORE);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff ff6c 	bl	8000ea0 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6858      	ldr	r0, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	891b      	ldrh	r3, [r3, #8]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f002 fb62 	bl	800369c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_TOTAL);
 8000fd8:	2005      	movs	r0, #5
 8000fda:	f7ff ff61 	bl	8000ea0 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6858      	ldr	r0, [r3, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	891b      	ldrh	r3, [r3, #8]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f002 fb57 	bl	800369c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_AFTER);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff ff56 	bl	8000ea0 <Delay_us>
		data <<= 1;
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b07      	cmp	r3, #7
 8001004:	ddd3      	ble.n	8000fae <dfr_i2c_write_byte+0x12>
	}

	// Check for ACK from slave, expecting 0
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68d8      	ldr	r0, [r3, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	8a1b      	ldrh	r3, [r3, #16]
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	f002 fb43 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 8001016:	2001      	movs	r0, #1
 8001018:	f7ff ff42 	bl	8000ea0 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6858      	ldr	r0, [r3, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	891b      	ldrh	r3, [r3, #8]
 8001024:	2201      	movs	r2, #1
 8001026:	4619      	mov	r1, r3
 8001028:	f002 fb38 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff ff37 	bl	8000ea0 <Delay_us>

	uint16_t errorTime = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	817b      	strh	r3, [r7, #10]
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 8001036:	e00d      	b.n	8001054 <dfr_i2c_write_byte+0xb8>
		Delay_us(I2C_CYCLE_BEFORE);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff31 	bl	8000ea0 <Delay_us>
		errorTime++;
 800103e:	897b      	ldrh	r3, [r7, #10]
 8001040:	3301      	adds	r3, #1
 8001042:	817b      	strh	r3, [r7, #10]
		if (errorTime > 100) { // No ACK from slave, generate stop condition and return error
 8001044:	897b      	ldrh	r3, [r7, #10]
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d904      	bls.n	8001054 <dfr_i2c_write_byte+0xb8>
			dfr_i2c_stop(gp8xxx);
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff7d 	bl	8000f4a <dfr_i2c_stop>
			return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e016      	b.n	8001082 <dfr_i2c_write_byte+0xe6>
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	8a1b      	ldrh	r3, [r3, #16]
 800105c:	4619      	mov	r1, r3
 800105e:	4610      	mov	r0, r2
 8001060:	f002 fb04 	bl	800366c <HAL_GPIO_ReadPin>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e6      	bne.n	8001038 <dfr_i2c_write_byte+0x9c>
		}
	}
	// ACK received as 0
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f002 fb11 	bl	800369c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 800107a:	2002      	movs	r0, #2
 800107c:	f7ff ff10 	bl	8000ea0 <Delay_us>
	return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <GP8XXX_IIC_begin>:

void GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, eDAC_Name_t dac_name,
		uint8_t Addr, GPIO_TypeDef *SCL_port, uint16_t SCL_pin,
		GPIO_TypeDef *SDA_port, uint16_t SDA_pin) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b0a0      	sub	sp, #128	; 0x80
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	460b      	mov	r3, r1
 8001098:	72fb      	strb	r3, [r7, #11]
 800109a:	4613      	mov	r3, r2
 800109c:	72bb      	strb	r3, [r7, #10]

	 // Set I2C port and pin configurations

	gp8xxx->I2C_scl_port = SCL_port;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	605a      	str	r2, [r3, #4]
	gp8xxx->I2C_scl_pin = SCL_pin;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 80010aa:	811a      	strh	r2, [r3, #8]
	gp8xxx->I2C_sda_port = SDA_port;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80010b2:	60da      	str	r2, [r3, #12]
	gp8xxx->I2C_sda_pin = SDA_pin;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80010ba:	821a      	strh	r2, [r3, #16]

	/* Enable GPIO clock for SCL port */
	switch ((uint32_t) gp8xxx->I2C_scl_port) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a93      	ldr	r2, [pc, #588]	; (8001310 <GP8XXX_IIC_begin+0x284>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f000 80c8 	beq.w	8001258 <GP8XXX_IIC_begin+0x1cc>
 80010c8:	4a91      	ldr	r2, [pc, #580]	; (8001310 <GP8XXX_IIC_begin+0x284>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f200 80d1 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 80010d0:	4a90      	ldr	r2, [pc, #576]	; (8001314 <GP8XXX_IIC_begin+0x288>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	f000 80b3 	beq.w	800123e <GP8XXX_IIC_begin+0x1b2>
 80010d8:	4a8e      	ldr	r2, [pc, #568]	; (8001314 <GP8XXX_IIC_begin+0x288>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	f200 80c9 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 80010e0:	4a8d      	ldr	r2, [pc, #564]	; (8001318 <GP8XXX_IIC_begin+0x28c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f000 809e 	beq.w	8001224 <GP8XXX_IIC_begin+0x198>
 80010e8:	4a8b      	ldr	r2, [pc, #556]	; (8001318 <GP8XXX_IIC_begin+0x28c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	f200 80c1 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 80010f0:	4a8a      	ldr	r2, [pc, #552]	; (800131c <GP8XXX_IIC_begin+0x290>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	f000 8089 	beq.w	800120a <GP8XXX_IIC_begin+0x17e>
 80010f8:	4a88      	ldr	r2, [pc, #544]	; (800131c <GP8XXX_IIC_begin+0x290>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f200 80b9 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 8001100:	4a87      	ldr	r2, [pc, #540]	; (8001320 <GP8XXX_IIC_begin+0x294>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d074      	beq.n	80011f0 <GP8XXX_IIC_begin+0x164>
 8001106:	4a86      	ldr	r2, [pc, #536]	; (8001320 <GP8XXX_IIC_begin+0x294>)
 8001108:	4293      	cmp	r3, r2
 800110a:	f200 80b2 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 800110e:	4a85      	ldr	r2, [pc, #532]	; (8001324 <GP8XXX_IIC_begin+0x298>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d060      	beq.n	80011d6 <GP8XXX_IIC_begin+0x14a>
 8001114:	4a83      	ldr	r2, [pc, #524]	; (8001324 <GP8XXX_IIC_begin+0x298>)
 8001116:	4293      	cmp	r3, r2
 8001118:	f200 80ab 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 800111c:	4a82      	ldr	r2, [pc, #520]	; (8001328 <GP8XXX_IIC_begin+0x29c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d04c      	beq.n	80011bc <GP8XXX_IIC_begin+0x130>
 8001122:	4a81      	ldr	r2, [pc, #516]	; (8001328 <GP8XXX_IIC_begin+0x29c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	f200 80a4 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 800112a:	4a80      	ldr	r2, [pc, #512]	; (800132c <GP8XXX_IIC_begin+0x2a0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d038      	beq.n	80011a2 <GP8XXX_IIC_begin+0x116>
 8001130:	4a7e      	ldr	r2, [pc, #504]	; (800132c <GP8XXX_IIC_begin+0x2a0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	f200 809d 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 8001138:	4a7d      	ldr	r2, [pc, #500]	; (8001330 <GP8XXX_IIC_begin+0x2a4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d024      	beq.n	8001188 <GP8XXX_IIC_begin+0xfc>
 800113e:	4a7c      	ldr	r2, [pc, #496]	; (8001330 <GP8XXX_IIC_begin+0x2a4>)
 8001140:	4293      	cmp	r3, r2
 8001142:	f200 8096 	bhi.w	8001272 <GP8XXX_IIC_begin+0x1e6>
 8001146:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <GP8XXX_IIC_begin+0x2a8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d003      	beq.n	8001154 <GP8XXX_IIC_begin+0xc8>
 800114c:	4a7a      	ldr	r2, [pc, #488]	; (8001338 <GP8XXX_IIC_begin+0x2ac>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d00d      	beq.n	800116e <GP8XXX_IIC_begin+0xe2>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 8001152:	e08e      	b.n	8001272 <GP8XXX_IIC_begin+0x1e6>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b79      	ldr	r3, [pc, #484]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	4a78      	ldr	r2, [pc, #480]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6313      	str	r3, [r2, #48]	; 0x30
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	66bb      	str	r3, [r7, #104]	; 0x68
 800116a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		break;
 800116c:	e082      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b73      	ldr	r3, [pc, #460]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a72      	ldr	r2, [pc, #456]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b70      	ldr	r3, [pc, #448]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
 8001184:	6e7b      	ldr	r3, [r7, #100]	; 0x64
		break;
 8001186:	e075      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	4b6c      	ldr	r3, [pc, #432]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a6b      	ldr	r2, [pc, #428]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b69      	ldr	r3, [pc, #420]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	663b      	str	r3, [r7, #96]	; 0x60
 800119e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		break;
 80011a0:	e068      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	4b66      	ldr	r3, [pc, #408]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a65      	ldr	r2, [pc, #404]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011a8:	f043 0308 	orr.w	r3, r3, #8
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b63      	ldr	r3, [pc, #396]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80011b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		break;
 80011ba:	e05b      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80011bc:	4b5f      	ldr	r3, [pc, #380]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a5e      	ldr	r2, [pc, #376]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b5c      	ldr	r3, [pc, #368]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80011d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		break;
 80011d4:	e04e      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80011d6:	4b59      	ldr	r3, [pc, #356]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a58      	ldr	r2, [pc, #352]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011dc:	f043 0320 	orr.w	r3, r3, #32
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b56      	ldr	r3, [pc, #344]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	657b      	str	r3, [r7, #84]	; 0x54
 80011ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		break;
 80011ee:	e041      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80011f0:	4b52      	ldr	r3, [pc, #328]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a51      	ldr	r2, [pc, #324]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011fa:	6313      	str	r3, [r2, #48]	; 0x30
 80011fc:	4b4f      	ldr	r3, [pc, #316]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 80011fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001204:	653b      	str	r3, [r7, #80]	; 0x50
 8001206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		break;
 8001208:	e034      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	4b4c      	ldr	r3, [pc, #304]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a4b      	ldr	r2, [pc, #300]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		break;
 8001222:	e027      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8001224:	4b45      	ldr	r3, [pc, #276]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a44      	ldr	r2, [pc, #272]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800122a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b42      	ldr	r3, [pc, #264]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
 800123a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		break;
 800123c:	e01a      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 800123e:	4b3f      	ldr	r3, [pc, #252]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a3e      	ldr	r2, [pc, #248]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b3c      	ldr	r3, [pc, #240]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001252:	647b      	str	r3, [r7, #68]	; 0x44
 8001254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		break;
 8001256:	e00d      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a37      	ldr	r2, [pc, #220]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 800125e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <GP8XXX_IIC_begin+0x2b0>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	643b      	str	r3, [r7, #64]	; 0x40
 800126e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		break;
 8001270:	e000      	b.n	8001274 <GP8XXX_IIC_begin+0x1e8>
		break;
 8001272:	bf00      	nop
	}

	/* Enable GPIO clock for SDA port */
	switch ((uint32_t) gp8xxx->I2C_sda_port) {
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4a25      	ldr	r2, [pc, #148]	; (8001310 <GP8XXX_IIC_begin+0x284>)
 800127a:	4293      	cmp	r3, r2
 800127c:	f000 80e2 	beq.w	8001444 <GP8XXX_IIC_begin+0x3b8>
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <GP8XXX_IIC_begin+0x284>)
 8001282:	4293      	cmp	r3, r2
 8001284:	f200 80eb 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 8001288:	4a22      	ldr	r2, [pc, #136]	; (8001314 <GP8XXX_IIC_begin+0x288>)
 800128a:	4293      	cmp	r3, r2
 800128c:	f000 80cd 	beq.w	800142a <GP8XXX_IIC_begin+0x39e>
 8001290:	4a20      	ldr	r2, [pc, #128]	; (8001314 <GP8XXX_IIC_begin+0x288>)
 8001292:	4293      	cmp	r3, r2
 8001294:	f200 80e3 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <GP8XXX_IIC_begin+0x28c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	f000 80b8 	beq.w	8001410 <GP8XXX_IIC_begin+0x384>
 80012a0:	4a1d      	ldr	r2, [pc, #116]	; (8001318 <GP8XXX_IIC_begin+0x28c>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	f200 80db 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012a8:	4a1c      	ldr	r2, [pc, #112]	; (800131c <GP8XXX_IIC_begin+0x290>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	f000 80a3 	beq.w	80013f6 <GP8XXX_IIC_begin+0x36a>
 80012b0:	4a1a      	ldr	r2, [pc, #104]	; (800131c <GP8XXX_IIC_begin+0x290>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	f200 80d3 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012b8:	4a19      	ldr	r2, [pc, #100]	; (8001320 <GP8XXX_IIC_begin+0x294>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	f000 808e 	beq.w	80013dc <GP8XXX_IIC_begin+0x350>
 80012c0:	4a17      	ldr	r2, [pc, #92]	; (8001320 <GP8XXX_IIC_begin+0x294>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	f200 80cb 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <GP8XXX_IIC_begin+0x298>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d079      	beq.n	80013c2 <GP8XXX_IIC_begin+0x336>
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <GP8XXX_IIC_begin+0x298>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	f200 80c4 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <GP8XXX_IIC_begin+0x29c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d065      	beq.n	80013a8 <GP8XXX_IIC_begin+0x31c>
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <GP8XXX_IIC_begin+0x29c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	f200 80bd 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012e4:	4a11      	ldr	r2, [pc, #68]	; (800132c <GP8XXX_IIC_begin+0x2a0>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d051      	beq.n	800138e <GP8XXX_IIC_begin+0x302>
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <GP8XXX_IIC_begin+0x2a0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	f200 80b6 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 80012f2:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <GP8XXX_IIC_begin+0x2a4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d03d      	beq.n	8001374 <GP8XXX_IIC_begin+0x2e8>
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <GP8XXX_IIC_begin+0x2a4>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	f200 80af 	bhi.w	800145e <GP8XXX_IIC_begin+0x3d2>
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <GP8XXX_IIC_begin+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d01c      	beq.n	8001340 <GP8XXX_IIC_begin+0x2b4>
 8001306:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <GP8XXX_IIC_begin+0x2ac>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d026      	beq.n	800135a <GP8XXX_IIC_begin+0x2ce>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 800130c:	e0a7      	b.n	800145e <GP8XXX_IIC_begin+0x3d2>
 800130e:	bf00      	nop
 8001310:	40022800 	.word	0x40022800
 8001314:	40022400 	.word	0x40022400
 8001318:	40022000 	.word	0x40022000
 800131c:	40021c00 	.word	0x40021c00
 8001320:	40021800 	.word	0x40021800
 8001324:	40021400 	.word	0x40021400
 8001328:	40021000 	.word	0x40021000
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40023800 	.word	0x40023800
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001340:	4b7a      	ldr	r3, [pc, #488]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a79      	ldr	r2, [pc, #484]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b77      	ldr	r3, [pc, #476]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		break;
 8001358:	e082      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	4b74      	ldr	r3, [pc, #464]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a73      	ldr	r2, [pc, #460]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b71      	ldr	r3, [pc, #452]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		break;
 8001372:	e075      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b6d      	ldr	r3, [pc, #436]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4a6c      	ldr	r2, [pc, #432]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6313      	str	r3, [r2, #48]	; 0x30
 8001380:	4b6a      	ldr	r3, [pc, #424]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
 800138a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 800138c:	e068      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	4b67      	ldr	r3, [pc, #412]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a66      	ldr	r2, [pc, #408]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b64      	ldr	r3, [pc, #400]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
 80013a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 80013a6:	e05b      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80013a8:	4b60      	ldr	r3, [pc, #384]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	4a5f      	ldr	r2, [pc, #380]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6313      	str	r3, [r2, #48]	; 0x30
 80013b4:	4b5d      	ldr	r3, [pc, #372]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 80013c0:	e04e      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a59      	ldr	r2, [pc, #356]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013c8:	f043 0320 	orr.w	r3, r3, #32
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b57      	ldr	r3, [pc, #348]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0320 	and.w	r3, r3, #32
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 80013da:	e041      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	4a52      	ldr	r2, [pc, #328]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	4b50      	ldr	r3, [pc, #320]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 80013f4:	e034      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	4b4d      	ldr	r3, [pc, #308]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a4c      	ldr	r2, [pc, #304]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b4a      	ldr	r3, [pc, #296]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800140a:	623b      	str	r3, [r7, #32]
 800140c:	6a3b      	ldr	r3, [r7, #32]
		break;
 800140e:	e027      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 8001410:	4b46      	ldr	r3, [pc, #280]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a45      	ldr	r2, [pc, #276]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]
		break;
 8001428:	e01a      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 800142a:	4b40      	ldr	r3, [pc, #256]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3f      	ldr	r2, [pc, #252]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001430:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]
		break;
 8001442:	e00d      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a38      	ldr	r2, [pc, #224]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b36      	ldr	r3, [pc, #216]	; (800152c <GP8XXX_IIC_begin+0x4a0>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
		break;
 800145c:	e000      	b.n	8001460 <GP8XXX_IIC_begin+0x3d4>
		break;
 800145e:	bf00      	nop
	}

	// Configure GPIO pins for I2C
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = gp8xxx->I2C_scl_pin | gp8xxx->I2C_sda_pin;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	891a      	ldrh	r2, [r3, #8]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8a1b      	ldrh	r3, [r3, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	b29b      	uxth	r3, r3
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800147e:	2311      	movs	r3, #17
 8001480:	673b      	str	r3, [r7, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001482:	2301      	movs	r3, #1
 8001484:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_GPIO_Init(gp8xxx->I2C_scl_port, &GPIO_InitStruct);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ff3d 	bl	8003314 <HAL_GPIO_Init>
	HAL_GPIO_Init(gp8xxx->I2C_sda_port, &GPIO_InitStruct);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 ff35 	bl	8003314 <HAL_GPIO_Init>


	// Set DAC model, resolution, and device address
	gp8xxx->deviceAddr = Addr;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	7aba      	ldrb	r2, [r7, #10]
 80014ae:	70da      	strb	r2, [r3, #3]
	gp8xxx->DAC_Name = dac_name;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	7afa      	ldrb	r2, [r7, #11]
 80014b4:	709a      	strb	r2, [r3, #2]

	switch (gp8xxx->DAC_Name) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	789b      	ldrb	r3, [r3, #2]
 80014ba:	2b06      	cmp	r3, #6
 80014bc:	d82a      	bhi.n	8001514 <GP8XXX_IIC_begin+0x488>
 80014be:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <GP8XXX_IIC_begin+0x438>)
 80014c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c4:	080014e1 	.word	0x080014e1
 80014c8:	080014e1 	.word	0x080014e1
 80014cc:	080014e1 	.word	0x080014e1
 80014d0:	080014fb 	.word	0x080014fb
 80014d4:	0800150b 	.word	0x0800150b
 80014d8:	080014f1 	.word	0x080014f1
 80014dc:	0800150b 	.word	0x0800150b
	case GP8211_identifier:
	case GP8211S_identifier:
	case GP8512_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014e6:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2258      	movs	r2, #88	; 0x58
 80014ec:	70da      	strb	r2, [r3, #3]

		break;
 80014ee:	e019      	b.n	8001524 <GP8XXX_IIC_begin+0x498>
	case GP8413_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014f6:	801a      	strh	r2, [r3, #0]
		break;
 80014f8:	e014      	b.n	8001524 <GP8XXX_IIC_begin+0x498>

	case GP8302_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001500:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2258      	movs	r2, #88	; 0x58
 8001506:	70da      	strb	r2, [r3, #3]
		break;
 8001508:	e00c      	b.n	8001524 <GP8XXX_IIC_begin+0x498>

	case GP8503_identifier:
	case GP8403_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001510:	801a      	strh	r2, [r3, #0]
		break;
 8001512:	e007      	b.n	8001524 <GP8XXX_IIC_begin+0x498>

	default:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800151a:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2258      	movs	r2, #88	; 0x58
 8001520:	70da      	strb	r2, [r3, #3]
		break;
 8001522:	bf00      	nop

	}

}
 8001524:	bf00      	nop
 8001526:	3780      	adds	r7, #128	; 0x80
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800

08001530 <GP8XXX_IIC_setDACOutRange>:

int GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]

// only for 8402, 8413, 8211s, 8211, 8101

	uint8_t data = 0x00;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

	switch (range) {
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d007      	beq.n	8001556 <GP8XXX_IIC_setDACOutRange+0x26>
 8001546:	2b02      	cmp	r3, #2
 8001548:	d102      	bne.n	8001550 <GP8XXX_IIC_setDACOutRange+0x20>

	case eOutputRange5V:
		break;

	case eOutputRange10V:
		data = 0x11;
 800154a:	2311      	movs	r3, #17
 800154c:	73fb      	strb	r3, [r7, #15]
		break;
 800154e:	e003      	b.n	8001558 <GP8XXX_IIC_setDACOutRange+0x28>

	default:
		data = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
		break;
 8001554:	e000      	b.n	8001558 <GP8XXX_IIC_setDACOutRange+0x28>
		break;
 8001556:	bf00      	nop

	}

	// Generate start condition
	dfr_i2c_start(gp8xxx);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fcc5 	bl	8000ee8 <dfr_i2c_start>

	// Send device address
	dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fd17 	bl	8000f9c <dfr_i2c_write_byte>

	// Send register address
	dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG >> 1);
 800156e:	2101      	movs	r1, #1
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fd13 	bl	8000f9c <dfr_i2c_write_byte>

	// Send voltage data
	dfr_i2c_write_byte(gp8xxx,data);
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	4619      	mov	r1, r3
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fd0e 	bl	8000f9c <dfr_i2c_write_byte>

	// Generate stop condition
	dfr_i2c_stop(gp8xxx);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff fce2 	bl	8000f4a <dfr_i2c_stop>

	return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <GP8XXX_IIC_setDACOutVoltage>:

int GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage,
		uint8_t channel) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]

	// Set initial state of I2C lines
	if (voltage > gp8xxx->resolution)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d902      	bls.n	80015b0 <GP8XXX_IIC_setDACOutVoltage+0x20>
		voltage = gp8xxx->resolution;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	807b      	strh	r3, [r7, #2]

	if (gp8xxx->resolution == RESOLUTION_12_BIT) {
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d103      	bne.n	80015c4 <GP8XXX_IIC_setDACOutVoltage+0x34>
		voltage = voltage << 4;
 80015bc:	887b      	ldrh	r3, [r7, #2]
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	807b      	strh	r3, [r7, #2]
 80015c2:	e008      	b.n	80015d6 <GP8XXX_IIC_setDACOutVoltage+0x46>

	} else if (gp8xxx->resolution == RESOLUTION_15_BIT) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <GP8XXX_IIC_setDACOutVoltage+0x46>
		voltage = voltage << 1;
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	807b      	strh	r3, [r7, #2]

	}

	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	733b      	strb	r3, [r7, #12]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	737b      	strb	r3, [r7, #13]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80015ea:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	0a1b      	lsrs	r3, r3, #8
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80015f4:	73fb      	strb	r3, [r7, #15]

	if (channel == 0) {
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d11d      	bne.n	8001638 <GP8XXX_IIC_setDACOutVoltage+0xa8>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fc73 	bl	8000ee8 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fcc5 	bl	8000f9c <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 8001612:	2102      	movs	r1, #2
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff fcc1 	bl	8000f9c <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	4619      	mov	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fcbc 	bl	8000f9c <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8001624:	7b7b      	ldrb	r3, [r7, #13]
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff fcb7 	bl	8000f9c <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff fc8b 	bl	8000f4a <dfr_i2c_stop>

		return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e04c      	b.n	80016d2 <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 1) {
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d11d      	bne.n	800167a <GP8XXX_IIC_setDACOutVoltage+0xea>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fc52 	bl	8000ee8 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	78db      	ldrb	r3, [r3, #3]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fca4 	bl	8000f9c <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG << 1);
 8001654:	2104      	movs	r1, #4
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff fca0 	bl	8000f9c <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	4619      	mov	r1, r3
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fc9b 	bl	8000f9c <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8001666:	7b7b      	ldrb	r3, [r7, #13]
 8001668:	4619      	mov	r1, r3
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fc96 	bl	8000f9c <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fc6a 	bl	8000f4a <dfr_i2c_stop>

		return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e02b      	b.n	80016d2 <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 2) {
 800167a:	787b      	ldrb	r3, [r7, #1]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d127      	bne.n	80016d0 <GP8XXX_IIC_setDACOutVoltage+0x140>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fc31 	bl	8000ee8 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fc83 	bl	8000f9c <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 8001696:	2102      	movs	r1, #2
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fc7f 	bl	8000f9c <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fc7a 	bl	8000f9c <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 80016a8:	7b7b      	ldrb	r3, [r7, #13]
 80016aa:	4619      	mov	r1, r3
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fc75 	bl	8000f9c <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[2]);
 80016b2:	7bbb      	ldrb	r3, [r7, #14]
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fc70 	bl	8000f9c <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[3]);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fc6b 	bl	8000f9c <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff fc3f 	bl	8000f4a <dfr_i2c_stop>
		return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <GP8XXX_IIC_setDACOutVoltage+0x142>
	} else
		return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1

}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <set_dob>:
#include <dob.h>

void set_dob(dob_instance *dob, float k, float j, float g) {
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	ed87 0a02 	vstr	s0, [r7, #8]
 80016e6:	edc7 0a01 	vstr	s1, [r7, #4]
 80016ea:	ed87 1a00 	vstr	s2, [r7]

	dob->Kt = k;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	601a      	str	r2, [r3, #0]
	dob->Jm = j;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	605a      	str	r2, [r3, #4]
	dob->G_dis = g;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	609a      	str	r2, [r3, #8]
	dob->temp = 0;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	60da      	str	r2, [r3, #12]

}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <update_dob>:

void update_dob(dob_instance *dob, float Ia_ref, float velocity) {
 8001714:	b5b0      	push	{r4, r5, r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001720:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * dob->Kt + dob->Jm * dob->G_dis * velocity;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	ed93 7a00 	vldr	s14, [r3]
 800172a:	edd7 7a02 	vldr	s15, [r7, #8]
 800172e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edd3 6a01 	vldr	s13, [r3, #4]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	edd3 7a02 	vldr	s15, [r3, #8]
 800173e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001742:	edd7 7a01 	vldr	s15, [r7, #4]
 8001746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174e:	edc7 7a05 	vstr	s15, [r7, #20]
	dob->temp = dob->temp + (T_in - dob->temp) * dob->G_dis * dt/1000.0; // /dt
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe feba 	bl	80004d0 <__aeabi_f2d>
 800175c:	4604      	mov	r4, r0
 800175e:	460d      	mov	r5, r1
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	edd3 7a03 	vldr	s15, [r3, #12]
 8001766:	ed97 7a05 	vldr	s14, [r7, #20]
 800176a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	edd3 7a02 	vldr	s15, [r3, #8]
 8001774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001778:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <update_dob+0xd0>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	ee17 0a90 	vmov	r0, s15
 8001786:	f7fe fea3 	bl	80004d0 <__aeabi_f2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <update_dob+0xd4>)
 8001790:	f7ff f820 	bl	80007d4 <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd3a 	bl	8000214 <__adddf3>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f7ff f9ac 	bl	8000b04 <__aeabi_d2f>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	60da      	str	r2, [r3, #12]

	dob->T_dis = dob->temp - dob->Jm * dob->G_dis * velocity;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	ed93 7a03 	vldr	s14, [r3, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bdb0      	pop	{r4, r5, r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000000 	.word	0x20000000
 80017e8:	408f4000 	.word	0x408f4000

080017ec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017f2:	f001 fba8 	bl	8002f46 <HAL_Init>

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80017f6:	f000 fa71 	bl	8001cdc <MPU_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017fa:	f000 f8e1 	bl	80019c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80017fe:	f000 f9f5 	bl	8001bec <MX_GPIO_Init>
	MX_TIM1_Init();
 8001802:	f000 f943 	bl	8001a8c <MX_TIM1_Init>
	MX_TIM4_Init();
 8001806:	f000 f99b 	bl	8001b40 <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800180a:	213c      	movs	r1, #60	; 0x3c
 800180c:	484d      	ldr	r0, [pc, #308]	; (8001944 <main+0x158>)
 800180e:	f002 fc9b 	bl	8004148 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001812:	213c      	movs	r1, #60	; 0x3c
 8001814:	484c      	ldr	r0, [pc, #304]	; (8001948 <main+0x15c>)
 8001816:	f002 fc97 	bl	8004148 <HAL_TIM_Encoder_Start_IT>

	init_encoder(&enc_instance_M1);
 800181a:	484c      	ldr	r0, [pc, #304]	; (800194c <main+0x160>)
 800181c:	f000 fb32 	bl	8001e84 <init_encoder>

	init_encoder(&enc_instance_M2);
 8001820:	484b      	ldr	r0, [pc, #300]	; (8001950 <main+0x164>)
 8001822:	f000 fb2f 	bl	8001e84 <init_encoder>

	set_pid_gain(&pid_instance_M1, 5.0, 0.10, 0.01); // set gains
 8001826:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8001954 <main+0x168>
 800182a:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8001958 <main+0x16c>
 800182e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001832:	484a      	ldr	r0, [pc, #296]	; (800195c <main+0x170>)
 8001834:	f000 fa83 	bl	8001d3e <set_pid_gain>
	set_pid_gain(&pid_instance_M2, 0.1, 0.05, 0.01); // set gains
 8001838:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8001954 <main+0x168>
 800183c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8001960 <main+0x174>
 8001840:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8001958 <main+0x16c>
 8001844:	4847      	ldr	r0, [pc, #284]	; (8001964 <main+0x178>)
 8001846:	f000 fa7a 	bl	8001d3e <set_pid_gain>

	J = 0.001;
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <main+0x17c>)
 800184c:	4a47      	ldr	r2, [pc, #284]	; (800196c <main+0x180>)
 800184e:	601a      	str	r2, [r3, #0]
	G = 0;
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <main+0x184>)
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

	set_dob(&dob1, k_T, J, 50.0); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , G = 50
 8001858:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001974 <main+0x188>
 800185c:	4b42      	ldr	r3, [pc, #264]	; (8001968 <main+0x17c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8001978 <main+0x18c>
 8001866:	eef0 0a67 	vmov.f32	s1, s15
 800186a:	eeb0 0a47 	vmov.f32	s0, s14
 800186e:	4843      	ldr	r0, [pc, #268]	; (800197c <main+0x190>)
 8001870:	f7ff ff33 	bl	80016da <set_dob>
	set_rtob(&rtob1, k_T, J, 50.0, 0.0129, 0.0003);
 8001874:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001974 <main+0x188>
 8001878:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <main+0x17c>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8001980 <main+0x194>
 8001882:	eddf 1a40 	vldr	s3, [pc, #256]	; 8001984 <main+0x198>
 8001886:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8001978 <main+0x18c>
 800188a:	eef0 0a67 	vmov.f32	s1, s15
 800188e:	eeb0 0a47 	vmov.f32	s0, s14
 8001892:	483d      	ldr	r0, [pc, #244]	; (8001988 <main+0x19c>)
 8001894:	f000 fb4e 	bl	8001f34 <set_rtob>

	set_dob(&dob2, k_T, J, 50.0); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , G = 50
 8001898:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001974 <main+0x188>
 800189c:	4b32      	ldr	r3, [pc, #200]	; (8001968 <main+0x17c>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8001978 <main+0x18c>
 80018a6:	eef0 0a67 	vmov.f32	s1, s15
 80018aa:	eeb0 0a47 	vmov.f32	s0, s14
 80018ae:	4837      	ldr	r0, [pc, #220]	; (800198c <main+0x1a0>)
 80018b0:	f7ff ff13 	bl	80016da <set_dob>
	set_rtob(&rtob2, k_T, J, 50.0, 0.0129, 0.0003);
 80018b4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001974 <main+0x188>
 80018b8:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <main+0x17c>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8001980 <main+0x194>
 80018c2:	eddf 1a30 	vldr	s3, [pc, #192]	; 8001984 <main+0x198>
 80018c6:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8001978 <main+0x18c>
 80018ca:	eef0 0a67 	vmov.f32	s1, s15
 80018ce:	eeb0 0a47 	vmov.f32	s0, s14
 80018d2:	482f      	ldr	r0, [pc, #188]	; (8001990 <main+0x1a4>)
 80018d4:	f000 fb2e 	bl	8001f34 <set_rtob>

	RPM_k = (float) 60.0 / (PPR * gear_ratio); // to calculate RPM form ticks/s
 80018d8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001994 <main+0x1a8>
 80018dc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80018e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e4:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8001998 <main+0x1ac>
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <main+0x1b0>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
	RPM_to_Rads_per_sec = 2.0 * 3.14 / 60.0; // to calculate rads per sec from rpm
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <main+0x1b4>)
 80018f4:	4a2b      	ldr	r2, [pc, #172]	; (80019a4 <main+0x1b8>)
 80018f6:	601a      	str	r2, [r3, #0]
	Ticks_to_Deg = 360.0 / (512.0 * 26.0);  // to calculate degrees form ticks
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <main+0x1bc>)
 80018fa:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <main+0x1c0>)
 80018fc:	601a      	str	r2, [r3, #0]

	GP8XXX_IIC_begin(&gp8211s_1, GP8211S_identifier, 0x58, GPIOB,
 80018fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <main+0x1c4>)
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <main+0x1c4>)
 800190e:	2258      	movs	r2, #88	; 0x58
 8001910:	2101      	movs	r1, #1
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <main+0x1c8>)
 8001914:	f7ff fbba 	bl	800108c <GP8XXX_IIC_begin>
	GPIO_PIN_6,
	GPIOB, GPIO_PIN_9);
	GP8XXX_IIC_begin(&gp8211s_2, GP8211S_identifier, 0x58, GPIOF,
 8001918:	2302      	movs	r3, #2
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <main+0x1cc>)
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2301      	movs	r3, #1
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <main+0x1cc>)
 8001926:	2258      	movs	r2, #88	; 0x58
 8001928:	2101      	movs	r1, #1
 800192a:	4824      	ldr	r0, [pc, #144]	; (80019bc <main+0x1d0>)
 800192c:	f7ff fbae 	bl	800108c <GP8XXX_IIC_begin>
	GPIO_PIN_0,
	GPIOF, GPIO_PIN_1);

	GP8XXX_IIC_setDACOutRange(&gp8211s_1, eOutputRange10V); // 10V
 8001930:	2102      	movs	r1, #2
 8001932:	4820      	ldr	r0, [pc, #128]	; (80019b4 <main+0x1c8>)
 8001934:	f7ff fdfc 	bl	8001530 <GP8XXX_IIC_setDACOutRange>
	GP8XXX_IIC_setDACOutRange(&gp8211s_2, eOutputRange10V); // 10V
 8001938:	2102      	movs	r1, #2
 800193a:	4820      	ldr	r0, [pc, #128]	; (80019bc <main+0x1d0>)
 800193c:	f7ff fdf8 	bl	8001530 <GP8XXX_IIC_setDACOutRange>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001940:	e7fe      	b.n	8001940 <main+0x154>
 8001942:	bf00      	nop
 8001944:	20000034 	.word	0x20000034
 8001948:	20000080 	.word	0x20000080
 800194c:	200000cc 	.word	0x200000cc
 8001950:	200000dc 	.word	0x200000dc
 8001954:	3c23d70a 	.word	0x3c23d70a
 8001958:	3dcccccd 	.word	0x3dcccccd
 800195c:	200000ec 	.word	0x200000ec
 8001960:	3d4ccccd 	.word	0x3d4ccccd
 8001964:	20000104 	.word	0x20000104
 8001968:	200001b4 	.word	0x200001b4
 800196c:	3a83126f 	.word	0x3a83126f
 8001970:	200001b8 	.word	0x200001b8
 8001974:	3d90624e 	.word	0x3d90624e
 8001978:	42480000 	.word	0x42480000
 800197c:	2000011c 	.word	0x2000011c
 8001980:	399d4952 	.word	0x399d4952
 8001984:	3c535a86 	.word	0x3c535a86
 8001988:	20000130 	.word	0x20000130
 800198c:	2000014c 	.word	0x2000014c
 8001990:	20000160 	.word	0x20000160
 8001994:	44000000 	.word	0x44000000
 8001998:	42700000 	.word	0x42700000
 800199c:	200001a4 	.word	0x200001a4
 80019a0:	200001a8 	.word	0x200001a8
 80019a4:	3dd65b7a 	.word	0x3dd65b7a
 80019a8:	200001ac 	.word	0x200001ac
 80019ac:	3cdd89d9 	.word	0x3cdd89d9
 80019b0:	40020400 	.word	0x40020400
 80019b4:	2000017c 	.word	0x2000017c
 80019b8:	40021400 	.word	0x40021400
 80019bc:	20000190 	.word	0x20000190

080019c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b094      	sub	sp, #80	; 0x50
 80019c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2230      	movs	r2, #48	; 0x30
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 ff20 	bl	8004814 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <SystemClock_Config+0xc4>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <SystemClock_Config+0xc4>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6413      	str	r3, [r2, #64]	; 0x40
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <SystemClock_Config+0xc4>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019fc:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <SystemClock_Config+0xc8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a04:	4a20      	ldr	r2, [pc, #128]	; (8001a88 <SystemClock_Config+0xc8>)
 8001a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <SystemClock_Config+0xc8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a22:	2302      	movs	r3, #2
 8001a24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8001a30:	2348      	movs	r3, #72	; 0x48
 8001a32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4618      	mov	r0, r3
 8001a42:	f001 fe45 	bl	80036d0 <HAL_RCC_OscConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <SystemClock_Config+0x90>
		Error_Handler();
 8001a4c:	f000 f972 	bl	8001d34 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a50:	230f      	movs	r3, #15
 8001a52:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a54:	2302      	movs	r3, #2
 8001a56:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a60:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 f8d3 	bl	8003c18 <HAL_RCC_ClockConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0xbc>
		Error_Handler();
 8001a78:	f000 f95c 	bl	8001d34 <Error_Handler>
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3750      	adds	r7, #80	; 0x50
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40007000 	.word	0x40007000

08001a8c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08c      	sub	sp, #48	; 0x30
 8001a90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 feba 	bl	8004814 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001aac:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <MX_TIM1_Init+0xb0>)
 8001aae:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001abc:	4b1e      	ldr	r3, [pc, #120]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001aca:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	480d      	ldr	r0, [pc, #52]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001b02:	f002 fa7b 	bl	8003ffc <HAL_TIM_Encoder_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM1_Init+0x84>
		Error_Handler();
 8001b0c:	f000 f912 	bl	8001d34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <MX_TIM1_Init+0xac>)
 8001b22:	f002 fdcb 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 8001b2c:	f000 f902 	bl	8001d34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	3730      	adds	r7, #48	; 0x30
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000034 	.word	0x20000034
 8001b3c:	40010000 	.word	0x40010000

08001b40 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	2224      	movs	r2, #36	; 0x24
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fe60 	bl	8004814 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b60:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <MX_TIM4_Init+0xa8>)
 8001b62:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001b70:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b76:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b84:	2303      	movs	r3, #3
 8001b86:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001bb0:	f002 fa24 	bl	8003ffc <HAL_TIM_Encoder_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM4_Init+0x7e>
		Error_Handler();
 8001bba:	f000 f8bb 	bl	8001d34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <MX_TIM4_Init+0xa4>)
 8001bcc:	f002 fd76 	bl	80046bc <HAL_TIMEx_MasterConfigSynchronization>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001bd6:	f000 f8ad 	bl	8001d34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	3730      	adds	r7, #48	; 0x30
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000080 	.word	0x20000080
 8001be8:	40000800 	.word	0x40000800

08001bec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	4b33      	ldr	r3, [pc, #204]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a2c      	ldr	r2, [pc, #176]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4a:	4b21      	ldr	r3, [pc, #132]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b1e      	ldr	r3, [pc, #120]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <MX_GPIO_Init+0xe4>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, M2_Dir_Pin | M2_En_Pin, GPIO_PIN_RESET);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	210c      	movs	r1, #12
 8001c7e:	4815      	ldr	r0, [pc, #84]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001c80:	f001 fd0c 	bl	800369c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, M1_Dir_Pin | M1_En_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2130      	movs	r1, #48	; 0x30
 8001c88:	4813      	ldr	r0, [pc, #76]	; (8001cd8 <MX_GPIO_Init+0xec>)
 8001c8a:	f001 fd07 	bl	800369c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M2_Dir_Pin M2_En_Pin */
	GPIO_InitStruct.Pin = M2_Dir_Pin | M2_En_Pin;
 8001c8e:	230c      	movs	r3, #12
 8001c90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <MX_GPIO_Init+0xe8>)
 8001ca6:	f001 fb35 	bl	8003314 <HAL_GPIO_Init>

	/*Configure GPIO pins : M1_Dir_Pin M1_En_Pin */
	GPIO_InitStruct.Pin = M1_Dir_Pin | M1_En_Pin;
 8001caa:	2330      	movs	r3, #48	; 0x30
 8001cac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <MX_GPIO_Init+0xec>)
 8001cc2:	f001 fb27 	bl	8003314 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000
 8001cd8:	40020400 	.word	0x40020400

08001cdc <MPU_Config>:

/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001cee:	f001 fa99 	bl	8003224 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cfe:	231f      	movs	r3, #31
 8001d00:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001d02:	2387      	movs	r3, #135	; 0x87
 8001d04:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fab7 	bl	8003294 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d26:	2004      	movs	r0, #4
 8001d28:	f001 fa94 	bl	8003254 <HAL_MPU_Enable>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>

08001d3e <set_pid_gain>:
#define INTEGRAL_GAIN_MAX 2000000
//#define PID_MAX 2047
#define PID_MAX 5000

// Set PID gains
void set_pid_gain(pid_instance_int16 *pid_instance, float p, float i, float d) {
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d4a:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d4e:	ed87 1a00 	vstr	s2, [r7]
	pid_instance->p_gain = p;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	601a      	str	r2, [r3, #0]
	pid_instance->i_gain = i;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	605a      	str	r2, [r3, #4]
	pid_instance->d_gain = d;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	609a      	str	r2, [r3, #8]

}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <apply_pid>:
	pid_instance->d_gain = 0;
	pid_instance->error_integral = 0;
}

void apply_pid(pid_instance_int16 *pid_instance, float input_error,
		float dt) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d7c:	edc7 0a01 	vstr	s1, [r7, #4]
	pid_instance->error_integral += input_error * dt;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	ed93 7a04 	vldr	s14, [r3, #16]
 8001d86:	edd7 6a02 	vldr	s13, [r7, #8]
 8001d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	edc3 7a04 	vstr	s15, [r3, #16]

	// Limit integral gain
	if (pid_instance->error_integral > INTEGRAL_GAIN_MAX) {
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001da2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001e64 <apply_pid+0xf4>
 8001da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dae:	dd02      	ble.n	8001db6 <apply_pid+0x46>
		pid_instance->error_integral = INTEGRAL_GAIN_MAX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4a2d      	ldr	r2, [pc, #180]	; (8001e68 <apply_pid+0xf8>)
 8001db4:	611a      	str	r2, [r3, #16]
	}

	if (pid_instance->error_integral < -INTEGRAL_GAIN_MAX) {
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dbc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001e6c <apply_pid+0xfc>
 8001dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc8:	d502      	bpl.n	8001dd0 <apply_pid+0x60>
		pid_instance->error_integral = -INTEGRAL_GAIN_MAX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4a28      	ldr	r2, [pc, #160]	; (8001e70 <apply_pid+0x100>)
 8001dce:	611a      	str	r2, [r3, #16]
	}

	// Calculate PID output
	pid_instance->output = pid_instance->p_gain * input_error
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	ed93 7a00 	vldr	s14, [r3]
 8001dd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dda:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ pid_instance->i_gain * (pid_instance->error_integral)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	edd3 6a01 	vldr	s13, [r3, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dee:	ee37 7a27 	vadd.f32	s14, s14, s15
	+ pid_instance->d_gain * (input_error - pid_instance->last_error)/dt;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	edd3 6a02 	vldr	s13, [r3, #8]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e02:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e06:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001e0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e0e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance->output = pid_instance->p_gain * input_error
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	edc3 7a05 	vstr	s15, [r3, #20]

	// Limit PID output
	if (pid_instance->output >= PID_MAX) {
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e22:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001e74 <apply_pid+0x104>
 8001e26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	db02      	blt.n	8001e36 <apply_pid+0xc6>
		pid_instance->output = PID_MAX;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <apply_pid+0x108>)
 8001e34:	615a      	str	r2, [r3, #20]
	}

	if (pid_instance->output <= -PID_MAX) {
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e3c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001e7c <apply_pid+0x10c>
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d802      	bhi.n	8001e50 <apply_pid+0xe0>
		pid_instance->output = -PID_MAX;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <apply_pid+0x110>)
 8001e4e:	615a      	str	r2, [r3, #20]
	}
	pid_instance->last_error = input_error;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	60da      	str	r2, [r3, #12]
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	49f42400 	.word	0x49f42400
 8001e68:	49f42400 	.word	0x49f42400
 8001e6c:	c9f42400 	.word	0xc9f42400
 8001e70:	c9f42400 	.word	0xc9f42400
 8001e74:	459c4000 	.word	0x459c4000
 8001e78:	459c4000 	.word	0x459c4000
 8001e7c:	c59c4000 	.word	0xc59c4000
 8001e80:	c59c4000 	.word	0xc59c4000

08001e84 <init_encoder>:
#include "motor_encoder.h"
#include "stdio.h"

// Initialize encoder parameters
void init_encoder(encoder_instance *encoder_value) {
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	encoder_value->velocity = 0;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
	encoder_value->position = 0;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
	encoder_value->last_counter_value = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <update_encoder>:

// Update encoder values based on timer and quadrature counting
void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim) {
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]

	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim); // Get quadrature count
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	60fb      	str	r3, [r7, #12]

	encoder_value->count = (int16_t) temp_counter;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	b21a      	sxth	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	819a      	strh	r2, [r3, #12]
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001f2c <update_encoder+0x7c>
 8001edc:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (float) dt;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <update_encoder+0x80>)
 8001ee2:	ed93 7a00 	vldr	s14, [r3]
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	edc3 7a00 	vstr	s15, [r3]
	encoder_value->position += (float) encoder_value->count / (float) 4.0; //  Update position based on quadrature factor
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f04:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8001f08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edc3 7a01 	vstr	s15, [r3, #4]
	__HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	437a0000 	.word	0x437a0000
 8001f30:	20000000 	.word	0x20000000

08001f34 <set_rtob>:
#include <rtob.h>

void set_rtob(rtob_instance *rtob, float k, float j, float g, float f, float b) {
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6178      	str	r0, [r7, #20]
 8001f3c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f40:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f44:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f48:	edc7 1a01 	vstr	s3, [r7, #4]
 8001f4c:	ed87 2a00 	vstr	s4, [r7]

	rtob->Kt = k;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	601a      	str	r2, [r3, #0]
	rtob->Jm = j;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	605a      	str	r2, [r3, #4]
	rtob->G_dis = g;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	609a      	str	r2, [r3, #8]
	rtob->temp = 0;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
	rtob->F = f;
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	615a      	str	r2, [r3, #20]
	rtob->B = b;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	619a      	str	r2, [r3, #24]

}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <update_rtob>:

void update_rtob(rtob_instance *rtob, float Ia_ref, float velocity) {
 8001f84:	b5b0      	push	{r4, r5, r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f90:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_dis * velocity - rtob->F
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	ed93 7a00 	vldr	s14, [r3]
 8001f9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	edd3 6a01 	vldr	s13, [r3, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
			- rtob->B * velocity;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	edd3 6a06 	vldr	s13, [r3, #24]
 8001fce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_dis * velocity - rtob->F
 8001fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fda:	edc7 7a05 	vstr	s15, [r7, #20]
	rtob->temp = rtob->temp + (T_in - rtob->temp) * rtob->G_dis * dt/1000.0; // /dt
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fa74 	bl	80004d0 <__aeabi_f2d>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ff2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ff6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <update_rtob+0xec>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	ee17 0a90 	vmov	r0, s15
 8002012:	f7fe fa5d 	bl	80004d0 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <update_rtob+0xf0>)
 800201c:	f7fe fbda 	bl	80007d4 <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f8f4 	bl	8000214 <__adddf3>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fd66 	bl	8000b04 <__aeabi_d2f>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	60da      	str	r2, [r3, #12]

	rtob->T_extern = rtob->temp - rtob->Jm * rtob->G_dis * velocity;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ed93 7a03 	vldr	s14, [r3, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 6a01 	vldr	s13, [r3, #4]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002050:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002054:	edd7 7a01 	vldr	s15, [r7, #4]
 8002058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800205c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8002066:	bf00      	nop
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bdb0      	pop	{r4, r5, r7, pc}
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000
 8002074:	408f4000 	.word	0x408f4000

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <HAL_MspInit+0x44>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_MspInit+0x44>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_MspInit+0x44>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_MspInit+0x44>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_MspInit+0x44>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_MspInit+0x44>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 031c 	add.w	r3, r7, #28
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a33      	ldr	r2, [pc, #204]	; (80021ac <HAL_TIM_Encoder_MspInit+0xec>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d131      	bne.n	8002146 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020e2:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a32      	ldr	r2, [pc, #200]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002100:	f043 0310 	orr.w	r3, r3, #16
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0310 	and.w	r3, r3, #16
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002112:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002124:	2301      	movs	r3, #1
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002128:	f107 031c 	add.w	r3, r7, #28
 800212c:	4619      	mov	r1, r3
 800212e:	4821      	ldr	r0, [pc, #132]	; (80021b4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002130:	f001 f8f0 	bl	8003314 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002134:	2200      	movs	r2, #0
 8002136:	2100      	movs	r1, #0
 8002138:	201b      	movs	r0, #27
 800213a:	f001 f83c 	bl	80031b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800213e:	201b      	movs	r0, #27
 8002140:	f001 f855 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002144:	e02d      	b.n	80021a2 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a1b      	ldr	r2, [pc, #108]	; (80021b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d128      	bne.n	80021a2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002150:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	4a16      	ldr	r2, [pc, #88]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002156:	f043 0304 	orr.w	r3, r3, #4
 800215a:	6413      	str	r3, [r2, #64]	; 0x40
 800215c:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 800216e:	f043 0308 	orr.w	r3, r3, #8
 8002172:	6313      	str	r3, [r2, #48]	; 0x30
 8002174:	4b0e      	ldr	r3, [pc, #56]	; (80021b0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002180:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002192:	2302      	movs	r3, #2
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4807      	ldr	r0, [pc, #28]	; (80021bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800219e:	f001 f8b9 	bl	8003314 <HAL_GPIO_Init>
}
 80021a2:	bf00      	nop
 80021a4:	3730      	adds	r7, #48	; 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40000800 	.word	0x40000800
 80021bc:	40020c00 	.word	0x40020c00

080021c0 <torque_profile>:
float volt2;

float k_s = 5.0;
float k_sd = 100.0;

float torque_profile(float position, bool IsRo, bool IsDown) {
 80021c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	ed87 0a01 	vstr	s0, [r7, #4]
 80021cc:	4603      	mov	r3, r0
 80021ce:	460a      	mov	r2, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
 80021d2:	4613      	mov	r3, r2
 80021d4:	70bb      	strb	r3, [r7, #2]

	if (IsRo) {
 80021d6:	78fb      	ldrb	r3, [r7, #3]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80ce 	beq.w	800237a <torque_profile+0x1ba>
		if (!IsDown) {
 80021de:	78bb      	ldrb	r3, [r7, #2]
 80021e0:	f083 0301 	eor.w	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d063      	beq.n	80022b2 <torque_profile+0xf2>
			return -0.00006 * position * position * position
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7fe f970 	bl	80004d0 <__aeabi_f2d>
 80021f0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002528 <torque_profile+0x368>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9c3 	bl	8000580 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4614      	mov	r4, r2
 8002200:	461d      	mov	r5, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe f964 	bl	80004d0 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4620      	mov	r0, r4
 800220e:	4629      	mov	r1, r5
 8002210:	f7fe f9b6 	bl	8000580 <__aeabi_dmul>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7fe f957 	bl	80004d0 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe f9a9 	bl	8000580 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4614      	mov	r4, r2
 8002234:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe f94a 	bl	80004d0 <__aeabi_f2d>
 800223c:	a3bc      	add	r3, pc, #752	; (adr r3, 8002530 <torque_profile+0x370>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f99d 	bl	8000580 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4690      	mov	r8, r2
 800224c:	4699      	mov	r9, r3
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe f93e 	bl	80004d0 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4640      	mov	r0, r8
 800225a:	4649      	mov	r1, r9
 800225c:	f7fe f990 	bl	8000580 <__aeabi_dmul>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f7fd ffd4 	bl	8000214 <__adddf3>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4614      	mov	r4, r2
 8002272:	461d      	mov	r5, r3
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7fe f92b 	bl	80004d0 <__aeabi_f2d>
 800227a:	a3af      	add	r3, pc, #700	; (adr r3, 8002538 <torque_profile+0x378>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f7fe f97e 	bl	8000580 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4620      	mov	r0, r4
 800228a:	4629      	mov	r1, r5
 800228c:	f7fd ffc2 	bl	8000214 <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	a3a9      	add	r3, pc, #676	; (adr r3, 8002540 <torque_profile+0x380>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f7fd ffb9 	bl	8000214 <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fc2b 	bl	8000b04 <__aeabi_d2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	e130      	b.n	8002514 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe f90c 	bl	80004d0 <__aeabi_f2d>
 80022b8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002548 <torque_profile+0x388>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f95f 	bl	8000580 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4614      	mov	r4, r2
 80022c8:	461d      	mov	r5, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe f900 	bl	80004d0 <__aeabi_f2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fe f952 	bl	8000580 <__aeabi_dmul>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4614      	mov	r4, r2
 80022e2:	461d      	mov	r5, r3
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe f8f3 	bl	80004d0 <__aeabi_f2d>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4620      	mov	r0, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	f7fe f945 	bl	8000580 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe f8e6 	bl	80004d0 <__aeabi_f2d>
 8002304:	a392      	add	r3, pc, #584	; (adr r3, 8002550 <torque_profile+0x390>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f939 	bl	8000580 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe f8da 	bl	80004d0 <__aeabi_f2d>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4640      	mov	r0, r8
 8002322:	4649      	mov	r1, r9
 8002324:	f7fe f92c 	bl	8000580 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4620      	mov	r0, r4
 800232e:	4629      	mov	r1, r5
 8002330:	f7fd ff70 	bl	8000214 <__adddf3>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4614      	mov	r4, r2
 800233a:	461d      	mov	r5, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7fe f8c7 	bl	80004d0 <__aeabi_f2d>
 8002342:	a385      	add	r3, pc, #532	; (adr r3, 8002558 <torque_profile+0x398>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f91a 	bl	8000580 <__aeabi_dmul>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4620      	mov	r0, r4
 8002352:	4629      	mov	r1, r5
 8002354:	f7fd ff5e 	bl	8000214 <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	a37f      	add	r3, pc, #508	; (adr r3, 8002560 <torque_profile+0x3a0>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fd ff55 	bl	8000214 <__adddf3>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4610      	mov	r0, r2
 8002370:	4619      	mov	r1, r3
 8002372:	f7fe fbc7 	bl	8000b04 <__aeabi_d2f>
 8002376:	4603      	mov	r3, r0
 8002378:	e0cc      	b.n	8002514 <torque_profile+0x354>
		}
	} else {
		if (!IsDown) {
 800237a:	78bb      	ldrb	r3, [r7, #2]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d063      	beq.n	800244e <torque_profile+0x28e>
			return -0.00006 * position * position * position
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe f8a2 	bl	80004d0 <__aeabi_f2d>
 800238c:	a366      	add	r3, pc, #408	; (adr r3, 8002528 <torque_profile+0x368>)
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f7fe f8f5 	bl	8000580 <__aeabi_dmul>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4614      	mov	r4, r2
 800239c:	461d      	mov	r5, r3
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7fe f896 	bl	80004d0 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fe f8e8 	bl	8000580 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4614      	mov	r4, r2
 80023b6:	461d      	mov	r5, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe f889 	bl	80004d0 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4620      	mov	r0, r4
 80023c4:	4629      	mov	r1, r5
 80023c6:	f7fe f8db 	bl	8000580 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4614      	mov	r4, r2
 80023d0:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe f87c 	bl	80004d0 <__aeabi_f2d>
 80023d8:	a355      	add	r3, pc, #340	; (adr r3, 8002530 <torque_profile+0x370>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fe f8cf 	bl	8000580 <__aeabi_dmul>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4690      	mov	r8, r2
 80023e8:	4699      	mov	r9, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f870 	bl	80004d0 <__aeabi_f2d>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4640      	mov	r0, r8
 80023f6:	4649      	mov	r1, r9
 80023f8:	f7fe f8c2 	bl	8000580 <__aeabi_dmul>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4620      	mov	r0, r4
 8002402:	4629      	mov	r1, r5
 8002404:	f7fd ff06 	bl	8000214 <__adddf3>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4614      	mov	r4, r2
 800240e:	461d      	mov	r5, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fe f85d 	bl	80004d0 <__aeabi_f2d>
 8002416:	a348      	add	r3, pc, #288	; (adr r3, 8002538 <torque_profile+0x378>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	f7fe f8b0 	bl	8000580 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fd fef4 	bl	8000214 <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	a342      	add	r3, pc, #264	; (adr r3, 8002540 <torque_profile+0x380>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fd feeb 	bl	8000214 <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fb5d 	bl	8000b04 <__aeabi_d2f>
 800244a:	4603      	mov	r3, r0
 800244c:	e062      	b.n	8002514 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe f83e 	bl	80004d0 <__aeabi_f2d>
 8002454:	a33c      	add	r3, pc, #240	; (adr r3, 8002548 <torque_profile+0x388>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	f7fe f891 	bl	8000580 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4614      	mov	r4, r2
 8002464:	461d      	mov	r5, r3
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7fe f832 	bl	80004d0 <__aeabi_f2d>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7fe f884 	bl	8000580 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4614      	mov	r4, r2
 800247e:	461d      	mov	r5, r3
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f825 	bl	80004d0 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fe f877 	bl	8000580 <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4614      	mov	r4, r2
 8002498:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe f818 	bl	80004d0 <__aeabi_f2d>
 80024a0:	a32b      	add	r3, pc, #172	; (adr r3, 8002550 <torque_profile+0x390>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f86b 	bl	8000580 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4690      	mov	r8, r2
 80024b0:	4699      	mov	r9, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe f80c 	bl	80004d0 <__aeabi_f2d>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4640      	mov	r0, r8
 80024be:	4649      	mov	r1, r9
 80024c0:	f7fe f85e 	bl	8000580 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fd fea2 	bl	8000214 <__adddf3>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4614      	mov	r4, r2
 80024d6:	461d      	mov	r5, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7fd fff9 	bl	80004d0 <__aeabi_f2d>
 80024de:	a31e      	add	r3, pc, #120	; (adr r3, 8002558 <torque_profile+0x398>)
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f7fe f84c 	bl	8000580 <__aeabi_dmul>
 80024e8:	4602      	mov	r2, r0
 80024ea:	460b      	mov	r3, r1
 80024ec:	4620      	mov	r0, r4
 80024ee:	4629      	mov	r1, r5
 80024f0:	f7fd fe90 	bl	8000214 <__adddf3>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	a318      	add	r3, pc, #96	; (adr r3, 8002560 <torque_profile+0x3a0>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f7fd fe87 	bl	8000214 <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe faf9 	bl	8000b04 <__aeabi_d2f>
 8002512:	4603      	mov	r3, r0
		}
	}
}
 8002514:	ee07 3a90 	vmov	s15, r3
 8002518:	eeb0 0a67 	vmov.f32	s0, s15
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002524:	f3af 8000 	nop.w
 8002528:	4d551d69 	.word	0x4d551d69
 800252c:	bf0f7510 	.word	0xbf0f7510
 8002530:	8d4fdf3b 	.word	0x8d4fdf3b
 8002534:	3f726e97 	.word	0x3f726e97
 8002538:	212d7732 	.word	0x212d7732
 800253c:	3fd8f41f 	.word	0x3fd8f41f
 8002540:	df3b645a 	.word	0xdf3b645a
 8002544:	40504d4f 	.word	0x40504d4f
 8002548:	88e368f1 	.word	0x88e368f1
 800254c:	3ef4f8b5 	.word	0x3ef4f8b5
 8002550:	b5dcc63f 	.word	0xb5dcc63f
 8002554:	3f907c84 	.word	0x3f907c84
 8002558:	ced91687 	.word	0xced91687
 800255c:	3ffb53f7 	.word	0x3ffb53f7
 8002560:	a9fbe76d 	.word	0xa9fbe76d
 8002564:	40513af1 	.word	0x40513af1

08002568 <T_gravity>:

float T_gravity(float position, bool IsDown, float G, bool IsRo) {
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002572:	4603      	mov	r3, r0
 8002574:	edc7 0a01 	vstr	s1, [r7, #4]
 8002578:	460a      	mov	r2, r1
 800257a:	72fb      	strb	r3, [r7, #11]
 800257c:	4613      	mov	r3, r2
 800257e:	72bb      	strb	r3, [r7, #10]

	//float k_angle = 1; // coefficient to determine the angle, this would be a cos function
	if (IsRo) {
 8002580:	7abb      	ldrb	r3, [r7, #10]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <T_gravity+0x24>
		return 0;
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	e05c      	b.n	8002646 <T_gravity+0xde>
	} else {
		if (!IsDown) {
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d028      	beq.n	80025ea <T_gravity+0x82>
			return G * cos(position) * G;
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fd ff99 	bl	80004d0 <__aeabi_f2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7fd ff94 	bl	80004d0 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	ec43 2b10 	vmov	d0, r2, r3
 80025b0:	f002 f95e 	bl	8004870 <cos>
 80025b4:	ec53 2b10 	vmov	r2, r3, d0
 80025b8:	4620      	mov	r0, r4
 80025ba:	4629      	mov	r1, r5
 80025bc:	f7fd ffe0 	bl	8000580 <__aeabi_dmul>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4614      	mov	r4, r2
 80025c6:	461d      	mov	r5, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7fd ff81 	bl	80004d0 <__aeabi_f2d>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4620      	mov	r0, r4
 80025d4:	4629      	mov	r1, r5
 80025d6:	f7fd ffd3 	bl	8000580 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fa8f 	bl	8000b04 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	e02d      	b.n	8002646 <T_gravity+0xde>
		} else {
			return -G * cos(position) * G;
 80025ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ee:	eef1 7a67 	vneg.f32	s15, s15
 80025f2:	ee17 3a90 	vmov	r3, s15
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff6a 	bl	80004d0 <__aeabi_f2d>
 80025fc:	4604      	mov	r4, r0
 80025fe:	460d      	mov	r5, r1
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7fd ff65 	bl	80004d0 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	ec43 2b10 	vmov	d0, r2, r3
 800260e:	f002 f92f 	bl	8004870 <cos>
 8002612:	ec53 2b10 	vmov	r2, r3, d0
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fd ffb1 	bl	8000580 <__aeabi_dmul>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4614      	mov	r4, r2
 8002624:	461d      	mov	r5, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fd ff52 	bl	80004d0 <__aeabi_f2d>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd ffa4 	bl	8000580 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4610      	mov	r0, r2
 800263e:	4619      	mov	r1, r3
 8002640:	f7fe fa60 	bl	8000b04 <__aeabi_d2f>
 8002644:	4603      	mov	r3, r0
		}

	}
}
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bdb0      	pop	{r4, r5, r7, pc}

08002654 <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002658:	e7fe      	b.n	8002658 <NMI_Handler+0x4>

0800265a <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800265e:	e7fe      	b.n	800265e <HardFault_Handler+0x4>

08002660 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002664:	e7fe      	b.n	8002664 <MemManage_Handler+0x4>

08002666 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 800266a:	e7fe      	b.n	800266a <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8002670:	e7fe      	b.n	8002670 <UsageFault_Handler+0x4>

08002672 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800268e:	b480      	push	{r7}
 8002690:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	indx++; // increment the indx in every millisecond
 80026a0:	4b0d      	ldr	r3, [pc, #52]	; (80026d8 <SysTick_Handler+0x3c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	4a0c      	ldr	r2, [pc, #48]	; (80026d8 <SysTick_Handler+0x3c>)
 80026a8:	6013      	str	r3, [r2, #0]
	if (indx == dt) {
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <SysTick_Handler+0x3c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <SysTick_Handler+0x40>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	d104      	bne.n	80026d0 <SysTick_Handler+0x34>

		Bimanual_MotorCtrl();
 80026c6:	f000 f817 	bl	80026f8 <Bimanual_MotorCtrl>
		indx = 0; // reset indx
 80026ca:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <SysTick_Handler+0x3c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80026d0:	f000 fc76 	bl	8002fc0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	200001cc 	.word	0x200001cc
 80026dc:	20000000 	.word	0x20000000

080026e0 <TIM1_CC_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_CC_IRQn 0 */

	/* USER CODE END TIM1_CC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM1_CC_IRQHandler+0x10>)
 80026e6:	f001 fddd 	bl	80042a4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_CC_IRQn 1 */

	/* USER CODE END TIM1_CC_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000034 	.word	0x20000034
 80026f4:	00000000 	.word	0x00000000

080026f8 <Bimanual_MotorCtrl>:

/* USER CODE BEGIN 1 */
void Bimanual_MotorCtrl(void) {
 80026f8:	b5b0      	push	{r4, r5, r7, lr}
 80026fa:	af00      	add	r7, sp, #0

	update_encoder(&enc_instance_M1, &htim1); // update the encoder1
 80026fc:	498c      	ldr	r1, [pc, #560]	; (8002930 <Bimanual_MotorCtrl+0x238>)
 80026fe:	488d      	ldr	r0, [pc, #564]	; (8002934 <Bimanual_MotorCtrl+0x23c>)
 8002700:	f7ff fbd6 	bl	8001eb0 <update_encoder>
	update_encoder(&enc_instance_M2, &htim4);
 8002704:	498c      	ldr	r1, [pc, #560]	; (8002938 <Bimanual_MotorCtrl+0x240>)
 8002706:	488d      	ldr	r0, [pc, #564]	; (800293c <Bimanual_MotorCtrl+0x244>)
 8002708:	f7ff fbd2 	bl	8001eb0 <update_encoder>

	motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 800270c:	4b89      	ldr	r3, [pc, #548]	; (8002934 <Bimanual_MotorCtrl+0x23c>)
 800270e:	ed93 7a00 	vldr	s14, [r3]
 8002712:	4b8b      	ldr	r3, [pc, #556]	; (8002940 <Bimanual_MotorCtrl+0x248>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271c:	4b89      	ldr	r3, [pc, #548]	; (8002944 <Bimanual_MotorCtrl+0x24c>)
 800271e:	edc3 7a00 	vstr	s15, [r3]
	motor2_vel = -enc_instance_M2.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 8002722:	4b86      	ldr	r3, [pc, #536]	; (800293c <Bimanual_MotorCtrl+0x244>)
 8002724:	edd3 7a00 	vldr	s15, [r3]
 8002728:	eeb1 7a67 	vneg.f32	s14, s15
 800272c:	4b84      	ldr	r3, [pc, #528]	; (8002940 <Bimanual_MotorCtrl+0x248>)
 800272e:	edd3 7a00 	vldr	s15, [r3]
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	4b84      	ldr	r3, [pc, #528]	; (8002948 <Bimanual_MotorCtrl+0x250>)
 8002738:	edc3 7a00 	vstr	s15, [r3]

	if (motor1_vel > 0.5) {
 800273c:	4b81      	ldr	r3, [pc, #516]	; (8002944 <Bimanual_MotorCtrl+0x24c>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	dd03      	ble.n	8002758 <Bimanual_MotorCtrl+0x60>
		IsDown = 1;
 8002750:	4b7e      	ldr	r3, [pc, #504]	; (800294c <Bimanual_MotorCtrl+0x254>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e00c      	b.n	8002772 <Bimanual_MotorCtrl+0x7a>
	} else if (motor1_vel < -0.5) {
 8002758:	4b7a      	ldr	r3, [pc, #488]	; (8002944 <Bimanual_MotorCtrl+0x24c>)
 800275a:	edd3 7a00 	vldr	s15, [r3]
 800275e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002762:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d502      	bpl.n	8002772 <Bimanual_MotorCtrl+0x7a>
		IsDown = 0;
 800276c:	4b77      	ldr	r3, [pc, #476]	; (800294c <Bimanual_MotorCtrl+0x254>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
	}

	if (IsDown) {
 8002772:	4b76      	ldr	r3, [pc, #472]	; (800294c <Bimanual_MotorCtrl+0x254>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00f      	beq.n	800279a <Bimanual_MotorCtrl+0xa2>

		motor1_vel = -motor1_vel;
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <Bimanual_MotorCtrl+0x24c>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	eef1 7a67 	vneg.f32	s15, s15
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <Bimanual_MotorCtrl+0x24c>)
 8002786:	edc3 7a00 	vstr	s15, [r3]
		motor2_vel = -motor2_vel;
 800278a:	4b6f      	ldr	r3, [pc, #444]	; (8002948 <Bimanual_MotorCtrl+0x250>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	eef1 7a67 	vneg.f32	s15, s15
 8002794:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <Bimanual_MotorCtrl+0x250>)
 8002796:	edc3 7a00 	vstr	s15, [r3]

	}

	motor1_pos = enc_instance_M1.position * Ticks_to_Deg; // from tick to degrees -> 360.0/(512.0*26.0)
 800279a:	4b66      	ldr	r3, [pc, #408]	; (8002934 <Bimanual_MotorCtrl+0x23c>)
 800279c:	ed93 7a01 	vldr	s14, [r3, #4]
 80027a0:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <Bimanual_MotorCtrl+0x258>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <Bimanual_MotorCtrl+0x25c>)
 80027ac:	edc3 7a00 	vstr	s15, [r3]
	motor2_pos = -enc_instance_M2.position * Ticks_to_Deg;
 80027b0:	4b62      	ldr	r3, [pc, #392]	; (800293c <Bimanual_MotorCtrl+0x244>)
 80027b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b6:	eeb1 7a67 	vneg.f32	s14, s15
 80027ba:	4b65      	ldr	r3, [pc, #404]	; (8002950 <Bimanual_MotorCtrl+0x258>)
 80027bc:	edd3 7a00 	vldr	s15, [r3]
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	4b64      	ldr	r3, [pc, #400]	; (8002958 <Bimanual_MotorCtrl+0x260>)
 80027c6:	edc3 7a00 	vstr	s15, [r3]

	T_Dis1 = dob1.T_dis;
 80027ca:	4b64      	ldr	r3, [pc, #400]	; (800295c <Bimanual_MotorCtrl+0x264>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4a64      	ldr	r2, [pc, #400]	; (8002960 <Bimanual_MotorCtrl+0x268>)
 80027d0:	6013      	str	r3, [r2, #0]
	T_Rec1 = rtob1.T_extern;
 80027d2:	4b64      	ldr	r3, [pc, #400]	; (8002964 <Bimanual_MotorCtrl+0x26c>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	4a64      	ldr	r2, [pc, #400]	; (8002968 <Bimanual_MotorCtrl+0x270>)
 80027d8:	6013      	str	r3, [r2, #0]

	T_Dis2 = dob2.T_dis;
 80027da:	4b64      	ldr	r3, [pc, #400]	; (800296c <Bimanual_MotorCtrl+0x274>)
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	4a64      	ldr	r2, [pc, #400]	; (8002970 <Bimanual_MotorCtrl+0x278>)
 80027e0:	6013      	str	r3, [r2, #0]
	T_Rec2 = rtob2.T_extern;
 80027e2:	4b64      	ldr	r3, [pc, #400]	; (8002974 <Bimanual_MotorCtrl+0x27c>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a64      	ldr	r2, [pc, #400]	; (8002978 <Bimanual_MotorCtrl+0x280>)
 80027e8:	6013      	str	r3, [r2, #0]

	T_P1 = torque_profile(motor1_pos, IsRo, IsDown) / (26.0 * 20.0);
 80027ea:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <Bimanual_MotorCtrl+0x25c>)
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	4b62      	ldr	r3, [pc, #392]	; (800297c <Bimanual_MotorCtrl+0x284>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4a55      	ldr	r2, [pc, #340]	; (800294c <Bimanual_MotorCtrl+0x254>)
 80027f6:	7812      	ldrb	r2, [r2, #0]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002800:	f7ff fcde 	bl	80021c0 <torque_profile>
 8002804:	ee10 3a10 	vmov	r3, s0
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe61 	bl	80004d0 <__aeabi_f2d>
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	4b5b      	ldr	r3, [pc, #364]	; (8002980 <Bimanual_MotorCtrl+0x288>)
 8002814:	f7fd ffde 	bl	80007d4 <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe f970 	bl	8000b04 <__aeabi_d2f>
 8002824:	4603      	mov	r3, r0
 8002826:	4a57      	ldr	r2, [pc, #348]	; (8002984 <Bimanual_MotorCtrl+0x28c>)
 8002828:	6013      	str	r3, [r2, #0]
	T_P2 = torque_profile(motor2_pos, IsRo, IsDown) / (26.0 * 20.0);
 800282a:	4b4b      	ldr	r3, [pc, #300]	; (8002958 <Bimanual_MotorCtrl+0x260>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	4b52      	ldr	r3, [pc, #328]	; (800297c <Bimanual_MotorCtrl+0x284>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4a45      	ldr	r2, [pc, #276]	; (800294c <Bimanual_MotorCtrl+0x254>)
 8002836:	7812      	ldrb	r2, [r2, #0]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	eeb0 0a67 	vmov.f32	s0, s15
 8002840:	f7ff fcbe 	bl	80021c0 <torque_profile>
 8002844:	ee10 3a10 	vmov	r3, s0
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fe41 	bl	80004d0 <__aeabi_f2d>
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <Bimanual_MotorCtrl+0x288>)
 8002854:	f7fd ffbe 	bl	80007d4 <__aeabi_ddiv>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4610      	mov	r0, r2
 800285e:	4619      	mov	r1, r3
 8002860:	f7fe f950 	bl	8000b04 <__aeabi_d2f>
 8002864:	4603      	mov	r3, r0
 8002866:	4a48      	ldr	r2, [pc, #288]	; (8002988 <Bimanual_MotorCtrl+0x290>)
 8002868:	6013      	str	r3, [r2, #0]

	T_P1 = 1;
 800286a:	4b46      	ldr	r3, [pc, #280]	; (8002984 <Bimanual_MotorCtrl+0x28c>)
 800286c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002870:	601a      	str	r2, [r3, #0]
	T_P2 = 1;
 8002872:	4b45      	ldr	r3, [pc, #276]	; (8002988 <Bimanual_MotorCtrl+0x290>)
 8002874:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002878:	601a      	str	r2, [r3, #0]

	T_G1 = T_gravity(motor1_pos, IsDown, G, IsRo) / 26;
 800287a:	4b36      	ldr	r3, [pc, #216]	; (8002954 <Bimanual_MotorCtrl+0x25c>)
 800287c:	edd3 7a00 	vldr	s15, [r3]
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <Bimanual_MotorCtrl+0x254>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4a41      	ldr	r2, [pc, #260]	; (800298c <Bimanual_MotorCtrl+0x294>)
 8002886:	ed92 7a00 	vldr	s14, [r2]
 800288a:	4a3c      	ldr	r2, [pc, #240]	; (800297c <Bimanual_MotorCtrl+0x284>)
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	4611      	mov	r1, r2
 8002890:	eef0 0a47 	vmov.f32	s1, s14
 8002894:	4618      	mov	r0, r3
 8002896:	eeb0 0a67 	vmov.f32	s0, s15
 800289a:	f7ff fe65 	bl	8002568 <T_gravity>
 800289e:	eeb0 7a40 	vmov.f32	s14, s0
 80028a2:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80028a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <Bimanual_MotorCtrl+0x298>)
 80028ac:	edc3 7a00 	vstr	s15, [r3]
	T_G2 = T_gravity(motor2_pos, IsDown, G, IsRo) / 26;
 80028b0:	4b29      	ldr	r3, [pc, #164]	; (8002958 <Bimanual_MotorCtrl+0x260>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	4b25      	ldr	r3, [pc, #148]	; (800294c <Bimanual_MotorCtrl+0x254>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4a34      	ldr	r2, [pc, #208]	; (800298c <Bimanual_MotorCtrl+0x294>)
 80028bc:	ed92 7a00 	vldr	s14, [r2]
 80028c0:	4a2e      	ldr	r2, [pc, #184]	; (800297c <Bimanual_MotorCtrl+0x284>)
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	eef0 0a47 	vmov.f32	s1, s14
 80028ca:	4618      	mov	r0, r3
 80028cc:	eeb0 0a67 	vmov.f32	s0, s15
 80028d0:	f7ff fe4a 	bl	8002568 <T_gravity>
 80028d4:	eeb0 7a40 	vmov.f32	s14, s0
 80028d8:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80028dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <Bimanual_MotorCtrl+0x29c>)
 80028e2:	edc3 7a00 	vstr	s15, [r3]

	T_G1 = 0;
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <Bimanual_MotorCtrl+0x298>)
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
	T_G2 = 0;
 80028ee:	4b29      	ldr	r3, [pc, #164]	; (8002994 <Bimanual_MotorCtrl+0x29c>)
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]

	if (IsDown) {
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <Bimanual_MotorCtrl+0x254>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d04e      	beq.n	800299c <Bimanual_MotorCtrl+0x2a4>
		k_s = -fabs(k_s);
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <Bimanual_MotorCtrl+0x2a0>)
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	eef0 7ae7 	vabs.f32	s15, s15
 8002908:	ee17 0a90 	vmov	r0, s15
 800290c:	f7fd fde0 	bl	80004d0 <__aeabi_f2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f8f4 	bl	8000b04 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef1 7a67 	vneg.f32	s15, s15
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <Bimanual_MotorCtrl+0x2a0>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
 800292c:	e03e      	b.n	80029ac <Bimanual_MotorCtrl+0x2b4>
 800292e:	bf00      	nop
 8002930:	20000034 	.word	0x20000034
 8002934:	200000cc 	.word	0x200000cc
 8002938:	20000080 	.word	0x20000080
 800293c:	200000dc 	.word	0x200000dc
 8002940:	200001a4 	.word	0x200001a4
 8002944:	200001bc 	.word	0x200001bc
 8002948:	200001c0 	.word	0x200001c0
 800294c:	200001b1 	.word	0x200001b1
 8002950:	200001ac 	.word	0x200001ac
 8002954:	200001c4 	.word	0x200001c4
 8002958:	200001c8 	.word	0x200001c8
 800295c:	2000011c 	.word	0x2000011c
 8002960:	200001d4 	.word	0x200001d4
 8002964:	20000130 	.word	0x20000130
 8002968:	200001d8 	.word	0x200001d8
 800296c:	2000014c 	.word	0x2000014c
 8002970:	200001ec 	.word	0x200001ec
 8002974:	20000160 	.word	0x20000160
 8002978:	200001f0 	.word	0x200001f0
 800297c:	200001b0 	.word	0x200001b0
 8002980:	40804000 	.word	0x40804000
 8002984:	200001dc 	.word	0x200001dc
 8002988:	200001f4 	.word	0x200001f4
 800298c:	200001b8 	.word	0x200001b8
 8002990:	200001e0 	.word	0x200001e0
 8002994:	200001f8 	.word	0x200001f8
 8002998:	20000004 	.word	0x20000004
		//k_sd = +fabs(k_sd);
	} else {
		k_s = fabs(k_s);
 800299c:	4bcc      	ldr	r3, [pc, #816]	; (8002cd0 <Bimanual_MotorCtrl+0x5d8>)
 800299e:	edd3 7a00 	vldr	s15, [r3]
 80029a2:	eef0 7ae7 	vabs.f32	s15, s15
 80029a6:	4bca      	ldr	r3, [pc, #808]	; (8002cd0 <Bimanual_MotorCtrl+0x5d8>)
 80029a8:	edc3 7a00 	vstr	s15, [r3]
		//k_sd = -fabs(k_sd);
	}

	apply_pid(&pid_instance_M1, (T_P1 - T_G1 - T_Rec1), dt);
 80029ac:	4bc9      	ldr	r3, [pc, #804]	; (8002cd4 <Bimanual_MotorCtrl+0x5dc>)
 80029ae:	ed93 7a00 	vldr	s14, [r3]
 80029b2:	4bc9      	ldr	r3, [pc, #804]	; (8002cd8 <Bimanual_MotorCtrl+0x5e0>)
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029bc:	4bc7      	ldr	r3, [pc, #796]	; (8002cdc <Bimanual_MotorCtrl+0x5e4>)
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c6:	4bc6      	ldr	r3, [pc, #792]	; (8002ce0 <Bimanual_MotorCtrl+0x5e8>)
 80029c8:	ed93 7a00 	vldr	s14, [r3]
 80029cc:	eef0 0a47 	vmov.f32	s1, s14
 80029d0:	eeb0 0a67 	vmov.f32	s0, s15
 80029d4:	48c3      	ldr	r0, [pc, #780]	; (8002ce4 <Bimanual_MotorCtrl+0x5ec>)
 80029d6:	f7ff f9cb 	bl	8001d70 <apply_pid>
	apply_pid(&pid_instance_M2,
			(T_P2 - T_G2 - T_Rec2 +k_s * (motor1_pos - motor2_pos)
 80029da:	4bc3      	ldr	r3, [pc, #780]	; (8002ce8 <Bimanual_MotorCtrl+0x5f0>)
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	4bc2      	ldr	r3, [pc, #776]	; (8002cec <Bimanual_MotorCtrl+0x5f4>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ea:	4bc1      	ldr	r3, [pc, #772]	; (8002cf0 <Bimanual_MotorCtrl+0x5f8>)
 80029ec:	edd3 7a00 	vldr	s15, [r3]
 80029f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029f4:	4bbf      	ldr	r3, [pc, #764]	; (8002cf4 <Bimanual_MotorCtrl+0x5fc>)
 80029f6:	edd3 6a00 	vldr	s13, [r3]
 80029fa:	4bbf      	ldr	r3, [pc, #764]	; (8002cf8 <Bimanual_MotorCtrl+0x600>)
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a04:	4bb2      	ldr	r3, [pc, #712]	; (8002cd0 <Bimanual_MotorCtrl+0x5d8>)
 8002a06:	edd3 7a00 	vldr	s15, [r3]
 8002a0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
					+k_sd*(motor1_vel -motor2_vel)), dt);
 8002a12:	4bba      	ldr	r3, [pc, #744]	; (8002cfc <Bimanual_MotorCtrl+0x604>)
 8002a14:	edd3 6a00 	vldr	s13, [r3]
 8002a18:	4bb9      	ldr	r3, [pc, #740]	; (8002d00 <Bimanual_MotorCtrl+0x608>)
 8002a1a:	edd3 7a00 	vldr	s15, [r3]
 8002a1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002a22:	4bb8      	ldr	r3, [pc, #736]	; (8002d04 <Bimanual_MotorCtrl+0x60c>)
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
	apply_pid(&pid_instance_M2,
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	4bab      	ldr	r3, [pc, #684]	; (8002ce0 <Bimanual_MotorCtrl+0x5e8>)
 8002a32:	ed93 7a00 	vldr	s14, [r3]
 8002a36:	eef0 0a47 	vmov.f32	s1, s14
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	48b2      	ldr	r0, [pc, #712]	; (8002d08 <Bimanual_MotorCtrl+0x610>)
 8002a40:	f7ff f996 	bl	8001d70 <apply_pid>

	Ia_ref1 = ((pid_instance_M1.output) * (0.25 / 5000.0) + T_Dis1) / k_T; // master
 8002a44:	4ba7      	ldr	r3, [pc, #668]	; (8002ce4 <Bimanual_MotorCtrl+0x5ec>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd41 	bl	80004d0 <__aeabi_f2d>
 8002a4e:	a39e      	add	r3, pc, #632	; (adr r3, 8002cc8 <Bimanual_MotorCtrl+0x5d0>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fd94 	bl	8000580 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4baa      	ldr	r3, [pc, #680]	; (8002d0c <Bimanual_MotorCtrl+0x614>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd33 	bl	80004d0 <__aeabi_f2d>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4620      	mov	r0, r4
 8002a70:	4629      	mov	r1, r5
 8002a72:	f7fd fbcf 	bl	8000214 <__adddf3>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4614      	mov	r4, r2
 8002a7c:	461d      	mov	r5, r3
 8002a7e:	4ba4      	ldr	r3, [pc, #656]	; (8002d10 <Bimanual_MotorCtrl+0x618>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd24 	bl	80004d0 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	4629      	mov	r1, r5
 8002a90:	f7fd fea0 	bl	80007d4 <__aeabi_ddiv>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f7fe f832 	bl	8000b04 <__aeabi_d2f>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4a9c      	ldr	r2, [pc, #624]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002aa4:	6013      	str	r3, [r2, #0]
	Ia_ref2 = ((pid_instance_M2.output) * (0.25 / 5000.0) + T_Dis2) / k_T; // slave
 8002aa6:	4b98      	ldr	r3, [pc, #608]	; (8002d08 <Bimanual_MotorCtrl+0x610>)
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd10 	bl	80004d0 <__aeabi_f2d>
 8002ab0:	a385      	add	r3, pc, #532	; (adr r3, 8002cc8 <Bimanual_MotorCtrl+0x5d0>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fd63 	bl	8000580 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	461d      	mov	r5, r3
 8002ac2:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <Bimanual_MotorCtrl+0x620>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd02 	bl	80004d0 <__aeabi_f2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fb9e 	bl	8000214 <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	4b8b      	ldr	r3, [pc, #556]	; (8002d10 <Bimanual_MotorCtrl+0x618>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd fcf3 	bl	80004d0 <__aeabi_f2d>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4620      	mov	r0, r4
 8002af0:	4629      	mov	r1, r5
 8002af2:	f7fd fe6f 	bl	80007d4 <__aeabi_ddiv>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	f7fe f801 	bl	8000b04 <__aeabi_d2f>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4a85      	ldr	r2, [pc, #532]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002b06:	6013      	str	r3, [r2, #0]

	if (fabs(Ia_ref1) > I_max) {
 8002b08:	4b82      	ldr	r3, [pc, #520]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b12:	4b83      	ldr	r3, [pc, #524]	; (8002d20 <Bimanual_MotorCtrl+0x628>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	dd2d      	ble.n	8002b7e <Bimanual_MotorCtrl+0x486>
		Ia_ref1 = (Ia_ref1 / fabs(Ia_ref1)) * I_max;
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fd fcd2 	bl	80004d0 <__aeabi_f2d>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	460d      	mov	r5, r1
 8002b30:	4b78      	ldr	r3, [pc, #480]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002b32:	edd3 7a00 	vldr	s15, [r3]
 8002b36:	eef0 7ae7 	vabs.f32	s15, s15
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fcc7 	bl	80004d0 <__aeabi_f2d>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4620      	mov	r0, r4
 8002b48:	4629      	mov	r1, r5
 8002b4a:	f7fd fe43 	bl	80007d4 <__aeabi_ddiv>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4614      	mov	r4, r2
 8002b54:	461d      	mov	r5, r3
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <Bimanual_MotorCtrl+0x628>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcb8 	bl	80004d0 <__aeabi_f2d>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4620      	mov	r0, r4
 8002b66:	4629      	mov	r1, r5
 8002b68:	f7fd fd0a 	bl	8000580 <__aeabi_dmul>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	f7fd ffc6 	bl	8000b04 <__aeabi_d2f>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	4a66      	ldr	r2, [pc, #408]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002b7c:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) > I_max) {
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	eeb0 7ae7 	vabs.f32	s14, s15
 8002b88:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <Bimanual_MotorCtrl+0x628>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	dd2d      	ble.n	8002bf4 <Bimanual_MotorCtrl+0x4fc>
		Ia_ref2 = (Ia_ref2 / fabs(Ia_ref2)) * I_max;
 8002b98:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fc97 	bl	80004d0 <__aeabi_f2d>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	460d      	mov	r5, r1
 8002ba6:	4b5d      	ldr	r3, [pc, #372]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eef0 7ae7 	vabs.f32	s15, s15
 8002bb0:	ee17 0a90 	vmov	r0, s15
 8002bb4:	f7fd fc8c 	bl	80004d0 <__aeabi_f2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fe08 	bl	80007d4 <__aeabi_ddiv>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4614      	mov	r4, r2
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4b54      	ldr	r3, [pc, #336]	; (8002d20 <Bimanual_MotorCtrl+0x628>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fc7d 	bl	80004d0 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fd fccf 	bl	8000580 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fd ff8b 	bl	8000b04 <__aeabi_d2f>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002bf2:	6013      	str	r3, [r2, #0]
	}

	if (motor1_vel > -1.0) {
 8002bf4:	4b41      	ldr	r3, [pc, #260]	; (8002cfc <Bimanual_MotorCtrl+0x604>)
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c06:	dd03      	ble.n	8002c10 <Bimanual_MotorCtrl+0x518>
		Ia_ref1 = 0;
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
		//Ia_ref2 = 0;
	}

	update_dob(&dob1, Ia_ref1, motor1_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 8002c10:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002c12:	edd3 6a00 	vldr	s13, [r3]
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <Bimanual_MotorCtrl+0x604>)
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <Bimanual_MotorCtrl+0x62c>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c2e:	eef0 0a67 	vmov.f32	s1, s15
 8002c32:	eeb0 0a66 	vmov.f32	s0, s13
 8002c36:	483c      	ldr	r0, [pc, #240]	; (8002d28 <Bimanual_MotorCtrl+0x630>)
 8002c38:	f7fe fd6c 	bl	8001714 <update_dob>
	update_rtob(&rtob1, Ia_ref1, motor1_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <Bimanual_MotorCtrl+0x61c>)
 8002c3e:	edd3 6a00 	vldr	s13, [r3]
 8002c42:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <Bimanual_MotorCtrl+0x604>)
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	4b36      	ldr	r3, [pc, #216]	; (8002d24 <Bimanual_MotorCtrl+0x62c>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c52:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002c56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c5a:	eef0 0a67 	vmov.f32	s1, s15
 8002c5e:	eeb0 0a66 	vmov.f32	s0, s13
 8002c62:	4832      	ldr	r0, [pc, #200]	; (8002d2c <Bimanual_MotorCtrl+0x634>)
 8002c64:	f7ff f98e 	bl	8001f84 <update_rtob>

	update_dob(&dob2, Ia_ref2, motor2_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 8002c68:	4b2c      	ldr	r3, [pc, #176]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002c6a:	edd3 6a00 	vldr	s13, [r3]
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <Bimanual_MotorCtrl+0x608>)
 8002c70:	ed93 7a00 	vldr	s14, [r3]
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <Bimanual_MotorCtrl+0x62c>)
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c7e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c86:	eef0 0a67 	vmov.f32	s1, s15
 8002c8a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c8e:	4828      	ldr	r0, [pc, #160]	; (8002d30 <Bimanual_MotorCtrl+0x638>)
 8002c90:	f7fe fd40 	bl	8001714 <update_dob>
	update_rtob(&rtob2, Ia_ref2, motor2_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 8002c94:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <Bimanual_MotorCtrl+0x624>)
 8002c96:	edd3 6a00 	vldr	s13, [r3]
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <Bimanual_MotorCtrl+0x608>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <Bimanual_MotorCtrl+0x62c>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002caa:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb2:	eef0 0a67 	vmov.f32	s1, s15
 8002cb6:	eeb0 0a66 	vmov.f32	s0, s13
 8002cba:	481e      	ldr	r0, [pc, #120]	; (8002d34 <Bimanual_MotorCtrl+0x63c>)
 8002cbc:	f7ff f962 	bl	8001f84 <update_rtob>

	if (IsDown) {
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <Bimanual_MotorCtrl+0x640>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	e039      	b.n	8002d3c <Bimanual_MotorCtrl+0x644>
 8002cc8:	eb1c432d 	.word	0xeb1c432d
 8002ccc:	3f0a36e2 	.word	0x3f0a36e2
 8002cd0:	20000004 	.word	0x20000004
 8002cd4:	200001dc 	.word	0x200001dc
 8002cd8:	200001e0 	.word	0x200001e0
 8002cdc:	200001d8 	.word	0x200001d8
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	200000ec 	.word	0x200000ec
 8002ce8:	200001f4 	.word	0x200001f4
 8002cec:	200001f8 	.word	0x200001f8
 8002cf0:	200001f0 	.word	0x200001f0
 8002cf4:	200001c4 	.word	0x200001c4
 8002cf8:	200001c8 	.word	0x200001c8
 8002cfc:	200001bc 	.word	0x200001bc
 8002d00:	200001c0 	.word	0x200001c0
 8002d04:	20000008 	.word	0x20000008
 8002d08:	20000104 	.word	0x20000104
 8002d0c:	200001d4 	.word	0x200001d4
 8002d10:	08005900 	.word	0x08005900
 8002d14:	200001d0 	.word	0x200001d0
 8002d18:	200001ec 	.word	0x200001ec
 8002d1c:	200001e8 	.word	0x200001e8
 8002d20:	08005904 	.word	0x08005904
 8002d24:	200001a8 	.word	0x200001a8
 8002d28:	2000011c 	.word	0x2000011c
 8002d2c:	20000130 	.word	0x20000130
 8002d30:	2000014c 	.word	0x2000014c
 8002d34:	20000160 	.word	0x20000160
 8002d38:	200001b1 	.word	0x200001b1
 8002d3c:	d026      	beq.n	8002d8c <Bimanual_MotorCtrl+0x694>
		if (Ia_ref1 < 0) {
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <Bimanual_MotorCtrl+0x7a8>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	d505      	bpl.n	8002d5a <Bimanual_MotorCtrl+0x662>
			HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin, GPIO_PIN_SET);
 8002d4e:	2201      	movs	r2, #1
 8002d50:	2110      	movs	r1, #16
 8002d52:	4854      	ldr	r0, [pc, #336]	; (8002ea4 <Bimanual_MotorCtrl+0x7ac>)
 8002d54:	f000 fca2 	bl	800369c <HAL_GPIO_WritePin>
 8002d58:	e004      	b.n	8002d64 <Bimanual_MotorCtrl+0x66c>
		} else {
			HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin, GPIO_PIN_RESET);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2110      	movs	r1, #16
 8002d5e:	4851      	ldr	r0, [pc, #324]	; (8002ea4 <Bimanual_MotorCtrl+0x7ac>)
 8002d60:	f000 fc9c 	bl	800369c <HAL_GPIO_WritePin>
		}

		if (Ia_ref2 < 0) {
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <Bimanual_MotorCtrl+0x7b0>)
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d72:	d505      	bpl.n	8002d80 <Bimanual_MotorCtrl+0x688>
			HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin, GPIO_PIN_RESET);
 8002d74:	2200      	movs	r2, #0
 8002d76:	2104      	movs	r1, #4
 8002d78:	484c      	ldr	r0, [pc, #304]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002d7a:	f000 fc8f 	bl	800369c <HAL_GPIO_WritePin>
 8002d7e:	e02b      	b.n	8002dd8 <Bimanual_MotorCtrl+0x6e0>
		} else {
			HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin, GPIO_PIN_SET);
 8002d80:	2201      	movs	r2, #1
 8002d82:	2104      	movs	r1, #4
 8002d84:	4849      	ldr	r0, [pc, #292]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002d86:	f000 fc89 	bl	800369c <HAL_GPIO_WritePin>
 8002d8a:	e025      	b.n	8002dd8 <Bimanual_MotorCtrl+0x6e0>
		}
	} else {
		if (Ia_ref1 > 0) {
 8002d8c:	4b44      	ldr	r3, [pc, #272]	; (8002ea0 <Bimanual_MotorCtrl+0x7a8>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd05      	ble.n	8002da8 <Bimanual_MotorCtrl+0x6b0>
			HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin, GPIO_PIN_SET);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2110      	movs	r1, #16
 8002da0:	4840      	ldr	r0, [pc, #256]	; (8002ea4 <Bimanual_MotorCtrl+0x7ac>)
 8002da2:	f000 fc7b 	bl	800369c <HAL_GPIO_WritePin>
 8002da6:	e004      	b.n	8002db2 <Bimanual_MotorCtrl+0x6ba>
		} else {
			HAL_GPIO_WritePin(M1_Dir_GPIO_Port, M1_Dir_Pin, GPIO_PIN_RESET);
 8002da8:	2200      	movs	r2, #0
 8002daa:	2110      	movs	r1, #16
 8002dac:	483d      	ldr	r0, [pc, #244]	; (8002ea4 <Bimanual_MotorCtrl+0x7ac>)
 8002dae:	f000 fc75 	bl	800369c <HAL_GPIO_WritePin>
		}

		if (Ia_ref2 > 0) {
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <Bimanual_MotorCtrl+0x7b0>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	dd05      	ble.n	8002dce <Bimanual_MotorCtrl+0x6d6>
			HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin, GPIO_PIN_RESET);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2104      	movs	r1, #4
 8002dc6:	4839      	ldr	r0, [pc, #228]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002dc8:	f000 fc68 	bl	800369c <HAL_GPIO_WritePin>
 8002dcc:	e004      	b.n	8002dd8 <Bimanual_MotorCtrl+0x6e0>
		} else {
			HAL_GPIO_WritePin(M2_Dir_GPIO_Port, M2_Dir_Pin, GPIO_PIN_SET);
 8002dce:	2201      	movs	r2, #1
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	4836      	ldr	r0, [pc, #216]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002dd4:	f000 fc62 	bl	800369c <HAL_GPIO_WritePin>
		}
	}

	volt1 = fabs(Ia_ref1 * 32767 / I_max);
 8002dd8:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <Bimanual_MotorCtrl+0x7a8>)
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002eb0 <Bimanual_MotorCtrl+0x7b8>
 8002de2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002de6:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <Bimanual_MotorCtrl+0x7bc>)
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002df0:	eef0 7ae7 	vabs.f32	s15, s15
 8002df4:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <Bimanual_MotorCtrl+0x7c0>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
	volt2 = fabs(Ia_ref2 * 32767 / I_max);
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <Bimanual_MotorCtrl+0x7b0>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002eb0 <Bimanual_MotorCtrl+0x7b8>
 8002e04:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <Bimanual_MotorCtrl+0x7bc>)
 8002e0a:	ed93 7a00 	vldr	s14, [r3]
 8002e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e12:	eef0 7ae7 	vabs.f32	s15, s15
 8002e16:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <Bimanual_MotorCtrl+0x7c4>)
 8002e18:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(M1_En_GPIO_Port, M1_En_Pin, GPIO_PIN_SET); // M_Driver1_Enable
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2120      	movs	r1, #32
 8002e20:	4820      	ldr	r0, [pc, #128]	; (8002ea4 <Bimanual_MotorCtrl+0x7ac>)
 8002e22:	f000 fc3b 	bl	800369c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_En_GPIO_Port, M2_En_Pin, GPIO_PIN_SET); // M_Driver1_Enable
 8002e26:	2201      	movs	r2, #1
 8002e28:	2108      	movs	r1, #8
 8002e2a:	4820      	ldr	r0, [pc, #128]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002e2c:	f000 fc36 	bl	800369c <HAL_GPIO_WritePin>

	if (fabs(motor1_pos - motor2_pos) < 1.0) {
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <Bimanual_MotorCtrl+0x7c8>)
 8002e32:	ed93 7a00 	vldr	s14, [r3]
 8002e36:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <Bimanual_MotorCtrl+0x7cc>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e40:	eef0 7ae7 	vabs.f32	s15, s15
 8002e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e50:	d505      	bpl.n	8002e5e <Bimanual_MotorCtrl+0x766>
		HAL_GPIO_WritePin(M2_En_GPIO_Port, M2_En_Pin, GPIO_PIN_RESET); // M_Driver1_Enable
 8002e52:	2200      	movs	r2, #0
 8002e54:	2108      	movs	r1, #8
 8002e56:	4815      	ldr	r0, [pc, #84]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002e58:	f000 fc20 	bl	800369c <HAL_GPIO_WritePin>
 8002e5c:	e004      	b.n	8002e68 <Bimanual_MotorCtrl+0x770>
	} else {
		HAL_GPIO_WritePin(M2_En_GPIO_Port, M2_En_Pin, GPIO_PIN_SET); // M_Driver1_Enable
 8002e5e:	2201      	movs	r2, #1
 8002e60:	2108      	movs	r1, #8
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <Bimanual_MotorCtrl+0x7b4>)
 8002e64:	f000 fc1a 	bl	800369c <HAL_GPIO_WritePin>
	}

	GP8XXX_IIC_setDACOutVoltage(&gp8211s_1, volt1, 0);
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <Bimanual_MotorCtrl+0x7c0>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e72:	ee17 3a90 	vmov	r3, s15
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2200      	movs	r2, #0
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4812      	ldr	r0, [pc, #72]	; (8002ec8 <Bimanual_MotorCtrl+0x7d0>)
 8002e7e:	f7fe fb87 	bl	8001590 <GP8XXX_IIC_setDACOutVoltage>
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_2, volt2, 0); // offset 72 points
 8002e82:	4b0e      	ldr	r3, [pc, #56]	; (8002ebc <Bimanual_MotorCtrl+0x7c4>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8c:	ee17 3a90 	vmov	r3, s15
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	480d      	ldr	r0, [pc, #52]	; (8002ecc <Bimanual_MotorCtrl+0x7d4>)
 8002e98:	f7fe fb7a 	bl	8001590 <GP8XXX_IIC_setDACOutVoltage>

}
 8002e9c:	bf00      	nop
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea0:	200001d0 	.word	0x200001d0
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	200001e8 	.word	0x200001e8
 8002eac:	40020000 	.word	0x40020000
 8002eb0:	46fffe00 	.word	0x46fffe00
 8002eb4:	08005904 	.word	0x08005904
 8002eb8:	200001e4 	.word	0x200001e4
 8002ebc:	200001fc 	.word	0x200001fc
 8002ec0:	200001c4 	.word	0x200001c4
 8002ec4:	200001c8 	.word	0x200001c8
 8002ec8:	2000017c 	.word	0x2000017c
 8002ecc:	20000190 	.word	0x20000190

08002ed0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <SystemInit+0x20>)
 8002ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <SystemInit+0x20>)
 8002edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef8:	f7ff ffea 	bl	8002ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002efc:	480c      	ldr	r0, [pc, #48]	; (8002f30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f00:	4a0d      	ldr	r2, [pc, #52]	; (8002f38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f04:	e002      	b.n	8002f0c <LoopCopyDataInit>

08002f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f0a:	3304      	adds	r3, #4

08002f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f10:	d3f9      	bcc.n	8002f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f12:	4a0a      	ldr	r2, [pc, #40]	; (8002f3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f14:	4c0a      	ldr	r4, [pc, #40]	; (8002f40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f18:	e001      	b.n	8002f1e <LoopFillZerobss>

08002f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f1c:	3204      	adds	r2, #4

08002f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f20:	d3fb      	bcc.n	8002f1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f22:	f001 fc7f 	bl	8004824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f26:	f7fe fc61 	bl	80017ec <main>
  bx  lr    
 8002f2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f2c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f34:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002f38:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 8002f3c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002f40:	20000204 	.word	0x20000204

08002f44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f44:	e7fe      	b.n	8002f44 <ADC_IRQHandler>

08002f46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f000 f928 	bl	80031a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f50:	200f      	movs	r0, #15
 8002f52:	f000 f805 	bl	8002f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f56:	f7ff f88f 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f68:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_InitTick+0x54>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_InitTick+0x58>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4619      	mov	r1, r3
 8002f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f943 	bl	800320a <HAL_SYSTICK_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e00e      	b.n	8002fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b0f      	cmp	r3, #15
 8002f92:	d80a      	bhi.n	8002faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f94:	2200      	movs	r2, #0
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9c:	f000 f90b 	bl	80031b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <HAL_InitTick+0x5c>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	20000014 	.word	0x20000014
 8002fbc:	20000010 	.word	0x20000010

08002fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x20>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000014 	.word	0x20000014
 8002fe4:	20000200 	.word	0x20000200

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000200 	.word	0x20000200

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	4313      	orrs	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x40>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00
 8003044:	05fa0000 	.word	0x05fa0000

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	; (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	490c      	ldr	r1, [pc, #48]	; (80030ec <__NVIC_SetPriority+0x4c>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4908      	ldr	r1, [pc, #32]	; (80030f0 <__NVIC_SetPriority+0x50>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	3b04      	subs	r3, #4
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	; 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	401a      	ands	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43d9      	mvns	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	4313      	orrs	r3, r2
         );
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	; 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800316c:	d301      	bcc.n	8003172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003172:	4a0a      	ldr	r2, [pc, #40]	; (800319c <SysTick_Config+0x40>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317a:	210f      	movs	r1, #15
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f7ff ff8e 	bl	80030a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <SysTick_Config+0x40>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318a:	4b04      	ldr	r3, [pc, #16]	; (800319c <SysTick_Config+0x40>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff29 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff3e 	bl	8003048 <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff8e 	bl	80030f4 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5d 	bl	80030a0 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff31 	bl	8003064 <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa2 	bl	800315c <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003228:	f3bf 8f5f 	dmb	sy
}
 800322c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_MPU_Disable+0x28>)
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	4a06      	ldr	r2, [pc, #24]	; (800324c <HAL_MPU_Disable+0x28>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_MPU_Disable+0x2c>)
 800323c:	2200      	movs	r2, #0
 800323e:	605a      	str	r2, [r3, #4]
}
 8003240:	bf00      	nop
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	e000ed00 	.word	0xe000ed00
 8003250:	e000ed90 	.word	0xe000ed90

08003254 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_MPU_Enable+0x38>)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_MPU_Enable+0x3c>)
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <HAL_MPU_Enable+0x3c>)
 800326c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003270:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003272:	f3bf 8f4f 	dsb	sy
}
 8003276:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003278:	f3bf 8f6f 	isb	sy
}
 800327c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed90 	.word	0xe000ed90
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	785a      	ldrb	r2, [r3, #1]
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_MPU_ConfigRegion+0x7c>)
 80032a2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80032a4:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_MPU_ConfigRegion+0x7c>)
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4a19      	ldr	r2, [pc, #100]	; (8003310 <HAL_MPU_ConfigRegion+0x7c>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80032b0:	4a17      	ldr	r2, [pc, #92]	; (8003310 <HAL_MPU_ConfigRegion+0x7c>)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	7b1b      	ldrb	r3, [r3, #12]
 80032bc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	7adb      	ldrb	r3, [r3, #11]
 80032c2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	7a9b      	ldrb	r3, [r3, #10]
 80032ca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7b5b      	ldrb	r3, [r3, #13]
 80032d2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	7b9b      	ldrb	r3, [r3, #14]
 80032da:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7bdb      	ldrb	r3, [r3, #15]
 80032e2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7a5b      	ldrb	r3, [r3, #9]
 80032ea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7a1b      	ldrb	r3, [r3, #8]
 80032f2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032f4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032fc:	4a04      	ldr	r2, [pc, #16]	; (8003310 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032fe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003300:	6113      	str	r3, [r2, #16]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000ed90 	.word	0xe000ed90

08003314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003314:	b480      	push	{r7}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003322:	2300      	movs	r3, #0
 8003324:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800332a:	2300      	movs	r3, #0
 800332c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	e175      	b.n	8003620 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003334:	2201      	movs	r2, #1
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	429a      	cmp	r2, r3
 800334e:	f040 8164 	bne.w	800361a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b01      	cmp	r3, #1
 800335c:	d005      	beq.n	800336a <HAL_GPIO_Init+0x56>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d130      	bne.n	80033cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4013      	ands	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033a0:	2201      	movs	r2, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 0201 	and.w	r2, r3, #1
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0303 	and.w	r3, r3, #3
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d017      	beq.n	8003408 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2203      	movs	r2, #3
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4013      	ands	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d123      	bne.n	800345c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	08da      	lsrs	r2, r3, #3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3208      	adds	r2, #8
 800341c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	220f      	movs	r2, #15
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	69b9      	ldr	r1, [r7, #24]
 8003458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	2203      	movs	r2, #3
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0203 	and.w	r2, r3, #3
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 80be 	beq.w	800361a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	4b66      	ldr	r3, [pc, #408]	; (8003638 <HAL_GPIO_Init+0x324>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a65      	ldr	r2, [pc, #404]	; (8003638 <HAL_GPIO_Init+0x324>)
 80034a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b63      	ldr	r3, [pc, #396]	; (8003638 <HAL_GPIO_Init+0x324>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034b6:	4a61      	ldr	r2, [pc, #388]	; (800363c <HAL_GPIO_Init+0x328>)
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	089b      	lsrs	r3, r3, #2
 80034bc:	3302      	adds	r3, #2
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	220f      	movs	r2, #15
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_GPIO_Init+0x32c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d037      	beq.n	8003552 <HAL_GPIO_Init+0x23e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a57      	ldr	r2, [pc, #348]	; (8003644 <HAL_GPIO_Init+0x330>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_GPIO_Init+0x23a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_GPIO_Init+0x334>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02b      	beq.n	800354a <HAL_GPIO_Init+0x236>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a55      	ldr	r2, [pc, #340]	; (800364c <HAL_GPIO_Init+0x338>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d025      	beq.n	8003546 <HAL_GPIO_Init+0x232>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a54      	ldr	r2, [pc, #336]	; (8003650 <HAL_GPIO_Init+0x33c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01f      	beq.n	8003542 <HAL_GPIO_Init+0x22e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a53      	ldr	r2, [pc, #332]	; (8003654 <HAL_GPIO_Init+0x340>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d019      	beq.n	800353e <HAL_GPIO_Init+0x22a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a52      	ldr	r2, [pc, #328]	; (8003658 <HAL_GPIO_Init+0x344>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0x226>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a51      	ldr	r2, [pc, #324]	; (800365c <HAL_GPIO_Init+0x348>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00d      	beq.n	8003536 <HAL_GPIO_Init+0x222>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a50      	ldr	r2, [pc, #320]	; (8003660 <HAL_GPIO_Init+0x34c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x21e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4f      	ldr	r2, [pc, #316]	; (8003664 <HAL_GPIO_Init+0x350>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_GPIO_Init+0x21a>
 800352a:	2309      	movs	r3, #9
 800352c:	e012      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800352e:	230a      	movs	r3, #10
 8003530:	e010      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003532:	2308      	movs	r3, #8
 8003534:	e00e      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003536:	2307      	movs	r3, #7
 8003538:	e00c      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800353a:	2306      	movs	r3, #6
 800353c:	e00a      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800353e:	2305      	movs	r3, #5
 8003540:	e008      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003542:	2304      	movs	r3, #4
 8003544:	e006      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003546:	2303      	movs	r3, #3
 8003548:	e004      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800354a:	2302      	movs	r3, #2
 800354c:	e002      	b.n	8003554 <HAL_GPIO_Init+0x240>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_GPIO_Init+0x240>
 8003552:	2300      	movs	r3, #0
 8003554:	69fa      	ldr	r2, [r7, #28]
 8003556:	f002 0203 	and.w	r2, r2, #3
 800355a:	0092      	lsls	r2, r2, #2
 800355c:	4093      	lsls	r3, r2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003564:	4935      	ldr	r1, [pc, #212]	; (800363c <HAL_GPIO_Init+0x328>)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_GPIO_Init+0x354>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003596:	4a34      	ldr	r2, [pc, #208]	; (8003668 <HAL_GPIO_Init+0x354>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_GPIO_Init+0x354>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4013      	ands	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c0:	4a29      	ldr	r2, [pc, #164]	; (8003668 <HAL_GPIO_Init+0x354>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c6:	4b28      	ldr	r3, [pc, #160]	; (8003668 <HAL_GPIO_Init+0x354>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_GPIO_Init+0x354>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_GPIO_Init+0x354>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_GPIO_Init+0x354>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0f      	cmp	r3, #15
 8003624:	f67f ae86 	bls.w	8003334 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800
 800363c:	40013800 	.word	0x40013800
 8003640:	40020000 	.word	0x40020000
 8003644:	40020400 	.word	0x40020400
 8003648:	40020800 	.word	0x40020800
 800364c:	40020c00 	.word	0x40020c00
 8003650:	40021000 	.word	0x40021000
 8003654:	40021400 	.word	0x40021400
 8003658:	40021800 	.word	0x40021800
 800365c:	40021c00 	.word	0x40021c00
 8003660:	40022000 	.word	0x40022000
 8003664:	40022400 	.word	0x40022400
 8003668:	40013c00 	.word	0x40013c00

0800366c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
 8003688:	e001      	b.n	800368e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800368e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003690:	4618      	mov	r0, r3
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	4613      	mov	r3, r2
 80036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036ac:	787b      	ldrb	r3, [r7, #1]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036b8:	e003      	b.n	80036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	619a      	str	r2, [r3, #24]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e291      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8087 	beq.w	8003802 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b96      	ldr	r3, [pc, #600]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 030c 	and.w	r3, r3, #12
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d00c      	beq.n	800371a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003700:	4b93      	ldr	r3, [pc, #588]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d112      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
 800370c:	4b90      	ldr	r3, [pc, #576]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003718:	d10b      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371a:	4b8d      	ldr	r3, [pc, #564]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d06c      	beq.n	8003800 <HAL_RCC_OscConfig+0x130>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d168      	bne.n	8003800 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e26b      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x7a>
 800373c:	4b84      	ldr	r3, [pc, #528]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a83      	ldr	r2, [pc, #524]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	e02e      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x9c>
 8003752:	4b7f      	ldr	r3, [pc, #508]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7e      	ldr	r2, [pc, #504]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b7c      	ldr	r3, [pc, #496]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7b      	ldr	r2, [pc, #492]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e01d      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0xc0>
 8003776:	4b76      	ldr	r3, [pc, #472]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a75      	ldr	r2, [pc, #468]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800377c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	4b73      	ldr	r3, [pc, #460]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a72      	ldr	r2, [pc, #456]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0xd8>
 8003790:	4b6f      	ldr	r3, [pc, #444]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6e      	ldr	r2, [pc, #440]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a6b      	ldr	r2, [pc, #428]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80037a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d013      	beq.n	80037d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7ff fc1a 	bl	8002fe8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b8:	f7ff fc16 	bl	8002fe8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e21f      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ca:	4b61      	ldr	r3, [pc, #388]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f0      	beq.n	80037b8 <HAL_RCC_OscConfig+0xe8>
 80037d6:	e014      	b.n	8003802 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7ff fc06 	bl	8002fe8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037e0:	f7ff fc02 	bl	8002fe8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e20b      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f2:	4b57      	ldr	r3, [pc, #348]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x110>
 80037fe:	e000      	b.n	8003802 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d069      	beq.n	80038e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380e:	4b50      	ldr	r3, [pc, #320]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381a:	4b4d      	ldr	r3, [pc, #308]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b08      	cmp	r3, #8
 8003824:	d11c      	bne.n	8003860 <HAL_RCC_OscConfig+0x190>
 8003826:	4b4a      	ldr	r3, [pc, #296]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d116      	bne.n	8003860 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_RCC_OscConfig+0x17a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1df      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384a:	4b41      	ldr	r3, [pc, #260]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	493d      	ldr	r1, [pc, #244]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385e:	e040      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003868:	4b39      	ldr	r3, [pc, #228]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a38      	ldr	r2, [pc, #224]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7ff fbb8 	bl	8002fe8 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387c:	f7ff fbb4 	bl	8002fe8 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1bd      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b30      	ldr	r3, [pc, #192]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800389a:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4929      	ldr	r1, [pc, #164]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]
 80038ae:	e018      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b0:	4b27      	ldr	r3, [pc, #156]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7ff fb94 	bl	8002fe8 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7ff fb90 	bl	8002fe8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e199      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1e      	ldr	r3, [pc, #120]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d038      	beq.n	8003960 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d019      	beq.n	800392a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003902:	f7ff fb71 	bl	8002fe8 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800390a:	f7ff fb6d 	bl	8002fe8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e176      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800391c:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800391e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x23a>
 8003928:	e01a      	b.n	8003960 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 800392c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392e:	4a08      	ldr	r2, [pc, #32]	; (8003950 <HAL_RCC_OscConfig+0x280>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003936:	f7ff fb57 	bl	8002fe8 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393e:	f7ff fb53 	bl	8002fe8 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d903      	bls.n	8003954 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e15c      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
 8003950:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	4b91      	ldr	r3, [pc, #580]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ee      	bne.n	800393e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a4 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b8b      	ldr	r3, [pc, #556]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10d      	bne.n	8003996 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	4b88      	ldr	r3, [pc, #544]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a87      	ldr	r2, [pc, #540]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	60bb      	str	r3, [r7, #8]
 8003990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003992:	2301      	movs	r3, #1
 8003994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003996:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d118      	bne.n	80039d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80039a2:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7e      	ldr	r2, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ae:	f7ff fb1b 	bl	8002fe8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b6:	f7ff fb17 	bl	8002fe8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b64      	cmp	r3, #100	; 0x64
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e120      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c8:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x31a>
 80039dc:	4b6f      	ldr	r3, [pc, #444]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e0:	4a6e      	ldr	r2, [pc, #440]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6713      	str	r3, [r2, #112]	; 0x70
 80039e8:	e02d      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10c      	bne.n	8003a0c <HAL_RCC_OscConfig+0x33c>
 80039f2:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f6:	4a69      	ldr	r2, [pc, #420]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6713      	str	r3, [r2, #112]	; 0x70
 80039fe:	4b67      	ldr	r3, [pc, #412]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	4a66      	ldr	r2, [pc, #408]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0a:	e01c      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d10c      	bne.n	8003a2e <HAL_RCC_OscConfig+0x35e>
 8003a14:	4b61      	ldr	r3, [pc, #388]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a60      	ldr	r2, [pc, #384]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	4b5e      	ldr	r3, [pc, #376]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a5d      	ldr	r2, [pc, #372]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a2c:	e00b      	b.n	8003a46 <HAL_RCC_OscConfig+0x376>
 8003a2e:	4b5b      	ldr	r3, [pc, #364]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a5a      	ldr	r2, [pc, #360]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a57      	ldr	r2, [pc, #348]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a40:	f023 0304 	bic.w	r3, r3, #4
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d015      	beq.n	8003a7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7ff facb 	bl	8002fe8 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7ff fac7 	bl	8002fe8 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e0ce      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	4b4b      	ldr	r3, [pc, #300]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ee      	beq.n	8003a56 <HAL_RCC_OscConfig+0x386>
 8003a78:	e014      	b.n	8003aa4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a7a:	f7ff fab5 	bl	8002fe8 <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a80:	e00a      	b.n	8003a98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a82:	f7ff fab1 	bl	8002fe8 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e0b8      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	4b40      	ldr	r3, [pc, #256]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1ee      	bne.n	8003a82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa4:	7dfb      	ldrb	r3, [r7, #23]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4b3c      	ldr	r3, [pc, #240]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a3b      	ldr	r2, [pc, #236]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 80a4 	beq.w	8003c08 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac0:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 030c 	and.w	r3, r3, #12
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d06b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d149      	bne.n	8003b68 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad4:	4b31      	ldr	r3, [pc, #196]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7ff fa82 	bl	8002fe8 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae8:	f7ff fa7e 	bl	8002fe8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e087      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	4b28      	ldr	r3, [pc, #160]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	085b      	lsrs	r3, r3, #1
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	061b      	lsls	r3, r3, #24
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	4a1b      	ldr	r2, [pc, #108]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b32:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7ff fa52 	bl	8002fe8 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b48:	f7ff fa4e 	bl	8002fe8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e057      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x478>
 8003b66:	e04f      	b.n	8003c08 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a0b      	ldr	r2, [pc, #44]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7ff fa38 	bl	8002fe8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7ff fa34 	bl	8002fe8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03d      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4ac>
 8003b9a:	e035      	b.n	8003c08 <HAL_RCC_OscConfig+0x538>
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x544>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d028      	beq.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d121      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d11a      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bda:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d111      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	3b01      	subs	r3, #1
 8003bee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800

08003c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0d0      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d910      	bls.n	8003c60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020f 	bic.w	r2, r3, #15
 8003c46:	4965      	ldr	r1, [pc, #404]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e0b8      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a58      	ldr	r2, [pc, #352]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a52      	ldr	r2, [pc, #328]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	494d      	ldr	r1, [pc, #308]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d040      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b47      	ldr	r3, [pc, #284]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e07f      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b41      	ldr	r3, [pc, #260]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e073      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06b      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4936      	ldr	r1, [pc, #216]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7ff f96c 	bl	8002fe8 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7ff f968 	bl	8002fe8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e053      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2d      	ldr	r3, [pc, #180]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d210      	bcs.n	8003d6c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 020f 	bic.w	r2, r3, #15
 8003d52:	4922      	ldr	r1, [pc, #136]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b20      	ldr	r3, [pc, #128]	; (8003ddc <HAL_RCC_ClockConfig+0x1c4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e032      	b.n	8003dd2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4916      	ldr	r1, [pc, #88]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	490e      	ldr	r1, [pc, #56]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003daa:	f000 f821 	bl	8003df0 <HAL_RCC_GetSysClockFreq>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	091b      	lsrs	r3, r3, #4
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	490a      	ldr	r1, [pc, #40]	; (8003de4 <HAL_RCC_ClockConfig+0x1cc>)
 8003dbc:	5ccb      	ldrb	r3, [r1, r3]
 8003dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc2:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dc6:	4b09      	ldr	r3, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1d4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f8c8 	bl	8002f60 <HAL_InitTick>

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3710      	adds	r7, #16
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023c00 	.word	0x40023c00
 8003de0:	40023800 	.word	0x40023800
 8003de4:	08005908 	.word	0x08005908
 8003de8:	2000000c 	.word	0x2000000c
 8003dec:	20000010 	.word	0x20000010

08003df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df4:	b094      	sub	sp, #80	; 0x50
 8003df6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e00:	2300      	movs	r3, #0
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e08:	4b79      	ldr	r3, [pc, #484]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d00d      	beq.n	8003e30 <HAL_RCC_GetSysClockFreq+0x40>
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	f200 80e1 	bhi.w	8003fdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_GetSysClockFreq+0x34>
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003e22:	e0db      	b.n	8003fdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e28:	e0db      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e2a:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2e:	e0d8      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e30:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e46:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	099b      	lsrs	r3, r3, #6
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e58:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	0159      	lsls	r1, r3, #5
 8003e70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e74:	0150      	lsls	r0, r2, #5
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	1a51      	subs	r1, r2, r1
 8003e7e:	6139      	str	r1, [r7, #16]
 8003e80:	4629      	mov	r1, r5
 8003e82:	eb63 0301 	sbc.w	r3, r3, r1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	f04f 0200 	mov.w	r2, #0
 8003e8c:	f04f 0300 	mov.w	r3, #0
 8003e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e94:	4659      	mov	r1, fp
 8003e96:	018b      	lsls	r3, r1, #6
 8003e98:	4651      	mov	r1, sl
 8003e9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	018a      	lsls	r2, r1, #6
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	eb63 0901 	sbc.w	r9, r3, r1
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ebe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec2:	4690      	mov	r8, r2
 8003ec4:	4699      	mov	r9, r3
 8003ec6:	4623      	mov	r3, r4
 8003ec8:	eb18 0303 	adds.w	r3, r8, r3
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	462b      	mov	r3, r5
 8003ed0:	eb49 0303 	adc.w	r3, r9, r3
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	024b      	lsls	r3, r1, #9
 8003ee6:	4621      	mov	r1, r4
 8003ee8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003eec:	4621      	mov	r1, r4
 8003eee:	024a      	lsls	r2, r1, #9
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003efc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f00:	f7fc fe50 	bl	8000ba4 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4613      	mov	r3, r2
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0c:	e058      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	099b      	lsrs	r3, r3, #6
 8003f14:	2200      	movs	r2, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	4611      	mov	r1, r2
 8003f1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f1e:	623b      	str	r3, [r7, #32]
 8003f20:	2300      	movs	r3, #0
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
 8003f24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	f04f 0000 	mov.w	r0, #0
 8003f30:	f04f 0100 	mov.w	r1, #0
 8003f34:	0159      	lsls	r1, r3, #5
 8003f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3a:	0150      	lsls	r0, r2, #5
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4641      	mov	r1, r8
 8003f42:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f46:	4649      	mov	r1, r9
 8003f48:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f60:	ebb2 040a 	subs.w	r4, r2, sl
 8003f64:	eb63 050b 	sbc.w	r5, r3, fp
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	00eb      	lsls	r3, r5, #3
 8003f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f76:	00e2      	lsls	r2, r4, #3
 8003f78:	4614      	mov	r4, r2
 8003f7a:	461d      	mov	r5, r3
 8003f7c:	4643      	mov	r3, r8
 8003f7e:	18e3      	adds	r3, r4, r3
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	464b      	mov	r3, r9
 8003f84:	eb45 0303 	adc.w	r3, r5, r3
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f96:	4629      	mov	r1, r5
 8003f98:	028b      	lsls	r3, r1, #10
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	028a      	lsls	r2, r1, #10
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003faa:	2200      	movs	r2, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	61fa      	str	r2, [r7, #28]
 8003fb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb4:	f7fc fdf6 	bl	8000ba4 <__aeabi_uldivmod>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	3301      	adds	r3, #1
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fda:	e002      	b.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3750      	adds	r7, #80	; 0x50
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	00f42400 	.word	0x00f42400
 8003ff8:	007a1200 	.word	0x007a1200

08003ffc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e08f      	b.n	8004130 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d106      	bne.n	800402a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7fe f84b 	bl	80020c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2202      	movs	r2, #2
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_TIM_Encoder_Init+0x13c>)
 800403e:	400b      	ands	r3, r1
 8004040:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fa63 	bl	8004518 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_TIM_Encoder_Init+0x140>)
 8004078:	4013      	ands	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	4313      	orrs	r3, r2
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <HAL_TIM_Encoder_Init+0x144>)
 8004092:	4013      	ands	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4b2a      	ldr	r3, [pc, #168]	; (8004144 <HAL_TIM_Encoder_Init+0x148>)
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	4313      	orrs	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	011a      	lsls	r2, r3, #4
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	031b      	lsls	r3, r3, #12
 80040bc:	4313      	orrs	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	4313      	orrs	r3, r2
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	fffebff8 	.word	0xfffebff8
 800413c:	fffffcfc 	.word	0xfffffcfc
 8004140:	fffff3f3 	.word	0xfffff3f3
 8004144:	ffff0f0f 	.word	0xffff0f0f

08004148 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004158:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004160:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004168:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004170:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d110      	bne.n	800419a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800417e:	7b7b      	ldrb	r3, [r7, #13]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d001      	beq.n	8004188 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e089      	b.n	800429c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004198:	e031      	b.n	80041fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d110      	bne.n	80041c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a0:	7bbb      	ldrb	r3, [r7, #14]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a6:	7b3b      	ldrb	r3, [r7, #12]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d001      	beq.n	80041b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e075      	b.n	800429c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c0:	e01d      	b.n	80041fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d108      	bne.n	80041da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c8:	7bbb      	ldrb	r3, [r7, #14]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	7b7b      	ldrb	r3, [r7, #13]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d102      	bne.n	80041da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041d4:	7b3b      	ldrb	r3, [r7, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d001      	beq.n	80041de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e05e      	b.n	800429c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2202      	movs	r2, #2
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2202      	movs	r2, #2
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b04      	cmp	r3, #4
 8004208:	d010      	beq.n	800422c <HAL_TIM_Encoder_Start_IT+0xe4>
 800420a:	e01f      	b.n	800424c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fa2b 	bl	8004670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0202 	orr.w	r2, r2, #2
 8004228:	60da      	str	r2, [r3, #12]
      break;
 800422a:	e02e      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	2104      	movs	r1, #4
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fa1b 	bl	8004670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0204 	orr.w	r2, r2, #4
 8004248:	60da      	str	r2, [r3, #12]
      break;
 800424a:	e01e      	b.n	800428a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	2100      	movs	r1, #0
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa0b 	bl	8004670 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	2104      	movs	r1, #4
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fa04 	bl	8004670 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0202 	orr.w	r2, r2, #2
 8004276:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0204 	orr.w	r2, r2, #4
 8004286:	60da      	str	r2, [r3, #12]
      break;
 8004288:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01b      	beq.n	8004308 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0202 	mvn.w	r2, #2
 80042d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f8f3 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f8e5 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8f6 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d020      	beq.n	8004354 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01b      	beq.n	8004354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0204 	mvn.w	r2, #4
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f8cd 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 8004340:	e005      	b.n	800434e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f8bf 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8d0 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d020      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f06f 0208 	mvn.w	r2, #8
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2204      	movs	r2, #4
 8004376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8a7 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 800438c:	e005      	b.n	800439a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f899 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8aa 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2208      	movs	r2, #8
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f881 	bl	80044da <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f873 	bl	80044c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f884 	bl	80044ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0201 	mvn.w	r2, #1
 8004408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f851 	bl	80044b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00c      	beq.n	800443e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d007      	beq.n	800443e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9d7 	bl	80047ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00c      	beq.n	8004462 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d007      	beq.n	8004462 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800445a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f9cf 	bl	8004800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00c      	beq.n	8004486 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800447e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f83e 	bl	8004502 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00c      	beq.n	80044aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b00      	cmp	r3, #0
 8004498:	d007      	beq.n	80044aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f06f 0220 	mvn.w	r2, #32
 80044a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f997 	bl	80047d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044aa:	bf00      	nop
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr

08004502 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004502:	b480      	push	{r7}
 8004504:	b083      	sub	sp, #12
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a46      	ldr	r2, [pc, #280]	; (8004644 <TIM_Base_SetConfig+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a43      	ldr	r2, [pc, #268]	; (8004648 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a42      	ldr	r2, [pc, #264]	; (800464c <TIM_Base_SetConfig+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a41      	ldr	r2, [pc, #260]	; (8004650 <TIM_Base_SetConfig+0x138>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a40      	ldr	r2, [pc, #256]	; (8004654 <TIM_Base_SetConfig+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a35      	ldr	r2, [pc, #212]	; (8004644 <TIM_Base_SetConfig+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d02b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004578:	d027      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a32      	ldr	r2, [pc, #200]	; (8004648 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d023      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a31      	ldr	r2, [pc, #196]	; (800464c <TIM_Base_SetConfig+0x134>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a30      	ldr	r2, [pc, #192]	; (8004650 <TIM_Base_SetConfig+0x138>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2f      	ldr	r2, [pc, #188]	; (8004654 <TIM_Base_SetConfig+0x13c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2e      	ldr	r2, [pc, #184]	; (8004658 <TIM_Base_SetConfig+0x140>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <TIM_Base_SetConfig+0x144>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <TIM_Base_SetConfig+0x148>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2b      	ldr	r2, [pc, #172]	; (8004664 <TIM_Base_SetConfig+0x14c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <TIM_Base_SetConfig+0x150>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a29      	ldr	r2, [pc, #164]	; (800466c <TIM_Base_SetConfig+0x154>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <TIM_Base_SetConfig+0x12c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <TIM_Base_SetConfig+0x13c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
  }
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	2201      	movs	r2, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1a      	ldr	r2, [r3, #32]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	43db      	mvns	r3, r3
 8004692:	401a      	ands	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1a      	ldr	r2, [r3, #32]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	621a      	str	r2, [r3, #32]
}
 80046ae:	bf00      	nop
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e06d      	b.n	80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a30      	ldr	r2, [pc, #192]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2f      	ldr	r2, [pc, #188]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d108      	bne.n	800471a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800470e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004720:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d01d      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1c      	ldr	r2, [pc, #112]	; (80047c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1a      	ldr	r2, [pc, #104]	; (80047cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a15      	ldr	r2, [pc, #84]	; (80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d10c      	bne.n	800479e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800478a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	4313      	orrs	r3, r2
 8004794:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40010400 	.word	0x40010400
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40001800 	.word	0x40001800

080047d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <memset>:
 8004814:	4402      	add	r2, r0
 8004816:	4603      	mov	r3, r0
 8004818:	4293      	cmp	r3, r2
 800481a:	d100      	bne.n	800481e <memset+0xa>
 800481c:	4770      	bx	lr
 800481e:	f803 1b01 	strb.w	r1, [r3], #1
 8004822:	e7f9      	b.n	8004818 <memset+0x4>

08004824 <__libc_init_array>:
 8004824:	b570      	push	{r4, r5, r6, lr}
 8004826:	4d0d      	ldr	r5, [pc, #52]	; (800485c <__libc_init_array+0x38>)
 8004828:	4c0d      	ldr	r4, [pc, #52]	; (8004860 <__libc_init_array+0x3c>)
 800482a:	1b64      	subs	r4, r4, r5
 800482c:	10a4      	asrs	r4, r4, #2
 800482e:	2600      	movs	r6, #0
 8004830:	42a6      	cmp	r6, r4
 8004832:	d109      	bne.n	8004848 <__libc_init_array+0x24>
 8004834:	4d0b      	ldr	r5, [pc, #44]	; (8004864 <__libc_init_array+0x40>)
 8004836:	4c0c      	ldr	r4, [pc, #48]	; (8004868 <__libc_init_array+0x44>)
 8004838:	f001 f856 	bl	80058e8 <_init>
 800483c:	1b64      	subs	r4, r4, r5
 800483e:	10a4      	asrs	r4, r4, #2
 8004840:	2600      	movs	r6, #0
 8004842:	42a6      	cmp	r6, r4
 8004844:	d105      	bne.n	8004852 <__libc_init_array+0x2e>
 8004846:	bd70      	pop	{r4, r5, r6, pc}
 8004848:	f855 3b04 	ldr.w	r3, [r5], #4
 800484c:	4798      	blx	r3
 800484e:	3601      	adds	r6, #1
 8004850:	e7ee      	b.n	8004830 <__libc_init_array+0xc>
 8004852:	f855 3b04 	ldr.w	r3, [r5], #4
 8004856:	4798      	blx	r3
 8004858:	3601      	adds	r6, #1
 800485a:	e7f2      	b.n	8004842 <__libc_init_array+0x1e>
 800485c:	08005af8 	.word	0x08005af8
 8004860:	08005af8 	.word	0x08005af8
 8004864:	08005af8 	.word	0x08005af8
 8004868:	08005afc 	.word	0x08005afc
 800486c:	00000000 	.word	0x00000000

08004870 <cos>:
 8004870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004872:	ec53 2b10 	vmov	r2, r3, d0
 8004876:	4826      	ldr	r0, [pc, #152]	; (8004910 <cos+0xa0>)
 8004878:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800487c:	4281      	cmp	r1, r0
 800487e:	dc06      	bgt.n	800488e <cos+0x1e>
 8004880:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004908 <cos+0x98>
 8004884:	b005      	add	sp, #20
 8004886:	f85d eb04 	ldr.w	lr, [sp], #4
 800488a:	f000 b845 	b.w	8004918 <__kernel_cos>
 800488e:	4821      	ldr	r0, [pc, #132]	; (8004914 <cos+0xa4>)
 8004890:	4281      	cmp	r1, r0
 8004892:	dd09      	ble.n	80048a8 <cos+0x38>
 8004894:	ee10 0a10 	vmov	r0, s0
 8004898:	4619      	mov	r1, r3
 800489a:	f7fb fcb9 	bl	8000210 <__aeabi_dsub>
 800489e:	ec41 0b10 	vmov	d0, r0, r1
 80048a2:	b005      	add	sp, #20
 80048a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80048a8:	4668      	mov	r0, sp
 80048aa:	f000 f9bd 	bl	8004c28 <__ieee754_rem_pio2>
 80048ae:	f000 0003 	and.w	r0, r0, #3
 80048b2:	2801      	cmp	r0, #1
 80048b4:	d00b      	beq.n	80048ce <cos+0x5e>
 80048b6:	2802      	cmp	r0, #2
 80048b8:	d016      	beq.n	80048e8 <cos+0x78>
 80048ba:	b9e0      	cbnz	r0, 80048f6 <cos+0x86>
 80048bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048c0:	ed9d 0b00 	vldr	d0, [sp]
 80048c4:	f000 f828 	bl	8004918 <__kernel_cos>
 80048c8:	ec51 0b10 	vmov	r0, r1, d0
 80048cc:	e7e7      	b.n	800489e <cos+0x2e>
 80048ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048d2:	ed9d 0b00 	vldr	d0, [sp]
 80048d6:	f000 f8e7 	bl	8004aa8 <__kernel_sin>
 80048da:	ec53 2b10 	vmov	r2, r3, d0
 80048de:	ee10 0a10 	vmov	r0, s0
 80048e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80048e6:	e7da      	b.n	800489e <cos+0x2e>
 80048e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048ec:	ed9d 0b00 	vldr	d0, [sp]
 80048f0:	f000 f812 	bl	8004918 <__kernel_cos>
 80048f4:	e7f1      	b.n	80048da <cos+0x6a>
 80048f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80048fa:	ed9d 0b00 	vldr	d0, [sp]
 80048fe:	2001      	movs	r0, #1
 8004900:	f000 f8d2 	bl	8004aa8 <__kernel_sin>
 8004904:	e7e0      	b.n	80048c8 <cos+0x58>
 8004906:	bf00      	nop
	...
 8004910:	3fe921fb 	.word	0x3fe921fb
 8004914:	7fefffff 	.word	0x7fefffff

08004918 <__kernel_cos>:
 8004918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	ec57 6b10 	vmov	r6, r7, d0
 8004920:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004924:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004928:	ed8d 1b00 	vstr	d1, [sp]
 800492c:	da07      	bge.n	800493e <__kernel_cos+0x26>
 800492e:	ee10 0a10 	vmov	r0, s0
 8004932:	4639      	mov	r1, r7
 8004934:	f7fc f8be 	bl	8000ab4 <__aeabi_d2iz>
 8004938:	2800      	cmp	r0, #0
 800493a:	f000 8088 	beq.w	8004a4e <__kernel_cos+0x136>
 800493e:	4632      	mov	r2, r6
 8004940:	463b      	mov	r3, r7
 8004942:	4630      	mov	r0, r6
 8004944:	4639      	mov	r1, r7
 8004946:	f7fb fe1b 	bl	8000580 <__aeabi_dmul>
 800494a:	4b51      	ldr	r3, [pc, #324]	; (8004a90 <__kernel_cos+0x178>)
 800494c:	2200      	movs	r2, #0
 800494e:	4604      	mov	r4, r0
 8004950:	460d      	mov	r5, r1
 8004952:	f7fb fe15 	bl	8000580 <__aeabi_dmul>
 8004956:	a340      	add	r3, pc, #256	; (adr r3, 8004a58 <__kernel_cos+0x140>)
 8004958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495c:	4682      	mov	sl, r0
 800495e:	468b      	mov	fp, r1
 8004960:	4620      	mov	r0, r4
 8004962:	4629      	mov	r1, r5
 8004964:	f7fb fe0c 	bl	8000580 <__aeabi_dmul>
 8004968:	a33d      	add	r3, pc, #244	; (adr r3, 8004a60 <__kernel_cos+0x148>)
 800496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496e:	f7fb fc51 	bl	8000214 <__adddf3>
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	f7fb fe03 	bl	8000580 <__aeabi_dmul>
 800497a:	a33b      	add	r3, pc, #236	; (adr r3, 8004a68 <__kernel_cos+0x150>)
 800497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004980:	f7fb fc46 	bl	8000210 <__aeabi_dsub>
 8004984:	4622      	mov	r2, r4
 8004986:	462b      	mov	r3, r5
 8004988:	f7fb fdfa 	bl	8000580 <__aeabi_dmul>
 800498c:	a338      	add	r3, pc, #224	; (adr r3, 8004a70 <__kernel_cos+0x158>)
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f7fb fc3f 	bl	8000214 <__adddf3>
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	f7fb fdf1 	bl	8000580 <__aeabi_dmul>
 800499e:	a336      	add	r3, pc, #216	; (adr r3, 8004a78 <__kernel_cos+0x160>)
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f7fb fc34 	bl	8000210 <__aeabi_dsub>
 80049a8:	4622      	mov	r2, r4
 80049aa:	462b      	mov	r3, r5
 80049ac:	f7fb fde8 	bl	8000580 <__aeabi_dmul>
 80049b0:	a333      	add	r3, pc, #204	; (adr r3, 8004a80 <__kernel_cos+0x168>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fb fc2d 	bl	8000214 <__adddf3>
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f7fb fddf 	bl	8000580 <__aeabi_dmul>
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	f7fb fddb 	bl	8000580 <__aeabi_dmul>
 80049ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049ce:	4604      	mov	r4, r0
 80049d0:	460d      	mov	r5, r1
 80049d2:	4630      	mov	r0, r6
 80049d4:	4639      	mov	r1, r7
 80049d6:	f7fb fdd3 	bl	8000580 <__aeabi_dmul>
 80049da:	460b      	mov	r3, r1
 80049dc:	4602      	mov	r2, r0
 80049de:	4629      	mov	r1, r5
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fb fc15 	bl	8000210 <__aeabi_dsub>
 80049e6:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <__kernel_cos+0x17c>)
 80049e8:	4598      	cmp	r8, r3
 80049ea:	4606      	mov	r6, r0
 80049ec:	460f      	mov	r7, r1
 80049ee:	dc10      	bgt.n	8004a12 <__kernel_cos+0xfa>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4650      	mov	r0, sl
 80049f6:	4659      	mov	r1, fp
 80049f8:	f7fb fc0a 	bl	8000210 <__aeabi_dsub>
 80049fc:	460b      	mov	r3, r1
 80049fe:	4926      	ldr	r1, [pc, #152]	; (8004a98 <__kernel_cos+0x180>)
 8004a00:	4602      	mov	r2, r0
 8004a02:	2000      	movs	r0, #0
 8004a04:	f7fb fc04 	bl	8000210 <__aeabi_dsub>
 8004a08:	ec41 0b10 	vmov	d0, r0, r1
 8004a0c:	b003      	add	sp, #12
 8004a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a12:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <__kernel_cos+0x184>)
 8004a14:	4920      	ldr	r1, [pc, #128]	; (8004a98 <__kernel_cos+0x180>)
 8004a16:	4598      	cmp	r8, r3
 8004a18:	bfcc      	ite	gt
 8004a1a:	4d21      	ldrgt	r5, [pc, #132]	; (8004aa0 <__kernel_cos+0x188>)
 8004a1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004a20:	2400      	movs	r4, #0
 8004a22:	4622      	mov	r2, r4
 8004a24:	462b      	mov	r3, r5
 8004a26:	2000      	movs	r0, #0
 8004a28:	f7fb fbf2 	bl	8000210 <__aeabi_dsub>
 8004a2c:	4622      	mov	r2, r4
 8004a2e:	4680      	mov	r8, r0
 8004a30:	4689      	mov	r9, r1
 8004a32:	462b      	mov	r3, r5
 8004a34:	4650      	mov	r0, sl
 8004a36:	4659      	mov	r1, fp
 8004a38:	f7fb fbea 	bl	8000210 <__aeabi_dsub>
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	463b      	mov	r3, r7
 8004a40:	f7fb fbe6 	bl	8000210 <__aeabi_dsub>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	e7da      	b.n	8004a04 <__kernel_cos+0xec>
 8004a4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004a88 <__kernel_cos+0x170>
 8004a52:	e7db      	b.n	8004a0c <__kernel_cos+0xf4>
 8004a54:	f3af 8000 	nop.w
 8004a58:	be8838d4 	.word	0xbe8838d4
 8004a5c:	bda8fae9 	.word	0xbda8fae9
 8004a60:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a64:	3e21ee9e 	.word	0x3e21ee9e
 8004a68:	809c52ad 	.word	0x809c52ad
 8004a6c:	3e927e4f 	.word	0x3e927e4f
 8004a70:	19cb1590 	.word	0x19cb1590
 8004a74:	3efa01a0 	.word	0x3efa01a0
 8004a78:	16c15177 	.word	0x16c15177
 8004a7c:	3f56c16c 	.word	0x3f56c16c
 8004a80:	5555554c 	.word	0x5555554c
 8004a84:	3fa55555 	.word	0x3fa55555
 8004a88:	00000000 	.word	0x00000000
 8004a8c:	3ff00000 	.word	0x3ff00000
 8004a90:	3fe00000 	.word	0x3fe00000
 8004a94:	3fd33332 	.word	0x3fd33332
 8004a98:	3ff00000 	.word	0x3ff00000
 8004a9c:	3fe90000 	.word	0x3fe90000
 8004aa0:	3fd20000 	.word	0x3fd20000
 8004aa4:	00000000 	.word	0x00000000

08004aa8 <__kernel_sin>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	ed2d 8b04 	vpush	{d8-d9}
 8004ab0:	eeb0 8a41 	vmov.f32	s16, s2
 8004ab4:	eef0 8a61 	vmov.f32	s17, s3
 8004ab8:	ec55 4b10 	vmov	r4, r5, d0
 8004abc:	b083      	sub	sp, #12
 8004abe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004ac2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004ac6:	9001      	str	r0, [sp, #4]
 8004ac8:	da06      	bge.n	8004ad8 <__kernel_sin+0x30>
 8004aca:	ee10 0a10 	vmov	r0, s0
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7fb fff0 	bl	8000ab4 <__aeabi_d2iz>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d051      	beq.n	8004b7c <__kernel_sin+0xd4>
 8004ad8:	4622      	mov	r2, r4
 8004ada:	462b      	mov	r3, r5
 8004adc:	4620      	mov	r0, r4
 8004ade:	4629      	mov	r1, r5
 8004ae0:	f7fb fd4e 	bl	8000580 <__aeabi_dmul>
 8004ae4:	4682      	mov	sl, r0
 8004ae6:	468b      	mov	fp, r1
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4620      	mov	r0, r4
 8004aee:	4629      	mov	r1, r5
 8004af0:	f7fb fd46 	bl	8000580 <__aeabi_dmul>
 8004af4:	a341      	add	r3, pc, #260	; (adr r3, 8004bfc <__kernel_sin+0x154>)
 8004af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afa:	4680      	mov	r8, r0
 8004afc:	4689      	mov	r9, r1
 8004afe:	4650      	mov	r0, sl
 8004b00:	4659      	mov	r1, fp
 8004b02:	f7fb fd3d 	bl	8000580 <__aeabi_dmul>
 8004b06:	a33f      	add	r3, pc, #252	; (adr r3, 8004c04 <__kernel_sin+0x15c>)
 8004b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0c:	f7fb fb80 	bl	8000210 <__aeabi_dsub>
 8004b10:	4652      	mov	r2, sl
 8004b12:	465b      	mov	r3, fp
 8004b14:	f7fb fd34 	bl	8000580 <__aeabi_dmul>
 8004b18:	a33c      	add	r3, pc, #240	; (adr r3, 8004c0c <__kernel_sin+0x164>)
 8004b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1e:	f7fb fb79 	bl	8000214 <__adddf3>
 8004b22:	4652      	mov	r2, sl
 8004b24:	465b      	mov	r3, fp
 8004b26:	f7fb fd2b 	bl	8000580 <__aeabi_dmul>
 8004b2a:	a33a      	add	r3, pc, #232	; (adr r3, 8004c14 <__kernel_sin+0x16c>)
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f7fb fb6e 	bl	8000210 <__aeabi_dsub>
 8004b34:	4652      	mov	r2, sl
 8004b36:	465b      	mov	r3, fp
 8004b38:	f7fb fd22 	bl	8000580 <__aeabi_dmul>
 8004b3c:	a337      	add	r3, pc, #220	; (adr r3, 8004c1c <__kernel_sin+0x174>)
 8004b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b42:	f7fb fb67 	bl	8000214 <__adddf3>
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	4606      	mov	r6, r0
 8004b4a:	460f      	mov	r7, r1
 8004b4c:	b9eb      	cbnz	r3, 8004b8a <__kernel_sin+0xe2>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4650      	mov	r0, sl
 8004b54:	4659      	mov	r1, fp
 8004b56:	f7fb fd13 	bl	8000580 <__aeabi_dmul>
 8004b5a:	a325      	add	r3, pc, #148	; (adr r3, 8004bf0 <__kernel_sin+0x148>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fb56 	bl	8000210 <__aeabi_dsub>
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	f7fb fd0a 	bl	8000580 <__aeabi_dmul>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4620      	mov	r0, r4
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7fb fb4e 	bl	8000214 <__adddf3>
 8004b78:	4604      	mov	r4, r0
 8004b7a:	460d      	mov	r5, r1
 8004b7c:	ec45 4b10 	vmov	d0, r4, r5
 8004b80:	b003      	add	sp, #12
 8004b82:	ecbd 8b04 	vpop	{d8-d9}
 8004b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8a:	4b1b      	ldr	r3, [pc, #108]	; (8004bf8 <__kernel_sin+0x150>)
 8004b8c:	ec51 0b18 	vmov	r0, r1, d8
 8004b90:	2200      	movs	r2, #0
 8004b92:	f7fb fcf5 	bl	8000580 <__aeabi_dmul>
 8004b96:	4632      	mov	r2, r6
 8004b98:	ec41 0b19 	vmov	d9, r0, r1
 8004b9c:	463b      	mov	r3, r7
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	f7fb fced 	bl	8000580 <__aeabi_dmul>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	ec51 0b19 	vmov	r0, r1, d9
 8004bae:	f7fb fb2f 	bl	8000210 <__aeabi_dsub>
 8004bb2:	4652      	mov	r2, sl
 8004bb4:	465b      	mov	r3, fp
 8004bb6:	f7fb fce3 	bl	8000580 <__aeabi_dmul>
 8004bba:	ec53 2b18 	vmov	r2, r3, d8
 8004bbe:	f7fb fb27 	bl	8000210 <__aeabi_dsub>
 8004bc2:	a30b      	add	r3, pc, #44	; (adr r3, 8004bf0 <__kernel_sin+0x148>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	4606      	mov	r6, r0
 8004bca:	460f      	mov	r7, r1
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb fcd6 	bl	8000580 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4630      	mov	r0, r6
 8004bda:	4639      	mov	r1, r7
 8004bdc:	f7fb fb1a 	bl	8000214 <__adddf3>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	4620      	mov	r0, r4
 8004be6:	4629      	mov	r1, r5
 8004be8:	f7fb fb12 	bl	8000210 <__aeabi_dsub>
 8004bec:	e7c4      	b.n	8004b78 <__kernel_sin+0xd0>
 8004bee:	bf00      	nop
 8004bf0:	55555549 	.word	0x55555549
 8004bf4:	3fc55555 	.word	0x3fc55555
 8004bf8:	3fe00000 	.word	0x3fe00000
 8004bfc:	5acfd57c 	.word	0x5acfd57c
 8004c00:	3de5d93a 	.word	0x3de5d93a
 8004c04:	8a2b9ceb 	.word	0x8a2b9ceb
 8004c08:	3e5ae5e6 	.word	0x3e5ae5e6
 8004c0c:	57b1fe7d 	.word	0x57b1fe7d
 8004c10:	3ec71de3 	.word	0x3ec71de3
 8004c14:	19c161d5 	.word	0x19c161d5
 8004c18:	3f2a01a0 	.word	0x3f2a01a0
 8004c1c:	1110f8a6 	.word	0x1110f8a6
 8004c20:	3f811111 	.word	0x3f811111
 8004c24:	00000000 	.word	0x00000000

08004c28 <__ieee754_rem_pio2>:
 8004c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2c:	ed2d 8b02 	vpush	{d8}
 8004c30:	ec55 4b10 	vmov	r4, r5, d0
 8004c34:	4bca      	ldr	r3, [pc, #808]	; (8004f60 <__ieee754_rem_pio2+0x338>)
 8004c36:	b08b      	sub	sp, #44	; 0x2c
 8004c38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004c3c:	4598      	cmp	r8, r3
 8004c3e:	4682      	mov	sl, r0
 8004c40:	9502      	str	r5, [sp, #8]
 8004c42:	dc08      	bgt.n	8004c56 <__ieee754_rem_pio2+0x2e>
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	ed80 0b00 	vstr	d0, [r0]
 8004c4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004c50:	f04f 0b00 	mov.w	fp, #0
 8004c54:	e028      	b.n	8004ca8 <__ieee754_rem_pio2+0x80>
 8004c56:	4bc3      	ldr	r3, [pc, #780]	; (8004f64 <__ieee754_rem_pio2+0x33c>)
 8004c58:	4598      	cmp	r8, r3
 8004c5a:	dc78      	bgt.n	8004d4e <__ieee754_rem_pio2+0x126>
 8004c5c:	9b02      	ldr	r3, [sp, #8]
 8004c5e:	4ec2      	ldr	r6, [pc, #776]	; (8004f68 <__ieee754_rem_pio2+0x340>)
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	ee10 0a10 	vmov	r0, s0
 8004c66:	a3b0      	add	r3, pc, #704	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x300>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	dd39      	ble.n	8004ce4 <__ieee754_rem_pio2+0xbc>
 8004c70:	f7fb face 	bl	8000210 <__aeabi_dsub>
 8004c74:	45b0      	cmp	r8, r6
 8004c76:	4604      	mov	r4, r0
 8004c78:	460d      	mov	r5, r1
 8004c7a:	d01b      	beq.n	8004cb4 <__ieee754_rem_pio2+0x8c>
 8004c7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x308>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb fac5 	bl	8000210 <__aeabi_dsub>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	e9ca 2300 	strd	r2, r3, [sl]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	4629      	mov	r1, r5
 8004c92:	f7fb fabd 	bl	8000210 <__aeabi_dsub>
 8004c96:	a3a6      	add	r3, pc, #664	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x308>)
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f7fb fab8 	bl	8000210 <__aeabi_dsub>
 8004ca0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ca4:	f04f 0b01 	mov.w	fp, #1
 8004ca8:	4658      	mov	r0, fp
 8004caa:	b00b      	add	sp, #44	; 0x2c
 8004cac:	ecbd 8b02 	vpop	{d8}
 8004cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x310>)
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f7fb faa9 	bl	8000210 <__aeabi_dsub>
 8004cbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x318>)
 8004cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	460d      	mov	r5, r1
 8004cc8:	f7fb faa2 	bl	8000210 <__aeabi_dsub>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	e9ca 2300 	strd	r2, r3, [sl]
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	4629      	mov	r1, r5
 8004cd8:	f7fb fa9a 	bl	8000210 <__aeabi_dsub>
 8004cdc:	a398      	add	r3, pc, #608	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x318>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	e7db      	b.n	8004c9c <__ieee754_rem_pio2+0x74>
 8004ce4:	f7fb fa96 	bl	8000214 <__adddf3>
 8004ce8:	45b0      	cmp	r8, r6
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
 8004cee:	d016      	beq.n	8004d1e <__ieee754_rem_pio2+0xf6>
 8004cf0:	a38f      	add	r3, pc, #572	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x308>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f7fb fa8d 	bl	8000214 <__adddf3>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	e9ca 2300 	strd	r2, r3, [sl]
 8004d02:	4620      	mov	r0, r4
 8004d04:	4629      	mov	r1, r5
 8004d06:	f7fb fa83 	bl	8000210 <__aeabi_dsub>
 8004d0a:	a389      	add	r3, pc, #548	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x308>)
 8004d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d10:	f7fb fa80 	bl	8000214 <__adddf3>
 8004d14:	f04f 3bff 	mov.w	fp, #4294967295
 8004d18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d1c:	e7c4      	b.n	8004ca8 <__ieee754_rem_pio2+0x80>
 8004d1e:	a386      	add	r3, pc, #536	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x310>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fa76 	bl	8000214 <__adddf3>
 8004d28:	a385      	add	r3, pc, #532	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x318>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	4604      	mov	r4, r0
 8004d30:	460d      	mov	r5, r1
 8004d32:	f7fb fa6f 	bl	8000214 <__adddf3>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	e9ca 2300 	strd	r2, r3, [sl]
 8004d3e:	4620      	mov	r0, r4
 8004d40:	4629      	mov	r1, r5
 8004d42:	f7fb fa65 	bl	8000210 <__aeabi_dsub>
 8004d46:	a37e      	add	r3, pc, #504	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x318>)
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	e7e0      	b.n	8004d10 <__ieee754_rem_pio2+0xe8>
 8004d4e:	4b87      	ldr	r3, [pc, #540]	; (8004f6c <__ieee754_rem_pio2+0x344>)
 8004d50:	4598      	cmp	r8, r3
 8004d52:	f300 80d8 	bgt.w	8004f06 <__ieee754_rem_pio2+0x2de>
 8004d56:	f000 f96d 	bl	8005034 <fabs>
 8004d5a:	ec55 4b10 	vmov	r4, r5, d0
 8004d5e:	ee10 0a10 	vmov	r0, s0
 8004d62:	a379      	add	r3, pc, #484	; (adr r3, 8004f48 <__ieee754_rem_pio2+0x320>)
 8004d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d68:	4629      	mov	r1, r5
 8004d6a:	f7fb fc09 	bl	8000580 <__aeabi_dmul>
 8004d6e:	4b80      	ldr	r3, [pc, #512]	; (8004f70 <__ieee754_rem_pio2+0x348>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	f7fb fa4f 	bl	8000214 <__adddf3>
 8004d76:	f7fb fe9d 	bl	8000ab4 <__aeabi_d2iz>
 8004d7a:	4683      	mov	fp, r0
 8004d7c:	f7fb fb96 	bl	80004ac <__aeabi_i2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	ec43 2b18 	vmov	d8, r2, r3
 8004d88:	a367      	add	r3, pc, #412	; (adr r3, 8004f28 <__ieee754_rem_pio2+0x300>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fbf7 	bl	8000580 <__aeabi_dmul>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4620      	mov	r0, r4
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7fb fa39 	bl	8000210 <__aeabi_dsub>
 8004d9e:	a364      	add	r3, pc, #400	; (adr r3, 8004f30 <__ieee754_rem_pio2+0x308>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	ec51 0b18 	vmov	r0, r1, d8
 8004dac:	f7fb fbe8 	bl	8000580 <__aeabi_dmul>
 8004db0:	f1bb 0f1f 	cmp.w	fp, #31
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	dc0d      	bgt.n	8004dd6 <__ieee754_rem_pio2+0x1ae>
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <__ieee754_rem_pio2+0x34c>)
 8004dbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc4:	4543      	cmp	r3, r8
 8004dc6:	d006      	beq.n	8004dd6 <__ieee754_rem_pio2+0x1ae>
 8004dc8:	4622      	mov	r2, r4
 8004dca:	462b      	mov	r3, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	4639      	mov	r1, r7
 8004dd0:	f7fb fa1e 	bl	8000210 <__aeabi_dsub>
 8004dd4:	e00e      	b.n	8004df4 <__ieee754_rem_pio2+0x1cc>
 8004dd6:	462b      	mov	r3, r5
 8004dd8:	4622      	mov	r2, r4
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb fa17 	bl	8000210 <__aeabi_dsub>
 8004de2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004de6:	9303      	str	r3, [sp, #12]
 8004de8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004dec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	dc02      	bgt.n	8004dfa <__ieee754_rem_pio2+0x1d2>
 8004df4:	e9ca 0100 	strd	r0, r1, [sl]
 8004df8:	e039      	b.n	8004e6e <__ieee754_rem_pio2+0x246>
 8004dfa:	a34f      	add	r3, pc, #316	; (adr r3, 8004f38 <__ieee754_rem_pio2+0x310>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	ec51 0b18 	vmov	r0, r1, d8
 8004e04:	f7fb fbbc 	bl	8000580 <__aeabi_dmul>
 8004e08:	4604      	mov	r4, r0
 8004e0a:	460d      	mov	r5, r1
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb f9fc 	bl	8000210 <__aeabi_dsub>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4680      	mov	r8, r0
 8004e1e:	4689      	mov	r9, r1
 8004e20:	4630      	mov	r0, r6
 8004e22:	4639      	mov	r1, r7
 8004e24:	f7fb f9f4 	bl	8000210 <__aeabi_dsub>
 8004e28:	4622      	mov	r2, r4
 8004e2a:	462b      	mov	r3, r5
 8004e2c:	f7fb f9f0 	bl	8000210 <__aeabi_dsub>
 8004e30:	a343      	add	r3, pc, #268	; (adr r3, 8004f40 <__ieee754_rem_pio2+0x318>)
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	4604      	mov	r4, r0
 8004e38:	460d      	mov	r5, r1
 8004e3a:	ec51 0b18 	vmov	r0, r1, d8
 8004e3e:	f7fb fb9f 	bl	8000580 <__aeabi_dmul>
 8004e42:	4622      	mov	r2, r4
 8004e44:	462b      	mov	r3, r5
 8004e46:	f7fb f9e3 	bl	8000210 <__aeabi_dsub>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4604      	mov	r4, r0
 8004e50:	460d      	mov	r5, r1
 8004e52:	4640      	mov	r0, r8
 8004e54:	4649      	mov	r1, r9
 8004e56:	f7fb f9db 	bl	8000210 <__aeabi_dsub>
 8004e5a:	9a03      	ldr	r2, [sp, #12]
 8004e5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b31      	cmp	r3, #49	; 0x31
 8004e64:	dc24      	bgt.n	8004eb0 <__ieee754_rem_pio2+0x288>
 8004e66:	e9ca 0100 	strd	r0, r1, [sl]
 8004e6a:	4646      	mov	r6, r8
 8004e6c:	464f      	mov	r7, r9
 8004e6e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e72:	4630      	mov	r0, r6
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	4639      	mov	r1, r7
 8004e7a:	f7fb f9c9 	bl	8000210 <__aeabi_dsub>
 8004e7e:	462b      	mov	r3, r5
 8004e80:	4622      	mov	r2, r4
 8004e82:	f7fb f9c5 	bl	8000210 <__aeabi_dsub>
 8004e86:	9b02      	ldr	r3, [sp, #8]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004e8e:	f6bf af0b 	bge.w	8004ca8 <__ieee754_rem_pio2+0x80>
 8004e92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004e96:	f8ca 3004 	str.w	r3, [sl, #4]
 8004e9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e9e:	f8ca 8000 	str.w	r8, [sl]
 8004ea2:	f8ca 0008 	str.w	r0, [sl, #8]
 8004ea6:	f8ca 300c 	str.w	r3, [sl, #12]
 8004eaa:	f1cb 0b00 	rsb	fp, fp, #0
 8004eae:	e6fb      	b.n	8004ca8 <__ieee754_rem_pio2+0x80>
 8004eb0:	a327      	add	r3, pc, #156	; (adr r3, 8004f50 <__ieee754_rem_pio2+0x328>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	ec51 0b18 	vmov	r0, r1, d8
 8004eba:	f7fb fb61 	bl	8000580 <__aeabi_dmul>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4640      	mov	r0, r8
 8004ec8:	4649      	mov	r1, r9
 8004eca:	f7fb f9a1 	bl	8000210 <__aeabi_dsub>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	460f      	mov	r7, r1
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	f7fb f999 	bl	8000210 <__aeabi_dsub>
 8004ede:	4622      	mov	r2, r4
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	f7fb f995 	bl	8000210 <__aeabi_dsub>
 8004ee6:	a31c      	add	r3, pc, #112	; (adr r3, 8004f58 <__ieee754_rem_pio2+0x330>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	4604      	mov	r4, r0
 8004eee:	460d      	mov	r5, r1
 8004ef0:	ec51 0b18 	vmov	r0, r1, d8
 8004ef4:	f7fb fb44 	bl	8000580 <__aeabi_dmul>
 8004ef8:	4622      	mov	r2, r4
 8004efa:	462b      	mov	r3, r5
 8004efc:	f7fb f988 	bl	8000210 <__aeabi_dsub>
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	e760      	b.n	8004dc8 <__ieee754_rem_pio2+0x1a0>
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <__ieee754_rem_pio2+0x350>)
 8004f08:	4598      	cmp	r8, r3
 8004f0a:	dd37      	ble.n	8004f7c <__ieee754_rem_pio2+0x354>
 8004f0c:	ee10 2a10 	vmov	r2, s0
 8004f10:	462b      	mov	r3, r5
 8004f12:	4620      	mov	r0, r4
 8004f14:	4629      	mov	r1, r5
 8004f16:	f7fb f97b 	bl	8000210 <__aeabi_dsub>
 8004f1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f1e:	e9ca 0100 	strd	r0, r1, [sl]
 8004f22:	e695      	b.n	8004c50 <__ieee754_rem_pio2+0x28>
 8004f24:	f3af 8000 	nop.w
 8004f28:	54400000 	.word	0x54400000
 8004f2c:	3ff921fb 	.word	0x3ff921fb
 8004f30:	1a626331 	.word	0x1a626331
 8004f34:	3dd0b461 	.word	0x3dd0b461
 8004f38:	1a600000 	.word	0x1a600000
 8004f3c:	3dd0b461 	.word	0x3dd0b461
 8004f40:	2e037073 	.word	0x2e037073
 8004f44:	3ba3198a 	.word	0x3ba3198a
 8004f48:	6dc9c883 	.word	0x6dc9c883
 8004f4c:	3fe45f30 	.word	0x3fe45f30
 8004f50:	2e000000 	.word	0x2e000000
 8004f54:	3ba3198a 	.word	0x3ba3198a
 8004f58:	252049c1 	.word	0x252049c1
 8004f5c:	397b839a 	.word	0x397b839a
 8004f60:	3fe921fb 	.word	0x3fe921fb
 8004f64:	4002d97b 	.word	0x4002d97b
 8004f68:	3ff921fb 	.word	0x3ff921fb
 8004f6c:	413921fb 	.word	0x413921fb
 8004f70:	3fe00000 	.word	0x3fe00000
 8004f74:	08005918 	.word	0x08005918
 8004f78:	7fefffff 	.word	0x7fefffff
 8004f7c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004f80:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004f84:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004f88:	4620      	mov	r0, r4
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	f7fb fd92 	bl	8000ab4 <__aeabi_d2iz>
 8004f90:	f7fb fa8c 	bl	80004ac <__aeabi_i2d>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4620      	mov	r0, r4
 8004f9a:	4629      	mov	r1, r5
 8004f9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fa0:	f7fb f936 	bl	8000210 <__aeabi_dsub>
 8004fa4:	4b21      	ldr	r3, [pc, #132]	; (800502c <__ieee754_rem_pio2+0x404>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f7fb faea 	bl	8000580 <__aeabi_dmul>
 8004fac:	460d      	mov	r5, r1
 8004fae:	4604      	mov	r4, r0
 8004fb0:	f7fb fd80 	bl	8000ab4 <__aeabi_d2iz>
 8004fb4:	f7fb fa7a 	bl	80004ac <__aeabi_i2d>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	4629      	mov	r1, r5
 8004fc0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fc4:	f7fb f924 	bl	8000210 <__aeabi_dsub>
 8004fc8:	4b18      	ldr	r3, [pc, #96]	; (800502c <__ieee754_rem_pio2+0x404>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f7fb fad8 	bl	8000580 <__aeabi_dmul>
 8004fd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004fd4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004fd8:	2703      	movs	r7, #3
 8004fda:	2400      	movs	r4, #0
 8004fdc:	2500      	movs	r5, #0
 8004fde:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	46b9      	mov	r9, r7
 8004fe8:	3f01      	subs	r7, #1
 8004fea:	f7fb fd31 	bl	8000a50 <__aeabi_dcmpeq>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	d1f5      	bne.n	8004fde <__ieee754_rem_pio2+0x3b6>
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <__ieee754_rem_pio2+0x408>)
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4632      	mov	r2, r6
 8004ffc:	464b      	mov	r3, r9
 8004ffe:	4651      	mov	r1, sl
 8005000:	a804      	add	r0, sp, #16
 8005002:	f000 f821 	bl	8005048 <__kernel_rem_pio2>
 8005006:	9b02      	ldr	r3, [sp, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	4683      	mov	fp, r0
 800500c:	f6bf ae4c 	bge.w	8004ca8 <__ieee754_rem_pio2+0x80>
 8005010:	e9da 2100 	ldrd	r2, r1, [sl]
 8005014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005018:	e9ca 2300 	strd	r2, r3, [sl]
 800501c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005020:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005024:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8005028:	e73f      	b.n	8004eaa <__ieee754_rem_pio2+0x282>
 800502a:	bf00      	nop
 800502c:	41700000 	.word	0x41700000
 8005030:	08005998 	.word	0x08005998

08005034 <fabs>:
 8005034:	ec51 0b10 	vmov	r0, r1, d0
 8005038:	ee10 2a10 	vmov	r2, s0
 800503c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005040:	ec43 2b10 	vmov	d0, r2, r3
 8005044:	4770      	bx	lr
	...

08005048 <__kernel_rem_pio2>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	ed2d 8b02 	vpush	{d8}
 8005050:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005054:	f112 0f14 	cmn.w	r2, #20
 8005058:	9306      	str	r3, [sp, #24]
 800505a:	9104      	str	r1, [sp, #16]
 800505c:	4bc2      	ldr	r3, [pc, #776]	; (8005368 <__kernel_rem_pio2+0x320>)
 800505e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005060:	9009      	str	r0, [sp, #36]	; 0x24
 8005062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	9b06      	ldr	r3, [sp, #24]
 800506a:	f103 33ff 	add.w	r3, r3, #4294967295
 800506e:	bfa8      	it	ge
 8005070:	1ed4      	subge	r4, r2, #3
 8005072:	9305      	str	r3, [sp, #20]
 8005074:	bfb2      	itee	lt
 8005076:	2400      	movlt	r4, #0
 8005078:	2318      	movge	r3, #24
 800507a:	fb94 f4f3 	sdivge	r4, r4, r3
 800507e:	f06f 0317 	mvn.w	r3, #23
 8005082:	fb04 3303 	mla	r3, r4, r3, r3
 8005086:	eb03 0a02 	add.w	sl, r3, r2
 800508a:	9b00      	ldr	r3, [sp, #0]
 800508c:	9a05      	ldr	r2, [sp, #20]
 800508e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8005358 <__kernel_rem_pio2+0x310>
 8005092:	eb03 0802 	add.w	r8, r3, r2
 8005096:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005098:	1aa7      	subs	r7, r4, r2
 800509a:	ae20      	add	r6, sp, #128	; 0x80
 800509c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80050a0:	2500      	movs	r5, #0
 80050a2:	4545      	cmp	r5, r8
 80050a4:	dd13      	ble.n	80050ce <__kernel_rem_pio2+0x86>
 80050a6:	9b06      	ldr	r3, [sp, #24]
 80050a8:	aa20      	add	r2, sp, #128	; 0x80
 80050aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80050ae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80050b2:	f04f 0800 	mov.w	r8, #0
 80050b6:	9b00      	ldr	r3, [sp, #0]
 80050b8:	4598      	cmp	r8, r3
 80050ba:	dc31      	bgt.n	8005120 <__kernel_rem_pio2+0xd8>
 80050bc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8005358 <__kernel_rem_pio2+0x310>
 80050c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80050c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050c8:	462f      	mov	r7, r5
 80050ca:	2600      	movs	r6, #0
 80050cc:	e01b      	b.n	8005106 <__kernel_rem_pio2+0xbe>
 80050ce:	42ef      	cmn	r7, r5
 80050d0:	d407      	bmi.n	80050e2 <__kernel_rem_pio2+0x9a>
 80050d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80050d6:	f7fb f9e9 	bl	80004ac <__aeabi_i2d>
 80050da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80050de:	3501      	adds	r5, #1
 80050e0:	e7df      	b.n	80050a2 <__kernel_rem_pio2+0x5a>
 80050e2:	ec51 0b18 	vmov	r0, r1, d8
 80050e6:	e7f8      	b.n	80050da <__kernel_rem_pio2+0x92>
 80050e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80050f0:	f7fb fa46 	bl	8000580 <__aeabi_dmul>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050fc:	f7fb f88a 	bl	8000214 <__adddf3>
 8005100:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005104:	3601      	adds	r6, #1
 8005106:	9b05      	ldr	r3, [sp, #20]
 8005108:	429e      	cmp	r6, r3
 800510a:	f1a7 0708 	sub.w	r7, r7, #8
 800510e:	ddeb      	ble.n	80050e8 <__kernel_rem_pio2+0xa0>
 8005110:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005114:	f108 0801 	add.w	r8, r8, #1
 8005118:	ecab 7b02 	vstmia	fp!, {d7}
 800511c:	3508      	adds	r5, #8
 800511e:	e7ca      	b.n	80050b6 <__kernel_rem_pio2+0x6e>
 8005120:	9b00      	ldr	r3, [sp, #0]
 8005122:	aa0c      	add	r2, sp, #48	; 0x30
 8005124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005128:	930b      	str	r3, [sp, #44]	; 0x2c
 800512a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800512c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005130:	9c00      	ldr	r4, [sp, #0]
 8005132:	930a      	str	r3, [sp, #40]	; 0x28
 8005134:	00e3      	lsls	r3, r4, #3
 8005136:	9308      	str	r3, [sp, #32]
 8005138:	ab98      	add	r3, sp, #608	; 0x260
 800513a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800513e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005142:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8005146:	ab70      	add	r3, sp, #448	; 0x1c0
 8005148:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800514c:	46c3      	mov	fp, r8
 800514e:	46a1      	mov	r9, r4
 8005150:	f1b9 0f00 	cmp.w	r9, #0
 8005154:	f1a5 0508 	sub.w	r5, r5, #8
 8005158:	dc77      	bgt.n	800524a <__kernel_rem_pio2+0x202>
 800515a:	ec47 6b10 	vmov	d0, r6, r7
 800515e:	4650      	mov	r0, sl
 8005160:	f000 fac2 	bl	80056e8 <scalbn>
 8005164:	ec57 6b10 	vmov	r6, r7, d0
 8005168:	2200      	movs	r2, #0
 800516a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800516e:	ee10 0a10 	vmov	r0, s0
 8005172:	4639      	mov	r1, r7
 8005174:	f7fb fa04 	bl	8000580 <__aeabi_dmul>
 8005178:	ec41 0b10 	vmov	d0, r0, r1
 800517c:	f000 fb34 	bl	80057e8 <floor>
 8005180:	4b7a      	ldr	r3, [pc, #488]	; (800536c <__kernel_rem_pio2+0x324>)
 8005182:	ec51 0b10 	vmov	r0, r1, d0
 8005186:	2200      	movs	r2, #0
 8005188:	f7fb f9fa 	bl	8000580 <__aeabi_dmul>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4630      	mov	r0, r6
 8005192:	4639      	mov	r1, r7
 8005194:	f7fb f83c 	bl	8000210 <__aeabi_dsub>
 8005198:	460f      	mov	r7, r1
 800519a:	4606      	mov	r6, r0
 800519c:	f7fb fc8a 	bl	8000ab4 <__aeabi_d2iz>
 80051a0:	9002      	str	r0, [sp, #8]
 80051a2:	f7fb f983 	bl	80004ac <__aeabi_i2d>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb f82f 	bl	8000210 <__aeabi_dsub>
 80051b2:	f1ba 0f00 	cmp.w	sl, #0
 80051b6:	4606      	mov	r6, r0
 80051b8:	460f      	mov	r7, r1
 80051ba:	dd6d      	ble.n	8005298 <__kernel_rem_pio2+0x250>
 80051bc:	1e61      	subs	r1, r4, #1
 80051be:	ab0c      	add	r3, sp, #48	; 0x30
 80051c0:	9d02      	ldr	r5, [sp, #8]
 80051c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80051c6:	f1ca 0018 	rsb	r0, sl, #24
 80051ca:	fa43 f200 	asr.w	r2, r3, r0
 80051ce:	4415      	add	r5, r2
 80051d0:	4082      	lsls	r2, r0
 80051d2:	1a9b      	subs	r3, r3, r2
 80051d4:	aa0c      	add	r2, sp, #48	; 0x30
 80051d6:	9502      	str	r5, [sp, #8]
 80051d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80051dc:	f1ca 0217 	rsb	r2, sl, #23
 80051e0:	fa43 fb02 	asr.w	fp, r3, r2
 80051e4:	f1bb 0f00 	cmp.w	fp, #0
 80051e8:	dd65      	ble.n	80052b6 <__kernel_rem_pio2+0x26e>
 80051ea:	9b02      	ldr	r3, [sp, #8]
 80051ec:	2200      	movs	r2, #0
 80051ee:	3301      	adds	r3, #1
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	4615      	mov	r5, r2
 80051f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80051f8:	4294      	cmp	r4, r2
 80051fa:	f300 809f 	bgt.w	800533c <__kernel_rem_pio2+0x2f4>
 80051fe:	f1ba 0f00 	cmp.w	sl, #0
 8005202:	dd07      	ble.n	8005214 <__kernel_rem_pio2+0x1cc>
 8005204:	f1ba 0f01 	cmp.w	sl, #1
 8005208:	f000 80c1 	beq.w	800538e <__kernel_rem_pio2+0x346>
 800520c:	f1ba 0f02 	cmp.w	sl, #2
 8005210:	f000 80c7 	beq.w	80053a2 <__kernel_rem_pio2+0x35a>
 8005214:	f1bb 0f02 	cmp.w	fp, #2
 8005218:	d14d      	bne.n	80052b6 <__kernel_rem_pio2+0x26e>
 800521a:	4632      	mov	r2, r6
 800521c:	463b      	mov	r3, r7
 800521e:	4954      	ldr	r1, [pc, #336]	; (8005370 <__kernel_rem_pio2+0x328>)
 8005220:	2000      	movs	r0, #0
 8005222:	f7fa fff5 	bl	8000210 <__aeabi_dsub>
 8005226:	4606      	mov	r6, r0
 8005228:	460f      	mov	r7, r1
 800522a:	2d00      	cmp	r5, #0
 800522c:	d043      	beq.n	80052b6 <__kernel_rem_pio2+0x26e>
 800522e:	4650      	mov	r0, sl
 8005230:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8005360 <__kernel_rem_pio2+0x318>
 8005234:	f000 fa58 	bl	80056e8 <scalbn>
 8005238:	4630      	mov	r0, r6
 800523a:	4639      	mov	r1, r7
 800523c:	ec53 2b10 	vmov	r2, r3, d0
 8005240:	f7fa ffe6 	bl	8000210 <__aeabi_dsub>
 8005244:	4606      	mov	r6, r0
 8005246:	460f      	mov	r7, r1
 8005248:	e035      	b.n	80052b6 <__kernel_rem_pio2+0x26e>
 800524a:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <__kernel_rem_pio2+0x32c>)
 800524c:	2200      	movs	r2, #0
 800524e:	4630      	mov	r0, r6
 8005250:	4639      	mov	r1, r7
 8005252:	f7fb f995 	bl	8000580 <__aeabi_dmul>
 8005256:	f7fb fc2d 	bl	8000ab4 <__aeabi_d2iz>
 800525a:	f7fb f927 	bl	80004ac <__aeabi_i2d>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	ec43 2b18 	vmov	d8, r2, r3
 8005266:	4b44      	ldr	r3, [pc, #272]	; (8005378 <__kernel_rem_pio2+0x330>)
 8005268:	2200      	movs	r2, #0
 800526a:	f7fb f989 	bl	8000580 <__aeabi_dmul>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4630      	mov	r0, r6
 8005274:	4639      	mov	r1, r7
 8005276:	f7fa ffcb 	bl	8000210 <__aeabi_dsub>
 800527a:	f7fb fc1b 	bl	8000ab4 <__aeabi_d2iz>
 800527e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005282:	f84b 0b04 	str.w	r0, [fp], #4
 8005286:	ec51 0b18 	vmov	r0, r1, d8
 800528a:	f7fa ffc3 	bl	8000214 <__adddf3>
 800528e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005292:	4606      	mov	r6, r0
 8005294:	460f      	mov	r7, r1
 8005296:	e75b      	b.n	8005150 <__kernel_rem_pio2+0x108>
 8005298:	d106      	bne.n	80052a8 <__kernel_rem_pio2+0x260>
 800529a:	1e63      	subs	r3, r4, #1
 800529c:	aa0c      	add	r2, sp, #48	; 0x30
 800529e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80052a6:	e79d      	b.n	80051e4 <__kernel_rem_pio2+0x19c>
 80052a8:	4b34      	ldr	r3, [pc, #208]	; (800537c <__kernel_rem_pio2+0x334>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f7fb fbee 	bl	8000a8c <__aeabi_dcmpge>
 80052b0:	2800      	cmp	r0, #0
 80052b2:	d140      	bne.n	8005336 <__kernel_rem_pio2+0x2ee>
 80052b4:	4683      	mov	fp, r0
 80052b6:	2200      	movs	r2, #0
 80052b8:	2300      	movs	r3, #0
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	f7fb fbc7 	bl	8000a50 <__aeabi_dcmpeq>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	f000 80c1 	beq.w	800544a <__kernel_rem_pio2+0x402>
 80052c8:	1e65      	subs	r5, r4, #1
 80052ca:	462b      	mov	r3, r5
 80052cc:	2200      	movs	r2, #0
 80052ce:	9900      	ldr	r1, [sp, #0]
 80052d0:	428b      	cmp	r3, r1
 80052d2:	da6d      	bge.n	80053b0 <__kernel_rem_pio2+0x368>
 80052d4:	2a00      	cmp	r2, #0
 80052d6:	f000 808a 	beq.w	80053ee <__kernel_rem_pio2+0x3a6>
 80052da:	ab0c      	add	r3, sp, #48	; 0x30
 80052dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80052e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80ae 	beq.w	8005446 <__kernel_rem_pio2+0x3fe>
 80052ea:	4650      	mov	r0, sl
 80052ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8005360 <__kernel_rem_pio2+0x318>
 80052f0:	f000 f9fa 	bl	80056e8 <scalbn>
 80052f4:	1c6b      	adds	r3, r5, #1
 80052f6:	00da      	lsls	r2, r3, #3
 80052f8:	9205      	str	r2, [sp, #20]
 80052fa:	ec57 6b10 	vmov	r6, r7, d0
 80052fe:	aa70      	add	r2, sp, #448	; 0x1c0
 8005300:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8005374 <__kernel_rem_pio2+0x32c>
 8005304:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8005308:	462c      	mov	r4, r5
 800530a:	f04f 0800 	mov.w	r8, #0
 800530e:	2c00      	cmp	r4, #0
 8005310:	f280 80d4 	bge.w	80054bc <__kernel_rem_pio2+0x474>
 8005314:	462c      	mov	r4, r5
 8005316:	2c00      	cmp	r4, #0
 8005318:	f2c0 8102 	blt.w	8005520 <__kernel_rem_pio2+0x4d8>
 800531c:	4b18      	ldr	r3, [pc, #96]	; (8005380 <__kernel_rem_pio2+0x338>)
 800531e:	461e      	mov	r6, r3
 8005320:	ab70      	add	r3, sp, #448	; 0x1c0
 8005322:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8005326:	1b2b      	subs	r3, r5, r4
 8005328:	f04f 0900 	mov.w	r9, #0
 800532c:	f04f 0a00 	mov.w	sl, #0
 8005330:	2700      	movs	r7, #0
 8005332:	9306      	str	r3, [sp, #24]
 8005334:	e0e6      	b.n	8005504 <__kernel_rem_pio2+0x4bc>
 8005336:	f04f 0b02 	mov.w	fp, #2
 800533a:	e756      	b.n	80051ea <__kernel_rem_pio2+0x1a2>
 800533c:	f8d8 3000 	ldr.w	r3, [r8]
 8005340:	bb05      	cbnz	r5, 8005384 <__kernel_rem_pio2+0x33c>
 8005342:	b123      	cbz	r3, 800534e <__kernel_rem_pio2+0x306>
 8005344:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005348:	f8c8 3000 	str.w	r3, [r8]
 800534c:	2301      	movs	r3, #1
 800534e:	3201      	adds	r2, #1
 8005350:	f108 0804 	add.w	r8, r8, #4
 8005354:	461d      	mov	r5, r3
 8005356:	e74f      	b.n	80051f8 <__kernel_rem_pio2+0x1b0>
	...
 8005364:	3ff00000 	.word	0x3ff00000
 8005368:	08005ae0 	.word	0x08005ae0
 800536c:	40200000 	.word	0x40200000
 8005370:	3ff00000 	.word	0x3ff00000
 8005374:	3e700000 	.word	0x3e700000
 8005378:	41700000 	.word	0x41700000
 800537c:	3fe00000 	.word	0x3fe00000
 8005380:	08005aa0 	.word	0x08005aa0
 8005384:	1acb      	subs	r3, r1, r3
 8005386:	f8c8 3000 	str.w	r3, [r8]
 800538a:	462b      	mov	r3, r5
 800538c:	e7df      	b.n	800534e <__kernel_rem_pio2+0x306>
 800538e:	1e62      	subs	r2, r4, #1
 8005390:	ab0c      	add	r3, sp, #48	; 0x30
 8005392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005396:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800539a:	a90c      	add	r1, sp, #48	; 0x30
 800539c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80053a0:	e738      	b.n	8005214 <__kernel_rem_pio2+0x1cc>
 80053a2:	1e62      	subs	r2, r4, #1
 80053a4:	ab0c      	add	r3, sp, #48	; 0x30
 80053a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80053ae:	e7f4      	b.n	800539a <__kernel_rem_pio2+0x352>
 80053b0:	a90c      	add	r1, sp, #48	; 0x30
 80053b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	430a      	orrs	r2, r1
 80053ba:	e788      	b.n	80052ce <__kernel_rem_pio2+0x286>
 80053bc:	3301      	adds	r3, #1
 80053be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d0fa      	beq.n	80053bc <__kernel_rem_pio2+0x374>
 80053c6:	9a08      	ldr	r2, [sp, #32]
 80053c8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80053cc:	446a      	add	r2, sp
 80053ce:	3a98      	subs	r2, #152	; 0x98
 80053d0:	9208      	str	r2, [sp, #32]
 80053d2:	9a06      	ldr	r2, [sp, #24]
 80053d4:	a920      	add	r1, sp, #128	; 0x80
 80053d6:	18a2      	adds	r2, r4, r2
 80053d8:	18e3      	adds	r3, r4, r3
 80053da:	f104 0801 	add.w	r8, r4, #1
 80053de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80053e2:	9302      	str	r3, [sp, #8]
 80053e4:	9b02      	ldr	r3, [sp, #8]
 80053e6:	4543      	cmp	r3, r8
 80053e8:	da04      	bge.n	80053f4 <__kernel_rem_pio2+0x3ac>
 80053ea:	461c      	mov	r4, r3
 80053ec:	e6a2      	b.n	8005134 <__kernel_rem_pio2+0xec>
 80053ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053f0:	2301      	movs	r3, #1
 80053f2:	e7e4      	b.n	80053be <__kernel_rem_pio2+0x376>
 80053f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80053fa:	f7fb f857 	bl	80004ac <__aeabi_i2d>
 80053fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005404:	46ab      	mov	fp, r5
 8005406:	461c      	mov	r4, r3
 8005408:	f04f 0900 	mov.w	r9, #0
 800540c:	2600      	movs	r6, #0
 800540e:	2700      	movs	r7, #0
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	4599      	cmp	r9, r3
 8005414:	dd06      	ble.n	8005424 <__kernel_rem_pio2+0x3dc>
 8005416:	9b08      	ldr	r3, [sp, #32]
 8005418:	e8e3 6702 	strd	r6, r7, [r3], #8
 800541c:	f108 0801 	add.w	r8, r8, #1
 8005420:	9308      	str	r3, [sp, #32]
 8005422:	e7df      	b.n	80053e4 <__kernel_rem_pio2+0x39c>
 8005424:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005428:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800542c:	f7fb f8a8 	bl	8000580 <__aeabi_dmul>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4630      	mov	r0, r6
 8005436:	4639      	mov	r1, r7
 8005438:	f7fa feec 	bl	8000214 <__adddf3>
 800543c:	f109 0901 	add.w	r9, r9, #1
 8005440:	4606      	mov	r6, r0
 8005442:	460f      	mov	r7, r1
 8005444:	e7e4      	b.n	8005410 <__kernel_rem_pio2+0x3c8>
 8005446:	3d01      	subs	r5, #1
 8005448:	e747      	b.n	80052da <__kernel_rem_pio2+0x292>
 800544a:	ec47 6b10 	vmov	d0, r6, r7
 800544e:	f1ca 0000 	rsb	r0, sl, #0
 8005452:	f000 f949 	bl	80056e8 <scalbn>
 8005456:	ec57 6b10 	vmov	r6, r7, d0
 800545a:	4ba0      	ldr	r3, [pc, #640]	; (80056dc <__kernel_rem_pio2+0x694>)
 800545c:	ee10 0a10 	vmov	r0, s0
 8005460:	2200      	movs	r2, #0
 8005462:	4639      	mov	r1, r7
 8005464:	f7fb fb12 	bl	8000a8c <__aeabi_dcmpge>
 8005468:	b1f8      	cbz	r0, 80054aa <__kernel_rem_pio2+0x462>
 800546a:	4b9d      	ldr	r3, [pc, #628]	; (80056e0 <__kernel_rem_pio2+0x698>)
 800546c:	2200      	movs	r2, #0
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fb f885 	bl	8000580 <__aeabi_dmul>
 8005476:	f7fb fb1d 	bl	8000ab4 <__aeabi_d2iz>
 800547a:	4680      	mov	r8, r0
 800547c:	f7fb f816 	bl	80004ac <__aeabi_i2d>
 8005480:	4b96      	ldr	r3, [pc, #600]	; (80056dc <__kernel_rem_pio2+0x694>)
 8005482:	2200      	movs	r2, #0
 8005484:	f7fb f87c 	bl	8000580 <__aeabi_dmul>
 8005488:	460b      	mov	r3, r1
 800548a:	4602      	mov	r2, r0
 800548c:	4639      	mov	r1, r7
 800548e:	4630      	mov	r0, r6
 8005490:	f7fa febe 	bl	8000210 <__aeabi_dsub>
 8005494:	f7fb fb0e 	bl	8000ab4 <__aeabi_d2iz>
 8005498:	1c65      	adds	r5, r4, #1
 800549a:	ab0c      	add	r3, sp, #48	; 0x30
 800549c:	f10a 0a18 	add.w	sl, sl, #24
 80054a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80054a4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80054a8:	e71f      	b.n	80052ea <__kernel_rem_pio2+0x2a2>
 80054aa:	4630      	mov	r0, r6
 80054ac:	4639      	mov	r1, r7
 80054ae:	f7fb fb01 	bl	8000ab4 <__aeabi_d2iz>
 80054b2:	ab0c      	add	r3, sp, #48	; 0x30
 80054b4:	4625      	mov	r5, r4
 80054b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80054ba:	e716      	b.n	80052ea <__kernel_rem_pio2+0x2a2>
 80054bc:	ab0c      	add	r3, sp, #48	; 0x30
 80054be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80054c2:	f7fa fff3 	bl	80004ac <__aeabi_i2d>
 80054c6:	4632      	mov	r2, r6
 80054c8:	463b      	mov	r3, r7
 80054ca:	f7fb f859 	bl	8000580 <__aeabi_dmul>
 80054ce:	4642      	mov	r2, r8
 80054d0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80054d4:	464b      	mov	r3, r9
 80054d6:	4630      	mov	r0, r6
 80054d8:	4639      	mov	r1, r7
 80054da:	f7fb f851 	bl	8000580 <__aeabi_dmul>
 80054de:	3c01      	subs	r4, #1
 80054e0:	4606      	mov	r6, r0
 80054e2:	460f      	mov	r7, r1
 80054e4:	e713      	b.n	800530e <__kernel_rem_pio2+0x2c6>
 80054e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80054ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80054ee:	f7fb f847 	bl	8000580 <__aeabi_dmul>
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4648      	mov	r0, r9
 80054f8:	4651      	mov	r1, sl
 80054fa:	f7fa fe8b 	bl	8000214 <__adddf3>
 80054fe:	3701      	adds	r7, #1
 8005500:	4681      	mov	r9, r0
 8005502:	468a      	mov	sl, r1
 8005504:	9b00      	ldr	r3, [sp, #0]
 8005506:	429f      	cmp	r7, r3
 8005508:	dc02      	bgt.n	8005510 <__kernel_rem_pio2+0x4c8>
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	429f      	cmp	r7, r3
 800550e:	ddea      	ble.n	80054e6 <__kernel_rem_pio2+0x49e>
 8005510:	9a06      	ldr	r2, [sp, #24]
 8005512:	ab48      	add	r3, sp, #288	; 0x120
 8005514:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8005518:	e9c6 9a00 	strd	r9, sl, [r6]
 800551c:	3c01      	subs	r4, #1
 800551e:	e6fa      	b.n	8005316 <__kernel_rem_pio2+0x2ce>
 8005520:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005522:	2b02      	cmp	r3, #2
 8005524:	dc0b      	bgt.n	800553e <__kernel_rem_pio2+0x4f6>
 8005526:	2b00      	cmp	r3, #0
 8005528:	dc39      	bgt.n	800559e <__kernel_rem_pio2+0x556>
 800552a:	d05d      	beq.n	80055e8 <__kernel_rem_pio2+0x5a0>
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	f003 0007 	and.w	r0, r3, #7
 8005532:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005536:	ecbd 8b02 	vpop	{d8}
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005540:	2b03      	cmp	r3, #3
 8005542:	d1f3      	bne.n	800552c <__kernel_rem_pio2+0x4e4>
 8005544:	9b05      	ldr	r3, [sp, #20]
 8005546:	9500      	str	r5, [sp, #0]
 8005548:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800554c:	eb0d 0403 	add.w	r4, sp, r3
 8005550:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8005554:	46a2      	mov	sl, r4
 8005556:	9b00      	ldr	r3, [sp, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	f1aa 0a08 	sub.w	sl, sl, #8
 800555e:	dc69      	bgt.n	8005634 <__kernel_rem_pio2+0x5ec>
 8005560:	46aa      	mov	sl, r5
 8005562:	f1ba 0f01 	cmp.w	sl, #1
 8005566:	f1a4 0408 	sub.w	r4, r4, #8
 800556a:	f300 8083 	bgt.w	8005674 <__kernel_rem_pio2+0x62c>
 800556e:	9c05      	ldr	r4, [sp, #20]
 8005570:	ab48      	add	r3, sp, #288	; 0x120
 8005572:	441c      	add	r4, r3
 8005574:	2000      	movs	r0, #0
 8005576:	2100      	movs	r1, #0
 8005578:	2d01      	cmp	r5, #1
 800557a:	f300 809a 	bgt.w	80056b2 <__kernel_rem_pio2+0x66a>
 800557e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8005582:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005586:	f1bb 0f00 	cmp.w	fp, #0
 800558a:	f040 8098 	bne.w	80056be <__kernel_rem_pio2+0x676>
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	e9c3 7800 	strd	r7, r8, [r3]
 8005594:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005598:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800559c:	e7c6      	b.n	800552c <__kernel_rem_pio2+0x4e4>
 800559e:	9e05      	ldr	r6, [sp, #20]
 80055a0:	ab48      	add	r3, sp, #288	; 0x120
 80055a2:	441e      	add	r6, r3
 80055a4:	462c      	mov	r4, r5
 80055a6:	2000      	movs	r0, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	2c00      	cmp	r4, #0
 80055ac:	da33      	bge.n	8005616 <__kernel_rem_pio2+0x5ce>
 80055ae:	f1bb 0f00 	cmp.w	fp, #0
 80055b2:	d036      	beq.n	8005622 <__kernel_rem_pio2+0x5da>
 80055b4:	4602      	mov	r2, r0
 80055b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ba:	9c04      	ldr	r4, [sp, #16]
 80055bc:	e9c4 2300 	strd	r2, r3, [r4]
 80055c0:	4602      	mov	r2, r0
 80055c2:	460b      	mov	r3, r1
 80055c4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80055c8:	f7fa fe22 	bl	8000210 <__aeabi_dsub>
 80055cc:	ae4a      	add	r6, sp, #296	; 0x128
 80055ce:	2401      	movs	r4, #1
 80055d0:	42a5      	cmp	r5, r4
 80055d2:	da29      	bge.n	8005628 <__kernel_rem_pio2+0x5e0>
 80055d4:	f1bb 0f00 	cmp.w	fp, #0
 80055d8:	d002      	beq.n	80055e0 <__kernel_rem_pio2+0x598>
 80055da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055de:	4619      	mov	r1, r3
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80055e6:	e7a1      	b.n	800552c <__kernel_rem_pio2+0x4e4>
 80055e8:	9c05      	ldr	r4, [sp, #20]
 80055ea:	ab48      	add	r3, sp, #288	; 0x120
 80055ec:	441c      	add	r4, r3
 80055ee:	2000      	movs	r0, #0
 80055f0:	2100      	movs	r1, #0
 80055f2:	2d00      	cmp	r5, #0
 80055f4:	da09      	bge.n	800560a <__kernel_rem_pio2+0x5c2>
 80055f6:	f1bb 0f00 	cmp.w	fp, #0
 80055fa:	d002      	beq.n	8005602 <__kernel_rem_pio2+0x5ba>
 80055fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005600:	4619      	mov	r1, r3
 8005602:	9b04      	ldr	r3, [sp, #16]
 8005604:	e9c3 0100 	strd	r0, r1, [r3]
 8005608:	e790      	b.n	800552c <__kernel_rem_pio2+0x4e4>
 800560a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800560e:	f7fa fe01 	bl	8000214 <__adddf3>
 8005612:	3d01      	subs	r5, #1
 8005614:	e7ed      	b.n	80055f2 <__kernel_rem_pio2+0x5aa>
 8005616:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800561a:	f7fa fdfb 	bl	8000214 <__adddf3>
 800561e:	3c01      	subs	r4, #1
 8005620:	e7c3      	b.n	80055aa <__kernel_rem_pio2+0x562>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e7c8      	b.n	80055ba <__kernel_rem_pio2+0x572>
 8005628:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800562c:	f7fa fdf2 	bl	8000214 <__adddf3>
 8005630:	3401      	adds	r4, #1
 8005632:	e7cd      	b.n	80055d0 <__kernel_rem_pio2+0x588>
 8005634:	e9da 8900 	ldrd	r8, r9, [sl]
 8005638:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	3b01      	subs	r3, #1
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	4632      	mov	r2, r6
 8005644:	463b      	mov	r3, r7
 8005646:	4640      	mov	r0, r8
 8005648:	4649      	mov	r1, r9
 800564a:	f7fa fde3 	bl	8000214 <__adddf3>
 800564e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fa fdd9 	bl	8000210 <__aeabi_dsub>
 800565e:	4632      	mov	r2, r6
 8005660:	463b      	mov	r3, r7
 8005662:	f7fa fdd7 	bl	8000214 <__adddf3>
 8005666:	ed9d 7b06 	vldr	d7, [sp, #24]
 800566a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800566e:	ed8a 7b00 	vstr	d7, [sl]
 8005672:	e770      	b.n	8005556 <__kernel_rem_pio2+0x50e>
 8005674:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005678:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800567c:	4640      	mov	r0, r8
 800567e:	4632      	mov	r2, r6
 8005680:	463b      	mov	r3, r7
 8005682:	4649      	mov	r1, r9
 8005684:	f7fa fdc6 	bl	8000214 <__adddf3>
 8005688:	e9cd 0100 	strd	r0, r1, [sp]
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4640      	mov	r0, r8
 8005692:	4649      	mov	r1, r9
 8005694:	f7fa fdbc 	bl	8000210 <__aeabi_dsub>
 8005698:	4632      	mov	r2, r6
 800569a:	463b      	mov	r3, r7
 800569c:	f7fa fdba 	bl	8000214 <__adddf3>
 80056a0:	ed9d 7b00 	vldr	d7, [sp]
 80056a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80056a8:	ed84 7b00 	vstr	d7, [r4]
 80056ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056b0:	e757      	b.n	8005562 <__kernel_rem_pio2+0x51a>
 80056b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80056b6:	f7fa fdad 	bl	8000214 <__adddf3>
 80056ba:	3d01      	subs	r5, #1
 80056bc:	e75c      	b.n	8005578 <__kernel_rem_pio2+0x530>
 80056be:	9b04      	ldr	r3, [sp, #16]
 80056c0:	9a04      	ldr	r2, [sp, #16]
 80056c2:	601f      	str	r7, [r3, #0]
 80056c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80056c8:	605c      	str	r4, [r3, #4]
 80056ca:	609d      	str	r5, [r3, #8]
 80056cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056d0:	60d3      	str	r3, [r2, #12]
 80056d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056d6:	6110      	str	r0, [r2, #16]
 80056d8:	6153      	str	r3, [r2, #20]
 80056da:	e727      	b.n	800552c <__kernel_rem_pio2+0x4e4>
 80056dc:	41700000 	.word	0x41700000
 80056e0:	3e700000 	.word	0x3e700000
 80056e4:	00000000 	.word	0x00000000

080056e8 <scalbn>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	ec55 4b10 	vmov	r4, r5, d0
 80056ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80056f2:	4606      	mov	r6, r0
 80056f4:	462b      	mov	r3, r5
 80056f6:	b999      	cbnz	r1, 8005720 <scalbn+0x38>
 80056f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056fc:	4323      	orrs	r3, r4
 80056fe:	d03f      	beq.n	8005780 <scalbn+0x98>
 8005700:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <scalbn+0xf0>)
 8005702:	4629      	mov	r1, r5
 8005704:	ee10 0a10 	vmov	r0, s0
 8005708:	2200      	movs	r2, #0
 800570a:	f7fa ff39 	bl	8000580 <__aeabi_dmul>
 800570e:	4b33      	ldr	r3, [pc, #204]	; (80057dc <scalbn+0xf4>)
 8005710:	429e      	cmp	r6, r3
 8005712:	4604      	mov	r4, r0
 8005714:	460d      	mov	r5, r1
 8005716:	da10      	bge.n	800573a <scalbn+0x52>
 8005718:	a327      	add	r3, pc, #156	; (adr r3, 80057b8 <scalbn+0xd0>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	e01f      	b.n	8005760 <scalbn+0x78>
 8005720:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005724:	4291      	cmp	r1, r2
 8005726:	d10c      	bne.n	8005742 <scalbn+0x5a>
 8005728:	ee10 2a10 	vmov	r2, s0
 800572c:	4620      	mov	r0, r4
 800572e:	4629      	mov	r1, r5
 8005730:	f7fa fd70 	bl	8000214 <__adddf3>
 8005734:	4604      	mov	r4, r0
 8005736:	460d      	mov	r5, r1
 8005738:	e022      	b.n	8005780 <scalbn+0x98>
 800573a:	460b      	mov	r3, r1
 800573c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005740:	3936      	subs	r1, #54	; 0x36
 8005742:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005746:	4296      	cmp	r6, r2
 8005748:	dd0d      	ble.n	8005766 <scalbn+0x7e>
 800574a:	2d00      	cmp	r5, #0
 800574c:	a11c      	add	r1, pc, #112	; (adr r1, 80057c0 <scalbn+0xd8>)
 800574e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005752:	da02      	bge.n	800575a <scalbn+0x72>
 8005754:	a11c      	add	r1, pc, #112	; (adr r1, 80057c8 <scalbn+0xe0>)
 8005756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800575a:	a319      	add	r3, pc, #100	; (adr r3, 80057c0 <scalbn+0xd8>)
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f7fa ff0e 	bl	8000580 <__aeabi_dmul>
 8005764:	e7e6      	b.n	8005734 <scalbn+0x4c>
 8005766:	1872      	adds	r2, r6, r1
 8005768:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800576c:	428a      	cmp	r2, r1
 800576e:	dcec      	bgt.n	800574a <scalbn+0x62>
 8005770:	2a00      	cmp	r2, #0
 8005772:	dd08      	ble.n	8005786 <scalbn+0x9e>
 8005774:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005778:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800577c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005780:	ec45 4b10 	vmov	d0, r4, r5
 8005784:	bd70      	pop	{r4, r5, r6, pc}
 8005786:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800578a:	da08      	bge.n	800579e <scalbn+0xb6>
 800578c:	2d00      	cmp	r5, #0
 800578e:	a10a      	add	r1, pc, #40	; (adr r1, 80057b8 <scalbn+0xd0>)
 8005790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005794:	dac0      	bge.n	8005718 <scalbn+0x30>
 8005796:	a10e      	add	r1, pc, #56	; (adr r1, 80057d0 <scalbn+0xe8>)
 8005798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579c:	e7bc      	b.n	8005718 <scalbn+0x30>
 800579e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80057a2:	3236      	adds	r2, #54	; 0x36
 80057a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80057ac:	4620      	mov	r0, r4
 80057ae:	4b0c      	ldr	r3, [pc, #48]	; (80057e0 <scalbn+0xf8>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	e7d5      	b.n	8005760 <scalbn+0x78>
 80057b4:	f3af 8000 	nop.w
 80057b8:	c2f8f359 	.word	0xc2f8f359
 80057bc:	01a56e1f 	.word	0x01a56e1f
 80057c0:	8800759c 	.word	0x8800759c
 80057c4:	7e37e43c 	.word	0x7e37e43c
 80057c8:	8800759c 	.word	0x8800759c
 80057cc:	fe37e43c 	.word	0xfe37e43c
 80057d0:	c2f8f359 	.word	0xc2f8f359
 80057d4:	81a56e1f 	.word	0x81a56e1f
 80057d8:	43500000 	.word	0x43500000
 80057dc:	ffff3cb0 	.word	0xffff3cb0
 80057e0:	3c900000 	.word	0x3c900000
 80057e4:	00000000 	.word	0x00000000

080057e8 <floor>:
 80057e8:	ec51 0b10 	vmov	r0, r1, d0
 80057ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80057f8:	2e13      	cmp	r6, #19
 80057fa:	ee10 5a10 	vmov	r5, s0
 80057fe:	ee10 8a10 	vmov	r8, s0
 8005802:	460c      	mov	r4, r1
 8005804:	dc31      	bgt.n	800586a <floor+0x82>
 8005806:	2e00      	cmp	r6, #0
 8005808:	da14      	bge.n	8005834 <floor+0x4c>
 800580a:	a333      	add	r3, pc, #204	; (adr r3, 80058d8 <floor+0xf0>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fd00 	bl	8000214 <__adddf3>
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	f7fb f942 	bl	8000aa0 <__aeabi_dcmpgt>
 800581c:	b138      	cbz	r0, 800582e <floor+0x46>
 800581e:	2c00      	cmp	r4, #0
 8005820:	da53      	bge.n	80058ca <floor+0xe2>
 8005822:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005826:	4325      	orrs	r5, r4
 8005828:	d052      	beq.n	80058d0 <floor+0xe8>
 800582a:	4c2d      	ldr	r4, [pc, #180]	; (80058e0 <floor+0xf8>)
 800582c:	2500      	movs	r5, #0
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	e024      	b.n	800587e <floor+0x96>
 8005834:	4f2b      	ldr	r7, [pc, #172]	; (80058e4 <floor+0xfc>)
 8005836:	4137      	asrs	r7, r6
 8005838:	ea01 0307 	and.w	r3, r1, r7
 800583c:	4303      	orrs	r3, r0
 800583e:	d01e      	beq.n	800587e <floor+0x96>
 8005840:	a325      	add	r3, pc, #148	; (adr r3, 80058d8 <floor+0xf0>)
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	f7fa fce5 	bl	8000214 <__adddf3>
 800584a:	2200      	movs	r2, #0
 800584c:	2300      	movs	r3, #0
 800584e:	f7fb f927 	bl	8000aa0 <__aeabi_dcmpgt>
 8005852:	2800      	cmp	r0, #0
 8005854:	d0eb      	beq.n	800582e <floor+0x46>
 8005856:	2c00      	cmp	r4, #0
 8005858:	bfbe      	ittt	lt
 800585a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800585e:	4133      	asrlt	r3, r6
 8005860:	18e4      	addlt	r4, r4, r3
 8005862:	ea24 0407 	bic.w	r4, r4, r7
 8005866:	2500      	movs	r5, #0
 8005868:	e7e1      	b.n	800582e <floor+0x46>
 800586a:	2e33      	cmp	r6, #51	; 0x33
 800586c:	dd0b      	ble.n	8005886 <floor+0x9e>
 800586e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005872:	d104      	bne.n	800587e <floor+0x96>
 8005874:	ee10 2a10 	vmov	r2, s0
 8005878:	460b      	mov	r3, r1
 800587a:	f7fa fccb 	bl	8000214 <__adddf3>
 800587e:	ec41 0b10 	vmov	d0, r0, r1
 8005882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005886:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800588a:	f04f 37ff 	mov.w	r7, #4294967295
 800588e:	40df      	lsrs	r7, r3
 8005890:	4238      	tst	r0, r7
 8005892:	d0f4      	beq.n	800587e <floor+0x96>
 8005894:	a310      	add	r3, pc, #64	; (adr r3, 80058d8 <floor+0xf0>)
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa fcbb 	bl	8000214 <__adddf3>
 800589e:	2200      	movs	r2, #0
 80058a0:	2300      	movs	r3, #0
 80058a2:	f7fb f8fd 	bl	8000aa0 <__aeabi_dcmpgt>
 80058a6:	2800      	cmp	r0, #0
 80058a8:	d0c1      	beq.n	800582e <floor+0x46>
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	da0a      	bge.n	80058c4 <floor+0xdc>
 80058ae:	2e14      	cmp	r6, #20
 80058b0:	d101      	bne.n	80058b6 <floor+0xce>
 80058b2:	3401      	adds	r4, #1
 80058b4:	e006      	b.n	80058c4 <floor+0xdc>
 80058b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80058ba:	2301      	movs	r3, #1
 80058bc:	40b3      	lsls	r3, r6
 80058be:	441d      	add	r5, r3
 80058c0:	45a8      	cmp	r8, r5
 80058c2:	d8f6      	bhi.n	80058b2 <floor+0xca>
 80058c4:	ea25 0507 	bic.w	r5, r5, r7
 80058c8:	e7b1      	b.n	800582e <floor+0x46>
 80058ca:	2500      	movs	r5, #0
 80058cc:	462c      	mov	r4, r5
 80058ce:	e7ae      	b.n	800582e <floor+0x46>
 80058d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80058d4:	e7ab      	b.n	800582e <floor+0x46>
 80058d6:	bf00      	nop
 80058d8:	8800759c 	.word	0x8800759c
 80058dc:	7e37e43c 	.word	0x7e37e43c
 80058e0:	bff00000 	.word	0xbff00000
 80058e4:	000fffff 	.word	0x000fffff

080058e8 <_init>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	bf00      	nop
 80058ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ee:	bc08      	pop	{r3}
 80058f0:	469e      	mov	lr, r3
 80058f2:	4770      	bx	lr

080058f4 <_fini>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr
