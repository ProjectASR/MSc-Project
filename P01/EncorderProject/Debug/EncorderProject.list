
EncorderProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f3c  08006f3c  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006f44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002774  20000078  08006fbc  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027ec  08006fbc  000087ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f881  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250b  00000000  00000000  00017929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00019e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf2  00000000  00000000  0001adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027aff  00000000  00000000  0001b9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014462  00000000  00000000  000434a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1035  00000000  00000000  00057903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  0014897c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014cf2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dec 	.word	0x08006dec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006dec 	.word	0x08006dec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <SELECT+0x14>)
 80005f6:	f001 fd33 	bl	8002060 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400

08000604 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <DESELECT+0x14>)
 800060e:	f001 fd27 	bl	8002060 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020400 	.word	0x40020400

0800061c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000626:	bf00      	nop
 8000628:	4808      	ldr	r0, [pc, #32]	@ (800064c <SPI_TxByte+0x30>)
 800062a:	f002 fdcb 	bl	80031c4 <HAL_SPI_GetState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d1f9      	bne.n	8000628 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <SPI_TxByte+0x30>)
 800063e:	f002 fa2a 	bl	8002a96 <HAL_SPI_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098

08000650 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000656:	23ff      	movs	r3, #255	@ 0xff
 8000658:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 800065e:	bf00      	nop
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <SPI_RxByte+0x38>)
 8000662:	f002 fdaf 	bl	80031c4 <HAL_SPI_GetState>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	d1f9      	bne.n	8000660 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 800066c:	1dba      	adds	r2, r7, #6
 800066e:	1df9      	adds	r1, r7, #7
 8000670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_RxByte+0x38>)
 800067a:	f002 fb81 	bl	8002d80 <HAL_SPI_TransmitReceive>
  
  return data;
 800067e:	79bb      	ldrb	r3, [r7, #6]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098

0800068c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000694:	f7ff ffdc 	bl	8000650 <SPI_RxByte>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  timer2 = 50;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <SD_ReadyWait+0x34>)
 80006b0:	2232      	movs	r2, #50	@ 0x32
 80006b2:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80006b4:	f7ff ffcc 	bl	8000650 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80006b8:	f7ff ffca 	bl	8000650 <SPI_RxByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && timer2);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2bff      	cmp	r3, #255	@ 0xff
 80006c4:	d004      	beq.n	80006d0 <SD_ReadyWait+0x28>
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <SD_ReadyWait+0x34>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f3      	bne.n	80006b8 <SD_ReadyWait+0x10>
  
  return res;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000265e 	.word	0x2000265e

080006e0 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006e6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006ea:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80006ec:	f7ff ff8a 	bl	8000604 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	e005      	b.n	8000702 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006f6:	20ff      	movs	r0, #255	@ 0xff
 80006f8:	f7ff ff90 	bl	800061c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	3301      	adds	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	2b09      	cmp	r3, #9
 8000706:	ddf6      	ble.n	80006f6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000708:	f7ff ff70 	bl	80005ec <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000720:	2395      	movs	r3, #149	@ 0x95
 8000722:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e009      	b.n	800073e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff72 	bl	800061c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b05      	cmp	r3, #5
 8000742:	ddf2      	ble.n	800072a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000744:	e002      	b.n	800074c <SD_PowerOn+0x6c>
  {
    Count--;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3b01      	subs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800074c:	f7ff ff80 	bl	8000650 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <SD_PowerOn+0x7c>
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f4      	bne.n	8000746 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800075c:	f7ff ff52 	bl	8000604 <DESELECT>
  SPI_TxByte(0XFF);
 8000760:	20ff      	movs	r0, #255	@ 0xff
 8000762:	f7ff ff5b 	bl	800061c <SPI_TxByte>
  
  PowerFlag = 1;
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <SD_PowerOn+0x94>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000095 	.word	0x20000095

08000778 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <SD_PowerOff+0x14>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000095 	.word	0x20000095

08000790 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <SD_CheckPower+0x14>)
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000095 	.word	0x20000095

080007a8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  timer1 = 10;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <SD_RxDataBlock+0x68>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80007b8:	f7ff ff4a 	bl	8000650 <SPI_RxByte>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && timer1);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d104      	bne.n	80007d0 <SD_RxDataBlock+0x28>
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SD_RxDataBlock+0x68>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f3      	bne.n	80007b8 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d4:	d001      	beq.n	80007da <SD_RxDataBlock+0x32>
    return FALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e016      	b.n	8000808 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff53 	bl	800068c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff4d 	bl	800068c <SPI_RxBytePtr>
  } while(btr -= 2);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3b02      	subs	r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ed      	bne.n	80007da <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80007fe:	f7ff ff27 	bl	8000650 <SPI_RxByte>
  SPI_RxByte();
 8000802:	f7ff ff25 	bl	8000650 <SPI_RxByte>
  
  return TRUE;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000265d 	.word	0x2000265d

08000814 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000824:	f7ff ff40 	bl	80006a8 <SD_ReadyWait>
 8000828:	4603      	mov	r3, r0
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	d001      	beq.n	8000832 <SD_TxDataBlock+0x1e>
    return FALSE;
 800082e:	2300      	movs	r3, #0
 8000830:	e040      	b.n	80008b4 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fef1 	bl	800061c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2bfd      	cmp	r3, #253	@ 0xfd
 800083e:	d031      	beq.n	80008a4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fee5 	bl	800061c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fede 	bl	800061c <SPI_TxByte>
    } while (--wc);
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3b01      	subs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1eb      	bne.n	8000844 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800086c:	f7ff fef0 	bl	8000650 <SPI_RxByte>
    SPI_RxByte();
 8000870:	f7ff feee 	bl	8000650 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000874:	e00b      	b.n	800088e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000876:	f7ff feeb 	bl	8000650 <SPI_RxByte>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	2b05      	cmp	r3, #5
 8000886:	d006      	beq.n	8000896 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	3301      	adds	r3, #1
 800088c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	2b40      	cmp	r3, #64	@ 0x40
 8000892:	d9f0      	bls.n	8000876 <SD_TxDataBlock+0x62>
 8000894:	e000      	b.n	8000898 <SD_TxDataBlock+0x84>
        break;
 8000896:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000898:	bf00      	nop
 800089a:	f7ff fed9 	bl	8000650 <SPI_RxByte>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0fa      	beq.n	800089a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d101      	bne.n	80008b2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008c8:	f7ff feee 	bl	80006a8 <SD_ReadyWait>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2bff      	cmp	r3, #255	@ 0xff
 80008d0:	d001      	beq.n	80008d6 <SD_SendCmd+0x1a>
    return 0xFF;
 80008d2:	23ff      	movs	r3, #255	@ 0xff
 80008d4:	e040      	b.n	8000958 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9f 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	0e1b      	lsrs	r3, r3, #24
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe99 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	0c1b      	lsrs	r3, r3, #16
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe93 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe8d 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe88 	bl	800061c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b40      	cmp	r3, #64	@ 0x40
 8000914:	d101      	bne.n	800091a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000916:	2395      	movs	r3, #149	@ 0x95
 8000918:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b48      	cmp	r3, #72	@ 0x48
 800091e:	d101      	bne.n	8000924 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000920:	2387      	movs	r3, #135	@ 0x87
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe78 	bl	800061c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000930:	d101      	bne.n	8000936 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000932:	f7ff fe8d 	bl	8000650 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000936:	230a      	movs	r3, #10
 8000938:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800093a:	f7ff fe89 	bl	8000650 <SPI_RxByte>
 800093e:	4603      	mov	r3, r0
 8000940:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000942:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da05      	bge.n	8000956 <SD_SendCmd+0x9a>
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	3b01      	subs	r3, #1
 800094e:	73bb      	strb	r3, [r7, #14]
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f1      	bne.n	800093a <SD_SendCmd+0x7e>
  
  return res;
 8000956:	7b7b      	ldrb	r3, [r7, #13]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000970:	2301      	movs	r3, #1
 8000972:	e0d5      	b.n	8000b20 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000974:	4b6c      	ldr	r3, [pc, #432]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <SD_disk_initialize+0x2a>
    return Stat;        
 8000982:	4b69      	ldr	r3, [pc, #420]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	e0ca      	b.n	8000b20 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800098a:	f7ff fea9 	bl	80006e0 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800098e:	f7ff fe2d 	bl	80005ec <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000996:	2100      	movs	r1, #0
 8000998:	2040      	movs	r0, #64	@ 0x40
 800099a:	f7ff ff8f 	bl	80008bc <SD_SendCmd>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	f040 80a5 	bne.w	8000af0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    timer1 = 100;
 80009a6:	4b61      	ldr	r3, [pc, #388]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 80009a8:	2264      	movs	r2, #100	@ 0x64
 80009aa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80009ac:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009b0:	2048      	movs	r0, #72	@ 0x48
 80009b2:	f7ff ff83 	bl	80008bc <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d158      	bne.n	8000a6e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe44 	bl	8000650 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	f040 8083 	bne.w	8000af0 <SD_disk_initialize+0x190>
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	2baa      	cmp	r3, #170	@ 0xaa
 80009ee:	d17f      	bne.n	8000af0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009f0:	2100      	movs	r1, #0
 80009f2:	2077      	movs	r0, #119	@ 0x77
 80009f4:	f7ff ff62 	bl	80008bc <SD_SendCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d807      	bhi.n	8000a0e <SD_disk_initialize+0xae>
 80009fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a02:	2069      	movs	r0, #105	@ 0x69
 8000a04:	f7ff ff5a 	bl	80008bc <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (timer1);
 8000a0e:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1eb      	bne.n	80009f0 <SD_disk_initialize+0x90>
 8000a18:	e000      	b.n	8000a1c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000a1a:	bf00      	nop
        
        if (timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d064      	beq.n	8000af0 <SD_disk_initialize+0x190>
 8000a26:	2100      	movs	r1, #0
 8000a28:	207a      	movs	r0, #122	@ 0x7a
 8000a2a:	f7ff ff47 	bl	80008bc <SD_SendCmd>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d15d      	bne.n	8000af0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e00c      	b.n	8000a54 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a3a:	7bfc      	ldrb	r4, [r7, #15]
 8000a3c:	f7ff fe08 	bl	8000650 <SPI_RxByte>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	f104 0310 	add.w	r3, r4, #16
 8000a48:	443b      	add	r3, r7
 8000a4a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	3301      	adds	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d9ef      	bls.n	8000a3a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a5a:	7a3b      	ldrb	r3, [r7, #8]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x108>
 8000a64:	2306      	movs	r3, #6
 8000a66:	e000      	b.n	8000a6a <SD_disk_initialize+0x10a>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	73bb      	strb	r3, [r7, #14]
 8000a6c:	e040      	b.n	8000af0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2077      	movs	r0, #119	@ 0x77
 8000a72:	f7ff ff23 	bl	80008bc <SD_SendCmd>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d808      	bhi.n	8000a8e <SD_disk_initialize+0x12e>
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2069      	movs	r0, #105	@ 0x69
 8000a80:	f7ff ff1c 	bl	80008bc <SD_SendCmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d801      	bhi.n	8000a8e <SD_disk_initialize+0x12e>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e000      	b.n	8000a90 <SD_disk_initialize+0x130>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d10e      	bne.n	8000ab6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2077      	movs	r0, #119	@ 0x77
 8000a9c:	f7ff ff0e 	bl	80008bc <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d80e      	bhi.n	8000ac4 <SD_disk_initialize+0x164>
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2069      	movs	r0, #105	@ 0x69
 8000aaa:	f7ff ff07 	bl	80008bc <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d107      	bne.n	8000ac4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000ab4:	e00d      	b.n	8000ad2 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2041      	movs	r0, #65	@ 0x41
 8000aba:	f7ff feff 	bl	80008bc <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (timer1);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1e1      	bne.n	8000a92 <SD_disk_initialize+0x132>
 8000ace:	e000      	b.n	8000ad2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ad0:	bf00      	nop
      
      if (!timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d007      	beq.n	8000aec <SD_disk_initialize+0x18c>
 8000adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae0:	2050      	movs	r0, #80	@ 0x50
 8000ae2:	f7ff feeb 	bl	80008bc <SD_SendCmd>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <SD_disk_initialize+0x1d0>)
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000af6:	f7ff fd85 	bl	8000604 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000afa:	f7ff fda9 	bl	8000650 <SPI_RxByte>
  
  if (type) 
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e001      	b.n	8000b1a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000b16:	f7ff fe2f 	bl	8000778 <SD_PowerOff>
  }
  
  return Stat;
 8000b1a:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	2000265d 	.word	0x2000265d
 8000b30:	20000094 	.word	0x20000094

08000b34 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000b44:	2301      	movs	r3, #1
 8000b46:	e002      	b.n	8000b4e <SD_disk_status+0x1a>
  
  return Stat;
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SD_disk_status+0x28>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000

08000b60 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <SD_disk_read+0x1c>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e051      	b.n	8000c24 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <SD_disk_read+0xcc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e048      	b.n	8000c24 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <SD_disk_read+0xd0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	025b      	lsls	r3, r3, #9
 8000ba2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000ba4:	f7ff fd22 	bl	80005ec <SELECT>
  
  if (count == 1) 
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d111      	bne.n	8000bd2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2051      	movs	r0, #81	@ 0x51
 8000bb2:	f7ff fe83 	bl	80008bc <SD_SendCmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d129      	bne.n	8000c10 <SD_disk_read+0xb0>
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f7ff fdf1 	bl	80007a8 <SD_RxDataBlock>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d021      	beq.n	8000c10 <SD_disk_read+0xb0>
      count = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	e01e      	b.n	8000c10 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2052      	movs	r0, #82	@ 0x52
 8000bd6:	f7ff fe71 	bl	80008bc <SD_SendCmd>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d117      	bne.n	8000c10 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000be0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f7ff fddf 	bl	80007a8 <SD_RxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00a      	beq.n	8000c06 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1ed      	bne.n	8000be0 <SD_disk_read+0x80>
 8000c04:	e000      	b.n	8000c08 <SD_disk_read+0xa8>
          break;
 8000c06:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000c08:	2100      	movs	r1, #0
 8000c0a:	204c      	movs	r0, #76	@ 0x4c
 8000c0c:	f7ff fe56 	bl	80008bc <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000c10:	f7ff fcf8 	bl	8000604 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000c14:	f7ff fd1c 	bl	8000650 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf14      	ite	ne
 8000c1e:	2301      	movne	r3, #1
 8000c20:	2300      	moveq	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000094 	.word	0x20000094

08000c34 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <SD_disk_write+0x1c>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c50:	2304      	movs	r3, #4
 8000c52:	e06b      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000c54:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <SD_disk_write+0x100>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e062      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000c66:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <SD_disk_write+0x100>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c74:	2302      	movs	r3, #2
 8000c76:	e059      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000c78:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <SD_disk_write+0x104>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000c8a:	f7ff fcaf 	bl	80005ec <SELECT>
  
  if (count == 1) 
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d110      	bne.n	8000cb6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2058      	movs	r0, #88	@ 0x58
 8000c98:	f7ff fe10 	bl	80008bc <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d13a      	bne.n	8000d18 <SD_disk_write+0xe4>
 8000ca2:	21fe      	movs	r1, #254	@ 0xfe
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f7ff fdb5 	bl	8000814 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d033      	beq.n	8000d18 <SD_disk_write+0xe4>
      count = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	e030      	b.n	8000d18 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000cb6:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <SD_disk_write+0x104>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2077      	movs	r0, #119	@ 0x77
 8000cc6:	f7ff fdf9 	bl	80008bc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	2057      	movs	r0, #87	@ 0x57
 8000cce:	f7ff fdf5 	bl	80008bc <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2059      	movs	r0, #89	@ 0x59
 8000cd6:	f7ff fdf1 	bl	80008bc <SD_SendCmd>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11b      	bne.n	8000d18 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000ce0:	21fc      	movs	r1, #252	@ 0xfc
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f7ff fd96 	bl	8000814 <SD_TxDataBlock>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00a      	beq.n	8000d04 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cf4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ee      	bne.n	8000ce0 <SD_disk_write+0xac>
 8000d02:	e000      	b.n	8000d06 <SD_disk_write+0xd2>
          break;
 8000d04:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000d06:	21fd      	movs	r1, #253	@ 0xfd
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd83 	bl	8000814 <SD_TxDataBlock>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <SD_disk_write+0xe4>
      {        
        count = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000d18:	f7ff fc74 	bl	8000604 <DESELECT>
  SPI_RxByte();
 8000d1c:	f7ff fc98 	bl	8000650 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000094 	.word	0x20000094

08000d3c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	603a      	str	r2, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d56:	2304      	movs	r3, #4
 8000d58:	e119      	b.n	8000f8e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d129      	bne.n	8000dba <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d017      	beq.n	8000d9e <SD_disk_ioctl+0x62>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	dc1f      	bgt.n	8000db2 <SD_disk_ioctl+0x76>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <SD_disk_ioctl+0x40>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d00b      	beq.n	8000d92 <SD_disk_ioctl+0x56>
 8000d7a:	e01a      	b.n	8000db2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d7c:	f7ff fd08 	bl	8000790 <SD_CheckPower>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d86:	f7ff fcf7 	bl	8000778 <SD_PowerOff>
      res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d90:	e0fb      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d92:	f7ff fca5 	bl	80006e0 <SD_PowerOn>
      res = RES_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d9c:	e0f5      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	1c5c      	adds	r4, r3, #1
 8000da2:	f7ff fcf5 	bl	8000790 <SD_CheckPower>
 8000da6:	4603      	mov	r3, r0
 8000da8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000db0:	e0eb      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000db2:	2304      	movs	r3, #4
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000db8:	e0e7      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000dba:	4b77      	ldr	r3, [pc, #476]	@ (8000f98 <SD_disk_ioctl+0x25c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e0e0      	b.n	8000f8e <SD_disk_ioctl+0x252>
    
    SELECT();
 8000dcc:	f7ff fc0e 	bl	80005ec <SELECT>
    
    switch (ctrl) 
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b0d      	cmp	r3, #13
 8000dd4:	f200 80ca 	bhi.w	8000f6c <SD_disk_ioctl+0x230>
 8000dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <SD_disk_ioctl+0xa4>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000ed7 	.word	0x08000ed7
 8000de4:	08000e19 	.word	0x08000e19
 8000de8:	08000ec7 	.word	0x08000ec7
 8000dec:	08000f6d 	.word	0x08000f6d
 8000df0:	08000f6d 	.word	0x08000f6d
 8000df4:	08000f6d 	.word	0x08000f6d
 8000df8:	08000f6d 	.word	0x08000f6d
 8000dfc:	08000f6d 	.word	0x08000f6d
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08000f6d 	.word	0x08000f6d
 8000e08:	08000f6d 	.word	0x08000f6d
 8000e0c:	08000ee9 	.word	0x08000ee9
 8000e10:	08000f0d 	.word	0x08000f0d
 8000e14:	08000f31 	.word	0x08000f31
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2049      	movs	r0, #73	@ 0x49
 8000e1c:	f7ff fd4e 	bl	80008bc <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 80a6 	bne.w	8000f74 <SD_disk_ioctl+0x238>
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fcba 	bl	80007a8 <SD_RxDataBlock>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 809c 	beq.w	8000f74 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8000e3c:	7b3b      	ldrb	r3, [r7, #12]
 8000e3e:	099b      	lsrs	r3, r3, #6
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10d      	bne.n	8000e62 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	7d3b      	ldrb	r3, [r7, #20]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e58:	8bfb      	ldrh	r3, [r7, #30]
 8000e5a:	029a      	lsls	r2, r3, #10
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e02d      	b.n	8000ebe <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e62:	7c7b      	ldrb	r3, [r7, #17]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	09db      	lsrs	r3, r3, #7
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	7d7b      	ldrb	r3, [r7, #21]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0306 	and.w	r3, r3, #6
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3302      	adds	r3, #2
 8000e86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e8a:	7d3b      	ldrb	r3, [r7, #20]
 8000e8c:	099b      	lsrs	r3, r3, #6
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	7cbb      	ldrb	r3, [r7, #18]
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000eb0:	8bfa      	ldrh	r2, [r7, #30]
 8000eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000eb6:	3b09      	subs	r3, #9
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000ec4:	e056      	b.n	8000f74 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ecc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ed4:	e055      	b.n	8000f82 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000ed6:	f7ff fbe7 	bl	80006a8 <SD_ReadyWait>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2bff      	cmp	r3, #255	@ 0xff
 8000ede:	d14b      	bne.n	8000f78 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ee6:	e047      	b.n	8000f78 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2049      	movs	r0, #73	@ 0x49
 8000eec:	f7ff fce6 	bl	80008bc <SD_SendCmd>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d142      	bne.n	8000f7c <SD_disk_ioctl+0x240>
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	6a38      	ldr	r0, [r7, #32]
 8000efa:	f7ff fc55 	bl	80007a8 <SD_RxDataBlock>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03b      	beq.n	8000f7c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f0a:	e037      	b.n	8000f7c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	204a      	movs	r0, #74	@ 0x4a
 8000f10:	f7ff fcd4 	bl	80008bc <SD_SendCmd>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d132      	bne.n	8000f80 <SD_disk_ioctl+0x244>
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	6a38      	ldr	r0, [r7, #32]
 8000f1e:	f7ff fc43 	bl	80007a8 <SD_RxDataBlock>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d02b      	beq.n	8000f80 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f2e:	e027      	b.n	8000f80 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000f30:	2100      	movs	r1, #0
 8000f32:	207a      	movs	r0, #122	@ 0x7a
 8000f34:	f7ff fcc2 	bl	80008bc <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d116      	bne.n	8000f6c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f44:	e00b      	b.n	8000f5e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8000f46:	6a3c      	ldr	r4, [r7, #32]
 8000f48:	1c63      	adds	r3, r4, #1
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	f7ff fb80 	bl	8000650 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d9ef      	bls.n	8000f46 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f72:	e006      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f74:	bf00      	nop
 8000f76:	e004      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f80:	bf00      	nop
    }
    
    DESELECT();
 8000f82:	f7ff fb3f 	bl	8000604 <DESELECT>
    SPI_RxByte();
 8000f86:	f7ff fb63 	bl	8000650 <SPI_RxByte>
  }
  
  return res;
 8000f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	372c      	adds	r7, #44	@ 0x2c
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_TIM_PeriodElapsedCallback>:
UINT bw;                           // Bytes written to the file

///////////Test Vrriabblles  ////////
FRESULT fresult2;
int EncoderUpdated=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM13) {  // Ensure this corresponds to the correct timer
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	@ (8001014 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12d      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x6e>
        SDCardCount++;
 8000fae:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000fb6:	6013      	str	r3, [r2, #0]
        if ((EncoderUpdated==1)) {
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d124      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x6e>
            // Open the file for appending
            f_open(&fil, "Data.txt", FA_OPEN_APPEND | FA_WRITE);
 8000fc0:	2232      	movs	r2, #50	@ 0x32
 8000fc2:	4917      	ldr	r1, [pc, #92]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fc4:	4817      	ldr	r0, [pc, #92]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fc6:	f004 fe11 	bl	8005bec <f_open>

            // Format the record number and encoder tick data into a string
            sprintf(buffer, "R%lu: E1: %lu, E2: %lu\n", SDCardCount, encoder_ticks, encoder_ticks2);
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	4b16      	ldr	r3, [pc, #88]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4915      	ldr	r1, [pc, #84]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fdc:	4815      	ldr	r0, [pc, #84]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fde:	f005 fa65 	bl	80064ac <siprintf>

            // Write to the file
            f_write(&fil, buffer, strlen(buffer), NULL);
 8000fe2:	4814      	ldr	r0, [pc, #80]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fe4:	f7ff f914 	bl	8000210 <strlen>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	2300      	movs	r3, #0
 8000fec:	4911      	ldr	r1, [pc, #68]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ff0:	f004 ffc4 	bl	8005f7c <f_write>

            // Close the file
            f_close(&fil);
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ff6:	f005 f9d3 	bl	80063a0 <f_close>
            EncoderUpdated=0;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
            // Increment the record number
            record_number++;
 8001000:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001008:	6013      	str	r3, [r2, #0]
        }

    }
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40001c00 	.word	0x40001c00
 8001018:	200001ec 	.word	0x200001ec
 800101c:	20002658 	.word	0x20002658
 8001020:	08006e04 	.word	0x08006e04
 8001024:	20001224 	.word	0x20001224
 8001028:	200001e0 	.word	0x200001e0
 800102c:	200001e4 	.word	0x200001e4
 8001030:	08006e10 	.word	0x08006e10
 8001034:	20002258 	.word	0x20002258
 8001038:	20000004 	.word	0x20000004

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001040:	f000 fa3e 	bl	80014c0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fc79 	bl	800193a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f860 	bl	800110c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f9d6 	bl	80013fc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001050:	f000 f900 	bl	8001254 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001054:	f000 f958 	bl	8001308 <MX_TIM4_Init>
  MX_TIM13_Init();
 8001058:	f000 f9ac 	bl	80013b4 <MX_TIM13_Init>
  MX_SPI4_Init();
 800105c:	f000 f8bc 	bl	80011d8 <MX_SPI4_Init>
  MX_FATFS_Init();
 8001060:	f002 ff18 	bl	8003e94 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Start encoder timers
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	481d      	ldr	r0, [pc, #116]	@ (80010dc <main+0xa0>)
 8001068:	f002 fbb8 	bl	80037dc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	@ 0x3c
 800106e:	481c      	ldr	r0, [pc, #112]	@ (80010e0 <main+0xa4>)
 8001070:	f002 fbb4 	bl	80037dc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);  // Start TIM2 in interrupt mode
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <main+0xa8>)
 8001076:	f002 fa93 	bl	80035a0 <HAL_TIM_Base_Start_IT>
  fresult = f_mount(&fs, "/", 1);
 800107a:	2201      	movs	r2, #1
 800107c:	491a      	ldr	r1, [pc, #104]	@ (80010e8 <main+0xac>)
 800107e:	481b      	ldr	r0, [pc, #108]	@ (80010ec <main+0xb0>)
 8001080:	f004 fd6e 	bl	8005b60 <f_mount>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <main+0xb4>)
 800108a:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <main+0xb4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <main+0x70>
      // Create and close the file initially
      fresult = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001094:	220a      	movs	r2, #10
 8001096:	4917      	ldr	r1, [pc, #92]	@ (80010f4 <main+0xb8>)
 8001098:	4817      	ldr	r0, [pc, #92]	@ (80010f8 <main+0xbc>)
 800109a:	f004 fda7 	bl	8005bec <f_open>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <main+0xb4>)
 80010a4:	701a      	strb	r2, [r3, #0]
      f_close(&fil);
 80010a6:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <main+0xbc>)
 80010a8:	f005 f97a 	bl	80063a0 <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MainloopCount++;
 80010ac:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <main+0xc0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	3301      	adds	r3, #1
 80010b2:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <main+0xc0>)
 80010b4:	6013      	str	r3, [r2, #0]
	  EncoderUpdated=0;
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <main+0xc4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
	  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <main+0xa4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c2:	4a10      	ldr	r2, [pc, #64]	@ (8001104 <main+0xc8>)
 80010c4:	6013      	str	r3, [r2, #0]
	  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <main+0xa0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <main+0xcc>)
 80010ce:	6013      	str	r3, [r2, #0]
	  EncoderUpdated=1;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001100 <main+0xc4>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
	  MainloopCount++;
 80010d6:	bf00      	nop
 80010d8:	e7e8      	b.n	80010ac <main+0x70>
 80010da:	bf00      	nop
 80010dc:	20000148 	.word	0x20000148
 80010e0:	200000fc 	.word	0x200000fc
 80010e4:	20000194 	.word	0x20000194
 80010e8:	08006e28 	.word	0x08006e28
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	20002254 	.word	0x20002254
 80010f4:	08006e04 	.word	0x08006e04
 80010f8:	20001224 	.word	0x20001224
 80010fc:	200001e8 	.word	0x200001e8
 8001100:	20002658 	.word	0x20002658
 8001104:	200001e0 	.word	0x200001e0
 8001108:	200001e4 	.word	0x200001e4

0800110c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b094      	sub	sp, #80	@ 0x50
 8001110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001112:	f107 0320 	add.w	r3, r7, #32
 8001116:	2230      	movs	r2, #48	@ 0x30
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f005 f9e8 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	4b27      	ldr	r3, [pc, #156]	@ (80011d0 <SystemClock_Config+0xc4>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	4a26      	ldr	r2, [pc, #152]	@ (80011d0 <SystemClock_Config+0xc4>)
 8001136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113a:	6413      	str	r3, [r2, #64]	@ 0x40
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <SystemClock_Config+0xc4>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001148:	4b22      	ldr	r3, [pc, #136]	@ (80011d4 <SystemClock_Config+0xc8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001150:	4a20      	ldr	r2, [pc, #128]	@ (80011d4 <SystemClock_Config+0xc8>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <SystemClock_Config+0xc8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116e:	2302      	movs	r3, #2
 8001170:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001172:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001178:	2319      	movs	r3, #25
 800117a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800117c:	2390      	movs	r3, #144	@ 0x90
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001180:	2302      	movs	r3, #2
 8001182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	4618      	mov	r0, r3
 800118e:	f000 ff81 	bl	8002094 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001198:	f000 f9be 	bl	8001518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119c:	230f      	movs	r3, #15
 800119e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a0:	2302      	movs	r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	2102      	movs	r1, #2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fa0f 	bl	80025dc <HAL_RCC_ClockConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80011c4:	f000 f9a8 	bl	8001518 <Error_Handler>
  }
}
 80011c8:	bf00      	nop
 80011ca:	3750      	adds	r7, #80	@ 0x50
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000

080011d8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <MX_SPI4_Init+0x74>)
 80011de:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <MX_SPI4_Init+0x78>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_SPI4_Init+0x74>)
 80011e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_SPI4_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_SPI4_Init+0x74>)
 80011f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011f6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_SPI4_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_SPI4_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <MX_SPI4_Init+0x74>)
 8001206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800120a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <MX_SPI4_Init+0x74>)
 800120e:	2228      	movs	r2, #40	@ 0x28
 8001210:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001212:	4b0e      	ldr	r3, [pc, #56]	@ (800124c <MX_SPI4_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001218:	4b0c      	ldr	r3, [pc, #48]	@ (800124c <MX_SPI4_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <MX_SPI4_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001224:	4b09      	ldr	r3, [pc, #36]	@ (800124c <MX_SPI4_Init+0x74>)
 8001226:	2207      	movs	r2, #7
 8001228:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <MX_SPI4_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <MX_SPI4_Init+0x74>)
 8001232:	2208      	movs	r2, #8
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_SPI4_Init+0x74>)
 8001238:	f001 fb82 	bl	8002940 <HAL_SPI_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 f969 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000098 	.word	0x20000098
 8001250:	40013400 	.word	0x40013400

08001254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	@ 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f005 f944 	bl	80064f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001272:	4b23      	ldr	r3, [pc, #140]	@ (8001300 <MX_TIM1_Init+0xac>)
 8001274:	4a23      	ldr	r2, [pc, #140]	@ (8001304 <MX_TIM1_Init+0xb0>)
 8001276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001278:	4b21      	ldr	r3, [pc, #132]	@ (8001300 <MX_TIM1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <MX_TIM1_Init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001284:	4b1e      	ldr	r3, [pc, #120]	@ (8001300 <MX_TIM1_Init+0xac>)
 8001286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1c      	ldr	r3, [pc, #112]	@ (8001300 <MX_TIM1_Init+0xac>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001292:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <MX_TIM1_Init+0xac>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <MX_TIM1_Init+0xac>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129e:	2303      	movs	r3, #3
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a6:	2301      	movs	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	4619      	mov	r1, r3
 80012c8:	480d      	ldr	r0, [pc, #52]	@ (8001300 <MX_TIM1_Init+0xac>)
 80012ca:	f002 f9e1 	bl	8003690 <HAL_TIM_Encoder_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012d4:	f000 f920 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e4:	463b      	mov	r3, r7
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	@ (8001300 <MX_TIM1_Init+0xac>)
 80012ea:	f002 fd27 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012f4:	f000 f910 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3730      	adds	r7, #48	@ 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200000fc 	.word	0x200000fc
 8001304:	40010000 	.word	0x40010000

08001308 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	@ 0x30
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	2224      	movs	r2, #36	@ 0x24
 8001314:	2100      	movs	r1, #0
 8001316:	4618      	mov	r0, r3
 8001318:	f005 f8ea 	bl	80064f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001326:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001328:	4a21      	ldr	r2, [pc, #132]	@ (80013b0 <MX_TIM4_Init+0xa8>)
 800132a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800132c:	4b1f      	ldr	r3, [pc, #124]	@ (80013ac <MX_TIM4_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001338:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <MX_TIM4_Init+0xa4>)
 800133a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800134c:	2303      	movs	r3, #3
 800134e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001360:	2300      	movs	r3, #0
 8001362:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001364:	2301      	movs	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001378:	f002 f98a 	bl	8003690 <HAL_TIM_Encoder_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001382:	f000 f8c9 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_TIM4_Init+0xa4>)
 8001394:	f002 fcd2 	bl	8003d3c <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800139e:	f000 f8bb 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	@ 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000148 	.word	0x20000148
 80013b0:	40000800 	.word	0x40000800

080013b4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013ba:	4a0f      	ldr	r2, [pc, #60]	@ (80013f8 <MX_TIM13_Init+0x44>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 7199;
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013c0:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80013c4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80013cc:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013ce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013d2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b07      	ldr	r3, [pc, #28]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_TIM13_Init+0x40>)
 80013e2:	f002 f885 	bl	80034f0 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80013ec:	f000 f894 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000194 	.word	0x20000194
 80013f8:	40001c00 	.word	0x40001c00

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a1c      	ldr	r2, [pc, #112]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a16      	ldr	r2, [pc, #88]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001460:	f043 0308 	orr.w	r3, r3, #8
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_GPIO_Init+0xbc>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2101      	movs	r1, #1
 800148e:	480b      	ldr	r0, [pc, #44]	@ (80014bc <MX_GPIO_Init+0xc0>)
 8001490:	f000 fde6 	bl	8002060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001494:	2301      	movs	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_GPIO_Init+0xc0>)
 80014ac:	f000 fc2c 	bl	8001d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020400 	.word	0x40020400

080014c0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014c6:	463b      	mov	r3, r7
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014d2:	f000 fba1 	bl	8001c18 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014da:	2300      	movs	r3, #0
 80014dc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014e2:	231f      	movs	r3, #31
 80014e4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014e6:	2387      	movs	r3, #135	@ 0x87
 80014e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014ee:	2300      	movs	r3, #0
 80014f0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001502:	463b      	mov	r3, r7
 8001504:	4618      	mov	r0, r3
 8001506:	f000 fbbf 	bl	8001c88 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800150a:	2004      	movs	r0, #4
 800150c:	f000 fb9c 	bl	8001c48 <HAL_MPU_Enable>

}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <Error_Handler+0x8>

08001524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800152a:	4b0f      	ldr	r3, [pc, #60]	@ (8001568 <HAL_MspInit+0x44>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	4a0e      	ldr	r2, [pc, #56]	@ (8001568 <HAL_MspInit+0x44>)
 8001530:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001534:	6413      	str	r3, [r2, #64]	@ 0x40
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <HAL_MspInit+0x44>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_MspInit+0x44>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	4a08      	ldr	r2, [pc, #32]	@ (8001568 <HAL_MspInit+0x44>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800154c:	6453      	str	r3, [r2, #68]	@ 0x44
 800154e:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <HAL_MspInit+0x44>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	@ (80015e8 <HAL_SPI_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d127      	bne.n	80015de <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a16      	ldr	r2, [pc, #88]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 8001594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015a2:	613b      	str	r3, [r7, #16]
 80015a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_SPI_MspInit+0x80>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80015be:	2364      	movs	r3, #100	@ 0x64
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ce:	2305      	movs	r3, #5
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <HAL_SPI_MspInit+0x84>)
 80015da:	f000 fb95 	bl	8001d08 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40013400 	.word	0x40013400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08c      	sub	sp, #48	@ 0x30
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a37      	ldr	r2, [pc, #220]	@ (80016f0 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d131      	bne.n	800167a <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001616:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a36      	ldr	r2, [pc, #216]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a30      	ldr	r2, [pc, #192]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b2e      	ldr	r3, [pc, #184]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001646:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001658:	2301      	movs	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4619      	mov	r1, r3
 8001662:	4825      	ldr	r0, [pc, #148]	@ (80016f8 <HAL_TIM_Encoder_MspInit+0x104>)
 8001664:	f000 fb50 	bl	8001d08 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	2019      	movs	r0, #25
 800166e:	f000 fa9c 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001672:	2019      	movs	r0, #25
 8001674:	f000 fab5 	bl	8001be2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001678:	e035      	b.n	80016e6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a1f      	ldr	r2, [pc, #124]	@ (80016fc <HAL_TIM_Encoder_MspInit+0x108>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d130      	bne.n	80016e6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001684:	4b1b      	ldr	r3, [pc, #108]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	4a1a      	ldr	r2, [pc, #104]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800168a:	f043 0304 	orr.w	r3, r3, #4
 800168e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001690:	4b18      	ldr	r3, [pc, #96]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169c:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a0:	4a14      	ldr	r2, [pc, #80]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_TIM_Encoder_MspInit+0x100>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80016b4:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016c6:	2302      	movs	r3, #2
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016d2:	f000 fb19 	bl	8001d08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201e      	movs	r0, #30
 80016dc:	f000 fa65 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016e0:	201e      	movs	r0, #30
 80016e2:	f000 fa7e 	bl	8001be2 <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	@ 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40010000 	.word	0x40010000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40000800 	.word	0x40000800
 8001700:	40020c00 	.word	0x40020c00

08001704 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <HAL_TIM_Base_MspInit+0x44>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d113      	bne.n	800173e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	4a0c      	ldr	r2, [pc, #48]	@ (800174c <HAL_TIM_Base_MspInit+0x48>)
 800171c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <HAL_TIM_Base_MspInit+0x48>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	202c      	movs	r0, #44	@ 0x2c
 8001734:	f000 fa39 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001738:	202c      	movs	r0, #44	@ 0x2c
 800173a:	f000 fa52 	bl	8001be2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40001c00 	.word	0x40001c00
 800174c:	40023800 	.word	0x40023800

08001750 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t timer1, timer2;

void SDTimer_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  if(timer1 > 0)
 8001754:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <SDTimer_Handler+0x40>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <SDTimer_Handler+0x1c>
    timer1--;
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <SDTimer_Handler+0x40>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b2db      	uxtb	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <SDTimer_Handler+0x40>)
 800176a:	701a      	strb	r2, [r3, #0]

  if(timer2 > 0)
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <SDTimer_Handler+0x44>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <SDTimer_Handler+0x34>
    timer2--;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <SDTimer_Handler+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b04      	ldr	r3, [pc, #16]	@ (8001794 <SDTimer_Handler+0x44>)
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2000265d 	.word	0x2000265d
 8001794:	2000265e 	.word	0x2000265e

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f8e1 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017fc:	4802      	ldr	r0, [pc, #8]	@ (8001808 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017fe:	f002 f89b 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000fc 	.word	0x200000fc

0800180c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	  FatFsCnt++;
 8001810:	4b0a      	ldr	r3, [pc, #40]	@ (800183c <TIM4_IRQHandler+0x30>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b08      	ldr	r3, [pc, #32]	@ (800183c <TIM4_IRQHandler+0x30>)
 800181c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <TIM4_IRQHandler+0x30>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b09      	cmp	r3, #9
 8001826:	d904      	bls.n	8001832 <TIM4_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 8001828:	4b04      	ldr	r3, [pc, #16]	@ (800183c <TIM4_IRQHandler+0x30>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800182e:	f7ff ff8f 	bl	8001750 <SDTimer_Handler>
	  }
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001832:	4803      	ldr	r0, [pc, #12]	@ (8001840 <TIM4_IRQHandler+0x34>)
 8001834:	f002 f880 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000265c 	.word	0x2000265c
 8001840:	20000148 	.word	0x20000148

08001844 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800184a:	f002 f875 	bl	8003938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000194 	.word	0x20000194

08001858 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001860:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <_sbrk+0x5c>)
 8001862:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <_sbrk+0x60>)
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800186c:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <_sbrk+0x64>)
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <_sbrk+0x68>)
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	429a      	cmp	r2, r3
 8001886:	d207      	bcs.n	8001898 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001888:	f004 fe3a 	bl	8006500 <__errno>
 800188c:	4603      	mov	r3, r0
 800188e:	220c      	movs	r2, #12
 8001890:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001892:	f04f 33ff 	mov.w	r3, #4294967295
 8001896:	e009      	b.n	80018ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800189e:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a05      	ldr	r2, [pc, #20]	@ (80018bc <_sbrk+0x64>)
 80018a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20050000 	.word	0x20050000
 80018b8:	00000400 	.word	0x00000400
 80018bc:	20002660 	.word	0x20002660
 80018c0:	200027f0 	.word	0x200027f0

080018c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c8:	4b06      	ldr	r3, [pc, #24]	@ (80018e4 <SystemInit+0x20>)
 80018ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ce:	4a05      	ldr	r2, [pc, #20]	@ (80018e4 <SystemInit+0x20>)
 80018d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d8:	bf00      	nop
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ec:	f7ff ffea 	bl	80018c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001916:	f004 fdf9 	bl	800650c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fb8f 	bl	800103c <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800192c:	08006f44 	.word	0x08006f44
  ldr r2, =_sbss
 8001930:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001934:	200027ec 	.word	0x200027ec

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>

0800193a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193e:	2003      	movs	r0, #3
 8001940:	f000 f928 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001944:	200f      	movs	r0, #15
 8001946:	f000 f805 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800194a:	f7ff fdeb 	bl	8001524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f943 	bl	8001bfe <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f90b 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000010 	.word	0x20000010
 80019b0:	2000000c 	.word	0x2000000c

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000010 	.word	0x20000010
 80019d8:	20002664 	.word	0x20002664

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20002664 	.word	0x20002664

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x40>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x40>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00
 8001a38:	05fa0000 	.word	0x05fa0000

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	@ (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	@ (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff3e 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff31 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c1c:	f3bf 8f5f 	dmb	sy
}
 8001c20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c22:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_MPU_Disable+0x28>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_MPU_Disable+0x28>)
 8001c28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_MPU_Disable+0x2c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	e000ed90 	.word	0xe000ed90

08001c48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c50:	4a0b      	ldr	r2, [pc, #44]	@ (8001c80 <HAL_MPU_Enable+0x38>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_MPU_Enable+0x3c>)
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_MPU_Enable+0x3c>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c66:	f3bf 8f4f 	dsb	sy
}
 8001c6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c6c:	f3bf 8f6f 	isb	sy
}
 8001c70:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed90 	.word	0xe000ed90
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	785a      	ldrb	r2, [r3, #1]
 8001c94:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_MPU_ConfigRegion+0x7c>)
 8001c96:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <HAL_MPU_ConfigRegion+0x7c>)
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	4a19      	ldr	r2, [pc, #100]	@ (8001d04 <HAL_MPU_ConfigRegion+0x7c>)
 8001c9e:	f023 0301 	bic.w	r3, r3, #1
 8001ca2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001ca4:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_MPU_ConfigRegion+0x7c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7b1b      	ldrb	r3, [r3, #12]
 8001cb0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7adb      	ldrb	r3, [r3, #11]
 8001cb6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7a9b      	ldrb	r3, [r3, #10]
 8001cbe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7b5b      	ldrb	r3, [r3, #13]
 8001cc6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	7b9b      	ldrb	r3, [r3, #14]
 8001cce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7bdb      	ldrb	r3, [r3, #15]
 8001cd6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7a5b      	ldrb	r3, [r3, #9]
 8001cde:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ce0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	7a1b      	ldrb	r3, [r3, #8]
 8001ce6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ce8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf0:	4a04      	ldr	r2, [pc, #16]	@ (8001d04 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cf2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cf4:	6113      	str	r3, [r2, #16]
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed90 	.word	0xe000ed90

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e175      	b.n	8002014 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d28:	2201      	movs	r2, #1
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8164 	bne.w	800200e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d005      	beq.n	8001d5e <HAL_GPIO_Init+0x56>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d130      	bne.n	8001dc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2203      	movs	r2, #3
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d94:	2201      	movs	r2, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 0201 	and.w	r2, r3, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d017      	beq.n	8001dfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d123      	bne.n	8001e50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	08da      	lsrs	r2, r3, #3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3208      	adds	r2, #8
 8001e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	69b9      	ldr	r1, [r7, #24]
 8001e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80be 	beq.w	800200e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e92:	4b66      	ldr	r3, [pc, #408]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	4a65      	ldr	r2, [pc, #404]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e9e:	4b63      	ldr	r3, [pc, #396]	@ (800202c <HAL_GPIO_Init+0x324>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eaa:	4a61      	ldr	r2, [pc, #388]	@ (8002030 <HAL_GPIO_Init+0x328>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a58      	ldr	r2, [pc, #352]	@ (8002034 <HAL_GPIO_Init+0x32c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d037      	beq.n	8001f46 <HAL_GPIO_Init+0x23e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <HAL_GPIO_Init+0x330>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_GPIO_Init+0x23a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a56      	ldr	r2, [pc, #344]	@ (800203c <HAL_GPIO_Init+0x334>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x236>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a55      	ldr	r2, [pc, #340]	@ (8002040 <HAL_GPIO_Init+0x338>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x232>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a54      	ldr	r2, [pc, #336]	@ (8002044 <HAL_GPIO_Init+0x33c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x22e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a53      	ldr	r2, [pc, #332]	@ (8002048 <HAL_GPIO_Init+0x340>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x22a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a52      	ldr	r2, [pc, #328]	@ (800204c <HAL_GPIO_Init+0x344>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a51      	ldr	r2, [pc, #324]	@ (8002050 <HAL_GPIO_Init+0x348>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x222>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_GPIO_Init+0x34c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x21e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	@ (8002058 <HAL_GPIO_Init+0x350>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x21a>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e012      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e010      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e00e      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e00c      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e00a      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x240>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	@ (8002030 <HAL_GPIO_Init+0x328>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b3d      	ldr	r3, [pc, #244]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a34      	ldr	r2, [pc, #208]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b32      	ldr	r3, [pc, #200]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a29      	ldr	r2, [pc, #164]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1f      	ldr	r2, [pc, #124]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_GPIO_Init+0x354>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_GPIO_Init+0x354>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f ae86 	bls.w	8001d28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	@ 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40021400 	.word	0x40021400
 800204c:	40021800 	.word	0x40021800
 8002050:	40021c00 	.word	0x40021c00
 8002054:	40022000 	.word	0x40022000
 8002058:	40022400 	.word	0x40022400
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
 800206c:	4613      	mov	r3, r2
 800206e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002070:	787b      	ldrb	r3, [r7, #1]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002076:	887a      	ldrh	r2, [r7, #2]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800207c:	e003      	b.n	8002086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	041a      	lsls	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
	...

08002094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e291      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	4b96      	ldr	r3, [pc, #600]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00c      	beq.n	80020de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c4:	4b93      	ldr	r3, [pc, #588]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62>
 80020d0:	4b90      	ldr	r3, [pc, #576]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b8d      	ldr	r3, [pc, #564]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d06c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x130>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d168      	bne.n	80021c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e26b      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x7a>
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a83      	ldr	r2, [pc, #524]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e02e      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x9c>
 8002116:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b7c      	ldr	r3, [pc, #496]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7b      	ldr	r2, [pc, #492]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002128:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0xc0>
 800213a:	4b76      	ldr	r3, [pc, #472]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a75      	ldr	r2, [pc, #468]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b73      	ldr	r3, [pc, #460]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a72      	ldr	r2, [pc, #456]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xd8>
 8002154:	4b6f      	ldr	r3, [pc, #444]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6e      	ldr	r2, [pc, #440]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b6c      	ldr	r3, [pc, #432]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a6b      	ldr	r2, [pc, #428]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800216a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fc32 	bl	80019dc <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fc2e 	bl	80019dc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	@ 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e21f      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b61      	ldr	r3, [pc, #388]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xe8>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fc1e 	bl	80019dc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc1a 	bl	80019dc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	@ 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e20b      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b57      	ldr	r3, [pc, #348]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x110>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d069      	beq.n	80022a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021de:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x190>
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b47      	ldr	r3, [pc, #284]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x17a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1df      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b41      	ldr	r3, [pc, #260]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	493d      	ldr	r1, [pc, #244]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e040      	b.n	80022a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d023      	beq.n	8002274 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b39      	ldr	r3, [pc, #228]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a38      	ldr	r2, [pc, #224]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff fbd0 	bl	80019dc <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff fbcc 	bl	80019dc <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e1bd      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b30      	ldr	r3, [pc, #192]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225e:	4b2d      	ldr	r3, [pc, #180]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4929      	ldr	r1, [pc, #164]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
 8002272:	e018      	b.n	80022a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002274:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7ff fbac 	bl	80019dc <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002288:	f7ff fba8 	bl	80019dc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e199      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d038      	beq.n	8002324 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d019      	beq.n	80022ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80022bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7ff fb89 	bl	80019dc <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7ff fb85 	bl	80019dc <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e176      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80022e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x23a>
 80022ec:	e01a      	b.n	8002324 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80022f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_RCC_OscConfig+0x280>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb6f 	bl	80019dc <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002300:	e00a      	b.n	8002318 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7ff fb6b 	bl	80019dc <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d903      	bls.n	8002318 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e15c      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
 8002314:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	4b91      	ldr	r3, [pc, #580]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1ee      	bne.n	8002302 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a4 	beq.w	800247a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002332:	4b8b      	ldr	r3, [pc, #556]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10d      	bne.n	800235a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b88      	ldr	r3, [pc, #544]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002342:	4a87      	ldr	r2, [pc, #540]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	@ 0x40
 800234a:	4b85      	ldr	r3, [pc, #532]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b82      	ldr	r3, [pc, #520]	@ (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002366:	4b7f      	ldr	r3, [pc, #508]	@ (8002564 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a7e      	ldr	r2, [pc, #504]	@ (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff fb33 	bl	80019dc <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff fb2f 	bl	80019dc <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	@ 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e120      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238c:	4b75      	ldr	r3, [pc, #468]	@ (8002564 <HAL_RCC_OscConfig+0x4d0>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x31a>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ac:	e02d      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x33c>
 80023b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a69      	ldr	r2, [pc, #420]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c6:	4a66      	ldr	r2, [pc, #408]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ce:	e01c      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCC_OscConfig+0x35e>
 80023d8:	4b61      	ldr	r3, [pc, #388]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023dc:	4a60      	ldr	r2, [pc, #384]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80023f0:	e00b      	b.n	800240a <HAL_RCC_OscConfig+0x376>
 80023f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fe:	4b58      	ldr	r3, [pc, #352]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002402:	4a57      	ldr	r2, [pc, #348]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d015      	beq.n	800243e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff fae3 	bl	80019dc <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241a:	f7ff fadf 	bl	80019dc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002428:	4293      	cmp	r3, r2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e0ce      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002430:	4b4b      	ldr	r3, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ee      	beq.n	800241a <HAL_RCC_OscConfig+0x386>
 800243c:	e014      	b.n	8002468 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7ff facd 	bl	80019dc <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002444:	e00a      	b.n	800245c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fac9 	bl	80019dc <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	4b40      	ldr	r3, [pc, #256]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ee      	bne.n	8002446 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002468:	7dfb      	ldrb	r3, [r7, #23]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d105      	bne.n	800247a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b3c      	ldr	r3, [pc, #240]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a3b      	ldr	r2, [pc, #236]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 80a4 	beq.w	80025cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b08      	cmp	r3, #8
 800248e:	d06b      	beq.n	8002568 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d149      	bne.n	800252c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002498:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800249e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fa9a 	bl	80019dc <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ac:	f7ff fa96 	bl	80019dc <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e087      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	061b      	lsls	r3, r3, #24
 80024ee:	4313      	orrs	r3, r2
 80024f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fa6a 	bl	80019dc <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff fa66 	bl	80019dc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e057      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x478>
 800252a:	e04f      	b.n	80025cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fa50 	bl	80019dc <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fa4c 	bl	80019dc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03d      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_RCC_OscConfig+0x4cc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x4ac>
 800255e:	e035      	b.n	80025cc <HAL_RCC_OscConfig+0x538>
 8002560:	40023800 	.word	0x40023800
 8002564:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x544>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d028      	beq.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002580:	429a      	cmp	r2, r3
 8002582:	d121      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d11a      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002598:	4013      	ands	r3, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800259e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d111      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	3b01      	subs	r3, #1
 80025b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d107      	bne.n	80025c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 020f 	bic.w	r2, r3, #15
 800260a:	4965      	ldr	r1, [pc, #404]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800265e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7ff f984 	bl	80019dc <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7ff f980 	bl	80019dc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 020f 	bic.w	r2, r3, #15
 8002716:	4922      	ldr	r1, [pc, #136]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	@ (80027a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_RCC_ClockConfig+0x1d0>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_ClockConfig+0x1d4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f8e0 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	08006e70 	.word	0x08006e70
 80027ac:	20000008 	.word	0x20000008
 80027b0:	2000000c 	.word	0x2000000c

080027b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b8:	b090      	sub	sp, #64	@ 0x40
 80027ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c0:	2300      	movs	r3, #0
 80027c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027c4:	2300      	movs	r3, #0
 80027c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027cc:	4b59      	ldr	r3, [pc, #356]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 030c 	and.w	r3, r3, #12
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d00d      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x40>
 80027d8:	2b08      	cmp	r3, #8
 80027da:	f200 80a1 	bhi.w	8002920 <HAL_RCC_GetSysClockFreq+0x16c>
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_RCC_GetSysClockFreq+0x34>
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x3a>
 80027e6:	e09b      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027e8:	4b53      	ldr	r3, [pc, #332]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027ec:	e09b      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ee:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 80027f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027f2:	e098      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027fe:	4b4d      	ldr	r3, [pc, #308]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d028      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280a:	4b4a      	ldr	r3, [pc, #296]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	099b      	lsrs	r3, r3, #6
 8002810:	2200      	movs	r2, #0
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	627a      	str	r2, [r7, #36]	@ 0x24
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800281c:	2100      	movs	r1, #0
 800281e:	4b47      	ldr	r3, [pc, #284]	@ (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 8002820:	fb03 f201 	mul.w	r2, r3, r1
 8002824:	2300      	movs	r3, #0
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	4413      	add	r3, r2
 800282c:	4a43      	ldr	r2, [pc, #268]	@ (800293c <HAL_RCC_GetSysClockFreq+0x188>)
 800282e:	fba0 1202 	umull	r1, r2, r0, r2
 8002832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002834:	460a      	mov	r2, r1
 8002836:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800283a:	4413      	add	r3, r2
 800283c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800283e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002840:	2200      	movs	r2, #0
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	61fa      	str	r2, [r7, #28]
 8002846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800284e:	f7fd fd37 	bl	80002c0 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4613      	mov	r3, r2
 8002858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800285a:	e053      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285c:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	099b      	lsrs	r3, r3, #6
 8002862:	2200      	movs	r2, #0
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	617a      	str	r2, [r7, #20]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800286e:	f04f 0b00 	mov.w	fp, #0
 8002872:	4652      	mov	r2, sl
 8002874:	465b      	mov	r3, fp
 8002876:	f04f 0000 	mov.w	r0, #0
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	0159      	lsls	r1, r3, #5
 8002880:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002884:	0150      	lsls	r0, r2, #5
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	ebb2 080a 	subs.w	r8, r2, sl
 800288e:	eb63 090b 	sbc.w	r9, r3, fp
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800289e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028a6:	ebb2 0408 	subs.w	r4, r2, r8
 80028aa:	eb63 0509 	sbc.w	r5, r3, r9
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	00eb      	lsls	r3, r5, #3
 80028b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028bc:	00e2      	lsls	r2, r4, #3
 80028be:	4614      	mov	r4, r2
 80028c0:	461d      	mov	r5, r3
 80028c2:	eb14 030a 	adds.w	r3, r4, sl
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	eb45 030b 	adc.w	r3, r5, fp
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028da:	4629      	mov	r1, r5
 80028dc:	028b      	lsls	r3, r1, #10
 80028de:	4621      	mov	r1, r4
 80028e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028e4:	4621      	mov	r1, r4
 80028e6:	028a      	lsls	r2, r1, #10
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ee:	2200      	movs	r2, #0
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	60fa      	str	r2, [r7, #12]
 80028f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f8:	f7fd fce2 	bl	80002c0 <__aeabi_uldivmod>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4613      	mov	r3, r2
 8002902:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	3301      	adds	r3, #1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002914:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800291e:	e002      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b05      	ldr	r3, [pc, #20]	@ (8002938 <HAL_RCC_GetSysClockFreq+0x184>)
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002928:	4618      	mov	r0, r3
 800292a:	3740      	adds	r7, #64	@ 0x40
 800292c:	46bd      	mov	sp, r7
 800292e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002932:	bf00      	nop
 8002934:	40023800 	.word	0x40023800
 8002938:	00f42400 	.word	0x00f42400
 800293c:	017d7840 	.word	0x017d7840

08002940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e09d      	b.n	8002a8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002962:	d009      	beq.n	8002978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
 800296a:	e005      	b.n	8002978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe fdea 	bl	800156c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029b8:	d902      	bls.n	80029c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e002      	b.n	80029c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029ce:	d007      	beq.n	80029e0 <HAL_SPI_Init+0xa0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	f003 0204 	and.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d101      	bne.n	8002ab8 <HAL_SPI_Transmit+0x22>
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	e15f      	b.n	8002d78 <HAL_SPI_Transmit+0x2e2>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac0:	f7fe ff8c 	bl	80019dc <HAL_GetTick>
 8002ac4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d002      	beq.n	8002adc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ada:	e148      	b.n	8002d6e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_SPI_Transmit+0x52>
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d102      	bne.n	8002aee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aec:	e13f      	b.n	8002d6e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2203      	movs	r2, #3
 8002af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b38:	d10f      	bne.n	8002b5a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b64:	2b40      	cmp	r3, #64	@ 0x40
 8002b66:	d007      	beq.n	8002b78 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b80:	d94f      	bls.n	8002c22 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_SPI_Transmit+0xfa>
 8002b8a:	8afb      	ldrh	r3, [r7, #22]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d142      	bne.n	8002c16 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	881a      	ldrh	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	1c9a      	adds	r2, r3, #2
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bb4:	e02f      	b.n	8002c16 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d112      	bne.n	8002bea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	1c9a      	adds	r2, r3, #2
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be8:	e015      	b.n	8002c16 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bea:	f7fe fef7 	bl	80019dc <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d803      	bhi.n	8002c02 <HAL_SPI_Transmit+0x16c>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c00:	d102      	bne.n	8002c08 <HAL_SPI_Transmit+0x172>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d106      	bne.n	8002c16 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002c14:	e0ab      	b.n	8002d6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ca      	bne.n	8002bb6 <HAL_SPI_Transmit+0x120>
 8002c20:	e080      	b.n	8002d24 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_SPI_Transmit+0x19a>
 8002c2a:	8afb      	ldrh	r3, [r7, #22]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d174      	bne.n	8002d1a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d912      	bls.n	8002c60 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	881a      	ldrh	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4a:	1c9a      	adds	r2, r3, #2
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b02      	subs	r3, #2
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c5e:	e05c      	b.n	8002d1a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	330c      	adds	r3, #12
 8002c6a:	7812      	ldrb	r2, [r2, #0]
 8002c6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c86:	e048      	b.n	8002d1a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d12b      	bne.n	8002cee <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d912      	bls.n	8002cc6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	881a      	ldrh	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb0:	1c9a      	adds	r2, r3, #2
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cc4:	e029      	b.n	8002d1a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	330c      	adds	r3, #12
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cec:	e015      	b.n	8002d1a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cee:	f7fe fe75 	bl	80019dc <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_Transmit+0x270>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_Transmit+0x276>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d106      	bne.n	8002d1a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d18:	e029      	b.n	8002d6e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1b1      	bne.n	8002c88 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 fb77 	bl	800341c <SPI_EndRxTxTransaction>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10a      	bne.n	8002d58 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e003      	b.n	8002d6e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	@ 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <HAL_SPI_TransmitReceive+0x26>
 8002da2:	2302      	movs	r3, #2
 8002da4:	e20a      	b.n	80031bc <HAL_SPI_TransmitReceive+0x43c>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002dae:	f7fe fe15 	bl	80019dc <HAL_GetTick>
 8002db2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002dc6:	887b      	ldrh	r3, [r7, #2]
 8002dc8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dca:	7efb      	ldrb	r3, [r7, #27]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d00e      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x6e>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd6:	d106      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x66>
 8002de0:	7efb      	ldrb	r3, [r7, #27]
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d003      	beq.n	8002dee <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002dec:	e1e0      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_SPI_TransmitReceive+0x80>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_SPI_TransmitReceive+0x80>
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d103      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002e06:	e1d3      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d003      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2205      	movs	r2, #5
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	887a      	ldrh	r2, [r7, #2]
 8002e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	887a      	ldrh	r2, [r7, #2]
 8002e48:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e5e:	d802      	bhi.n	8002e66 <HAL_SPI_TransmitReceive+0xe6>
 8002e60:	8a3b      	ldrh	r3, [r7, #16]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d908      	bls.n	8002e78 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	e007      	b.n	8002e88 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e86:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d007      	beq.n	8002ea6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eae:	f240 8081 	bls.w	8002fb4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_TransmitReceive+0x140>
 8002eba:	8a7b      	ldrh	r3, [r7, #18]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d16d      	bne.n	8002f9c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ee4:	e05a      	b.n	8002f9c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x1ac>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <HAL_SPI_TransmitReceive+0x1ac>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d113      	bne.n	8002f2c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	881a      	ldrh	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	3b01      	subs	r3, #1
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d11c      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x1f4>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	b292      	uxth	r2, r2
 8002f52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	1c9a      	adds	r2, r3, #2
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f74:	f7fe fd32 	bl	80019dc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d80b      	bhi.n	8002f9c <HAL_SPI_TransmitReceive+0x21c>
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d007      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002f9a:	e109      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d19f      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x166>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d199      	bne.n	8002ee6 <HAL_SPI_TransmitReceive+0x166>
 8002fb2:	e0e3      	b.n	800317c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_SPI_TransmitReceive+0x244>
 8002fbc:	8a7b      	ldrh	r3, [r7, #18]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	f040 80cf 	bne.w	8003162 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d912      	bls.n	8002ff4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b02      	subs	r3, #2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ff2:	e0b6      	b.n	8003162 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	7812      	ldrb	r2, [r2, #0]
 8003000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800301a:	e0a2      	b.n	8003162 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d134      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x314>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d02f      	beq.n	8003094 <HAL_SPI_TransmitReceive+0x314>
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	2b01      	cmp	r3, #1
 8003038:	d12c      	bne.n	8003094 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	d912      	bls.n	800306a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	1c9a      	adds	r2, r3, #2
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b02      	subs	r3, #2
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003068:	e012      	b.n	8003090 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	330c      	adds	r3, #12
 8003074:	7812      	ldrb	r2, [r2, #0]
 8003076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d148      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x3b4>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d042      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d923      	bls.n	8003102 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c4:	b292      	uxth	r2, r2
 80030c6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	1c9a      	adds	r2, r3, #2
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030d8:	b29b      	uxth	r3, r3
 80030da:	3b02      	subs	r3, #2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d81f      	bhi.n	8003130 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	e016      	b.n	8003130 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f103 020c 	add.w	r2, r3, #12
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	7812      	ldrb	r2, [r2, #0]
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003118:	1c5a      	adds	r2, r3, #1
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003130:	2301      	movs	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003134:	f7fe fc52 	bl	80019dc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003140:	429a      	cmp	r2, r3
 8003142:	d803      	bhi.n	800314c <HAL_SPI_TransmitReceive+0x3cc>
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d102      	bne.n	8003152 <HAL_SPI_TransmitReceive+0x3d2>
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003160:	e026      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	f47f af57 	bne.w	800301c <HAL_SPI_TransmitReceive+0x29c>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	f47f af50 	bne.w	800301c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f94b 	bl	800341c <SPI_EndRxTxTransaction>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e003      	b.n	80031b0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80031b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3728      	adds	r7, #40	@ 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031d2:	b2db      	uxtb	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	4613      	mov	r3, r2
 80031ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031f0:	f7fe fbf4 	bl	80019dc <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003200:	f7fe fbec 	bl	80019dc <HAL_GetTick>
 8003204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003206:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	015b      	lsls	r3, r3, #5
 800320c:	0d1b      	lsrs	r3, r3, #20
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003216:	e054      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d050      	beq.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003220:	f7fe fbdc 	bl	80019dc <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	429a      	cmp	r2, r3
 800322e:	d902      	bls.n	8003236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d13d      	bne.n	80032b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800324e:	d111      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003258:	d004      	beq.n	8003264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003262:	d107      	bne.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800327c:	d10f      	bne.n	800329e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800329c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e017      	b.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3b01      	subs	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4013      	ands	r3, r2
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	bf0c      	ite	eq
 80032d2:	2301      	moveq	r3, #1
 80032d4:	2300      	movne	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d19b      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3720      	adds	r7, #32
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000008 	.word	0x20000008

080032f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003302:	f7fe fb6b 	bl	80019dc <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003312:	f7fe fb63 	bl	80019dc <HAL_GetTick>
 8003316:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	330c      	adds	r3, #12
 800331e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003320:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00da      	lsls	r2, r3, #3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	0d1b      	lsrs	r3, r3, #20
 8003330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003338:	e060      	b.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003340:	d107      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d104      	bne.n	8003352 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003350:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003358:	d050      	beq.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800335a:	f7fe fb3f 	bl	80019dc <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003366:	429a      	cmp	r2, r3
 8003368:	d902      	bls.n	8003370 <SPI_WaitFifoStateUntilTimeout+0x80>
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d13d      	bne.n	80033ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800337e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003388:	d111      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003392:	d004      	beq.n	800339e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339c:	d107      	bne.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b6:	d10f      	bne.n	80033d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e010      	b.n	800340e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d196      	bne.n	800333a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3728      	adds	r7, #40	@ 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000008 	.word	0x20000008

0800341c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2200      	movs	r2, #0
 8003430:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff ff5b 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d007      	beq.n	8003450 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e046      	b.n	80034de <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003450:	4b25      	ldr	r3, [pc, #148]	@ (80034e8 <SPI_EndRxTxTransaction+0xcc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a25      	ldr	r2, [pc, #148]	@ (80034ec <SPI_EndRxTxTransaction+0xd0>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	0d5b      	lsrs	r3, r3, #21
 800345c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346e:	d112      	bne.n	8003496 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7ff feb0 	bl	80031e0 <SPI_WaitFlagStateUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e023      	b.n	80034de <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	3b01      	subs	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ac:	2b80      	cmp	r3, #128	@ 0x80
 80034ae:	d0f2      	beq.n	8003496 <SPI_EndRxTxTransaction+0x7a>
 80034b0:	e000      	b.n	80034b4 <SPI_EndRxTxTransaction+0x98>
        break;
 80034b2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f7ff ff15 	bl	80032f0 <SPI_WaitFifoStateUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d0:	f043 0220 	orr.w	r2, r3, #32
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e000      	b.n	80034de <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3718      	adds	r7, #24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000008 	.word	0x20000008
 80034ec:	165e9f81 	.word	0x165e9f81

080034f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e049      	b.n	8003596 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe f8f4 	bl	8001704 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3304      	adds	r3, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4610      	mov	r0, r2
 8003530:	f000 fb32 	bl	8003b98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d001      	beq.n	80035b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e054      	b.n	8003662 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0201 	orr.w	r2, r2, #1
 80035ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a26      	ldr	r2, [pc, #152]	@ (8003670 <HAL_TIM_Base_Start_IT+0xd0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d022      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e2:	d01d      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d018      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_TIM_Base_Start_IT+0xd8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d013      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1f      	ldr	r2, [pc, #124]	@ (800367c <HAL_TIM_Base_Start_IT+0xdc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00e      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1e      	ldr	r2, [pc, #120]	@ (8003680 <HAL_TIM_Base_Start_IT+0xe0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d009      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1c      	ldr	r2, [pc, #112]	@ (8003684 <HAL_TIM_Base_Start_IT+0xe4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d004      	beq.n	8003620 <HAL_TIM_Base_Start_IT+0x80>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1b      	ldr	r2, [pc, #108]	@ (8003688 <HAL_TIM_Base_Start_IT+0xe8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d115      	bne.n	800364c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_TIM_Base_Start_IT+0xec>)
 8003628:	4013      	ands	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d015      	beq.n	800365e <HAL_TIM_Base_Start_IT+0xbe>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003638:	d011      	beq.n	800365e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	e008      	b.n	800365e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e000      	b.n	8003660 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800
 800368c:	00010007 	.word	0x00010007

08003690 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e08f      	b.n	80037c4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d106      	bne.n	80036be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7fd ff9b 	bl	80015f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b3e      	ldr	r3, [pc, #248]	@ (80037cc <HAL_TIM_Encoder_Init+0x13c>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f000 fa59 	bl	8003b98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4b31      	ldr	r3, [pc, #196]	@ (80037d0 <HAL_TIM_Encoder_Init+0x140>)
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	4313      	orrs	r3, r2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4b2b      	ldr	r3, [pc, #172]	@ (80037d4 <HAL_TIM_Encoder_Init+0x144>)
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4b2a      	ldr	r3, [pc, #168]	@ (80037d8 <HAL_TIM_Encoder_Init+0x148>)
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	4313      	orrs	r3, r2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	011a      	lsls	r2, r3, #4
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	031b      	lsls	r3, r3, #12
 8003750:	4313      	orrs	r3, r2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4313      	orrs	r3, r2
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	fffebff8 	.word	0xfffebff8
 80037d0:	fffffcfc 	.word	0xfffffcfc
 80037d4:	fffff3f3 	.word	0xfffff3f3
 80037d8:	ffff0f0f 	.word	0xffff0f0f

080037dc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003804:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d110      	bne.n	800382e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003812:	7b7b      	ldrb	r3, [r7, #13]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d001      	beq.n	800381c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e089      	b.n	8003930 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	e031      	b.n	8003892 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d110      	bne.n	8003856 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003834:	7bbb      	ldrb	r3, [r7, #14]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800383a:	7b3b      	ldrb	r3, [r7, #12]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d001      	beq.n	8003844 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e075      	b.n	8003930 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003854:	e01d      	b.n	8003892 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d108      	bne.n	800386e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d105      	bne.n	800386e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003868:	7b3b      	ldrb	r3, [r7, #12]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d001      	beq.n	8003872 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e05e      	b.n	8003930 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2202      	movs	r2, #2
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2202      	movs	r2, #2
 800388e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d010      	beq.n	80038c0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800389e:	e01f      	b.n	80038e0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	2100      	movs	r1, #0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fa21 	bl	8003cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0202 	orr.w	r2, r2, #2
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e02e      	b.n	800391e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	2104      	movs	r1, #4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa11 	bl	8003cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0204 	orr.w	r2, r2, #4
 80038dc:	60da      	str	r2, [r3, #12]
      break;
 80038de:	e01e      	b.n	800391e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2201      	movs	r2, #1
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f000 fa01 	bl	8003cf0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	2104      	movs	r1, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9fa 	bl	8003cf0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0202 	orr.w	r2, r2, #2
 800390a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0204 	orr.w	r2, r2, #4
 800391a:	60da      	str	r2, [r3, #12]
      break;
 800391c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d020      	beq.n	800399c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01b      	beq.n	800399c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f06f 0202 	mvn.w	r2, #2
 800396c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 f8e9 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003988:	e005      	b.n	8003996 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8db 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8ec 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d020      	beq.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01b      	beq.n	80039e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0204 	mvn.w	r2, #4
 80039b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8c3 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f8b5 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8c6 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d020      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01b      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0208 	mvn.w	r2, #8
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2204      	movs	r2, #4
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f89d 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f88f 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f8a0 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d020      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01b      	beq.n	8003a80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0210 	mvn.w	r2, #16
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2208      	movs	r2, #8
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f877 	bl	8003b5a <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f869 	bl	8003b46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f87a 	bl	8003b6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d007      	beq.n	8003aa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0201 	mvn.w	r2, #1
 8003a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fa7c 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d104      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d007      	beq.n	8003ad2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f9cd 	bl	8003e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00c      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f9c5 	bl	8003e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d00c      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d007      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f834 	bl	8003b82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0220 	mvn.w	r2, #32
 8003b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f98d 	bl	8003e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b76:	bf00      	nop
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a46      	ldr	r2, [pc, #280]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a43      	ldr	r2, [pc, #268]	@ (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a42      	ldr	r2, [pc, #264]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a41      	ldr	r2, [pc, #260]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a40      	ldr	r2, [pc, #256]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a35      	ldr	r2, [pc, #212]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf8:	d027      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a32      	ldr	r2, [pc, #200]	@ (8003cc8 <TIM_Base_SetConfig+0x130>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <TIM_Base_SetConfig+0x134>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <TIM_Base_SetConfig+0x138>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd8 <TIM_Base_SetConfig+0x140>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <TIM_Base_SetConfig+0x144>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce0 <TIM_Base_SetConfig+0x148>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce4 <TIM_Base_SetConfig+0x14c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce8 <TIM_Base_SetConfig+0x150>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <TIM_Base_SetConfig+0x154>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a10      	ldr	r2, [pc, #64]	@ (8003cc4 <TIM_Base_SetConfig+0x12c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0xf8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <TIM_Base_SetConfig+0x13c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d105      	bne.n	8003cb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f023 0201 	bic.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40010400 	.word	0x40010400
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	40014400 	.word	0x40014400
 8003ce0:	40014800 	.word	0x40014800
 8003ce4:	40001800 	.word	0x40001800
 8003ce8:	40001c00 	.word	0x40001c00
 8003cec:	40002000 	.word	0x40002000

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e06d      	b.n	8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a30      	ldr	r2, [pc, #192]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d004      	beq.n	8003d88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2f      	ldr	r2, [pc, #188]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003da0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc6:	d01d      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a15      	ldr	r2, [pc, #84]	@ (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a15      	ldr	r2, [pc, #84]	@ (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10c      	bne.n	8003e1e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e0a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40010400 	.word	0x40010400
 8003e44:	40000400 	.word	0x40000400
 8003e48:	40000800 	.word	0x40000800
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40014000 	.word	0x40014000
 8003e54:	40001800 	.word	0x40001800

08003e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e98:	4904      	ldr	r1, [pc, #16]	@ (8003eac <MX_FATFS_Init+0x18>)
 8003e9a:	4805      	ldr	r0, [pc, #20]	@ (8003eb0 <MX_FATFS_Init+0x1c>)
 8003e9c:	f002 faf6 	bl	800648c <FATFS_LinkDriver>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b03      	ldr	r3, [pc, #12]	@ (8003eb4 <MX_FATFS_Init+0x20>)
 8003ea6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	2000266c 	.word	0x2000266c
 8003eb0:	20000014 	.word	0x20000014
 8003eb4:	20002668 	.word	0x20002668

08003eb8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003ebc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fc fd43 	bl	8000960 <SD_disk_initialize>
 8003eda:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fc fe1f 	bl	8000b34 <SD_disk_status>
 8003ef6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3708      	adds	r7, #8
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 8003f10:	7bf8      	ldrb	r0, [r7, #15]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	f7fc fe22 	bl	8000b60 <SD_disk_read>
 8003f1c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b084      	sub	sp, #16
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	4603      	mov	r3, r0
 8003f34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003f36:	7bf8      	ldrb	r0, [r7, #15]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	f7fc fe79 	bl	8000c34 <SD_disk_write>
 8003f42:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	603a      	str	r2, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 8003f5c:	79b9      	ldrb	r1, [r7, #6]
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fc feea 	bl	8000d3c <SD_disk_ioctl>
 8003f68:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <disk_status+0x30>)
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	79fa      	ldrb	r2, [r7, #7]
 8003f8c:	4905      	ldr	r1, [pc, #20]	@ (8003fa4 <disk_status+0x30>)
 8003f8e:	440a      	add	r2, r1
 8003f90:	7a12      	ldrb	r2, [r2, #8]
 8003f92:	4610      	mov	r0, r2
 8003f94:	4798      	blx	r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	20002698 	.word	0x20002698

08003fa8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <disk_initialize+0x48>)
 8003fba:	5cd3      	ldrb	r3, [r2, r3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8003ff0 <disk_initialize+0x48>)
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	4a09      	ldr	r2, [pc, #36]	@ (8003ff0 <disk_initialize+0x48>)
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	79fa      	ldrb	r2, [r7, #7]
 8003fd6:	4906      	ldr	r1, [pc, #24]	@ (8003ff0 <disk_initialize+0x48>)
 8003fd8:	440a      	add	r2, r1
 8003fda:	7a12      	ldrb	r2, [r2, #8]
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4798      	blx	r3
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20002698 	.word	0x20002698

08003ff4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	4603      	mov	r3, r0
 8004002:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	4a0a      	ldr	r2, [pc, #40]	@ (8004030 <disk_read+0x3c>)
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	689c      	ldr	r4, [r3, #8]
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	4a07      	ldr	r2, [pc, #28]	@ (8004030 <disk_read+0x3c>)
 8004014:	4413      	add	r3, r2
 8004016:	7a18      	ldrb	r0, [r3, #8]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	47a0      	blx	r4
 8004020:	4603      	mov	r3, r0
 8004022:	75fb      	strb	r3, [r7, #23]
  return res;
 8004024:	7dfb      	ldrb	r3, [r7, #23]
}
 8004026:	4618      	mov	r0, r3
 8004028:	371c      	adds	r7, #28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	bf00      	nop
 8004030:	20002698 	.word	0x20002698

08004034 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	4603      	mov	r3, r0
 8004042:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <disk_write+0x3c>)
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	68dc      	ldr	r4, [r3, #12]
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	4a07      	ldr	r2, [pc, #28]	@ (8004070 <disk_write+0x3c>)
 8004054:	4413      	add	r3, r2
 8004056:	7a18      	ldrb	r0, [r3, #8]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	47a0      	blx	r4
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]
  return res;
 8004064:	7dfb      	ldrb	r3, [r7, #23]
}
 8004066:	4618      	mov	r0, r3
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd90      	pop	{r4, r7, pc}
 800406e:	bf00      	nop
 8004070:	20002698 	.word	0x20002698

08004074 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	603a      	str	r2, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
 8004080:	460b      	mov	r3, r1
 8004082:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4a09      	ldr	r2, [pc, #36]	@ (80040ac <disk_ioctl+0x38>)
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	79fa      	ldrb	r2, [r7, #7]
 8004092:	4906      	ldr	r1, [pc, #24]	@ (80040ac <disk_ioctl+0x38>)
 8004094:	440a      	add	r2, r1
 8004096:	7a10      	ldrb	r0, [r2, #8]
 8004098:	79b9      	ldrb	r1, [r7, #6]
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	4798      	blx	r3
 800409e:	4603      	mov	r3, r0
 80040a0:	73fb      	strb	r3, [r7, #15]
  return res;
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	20002698 	.word	0x20002698

080040b0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3301      	adds	r3, #1
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80040c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	b21a      	sxth	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	b21b      	sxth	r3, r3
 80040ce:	4313      	orrs	r3, r2
 80040d0:	b21b      	sxth	r3, r3
 80040d2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80040d4:	89fb      	ldrh	r3, [r7, #14]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80040e2:	b480      	push	{r7}
 80040e4:	b085      	sub	sp, #20
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3303      	adds	r3, #3
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	3202      	adds	r2, #2
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	021b      	lsls	r3, r3, #8
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	3201      	adds	r2, #1
 8004108:	7812      	ldrb	r2, [r2, #0]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
	return rv;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	887a      	ldrh	r2, [r7, #2]
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	887a      	ldrh	r2, [r7, #2]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	701a      	strb	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
 8004166:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	b2d2      	uxtb	r2, r2
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	b2d2      	uxtb	r2, r2
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80041b6:	b480      	push	{r7}
 80041b8:	b087      	sub	sp, #28
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	1c53      	adds	r3, r2, #1
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1c59      	adds	r1, r3, #1
 80041da:	6179      	str	r1, [r7, #20]
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1f1      	bne.n	80041d0 <mem_cpy+0x1a>
	}
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	617a      	str	r2, [r7, #20]
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3b01      	subs	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f3      	bne.n	8004208 <mem_set+0x10>
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800422e:	b480      	push	{r7}
 8004230:	b089      	sub	sp, #36	@ 0x24
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	61fa      	str	r2, [r7, #28]
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	4619      	mov	r1, r3
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	61ba      	str	r2, [r7, #24]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	1acb      	subs	r3, r1, r3
 800425a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <mem_cmp+0x40>
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0eb      	beq.n	8004246 <mem_cmp+0x18>

	return r;
 800426e:	697b      	ldr	r3, [r7, #20]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3724      	adds	r7, #36	@ 0x24
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004286:	e002      	b.n	800428e <chk_chr+0x12>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3301      	adds	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d005      	beq.n	80042a2 <chk_chr+0x26>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4293      	cmp	r3, r2
 80042a0:	d1f2      	bne.n	8004288 <chk_chr+0xc>
	return *str;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	781b      	ldrb	r3, [r3, #0]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042be:	2300      	movs	r3, #0
 80042c0:	60bb      	str	r3, [r7, #8]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e029      	b.n	800431c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80042c8:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <chk_lock+0xb4>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	4413      	add	r3, r2
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01d      	beq.n	8004312 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042d6:	4a24      	ldr	r2, [pc, #144]	@ (8004368 <chk_lock+0xb4>)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	4413      	add	r3, r2
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d116      	bne.n	8004316 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80042e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004368 <chk_lock+0xb4>)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d10c      	bne.n	8004316 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004368 <chk_lock+0xb4>)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	4413      	add	r3, r2
 8004304:	3308      	adds	r3, #8
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800430c:	429a      	cmp	r2, r3
 800430e:	d102      	bne.n	8004316 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004310:	e007      	b.n	8004322 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d9d2      	bls.n	80042c8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b02      	cmp	r3, #2
 8004326:	d109      	bne.n	800433c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d102      	bne.n	8004334 <chk_lock+0x80>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d101      	bne.n	8004338 <chk_lock+0x84>
 8004334:	2300      	movs	r3, #0
 8004336:	e010      	b.n	800435a <chk_lock+0xa6>
 8004338:	2312      	movs	r3, #18
 800433a:	e00e      	b.n	800435a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <chk_lock+0xa0>
 8004342:	4a09      	ldr	r2, [pc, #36]	@ (8004368 <chk_lock+0xb4>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	330c      	adds	r3, #12
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004352:	d101      	bne.n	8004358 <chk_lock+0xa4>
 8004354:	2310      	movs	r3, #16
 8004356:	e000      	b.n	800435a <chk_lock+0xa6>
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	20002678 	.word	0x20002678

0800436c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	e002      	b.n	800437e <enq_lock+0x12>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3301      	adds	r3, #1
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d806      	bhi.n	8004392 <enq_lock+0x26>
 8004384:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <enq_lock+0x40>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4413      	add	r3, r2
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1f2      	bne.n	8004378 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b02      	cmp	r3, #2
 8004396:	bf14      	ite	ne
 8004398:	2301      	movne	r3, #1
 800439a:	2300      	moveq	r3, #0
 800439c:	b2db      	uxtb	r3, r3
}
 800439e:	4618      	mov	r0, r3
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	20002678 	.word	0x20002678

080043b0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043ba:	2300      	movs	r3, #0
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e01f      	b.n	8004400 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80043c0:	4a41      	ldr	r2, [pc, #260]	@ (80044c8 <inc_lock+0x118>)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4413      	add	r3, r2
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d113      	bne.n	80043fa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80043d2:	4a3d      	ldr	r2, [pc, #244]	@ (80044c8 <inc_lock+0x118>)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d109      	bne.n	80043fa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80043e6:	4a38      	ldr	r2, [pc, #224]	@ (80044c8 <inc_lock+0x118>)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	4413      	add	r3, r2
 80043ee:	3308      	adds	r3, #8
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d006      	beq.n	8004408 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d9dc      	bls.n	80043c0 <inc_lock+0x10>
 8004406:	e000      	b.n	800440a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004408:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d132      	bne.n	8004476 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
 8004414:	e002      	b.n	800441c <inc_lock+0x6c>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3301      	adds	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d806      	bhi.n	8004430 <inc_lock+0x80>
 8004422:	4a29      	ldr	r2, [pc, #164]	@ (80044c8 <inc_lock+0x118>)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	4413      	add	r3, r2
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f2      	bne.n	8004416 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d101      	bne.n	800443a <inc_lock+0x8a>
 8004436:	2300      	movs	r3, #0
 8004438:	e040      	b.n	80044bc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4922      	ldr	r1, [pc, #136]	@ (80044c8 <inc_lock+0x118>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	440b      	add	r3, r1
 8004446:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	491e      	ldr	r1, [pc, #120]	@ (80044c8 <inc_lock+0x118>)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	440b      	add	r3, r1
 8004454:	3304      	adds	r3, #4
 8004456:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	491a      	ldr	r1, [pc, #104]	@ (80044c8 <inc_lock+0x118>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	440b      	add	r3, r1
 8004464:	3308      	adds	r3, #8
 8004466:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004468:	4a17      	ldr	r2, [pc, #92]	@ (80044c8 <inc_lock+0x118>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	4413      	add	r3, r2
 8004470:	330c      	adds	r3, #12
 8004472:	2200      	movs	r2, #0
 8004474:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <inc_lock+0xe0>
 800447c:	4a12      	ldr	r2, [pc, #72]	@ (80044c8 <inc_lock+0x118>)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4413      	add	r3, r2
 8004484:	330c      	adds	r3, #12
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <inc_lock+0xe0>
 800448c:	2300      	movs	r3, #0
 800448e:	e015      	b.n	80044bc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d108      	bne.n	80044a8 <inc_lock+0xf8>
 8004496:	4a0c      	ldr	r2, [pc, #48]	@ (80044c8 <inc_lock+0x118>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	330c      	adds	r3, #12
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	3301      	adds	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	e001      	b.n	80044ac <inc_lock+0xfc>
 80044a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044ac:	4906      	ldr	r1, [pc, #24]	@ (80044c8 <inc_lock+0x118>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	440b      	add	r3, r1
 80044b4:	330c      	adds	r3, #12
 80044b6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3301      	adds	r3, #1
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	20002678 	.word	0x20002678

080044cc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d825      	bhi.n	800452c <dec_lock+0x60>
		n = Files[i].ctr;
 80044e0:	4a17      	ldr	r2, [pc, #92]	@ (8004540 <dec_lock+0x74>)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	330c      	adds	r3, #12
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80044ee:	89fb      	ldrh	r3, [r7, #14]
 80044f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f4:	d101      	bne.n	80044fa <dec_lock+0x2e>
 80044f6:	2300      	movs	r3, #0
 80044f8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80044fa:	89fb      	ldrh	r3, [r7, #14]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <dec_lock+0x3a>
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	3b01      	subs	r3, #1
 8004504:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004506:	4a0e      	ldr	r2, [pc, #56]	@ (8004540 <dec_lock+0x74>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	330c      	adds	r3, #12
 8004510:	89fa      	ldrh	r2, [r7, #14]
 8004512:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004514:	89fb      	ldrh	r3, [r7, #14]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d105      	bne.n	8004526 <dec_lock+0x5a>
 800451a:	4a09      	ldr	r2, [pc, #36]	@ (8004540 <dec_lock+0x74>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	737b      	strb	r3, [r7, #13]
 800452a:	e001      	b.n	8004530 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800452c:	2302      	movs	r3, #2
 800452e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004530:	7b7b      	ldrb	r3, [r7, #13]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20002678 	.word	0x20002678

08004544 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	e010      	b.n	8004574 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004552:	4a0d      	ldr	r2, [pc, #52]	@ (8004588 <clear_lock+0x44>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	4413      	add	r3, r2
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	429a      	cmp	r2, r3
 8004560:	d105      	bne.n	800456e <clear_lock+0x2a>
 8004562:	4a09      	ldr	r2, [pc, #36]	@ (8004588 <clear_lock+0x44>)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	4413      	add	r3, r2
 800456a:	2200      	movs	r2, #0
 800456c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3301      	adds	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d9eb      	bls.n	8004552 <clear_lock+0xe>
	}
}
 800457a:	bf00      	nop
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	20002678 	.word	0x20002678

0800458c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	78db      	ldrb	r3, [r3, #3]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d034      	beq.n	800460a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7858      	ldrb	r0, [r3, #1]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80045b0:	2301      	movs	r3, #1
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	f7ff fd3e 	bl	8004034 <disk_write>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	e022      	b.n	800460a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	1ad2      	subs	r2, r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d217      	bcs.n	800460a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	789b      	ldrb	r3, [r3, #2]
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e010      	b.n	8004604 <sync_window+0x78>
					wsect += fs->fsize;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	7858      	ldrb	r0, [r3, #1]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80045f6:	2301      	movs	r3, #1
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	f7ff fd1b 	bl	8004034 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	3b01      	subs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d8eb      	bhi.n	80045e2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800460a:	7bfb      	ldrb	r3, [r7, #15]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d01b      	beq.n	8004664 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ffad 	bl	800458c <sync_window>
 8004632:	4603      	mov	r3, r0
 8004634:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d113      	bne.n	8004664 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7858      	ldrb	r0, [r3, #1]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004646:	2301      	movs	r3, #1
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	f7ff fcd3 	bl	8003ff4 <disk_read>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d004      	beq.n	800465e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004654:	f04f 33ff 	mov.w	r3, #4294967295
 8004658:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff ff87 	bl	800458c <sync_window>
 800467e:	4603      	mov	r3, r0
 8004680:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d159      	bne.n	800473c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b03      	cmp	r3, #3
 800468e:	d149      	bne.n	8004724 <sync_fs+0xb4>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	791b      	ldrb	r3, [r3, #4]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d145      	bne.n	8004724 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	899b      	ldrh	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	2100      	movs	r1, #0
 80046a6:	f7ff fda7 	bl	80041f8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3334      	adds	r3, #52	@ 0x34
 80046ae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80046b2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fd36 	bl	8004128 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3334      	adds	r3, #52	@ 0x34
 80046c0:	4921      	ldr	r1, [pc, #132]	@ (8004748 <sync_fs+0xd8>)
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fd4b 	bl	800415e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3334      	adds	r3, #52	@ 0x34
 80046cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80046d0:	491e      	ldr	r1, [pc, #120]	@ (800474c <sync_fs+0xdc>)
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fd43 	bl	800415e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3334      	adds	r3, #52	@ 0x34
 80046dc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f7ff fd39 	bl	800415e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3334      	adds	r3, #52	@ 0x34
 80046f0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7ff fd2f 	bl	800415e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7858      	ldrb	r0, [r3, #1]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004718:	2301      	movs	r3, #1
 800471a:	f7ff fc8b 	bl	8004034 <disk_write>
			fs->fsi_flag = 0;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2200      	movs	r2, #0
 800472a:	2100      	movs	r1, #0
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fca1 	bl	8004074 <disk_ioctl>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <sync_fs+0xcc>
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800473c:	7bfb      	ldrb	r3, [r7, #15]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	41615252 	.word	0x41615252
 800474c:	61417272 	.word	0x61417272

08004750 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3b02      	subs	r3, #2
 800475e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	3b02      	subs	r3, #2
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d301      	bcc.n	8004770 <clust2sect+0x20>
 800476c:	2300      	movs	r3, #0
 800476e:	e008      	b.n	8004782 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	895b      	ldrh	r3, [r3, #10]
 8004774:	461a      	mov	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	fb03 f202 	mul.w	r2, r3, r2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	4413      	add	r3, r2
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d904      	bls.n	80047ae <get_fat+0x20>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80047ae:	2301      	movs	r3, #1
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	e0ba      	b.n	800492a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80047b4:	f04f 33ff 	mov.w	r3, #4294967295
 80047b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	f000 8082 	beq.w	80048c8 <get_fat+0x13a>
 80047c4:	2b03      	cmp	r3, #3
 80047c6:	f300 80a6 	bgt.w	8004916 <get_fat+0x188>
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d002      	beq.n	80047d4 <get_fat+0x46>
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d055      	beq.n	800487e <get_fat+0xf0>
 80047d2:	e0a0      	b.n	8004916 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	085b      	lsrs	r3, r3, #1
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	899b      	ldrh	r3, [r3, #12]
 80047ea:	4619      	mov	r1, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80047f2:	4413      	add	r3, r2
 80047f4:	4619      	mov	r1, r3
 80047f6:	6938      	ldr	r0, [r7, #16]
 80047f8:	f7ff ff0c 	bl	8004614 <move_window>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f040 808c 	bne.w	800491c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	60fa      	str	r2, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	8992      	ldrh	r2, [r2, #12]
 800480e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004812:	fb01 f202 	mul.w	r2, r1, r2
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4413      	add	r3, r2
 800481c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004820:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	899b      	ldrh	r3, [r3, #12]
 800482a:	4619      	mov	r1, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004832:	4413      	add	r3, r2
 8004834:	4619      	mov	r1, r3
 8004836:	6938      	ldr	r0, [r7, #16]
 8004838:	f7ff feec 	bl	8004614 <move_window>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d16e      	bne.n	8004920 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	899b      	ldrh	r3, [r3, #12]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	fbb3 f1f2 	udiv	r1, r3, r2
 800484e:	fb01 f202 	mul.w	r2, r1, r2
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4413      	add	r3, r2
 8004858:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <get_fat+0xe6>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	091b      	lsrs	r3, r3, #4
 8004872:	e002      	b.n	800487a <get_fat+0xec>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487a:	617b      	str	r3, [r7, #20]
			break;
 800487c:	e055      	b.n	800492a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	899b      	ldrh	r3, [r3, #12]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	b29b      	uxth	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004892:	4413      	add	r3, r2
 8004894:	4619      	mov	r1, r3
 8004896:	6938      	ldr	r0, [r7, #16]
 8004898:	f7ff febc 	bl	8004614 <move_window>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d140      	bne.n	8004924 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	8992      	ldrh	r2, [r2, #12]
 80048b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80048b4:	fb00 f202 	mul.w	r2, r0, r2
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	440b      	add	r3, r1
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fbf7 	bl	80040b0 <ld_word>
 80048c2:	4603      	mov	r3, r0
 80048c4:	617b      	str	r3, [r7, #20]
			break;
 80048c6:	e030      	b.n	800492a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	899b      	ldrh	r3, [r3, #12]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048dc:	4413      	add	r3, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	6938      	ldr	r0, [r7, #16]
 80048e2:	f7ff fe97 	bl	8004614 <move_window>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11d      	bne.n	8004928 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	8992      	ldrh	r2, [r2, #12]
 80048fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80048fe:	fb00 f202 	mul.w	r2, r0, r2
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	440b      	add	r3, r1
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fbeb 	bl	80040e2 <ld_dword>
 800490c:	4603      	mov	r3, r0
 800490e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004912:	617b      	str	r3, [r7, #20]
			break;
 8004914:	e009      	b.n	800492a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004916:	2301      	movs	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e006      	b.n	800492a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800491c:	bf00      	nop
 800491e:	e004      	b.n	800492a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004920:	bf00      	nop
 8004922:	e002      	b.n	800492a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004924:	bf00      	nop
 8004926:	e000      	b.n	800492a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004928:	bf00      	nop
		}
	}

	return val;
 800492a:	697b      	ldr	r3, [r7, #20]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b089      	sub	sp, #36	@ 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004940:	2302      	movs	r3, #2
 8004942:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b01      	cmp	r3, #1
 8004948:	f240 8109 	bls.w	8004b5e <put_fat+0x22a>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	f080 8103 	bcs.w	8004b5e <put_fat+0x22a>
		switch (fs->fs_type) {
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b03      	cmp	r3, #3
 800495e:	f000 80b6 	beq.w	8004ace <put_fat+0x19a>
 8004962:	2b03      	cmp	r3, #3
 8004964:	f300 80fb 	bgt.w	8004b5e <put_fat+0x22a>
 8004968:	2b01      	cmp	r3, #1
 800496a:	d003      	beq.n	8004974 <put_fat+0x40>
 800496c:	2b02      	cmp	r3, #2
 800496e:	f000 8083 	beq.w	8004a78 <put_fat+0x144>
 8004972:	e0f4      	b.n	8004b5e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4413      	add	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	899b      	ldrh	r3, [r3, #12]
 800498a:	4619      	mov	r1, r3
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004992:	4413      	add	r3, r2
 8004994:	4619      	mov	r1, r3
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f7ff fe3c 	bl	8004614 <move_window>
 800499c:	4603      	mov	r3, r0
 800499e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049a0:	7ffb      	ldrb	r3, [r7, #31]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f040 80d4 	bne.w	8004b50 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	8992      	ldrh	r2, [r2, #12]
 80049b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80049bc:	fb00 f202 	mul.w	r2, r0, r2
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	440b      	add	r3, r1
 80049c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00d      	beq.n	80049ec <put_fat+0xb8>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b25b      	sxtb	r3, r3
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	b25a      	sxtb	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	b25b      	sxtb	r3, r3
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	b25b      	sxtb	r3, r3
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b25b      	sxtb	r3, r3
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	e001      	b.n	80049f0 <put_fat+0xbc>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2201      	movs	r2, #1
 80049f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	899b      	ldrh	r3, [r3, #12]
 8004a02:	4619      	mov	r1, r3
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a0a:	4413      	add	r3, r2
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f7ff fe00 	bl	8004614 <move_window>
 8004a14:	4603      	mov	r3, r0
 8004a16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 809a 	bne.w	8004b54 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	899b      	ldrh	r3, [r3, #12]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a32:	fb00 f202 	mul.w	r2, r0, r2
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <put_fat+0x11a>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e00e      	b.n	8004a6c <put_fat+0x138>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b25b      	sxtb	r3, r3
 8004a54:	f023 030f 	bic.w	r3, r3, #15
 8004a58:	b25a      	sxtb	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	b25b      	sxtb	r3, r3
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	b25b      	sxtb	r3, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2201      	movs	r2, #1
 8004a74:	70da      	strb	r2, [r3, #3]
			break;
 8004a76:	e072      	b.n	8004b5e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	899b      	ldrh	r3, [r3, #12]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff fdbf 	bl	8004614 <move_window>
 8004a96:	4603      	mov	r3, r0
 8004a98:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15b      	bne.n	8004b58 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	8992      	ldrh	r2, [r2, #12]
 8004aae:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ab2:	fb00 f202 	mul.w	r2, r0, r2
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	440b      	add	r3, r1
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	b292      	uxth	r2, r2
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff fb31 	bl	8004128 <st_word>
			fs->wflag = 1;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	70da      	strb	r2, [r3, #3]
			break;
 8004acc:	e047      	b.n	8004b5e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	899b      	ldrh	r3, [r3, #12]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	4619      	mov	r1, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f7ff fd94 	bl	8004614 <move_window>
 8004aec:	4603      	mov	r3, r0
 8004aee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004af0:	7ffb      	ldrb	r3, [r7, #31]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d132      	bne.n	8004b5c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	8992      	ldrh	r2, [r2, #12]
 8004b0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b0e:	fb00 f202 	mul.w	r2, r0, r2
 8004b12:	1a9b      	subs	r3, r3, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fae3 	bl	80040e2 <ld_dword>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b22:	4323      	orrs	r3, r4
 8004b24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	8992      	ldrh	r2, [r2, #12]
 8004b34:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b38:	fb00 f202 	mul.w	r2, r0, r2
 8004b3c:	1a9b      	subs	r3, r3, r2
 8004b3e:	440b      	add	r3, r1
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fb0b 	bl	800415e <st_dword>
			fs->wflag = 1;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	70da      	strb	r2, [r3, #3]
			break;
 8004b4e:	e006      	b.n	8004b5e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b50:	bf00      	nop
 8004b52:	e004      	b.n	8004b5e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b54:	bf00      	nop
 8004b56:	e002      	b.n	8004b5e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b5c:	bf00      	nop
		}
	}
	return res;
 8004b5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3724      	adds	r7, #36	@ 0x24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd90      	pop	{r4, r7, pc}

08004b68 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d904      	bls.n	8004b8e <remove_chain+0x26>
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d301      	bcc.n	8004b92 <remove_chain+0x2a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e04b      	b.n	8004c2a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00c      	beq.n	8004bb2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	69b8      	ldr	r0, [r7, #24]
 8004ba0:	f7ff fec8 	bl	8004934 <put_fat>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <remove_chain+0x4a>
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
 8004bb0:	e03b      	b.n	8004c2a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004bb2:	68b9      	ldr	r1, [r7, #8]
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7ff fdea 	bl	800478e <get_fat>
 8004bba:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d031      	beq.n	8004c26 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <remove_chain+0x64>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e02e      	b.n	8004c2a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d101      	bne.n	8004bd8 <remove_chain+0x70>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e028      	b.n	8004c2a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004bd8:	2200      	movs	r2, #0
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	69b8      	ldr	r0, [r7, #24]
 8004bde:	f7ff fea9 	bl	8004934 <put_fat>
 8004be2:	4603      	mov	r3, r0
 8004be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004be6:	7ffb      	ldrb	r3, [r7, #31]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <remove_chain+0x88>
 8004bec:	7ffb      	ldrb	r3, [r7, #31]
 8004bee:	e01c      	b.n	8004c2a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20b      	bcs.n	8004c16 <remove_chain+0xae>
			fs->free_clst++;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	791b      	ldrb	r3, [r3, #4]
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d3c6      	bcc.n	8004bb2 <remove_chain+0x4a>
 8004c24:	e000      	b.n	8004c28 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c26:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10d      	bne.n	8004c64 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <create_chain+0x2c>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d31b      	bcc.n	8004c96 <create_chain+0x64>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e018      	b.n	8004c96 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004c64:	6839      	ldr	r1, [r7, #0]
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fd91 	bl	800478e <get_fat>
 8004c6c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d801      	bhi.n	8004c78 <create_chain+0x46>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e070      	b.n	8004d5a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7e:	d101      	bne.n	8004c84 <create_chain+0x52>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	e06a      	b.n	8004d5a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d201      	bcs.n	8004c92 <create_chain+0x60>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	e063      	b.n	8004d5a <create_chain+0x128>
		scl = clst;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d307      	bcc.n	8004cba <create_chain+0x88>
				ncl = 2;
 8004caa:	2302      	movs	r3, #2
 8004cac:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d901      	bls.n	8004cba <create_chain+0x88>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e04f      	b.n	8004d5a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004cba:	69f9      	ldr	r1, [r7, #28]
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f7ff fd66 	bl	800478e <get_fat>
 8004cc2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d003      	beq.n	8004cd8 <create_chain+0xa6>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d101      	bne.n	8004cdc <create_chain+0xaa>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e03e      	b.n	8004d5a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1da      	bne.n	8004c9a <create_chain+0x68>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	e038      	b.n	8004d5a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ce8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004cea:	f04f 32ff 	mov.w	r2, #4294967295
 8004cee:	69f9      	ldr	r1, [r7, #28]
 8004cf0:	6938      	ldr	r0, [r7, #16]
 8004cf2:	f7ff fe1f 	bl	8004934 <put_fat>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <create_chain+0xe2>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	6938      	ldr	r0, [r7, #16]
 8004d0c:	f7ff fe12 	bl	8004934 <put_fat>
 8004d10:	4603      	mov	r3, r0
 8004d12:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d116      	bne.n	8004d48 <create_chain+0x116>
		fs->last_clst = ncl;
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	3b02      	subs	r3, #2
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d804      	bhi.n	8004d38 <create_chain+0x106>
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	1e5a      	subs	r2, r3, #1
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	791b      	ldrb	r3, [r3, #4]
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	711a      	strb	r2, [r3, #4]
 8004d46:	e007      	b.n	8004d58 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d102      	bne.n	8004d54 <create_chain+0x122>
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	e000      	b.n	8004d56 <create_chain+0x124>
 8004d54:	2301      	movs	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004d58:	69fb      	ldr	r3, [r7, #28]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3720      	adds	r7, #32
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
 8004d6a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	3304      	adds	r3, #4
 8004d78:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	899b      	ldrh	r3, [r3, #12]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	8952      	ldrh	r2, [r2, #10]
 8004d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1d1a      	adds	r2, r3, #4
 8004d94:	613a      	str	r2, [r7, #16]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d101      	bne.n	8004da4 <clmt_clust+0x42>
 8004da0:	2300      	movs	r3, #0
 8004da2:	e010      	b.n	8004dc6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d307      	bcc.n	8004dbc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	3304      	adds	r3, #4
 8004db8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004dba:	e7e9      	b.n	8004d90 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004dbc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4413      	add	r3, r2
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b086      	sub	sp, #24
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de8:	d204      	bcs.n	8004df4 <dir_sdi+0x22>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004df4:	2302      	movs	r3, #2
 8004df6:	e071      	b.n	8004edc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <dir_sdi+0x46>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d902      	bls.n	8004e18 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	8912      	ldrh	r2, [r2, #8]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d301      	bcc.n	8004e2e <dir_sdi+0x5c>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e056      	b.n	8004edc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	61da      	str	r2, [r3, #28]
 8004e36:	e02d      	b.n	8004e94 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	895b      	ldrh	r3, [r3, #10]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	899b      	ldrh	r3, [r3, #12]
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e48:	e019      	b.n	8004e7e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff fc9d 	bl	800478e <get_fat>
 8004e54:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d101      	bne.n	8004e62 <dir_sdi+0x90>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e03c      	b.n	8004edc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d904      	bls.n	8004e72 <dir_sdi+0xa0>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d301      	bcc.n	8004e76 <dir_sdi+0xa4>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e032      	b.n	8004edc <dir_sdi+0x10a>
			ofs -= csz;
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d2e1      	bcs.n	8004e4a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	6938      	ldr	r0, [r7, #16]
 8004e8a:	f7ff fc61 	bl	8004750 <clust2sect>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <dir_sdi+0xd4>
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	e01a      	b.n	8004edc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	899b      	ldrh	r3, [r3, #12]
 8004eae:	4619      	mov	r1, r3
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eb6:	441a      	add	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	899b      	ldrh	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	fbb3 f0f2 	udiv	r0, r3, r2
 8004ece:	fb00 f202 	mul.w	r2, r0, r2
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	18ca      	adds	r2, r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	3320      	adds	r3, #32
 8004efa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <dir_next+0x28>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f0a:	d301      	bcc.n	8004f10 <dir_next+0x2c>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	e0bb      	b.n	8005088 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	899b      	ldrh	r3, [r3, #12]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f1c:	fb01 f202 	mul.w	r2, r1, r2
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 809d 	bne.w	8005062 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	69db      	ldr	r3, [r3, #28]
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	8912      	ldrh	r2, [r2, #8]
 8004f42:	4293      	cmp	r3, r2
 8004f44:	f0c0 808d 	bcc.w	8005062 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e09a      	b.n	8005088 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	899b      	ldrh	r3, [r3, #12]
 8004f56:	461a      	mov	r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	8952      	ldrh	r2, [r2, #10]
 8004f62:	3a01      	subs	r2, #1
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d17b      	bne.n	8005062 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7ff fc0b 	bl	800478e <get_fat>
 8004f78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d801      	bhi.n	8004f84 <dir_next+0xa0>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e081      	b.n	8005088 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f8a:	d101      	bne.n	8004f90 <dir_next+0xac>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e07b      	b.n	8005088 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d359      	bcc.n	800504e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	61da      	str	r2, [r3, #28]
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e06e      	b.n	8005088 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7ff fe3d 	bl	8004c32 <create_chain>
 8004fb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <dir_next+0xe0>
 8004fc0:	2307      	movs	r3, #7
 8004fc2:	e061      	b.n	8005088 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <dir_next+0xea>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e05c      	b.n	8005088 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d101      	bne.n	8004fda <dir_next+0xf6>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e056      	b.n	8005088 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7ff fad6 	bl	800458c <sync_window>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <dir_next+0x106>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e04e      	b.n	8005088 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	899b      	ldrh	r3, [r3, #12]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f7ff f8fe 	bl	80041f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	613b      	str	r3, [r7, #16]
 8005000:	6979      	ldr	r1, [r7, #20]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff fba4 	bl	8004750 <clust2sect>
 8005008:	4602      	mov	r2, r0
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
 800500e:	e012      	b.n	8005036 <dir_next+0x152>
						fs->wflag = 1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fab8 	bl	800458c <sync_window>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <dir_next+0x142>
 8005022:	2301      	movs	r3, #1
 8005024:	e030      	b.n	8005088 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3301      	adds	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	631a      	str	r2, [r3, #48]	@ 0x30
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	895b      	ldrh	r3, [r3, #10]
 800503a:	461a      	mov	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4293      	cmp	r3, r2
 8005040:	d3e6      	bcc.n	8005010 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad2      	subs	r2, r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fb7a 	bl	8004750 <clust2sect>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	899b      	ldrh	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	fbb3 f0f2 	udiv	r0, r3, r2
 800507a:	fb00 f202 	mul.w	r2, r0, r2
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	18ca      	adds	r2, r1, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80050a0:	2100      	movs	r1, #0
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fe95 	bl	8004dd2 <dir_sdi>
 80050a8:	4603      	mov	r3, r0
 80050aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d12b      	bne.n	800510a <dir_alloc+0x7a>
		n = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	4619      	mov	r1, r3
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f7ff faa9 	bl	8004614 <move_window>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2be5      	cmp	r3, #229	@ 0xe5
 80050d4:	d004      	beq.n	80050e0 <dir_alloc+0x50>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	3301      	adds	r3, #1
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d102      	bne.n	80050f4 <dir_alloc+0x64>
 80050ee:	e00c      	b.n	800510a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80050f0:	2300      	movs	r3, #0
 80050f2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80050f4:	2101      	movs	r1, #1
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7ff fef4 	bl	8004ee4 <dir_next>
 80050fc:	4603      	mov	r3, r0
 80050fe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005100:	7dfb      	ldrb	r3, [r7, #23]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0d7      	beq.n	80050b6 <dir_alloc+0x26>
 8005106:	e000      	b.n	800510a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005108:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	2b04      	cmp	r3, #4
 800510e:	d101      	bne.n	8005114 <dir_alloc+0x84>
 8005110:	2307      	movs	r3, #7
 8005112:	75fb      	strb	r3, [r7, #23]
	return res;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	331a      	adds	r3, #26
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe ffbf 	bl	80040b0 <ld_word>
 8005132:	4603      	mov	r3, r0
 8005134:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b03      	cmp	r3, #3
 800513c:	d109      	bne.n	8005152 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3314      	adds	r3, #20
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe ffb4 	bl	80040b0 <ld_word>
 8005148:	4603      	mov	r3, r0
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	331a      	adds	r3, #26
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	b292      	uxth	r2, r2
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe ffd8 	bl	8004128 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b03      	cmp	r3, #3
 800517e:	d109      	bne.n	8005194 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f103 0214 	add.w	r2, r3, #20
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	b29b      	uxth	r3, r3
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fe ffca 	bl	8004128 <st_word>
	}
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80051aa:	2100      	movs	r1, #0
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff fe10 	bl	8004dd2 <dir_sdi>
 80051b2:	4603      	mov	r3, r0
 80051b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <dir_find+0x24>
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	e03e      	b.n	800523e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	4619      	mov	r1, r3
 80051c6:	6938      	ldr	r0, [r7, #16]
 80051c8:	f7ff fa24 	bl	8004614 <move_window>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12f      	bne.n	8005236 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051de:	7bfb      	ldrb	r3, [r7, #15]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <dir_find+0x4e>
 80051e4:	2304      	movs	r3, #4
 80051e6:	75fb      	strb	r3, [r7, #23]
 80051e8:	e028      	b.n	800523c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	330b      	adds	r3, #11
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	330b      	adds	r3, #11
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	f003 0308 	and.w	r3, r3, #8
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <dir_find+0x86>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a18      	ldr	r0, [r3, #32]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3324      	adds	r3, #36	@ 0x24
 8005214:	220b      	movs	r2, #11
 8005216:	4619      	mov	r1, r3
 8005218:	f7ff f809 	bl	800422e <mem_cmp>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005222:	2100      	movs	r1, #0
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fe5d 	bl	8004ee4 <dir_next>
 800522a:	4603      	mov	r3, r0
 800522c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0c5      	beq.n	80051c0 <dir_find+0x24>
 8005234:	e002      	b.n	800523c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800523a:	bf00      	nop

	return res;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005254:	2101      	movs	r1, #1
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ff1a 	bl	8005090 <dir_alloc>
 800525c:	4603      	mov	r3, r0
 800525e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11c      	bne.n	80052a0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4619      	mov	r1, r3
 800526c:	68b8      	ldr	r0, [r7, #8]
 800526e:	f7ff f9d1 	bl	8004614 <move_window>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	2220      	movs	r2, #32
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe ffb7 	bl	80041f8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a18      	ldr	r0, [r3, #32]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3324      	adds	r3, #36	@ 0x24
 8005292:	220b      	movs	r2, #11
 8005294:	4619      	mov	r1, r3
 8005296:	f7fe ff8e 	bl	80041b6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2201      	movs	r2, #1
 800529e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3324      	adds	r3, #36	@ 0x24
 80052c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80052c2:	220b      	movs	r2, #11
 80052c4:	2120      	movs	r1, #32
 80052c6:	68b8      	ldr	r0, [r7, #8]
 80052c8:	f7fe ff96 	bl	80041f8 <mem_set>
	si = i = 0; ni = 8;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	2308      	movs	r3, #8
 80052d6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	61fa      	str	r2, [r7, #28]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4413      	add	r3, r2
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80052e6:	7efb      	ldrb	r3, [r7, #27]
 80052e8:	2b20      	cmp	r3, #32
 80052ea:	d94e      	bls.n	800538a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80052ec:	7efb      	ldrb	r3, [r7, #27]
 80052ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80052f0:	d006      	beq.n	8005300 <create_name+0x54>
 80052f2:	7efb      	ldrb	r3, [r7, #27]
 80052f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80052f6:	d110      	bne.n	800531a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80052f8:	e002      	b.n	8005300 <create_name+0x54>
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3301      	adds	r3, #1
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	4413      	add	r3, r2
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b2f      	cmp	r3, #47	@ 0x2f
 800530a:	d0f6      	beq.n	80052fa <create_name+0x4e>
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b5c      	cmp	r3, #92	@ 0x5c
 8005316:	d0f0      	beq.n	80052fa <create_name+0x4e>
			break;
 8005318:	e038      	b.n	800538c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800531a:	7efb      	ldrb	r3, [r7, #27]
 800531c:	2b2e      	cmp	r3, #46	@ 0x2e
 800531e:	d003      	beq.n	8005328 <create_name+0x7c>
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	429a      	cmp	r2, r3
 8005326:	d30c      	bcc.n	8005342 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b0b      	cmp	r3, #11
 800532c:	d002      	beq.n	8005334 <create_name+0x88>
 800532e:	7efb      	ldrb	r3, [r7, #27]
 8005330:	2b2e      	cmp	r3, #46	@ 0x2e
 8005332:	d001      	beq.n	8005338 <create_name+0x8c>
 8005334:	2306      	movs	r3, #6
 8005336:	e044      	b.n	80053c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005338:	2308      	movs	r3, #8
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	230b      	movs	r3, #11
 800533e:	617b      	str	r3, [r7, #20]
			continue;
 8005340:	e022      	b.n	8005388 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005342:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da04      	bge.n	8005354 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800534a:	7efb      	ldrb	r3, [r7, #27]
 800534c:	3b80      	subs	r3, #128	@ 0x80
 800534e:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <create_name+0x120>)
 8005350:	5cd3      	ldrb	r3, [r2, r3]
 8005352:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005354:	7efb      	ldrb	r3, [r7, #27]
 8005356:	4619      	mov	r1, r3
 8005358:	481d      	ldr	r0, [pc, #116]	@ (80053d0 <create_name+0x124>)
 800535a:	f7fe ff8f 	bl	800427c <chk_chr>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <create_name+0xbc>
 8005364:	2306      	movs	r3, #6
 8005366:	e02c      	b.n	80053c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005368:	7efb      	ldrb	r3, [r7, #27]
 800536a:	2b60      	cmp	r3, #96	@ 0x60
 800536c:	d905      	bls.n	800537a <create_name+0xce>
 800536e:	7efb      	ldrb	r3, [r7, #27]
 8005370:	2b7a      	cmp	r3, #122	@ 0x7a
 8005372:	d802      	bhi.n	800537a <create_name+0xce>
 8005374:	7efb      	ldrb	r3, [r7, #27]
 8005376:	3b20      	subs	r3, #32
 8005378:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	613a      	str	r2, [r7, #16]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	4413      	add	r3, r2
 8005384:	7efa      	ldrb	r2, [r7, #27]
 8005386:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005388:	e7a6      	b.n	80052d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800538a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	441a      	add	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d101      	bne.n	80053a0 <create_name+0xf4>
 800539c:	2306      	movs	r3, #6
 800539e:	e010      	b.n	80053c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2be5      	cmp	r3, #229	@ 0xe5
 80053a6:	d102      	bne.n	80053ae <create_name+0x102>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2205      	movs	r2, #5
 80053ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80053ae:	7efb      	ldrb	r3, [r7, #27]
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d801      	bhi.n	80053b8 <create_name+0x10c>
 80053b4:	2204      	movs	r2, #4
 80053b6:	e000      	b.n	80053ba <create_name+0x10e>
 80053b8:	2200      	movs	r2, #0
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	330b      	adds	r3, #11
 80053be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80053c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	08006e80 	.word	0x08006e80
 80053d0:	08006e2c 	.word	0x08006e2c

080053d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053e8:	e002      	b.n	80053f0 <follow_path+0x1c>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	603b      	str	r3, [r7, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80053f6:	d0f8      	beq.n	80053ea <follow_path+0x16>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b5c      	cmp	r3, #92	@ 0x5c
 80053fe:	d0f4      	beq.n	80053ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2200      	movs	r2, #0
 8005404:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b1f      	cmp	r3, #31
 800540c:	d80a      	bhi.n	8005424 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2280      	movs	r2, #128	@ 0x80
 8005412:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005416:	2100      	movs	r1, #0
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fcda 	bl	8004dd2 <dir_sdi>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
 8005422:	e048      	b.n	80054b6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005424:	463b      	mov	r3, r7
 8005426:	4619      	mov	r1, r3
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff ff3f 	bl	80052ac <create_name>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d139      	bne.n	80054ac <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff feaf 	bl	800519c <dir_find>
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005448:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00a      	beq.n	8005466 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005450:	7dfb      	ldrb	r3, [r7, #23]
 8005452:	2b04      	cmp	r3, #4
 8005454:	d12c      	bne.n	80054b0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005456:	7afb      	ldrb	r3, [r7, #11]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d127      	bne.n	80054b0 <follow_path+0xdc>
 8005460:	2305      	movs	r3, #5
 8005462:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005464:	e024      	b.n	80054b0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	2b00      	cmp	r3, #0
 800546e:	d121      	bne.n	80054b4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	799b      	ldrb	r3, [r3, #6]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800547c:	2305      	movs	r3, #5
 800547e:	75fb      	strb	r3, [r7, #23]
 8005480:	e019      	b.n	80054b6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	8992      	ldrh	r2, [r2, #12]
 8005490:	fbb3 f0f2 	udiv	r0, r3, r2
 8005494:	fb00 f202 	mul.w	r2, r0, r2
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	440b      	add	r3, r1
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f7ff fe3d 	bl	800511e <ld_clust>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80054aa:	e7bb      	b.n	8005424 <follow_path+0x50>
			if (res != FR_OK) break;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <follow_path+0xe2>
				break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054b4:	bf00      	nop
			}
		}
	}

	return res;
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
 80054cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d031      	beq.n	800553a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e002      	b.n	80054e4 <get_ldnumber+0x24>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	3301      	adds	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d903      	bls.n	80054f4 <get_ldnumber+0x34>
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80054f2:	d1f4      	bne.n	80054de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b3a      	cmp	r3, #58	@ 0x3a
 80054fa:	d11c      	bne.n	8005536 <get_ldnumber+0x76>
			tp = *path;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	3b30      	subs	r3, #48	@ 0x30
 800550c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b09      	cmp	r3, #9
 8005512:	d80e      	bhi.n	8005532 <get_ldnumber+0x72>
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	429a      	cmp	r2, r3
 800551a:	d10a      	bne.n	8005532 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d107      	bne.n	8005532 <get_ldnumber+0x72>
					vol = (int)i;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	3301      	adds	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	e002      	b.n	800553c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800553a:	693b      	ldr	r3, [r7, #16]
}
 800553c:	4618      	mov	r0, r3
 800553e:	371c      	adds	r7, #28
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	70da      	strb	r2, [r3, #3]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 32ff 	mov.w	r2, #4294967295
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff f856 	bl	8004614 <move_window>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <check_fs+0x2a>
 800556e:	2304      	movs	r3, #4
 8005570:	e038      	b.n	80055e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	3334      	adds	r3, #52	@ 0x34
 8005576:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe fd98 	bl	80040b0 <ld_word>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <check_fs+0x48>
 800558c:	2303      	movs	r3, #3
 800558e:	e029      	b.n	80055e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005596:	2be9      	cmp	r3, #233	@ 0xe9
 8005598:	d009      	beq.n	80055ae <check_fs+0x66>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80055a0:	2beb      	cmp	r3, #235	@ 0xeb
 80055a2:	d11e      	bne.n	80055e2 <check_fs+0x9a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80055aa:	2b90      	cmp	r3, #144	@ 0x90
 80055ac:	d119      	bne.n	80055e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3334      	adds	r3, #52	@ 0x34
 80055b2:	3336      	adds	r3, #54	@ 0x36
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fd94 	bl	80040e2 <ld_dword>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055c0:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <check_fs+0xa4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d101      	bne.n	80055ca <check_fs+0x82>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e00c      	b.n	80055e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3334      	adds	r3, #52	@ 0x34
 80055ce:	3352      	adds	r3, #82	@ 0x52
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fd86 	bl	80040e2 <ld_dword>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4a05      	ldr	r2, [pc, #20]	@ (80055f0 <check_fs+0xa8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d101      	bne.n	80055e2 <check_fs+0x9a>
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80055e2:	2302      	movs	r3, #2
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	00544146 	.word	0x00544146
 80055f0:	33544146 	.word	0x33544146

080055f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b096      	sub	sp, #88	@ 0x58
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	4613      	mov	r3, r2
 8005600:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7ff ff59 	bl	80054c0 <get_ldnumber>
 800560e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	da01      	bge.n	800561a <find_volume+0x26>
 8005616:	230b      	movs	r3, #11
 8005618:	e262      	b.n	8005ae0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800561a:	4a9f      	ldr	r2, [pc, #636]	@ (8005898 <find_volume+0x2a4>)
 800561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005622:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <find_volume+0x3a>
 800562a:	230c      	movs	r3, #12
 800562c:	e258      	b.n	8005ae0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005632:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01a      	beq.n	800567a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fe fc93 	bl	8003f74 <disk_status>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005654:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10c      	bne.n	800567a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005660:	79fb      	ldrb	r3, [r7, #7]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d007      	beq.n	8005676 <find_volume+0x82>
 8005666:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005672:	230a      	movs	r3, #10
 8005674:	e234      	b.n	8005ae0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8005676:	2300      	movs	r3, #0
 8005678:	e232      	b.n	8005ae0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	2200      	movs	r2, #0
 800567e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005682:	b2da      	uxtb	r2, r3
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe fc8b 	bl	8003fa8 <disk_initialize>
 8005692:	4603      	mov	r3, r0
 8005694:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005698:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80056a4:	2303      	movs	r3, #3
 80056a6:	e21b      	b.n	8005ae0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <find_volume+0xca>
 80056ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80056ba:	230a      	movs	r3, #10
 80056bc:	e210      	b.n	8005ae0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	7858      	ldrb	r0, [r3, #1]
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	330c      	adds	r3, #12
 80056c6:	461a      	mov	r2, r3
 80056c8:	2102      	movs	r1, #2
 80056ca:	f7fe fcd3 	bl	8004074 <disk_ioctl>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <find_volume+0xe4>
 80056d4:	2301      	movs	r3, #1
 80056d6:	e203      	b.n	8005ae0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80056d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056da:	899b      	ldrh	r3, [r3, #12]
 80056dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056e0:	d80d      	bhi.n	80056fe <find_volume+0x10a>
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	899b      	ldrh	r3, [r3, #12]
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ea:	d308      	bcc.n	80056fe <find_volume+0x10a>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	899b      	ldrh	r3, [r3, #12]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f4:	899b      	ldrh	r3, [r3, #12]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	4013      	ands	r3, r2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <find_volume+0x10e>
 80056fe:	2301      	movs	r3, #1
 8005700:	e1ee      	b.n	8005ae0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005706:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005708:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800570a:	f7ff ff1d 	bl	8005548 <check_fs>
 800570e:	4603      	mov	r3, r0
 8005710:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005718:	2b02      	cmp	r3, #2
 800571a:	d149      	bne.n	80057b0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800571c:	2300      	movs	r3, #0
 800571e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005720:	e01e      	b.n	8005760 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005724:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005730:	4413      	add	r3, r2
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	3304      	adds	r3, #4
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <find_volume+0x158>
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	3308      	adds	r3, #8
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fccd 	bl	80040e2 <ld_dword>
 8005748:	4602      	mov	r2, r0
 800574a:	e000      	b.n	800574e <find_volume+0x15a>
 800574c:	2200      	movs	r2, #0
 800574e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	3358      	adds	r3, #88	@ 0x58
 8005754:	443b      	add	r3, r7
 8005756:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800575a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575c:	3301      	adds	r3, #1
 800575e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005762:	2b03      	cmp	r3, #3
 8005764:	d9dd      	bls.n	8005722 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005766:	2300      	movs	r3, #0
 8005768:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800576a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <find_volume+0x182>
 8005770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005772:	3b01      	subs	r3, #1
 8005774:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3358      	adds	r3, #88	@ 0x58
 800577c:	443b      	add	r3, r7
 800577e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005782:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <find_volume+0x1a2>
 800578a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800578c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800578e:	f7ff fedb 	bl	8005548 <check_fs>
 8005792:	4603      	mov	r3, r0
 8005794:	e000      	b.n	8005798 <find_volume+0x1a4>
 8005796:	2303      	movs	r3, #3
 8005798:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800579c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d905      	bls.n	80057b0 <find_volume+0x1bc>
 80057a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057a6:	3301      	adds	r3, #1
 80057a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d9e2      	bls.n	8005776 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d101      	bne.n	80057bc <find_volume+0x1c8>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e191      	b.n	8005ae0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d901      	bls.n	80057c8 <find_volume+0x1d4>
 80057c4:	230d      	movs	r3, #13
 80057c6:	e18b      	b.n	8005ae0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	3334      	adds	r3, #52	@ 0x34
 80057cc:	330b      	adds	r3, #11
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fe fc6e 	bl	80040b0 <ld_word>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	899b      	ldrh	r3, [r3, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d001      	beq.n	80057e4 <find_volume+0x1f0>
 80057e0:	230d      	movs	r3, #13
 80057e2:	e17d      	b.n	8005ae0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	3334      	adds	r3, #52	@ 0x34
 80057e8:	3316      	adds	r3, #22
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fc60 	bl	80040b0 <ld_word>
 80057f0:	4603      	mov	r3, r0
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80057f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <find_volume+0x214>
 80057fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fc:	3334      	adds	r3, #52	@ 0x34
 80057fe:	3324      	adds	r3, #36	@ 0x24
 8005800:	4618      	mov	r0, r3
 8005802:	f7fe fc6e 	bl	80040e2 <ld_dword>
 8005806:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800580c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800580e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005810:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	789b      	ldrb	r3, [r3, #2]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d005      	beq.n	800582c <find_volume+0x238>
 8005820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005822:	789b      	ldrb	r3, [r3, #2]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d001      	beq.n	800582c <find_volume+0x238>
 8005828:	230d      	movs	r3, #13
 800582a:	e159      	b.n	8005ae0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	461a      	mov	r2, r3
 8005832:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005834:	fb02 f303 	mul.w	r3, r2, r3
 8005838:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005840:	461a      	mov	r2, r3
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	895b      	ldrh	r3, [r3, #10]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <find_volume+0x26c>
 800584e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005850:	895b      	ldrh	r3, [r3, #10]
 8005852:	461a      	mov	r2, r3
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	895b      	ldrh	r3, [r3, #10]
 8005858:	3b01      	subs	r3, #1
 800585a:	4013      	ands	r3, r2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <find_volume+0x270>
 8005860:	230d      	movs	r3, #13
 8005862:	e13d      	b.n	8005ae0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	3334      	adds	r3, #52	@ 0x34
 8005868:	3311      	adds	r3, #17
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fc20 	bl	80040b0 <ld_word>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	891b      	ldrh	r3, [r3, #8]
 800587c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800587e:	8992      	ldrh	r2, [r2, #12]
 8005880:	0952      	lsrs	r2, r2, #5
 8005882:	b292      	uxth	r2, r2
 8005884:	fbb3 f1f2 	udiv	r1, r3, r2
 8005888:	fb01 f202 	mul.w	r2, r1, r2
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <find_volume+0x2a8>
 8005894:	230d      	movs	r3, #13
 8005896:	e123      	b.n	8005ae0 <find_volume+0x4ec>
 8005898:	20002670 	.word	0x20002670

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	3334      	adds	r3, #52	@ 0x34
 80058a0:	3313      	adds	r3, #19
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fe fc04 	bl	80040b0 <ld_word>
 80058a8:	4603      	mov	r3, r0
 80058aa:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <find_volume+0x2cc>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	3334      	adds	r3, #52	@ 0x34
 80058b6:	3320      	adds	r3, #32
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fc12 	bl	80040e2 <ld_dword>
 80058be:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	3334      	adds	r3, #52	@ 0x34
 80058c4:	330e      	adds	r3, #14
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fbf2 	bl	80040b0 <ld_word>
 80058cc:	4603      	mov	r3, r0
 80058ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058d0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <find_volume+0x2e6>
 80058d6:	230d      	movs	r3, #13
 80058d8:	e102      	b.n	8005ae0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058de:	4413      	add	r3, r2
 80058e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058e2:	8911      	ldrh	r1, [r2, #8]
 80058e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058e6:	8992      	ldrh	r2, [r2, #12]
 80058e8:	0952      	lsrs	r2, r2, #5
 80058ea:	b292      	uxth	r2, r2
 80058ec:	fbb1 f2f2 	udiv	r2, r1, r2
 80058f0:	b292      	uxth	r2, r2
 80058f2:	4413      	add	r3, r2
 80058f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d201      	bcs.n	8005902 <find_volume+0x30e>
 80058fe:	230d      	movs	r3, #13
 8005900:	e0ee      	b.n	8005ae0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800590a:	8952      	ldrh	r2, [r2, #10]
 800590c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <find_volume+0x328>
 8005918:	230d      	movs	r3, #13
 800591a:	e0e1      	b.n	8005ae0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800591c:	2303      	movs	r3, #3
 800591e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005928:	4293      	cmp	r3, r2
 800592a:	d802      	bhi.n	8005932 <find_volume+0x33e>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005938:	4293      	cmp	r3, r2
 800593a:	d802      	bhi.n	8005942 <find_volume+0x34e>
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	1c9a      	adds	r2, r3, #2
 8005946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005948:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800594e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005950:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005952:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005954:	441a      	add	r2, r3
 8005956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800595a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	441a      	add	r2, r3
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8005964:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005968:	2b03      	cmp	r3, #3
 800596a:	d11e      	bne.n	80059aa <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800596c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596e:	3334      	adds	r3, #52	@ 0x34
 8005970:	332a      	adds	r3, #42	@ 0x2a
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe fb9c 	bl	80040b0 <ld_word>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <find_volume+0x38e>
 800597e:	230d      	movs	r3, #13
 8005980:	e0ae      	b.n	8005ae0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005984:	891b      	ldrh	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <find_volume+0x39a>
 800598a:	230d      	movs	r3, #13
 800598c:	e0a8      	b.n	8005ae0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	3334      	adds	r3, #52	@ 0x34
 8005992:	332c      	adds	r3, #44	@ 0x2c
 8005994:	4618      	mov	r0, r3
 8005996:	f7fe fba4 	bl	80040e2 <ld_dword>
 800599a:	4602      	mov	r2, r0
 800599c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059a8:	e01f      	b.n	80059ea <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	891b      	ldrh	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <find_volume+0x3c2>
 80059b2:	230d      	movs	r3, #13
 80059b4:	e094      	b.n	8005ae0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059bc:	441a      	add	r2, r3
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <find_volume+0x3de>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	e00a      	b.n	80059e8 <find_volume+0x3f4>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	085a      	lsrs	r2, r3, #1
 80059de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059e8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	899b      	ldrh	r3, [r3, #12]
 80059f2:	4619      	mov	r1, r3
 80059f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059f6:	440b      	add	r3, r1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059fc:	8989      	ldrh	r1, [r1, #12]
 80059fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d201      	bcs.n	8005a0a <find_volume+0x416>
 8005a06:	230d      	movs	r3, #13
 8005a08:	e06a      	b.n	8005ae0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	615a      	str	r2, [r3, #20]
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005a20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a24:	2b03      	cmp	r3, #3
 8005a26:	d149      	bne.n	8005abc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	3334      	adds	r3, #52	@ 0x34
 8005a2c:	3330      	adds	r3, #48	@ 0x30
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fb3e 	bl	80040b0 <ld_word>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d140      	bne.n	8005abc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a42:	f7fe fde7 	bl	8004614 <move_window>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d137      	bne.n	8005abc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	2200      	movs	r2, #0
 8005a50:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a54:	3334      	adds	r3, #52	@ 0x34
 8005a56:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe fb28 	bl	80040b0 <ld_word>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d127      	bne.n	8005abc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6e:	3334      	adds	r3, #52	@ 0x34
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fe fb36 	bl	80040e2 <ld_dword>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae8 <find_volume+0x4f4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d11e      	bne.n	8005abc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a80:	3334      	adds	r3, #52	@ 0x34
 8005a82:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe fb2b 	bl	80040e2 <ld_dword>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a17      	ldr	r2, [pc, #92]	@ (8005aec <find_volume+0x4f8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d113      	bne.n	8005abc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	3334      	adds	r3, #52	@ 0x34
 8005a98:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe fb20 	bl	80040e2 <ld_dword>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	3334      	adds	r3, #52	@ 0x34
 8005aac:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7fe fb16 	bl	80040e2 <ld_dword>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005ac2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <find_volume+0x4fc>)
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <find_volume+0x4fc>)
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <find_volume+0x4fc>)
 8005ad2:	881a      	ldrh	r2, [r3, #0]
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ad8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ada:	f7fe fd33 	bl	8004544 <clear_lock>
#endif
	return FR_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3758      	adds	r7, #88	@ 0x58
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	41615252 	.word	0x41615252
 8005aec:	61417272 	.word	0x61417272
 8005af0:	20002674 	.word	0x20002674

08005af4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005afe:	2309      	movs	r3, #9
 8005b00:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01c      	beq.n	8005b42 <validate+0x4e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <validate+0x4e>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <validate+0x4e>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	889a      	ldrh	r2, [r3, #4]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	88db      	ldrh	r3, [r3, #6]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d10c      	bne.n	8005b42 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe fa20 	bl	8003f74 <disk_status>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <validate+0x4e>
			res = FR_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <validate+0x5a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	e000      	b.n	8005b50 <validate+0x5c>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	6013      	str	r3, [r2, #0]
	return res;
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b72:	f107 0310 	add.w	r3, r7, #16
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fca2 	bl	80054c0 <get_ldnumber>
 8005b7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <f_mount+0x28>
 8005b84:	230b      	movs	r3, #11
 8005b86:	e02b      	b.n	8005be0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b88:	4a17      	ldr	r2, [pc, #92]	@ (8005be8 <f_mount+0x88>)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b98:	69b8      	ldr	r0, [r7, #24]
 8005b9a:	f7fe fcd3 	bl	8004544 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	490d      	ldr	r1, [pc, #52]	@ (8005be8 <f_mount+0x88>)
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <f_mount+0x66>
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d001      	beq.n	8005bca <f_mount+0x6a>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e00a      	b.n	8005be0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005bca:	f107 010c 	add.w	r1, r7, #12
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f7ff fd0d 	bl	80055f4 <find_volume>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20002670 	.word	0x20002670

08005bec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b098      	sub	sp, #96	@ 0x60
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <f_open+0x18>
 8005c00:	2309      	movs	r3, #9
 8005c02:	e1b7      	b.n	8005f74 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005c0c:	79fa      	ldrb	r2, [r7, #7]
 8005c0e:	f107 0110 	add.w	r1, r7, #16
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fcec 	bl	80055f4 <find_volume>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005c22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f040 819b 	bne.w	8005f62 <f_open+0x376>
		dj.obj.fs = fs;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fbcb 	bl	80053d4 <follow_path>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d118      	bne.n	8005c7e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da03      	bge.n	8005c5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c56:	2306      	movs	r3, #6
 8005c58:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005c5c:	e00f      	b.n	8005c7e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	bf8c      	ite	hi
 8005c64:	2301      	movhi	r3, #1
 8005c66:	2300      	movls	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f107 0314 	add.w	r3, r7, #20
 8005c70:	4611      	mov	r1, r2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fb1e 	bl	80042b4 <chk_lock>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	f003 031c 	and.w	r3, r3, #28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d07f      	beq.n	8005d88 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005c88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d017      	beq.n	8005cc0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d10e      	bne.n	8005cb6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005c98:	f7fe fb68 	bl	800436c <enq_lock>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <f_open+0xc4>
 8005ca2:	f107 0314 	add.w	r3, r7, #20
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff facd 	bl	8005246 <dir_register>
 8005cac:	4603      	mov	r3, r0
 8005cae:	e000      	b.n	8005cb2 <f_open+0xc6>
 8005cb0:	2312      	movs	r3, #18
 8005cb2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	f043 0308 	orr.w	r3, r3, #8
 8005cbc:	71fb      	strb	r3, [r7, #7]
 8005cbe:	e010      	b.n	8005ce2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005cc0:	7ebb      	ldrb	r3, [r7, #26]
 8005cc2:	f003 0311 	and.w	r3, r3, #17
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <f_open+0xe6>
					res = FR_DENIED;
 8005cca:	2307      	movs	r3, #7
 8005ccc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005cd0:	e007      	b.n	8005ce2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <f_open+0xf6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d168      	bne.n	8005dbc <f_open+0x1d0>
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	f003 0308 	and.w	r3, r3, #8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d063      	beq.n	8005dbc <f_open+0x1d0>
				dw = GET_FATTIME();
 8005cf4:	f7fe f8e0 	bl	8003eb8 <get_fattime>
 8005cf8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	330e      	adds	r3, #14
 8005cfe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fa2c 	bl	800415e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d08:	3316      	adds	r3, #22
 8005d0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fa26 	bl	800415e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d14:	330b      	adds	r3, #11
 8005d16:	2220      	movs	r2, #32
 8005d18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d1e:	4611      	mov	r1, r2
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff f9fc 	bl	800511e <ld_clust>
 8005d26:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fa14 	bl	800515c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d36:	331c      	adds	r3, #28
 8005d38:	2100      	movs	r1, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fa0f 	bl	800415e <st_dword>
					fs->wflag = 1;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2201      	movs	r2, #1
 8005d44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d037      	beq.n	8005dbc <f_open+0x1d0>
						dw = fs->winsect;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d50:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005d52:	f107 0314 	add.w	r3, r7, #20
 8005d56:	2200      	movs	r2, #0
 8005d58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fe ff04 	bl	8004b68 <remove_chain>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005d66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d126      	bne.n	8005dbc <f_open+0x1d0>
							res = move_window(fs, dw);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fc4e 	bl	8004614 <move_window>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d82:	3a01      	subs	r2, #1
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e019      	b.n	8005dbc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d115      	bne.n	8005dbc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d90:	7ebb      	ldrb	r3, [r7, #26]
 8005d92:	f003 0310 	and.w	r3, r3, #16
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005d9a:	2304      	movs	r3, #4
 8005d9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005da0:	e00c      	b.n	8005dbc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	f003 0302 	and.w	r3, r3, #2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <f_open+0x1d0>
 8005dac:	7ebb      	ldrb	r3, [r7, #26]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <f_open+0x1d0>
						res = FR_DENIED;
 8005db6:	2307      	movs	r3, #7
 8005db8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d126      	bne.n	8005e12 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005dce:	79fb      	ldrb	r3, [r7, #7]
 8005dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dd4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	bf8c      	ite	hi
 8005dea:	2301      	movhi	r3, #1
 8005dec:	2300      	movls	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	f107 0314 	add.w	r3, r7, #20
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fad9 	bl	80043b0 <inc_lock>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <f_open+0x226>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005e12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 80a3 	bne.w	8005f62 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f97b 	bl	800511e <ld_clust>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	331c      	adds	r3, #28
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe f955 	bl	80040e2 <ld_dword>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	88da      	ldrh	r2, [r3, #6]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	79fa      	ldrb	r2, [r7, #7]
 8005e56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3330      	adds	r3, #48	@ 0x30
 8005e6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe f9bf 	bl	80041f8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d06e      	beq.n	8005f62 <f_open+0x376>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d06a      	beq.n	8005f62 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	895b      	ldrh	r3, [r3, #10]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	899b      	ldrh	r3, [r3, #12]
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eb0:	e016      	b.n	8005ee0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fc69 	bl	800478e <get_fat>
 8005ebc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005ebe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d802      	bhi.n	8005eca <f_open+0x2de>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed0:	d102      	bne.n	8005ed8 <f_open+0x2ec>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d103      	bne.n	8005ef0 <f_open+0x304>
 8005ee8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d8e0      	bhi.n	8005eb2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ef4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d131      	bne.n	8005f62 <f_open+0x376>
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	899b      	ldrh	r3, [r3, #12]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f06:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f0a:	fb01 f202 	mul.w	r2, r1, r2
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d026      	beq.n	8005f62 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe fc19 	bl	8004750 <clust2sect>
 8005f1e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d103      	bne.n	8005f2e <f_open+0x342>
						res = FR_INT_ERR;
 8005f26:	2302      	movs	r3, #2
 8005f28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005f2c:	e019      	b.n	8005f62 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	899b      	ldrh	r3, [r3, #12]
 8005f32:	461a      	mov	r2, r3
 8005f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f36:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	7858      	ldrb	r0, [r3, #1]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a1a      	ldr	r2, [r3, #32]
 8005f50:	2301      	movs	r3, #1
 8005f52:	f7fe f84f 	bl	8003ff4 <disk_read>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <f_open+0x376>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <f_open+0x384>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3760      	adds	r7, #96	@ 0x60
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08c      	sub	sp, #48	@ 0x30
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f107 0210 	add.w	r2, r7, #16
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff fda9 	bl	8005af4 <validate>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <f_write+0x44>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	7d5b      	ldrb	r3, [r3, #21]
 8005fb4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <f_write+0x4a>
 8005fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fc4:	e16a      	b.n	800629c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	7d1b      	ldrb	r3, [r3, #20]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <f_write+0x5a>
 8005fd2:	2307      	movs	r3, #7
 8005fd4:	e162      	b.n	800629c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	441a      	add	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	f080 814c 	bcs.w	8006280 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	43db      	mvns	r3, r3
 8005fee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005ff0:	e146      	b.n	8006280 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	8992      	ldrh	r2, [r2, #12]
 8005ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ffe:	fb01 f202 	mul.w	r2, r1, r2
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 80f1 	bne.w	80061ec <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	8992      	ldrh	r2, [r2, #12]
 8006012:	fbb3 f3f2 	udiv	r3, r3, r2
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	8952      	ldrh	r2, [r2, #10]
 800601a:	3a01      	subs	r2, #1
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d143      	bne.n	80060ae <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006036:	2b00      	cmp	r3, #0
 8006038:	d11a      	bne.n	8006070 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2100      	movs	r1, #0
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fdf7 	bl	8004c32 <create_chain>
 8006044:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006046:	e013      	b.n	8006070 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f7fe fe83 	bl	8004d62 <clmt_clust>
 800605c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800605e:	e007      	b.n	8006070 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4619      	mov	r1, r3
 8006068:	4610      	mov	r0, r2
 800606a:	f7fe fde2 	bl	8004c32 <create_chain>
 800606e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8109 	beq.w	800628a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800607a:	2b01      	cmp	r3, #1
 800607c:	d104      	bne.n	8006088 <f_write+0x10c>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2202      	movs	r2, #2
 8006082:	755a      	strb	r2, [r3, #21]
 8006084:	2302      	movs	r3, #2
 8006086:	e109      	b.n	800629c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	d104      	bne.n	800609a <f_write+0x11e>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	755a      	strb	r2, [r3, #21]
 8006096:	2301      	movs	r3, #1
 8006098:	e100      	b.n	800629c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800609e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d102      	bne.n	80060ae <f_write+0x132>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	7d1b      	ldrb	r3, [r3, #20]
 80060b2:	b25b      	sxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	da18      	bge.n	80060ea <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	7858      	ldrb	r0, [r3, #1]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1a      	ldr	r2, [r3, #32]
 80060c6:	2301      	movs	r3, #1
 80060c8:	f7fd ffb4 	bl	8004034 <disk_write>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <f_write+0x160>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	755a      	strb	r2, [r3, #21]
 80060d8:	2301      	movs	r3, #1
 80060da:	e0df      	b.n	800629c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	7d1b      	ldrb	r3, [r3, #20]
 80060e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fe fb2c 	bl	8004750 <clust2sect>
 80060f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <f_write+0x18e>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2202      	movs	r2, #2
 8006104:	755a      	strb	r2, [r3, #21]
 8006106:	2302      	movs	r3, #2
 8006108:	e0c8      	b.n	800629c <f_write+0x320>
			sect += csect;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	4413      	add	r3, r2
 8006110:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	899b      	ldrh	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	fbb3 f3f2 	udiv	r3, r3, r2
 800611e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d043      	beq.n	80061ae <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	4413      	add	r3, r2
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	8952      	ldrh	r2, [r2, #10]
 8006130:	4293      	cmp	r3, r2
 8006132:	d905      	bls.n	8006140 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	895b      	ldrh	r3, [r3, #10]
 8006138:	461a      	mov	r2, r3
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	7858      	ldrb	r0, [r3, #1]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	69f9      	ldr	r1, [r7, #28]
 800614a:	f7fd ff73 	bl	8004034 <disk_write>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <f_write+0x1e2>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2201      	movs	r2, #1
 8006158:	755a      	strb	r2, [r3, #21]
 800615a:	2301      	movs	r3, #1
 800615c:	e09e      	b.n	800629c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	429a      	cmp	r2, r3
 800616a:	d918      	bls.n	800619e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	8992      	ldrh	r2, [r2, #12]
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	18d1      	adds	r1, r2, r3
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	899b      	ldrh	r3, [r3, #12]
 800618a:	461a      	mov	r2, r3
 800618c:	f7fe f813 	bl	80041b6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	7d1b      	ldrb	r3, [r3, #20]
 8006194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	899b      	ldrh	r3, [r3, #12]
 80061a2:	461a      	mov	r2, r3
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80061ac:	e04b      	b.n	8006246 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d016      	beq.n	80061e6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	699a      	ldr	r2, [r3, #24]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d210      	bcs.n	80061e6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	7858      	ldrb	r0, [r3, #1]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061ce:	2301      	movs	r3, #1
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	f7fd ff0f 	bl	8003ff4 <disk_read>
 80061d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2201      	movs	r2, #1
 80061e0:	755a      	strb	r2, [r3, #21]
 80061e2:	2301      	movs	r3, #1
 80061e4:	e05a      	b.n	800629c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	4618      	mov	r0, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	8992      	ldrh	r2, [r2, #12]
 80061fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80061fe:	fb01 f202 	mul.w	r2, r1, r2
 8006202:	1a9b      	subs	r3, r3, r2
 8006204:	1ac3      	subs	r3, r0, r3
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d901      	bls.n	8006214 <f_write+0x298>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	8992      	ldrh	r2, [r2, #12]
 8006222:	fbb3 f0f2 	udiv	r0, r3, r2
 8006226:	fb00 f202 	mul.w	r2, r0, r2
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	440b      	add	r3, r1
 800622e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd ffbf 	bl	80041b6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	7d1b      	ldrb	r3, [r3, #20]
 800623c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624a:	4413      	add	r3, r2
 800624c:	61fb      	str	r3, [r7, #28]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	441a      	add	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	619a      	str	r2, [r3, #24]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	429a      	cmp	r2, r3
 8006264:	bf38      	it	cc
 8006266:	461a      	movcc	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	60da      	str	r2, [r3, #12]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	441a      	add	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f aeb5 	bne.w	8005ff2 <f_write+0x76>
 8006288:	e000      	b.n	800628c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800628a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	7d1b      	ldrb	r3, [r3, #20]
 8006290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006294:	b2da      	uxtb	r2, r3
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	@ 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f107 0208 	add.w	r2, r7, #8
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fc1d 	bl	8005af4 <validate>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d168      	bne.n	8006396 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7d1b      	ldrb	r3, [r3, #20]
 80062c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d062      	beq.n	8006396 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	7d1b      	ldrb	r3, [r3, #20]
 80062d4:	b25b      	sxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	da15      	bge.n	8006306 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	7858      	ldrb	r0, [r3, #1]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	2301      	movs	r3, #1
 80062ea:	f7fd fea3 	bl	8004034 <disk_write>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <f_sync+0x54>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e04f      	b.n	8006398 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7d1b      	ldrb	r3, [r3, #20]
 80062fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006300:	b2da      	uxtb	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006306:	f7fd fdd7 	bl	8003eb8 <get_fattime>
 800630a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7fe f97d 	bl	8004614 <move_window>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d138      	bne.n	8006396 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	330b      	adds	r3, #11
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	330b      	adds	r3, #11
 8006334:	f042 0220 	orr.w	r2, r2, #32
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	461a      	mov	r2, r3
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	f7fe ff08 	bl	800515c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f103 021c 	add.w	r2, r3, #28
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fd ff00 	bl	800415e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3316      	adds	r3, #22
 8006362:	6939      	ldr	r1, [r7, #16]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fd fefa 	bl	800415e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3312      	adds	r3, #18
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f7fd fed9 	bl	8004128 <st_word>
					fs->wflag = 1;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2201      	movs	r2, #1
 800637a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe f976 	bl	8004670 <sync_fs>
 8006384:	4603      	mov	r3, r0
 8006386:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7d1b      	ldrb	r3, [r3, #20]
 800638c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006390:	b2da      	uxtb	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006396:	7dfb      	ldrb	r3, [r7, #23]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff7b 	bl	80062a4 <f_sync>
 80063ae:	4603      	mov	r3, r0
 80063b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d118      	bne.n	80063ea <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f107 0208 	add.w	r2, r7, #8
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7ff fb97 	bl	8005af4 <validate>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10c      	bne.n	80063ea <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7fe f879 	bl	80044cc <dec_lock>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800640a:	4b1f      	ldr	r3, [pc, #124]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 800640c:	7a5b      	ldrb	r3, [r3, #9]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d131      	bne.n	8006478 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006414:	4b1c      	ldr	r3, [pc, #112]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 8006416:	7a5b      	ldrb	r3, [r3, #9]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	4b1a      	ldr	r3, [pc, #104]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 800641e:	2100      	movs	r1, #0
 8006420:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006422:	4b19      	ldr	r3, [pc, #100]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 8006424:	7a5b      	ldrb	r3, [r3, #9]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006432:	4b15      	ldr	r3, [pc, #84]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 8006434:	7a5b      	ldrb	r3, [r3, #9]
 8006436:	b2db      	uxtb	r3, r3
 8006438:	461a      	mov	r2, r3
 800643a:	4b13      	ldr	r3, [pc, #76]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 800643c:	4413      	add	r3, r2
 800643e:	79fa      	ldrb	r2, [r7, #7]
 8006440:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006442:	4b11      	ldr	r3, [pc, #68]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 8006444:	7a5b      	ldrb	r3, [r3, #9]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	b2d1      	uxtb	r1, r2
 800644c:	4a0e      	ldr	r2, [pc, #56]	@ (8006488 <FATFS_LinkDriverEx+0x94>)
 800644e:	7251      	strb	r1, [r2, #9]
 8006450:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006452:	7dbb      	ldrb	r3, [r7, #22]
 8006454:	3330      	adds	r3, #48	@ 0x30
 8006456:	b2da      	uxtb	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	3301      	adds	r3, #1
 8006460:	223a      	movs	r2, #58	@ 0x3a
 8006462:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	3302      	adds	r3, #2
 8006468:	222f      	movs	r2, #47	@ 0x2f
 800646a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3303      	adds	r3, #3
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006478:	7dfb      	ldrb	r3, [r7, #23]
}
 800647a:	4618      	mov	r0, r3
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20002698 	.word	0x20002698

0800648c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006496:	2200      	movs	r2, #0
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ffaa 	bl	80063f4 <FATFS_LinkDriverEx>
 80064a0:	4603      	mov	r3, r0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <siprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	b510      	push	{r4, lr}
 80064b0:	b09d      	sub	sp, #116	@ 0x74
 80064b2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064bc:	480a      	ldr	r0, [pc, #40]	@ (80064e8 <siprintf+0x3c>)
 80064be:	9107      	str	r1, [sp, #28]
 80064c0:	9104      	str	r1, [sp, #16]
 80064c2:	490a      	ldr	r1, [pc, #40]	@ (80064ec <siprintf+0x40>)
 80064c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	2400      	movs	r4, #0
 80064cc:	a902      	add	r1, sp, #8
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80064d4:	f000 f994 	bl	8006800 <_svfiprintf_r>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	701c      	strb	r4, [r3, #0]
 80064dc:	b01d      	add	sp, #116	@ 0x74
 80064de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064e2:	b003      	add	sp, #12
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000028 	.word	0x20000028
 80064ec:	ffff0208 	.word	0xffff0208

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <__errno>:
 8006500:	4b01      	ldr	r3, [pc, #4]	@ (8006508 <__errno+0x8>)
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000028 	.word	0x20000028

0800650c <__libc_init_array>:
 800650c:	b570      	push	{r4, r5, r6, lr}
 800650e:	4d0d      	ldr	r5, [pc, #52]	@ (8006544 <__libc_init_array+0x38>)
 8006510:	4c0d      	ldr	r4, [pc, #52]	@ (8006548 <__libc_init_array+0x3c>)
 8006512:	1b64      	subs	r4, r4, r5
 8006514:	10a4      	asrs	r4, r4, #2
 8006516:	2600      	movs	r6, #0
 8006518:	42a6      	cmp	r6, r4
 800651a:	d109      	bne.n	8006530 <__libc_init_array+0x24>
 800651c:	4d0b      	ldr	r5, [pc, #44]	@ (800654c <__libc_init_array+0x40>)
 800651e:	4c0c      	ldr	r4, [pc, #48]	@ (8006550 <__libc_init_array+0x44>)
 8006520:	f000 fc64 	bl	8006dec <_init>
 8006524:	1b64      	subs	r4, r4, r5
 8006526:	10a4      	asrs	r4, r4, #2
 8006528:	2600      	movs	r6, #0
 800652a:	42a6      	cmp	r6, r4
 800652c:	d105      	bne.n	800653a <__libc_init_array+0x2e>
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	f855 3b04 	ldr.w	r3, [r5], #4
 8006534:	4798      	blx	r3
 8006536:	3601      	adds	r6, #1
 8006538:	e7ee      	b.n	8006518 <__libc_init_array+0xc>
 800653a:	f855 3b04 	ldr.w	r3, [r5], #4
 800653e:	4798      	blx	r3
 8006540:	3601      	adds	r6, #1
 8006542:	e7f2      	b.n	800652a <__libc_init_array+0x1e>
 8006544:	08006f3c 	.word	0x08006f3c
 8006548:	08006f3c 	.word	0x08006f3c
 800654c:	08006f3c 	.word	0x08006f3c
 8006550:	08006f40 	.word	0x08006f40

08006554 <__retarget_lock_acquire_recursive>:
 8006554:	4770      	bx	lr

08006556 <__retarget_lock_release_recursive>:
 8006556:	4770      	bx	lr

08006558 <_free_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4605      	mov	r5, r0
 800655c:	2900      	cmp	r1, #0
 800655e:	d041      	beq.n	80065e4 <_free_r+0x8c>
 8006560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006564:	1f0c      	subs	r4, r1, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	18e4      	addlt	r4, r4, r3
 800656c:	f000 f8e0 	bl	8006730 <__malloc_lock>
 8006570:	4a1d      	ldr	r2, [pc, #116]	@ (80065e8 <_free_r+0x90>)
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	b933      	cbnz	r3, 8006584 <_free_r+0x2c>
 8006576:	6063      	str	r3, [r4, #4]
 8006578:	6014      	str	r4, [r2, #0]
 800657a:	4628      	mov	r0, r5
 800657c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006580:	f000 b8dc 	b.w	800673c <__malloc_unlock>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d908      	bls.n	800659a <_free_r+0x42>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	1821      	adds	r1, r4, r0
 800658c:	428b      	cmp	r3, r1
 800658e:	bf01      	itttt	eq
 8006590:	6819      	ldreq	r1, [r3, #0]
 8006592:	685b      	ldreq	r3, [r3, #4]
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	e7ed      	b.n	8006576 <_free_r+0x1e>
 800659a:	461a      	mov	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	b10b      	cbz	r3, 80065a4 <_free_r+0x4c>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d9fa      	bls.n	800659a <_free_r+0x42>
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	1850      	adds	r0, r2, r1
 80065a8:	42a0      	cmp	r0, r4
 80065aa:	d10b      	bne.n	80065c4 <_free_r+0x6c>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	4401      	add	r1, r0
 80065b0:	1850      	adds	r0, r2, r1
 80065b2:	4283      	cmp	r3, r0
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	d1e0      	bne.n	800657a <_free_r+0x22>
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	6053      	str	r3, [r2, #4]
 80065be:	4408      	add	r0, r1
 80065c0:	6010      	str	r0, [r2, #0]
 80065c2:	e7da      	b.n	800657a <_free_r+0x22>
 80065c4:	d902      	bls.n	80065cc <_free_r+0x74>
 80065c6:	230c      	movs	r3, #12
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	e7d6      	b.n	800657a <_free_r+0x22>
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	1821      	adds	r1, r4, r0
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf04      	itt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	6063      	str	r3, [r4, #4]
 80065da:	bf04      	itt	eq
 80065dc:	1809      	addeq	r1, r1, r0
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	6054      	str	r4, [r2, #4]
 80065e2:	e7ca      	b.n	800657a <_free_r+0x22>
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
 80065e6:	bf00      	nop
 80065e8:	200027e8 	.word	0x200027e8

080065ec <sbrk_aligned>:
 80065ec:	b570      	push	{r4, r5, r6, lr}
 80065ee:	4e0f      	ldr	r6, [pc, #60]	@ (800662c <sbrk_aligned+0x40>)
 80065f0:	460c      	mov	r4, r1
 80065f2:	6831      	ldr	r1, [r6, #0]
 80065f4:	4605      	mov	r5, r0
 80065f6:	b911      	cbnz	r1, 80065fe <sbrk_aligned+0x12>
 80065f8:	f000 fba4 	bl	8006d44 <_sbrk_r>
 80065fc:	6030      	str	r0, [r6, #0]
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 fb9f 	bl	8006d44 <_sbrk_r>
 8006606:	1c43      	adds	r3, r0, #1
 8006608:	d103      	bne.n	8006612 <sbrk_aligned+0x26>
 800660a:	f04f 34ff 	mov.w	r4, #4294967295
 800660e:	4620      	mov	r0, r4
 8006610:	bd70      	pop	{r4, r5, r6, pc}
 8006612:	1cc4      	adds	r4, r0, #3
 8006614:	f024 0403 	bic.w	r4, r4, #3
 8006618:	42a0      	cmp	r0, r4
 800661a:	d0f8      	beq.n	800660e <sbrk_aligned+0x22>
 800661c:	1a21      	subs	r1, r4, r0
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fb90 	bl	8006d44 <_sbrk_r>
 8006624:	3001      	adds	r0, #1
 8006626:	d1f2      	bne.n	800660e <sbrk_aligned+0x22>
 8006628:	e7ef      	b.n	800660a <sbrk_aligned+0x1e>
 800662a:	bf00      	nop
 800662c:	200027e4 	.word	0x200027e4

08006630 <_malloc_r>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	1ccd      	adds	r5, r1, #3
 8006636:	f025 0503 	bic.w	r5, r5, #3
 800663a:	3508      	adds	r5, #8
 800663c:	2d0c      	cmp	r5, #12
 800663e:	bf38      	it	cc
 8006640:	250c      	movcc	r5, #12
 8006642:	2d00      	cmp	r5, #0
 8006644:	4606      	mov	r6, r0
 8006646:	db01      	blt.n	800664c <_malloc_r+0x1c>
 8006648:	42a9      	cmp	r1, r5
 800664a:	d904      	bls.n	8006656 <_malloc_r+0x26>
 800664c:	230c      	movs	r3, #12
 800664e:	6033      	str	r3, [r6, #0]
 8006650:	2000      	movs	r0, #0
 8006652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800672c <_malloc_r+0xfc>
 800665a:	f000 f869 	bl	8006730 <__malloc_lock>
 800665e:	f8d8 3000 	ldr.w	r3, [r8]
 8006662:	461c      	mov	r4, r3
 8006664:	bb44      	cbnz	r4, 80066b8 <_malloc_r+0x88>
 8006666:	4629      	mov	r1, r5
 8006668:	4630      	mov	r0, r6
 800666a:	f7ff ffbf 	bl	80065ec <sbrk_aligned>
 800666e:	1c43      	adds	r3, r0, #1
 8006670:	4604      	mov	r4, r0
 8006672:	d158      	bne.n	8006726 <_malloc_r+0xf6>
 8006674:	f8d8 4000 	ldr.w	r4, [r8]
 8006678:	4627      	mov	r7, r4
 800667a:	2f00      	cmp	r7, #0
 800667c:	d143      	bne.n	8006706 <_malloc_r+0xd6>
 800667e:	2c00      	cmp	r4, #0
 8006680:	d04b      	beq.n	800671a <_malloc_r+0xea>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4639      	mov	r1, r7
 8006686:	4630      	mov	r0, r6
 8006688:	eb04 0903 	add.w	r9, r4, r3
 800668c:	f000 fb5a 	bl	8006d44 <_sbrk_r>
 8006690:	4581      	cmp	r9, r0
 8006692:	d142      	bne.n	800671a <_malloc_r+0xea>
 8006694:	6821      	ldr	r1, [r4, #0]
 8006696:	1a6d      	subs	r5, r5, r1
 8006698:	4629      	mov	r1, r5
 800669a:	4630      	mov	r0, r6
 800669c:	f7ff ffa6 	bl	80065ec <sbrk_aligned>
 80066a0:	3001      	adds	r0, #1
 80066a2:	d03a      	beq.n	800671a <_malloc_r+0xea>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	442b      	add	r3, r5
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	f8d8 3000 	ldr.w	r3, [r8]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	bb62      	cbnz	r2, 800670c <_malloc_r+0xdc>
 80066b2:	f8c8 7000 	str.w	r7, [r8]
 80066b6:	e00f      	b.n	80066d8 <_malloc_r+0xa8>
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	1b52      	subs	r2, r2, r5
 80066bc:	d420      	bmi.n	8006700 <_malloc_r+0xd0>
 80066be:	2a0b      	cmp	r2, #11
 80066c0:	d917      	bls.n	80066f2 <_malloc_r+0xc2>
 80066c2:	1961      	adds	r1, r4, r5
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	6025      	str	r5, [r4, #0]
 80066c8:	bf18      	it	ne
 80066ca:	6059      	strne	r1, [r3, #4]
 80066cc:	6863      	ldr	r3, [r4, #4]
 80066ce:	bf08      	it	eq
 80066d0:	f8c8 1000 	streq.w	r1, [r8]
 80066d4:	5162      	str	r2, [r4, r5]
 80066d6:	604b      	str	r3, [r1, #4]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f82f 	bl	800673c <__malloc_unlock>
 80066de:	f104 000b 	add.w	r0, r4, #11
 80066e2:	1d23      	adds	r3, r4, #4
 80066e4:	f020 0007 	bic.w	r0, r0, #7
 80066e8:	1ac2      	subs	r2, r0, r3
 80066ea:	bf1c      	itt	ne
 80066ec:	1a1b      	subne	r3, r3, r0
 80066ee:	50a3      	strne	r3, [r4, r2]
 80066f0:	e7af      	b.n	8006652 <_malloc_r+0x22>
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	42a3      	cmp	r3, r4
 80066f6:	bf0c      	ite	eq
 80066f8:	f8c8 2000 	streq.w	r2, [r8]
 80066fc:	605a      	strne	r2, [r3, #4]
 80066fe:	e7eb      	b.n	80066d8 <_malloc_r+0xa8>
 8006700:	4623      	mov	r3, r4
 8006702:	6864      	ldr	r4, [r4, #4]
 8006704:	e7ae      	b.n	8006664 <_malloc_r+0x34>
 8006706:	463c      	mov	r4, r7
 8006708:	687f      	ldr	r7, [r7, #4]
 800670a:	e7b6      	b.n	800667a <_malloc_r+0x4a>
 800670c:	461a      	mov	r2, r3
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	42a3      	cmp	r3, r4
 8006712:	d1fb      	bne.n	800670c <_malloc_r+0xdc>
 8006714:	2300      	movs	r3, #0
 8006716:	6053      	str	r3, [r2, #4]
 8006718:	e7de      	b.n	80066d8 <_malloc_r+0xa8>
 800671a:	230c      	movs	r3, #12
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	4630      	mov	r0, r6
 8006720:	f000 f80c 	bl	800673c <__malloc_unlock>
 8006724:	e794      	b.n	8006650 <_malloc_r+0x20>
 8006726:	6005      	str	r5, [r0, #0]
 8006728:	e7d6      	b.n	80066d8 <_malloc_r+0xa8>
 800672a:	bf00      	nop
 800672c:	200027e8 	.word	0x200027e8

08006730 <__malloc_lock>:
 8006730:	4801      	ldr	r0, [pc, #4]	@ (8006738 <__malloc_lock+0x8>)
 8006732:	f7ff bf0f 	b.w	8006554 <__retarget_lock_acquire_recursive>
 8006736:	bf00      	nop
 8006738:	200027e0 	.word	0x200027e0

0800673c <__malloc_unlock>:
 800673c:	4801      	ldr	r0, [pc, #4]	@ (8006744 <__malloc_unlock+0x8>)
 800673e:	f7ff bf0a 	b.w	8006556 <__retarget_lock_release_recursive>
 8006742:	bf00      	nop
 8006744:	200027e0 	.word	0x200027e0

08006748 <__ssputs_r>:
 8006748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	688e      	ldr	r6, [r1, #8]
 800674e:	461f      	mov	r7, r3
 8006750:	42be      	cmp	r6, r7
 8006752:	680b      	ldr	r3, [r1, #0]
 8006754:	4682      	mov	sl, r0
 8006756:	460c      	mov	r4, r1
 8006758:	4690      	mov	r8, r2
 800675a:	d82d      	bhi.n	80067b8 <__ssputs_r+0x70>
 800675c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006764:	d026      	beq.n	80067b4 <__ssputs_r+0x6c>
 8006766:	6965      	ldr	r5, [r4, #20]
 8006768:	6909      	ldr	r1, [r1, #16]
 800676a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800676e:	eba3 0901 	sub.w	r9, r3, r1
 8006772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006776:	1c7b      	adds	r3, r7, #1
 8006778:	444b      	add	r3, r9
 800677a:	106d      	asrs	r5, r5, #1
 800677c:	429d      	cmp	r5, r3
 800677e:	bf38      	it	cc
 8006780:	461d      	movcc	r5, r3
 8006782:	0553      	lsls	r3, r2, #21
 8006784:	d527      	bpl.n	80067d6 <__ssputs_r+0x8e>
 8006786:	4629      	mov	r1, r5
 8006788:	f7ff ff52 	bl	8006630 <_malloc_r>
 800678c:	4606      	mov	r6, r0
 800678e:	b360      	cbz	r0, 80067ea <__ssputs_r+0xa2>
 8006790:	6921      	ldr	r1, [r4, #16]
 8006792:	464a      	mov	r2, r9
 8006794:	f000 fae6 	bl	8006d64 <memcpy>
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800679e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	6126      	str	r6, [r4, #16]
 80067a6:	6165      	str	r5, [r4, #20]
 80067a8:	444e      	add	r6, r9
 80067aa:	eba5 0509 	sub.w	r5, r5, r9
 80067ae:	6026      	str	r6, [r4, #0]
 80067b0:	60a5      	str	r5, [r4, #8]
 80067b2:	463e      	mov	r6, r7
 80067b4:	42be      	cmp	r6, r7
 80067b6:	d900      	bls.n	80067ba <__ssputs_r+0x72>
 80067b8:	463e      	mov	r6, r7
 80067ba:	6820      	ldr	r0, [r4, #0]
 80067bc:	4632      	mov	r2, r6
 80067be:	4641      	mov	r1, r8
 80067c0:	f000 faa6 	bl	8006d10 <memmove>
 80067c4:	68a3      	ldr	r3, [r4, #8]
 80067c6:	1b9b      	subs	r3, r3, r6
 80067c8:	60a3      	str	r3, [r4, #8]
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	4433      	add	r3, r6
 80067ce:	6023      	str	r3, [r4, #0]
 80067d0:	2000      	movs	r0, #0
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	462a      	mov	r2, r5
 80067d8:	f000 fad2 	bl	8006d80 <_realloc_r>
 80067dc:	4606      	mov	r6, r0
 80067de:	2800      	cmp	r0, #0
 80067e0:	d1e0      	bne.n	80067a4 <__ssputs_r+0x5c>
 80067e2:	6921      	ldr	r1, [r4, #16]
 80067e4:	4650      	mov	r0, sl
 80067e6:	f7ff feb7 	bl	8006558 <_free_r>
 80067ea:	230c      	movs	r3, #12
 80067ec:	f8ca 3000 	str.w	r3, [sl]
 80067f0:	89a3      	ldrh	r3, [r4, #12]
 80067f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067f6:	81a3      	strh	r3, [r4, #12]
 80067f8:	f04f 30ff 	mov.w	r0, #4294967295
 80067fc:	e7e9      	b.n	80067d2 <__ssputs_r+0x8a>
	...

08006800 <_svfiprintf_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4698      	mov	r8, r3
 8006806:	898b      	ldrh	r3, [r1, #12]
 8006808:	061b      	lsls	r3, r3, #24
 800680a:	b09d      	sub	sp, #116	@ 0x74
 800680c:	4607      	mov	r7, r0
 800680e:	460d      	mov	r5, r1
 8006810:	4614      	mov	r4, r2
 8006812:	d510      	bpl.n	8006836 <_svfiprintf_r+0x36>
 8006814:	690b      	ldr	r3, [r1, #16]
 8006816:	b973      	cbnz	r3, 8006836 <_svfiprintf_r+0x36>
 8006818:	2140      	movs	r1, #64	@ 0x40
 800681a:	f7ff ff09 	bl	8006630 <_malloc_r>
 800681e:	6028      	str	r0, [r5, #0]
 8006820:	6128      	str	r0, [r5, #16]
 8006822:	b930      	cbnz	r0, 8006832 <_svfiprintf_r+0x32>
 8006824:	230c      	movs	r3, #12
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	b01d      	add	sp, #116	@ 0x74
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	2340      	movs	r3, #64	@ 0x40
 8006834:	616b      	str	r3, [r5, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	9309      	str	r3, [sp, #36]	@ 0x24
 800683a:	2320      	movs	r3, #32
 800683c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006840:	f8cd 800c 	str.w	r8, [sp, #12]
 8006844:	2330      	movs	r3, #48	@ 0x30
 8006846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069e4 <_svfiprintf_r+0x1e4>
 800684a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800684e:	f04f 0901 	mov.w	r9, #1
 8006852:	4623      	mov	r3, r4
 8006854:	469a      	mov	sl, r3
 8006856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800685a:	b10a      	cbz	r2, 8006860 <_svfiprintf_r+0x60>
 800685c:	2a25      	cmp	r2, #37	@ 0x25
 800685e:	d1f9      	bne.n	8006854 <_svfiprintf_r+0x54>
 8006860:	ebba 0b04 	subs.w	fp, sl, r4
 8006864:	d00b      	beq.n	800687e <_svfiprintf_r+0x7e>
 8006866:	465b      	mov	r3, fp
 8006868:	4622      	mov	r2, r4
 800686a:	4629      	mov	r1, r5
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff ff6b 	bl	8006748 <__ssputs_r>
 8006872:	3001      	adds	r0, #1
 8006874:	f000 80a7 	beq.w	80069c6 <_svfiprintf_r+0x1c6>
 8006878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800687a:	445a      	add	r2, fp
 800687c:	9209      	str	r2, [sp, #36]	@ 0x24
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 809f 	beq.w	80069c6 <_svfiprintf_r+0x1c6>
 8006888:	2300      	movs	r3, #0
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006892:	f10a 0a01 	add.w	sl, sl, #1
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800689e:	931a      	str	r3, [sp, #104]	@ 0x68
 80068a0:	4654      	mov	r4, sl
 80068a2:	2205      	movs	r2, #5
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	484e      	ldr	r0, [pc, #312]	@ (80069e4 <_svfiprintf_r+0x1e4>)
 80068aa:	f7f9 fcb9 	bl	8000220 <memchr>
 80068ae:	9a04      	ldr	r2, [sp, #16]
 80068b0:	b9d8      	cbnz	r0, 80068ea <_svfiprintf_r+0xea>
 80068b2:	06d0      	lsls	r0, r2, #27
 80068b4:	bf44      	itt	mi
 80068b6:	2320      	movmi	r3, #32
 80068b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068bc:	0711      	lsls	r1, r2, #28
 80068be:	bf44      	itt	mi
 80068c0:	232b      	movmi	r3, #43	@ 0x2b
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80068cc:	d015      	beq.n	80068fa <_svfiprintf_r+0xfa>
 80068ce:	9a07      	ldr	r2, [sp, #28]
 80068d0:	4654      	mov	r4, sl
 80068d2:	2000      	movs	r0, #0
 80068d4:	f04f 0c0a 	mov.w	ip, #10
 80068d8:	4621      	mov	r1, r4
 80068da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068de:	3b30      	subs	r3, #48	@ 0x30
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d94b      	bls.n	800697c <_svfiprintf_r+0x17c>
 80068e4:	b1b0      	cbz	r0, 8006914 <_svfiprintf_r+0x114>
 80068e6:	9207      	str	r2, [sp, #28]
 80068e8:	e014      	b.n	8006914 <_svfiprintf_r+0x114>
 80068ea:	eba0 0308 	sub.w	r3, r0, r8
 80068ee:	fa09 f303 	lsl.w	r3, r9, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	46a2      	mov	sl, r4
 80068f8:	e7d2      	b.n	80068a0 <_svfiprintf_r+0xa0>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	1d19      	adds	r1, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	9103      	str	r1, [sp, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfbb      	ittet	lt
 8006906:	425b      	neglt	r3, r3
 8006908:	f042 0202 	orrlt.w	r2, r2, #2
 800690c:	9307      	strge	r3, [sp, #28]
 800690e:	9307      	strlt	r3, [sp, #28]
 8006910:	bfb8      	it	lt
 8006912:	9204      	strlt	r2, [sp, #16]
 8006914:	7823      	ldrb	r3, [r4, #0]
 8006916:	2b2e      	cmp	r3, #46	@ 0x2e
 8006918:	d10a      	bne.n	8006930 <_svfiprintf_r+0x130>
 800691a:	7863      	ldrb	r3, [r4, #1]
 800691c:	2b2a      	cmp	r3, #42	@ 0x2a
 800691e:	d132      	bne.n	8006986 <_svfiprintf_r+0x186>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	1d1a      	adds	r2, r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	9203      	str	r2, [sp, #12]
 8006928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800692c:	3402      	adds	r4, #2
 800692e:	9305      	str	r3, [sp, #20]
 8006930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069f4 <_svfiprintf_r+0x1f4>
 8006934:	7821      	ldrb	r1, [r4, #0]
 8006936:	2203      	movs	r2, #3
 8006938:	4650      	mov	r0, sl
 800693a:	f7f9 fc71 	bl	8000220 <memchr>
 800693e:	b138      	cbz	r0, 8006950 <_svfiprintf_r+0x150>
 8006940:	9b04      	ldr	r3, [sp, #16]
 8006942:	eba0 000a 	sub.w	r0, r0, sl
 8006946:	2240      	movs	r2, #64	@ 0x40
 8006948:	4082      	lsls	r2, r0
 800694a:	4313      	orrs	r3, r2
 800694c:	3401      	adds	r4, #1
 800694e:	9304      	str	r3, [sp, #16]
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	4824      	ldr	r0, [pc, #144]	@ (80069e8 <_svfiprintf_r+0x1e8>)
 8006956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800695a:	2206      	movs	r2, #6
 800695c:	f7f9 fc60 	bl	8000220 <memchr>
 8006960:	2800      	cmp	r0, #0
 8006962:	d036      	beq.n	80069d2 <_svfiprintf_r+0x1d2>
 8006964:	4b21      	ldr	r3, [pc, #132]	@ (80069ec <_svfiprintf_r+0x1ec>)
 8006966:	bb1b      	cbnz	r3, 80069b0 <_svfiprintf_r+0x1b0>
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	3307      	adds	r3, #7
 800696c:	f023 0307 	bic.w	r3, r3, #7
 8006970:	3308      	adds	r3, #8
 8006972:	9303      	str	r3, [sp, #12]
 8006974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006976:	4433      	add	r3, r6
 8006978:	9309      	str	r3, [sp, #36]	@ 0x24
 800697a:	e76a      	b.n	8006852 <_svfiprintf_r+0x52>
 800697c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006980:	460c      	mov	r4, r1
 8006982:	2001      	movs	r0, #1
 8006984:	e7a8      	b.n	80068d8 <_svfiprintf_r+0xd8>
 8006986:	2300      	movs	r3, #0
 8006988:	3401      	adds	r4, #1
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	4619      	mov	r1, r3
 800698e:	f04f 0c0a 	mov.w	ip, #10
 8006992:	4620      	mov	r0, r4
 8006994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006998:	3a30      	subs	r2, #48	@ 0x30
 800699a:	2a09      	cmp	r2, #9
 800699c:	d903      	bls.n	80069a6 <_svfiprintf_r+0x1a6>
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0c6      	beq.n	8006930 <_svfiprintf_r+0x130>
 80069a2:	9105      	str	r1, [sp, #20]
 80069a4:	e7c4      	b.n	8006930 <_svfiprintf_r+0x130>
 80069a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80069aa:	4604      	mov	r4, r0
 80069ac:	2301      	movs	r3, #1
 80069ae:	e7f0      	b.n	8006992 <_svfiprintf_r+0x192>
 80069b0:	ab03      	add	r3, sp, #12
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	462a      	mov	r2, r5
 80069b6:	4b0e      	ldr	r3, [pc, #56]	@ (80069f0 <_svfiprintf_r+0x1f0>)
 80069b8:	a904      	add	r1, sp, #16
 80069ba:	4638      	mov	r0, r7
 80069bc:	f3af 8000 	nop.w
 80069c0:	1c42      	adds	r2, r0, #1
 80069c2:	4606      	mov	r6, r0
 80069c4:	d1d6      	bne.n	8006974 <_svfiprintf_r+0x174>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	065b      	lsls	r3, r3, #25
 80069ca:	f53f af2d 	bmi.w	8006828 <_svfiprintf_r+0x28>
 80069ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069d0:	e72c      	b.n	800682c <_svfiprintf_r+0x2c>
 80069d2:	ab03      	add	r3, sp, #12
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	462a      	mov	r2, r5
 80069d8:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <_svfiprintf_r+0x1f0>)
 80069da:	a904      	add	r1, sp, #16
 80069dc:	4638      	mov	r0, r7
 80069de:	f000 f879 	bl	8006ad4 <_printf_i>
 80069e2:	e7ed      	b.n	80069c0 <_svfiprintf_r+0x1c0>
 80069e4:	08006f00 	.word	0x08006f00
 80069e8:	08006f0a 	.word	0x08006f0a
 80069ec:	00000000 	.word	0x00000000
 80069f0:	08006749 	.word	0x08006749
 80069f4:	08006f06 	.word	0x08006f06

080069f8 <_printf_common>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	4616      	mov	r6, r2
 80069fe:	4698      	mov	r8, r3
 8006a00:	688a      	ldr	r2, [r1, #8]
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	bfb8      	it	lt
 8006a0c:	4613      	movlt	r3, r2
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b10a      	cbz	r2, 8006a1e <_printf_common+0x26>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	0699      	lsls	r1, r3, #26
 8006a22:	bf42      	ittt	mi
 8006a24:	6833      	ldrmi	r3, [r6, #0]
 8006a26:	3302      	addmi	r3, #2
 8006a28:	6033      	strmi	r3, [r6, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	f015 0506 	ands.w	r5, r5, #6
 8006a30:	d106      	bne.n	8006a40 <_printf_common+0x48>
 8006a32:	f104 0a19 	add.w	sl, r4, #25
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	6832      	ldr	r2, [r6, #0]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dc26      	bgt.n	8006a8e <_printf_common+0x96>
 8006a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	3b00      	subs	r3, #0
 8006a48:	bf18      	it	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	0692      	lsls	r2, r2, #26
 8006a4e:	d42b      	bmi.n	8006aa8 <_printf_common+0xb0>
 8006a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a54:	4641      	mov	r1, r8
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c8      	blx	r9
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d01e      	beq.n	8006a9c <_printf_common+0xa4>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	f003 0306 	and.w	r3, r3, #6
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf02      	ittt	eq
 8006a6a:	68e5      	ldreq	r5, [r4, #12]
 8006a6c:	6833      	ldreq	r3, [r6, #0]
 8006a6e:	1aed      	subeq	r5, r5, r3
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	bf0c      	ite	eq
 8006a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a78:	2500      	movne	r5, #0
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bfc4      	itt	gt
 8006a7e:	1a9b      	subgt	r3, r3, r2
 8006a80:	18ed      	addgt	r5, r5, r3
 8006a82:	2600      	movs	r6, #0
 8006a84:	341a      	adds	r4, #26
 8006a86:	42b5      	cmp	r5, r6
 8006a88:	d11a      	bne.n	8006ac0 <_printf_common+0xc8>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e008      	b.n	8006aa0 <_printf_common+0xa8>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4641      	mov	r1, r8
 8006a94:	4638      	mov	r0, r7
 8006a96:	47c8      	blx	r9
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d103      	bne.n	8006aa4 <_printf_common+0xac>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	e7c6      	b.n	8006a36 <_printf_common+0x3e>
 8006aa8:	18e1      	adds	r1, r4, r3
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	2030      	movs	r0, #48	@ 0x30
 8006aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ab2:	4422      	add	r2, r4
 8006ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006abc:	3302      	adds	r3, #2
 8006abe:	e7c7      	b.n	8006a50 <_printf_common+0x58>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c8      	blx	r9
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa4>
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7d9      	b.n	8006a86 <_printf_common+0x8e>
	...

08006ad4 <_printf_i>:
 8006ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	7e0f      	ldrb	r7, [r1, #24]
 8006ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006adc:	2f78      	cmp	r7, #120	@ 0x78
 8006ade:	4691      	mov	r9, r2
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aea:	d807      	bhi.n	8006afc <_printf_i+0x28>
 8006aec:	2f62      	cmp	r7, #98	@ 0x62
 8006aee:	d80a      	bhi.n	8006b06 <_printf_i+0x32>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f000 80d1 	beq.w	8006c98 <_printf_i+0x1c4>
 8006af6:	2f58      	cmp	r7, #88	@ 0x58
 8006af8:	f000 80b8 	beq.w	8006c6c <_printf_i+0x198>
 8006afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b04:	e03a      	b.n	8006b7c <_printf_i+0xa8>
 8006b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b0a:	2b15      	cmp	r3, #21
 8006b0c:	d8f6      	bhi.n	8006afc <_printf_i+0x28>
 8006b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b14 <_printf_i+0x40>)
 8006b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006afd 	.word	0x08006afd
 8006b20:	08006afd 	.word	0x08006afd
 8006b24:	08006afd 	.word	0x08006afd
 8006b28:	08006afd 	.word	0x08006afd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006afd 	.word	0x08006afd
 8006b34:	08006afd 	.word	0x08006afd
 8006b38:	08006afd 	.word	0x08006afd
 8006b3c:	08006afd 	.word	0x08006afd
 8006b40:	08006c7f 	.word	0x08006c7f
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006c39 	.word	0x08006c39
 8006b4c:	08006afd 	.word	0x08006afd
 8006b50:	08006afd 	.word	0x08006afd
 8006b54:	08006ca1 	.word	0x08006ca1
 8006b58:	08006afd 	.word	0x08006afd
 8006b5c:	08006bab 	.word	0x08006bab
 8006b60:	08006afd 	.word	0x08006afd
 8006b64:	08006afd 	.word	0x08006afd
 8006b68:	08006c41 	.word	0x08006c41
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e09c      	b.n	8006cba <_printf_i+0x1e6>
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	0606      	lsls	r6, r0, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xbc>
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	e003      	b.n	8006b98 <_printf_i+0xc4>
 8006b90:	0645      	lsls	r5, r0, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xb8>
 8006b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	da03      	bge.n	8006ba4 <_printf_i+0xd0>
 8006b9c:	232d      	movs	r3, #45	@ 0x2d
 8006b9e:	426d      	negs	r5, r5
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ba4:	4858      	ldr	r0, [pc, #352]	@ (8006d08 <_printf_i+0x234>)
 8006ba6:	230a      	movs	r3, #10
 8006ba8:	e011      	b.n	8006bce <_printf_i+0xfa>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	0608      	lsls	r0, r1, #24
 8006bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb4:	d402      	bmi.n	8006bbc <_printf_i+0xe8>
 8006bb6:	0649      	lsls	r1, r1, #25
 8006bb8:	bf48      	it	mi
 8006bba:	b2ad      	uxthmi	r5, r5
 8006bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bbe:	4852      	ldr	r0, [pc, #328]	@ (8006d08 <_printf_i+0x234>)
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	bf14      	ite	ne
 8006bc4:	230a      	movne	r3, #10
 8006bc6:	2308      	moveq	r3, #8
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bce:	6866      	ldr	r6, [r4, #4]
 8006bd0:	60a6      	str	r6, [r4, #8]
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	db05      	blt.n	8006be2 <_printf_i+0x10e>
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	432e      	orrs	r6, r5
 8006bda:	f021 0104 	bic.w	r1, r1, #4
 8006bde:	6021      	str	r1, [r4, #0]
 8006be0:	d04b      	beq.n	8006c7a <_printf_i+0x1a6>
 8006be2:	4616      	mov	r6, r2
 8006be4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006be8:	fb03 5711 	mls	r7, r3, r1, r5
 8006bec:	5dc7      	ldrb	r7, [r0, r7]
 8006bee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf2:	462f      	mov	r7, r5
 8006bf4:	42bb      	cmp	r3, r7
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	d9f4      	bls.n	8006be4 <_printf_i+0x110>
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d10b      	bne.n	8006c16 <_printf_i+0x142>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	07df      	lsls	r7, r3, #31
 8006c02:	d508      	bpl.n	8006c16 <_printf_i+0x142>
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	6861      	ldr	r1, [r4, #4]
 8006c08:	4299      	cmp	r1, r3
 8006c0a:	bfde      	ittt	le
 8006c0c:	2330      	movle	r3, #48	@ 0x30
 8006c0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c16:	1b92      	subs	r2, r2, r6
 8006c18:	6122      	str	r2, [r4, #16]
 8006c1a:	f8cd a000 	str.w	sl, [sp]
 8006c1e:	464b      	mov	r3, r9
 8006c20:	aa03      	add	r2, sp, #12
 8006c22:	4621      	mov	r1, r4
 8006c24:	4640      	mov	r0, r8
 8006c26:	f7ff fee7 	bl	80069f8 <_printf_common>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d14a      	bne.n	8006cc4 <_printf_i+0x1f0>
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c32:	b004      	add	sp, #16
 8006c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	f043 0320 	orr.w	r3, r3, #32
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	4832      	ldr	r0, [pc, #200]	@ (8006d0c <_printf_i+0x238>)
 8006c42:	2778      	movs	r7, #120	@ 0x78
 8006c44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	6831      	ldr	r1, [r6, #0]
 8006c4c:	061f      	lsls	r7, r3, #24
 8006c4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c52:	d402      	bmi.n	8006c5a <_printf_i+0x186>
 8006c54:	065f      	lsls	r7, r3, #25
 8006c56:	bf48      	it	mi
 8006c58:	b2ad      	uxthmi	r5, r5
 8006c5a:	6031      	str	r1, [r6, #0]
 8006c5c:	07d9      	lsls	r1, r3, #31
 8006c5e:	bf44      	itt	mi
 8006c60:	f043 0320 	orrmi.w	r3, r3, #32
 8006c64:	6023      	strmi	r3, [r4, #0]
 8006c66:	b11d      	cbz	r5, 8006c70 <_printf_i+0x19c>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	e7ad      	b.n	8006bc8 <_printf_i+0xf4>
 8006c6c:	4826      	ldr	r0, [pc, #152]	@ (8006d08 <_printf_i+0x234>)
 8006c6e:	e7e9      	b.n	8006c44 <_printf_i+0x170>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	f023 0320 	bic.w	r3, r3, #32
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	e7f6      	b.n	8006c68 <_printf_i+0x194>
 8006c7a:	4616      	mov	r6, r2
 8006c7c:	e7bd      	b.n	8006bfa <_printf_i+0x126>
 8006c7e:	6833      	ldr	r3, [r6, #0]
 8006c80:	6825      	ldr	r5, [r4, #0]
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	1d18      	adds	r0, r3, #4
 8006c86:	6030      	str	r0, [r6, #0]
 8006c88:	062e      	lsls	r6, r5, #24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	d501      	bpl.n	8006c92 <_printf_i+0x1be>
 8006c8e:	6019      	str	r1, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <_printf_i+0x1c4>
 8006c92:	0668      	lsls	r0, r5, #25
 8006c94:	d5fb      	bpl.n	8006c8e <_printf_i+0x1ba>
 8006c96:	8019      	strh	r1, [r3, #0]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	4616      	mov	r6, r2
 8006c9e:	e7bc      	b.n	8006c1a <_printf_i+0x146>
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	6032      	str	r2, [r6, #0]
 8006ca6:	681e      	ldr	r6, [r3, #0]
 8006ca8:	6862      	ldr	r2, [r4, #4]
 8006caa:	2100      	movs	r1, #0
 8006cac:	4630      	mov	r0, r6
 8006cae:	f7f9 fab7 	bl	8000220 <memchr>
 8006cb2:	b108      	cbz	r0, 8006cb8 <_printf_i+0x1e4>
 8006cb4:	1b80      	subs	r0, r0, r6
 8006cb6:	6060      	str	r0, [r4, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	6123      	str	r3, [r4, #16]
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc2:	e7aa      	b.n	8006c1a <_printf_i+0x146>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4640      	mov	r0, r8
 8006ccc:	47d0      	blx	sl
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d0ad      	beq.n	8006c2e <_printf_i+0x15a>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	079b      	lsls	r3, r3, #30
 8006cd6:	d413      	bmi.n	8006d00 <_printf_i+0x22c>
 8006cd8:	68e0      	ldr	r0, [r4, #12]
 8006cda:	9b03      	ldr	r3, [sp, #12]
 8006cdc:	4298      	cmp	r0, r3
 8006cde:	bfb8      	it	lt
 8006ce0:	4618      	movlt	r0, r3
 8006ce2:	e7a6      	b.n	8006c32 <_printf_i+0x15e>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4632      	mov	r2, r6
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4640      	mov	r0, r8
 8006cec:	47d0      	blx	sl
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d09d      	beq.n	8006c2e <_printf_i+0x15a>
 8006cf2:	3501      	adds	r5, #1
 8006cf4:	68e3      	ldr	r3, [r4, #12]
 8006cf6:	9903      	ldr	r1, [sp, #12]
 8006cf8:	1a5b      	subs	r3, r3, r1
 8006cfa:	42ab      	cmp	r3, r5
 8006cfc:	dcf2      	bgt.n	8006ce4 <_printf_i+0x210>
 8006cfe:	e7eb      	b.n	8006cd8 <_printf_i+0x204>
 8006d00:	2500      	movs	r5, #0
 8006d02:	f104 0619 	add.w	r6, r4, #25
 8006d06:	e7f5      	b.n	8006cf4 <_printf_i+0x220>
 8006d08:	08006f11 	.word	0x08006f11
 8006d0c:	08006f22 	.word	0x08006f22

08006d10 <memmove>:
 8006d10:	4288      	cmp	r0, r1
 8006d12:	b510      	push	{r4, lr}
 8006d14:	eb01 0402 	add.w	r4, r1, r2
 8006d18:	d902      	bls.n	8006d20 <memmove+0x10>
 8006d1a:	4284      	cmp	r4, r0
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	d807      	bhi.n	8006d30 <memmove+0x20>
 8006d20:	1e43      	subs	r3, r0, #1
 8006d22:	42a1      	cmp	r1, r4
 8006d24:	d008      	beq.n	8006d38 <memmove+0x28>
 8006d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d2e:	e7f8      	b.n	8006d22 <memmove+0x12>
 8006d30:	4402      	add	r2, r0
 8006d32:	4601      	mov	r1, r0
 8006d34:	428a      	cmp	r2, r1
 8006d36:	d100      	bne.n	8006d3a <memmove+0x2a>
 8006d38:	bd10      	pop	{r4, pc}
 8006d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d42:	e7f7      	b.n	8006d34 <memmove+0x24>

08006d44 <_sbrk_r>:
 8006d44:	b538      	push	{r3, r4, r5, lr}
 8006d46:	4d06      	ldr	r5, [pc, #24]	@ (8006d60 <_sbrk_r+0x1c>)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	4608      	mov	r0, r1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	f7fa fd82 	bl	8001858 <_sbrk>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_sbrk_r+0x1a>
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_sbrk_r+0x1a>
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	200027dc 	.word	0x200027dc

08006d64 <memcpy>:
 8006d64:	440a      	add	r2, r1
 8006d66:	4291      	cmp	r1, r2
 8006d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d6c:	d100      	bne.n	8006d70 <memcpy+0xc>
 8006d6e:	4770      	bx	lr
 8006d70:	b510      	push	{r4, lr}
 8006d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	d1f9      	bne.n	8006d72 <memcpy+0xe>
 8006d7e:	bd10      	pop	{r4, pc}

08006d80 <_realloc_r>:
 8006d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	4607      	mov	r7, r0
 8006d86:	4614      	mov	r4, r2
 8006d88:	460d      	mov	r5, r1
 8006d8a:	b921      	cbnz	r1, 8006d96 <_realloc_r+0x16>
 8006d8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	4611      	mov	r1, r2
 8006d92:	f7ff bc4d 	b.w	8006630 <_malloc_r>
 8006d96:	b92a      	cbnz	r2, 8006da4 <_realloc_r+0x24>
 8006d98:	f7ff fbde 	bl	8006558 <_free_r>
 8006d9c:	4625      	mov	r5, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006da4:	f000 f81a 	bl	8006ddc <_malloc_usable_size_r>
 8006da8:	4284      	cmp	r4, r0
 8006daa:	4606      	mov	r6, r0
 8006dac:	d802      	bhi.n	8006db4 <_realloc_r+0x34>
 8006dae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006db2:	d8f4      	bhi.n	8006d9e <_realloc_r+0x1e>
 8006db4:	4621      	mov	r1, r4
 8006db6:	4638      	mov	r0, r7
 8006db8:	f7ff fc3a 	bl	8006630 <_malloc_r>
 8006dbc:	4680      	mov	r8, r0
 8006dbe:	b908      	cbnz	r0, 8006dc4 <_realloc_r+0x44>
 8006dc0:	4645      	mov	r5, r8
 8006dc2:	e7ec      	b.n	8006d9e <_realloc_r+0x1e>
 8006dc4:	42b4      	cmp	r4, r6
 8006dc6:	4622      	mov	r2, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	bf28      	it	cs
 8006dcc:	4632      	movcs	r2, r6
 8006dce:	f7ff ffc9 	bl	8006d64 <memcpy>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	f7ff fbbf 	bl	8006558 <_free_r>
 8006dda:	e7f1      	b.n	8006dc0 <_realloc_r+0x40>

08006ddc <_malloc_usable_size_r>:
 8006ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de0:	1f18      	subs	r0, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfbc      	itt	lt
 8006de6:	580b      	ldrlt	r3, [r1, r0]
 8006de8:	18c0      	addlt	r0, r0, r3
 8006dea:	4770      	bx	lr

08006dec <_init>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr

08006df8 <_fini>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr
