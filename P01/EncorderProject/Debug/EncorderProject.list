
EncorderProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006de4  08006de4  00007de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f28  08006f28  00008078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f28  08006f28  00007f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f30  08006f30  00008078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f34  08006f34  00007f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08006f38  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000276c  20000078  08006fb0  00008078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200027e4  08006fb0  000087e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f870  00000000  00000000  000080a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250b  00000000  00000000  00017918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00019e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf2  00000000  00000000  0001ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027aff  00000000  00000000  0001b992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001445d  00000000  00000000  00043491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1025  00000000  00000000  000578ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  00148958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006dcc 	.word	0x08006dcc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08006dcc 	.word	0x08006dcc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4802      	ldr	r0, [pc, #8]	@ (8000600 <SELECT+0x14>)
 80005f6:	f001 fd23 	bl	8002040 <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40020400 	.word	0x40020400

08000604 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4802      	ldr	r0, [pc, #8]	@ (8000618 <DESELECT+0x14>)
 800060e:	f001 fd17 	bl	8002040 <HAL_GPIO_WritePin>
}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40020400 	.word	0x40020400

0800061c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000626:	bf00      	nop
 8000628:	4808      	ldr	r0, [pc, #32]	@ (800064c <SPI_TxByte+0x30>)
 800062a:	f002 fdbb 	bl	80031a4 <HAL_SPI_GetState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d1f9      	bne.n	8000628 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 8000634:	1df9      	adds	r1, r7, #7
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	2201      	movs	r2, #1
 800063c:	4803      	ldr	r0, [pc, #12]	@ (800064c <SPI_TxByte+0x30>)
 800063e:	f002 fa1a 	bl	8002a76 <HAL_SPI_Transmit>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098

08000650 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000656:	23ff      	movs	r3, #255	@ 0xff
 8000658:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 800065e:	bf00      	nop
 8000660:	4809      	ldr	r0, [pc, #36]	@ (8000688 <SPI_RxByte+0x38>)
 8000662:	f002 fd9f 	bl	80031a4 <HAL_SPI_GetState>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	d1f9      	bne.n	8000660 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 800066c:	1dba      	adds	r2, r7, #6
 800066e:	1df9      	adds	r1, r7, #7
 8000670:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2301      	movs	r3, #1
 8000678:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_RxByte+0x38>)
 800067a:	f002 fb71 	bl	8002d60 <HAL_SPI_TransmitReceive>
  
  return data;
 800067e:	79bb      	ldrb	r3, [r7, #6]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098

0800068c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000694:	f7ff ffdc 	bl	8000650 <SPI_RxByte>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	701a      	strb	r2, [r3, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  timer2 = 50;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <SD_ReadyWait+0x34>)
 80006b0:	2232      	movs	r2, #50	@ 0x32
 80006b2:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 80006b4:	f7ff ffcc 	bl	8000650 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 80006b8:	f7ff ffca 	bl	8000650 <SPI_RxByte>
 80006bc:	4603      	mov	r3, r0
 80006be:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && timer2);
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2bff      	cmp	r3, #255	@ 0xff
 80006c4:	d004      	beq.n	80006d0 <SD_ReadyWait+0x28>
 80006c6:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <SD_ReadyWait+0x34>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f3      	bne.n	80006b8 <SD_ReadyWait+0x10>
  
  return res;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20002656 	.word	0x20002656

080006e0 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80006e6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006ea:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80006ec:	f7ff ff8a 	bl	8000604 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	e005      	b.n	8000702 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006f6:	20ff      	movs	r0, #255	@ 0xff
 80006f8:	f7ff ff90 	bl	800061c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	3301      	adds	r3, #1
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	693b      	ldr	r3, [r7, #16]
 8000704:	2b09      	cmp	r3, #9
 8000706:	ddf6      	ble.n	80006f6 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000708:	f7ff ff70 	bl	80005ec <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800070c:	2340      	movs	r3, #64	@ 0x40
 800070e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000720:	2395      	movs	r3, #149	@ 0x95
 8000722:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	e009      	b.n	800073e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800072a:	1d3a      	adds	r2, r7, #4
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4413      	add	r3, r2
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff72 	bl	800061c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	3301      	adds	r3, #1
 800073c:	60fb      	str	r3, [r7, #12]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b05      	cmp	r3, #5
 8000742:	ddf2      	ble.n	800072a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000744:	e002      	b.n	800074c <SD_PowerOn+0x6c>
  {
    Count--;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3b01      	subs	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800074c:	f7ff ff80 	bl	8000650 <SPI_RxByte>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d002      	beq.n	800075c <SD_PowerOn+0x7c>
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d1f4      	bne.n	8000746 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 800075c:	f7ff ff52 	bl	8000604 <DESELECT>
  SPI_TxByte(0XFF);
 8000760:	20ff      	movs	r0, #255	@ 0xff
 8000762:	f7ff ff5b 	bl	800061c <SPI_TxByte>
  
  PowerFlag = 1;
 8000766:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <SD_PowerOn+0x94>)
 8000768:	2201      	movs	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
}
 800076c:	bf00      	nop
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000095 	.word	0x20000095

08000778 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800077c:	4b03      	ldr	r3, [pc, #12]	@ (800078c <SD_PowerOff+0x14>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000095 	.word	0x20000095

08000790 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000794:	4b03      	ldr	r3, [pc, #12]	@ (80007a4 <SD_CheckPower+0x14>)
 8000796:	781b      	ldrb	r3, [r3, #0]
}
 8000798:	4618      	mov	r0, r3
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000095 	.word	0x20000095

080007a8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  timer1 = 10;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <SD_RxDataBlock+0x68>)
 80007b4:	220a      	movs	r2, #10
 80007b6:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 80007b8:	f7ff ff4a 	bl	8000650 <SPI_RxByte>
 80007bc:	4603      	mov	r3, r0
 80007be:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && timer1);
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d104      	bne.n	80007d0 <SD_RxDataBlock+0x28>
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <SD_RxDataBlock+0x68>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d1f3      	bne.n	80007b8 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80007d4:	d001      	beq.n	80007da <SD_RxDataBlock+0x32>
    return FALSE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e016      	b.n	8000808 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff ff53 	bl	800068c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff4d 	bl	800068c <SPI_RxBytePtr>
  } while(btr -= 2);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3b02      	subs	r3, #2
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1ed      	bne.n	80007da <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80007fe:	f7ff ff27 	bl	8000650 <SPI_RxByte>
  SPI_RxByte();
 8000802:	f7ff ff25 	bl	8000650 <SPI_RxByte>
  
  return TRUE;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20002655 	.word	0x20002655

08000814 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000824:	f7ff ff40 	bl	80006a8 <SD_ReadyWait>
 8000828:	4603      	mov	r3, r0
 800082a:	2bff      	cmp	r3, #255	@ 0xff
 800082c:	d001      	beq.n	8000832 <SD_TxDataBlock+0x1e>
    return FALSE;
 800082e:	2300      	movs	r3, #0
 8000830:	e040      	b.n	80008b4 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000832:	78fb      	ldrb	r3, [r7, #3]
 8000834:	4618      	mov	r0, r3
 8000836:	f7ff fef1 	bl	800061c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	2bfd      	cmp	r3, #253	@ 0xfd
 800083e:	d031      	beq.n	80008a4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fee5 	bl	800061c <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1c5a      	adds	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fede 	bl	800061c <SPI_TxByte>
    } while (--wc);
 8000860:	7bbb      	ldrb	r3, [r7, #14]
 8000862:	3b01      	subs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1eb      	bne.n	8000844 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 800086c:	f7ff fef0 	bl	8000650 <SPI_RxByte>
    SPI_RxByte();
 8000870:	f7ff feee 	bl	8000650 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000874:	e00b      	b.n	800088e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000876:	f7ff feeb 	bl	8000650 <SPI_RxByte>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	2b05      	cmp	r3, #5
 8000886:	d006      	beq.n	8000896 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	3301      	adds	r3, #1
 800088c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800088e:	7b7b      	ldrb	r3, [r7, #13]
 8000890:	2b40      	cmp	r3, #64	@ 0x40
 8000892:	d9f0      	bls.n	8000876 <SD_TxDataBlock+0x62>
 8000894:	e000      	b.n	8000898 <SD_TxDataBlock+0x84>
        break;
 8000896:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000898:	bf00      	nop
 800089a:	f7ff fed9 	bl	8000650 <SPI_RxByte>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0fa      	beq.n	800089a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	2b05      	cmp	r3, #5
 80008ac:	d101      	bne.n	80008b2 <SD_TxDataBlock+0x9e>
    return TRUE;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e000      	b.n	80008b4 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80008c8:	f7ff feee 	bl	80006a8 <SD_ReadyWait>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2bff      	cmp	r3, #255	@ 0xff
 80008d0:	d001      	beq.n	80008d6 <SD_SendCmd+0x1a>
    return 0xFF;
 80008d2:	23ff      	movs	r3, #255	@ 0xff
 80008d4:	e040      	b.n	8000958 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fe9f 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	0e1b      	lsrs	r3, r3, #24
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fe99 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	0c1b      	lsrs	r3, r3, #16
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe93 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe8d 	bl	800061c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe88 	bl	800061c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800090c:	2300      	movs	r3, #0
 800090e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	2b40      	cmp	r3, #64	@ 0x40
 8000914:	d101      	bne.n	800091a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000916:	2395      	movs	r3, #149	@ 0x95
 8000918:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b48      	cmp	r3, #72	@ 0x48
 800091e:	d101      	bne.n	8000924 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000920:	2387      	movs	r3, #135	@ 0x87
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe78 	bl	800061c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	2b4c      	cmp	r3, #76	@ 0x4c
 8000930:	d101      	bne.n	8000936 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000932:	f7ff fe8d 	bl	8000650 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000936:	230a      	movs	r3, #10
 8000938:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800093a:	f7ff fe89 	bl	8000650 <SPI_RxByte>
 800093e:	4603      	mov	r3, r0
 8000940:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000942:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000946:	2b00      	cmp	r3, #0
 8000948:	da05      	bge.n	8000956 <SD_SendCmd+0x9a>
 800094a:	7bbb      	ldrb	r3, [r7, #14]
 800094c:	3b01      	subs	r3, #1
 800094e:	73bb      	strb	r3, [r7, #14]
 8000950:	7bbb      	ldrb	r3, [r7, #14]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f1      	bne.n	800093a <SD_SendCmd+0x7e>
  
  return res;
 8000956:	7b7b      	ldrb	r3, [r7, #13]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000970:	2301      	movs	r3, #1
 8000972:	e0d5      	b.n	8000b20 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000974:	4b6c      	ldr	r3, [pc, #432]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d003      	beq.n	800098a <SD_disk_initialize+0x2a>
    return Stat;        
 8000982:	4b69      	ldr	r3, [pc, #420]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	e0ca      	b.n	8000b20 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800098a:	f7ff fea9 	bl	80006e0 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800098e:	f7ff fe2d 	bl	80005ec <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000996:	2100      	movs	r1, #0
 8000998:	2040      	movs	r0, #64	@ 0x40
 800099a:	f7ff ff8f 	bl	80008bc <SD_SendCmd>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	f040 80a5 	bne.w	8000af0 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    timer1 = 100;
 80009a6:	4b61      	ldr	r3, [pc, #388]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 80009a8:	2264      	movs	r2, #100	@ 0x64
 80009aa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80009ac:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009b0:	2048      	movs	r0, #72	@ 0x48
 80009b2:	f7ff ff83 	bl	80008bc <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d158      	bne.n	8000a6e <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe44 	bl	8000650 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	f040 8083 	bne.w	8000af0 <SD_disk_initialize+0x190>
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	2baa      	cmp	r3, #170	@ 0xaa
 80009ee:	d17f      	bne.n	8000af0 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80009f0:	2100      	movs	r1, #0
 80009f2:	2077      	movs	r0, #119	@ 0x77
 80009f4:	f7ff ff62 	bl	80008bc <SD_SendCmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d807      	bhi.n	8000a0e <SD_disk_initialize+0xae>
 80009fe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a02:	2069      	movs	r0, #105	@ 0x69
 8000a04:	f7ff ff5a 	bl	80008bc <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d005      	beq.n	8000a1a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (timer1);
 8000a0e:	4b47      	ldr	r3, [pc, #284]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1eb      	bne.n	80009f0 <SD_disk_initialize+0x90>
 8000a18:	e000      	b.n	8000a1c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000a1a:	bf00      	nop
        
        if (timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d064      	beq.n	8000af0 <SD_disk_initialize+0x190>
 8000a26:	2100      	movs	r1, #0
 8000a28:	207a      	movs	r0, #122	@ 0x7a
 8000a2a:	f7ff ff47 	bl	80008bc <SD_SendCmd>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d15d      	bne.n	8000af0 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	73fb      	strb	r3, [r7, #15]
 8000a38:	e00c      	b.n	8000a54 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000a3a:	7bfc      	ldrb	r4, [r7, #15]
 8000a3c:	f7ff fe08 	bl	8000650 <SPI_RxByte>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	f104 0310 	add.w	r3, r4, #16
 8000a48:	443b      	add	r3, r7
 8000a4a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	3301      	adds	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d9ef      	bls.n	8000a3a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8000a5a:	7a3b      	ldrb	r3, [r7, #8]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SD_disk_initialize+0x108>
 8000a64:	2306      	movs	r3, #6
 8000a66:	e000      	b.n	8000a6a <SD_disk_initialize+0x10a>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	73bb      	strb	r3, [r7, #14]
 8000a6c:	e040      	b.n	8000af0 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2077      	movs	r0, #119	@ 0x77
 8000a72:	f7ff ff23 	bl	80008bc <SD_SendCmd>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d808      	bhi.n	8000a8e <SD_disk_initialize+0x12e>
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2069      	movs	r0, #105	@ 0x69
 8000a80:	f7ff ff1c 	bl	80008bc <SD_SendCmd>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d801      	bhi.n	8000a8e <SD_disk_initialize+0x12e>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e000      	b.n	8000a90 <SD_disk_initialize+0x130>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d10e      	bne.n	8000ab6 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2077      	movs	r0, #119	@ 0x77
 8000a9c:	f7ff ff0e 	bl	80008bc <SD_SendCmd>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d80e      	bhi.n	8000ac4 <SD_disk_initialize+0x164>
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2069      	movs	r0, #105	@ 0x69
 8000aaa:	f7ff ff07 	bl	80008bc <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d107      	bne.n	8000ac4 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000ab4:	e00d      	b.n	8000ad2 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2041      	movs	r0, #65	@ 0x41
 8000aba:	f7ff feff 	bl	80008bc <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d005      	beq.n	8000ad0 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (timer1);
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1e1      	bne.n	8000a92 <SD_disk_initialize+0x132>
 8000ace:	e000      	b.n	8000ad2 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000ad0:	bf00      	nop
      
      if (!timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <SD_disk_initialize+0x1cc>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d007      	beq.n	8000aec <SD_disk_initialize+0x18c>
 8000adc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ae0:	2050      	movs	r0, #80	@ 0x50
 8000ae2:	f7ff feeb 	bl	80008bc <SD_SendCmd>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <SD_disk_initialize+0x1d0>)
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8000af6:	f7ff fd85 	bl	8000604 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000afa:	f7ff fda9 	bl	8000650 <SPI_RxByte>
  
  if (type) 
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e001      	b.n	8000b1a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000b16:	f7ff fe2f 	bl	8000778 <SD_PowerOff>
  }
  
  return Stat;
 8000b1a:	4b03      	ldr	r3, [pc, #12]	@ (8000b28 <SD_disk_initialize+0x1c8>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b2db      	uxtb	r3, r3
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20002655 	.word	0x20002655
 8000b30:	20000094 	.word	0x20000094

08000b34 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8000b44:	2301      	movs	r3, #1
 8000b46:	e002      	b.n	8000b4e <SD_disk_status+0x1a>
  
  return Stat;
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <SD_disk_status+0x28>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000000 	.word	0x20000000

08000b60 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d102      	bne.n	8000b7c <SD_disk_read+0x1c>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	e051      	b.n	8000c24 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <SD_disk_read+0xcc>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	e048      	b.n	8000c24 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <SD_disk_read+0xd0>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	025b      	lsls	r3, r3, #9
 8000ba2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000ba4:	f7ff fd22 	bl	80005ec <SELECT>
  
  if (count == 1) 
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d111      	bne.n	8000bd2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000bae:	6879      	ldr	r1, [r7, #4]
 8000bb0:	2051      	movs	r0, #81	@ 0x51
 8000bb2:	f7ff fe83 	bl	80008bc <SD_SendCmd>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d129      	bne.n	8000c10 <SD_disk_read+0xb0>
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f7ff fdf1 	bl	80007a8 <SD_RxDataBlock>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d021      	beq.n	8000c10 <SD_disk_read+0xb0>
      count = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	e01e      	b.n	8000c10 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	2052      	movs	r0, #82	@ 0x52
 8000bd6:	f7ff fe71 	bl	80008bc <SD_SendCmd>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d117      	bne.n	8000c10 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000be0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be4:	68b8      	ldr	r0, [r7, #8]
 8000be6:	f7ff fddf 	bl	80007a8 <SD_RxDataBlock>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00a      	beq.n	8000c06 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bf6:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	603b      	str	r3, [r7, #0]
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1ed      	bne.n	8000be0 <SD_disk_read+0x80>
 8000c04:	e000      	b.n	8000c08 <SD_disk_read+0xa8>
          break;
 8000c06:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8000c08:	2100      	movs	r1, #0
 8000c0a:	204c      	movs	r0, #76	@ 0x4c
 8000c0c:	f7ff fe56 	bl	80008bc <SD_SendCmd>
    }
  }
  
  DESELECT();
 8000c10:	f7ff fcf8 	bl	8000604 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000c14:	f7ff fd1c 	bl	8000650 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf14      	ite	ne
 8000c1e:	2301      	movne	r3, #1
 8000c20:	2300      	moveq	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	20000094 	.word	0x20000094

08000c34 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	4603      	mov	r3, r0
 8000c42:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000c44:	7bfb      	ldrb	r3, [r7, #15]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <SD_disk_write+0x1c>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d101      	bne.n	8000c54 <SD_disk_write+0x20>
    return RES_PARERR;
 8000c50:	2304      	movs	r3, #4
 8000c52:	e06b      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8000c54:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <SD_disk_write+0x100>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e062      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8000c66:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <SD_disk_write+0x100>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000c74:	2302      	movs	r3, #2
 8000c76:	e059      	b.n	8000d2c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8000c78:	4b2f      	ldr	r3, [pc, #188]	@ (8000d38 <SD_disk_write+0x104>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	025b      	lsls	r3, r3, #9
 8000c88:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8000c8a:	f7ff fcaf 	bl	80005ec <SELECT>
  
  if (count == 1) 
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d110      	bne.n	8000cb6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	2058      	movs	r0, #88	@ 0x58
 8000c98:	f7ff fe10 	bl	80008bc <SD_SendCmd>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d13a      	bne.n	8000d18 <SD_disk_write+0xe4>
 8000ca2:	21fe      	movs	r1, #254	@ 0xfe
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f7ff fdb5 	bl	8000814 <SD_TxDataBlock>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d033      	beq.n	8000d18 <SD_disk_write+0xe4>
      count = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	e030      	b.n	8000d18 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8000cb6:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <SD_disk_write+0x104>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	2077      	movs	r0, #119	@ 0x77
 8000cc6:	f7ff fdf9 	bl	80008bc <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cca:	6839      	ldr	r1, [r7, #0]
 8000ccc:	2057      	movs	r0, #87	@ 0x57
 8000cce:	f7ff fdf5 	bl	80008bc <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2059      	movs	r0, #89	@ 0x59
 8000cd6:	f7ff fdf1 	bl	80008bc <SD_SendCmd>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d11b      	bne.n	8000d18 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000ce0:	21fc      	movs	r1, #252	@ 0xfc
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f7ff fd96 	bl	8000814 <SD_TxDataBlock>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00a      	beq.n	8000d04 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000cf4:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1ee      	bne.n	8000ce0 <SD_disk_write+0xac>
 8000d02:	e000      	b.n	8000d06 <SD_disk_write+0xd2>
          break;
 8000d04:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8000d06:	21fd      	movs	r1, #253	@ 0xfd
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fd83 	bl	8000814 <SD_TxDataBlock>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d101      	bne.n	8000d18 <SD_disk_write+0xe4>
      {        
        count = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8000d18:	f7ff fc74 	bl	8000604 <DESELECT>
  SPI_RxByte();
 8000d1c:	f7ff fc98 	bl	8000650 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	bf14      	ite	ne
 8000d26:	2301      	movne	r3, #1
 8000d28:	2300      	moveq	r3, #0
 8000d2a:	b2db      	uxtb	r3, r3
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000094 	.word	0x20000094

08000d3c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	603a      	str	r2, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000d56:	2304      	movs	r3, #4
 8000d58:	e119      	b.n	8000f8e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b05      	cmp	r3, #5
 8000d64:	d129      	bne.n	8000dba <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8000d66:	6a3b      	ldr	r3, [r7, #32]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d017      	beq.n	8000d9e <SD_disk_ioctl+0x62>
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	dc1f      	bgt.n	8000db2 <SD_disk_ioctl+0x76>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <SD_disk_ioctl+0x40>
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d00b      	beq.n	8000d92 <SD_disk_ioctl+0x56>
 8000d7a:	e01a      	b.n	8000db2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d7c:	f7ff fd08 	bl	8000790 <SD_CheckPower>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d86:	f7ff fcf7 	bl	8000778 <SD_PowerOff>
      res = RES_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d90:	e0fb      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d92:	f7ff fca5 	bl	80006e0 <SD_PowerOn>
      res = RES_OK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d9c:	e0f5      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	1c5c      	adds	r4, r3, #1
 8000da2:	f7ff fcf5 	bl	8000790 <SD_CheckPower>
 8000da6:	4603      	mov	r3, r0
 8000da8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000daa:	2300      	movs	r3, #0
 8000dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000db0:	e0eb      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8000db2:	2304      	movs	r3, #4
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000db8:	e0e7      	b.n	8000f8a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8000dba:	4b77      	ldr	r3, [pc, #476]	@ (8000f98 <SD_disk_ioctl+0x25c>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e0e0      	b.n	8000f8e <SD_disk_ioctl+0x252>
    
    SELECT();
 8000dcc:	f7ff fc0e 	bl	80005ec <SELECT>
    
    switch (ctrl) 
 8000dd0:	79bb      	ldrb	r3, [r7, #6]
 8000dd2:	2b0d      	cmp	r3, #13
 8000dd4:	f200 80ca 	bhi.w	8000f6c <SD_disk_ioctl+0x230>
 8000dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <SD_disk_ioctl+0xa4>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000ed7 	.word	0x08000ed7
 8000de4:	08000e19 	.word	0x08000e19
 8000de8:	08000ec7 	.word	0x08000ec7
 8000dec:	08000f6d 	.word	0x08000f6d
 8000df0:	08000f6d 	.word	0x08000f6d
 8000df4:	08000f6d 	.word	0x08000f6d
 8000df8:	08000f6d 	.word	0x08000f6d
 8000dfc:	08000f6d 	.word	0x08000f6d
 8000e00:	08000f6d 	.word	0x08000f6d
 8000e04:	08000f6d 	.word	0x08000f6d
 8000e08:	08000f6d 	.word	0x08000f6d
 8000e0c:	08000ee9 	.word	0x08000ee9
 8000e10:	08000f0d 	.word	0x08000f0d
 8000e14:	08000f31 	.word	0x08000f31
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8000e18:	2100      	movs	r1, #0
 8000e1a:	2049      	movs	r0, #73	@ 0x49
 8000e1c:	f7ff fd4e 	bl	80008bc <SD_SendCmd>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 80a6 	bne.w	8000f74 <SD_disk_ioctl+0x238>
 8000e28:	f107 030c 	add.w	r3, r7, #12
 8000e2c:	2110      	movs	r1, #16
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fcba 	bl	80007a8 <SD_RxDataBlock>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 809c 	beq.w	8000f74 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 8000e3c:	7b3b      	ldrb	r3, [r7, #12]
 8000e3e:	099b      	lsrs	r3, r3, #6
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d10d      	bne.n	8000e62 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e46:	7d7b      	ldrb	r3, [r7, #21]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	7d3b      	ldrb	r3, [r7, #20]
 8000e4c:	021b      	lsls	r3, r3, #8
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	3301      	adds	r3, #1
 8000e56:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000e58:	8bfb      	ldrh	r3, [r7, #30]
 8000e5a:	029a      	lsls	r2, r3, #10
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e02d      	b.n	8000ebe <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e62:	7c7b      	ldrb	r3, [r7, #17]
 8000e64:	f003 030f 	and.w	r3, r3, #15
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	09db      	lsrs	r3, r3, #7
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	7d7b      	ldrb	r3, [r7, #21]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0306 	and.w	r3, r3, #6
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	3302      	adds	r3, #2
 8000e86:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e8a:	7d3b      	ldrb	r3, [r7, #20]
 8000e8c:	099b      	lsrs	r3, r3, #6
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	7cbb      	ldrb	r3, [r7, #18]
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3301      	adds	r3, #1
 8000eae:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000eb0:	8bfa      	ldrh	r2, [r7, #30]
 8000eb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000eb6:	3b09      	subs	r3, #9
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000ec4:	e056      	b.n	8000f74 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ecc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ed4:	e055      	b.n	8000f82 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000ed6:	f7ff fbe7 	bl	80006a8 <SD_ReadyWait>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2bff      	cmp	r3, #255	@ 0xff
 8000ede:	d14b      	bne.n	8000f78 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ee6:	e047      	b.n	8000f78 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2049      	movs	r0, #73	@ 0x49
 8000eec:	f7ff fce6 	bl	80008bc <SD_SendCmd>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d142      	bne.n	8000f7c <SD_disk_ioctl+0x240>
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	6a38      	ldr	r0, [r7, #32]
 8000efa:	f7ff fc55 	bl	80007a8 <SD_RxDataBlock>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d03b      	beq.n	8000f7c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f0a:	e037      	b.n	8000f7c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	204a      	movs	r0, #74	@ 0x4a
 8000f10:	f7ff fcd4 	bl	80008bc <SD_SendCmd>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d132      	bne.n	8000f80 <SD_disk_ioctl+0x244>
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	6a38      	ldr	r0, [r7, #32]
 8000f1e:	f7ff fc43 	bl	80007a8 <SD_RxDataBlock>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d02b      	beq.n	8000f80 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000f2e:	e027      	b.n	8000f80 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8000f30:	2100      	movs	r1, #0
 8000f32:	207a      	movs	r0, #122	@ 0x7a
 8000f34:	f7ff fcc2 	bl	80008bc <SD_SendCmd>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d116      	bne.n	8000f6c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f44:	e00b      	b.n	8000f5e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8000f46:	6a3c      	ldr	r4, [r7, #32]
 8000f48:	1c63      	adds	r3, r4, #1
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	f7ff fb80 	bl	8000650 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000f54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f58:	3301      	adds	r3, #1
 8000f5a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d9ef      	bls.n	8000f46 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f72:	e006      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f74:	bf00      	nop
 8000f76:	e004      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f78:	bf00      	nop
 8000f7a:	e002      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f7c:	bf00      	nop
 8000f7e:	e000      	b.n	8000f82 <SD_disk_ioctl+0x246>
      break;
 8000f80:	bf00      	nop
    }
    
    DESELECT();
 8000f82:	f7ff fb3f 	bl	8000604 <DESELECT>
    SPI_RxByte();
 8000f86:	f7ff fb63 	bl	8000650 <SPI_RxByte>
  }
  
  return res;
 8000f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	372c      	adds	r7, #44	@ 0x2c
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd90      	pop	{r4, r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000000 	.word	0x20000000

08000f9c <HAL_TIM_PeriodElapsedCallback>:
UINT bw;                           // Bytes written to the file

///////////Test Vrriabblles  ////////
FRESULT fresult2;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM13) {  // Ensure this corresponds to the correct timer
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12f      	bne.n	800100e <HAL_TIM_PeriodElapsedCallback+0x72>
        SDCardCount++;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a19      	ldr	r2, [pc, #100]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fb6:	6013      	str	r3, [r2, #0]
        if (SDCardCount > 30000) {
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f247 5230 	movw	r2, #30000	@ 0x7530
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d924      	bls.n	800100e <HAL_TIM_PeriodElapsedCallback+0x72>
            SDCardCount = 0;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

            // Open the file for appending
            f_open(&fil, "Data.txt", FA_OPEN_APPEND | FA_WRITE);
 8000fca:	2232      	movs	r2, #50	@ 0x32
 8000fcc:	4914      	ldr	r1, [pc, #80]	@ (8001020 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000fce:	4815      	ldr	r0, [pc, #84]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000fd0:	f004 fdfc 	bl	8005bcc <f_open>

            // Format the record number and encoder tick data into a string
            sprintf(buffer, "Record %lu: Encoder1: %lu, Encoder2: %lu\n", record_number, encoder_ticks, encoder_ticks2);
 8000fd4:	4b14      	ldr	r3, [pc, #80]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000fda:	6819      	ldr	r1, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4913      	ldr	r1, [pc, #76]	@ (8001034 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fe8:	f005 fa50 	bl	800648c <siprintf>

            // Write to the file
            f_write(&fil, buffer, strlen(buffer), NULL);
 8000fec:	4812      	ldr	r0, [pc, #72]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000fee:	f7ff f90f 	bl	8000210 <strlen>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4910      	ldr	r1, [pc, #64]	@ (8001038 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ff8:	480a      	ldr	r0, [pc, #40]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ffa:	f004 ffaf 	bl	8005f5c <f_write>

            // Close the file
            f_close(&fil);
 8000ffe:	4809      	ldr	r0, [pc, #36]	@ (8001024 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001000:	f005 f9be 	bl	8006380 <f_close>

            // Increment the record number
            record_number++;
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800100c:	6013      	str	r3, [r2, #0]
        }
    }
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40001c00 	.word	0x40001c00
 800101c:	200001e8 	.word	0x200001e8
 8001020:	08006de4 	.word	0x08006de4
 8001024:	20001220 	.word	0x20001220
 8001028:	20000004 	.word	0x20000004
 800102c:	200001e0 	.word	0x200001e0
 8001030:	200001e4 	.word	0x200001e4
 8001034:	08006df0 	.word	0x08006df0
 8001038:	20002254 	.word	0x20002254

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001040:	f000 fa2e 	bl	80014a0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f000 fc69 	bl	800191a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 f850 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f000 f9c6 	bl	80013dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8001050:	f000 f8f0 	bl	8001234 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001054:	f000 f948 	bl	80012e8 <MX_TIM4_Init>
  MX_TIM13_Init();
 8001058:	f000 f99c 	bl	8001394 <MX_TIM13_Init>
  MX_SPI4_Init();
 800105c:	f000 f8ac 	bl	80011b8 <MX_SPI4_Init>
  MX_FATFS_Init();
 8001060:	f002 ff08 	bl	8003e74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  // Start encoder timers
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001064:	213c      	movs	r1, #60	@ 0x3c
 8001066:	4817      	ldr	r0, [pc, #92]	@ (80010c4 <main+0x88>)
 8001068:	f002 fba8 	bl	80037bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 800106c:	213c      	movs	r1, #60	@ 0x3c
 800106e:	4816      	ldr	r0, [pc, #88]	@ (80010c8 <main+0x8c>)
 8001070:	f002 fba4 	bl	80037bc <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);  // Start TIM2 in interrupt mode
 8001074:	4815      	ldr	r0, [pc, #84]	@ (80010cc <main+0x90>)
 8001076:	f002 fa83 	bl	8003580 <HAL_TIM_Base_Start_IT>
  fresult = f_mount(&fs, "/", 1);
 800107a:	2201      	movs	r2, #1
 800107c:	4914      	ldr	r1, [pc, #80]	@ (80010d0 <main+0x94>)
 800107e:	4815      	ldr	r0, [pc, #84]	@ (80010d4 <main+0x98>)
 8001080:	f004 fd5e 	bl	8005b40 <f_mount>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <main+0x9c>)
 800108a:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <main+0x9c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10b      	bne.n	80010ac <main+0x70>
      // Create and close the file initially
      fresult = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001094:	220a      	movs	r2, #10
 8001096:	4911      	ldr	r1, [pc, #68]	@ (80010dc <main+0xa0>)
 8001098:	4811      	ldr	r0, [pc, #68]	@ (80010e0 <main+0xa4>)
 800109a:	f004 fd97 	bl	8005bcc <f_open>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b0d      	ldr	r3, [pc, #52]	@ (80010d8 <main+0x9c>)
 80010a4:	701a      	strb	r2, [r3, #0]
      f_close(&fil);
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <main+0xa4>)
 80010a8:	f005 f96a 	bl	8006380 <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <main+0x8c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <main+0xa8>)
 80010b4:	6013      	str	r3, [r2, #0]
      encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);
 80010b6:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <main+0x88>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <main+0xac>)
 80010be:	6013      	str	r3, [r2, #0]
      encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 80010c0:	bf00      	nop
 80010c2:	e7f3      	b.n	80010ac <main+0x70>
 80010c4:	20000148 	.word	0x20000148
 80010c8:	200000fc 	.word	0x200000fc
 80010cc:	20000194 	.word	0x20000194
 80010d0:	08006e1c 	.word	0x08006e1c
 80010d4:	200001ec 	.word	0x200001ec
 80010d8:	20002250 	.word	0x20002250
 80010dc:	08006de4 	.word	0x08006de4
 80010e0:	20001220 	.word	0x20001220
 80010e4:	200001e0 	.word	0x200001e0
 80010e8:	200001e4 	.word	0x200001e4

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b094      	sub	sp, #80	@ 0x50
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0320 	add.w	r3, r7, #32
 80010f6:	2230      	movs	r2, #48	@ 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 f9e8 	bl	80064d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001110:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <SystemClock_Config+0xc4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a26      	ldr	r2, [pc, #152]	@ (80011b0 <SystemClock_Config+0xc4>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <SystemClock_Config+0xc4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <SystemClock_Config+0xc8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001130:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <SystemClock_Config+0xc8>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <SystemClock_Config+0xc8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001158:	2319      	movs	r3, #25
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800115c:	2390      	movs	r3, #144	@ 0x90
 800115e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001160:	2302      	movs	r3, #2
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f000 ff81 	bl	8002074 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001178:	f000 f9be 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001188:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800118c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2102      	movs	r1, #2
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fa0f 	bl	80025bc <HAL_RCC_ClockConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80011a4:	f000 f9a8 	bl	80014f8 <Error_Handler>
  }
}
 80011a8:	bf00      	nop
 80011aa:	3750      	adds	r7, #80	@ 0x50
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40007000 	.word	0x40007000

080011b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <MX_SPI4_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <MX_SPI4_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_SPI4_Init+0x74>)
 80011c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <MX_SPI4_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <MX_SPI4_Init+0x74>)
 80011d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011d6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <MX_SPI4_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <MX_SPI4_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011e4:	4b11      	ldr	r3, [pc, #68]	@ (800122c <MX_SPI4_Init+0x74>)
 80011e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ea:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <MX_SPI4_Init+0x74>)
 80011ee:	2228      	movs	r2, #40	@ 0x28
 80011f0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	@ (800122c <MX_SPI4_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <MX_SPI4_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <MX_SPI4_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_SPI4_Init+0x74>)
 8001206:	2207      	movs	r2, #7
 8001208:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <MX_SPI4_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001210:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_SPI4_Init+0x74>)
 8001212:	2208      	movs	r2, #8
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	@ (800122c <MX_SPI4_Init+0x74>)
 8001218:	f001 fb82 	bl	8002920 <HAL_SPI_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f969 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000098 	.word	0x20000098
 8001230:	40013400 	.word	0x40013400

08001234 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08c      	sub	sp, #48	@ 0x30
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2224      	movs	r2, #36	@ 0x24
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 f944 	bl	80064d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001248:	463b      	mov	r3, r7
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001252:	4b23      	ldr	r3, [pc, #140]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001254:	4a23      	ldr	r2, [pc, #140]	@ (80012e4 <MX_TIM1_Init+0xb0>)
 8001256:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001258:	4b21      	ldr	r3, [pc, #132]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001264:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001266:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800126a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_TIM1_Init+0xac>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <MX_TIM1_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800127e:	2303      	movs	r3, #3
 8001280:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	480d      	ldr	r0, [pc, #52]	@ (80012e0 <MX_TIM1_Init+0xac>)
 80012aa:	f002 f9e1 	bl	8003670 <HAL_TIM_Encoder_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012b4:	f000 f920 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c4:	463b      	mov	r3, r7
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <MX_TIM1_Init+0xac>)
 80012ca:	f002 fd27 	bl	8003d1c <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012d4:	f000 f910 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3730      	adds	r7, #48	@ 0x30
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200000fc 	.word	0x200000fc
 80012e4:	40010000 	.word	0x40010000

080012e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	@ 0x30
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	2224      	movs	r2, #36	@ 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f005 f8ea 	bl	80064d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001306:	4b21      	ldr	r3, [pc, #132]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001308:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <MX_TIM4_Init+0xa8>)
 800130a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <MX_TIM4_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001318:	4b1c      	ldr	r3, [pc, #112]	@ (800138c <MX_TIM4_Init+0xa4>)
 800131a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800131e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b19      	ldr	r3, [pc, #100]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800132c:	2303      	movs	r3, #3
 800132e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001334:	2301      	movs	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	480d      	ldr	r0, [pc, #52]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001358:	f002 f98a 	bl	8003670 <HAL_TIM_Encoder_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001362:	f000 f8c9 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	@ (800138c <MX_TIM4_Init+0xa4>)
 8001374:	f002 fcd2 	bl	8003d1c <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800137e:	f000 f8bb 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	@ 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000148 	.word	0x20000148
 8001390:	40000800 	.word	0x40000800

08001394 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_TIM13_Init+0x40>)
 800139a:	4a0f      	ldr	r2, [pc, #60]	@ (80013d8 <MX_TIM13_Init+0x44>)
 800139c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_TIM13_Init+0x40>)
 80013c0:	f002 f886 	bl	80034d0 <HAL_TIM_Base_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80013ca:	f000 f895 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000194 	.word	0x20000194
 80013d8:	40001c00 	.word	0x40001c00

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	@ 0x28
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	4b29      	ldr	r3, [pc, #164]	@ (8001498 <MX_GPIO_Init+0xbc>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <MX_GPIO_Init+0xbc>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b26      	ldr	r3, [pc, #152]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <MX_GPIO_Init+0xbc>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a1c      	ldr	r2, [pc, #112]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001428:	f043 0302 	orr.w	r3, r3, #2
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
 8001438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <MX_GPIO_Init+0xbc>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a16      	ldr	r2, [pc, #88]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	@ (8001498 <MX_GPIO_Init+0xbc>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800146a:	2200      	movs	r2, #0
 800146c:	2101      	movs	r1, #1
 800146e:	480b      	ldr	r0, [pc, #44]	@ (800149c <MX_GPIO_Init+0xc0>)
 8001470:	f000 fde6 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001474:	2301      	movs	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_GPIO_Init+0xc0>)
 800148c:	f000 fc2c 	bl	8001ce8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40020400 	.word	0x40020400

080014a0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014b2:	f000 fba1 	bl	8001bf8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014b6:	2301      	movs	r3, #1
 80014b8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80014c2:	231f      	movs	r3, #31
 80014c4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80014c6:	2387      	movs	r3, #135	@ 0x87
 80014c8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014ce:	2300      	movs	r3, #0
 80014d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014d6:	2301      	movs	r3, #1
 80014d8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014e2:	463b      	mov	r3, r7
 80014e4:	4618      	mov	r0, r3
 80014e6:	f000 fbbf 	bl	8001c68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014ea:	2004      	movs	r0, #4
 80014ec:	f000 fb9c 	bl	8001c28 <HAL_MPU_Enable>

}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_MspInit+0x44>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_MspInit+0x44>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_MspInit+0x44>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_MspInit+0x44>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800152c:	6453      	str	r3, [r2, #68]	@ 0x44
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_MspInit+0x44>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800

0800154c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <HAL_SPI_MspInit+0x7c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d127      	bne.n	80015be <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a16      	ldr	r2, [pc, #88]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 8001574:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_SPI_MspInit+0x80>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800159e:	2364      	movs	r3, #100	@ 0x64
 80015a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ae:	2305      	movs	r3, #5
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <HAL_SPI_MspInit+0x84>)
 80015ba:	f000 fb95 	bl	8001ce8 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80015be:	bf00      	nop
 80015c0:	3728      	adds	r7, #40	@ 0x28
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40013400 	.word	0x40013400
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000

080015d4 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a37      	ldr	r2, [pc, #220]	@ (80016d0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d131      	bne.n	800165a <HAL_TIM_Encoder_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015f6:	4b37      	ldr	r3, [pc, #220]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	4a36      	ldr	r2, [pc, #216]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6453      	str	r3, [r2, #68]	@ 0x44
 8001602:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	4b31      	ldr	r3, [pc, #196]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a30      	ldr	r2, [pc, #192]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001614:	f043 0310 	orr.w	r3, r3, #16
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001626:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001638:	2301      	movs	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4825      	ldr	r0, [pc, #148]	@ (80016d8 <HAL_TIM_Encoder_MspInit+0x104>)
 8001644:	f000 fb50 	bl	8001ce8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2100      	movs	r1, #0
 800164c:	2019      	movs	r0, #25
 800164e:	f000 fa9c 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001652:	2019      	movs	r0, #25
 8001654:	f000 fab5 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001658:	e035      	b.n	80016c6 <HAL_TIM_Encoder_MspInit+0xf2>
  else if(htim_encoder->Instance==TIM4)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1f      	ldr	r2, [pc, #124]	@ (80016dc <HAL_TIM_Encoder_MspInit+0x108>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d130      	bne.n	80016c6 <HAL_TIM_Encoder_MspInit+0xf2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b18      	ldr	r3, [pc, #96]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167c:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6313      	str	r3, [r2, #48]	@ 0x30
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x100>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001694:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a6:	2302      	movs	r3, #2
 80016a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 80016b2:	f000 fb19 	bl	8001ce8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	201e      	movs	r0, #30
 80016bc:	f000 fa65 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016c0:	201e      	movs	r0, #30
 80016c2:	f000 fa7e 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
}
 80016c6:	bf00      	nop
 80016c8:	3730      	adds	r7, #48	@ 0x30
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40010000 	.word	0x40010000
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40000800 	.word	0x40000800
 80016e0:	40020c00 	.word	0x40020c00

080016e4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_TIM_Base_MspInit+0x48>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	4a0c      	ldr	r2, [pc, #48]	@ (800172c <HAL_TIM_Base_MspInit+0x48>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001700:	6413      	str	r3, [r2, #64]	@ 0x40
 8001702:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <HAL_TIM_Base_MspInit+0x48>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	202c      	movs	r0, #44	@ 0x2c
 8001714:	f000 fa39 	bl	8001b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001718:	202c      	movs	r0, #44	@ 0x2c
 800171a:	f000 fa52 	bl	8001bc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001c00 	.word	0x40001c00
 800172c:	40023800 	.word	0x40023800

08001730 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t timer1, timer2;

void SDTimer_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  if(timer1 > 0)
 8001734:	4b0e      	ldr	r3, [pc, #56]	@ (8001770 <SDTimer_Handler+0x40>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <SDTimer_Handler+0x1c>
    timer1--;
 800173e:	4b0c      	ldr	r3, [pc, #48]	@ (8001770 <SDTimer_Handler+0x40>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	3b01      	subs	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <SDTimer_Handler+0x40>)
 800174a:	701a      	strb	r2, [r3, #0]

  if(timer2 > 0)
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <SDTimer_Handler+0x44>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <SDTimer_Handler+0x34>
    timer2--;
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <SDTimer_Handler+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <SDTimer_Handler+0x44>)
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20002655 	.word	0x20002655
 8001774:	20002656 	.word	0x20002656

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ce:	f000 f8e1 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017de:	f002 f89b 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000fc 	.word	0x200000fc

080017ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	  FatFsCnt++;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <TIM4_IRQHandler+0x30>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <TIM4_IRQHandler+0x30>)
 80017fc:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <TIM4_IRQHandler+0x30>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b09      	cmp	r3, #9
 8001806:	d904      	bls.n	8001812 <TIM4_IRQHandler+0x26>
	  {
	    FatFsCnt = 0;
 8001808:	4b04      	ldr	r3, [pc, #16]	@ (800181c <TIM4_IRQHandler+0x30>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800180e:	f7ff ff8f 	bl	8001730 <SDTimer_Handler>
	  }
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001812:	4803      	ldr	r0, [pc, #12]	@ (8001820 <TIM4_IRQHandler+0x34>)
 8001814:	f002 f880 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20002654 	.word	0x20002654
 8001820:	20000148 	.word	0x20000148

08001824 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800182a:	f002 f875 	bl	8003918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000194 	.word	0x20000194

08001838 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001840:	4a14      	ldr	r2, [pc, #80]	@ (8001894 <_sbrk+0x5c>)
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <_sbrk+0x60>)
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <_sbrk+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <_sbrk+0x64>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <_sbrk+0x68>)
 8001858:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	429a      	cmp	r2, r3
 8001866:	d207      	bcs.n	8001878 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001868:	f004 fe3a 	bl	80064e0 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	220c      	movs	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e009      	b.n	800188c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001878:	4b08      	ldr	r3, [pc, #32]	@ (800189c <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	4a05      	ldr	r2, [pc, #20]	@ (800189c <_sbrk+0x64>)
 8001888:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20050000 	.word	0x20050000
 8001898:	00000400 	.word	0x00000400
 800189c:	20002658 	.word	0x20002658
 80018a0:	200027e8 	.word	0x200027e8

080018a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <SystemInit+0x20>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <SystemInit+0x20>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001900 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018cc:	f7ff ffea 	bl	80018a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d2:	490d      	ldr	r1, [pc, #52]	@ (8001908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d4:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018d8:	e002      	b.n	80018e0 <LoopCopyDataInit>

080018da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018de:	3304      	adds	r3, #4

080018e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e4:	d3f9      	bcc.n	80018da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ec:	e001      	b.n	80018f2 <LoopFillZerobss>

080018ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f0:	3204      	adds	r2, #4

080018f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f4:	d3fb      	bcc.n	80018ee <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80018f6:	f004 fdf9 	bl	80064ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fa:	f7ff fb9f 	bl	800103c <main>
  bx  lr    
 80018fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001900:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001908:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800190c:	08006f38 	.word	0x08006f38
  ldr r2, =_sbss
 8001910:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001914:	200027e4 	.word	0x200027e4

08001918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001918:	e7fe      	b.n	8001918 <ADC_IRQHandler>

0800191a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800191e:	2003      	movs	r0, #3
 8001920:	f000 f928 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001924:	200f      	movs	r0, #15
 8001926:	f000 f805 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192a:	f7ff fdeb 	bl	8001504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	@ (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f943 	bl	8001bde <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f90b 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	@ (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000008 	.word	0x20000008
 800198c:	20000010 	.word	0x20000010
 8001990:	2000000c 	.word	0x2000000c

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000010 	.word	0x20000010
 80019b8:	2000265c 	.word	0x2000265c

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000265c 	.word	0x2000265c

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	05fa0000 	.word	0x05fa0000

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	@ (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	@ (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	@ (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	@ 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	@ (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff3e 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff8e 	bl	8001ac8 <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5d 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff31 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa2 	bl	8001b30 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bfc:	f3bf 8f5f 	dmb	sy
}
 8001c00:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <HAL_MPU_Disable+0x28>)
 8001c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c06:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <HAL_MPU_Disable+0x28>)
 8001c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c0c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c0e:	4b05      	ldr	r3, [pc, #20]	@ (8001c24 <HAL_MPU_Disable+0x2c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000ed00 	.word	0xe000ed00
 8001c24:	e000ed90 	.word	0xe000ed90

08001c28 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c30:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_MPU_Enable+0x38>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <HAL_MPU_Enable+0x3c>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	4a09      	ldr	r2, [pc, #36]	@ (8001c64 <HAL_MPU_Enable+0x3c>)
 8001c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c44:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c46:	f3bf 8f4f 	dsb	sy
}
 8001c4a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c4c:	f3bf 8f6f 	isb	sy
}
 8001c50:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed90 	.word	0xe000ed90
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	785a      	ldrb	r2, [r3, #1]
 8001c74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c76:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c84:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_MPU_ConfigRegion+0x7c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	7b1b      	ldrb	r3, [r3, #12]
 8001c90:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7adb      	ldrb	r3, [r3, #11]
 8001c96:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7a9b      	ldrb	r3, [r3, #10]
 8001c9e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ca0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7b5b      	ldrb	r3, [r3, #13]
 8001ca6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ca8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7b9b      	ldrb	r3, [r3, #14]
 8001cae:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7bdb      	ldrb	r3, [r3, #15]
 8001cb6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7a5b      	ldrb	r3, [r3, #9]
 8001cbe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7a1b      	ldrb	r3, [r3, #8]
 8001cc6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cc8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cd2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cd4:	6113      	str	r3, [r2, #16]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed90 	.word	0xe000ed90

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	@ 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e175      	b.n	8001ff4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8164 	bne.w	8001fee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x56>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80be 	beq.w	8001fee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	4b66      	ldr	r3, [pc, #408]	@ (800200c <HAL_GPIO_Init+0x324>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_GPIO_Init+0x324>)
 8001e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e7e:	4b63      	ldr	r3, [pc, #396]	@ (800200c <HAL_GPIO_Init+0x324>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e8a:	4a61      	ldr	r2, [pc, #388]	@ (8002010 <HAL_GPIO_Init+0x328>)
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	089b      	lsrs	r3, r3, #2
 8001e90:	3302      	adds	r3, #2
 8001e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	@ (8002014 <HAL_GPIO_Init+0x32c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d037      	beq.n	8001f26 <HAL_GPIO_Init+0x23e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a57      	ldr	r2, [pc, #348]	@ (8002018 <HAL_GPIO_Init+0x330>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d031      	beq.n	8001f22 <HAL_GPIO_Init+0x23a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a56      	ldr	r2, [pc, #344]	@ (800201c <HAL_GPIO_Init+0x334>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <HAL_GPIO_Init+0x236>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a55      	ldr	r2, [pc, #340]	@ (8002020 <HAL_GPIO_Init+0x338>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d025      	beq.n	8001f1a <HAL_GPIO_Init+0x232>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a54      	ldr	r2, [pc, #336]	@ (8002024 <HAL_GPIO_Init+0x33c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01f      	beq.n	8001f16 <HAL_GPIO_Init+0x22e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a53      	ldr	r2, [pc, #332]	@ (8002028 <HAL_GPIO_Init+0x340>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x22a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a52      	ldr	r2, [pc, #328]	@ (800202c <HAL_GPIO_Init+0x344>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x226>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a51      	ldr	r2, [pc, #324]	@ (8002030 <HAL_GPIO_Init+0x348>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x222>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a50      	ldr	r2, [pc, #320]	@ (8002034 <HAL_GPIO_Init+0x34c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x21e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	@ (8002038 <HAL_GPIO_Init+0x350>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x21a>
 8001efe:	2309      	movs	r3, #9
 8001f00:	e012      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f02:	230a      	movs	r3, #10
 8001f04:	e010      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f06:	2308      	movs	r3, #8
 8001f08:	e00e      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00c      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f0e:	2306      	movs	r3, #6
 8001f10:	e00a      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f12:	2305      	movs	r3, #5
 8001f14:	e008      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f16:	2304      	movs	r3, #4
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e004      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f1e:	2302      	movs	r3, #2
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_GPIO_Init+0x240>
 8001f26:	2300      	movs	r3, #0
 8001f28:	69fa      	ldr	r2, [r7, #28]
 8001f2a:	f002 0203 	and.w	r2, r2, #3
 8001f2e:	0092      	lsls	r2, r2, #2
 8001f30:	4093      	lsls	r3, r2
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f38:	4935      	ldr	r1, [pc, #212]	@ (8002010 <HAL_GPIO_Init+0x328>)
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	3302      	adds	r3, #2
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f46:	4b3d      	ldr	r3, [pc, #244]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6a:	4a34      	ldr	r2, [pc, #208]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f70:	4b32      	ldr	r3, [pc, #200]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f94:	4a29      	ldr	r2, [pc, #164]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9a:	4b28      	ldr	r3, [pc, #160]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_GPIO_Init+0x354>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61fb      	str	r3, [r7, #28]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b0f      	cmp	r3, #15
 8001ff8:	f67f ae86 	bls.w	8001d08 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023800 	.word	0x40023800
 8002010:	40013800 	.word	0x40013800
 8002014:	40020000 	.word	0x40020000
 8002018:	40020400 	.word	0x40020400
 800201c:	40020800 	.word	0x40020800
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40021000 	.word	0x40021000
 8002028:	40021400 	.word	0x40021400
 800202c:	40021800 	.word	0x40021800
 8002030:	40021c00 	.word	0x40021c00
 8002034:	40022000 	.word	0x40022000
 8002038:	40022400 	.word	0x40022400
 800203c:	40013c00 	.word	0x40013c00

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800205c:	e003      	b.n	8002066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	041a      	lsls	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	619a      	str	r2, [r3, #24]
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e291      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8087 	beq.w	80021a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002098:	4b96      	ldr	r3, [pc, #600]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d00c      	beq.n	80020be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a4:	4b93      	ldr	r3, [pc, #588]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d112      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
 80020b0:	4b90      	ldr	r3, [pc, #576]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020bc:	d10b      	bne.n	80020d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020be:	4b8d      	ldr	r3, [pc, #564]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d06c      	beq.n	80021a4 <HAL_RCC_OscConfig+0x130>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d168      	bne.n	80021a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e26b      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x7a>
 80020e0:	4b84      	ldr	r3, [pc, #528]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a83      	ldr	r2, [pc, #524]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ea:	6013      	str	r3, [r2, #0]
 80020ec:	e02e      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10c      	bne.n	8002110 <HAL_RCC_OscConfig+0x9c>
 80020f6:	4b7f      	ldr	r3, [pc, #508]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80020fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	4b7c      	ldr	r3, [pc, #496]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a7b      	ldr	r2, [pc, #492]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	e01d      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0xc0>
 800211a:	4b76      	ldr	r3, [pc, #472]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a75      	ldr	r2, [pc, #468]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	4b73      	ldr	r3, [pc, #460]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800212c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0xd8>
 8002134:	4b6f      	ldr	r3, [pc, #444]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a6e      	ldr	r2, [pc, #440]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800213a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b6c      	ldr	r3, [pc, #432]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a6b      	ldr	r2, [pc, #428]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff fc32 	bl	80019bc <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7ff fc2e 	bl	80019bc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	@ 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e21f      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b61      	ldr	r3, [pc, #388]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0xe8>
 800217a:	e014      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff fc1e 	bl	80019bc <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fc1a 	bl	80019bc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e20b      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b57      	ldr	r3, [pc, #348]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x110>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d069      	beq.n	8002286 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b2:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00b      	beq.n	80021d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021be:	4b4d      	ldr	r3, [pc, #308]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d11c      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
 80021ca:	4b4a      	ldr	r3, [pc, #296]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d116      	bne.n	8002204 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e1df      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ee:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	493d      	ldr	r1, [pc, #244]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002202:	e040      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fbd0 	bl	80019bc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002220:	f7ff fbcc 	bl	80019bc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e1bd      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223e:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	4929      	ldr	r1, [pc, #164]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a26      	ldr	r2, [pc, #152]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7ff fbac 	bl	80019bc <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002268:	f7ff fba8 	bl	80019bc <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e199      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d038      	beq.n	8002304 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d019      	beq.n	80022ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229a:	4b16      	ldr	r3, [pc, #88]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 800229c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800229e:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a6:	f7ff fb89 	bl	80019bc <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff fb85 	bl	80019bc <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e176      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x23a>
 80022cc:	e01a      	b.n	8002304 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d2:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <HAL_RCC_OscConfig+0x280>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7ff fb6f 	bl	80019bc <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e2:	f7ff fb6b 	bl	80019bc <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d903      	bls.n	80022f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e15c      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
 80022f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f8:	4b91      	ldr	r3, [pc, #580]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80022fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ee      	bne.n	80022e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a4 	beq.w	800245a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a87      	ldr	r2, [pc, #540]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b85      	ldr	r3, [pc, #532]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	@ (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002346:	4b7f      	ldr	r3, [pc, #508]	@ (8002544 <HAL_RCC_OscConfig+0x4d0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	@ (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff fb33 	bl	80019bc <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff fb2f 	bl	80019bc <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	@ 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e120      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	@ (8002544 <HAL_RCC_OscConfig+0x4d0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x31a>
 8002380:	4b6f      	ldr	r3, [pc, #444]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002384:	4a6e      	ldr	r2, [pc, #440]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6713      	str	r3, [r2, #112]	@ 0x70
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x33c>
 8002396:	4b6a      	ldr	r3, [pc, #424]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800239a:	4a69      	ldr	r2, [pc, #420]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a2:	4b67      	ldr	r3, [pc, #412]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	4a66      	ldr	r2, [pc, #408]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x35e>
 80023b8:	4b61      	ldr	r3, [pc, #388]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a60      	ldr	r2, [pc, #384]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x376>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d6:	4a5a      	ldr	r2, [pc, #360]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023de:	4b58      	ldr	r3, [pc, #352]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e2:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7ff fae3 	bl	80019bc <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff fadf 	bl	80019bc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0ce      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x386>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241e:	f7ff facd 	bl	80019bc <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff fac9 	bl	80019bc <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b8      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 80a4 	beq.w	80025ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d06b      	beq.n	8002548 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d149      	bne.n	800250c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b31      	ldr	r3, [pc, #196]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a30      	ldr	r2, [pc, #192]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800247e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff fa9a 	bl	80019bc <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248c:	f7ff fa96 	bl	80019bc <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e087      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69da      	ldr	r2, [r3, #28]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	019b      	lsls	r3, r3, #6
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4313      	orrs	r3, r2
 80024d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80024d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a18      	ldr	r2, [pc, #96]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff fa6a 	bl	80019bc <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff fa66 	bl	80019bc <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e057      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fe:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x478>
 800250a:	e04f      	b.n	80025ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a0b      	ldr	r2, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7ff fa50 	bl	80019bc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002520:	f7ff fa4c 	bl	80019bc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03d      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002532:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0x4ac>
 800253e:	e035      	b.n	80025ac <HAL_RCC_OscConfig+0x538>
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x544>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d028      	beq.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d121      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d11a      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002578:	4013      	ands	r3, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800257e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002580:	4293      	cmp	r3, r2
 8002582:	d111      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258e:	085b      	lsrs	r3, r3, #1
 8002590:	3b01      	subs	r3, #1
 8002592:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d107      	bne.n	80025a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	4965      	ldr	r1, [pc, #404]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a58      	ldr	r2, [pc, #352]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	4a52      	ldr	r2, [pc, #328]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800263a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800263e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b0:	f7ff f984 	bl	80019bc <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7ff f980 	bl	80019bc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 020f 	bic.w	r2, r3, #15
 80026f6:	4922      	ldr	r1, [pc, #136]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	490a      	ldr	r1, [pc, #40]	@ (8002788 <HAL_RCC_ClockConfig+0x1cc>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	@ (800278c <HAL_RCC_ClockConfig+0x1d0>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <HAL_RCC_ClockConfig+0x1d4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f8e0 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00
 8002784:	40023800 	.word	0x40023800
 8002788:	08006e64 	.word	0x08006e64
 800278c:	20000008 	.word	0x20000008
 8002790:	2000000c 	.word	0x2000000c

08002794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002798:	b090      	sub	sp, #64	@ 0x40
 800279a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
 80027a0:	2300      	movs	r3, #0
 80027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027ac:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d00d      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	f200 80a1 	bhi.w	8002900 <HAL_RCC_GetSysClockFreq+0x16c>
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_RCC_GetSysClockFreq+0x34>
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d003      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0x3a>
 80027c6:	e09b      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x184>)
 80027ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027cc:	e09b      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ce:	4b53      	ldr	r3, [pc, #332]	@ (800291c <HAL_RCC_GetSysClockFreq+0x188>)
 80027d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027d2:	e098      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027de:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d028      	beq.n	800283c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	099b      	lsrs	r3, r3, #6
 80027f0:	2200      	movs	r2, #0
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027fc:	2100      	movs	r1, #0
 80027fe:	4b47      	ldr	r3, [pc, #284]	@ (800291c <HAL_RCC_GetSysClockFreq+0x188>)
 8002800:	fb03 f201 	mul.w	r2, r3, r1
 8002804:	2300      	movs	r3, #0
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	4413      	add	r3, r2
 800280c:	4a43      	ldr	r2, [pc, #268]	@ (800291c <HAL_RCC_GetSysClockFreq+0x188>)
 800280e:	fba0 1202 	umull	r1, r2, r0, r2
 8002812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002814:	460a      	mov	r2, r1
 8002816:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800281a:	4413      	add	r3, r2
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800281e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002820:	2200      	movs	r2, #0
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	61fa      	str	r2, [r7, #28]
 8002826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800282a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800282e:	f7fd fd47 	bl	80002c0 <__aeabi_uldivmod>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4613      	mov	r3, r2
 8002838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800283a:	e053      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283c:	4b35      	ldr	r3, [pc, #212]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	2200      	movs	r2, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	617a      	str	r2, [r7, #20]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800284e:	f04f 0b00 	mov.w	fp, #0
 8002852:	4652      	mov	r2, sl
 8002854:	465b      	mov	r3, fp
 8002856:	f04f 0000 	mov.w	r0, #0
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	0159      	lsls	r1, r3, #5
 8002860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002864:	0150      	lsls	r0, r2, #5
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	ebb2 080a 	subs.w	r8, r2, sl
 800286e:	eb63 090b 	sbc.w	r9, r3, fp
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	f04f 0300 	mov.w	r3, #0
 800287a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800287e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002886:	ebb2 0408 	subs.w	r4, r2, r8
 800288a:	eb63 0509 	sbc.w	r5, r3, r9
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f04f 0300 	mov.w	r3, #0
 8002896:	00eb      	lsls	r3, r5, #3
 8002898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289c:	00e2      	lsls	r2, r4, #3
 800289e:	4614      	mov	r4, r2
 80028a0:	461d      	mov	r5, r3
 80028a2:	eb14 030a 	adds.w	r3, r4, sl
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	eb45 030b 	adc.w	r3, r5, fp
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ba:	4629      	mov	r1, r5
 80028bc:	028b      	lsls	r3, r1, #10
 80028be:	4621      	mov	r1, r4
 80028c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c4:	4621      	mov	r1, r4
 80028c6:	028a      	lsls	r2, r1, #10
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ce:	2200      	movs	r2, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	60fa      	str	r2, [r7, #12]
 80028d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d8:	f7fd fcf2 	bl	80002c0 <__aeabi_uldivmod>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4613      	mov	r3, r2
 80028e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	3301      	adds	r3, #1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80028f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80028fe:	e002      	b.n	8002906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <HAL_RCC_GetSysClockFreq+0x184>)
 8002902:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002908:	4618      	mov	r0, r3
 800290a:	3740      	adds	r7, #64	@ 0x40
 800290c:	46bd      	mov	sp, r7
 800290e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	00f42400 	.word	0x00f42400
 800291c:	017d7840 	.word	0x017d7840

08002920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e09d      	b.n	8002a6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002942:	d009      	beq.n	8002958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	61da      	str	r2, [r3, #28]
 800294a:	e005      	b.n	8002958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fdea 	bl	800154c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800298e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002998:	d902      	bls.n	80029a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800299a:	2300      	movs	r3, #0
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e002      	b.n	80029a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029ae:	d007      	beq.n	80029c0 <HAL_SPI_Init+0xa0>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029b8:	d002      	beq.n	80029c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	ea42 0103 	orr.w	r1, r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	0c1b      	lsrs	r3, r3, #16
 8002a1c:	f003 0204 	and.w	r2, r3, #4
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a3c:	ea42 0103 	orr.w	r1, r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b088      	sub	sp, #32
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a86:	2300      	movs	r3, #0
 8002a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_SPI_Transmit+0x22>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e15f      	b.n	8002d58 <HAL_SPI_Transmit+0x2e2>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa0:	f7fe ff8c 	bl	80019bc <HAL_GetTick>
 8002aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002aba:	e148      	b.n	8002d4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Transmit+0x52>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002acc:	e13f      	b.n	8002d4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	88fa      	ldrh	r2, [r7, #6]
 8002aec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b18:	d10f      	bne.n	8002b3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b44:	2b40      	cmp	r3, #64	@ 0x40
 8002b46:	d007      	beq.n	8002b58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b60:	d94f      	bls.n	8002c02 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Transmit+0xfa>
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d142      	bne.n	8002bf6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b94:	e02f      	b.n	8002bf6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d112      	bne.n	8002bca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	1c9a      	adds	r2, r3, #2
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bc8:	e015      	b.n	8002bf6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bca:	f7fe fef7 	bl	80019bc <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d803      	bhi.n	8002be2 <HAL_SPI_Transmit+0x16c>
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d102      	bne.n	8002be8 <HAL_SPI_Transmit+0x172>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bf4:	e0ab      	b.n	8002d4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ca      	bne.n	8002b96 <HAL_SPI_Transmit+0x120>
 8002c00:	e080      	b.n	8002d04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_Transmit+0x19a>
 8002c0a:	8afb      	ldrh	r3, [r7, #22]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d174      	bne.n	8002cfa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d912      	bls.n	8002c40 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	1c9a      	adds	r2, r3, #2
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b02      	subs	r3, #2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c3e:	e05c      	b.n	8002cfa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c66:	e048      	b.n	8002cfa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d12b      	bne.n	8002cce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d912      	bls.n	8002ca6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b02      	subs	r3, #2
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ca4:	e029      	b.n	8002cfa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	330c      	adds	r3, #12
 8002cb0:	7812      	ldrb	r2, [r2, #0]
 8002cb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ccc:	e015      	b.n	8002cfa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cce:	f7fe fe75 	bl	80019bc <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d803      	bhi.n	8002ce6 <HAL_SPI_Transmit+0x270>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_Transmit+0x276>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002cf8:	e029      	b.n	8002d4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1b1      	bne.n	8002c68 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fb77 	bl	80033fc <SPI_EndRxTxTransaction>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10a      	bne.n	8002d38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e003      	b.n	8002d4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <HAL_SPI_TransmitReceive+0x26>
 8002d82:	2302      	movs	r3, #2
 8002d84:	e20a      	b.n	800319c <HAL_SPI_TransmitReceive+0x43c>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d8e:	f7fe fe15 	bl	80019bc <HAL_GetTick>
 8002d92:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002da6:	887b      	ldrh	r3, [r7, #2]
 8002da8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002daa:	7efb      	ldrb	r3, [r7, #27]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d00e      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x6e>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002db6:	d106      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_TransmitReceive+0x66>
 8002dc0:	7efb      	ldrb	r3, [r7, #27]
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d003      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002dcc:	e1e0      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x80>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x80>
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d103      	bne.n	8002de8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002de6:	e1d3      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d003      	beq.n	8002dfc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2205      	movs	r2, #5
 8002df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	887a      	ldrh	r2, [r7, #2]
 8002e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	887a      	ldrh	r2, [r7, #2]
 8002e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e3e:	d802      	bhi.n	8002e46 <HAL_SPI_TransmitReceive+0xe6>
 8002e40:	8a3b      	ldrh	r3, [r7, #16]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d908      	bls.n	8002e58 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	e007      	b.n	8002e68 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e66:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e72:	2b40      	cmp	r3, #64	@ 0x40
 8002e74:	d007      	beq.n	8002e86 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e8e:	f240 8081 	bls.w	8002f94 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x140>
 8002e9a:	8a7b      	ldrh	r3, [r7, #18]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d16d      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec4:	e05a      	b.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d11b      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x1ac>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x1ac>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d113      	bne.n	8002f0c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d11c      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x1f4>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	b292      	uxth	r2, r2
 8002f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	1c9a      	adds	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f50:	2301      	movs	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f54:	f7fe fd32 	bl	80019bc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d80b      	bhi.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d007      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002f7a:	e109      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d19f      	bne.n	8002ec6 <HAL_SPI_TransmitReceive+0x166>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d199      	bne.n	8002ec6 <HAL_SPI_TransmitReceive+0x166>
 8002f92:	e0e3      	b.n	800315c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_SPI_TransmitReceive+0x244>
 8002f9c:	8a7b      	ldrh	r3, [r7, #18]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	f040 80cf 	bne.w	8003142 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d912      	bls.n	8002fd4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb2:	881a      	ldrh	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	1c9a      	adds	r2, r3, #2
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	3b02      	subs	r3, #2
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002fd2:	e0b6      	b.n	8003142 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffa:	e0a2      	b.n	8003142 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d134      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x314>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800300e:	b29b      	uxth	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d02f      	beq.n	8003074 <HAL_SPI_TransmitReceive+0x314>
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12c      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b01      	cmp	r3, #1
 8003022:	d912      	bls.n	800304a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003028:	881a      	ldrh	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b02      	subs	r3, #2
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003048:	e012      	b.n	8003070 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	330c      	adds	r3, #12
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d148      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x3b4>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d042      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003094:	b29b      	uxth	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d923      	bls.n	80030e2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a4:	b292      	uxth	r2, r2
 80030a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b02      	subs	r3, #2
 80030bc:	b29a      	uxth	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d81f      	bhi.n	8003110 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030de:	605a      	str	r2, [r3, #4]
 80030e0:	e016      	b.n	8003110 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f103 020c 	add.w	r2, r3, #12
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003104:	b29b      	uxth	r3, r3
 8003106:	3b01      	subs	r3, #1
 8003108:	b29a      	uxth	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003110:	2301      	movs	r3, #1
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003114:	f7fe fc52 	bl	80019bc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003120:	429a      	cmp	r2, r3
 8003122:	d803      	bhi.n	800312c <HAL_SPI_TransmitReceive+0x3cc>
 8003124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x3d2>
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	2b00      	cmp	r3, #0
 8003130:	d107      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003140:	e026      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	f47f af57 	bne.w	8002ffc <HAL_SPI_TransmitReceive+0x29c>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f47f af50 	bne.w	8002ffc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f94b 	bl	80033fc <SPI_EndRxTxTransaction>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e003      	b.n	8003190 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800319c:	4618      	mov	r0, r3
 800319e:	3728      	adds	r7, #40	@ 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031b2:	b2db      	uxtb	r3, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031d0:	f7fe fbf4 	bl	80019bc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031e0:	f7fe fbec 	bl	80019bc <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e6:	4b39      	ldr	r3, [pc, #228]	@ (80032cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	015b      	lsls	r3, r3, #5
 80031ec:	0d1b      	lsrs	r3, r3, #20
 80031ee:	69fa      	ldr	r2, [r7, #28]
 80031f0:	fb02 f303 	mul.w	r3, r2, r3
 80031f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	e054      	b.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d050      	beq.n	80032a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003200:	f7fe fbdc 	bl	80019bc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d902      	bls.n	8003216 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d13d      	bne.n	8003292 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003224:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800322e:	d111      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003238:	d004      	beq.n	8003244 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003242:	d107      	bne.n	8003254 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003252:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800325c:	d10f      	bne.n	800327e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800327c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e017      	b.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3b01      	subs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	bf0c      	ite	eq
 80032b2:	2301      	moveq	r3, #1
 80032b4:	2300      	movne	r3, #0
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d19b      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20000008 	.word	0x20000008

080032d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032e2:	f7fe fb6b 	bl	80019bc <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	4413      	add	r3, r2
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80032f2:	f7fe fb63 	bl	80019bc <HAL_GetTick>
 80032f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	330c      	adds	r3, #12
 80032fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003300:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00da      	lsls	r2, r3, #3
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	0d1b      	lsrs	r3, r3, #20
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003318:	e060      	b.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003320:	d107      	bne.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003330:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d050      	beq.n	80033dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800333a:	f7fe fb3f 	bl	80019bc <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003346:	429a      	cmp	r2, r3
 8003348:	d902      	bls.n	8003350 <SPI_WaitFifoStateUntilTimeout+0x80>
 800334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d13d      	bne.n	80033cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800335e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003368:	d111      	bne.n	800338e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003372:	d004      	beq.n	800337e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800337c:	d107      	bne.n	800338e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800338c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003396:	d10f      	bne.n	80033b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e010      	b.n	80033ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	4013      	ands	r3, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d196      	bne.n	800331a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3728      	adds	r7, #40	@ 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000008 	.word	0x20000008

080033fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2200      	movs	r2, #0
 8003410:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7ff ff5b 	bl	80032d0 <SPI_WaitFifoStateUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e046      	b.n	80034be <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <SPI_EndRxTxTransaction+0xcc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a25      	ldr	r2, [pc, #148]	@ (80034cc <SPI_EndRxTxTransaction+0xd0>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0d5b      	lsrs	r3, r3, #21
 800343c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003440:	fb02 f303 	mul.w	r3, r2, r3
 8003444:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800344e:	d112      	bne.n	8003476 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2200      	movs	r2, #0
 8003458:	2180      	movs	r1, #128	@ 0x80
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f7ff feb0 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e023      	b.n	80034be <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3b01      	subs	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	2b80      	cmp	r3, #128	@ 0x80
 800348e:	d0f2      	beq.n	8003476 <SPI_EndRxTxTransaction+0x7a>
 8003490:	e000      	b.n	8003494 <SPI_EndRxTxTransaction+0x98>
        break;
 8003492:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f7ff ff15 	bl	80032d0 <SPI_WaitFifoStateUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e000      	b.n	80034be <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008
 80034cc:	165e9f81 	.word	0x165e9f81

080034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e049      	b.n	8003576 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe f8f4 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fb32 	bl	8003b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	d001      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e054      	b.n	8003642 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a26      	ldr	r2, [pc, #152]	@ (8003650 <HAL_TIM_Base_Start_IT+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d022      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c2:	d01d      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a22      	ldr	r2, [pc, #136]	@ (8003654 <HAL_TIM_Base_Start_IT+0xd4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a21      	ldr	r2, [pc, #132]	@ (8003658 <HAL_TIM_Base_Start_IT+0xd8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_TIM_Base_Start_IT+0xdc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_TIM_Base_Start_IT+0xe0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <HAL_TIM_Base_Start_IT+0xe4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIM_Base_Start_IT+0x80>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <HAL_TIM_Base_Start_IT+0xe8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d115      	bne.n	800362c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_TIM_Base_Start_IT+0xec>)
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d015      	beq.n	800363e <HAL_TIM_Base_Start_IT+0xbe>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d011      	beq.n	800363e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	e008      	b.n	800363e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40010400 	.word	0x40010400
 8003664:	40014000 	.word	0x40014000
 8003668:	40001800 	.word	0x40001800
 800366c:	00010007 	.word	0x00010007

08003670 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e08f      	b.n	80037a4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d106      	bne.n	800369e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7fd ff9b 	bl	80015d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2202      	movs	r2, #2
 80036a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6899      	ldr	r1, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b3e      	ldr	r3, [pc, #248]	@ (80037ac <HAL_TIM_Encoder_Init+0x13c>)
 80036b2:	400b      	ands	r3, r1
 80036b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 fa59 	bl	8003b78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_TIM_Encoder_Init+0x140>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	021b      	lsls	r3, r3, #8
 80036fa:	4313      	orrs	r3, r2
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4b2b      	ldr	r3, [pc, #172]	@ (80037b4 <HAL_TIM_Encoder_Init+0x144>)
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4b2a      	ldr	r3, [pc, #168]	@ (80037b8 <HAL_TIM_Encoder_Init+0x148>)
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	4313      	orrs	r3, r2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	011a      	lsls	r2, r3, #4
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	031b      	lsls	r3, r3, #12
 8003730:	4313      	orrs	r3, r2
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	4313      	orrs	r3, r2
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	697a      	ldr	r2, [r7, #20]
 8003760:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	fffebff8 	.word	0xfffebff8
 80037b0:	fffffcfc 	.word	0xfffffcfc
 80037b4:	fffff3f3 	.word	0xfffff3f3
 80037b8:	ffff0f0f 	.word	0xffff0f0f

080037bc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d110      	bne.n	800380e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d102      	bne.n	80037f8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80037f2:	7b7b      	ldrb	r3, [r7, #13]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e089      	b.n	8003910 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800380c:	e031      	b.n	8003872 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d110      	bne.n	8003836 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003814:	7bbb      	ldrb	r3, [r7, #14]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d102      	bne.n	8003820 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800381a:	7b3b      	ldrb	r3, [r7, #12]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d001      	beq.n	8003824 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e075      	b.n	8003910 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003834:	e01d      	b.n	8003872 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d108      	bne.n	800384e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d105      	bne.n	800384e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003842:	7b7b      	ldrb	r3, [r7, #13]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d102      	bne.n	800384e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003848:	7b3b      	ldrb	r3, [r7, #12]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d001      	beq.n	8003852 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e05e      	b.n	8003910 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2202      	movs	r2, #2
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2202      	movs	r2, #2
 800385e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2202      	movs	r2, #2
 800386e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_TIM_Encoder_Start_IT+0xc4>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b04      	cmp	r3, #4
 800387c:	d010      	beq.n	80038a0 <HAL_TIM_Encoder_Start_IT+0xe4>
 800387e:	e01f      	b.n	80038c0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f000 fa21 	bl	8003cd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68da      	ldr	r2, [r3, #12]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0202 	orr.w	r2, r2, #2
 800389c:	60da      	str	r2, [r3, #12]
      break;
 800389e:	e02e      	b.n	80038fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	2104      	movs	r1, #4
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fa11 	bl	8003cd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0204 	orr.w	r2, r2, #4
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e01e      	b.n	80038fe <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2201      	movs	r2, #1
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 fa01 	bl	8003cd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	2104      	movs	r1, #4
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f9fa 	bl	8003cd0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0202 	orr.w	r2, r2, #2
 80038ea:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0204 	orr.w	r2, r2, #4
 80038fa:	60da      	str	r2, [r3, #12]
      break;
 80038fc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0201 	orr.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d01b      	beq.n	800397c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0202 	mvn.w	r2, #2
 800394c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8e9 	bl	8003b3a <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f8db 	bl	8003b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8ec 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d020      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01b      	beq.n	80039c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f06f 0204 	mvn.w	r2, #4
 8003998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f8c3 	bl	8003b3a <HAL_TIM_IC_CaptureCallback>
 80039b4:	e005      	b.n	80039c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8b5 	bl	8003b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8c6 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d020      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f89d 	bl	8003b3a <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f88f 	bl	8003b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8a0 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d020      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d01b      	beq.n	8003a60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2208      	movs	r2, #8
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f877 	bl	8003b3a <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f869 	bl	8003b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f87a 	bl	8003b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0201 	mvn.w	r2, #1
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7fd fa8c 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f9cd 	bl	8003e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00c      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d007      	beq.n	8003ad6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f9c5 	bl	8003e60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00c      	beq.n	8003afa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d007      	beq.n	8003afa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f000 f834 	bl	8003b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00c      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0220 	mvn.w	r2, #32
 8003b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f98d 	bl	8003e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a46      	ldr	r2, [pc, #280]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b96:	d00f      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a43      	ldr	r2, [pc, #268]	@ (8003ca8 <TIM_Base_SetConfig+0x130>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d00b      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a42      	ldr	r2, [pc, #264]	@ (8003cac <TIM_Base_SetConfig+0x134>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d007      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a41      	ldr	r2, [pc, #260]	@ (8003cb0 <TIM_Base_SetConfig+0x138>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d003      	beq.n	8003bb8 <TIM_Base_SetConfig+0x40>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a40      	ldr	r2, [pc, #256]	@ (8003cb4 <TIM_Base_SetConfig+0x13c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d108      	bne.n	8003bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a35      	ldr	r2, [pc, #212]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d02b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd8:	d027      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a32      	ldr	r2, [pc, #200]	@ (8003ca8 <TIM_Base_SetConfig+0x130>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d023      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a31      	ldr	r2, [pc, #196]	@ (8003cac <TIM_Base_SetConfig+0x134>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d01f      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a30      	ldr	r2, [pc, #192]	@ (8003cb0 <TIM_Base_SetConfig+0x138>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8003cb4 <TIM_Base_SetConfig+0x13c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d017      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb8 <TIM_Base_SetConfig+0x140>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d013      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a2d      	ldr	r2, [pc, #180]	@ (8003cbc <TIM_Base_SetConfig+0x144>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00f      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8003cc0 <TIM_Base_SetConfig+0x148>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00b      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc4 <TIM_Base_SetConfig+0x14c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc8 <TIM_Base_SetConfig+0x150>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a29      	ldr	r2, [pc, #164]	@ (8003ccc <TIM_Base_SetConfig+0x154>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d108      	bne.n	8003c3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <TIM_Base_SetConfig+0x12c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d003      	beq.n	8003c70 <TIM_Base_SetConfig+0xf8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <TIM_Base_SetConfig+0x13c>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d103      	bne.n	8003c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f023 0201 	bic.w	r2, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	611a      	str	r2, [r3, #16]
  }
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40000800 	.word	0x40000800
 8003cb0:	40000c00 	.word	0x40000c00
 8003cb4:	40010400 	.word	0x40010400
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800
 8003cc4:	40001800 	.word	0x40001800
 8003cc8:	40001c00 	.word	0x40001c00
 8003ccc:	40002000 	.word	0x40002000

08003cd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6a1a      	ldr	r2, [r3, #32]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	fa01 f303 	lsl.w	r3, r1, r3
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e06d      	b.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a30      	ldr	r2, [pc, #192]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a2f      	ldr	r2, [pc, #188]	@ (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d108      	bne.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a20      	ldr	r2, [pc, #128]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d022      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da6:	d01d      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	@ (8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d018      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8003e2c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00e      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a16      	ldr	r2, [pc, #88]	@ (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d004      	beq.n	8003de4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a15      	ldr	r2, [pc, #84]	@ (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d10c      	bne.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40010400 	.word	0x40010400
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800
 8003e2c:	40000c00 	.word	0x40000c00
 8003e30:	40014000 	.word	0x40014000
 8003e34:	40001800 	.word	0x40001800

08003e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003e78:	4904      	ldr	r1, [pc, #16]	@ (8003e8c <MX_FATFS_Init+0x18>)
 8003e7a:	4805      	ldr	r0, [pc, #20]	@ (8003e90 <MX_FATFS_Init+0x1c>)
 8003e7c:	f002 faf6 	bl	800646c <FATFS_LinkDriver>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b03      	ldr	r3, [pc, #12]	@ (8003e94 <MX_FATFS_Init+0x20>)
 8003e86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003e88:	bf00      	nop
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20002664 	.word	0x20002664
 8003e90:	20000014 	.word	0x20000014
 8003e94:	20002660 	.word	0x20002660

08003e98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003e9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc fd53 	bl	8000960 <SD_disk_initialize>
 8003eba:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc fe2f 	bl	8000b34 <SD_disk_status>
 8003ed6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60b9      	str	r1, [r7, #8]
 8003ee8:	607a      	str	r2, [r7, #4]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 8003ef0:	7bf8      	ldrb	r0, [r7, #15]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	f7fc fe32 	bl	8000b60 <SD_disk_read>
 8003efc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8003f16:	7bf8      	ldrb	r0, [r7, #15]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	f7fc fe89 	bl	8000c34 <SD_disk_write>
 8003f22:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	603a      	str	r2, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 8003f3c:	79b9      	ldrb	r1, [r7, #6]
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fc fefa 	bl	8000d3c <SD_disk_ioctl>
 8003f48:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	4a08      	ldr	r2, [pc, #32]	@ (8003f84 <disk_status+0x30>)
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	79fa      	ldrb	r2, [r7, #7]
 8003f6c:	4905      	ldr	r1, [pc, #20]	@ (8003f84 <disk_status+0x30>)
 8003f6e:	440a      	add	r2, r1
 8003f70:	7a12      	ldrb	r2, [r2, #8]
 8003f72:	4610      	mov	r0, r2
 8003f74:	4798      	blx	r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20002690 	.word	0x20002690

08003f88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <disk_initialize+0x48>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d111      	bne.n	8003fc4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8003fd0 <disk_initialize+0x48>)
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <disk_initialize+0x48>)
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	79fa      	ldrb	r2, [r7, #7]
 8003fb6:	4906      	ldr	r1, [pc, #24]	@ (8003fd0 <disk_initialize+0x48>)
 8003fb8:	440a      	add	r2, r1
 8003fba:	7a12      	ldrb	r2, [r2, #8]
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	4798      	blx	r3
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20002690 	.word	0x20002690

08003fd4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	607a      	str	r2, [r7, #4]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8004010 <disk_read+0x3c>)
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	689c      	ldr	r4, [r3, #8]
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	4a07      	ldr	r2, [pc, #28]	@ (8004010 <disk_read+0x3c>)
 8003ff4:	4413      	add	r3, r2
 8003ff6:	7a18      	ldrb	r0, [r3, #8]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	47a0      	blx	r4
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
  return res;
 8004004:	7dfb      	ldrb	r3, [r7, #23]
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}
 800400e:	bf00      	nop
 8004010:	20002690 	.word	0x20002690

08004014 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60b9      	str	r1, [r7, #8]
 800401c:	607a      	str	r2, [r7, #4]
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	4603      	mov	r3, r0
 8004022:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <disk_write+0x3c>)
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	68dc      	ldr	r4, [r3, #12]
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <disk_write+0x3c>)
 8004034:	4413      	add	r3, r2
 8004036:	7a18      	ldrb	r0, [r3, #8]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	47a0      	blx	r4
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
  return res;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	bf00      	nop
 8004050:	20002690 	.word	0x20002690

08004054 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	603a      	str	r2, [r7, #0]
 800405e:	71fb      	strb	r3, [r7, #7]
 8004060:	460b      	mov	r3, r1
 8004062:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	4a09      	ldr	r2, [pc, #36]	@ (800408c <disk_ioctl+0x38>)
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	79fa      	ldrb	r2, [r7, #7]
 8004072:	4906      	ldr	r1, [pc, #24]	@ (800408c <disk_ioctl+0x38>)
 8004074:	440a      	add	r2, r1
 8004076:	7a10      	ldrb	r0, [r2, #8]
 8004078:	79b9      	ldrb	r1, [r7, #6]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4798      	blx	r3
 800407e:	4603      	mov	r3, r0
 8004080:	73fb      	strb	r3, [r7, #15]
  return res;
 8004082:	7bfb      	ldrb	r3, [r7, #15]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20002690 	.word	0x20002690

08004090 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80040a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	b21a      	sxth	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b21b      	sxth	r3, r3
 80040ae:	4313      	orrs	r3, r2
 80040b0:	b21b      	sxth	r3, r3
 80040b2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80040b4:	89fb      	ldrh	r3, [r7, #14]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80040c2:	b480      	push	{r7}
 80040c4:	b085      	sub	sp, #20
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3303      	adds	r3, #3
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	021b      	lsls	r3, r3, #8
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	3202      	adds	r2, #2
 80040da:	7812      	ldrb	r2, [r2, #0]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	3201      	adds	r2, #1
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
	return rv;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1c5a      	adds	r2, r3, #1
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	0a1b      	lsrs	r3, r3, #8
 8004158:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	0a1b      	lsrs	r3, r3, #8
 800416a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	607a      	str	r2, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	b2d2      	uxtb	r2, r2
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	0a1b      	lsrs	r3, r3, #8
 800417c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	607a      	str	r2, [r7, #4]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00d      	beq.n	80041cc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	1c53      	adds	r3, r2, #1
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	1c59      	adds	r1, r3, #1
 80041ba:	6179      	str	r1, [r7, #20]
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f1      	bne.n	80041b0 <mem_cpy+0x1a>
	}
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	617a      	str	r2, [r7, #20]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f3      	bne.n	80041e8 <mem_set+0x10>
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800420e:	b480      	push	{r7}
 8004210:	b089      	sub	sp, #36	@ 0x24
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	61fa      	str	r2, [r7, #28]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	61ba      	str	r2, [r7, #24]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	1acb      	subs	r3, r1, r3
 800423a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	3b01      	subs	r3, #1
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <mem_cmp+0x40>
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0eb      	beq.n	8004226 <mem_cmp+0x18>

	return r;
 800424e:	697b      	ldr	r3, [r7, #20]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3724      	adds	r7, #36	@ 0x24
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004266:	e002      	b.n	800426e <chk_chr+0x12>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3301      	adds	r3, #1
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <chk_chr+0x26>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4293      	cmp	r3, r2
 8004280:	d1f2      	bne.n	8004268 <chk_chr+0xc>
	return *str;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	781b      	ldrb	r3, [r3, #0]
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800429e:	2300      	movs	r3, #0
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e029      	b.n	80042fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80042a8:	4a27      	ldr	r2, [pc, #156]	@ (8004348 <chk_lock+0xb4>)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	4413      	add	r3, r2
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01d      	beq.n	80042f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042b6:	4a24      	ldr	r2, [pc, #144]	@ (8004348 <chk_lock+0xb4>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	4413      	add	r3, r2
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d116      	bne.n	80042f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80042c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004348 <chk_lock+0xb4>)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	011b      	lsls	r3, r3, #4
 80042ce:	4413      	add	r3, r2
 80042d0:	3304      	adds	r3, #4
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80042d8:	429a      	cmp	r2, r3
 80042da:	d10c      	bne.n	80042f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004348 <chk_lock+0xb4>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	3308      	adds	r3, #8
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d102      	bne.n	80042f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80042f0:	e007      	b.n	8004302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80042f2:	2301      	movs	r3, #1
 80042f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d9d2      	bls.n	80042a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d109      	bne.n	800431c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <chk_lock+0x80>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d101      	bne.n	8004318 <chk_lock+0x84>
 8004314:	2300      	movs	r3, #0
 8004316:	e010      	b.n	800433a <chk_lock+0xa6>
 8004318:	2312      	movs	r3, #18
 800431a:	e00e      	b.n	800433a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d108      	bne.n	8004334 <chk_lock+0xa0>
 8004322:	4a09      	ldr	r2, [pc, #36]	@ (8004348 <chk_lock+0xb4>)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	330c      	adds	r3, #12
 800432c:	881b      	ldrh	r3, [r3, #0]
 800432e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004332:	d101      	bne.n	8004338 <chk_lock+0xa4>
 8004334:	2310      	movs	r3, #16
 8004336:	e000      	b.n	800433a <chk_lock+0xa6>
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20002670 	.word	0x20002670

0800434c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	e002      	b.n	800435e <enq_lock+0x12>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3301      	adds	r3, #1
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d806      	bhi.n	8004372 <enq_lock+0x26>
 8004364:	4a09      	ldr	r2, [pc, #36]	@ (800438c <enq_lock+0x40>)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4413      	add	r3, r2
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1f2      	bne.n	8004358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b02      	cmp	r3, #2
 8004376:	bf14      	ite	ne
 8004378:	2301      	movne	r3, #1
 800437a:	2300      	moveq	r3, #0
 800437c:	b2db      	uxtb	r3, r3
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	20002670 	.word	0x20002670

08004390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800439a:	2300      	movs	r3, #0
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e01f      	b.n	80043e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80043a0:	4a41      	ldr	r2, [pc, #260]	@ (80044a8 <inc_lock+0x118>)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	4413      	add	r3, r2
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d113      	bne.n	80043da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80043b2:	4a3d      	ldr	r2, [pc, #244]	@ (80044a8 <inc_lock+0x118>)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d109      	bne.n	80043da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80043c6:	4a38      	ldr	r2, [pc, #224]	@ (80044a8 <inc_lock+0x118>)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	3308      	adds	r3, #8
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d006      	beq.n	80043e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d9dc      	bls.n	80043a0 <inc_lock+0x10>
 80043e6:	e000      	b.n	80043ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80043e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d132      	bne.n	8004456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e002      	b.n	80043fc <inc_lock+0x6c>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3301      	adds	r3, #1
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d806      	bhi.n	8004410 <inc_lock+0x80>
 8004402:	4a29      	ldr	r2, [pc, #164]	@ (80044a8 <inc_lock+0x118>)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	4413      	add	r3, r2
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f2      	bne.n	80043f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d101      	bne.n	800441a <inc_lock+0x8a>
 8004416:	2300      	movs	r3, #0
 8004418:	e040      	b.n	800449c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4922      	ldr	r1, [pc, #136]	@ (80044a8 <inc_lock+0x118>)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	440b      	add	r3, r1
 8004426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	491e      	ldr	r1, [pc, #120]	@ (80044a8 <inc_lock+0x118>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	440b      	add	r3, r1
 8004434:	3304      	adds	r3, #4
 8004436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	491a      	ldr	r1, [pc, #104]	@ (80044a8 <inc_lock+0x118>)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	440b      	add	r3, r1
 8004444:	3308      	adds	r3, #8
 8004446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004448:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <inc_lock+0x118>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	4413      	add	r3, r2
 8004450:	330c      	adds	r3, #12
 8004452:	2200      	movs	r2, #0
 8004454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d009      	beq.n	8004470 <inc_lock+0xe0>
 800445c:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <inc_lock+0x118>)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	330c      	adds	r3, #12
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <inc_lock+0xe0>
 800446c:	2300      	movs	r3, #0
 800446e:	e015      	b.n	800449c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <inc_lock+0xf8>
 8004476:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <inc_lock+0x118>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	4413      	add	r3, r2
 800447e:	330c      	adds	r3, #12
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	3301      	adds	r3, #1
 8004484:	b29a      	uxth	r2, r3
 8004486:	e001      	b.n	800448c <inc_lock+0xfc>
 8004488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800448c:	4906      	ldr	r1, [pc, #24]	@ (80044a8 <inc_lock+0x118>)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	440b      	add	r3, r1
 8004494:	330c      	adds	r3, #12
 8004496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3301      	adds	r3, #1
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20002670 	.word	0x20002670

080044ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3b01      	subs	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d825      	bhi.n	800450c <dec_lock+0x60>
		n = Files[i].ctr;
 80044c0:	4a17      	ldr	r2, [pc, #92]	@ (8004520 <dec_lock+0x74>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	011b      	lsls	r3, r3, #4
 80044c6:	4413      	add	r3, r2
 80044c8:	330c      	adds	r3, #12
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80044ce:	89fb      	ldrh	r3, [r7, #14]
 80044d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d4:	d101      	bne.n	80044da <dec_lock+0x2e>
 80044d6:	2300      	movs	r3, #0
 80044d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80044da:	89fb      	ldrh	r3, [r7, #14]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <dec_lock+0x3a>
 80044e0:	89fb      	ldrh	r3, [r7, #14]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80044e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004520 <dec_lock+0x74>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	330c      	adds	r3, #12
 80044f0:	89fa      	ldrh	r2, [r7, #14]
 80044f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80044f4:	89fb      	ldrh	r3, [r7, #14]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <dec_lock+0x5a>
 80044fa:	4a09      	ldr	r2, [pc, #36]	@ (8004520 <dec_lock+0x74>)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	737b      	strb	r3, [r7, #13]
 800450a:	e001      	b.n	8004510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800450c:	2302      	movs	r3, #2
 800450e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004510:	7b7b      	ldrb	r3, [r7, #13]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	20002670 	.word	0x20002670

08004524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800452c:	2300      	movs	r3, #0
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	e010      	b.n	8004554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004532:	4a0d      	ldr	r2, [pc, #52]	@ (8004568 <clear_lock+0x44>)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	429a      	cmp	r2, r3
 8004540:	d105      	bne.n	800454e <clear_lock+0x2a>
 8004542:	4a09      	ldr	r2, [pc, #36]	@ (8004568 <clear_lock+0x44>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4413      	add	r3, r2
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d9eb      	bls.n	8004532 <clear_lock+0xe>
	}
}
 800455a:	bf00      	nop
 800455c:	bf00      	nop
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20002670 	.word	0x20002670

0800456c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	78db      	ldrb	r3, [r3, #3]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d034      	beq.n	80045ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	7858      	ldrb	r0, [r3, #1]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004590:	2301      	movs	r3, #1
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	f7ff fd3e 	bl	8004014 <disk_write>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
 80045a2:	e022      	b.n	80045ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	1ad2      	subs	r2, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d217      	bcs.n	80045ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	789b      	ldrb	r3, [r3, #2]
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e010      	b.n	80045e4 <sync_window+0x78>
					wsect += fs->fsize;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	7858      	ldrb	r0, [r3, #1]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80045d6:	2301      	movs	r3, #1
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	f7ff fd1b 	bl	8004014 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d8eb      	bhi.n	80045c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d01b      	beq.n	8004644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff ffad 	bl	800456c <sync_window>
 8004612:	4603      	mov	r3, r0
 8004614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d113      	bne.n	8004644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	7858      	ldrb	r0, [r3, #1]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004626:	2301      	movs	r3, #1
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	f7ff fcd3 	bl	8003fd4 <disk_read>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f7ff ff87 	bl	800456c <sync_window>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d159      	bne.n	800471c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d149      	bne.n	8004704 <sync_fs+0xb4>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	791b      	ldrb	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d145      	bne.n	8004704 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	899b      	ldrh	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	2100      	movs	r1, #0
 8004686:	f7ff fda7 	bl	80041d8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3334      	adds	r3, #52	@ 0x34
 800468e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004692:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fd36 	bl	8004108 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3334      	adds	r3, #52	@ 0x34
 80046a0:	4921      	ldr	r1, [pc, #132]	@ (8004728 <sync_fs+0xd8>)
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fd4b 	bl	800413e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3334      	adds	r3, #52	@ 0x34
 80046ac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80046b0:	491e      	ldr	r1, [pc, #120]	@ (800472c <sync_fs+0xdc>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fd43 	bl	800413e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3334      	adds	r3, #52	@ 0x34
 80046bc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f7ff fd39 	bl	800413e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3334      	adds	r3, #52	@ 0x34
 80046d0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7ff fd2f 	bl	800413e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	7858      	ldrb	r0, [r3, #1]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046f8:	2301      	movs	r3, #1
 80046fa:	f7ff fc8b 	bl	8004014 <disk_write>
			fs->fsi_flag = 0;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2200      	movs	r2, #0
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fca1 	bl	8004054 <disk_ioctl>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <sync_fs+0xcc>
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800471c:	7bfb      	ldrb	r3, [r7, #15]
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	41615252 	.word	0x41615252
 800472c:	61417272 	.word	0x61417272

08004730 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	3b02      	subs	r3, #2
 800473e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	699b      	ldr	r3, [r3, #24]
 8004744:	3b02      	subs	r3, #2
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d301      	bcc.n	8004750 <clust2sect+0x20>
 800474c:	2300      	movs	r3, #0
 800474e:	e008      	b.n	8004762 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	895b      	ldrh	r3, [r3, #10]
 8004754:	461a      	mov	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	fb03 f202 	mul.w	r2, r3, r2
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	4413      	add	r3, r2
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d904      	bls.n	800478e <get_fat+0x20>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <get_fat+0x26>
		val = 1;	/* Internal error */
 800478e:	2301      	movs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
 8004792:	e0ba      	b.n	800490a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b03      	cmp	r3, #3
 80047a0:	f000 8082 	beq.w	80048a8 <get_fat+0x13a>
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	f300 80a6 	bgt.w	80048f6 <get_fat+0x188>
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <get_fat+0x46>
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d055      	beq.n	800485e <get_fat+0xf0>
 80047b2:	e0a0      	b.n	80048f6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	899b      	ldrh	r3, [r3, #12]
 80047ca:	4619      	mov	r1, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d2:	4413      	add	r3, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	6938      	ldr	r0, [r7, #16]
 80047d8:	f7ff ff0c 	bl	80045f4 <move_window>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 808c 	bne.w	80048fc <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	60fa      	str	r2, [r7, #12]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	8992      	ldrh	r2, [r2, #12]
 80047ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80047f2:	fb01 f202 	mul.w	r2, r1, r2
 80047f6:	1a9b      	subs	r3, r3, r2
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4413      	add	r3, r2
 80047fc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004800:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	899b      	ldrh	r3, [r3, #12]
 800480a:	4619      	mov	r1, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004812:	4413      	add	r3, r2
 8004814:	4619      	mov	r1, r3
 8004816:	6938      	ldr	r0, [r7, #16]
 8004818:	f7ff feec 	bl	80045f4 <move_window>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d16e      	bne.n	8004900 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	899b      	ldrh	r3, [r3, #12]
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	fbb3 f1f2 	udiv	r1, r3, r2
 800482e:	fb01 f202 	mul.w	r2, r1, r2
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	4313      	orrs	r3, r2
 8004842:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <get_fat+0xe6>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	091b      	lsrs	r3, r3, #4
 8004852:	e002      	b.n	800485a <get_fat+0xec>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485a:	617b      	str	r3, [r7, #20]
			break;
 800485c:	e055      	b.n	800490a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	899b      	ldrh	r3, [r3, #12]
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004872:	4413      	add	r3, r2
 8004874:	4619      	mov	r1, r3
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f7ff febc 	bl	80045f4 <move_window>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d140      	bne.n	8004904 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	8992      	ldrh	r2, [r2, #12]
 8004890:	fbb3 f0f2 	udiv	r0, r3, r2
 8004894:	fb00 f202 	mul.w	r2, r0, r2
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	440b      	add	r3, r1
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fbf7 	bl	8004090 <ld_word>
 80048a2:	4603      	mov	r3, r0
 80048a4:	617b      	str	r3, [r7, #20]
			break;
 80048a6:	e030      	b.n	800490a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	899b      	ldrh	r3, [r3, #12]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80048bc:	4413      	add	r3, r2
 80048be:	4619      	mov	r1, r3
 80048c0:	6938      	ldr	r0, [r7, #16]
 80048c2:	f7ff fe97 	bl	80045f4 <move_window>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d11d      	bne.n	8004908 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	8992      	ldrh	r2, [r2, #12]
 80048da:	fbb3 f0f2 	udiv	r0, r3, r2
 80048de:	fb00 f202 	mul.w	r2, r0, r2
 80048e2:	1a9b      	subs	r3, r3, r2
 80048e4:	440b      	add	r3, r1
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fbeb 	bl	80040c2 <ld_dword>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048f2:	617b      	str	r3, [r7, #20]
			break;
 80048f4:	e009      	b.n	800490a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80048f6:	2301      	movs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e006      	b.n	800490a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80048fc:	bf00      	nop
 80048fe:	e004      	b.n	800490a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004900:	bf00      	nop
 8004902:	e002      	b.n	800490a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004904:	bf00      	nop
 8004906:	e000      	b.n	800490a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004908:	bf00      	nop
		}
	}

	return val;
 800490a:	697b      	ldr	r3, [r7, #20]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004914:	b590      	push	{r4, r7, lr}
 8004916:	b089      	sub	sp, #36	@ 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004920:	2302      	movs	r3, #2
 8004922:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	f240 8109 	bls.w	8004b3e <put_fat+0x22a>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	429a      	cmp	r2, r3
 8004934:	f080 8103 	bcs.w	8004b3e <put_fat+0x22a>
		switch (fs->fs_type) {
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	f000 80b6 	beq.w	8004aae <put_fat+0x19a>
 8004942:	2b03      	cmp	r3, #3
 8004944:	f300 80fb 	bgt.w	8004b3e <put_fat+0x22a>
 8004948:	2b01      	cmp	r3, #1
 800494a:	d003      	beq.n	8004954 <put_fat+0x40>
 800494c:	2b02      	cmp	r3, #2
 800494e:	f000 8083 	beq.w	8004a58 <put_fat+0x144>
 8004952:	e0f4      	b.n	8004b3e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	085b      	lsrs	r3, r3, #1
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4413      	add	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	899b      	ldrh	r3, [r3, #12]
 800496a:	4619      	mov	r1, r3
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004972:	4413      	add	r3, r2
 8004974:	4619      	mov	r1, r3
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff fe3c 	bl	80045f4 <move_window>
 800497c:	4603      	mov	r3, r0
 800497e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004980:	7ffb      	ldrb	r3, [r7, #31]
 8004982:	2b00      	cmp	r3, #0
 8004984:	f040 80d4 	bne.w	8004b30 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	61ba      	str	r2, [r7, #24]
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	8992      	ldrh	r2, [r2, #12]
 8004998:	fbb3 f0f2 	udiv	r0, r3, r2
 800499c:	fb00 f202 	mul.w	r2, r0, r2
 80049a0:	1a9b      	subs	r3, r3, r2
 80049a2:	440b      	add	r3, r1
 80049a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00d      	beq.n	80049cc <put_fat+0xb8>
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	b25b      	sxtb	r3, r3
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	b25a      	sxtb	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	b25b      	sxtb	r3, r3
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	b25b      	sxtb	r3, r3
 80049c4:	4313      	orrs	r3, r2
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e001      	b.n	80049d0 <put_fat+0xbc>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	899b      	ldrh	r3, [r3, #12]
 80049e2:	4619      	mov	r1, r3
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ea:	4413      	add	r3, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f7ff fe00 	bl	80045f4 <move_window>
 80049f4:	4603      	mov	r3, r0
 80049f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049f8:	7ffb      	ldrb	r3, [r7, #31]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f040 809a 	bne.w	8004b34 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	899b      	ldrh	r3, [r3, #12]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a12:	fb00 f202 	mul.w	r2, r0, r2
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	440b      	add	r3, r1
 8004a1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <put_fat+0x11a>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	e00e      	b.n	8004a4c <put_fat+0x138>
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b25b      	sxtb	r3, r3
 8004a34:	f023 030f 	bic.w	r3, r3, #15
 8004a38:	b25a      	sxtb	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0a1b      	lsrs	r3, r3, #8
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	b25b      	sxtb	r3, r3
 8004a46:	4313      	orrs	r3, r2
 8004a48:	b25b      	sxtb	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	70da      	strb	r2, [r3, #3]
			break;
 8004a56:	e072      	b.n	8004b3e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	899b      	ldrh	r3, [r3, #12]
 8004a60:	085b      	lsrs	r3, r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4619      	mov	r1, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a6c:	4413      	add	r3, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff fdbf 	bl	80045f4 <move_window>
 8004a76:	4603      	mov	r3, r0
 8004a78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004a7a:	7ffb      	ldrb	r3, [r7, #31]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d15b      	bne.n	8004b38 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	8992      	ldrh	r2, [r2, #12]
 8004a8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a92:	fb00 f202 	mul.w	r2, r0, r2
 8004a96:	1a9b      	subs	r3, r3, r2
 8004a98:	440b      	add	r3, r1
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	4611      	mov	r1, r2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fb31 	bl	8004108 <st_word>
			fs->wflag = 1;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	70da      	strb	r2, [r3, #3]
			break;
 8004aac:	e047      	b.n	8004b3e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	899b      	ldrh	r3, [r3, #12]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4619      	mov	r1, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f7ff fd94 	bl	80045f4 <move_window>
 8004acc:	4603      	mov	r3, r0
 8004ace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d132      	bne.n	8004b3c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	8992      	ldrh	r2, [r2, #12]
 8004aea:	fbb3 f0f2 	udiv	r0, r3, r2
 8004aee:	fb00 f202 	mul.w	r2, r0, r2
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	440b      	add	r3, r1
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fae3 	bl	80040c2 <ld_dword>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004b02:	4323      	orrs	r3, r4
 8004b04:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	8992      	ldrh	r2, [r2, #12]
 8004b14:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b18:	fb00 f202 	mul.w	r2, r0, r2
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	440b      	add	r3, r1
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fb0b 	bl	800413e <st_dword>
			fs->wflag = 1;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	70da      	strb	r2, [r3, #3]
			break;
 8004b2e:	e006      	b.n	8004b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b30:	bf00      	nop
 8004b32:	e004      	b.n	8004b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b34:	bf00      	nop
 8004b36:	e002      	b.n	8004b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b38:	bf00      	nop
 8004b3a:	e000      	b.n	8004b3e <put_fat+0x22a>
			if (res != FR_OK) break;
 8004b3c:	bf00      	nop
		}
	}
	return res;
 8004b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3724      	adds	r7, #36	@ 0x24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd90      	pop	{r4, r7, pc}

08004b48 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d904      	bls.n	8004b6e <remove_chain+0x26>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d301      	bcc.n	8004b72 <remove_chain+0x2a>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e04b      	b.n	8004c0a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00c      	beq.n	8004b92 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	69b8      	ldr	r0, [r7, #24]
 8004b80:	f7ff fec8 	bl	8004914 <put_fat>
 8004b84:	4603      	mov	r3, r0
 8004b86:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004b88:	7ffb      	ldrb	r3, [r7, #31]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <remove_chain+0x4a>
 8004b8e:	7ffb      	ldrb	r3, [r7, #31]
 8004b90:	e03b      	b.n	8004c0a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004b92:	68b9      	ldr	r1, [r7, #8]
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff fdea 	bl	800476e <get_fat>
 8004b9a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d031      	beq.n	8004c06 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <remove_chain+0x64>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e02e      	b.n	8004c0a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d101      	bne.n	8004bb8 <remove_chain+0x70>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e028      	b.n	8004c0a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004bb8:	2200      	movs	r2, #0
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	69b8      	ldr	r0, [r7, #24]
 8004bbe:	f7ff fea9 	bl	8004914 <put_fat>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004bc6:	7ffb      	ldrb	r3, [r7, #31]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <remove_chain+0x88>
 8004bcc:	7ffb      	ldrb	r3, [r7, #31]
 8004bce:	e01c      	b.n	8004c0a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	3b02      	subs	r3, #2
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d20b      	bcs.n	8004bf6 <remove_chain+0xae>
			fs->free_clst++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	791b      	ldrb	r3, [r3, #4]
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d3c6      	bcc.n	8004b92 <remove_chain+0x4a>
 8004c04:	e000      	b.n	8004c08 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004c06:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <create_chain+0x2c>
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d31b      	bcc.n	8004c76 <create_chain+0x64>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e018      	b.n	8004c76 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004c44:	6839      	ldr	r1, [r7, #0]
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff fd91 	bl	800476e <get_fat>
 8004c4c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d801      	bhi.n	8004c58 <create_chain+0x46>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e070      	b.n	8004d3a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5e:	d101      	bne.n	8004c64 <create_chain+0x52>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	e06a      	b.n	8004d3a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d201      	bcs.n	8004c72 <create_chain+0x60>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	e063      	b.n	8004d3a <create_chain+0x128>
		scl = clst;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d307      	bcc.n	8004c9a <create_chain+0x88>
				ncl = 2;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d901      	bls.n	8004c9a <create_chain+0x88>
 8004c96:	2300      	movs	r3, #0
 8004c98:	e04f      	b.n	8004d3a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004c9a:	69f9      	ldr	r1, [r7, #28]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7ff fd66 	bl	800476e <get_fat>
 8004ca2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00e      	beq.n	8004cc8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d003      	beq.n	8004cb8 <create_chain+0xa6>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d101      	bne.n	8004cbc <create_chain+0xaa>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	e03e      	b.n	8004d3a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d1da      	bne.n	8004c7a <create_chain+0x68>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e038      	b.n	8004d3a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004cc8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004cca:	f04f 32ff 	mov.w	r2, #4294967295
 8004cce:	69f9      	ldr	r1, [r7, #28]
 8004cd0:	6938      	ldr	r0, [r7, #16]
 8004cd2:	f7ff fe1f 	bl	8004914 <put_fat>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <create_chain+0xe2>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	6839      	ldr	r1, [r7, #0]
 8004cea:	6938      	ldr	r0, [r7, #16]
 8004cec:	f7ff fe12 	bl	8004914 <put_fat>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d116      	bne.n	8004d28 <create_chain+0x116>
		fs->last_clst = ncl;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	695a      	ldr	r2, [r3, #20]
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	3b02      	subs	r3, #2
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d804      	bhi.n	8004d18 <create_chain+0x106>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	1e5a      	subs	r2, r3, #1
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	791b      	ldrb	r3, [r3, #4]
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	711a      	strb	r2, [r3, #4]
 8004d26:	e007      	b.n	8004d38 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d102      	bne.n	8004d34 <create_chain+0x122>
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e000      	b.n	8004d36 <create_chain+0x124>
 8004d34:	2301      	movs	r3, #1
 8004d36:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004d38:	69fb      	ldr	r3, [r7, #28]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b087      	sub	sp, #28
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d56:	3304      	adds	r3, #4
 8004d58:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	899b      	ldrh	r3, [r3, #12]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	8952      	ldrh	r2, [r2, #10]
 8004d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	613a      	str	r2, [r7, #16]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <clmt_clust+0x42>
 8004d80:	2300      	movs	r3, #0
 8004d82:	e010      	b.n	8004da6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d307      	bcc.n	8004d9c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	3304      	adds	r3, #4
 8004d98:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004d9a:	e7e9      	b.n	8004d70 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004d9c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4413      	add	r3, r2
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	371c      	adds	r7, #28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b086      	sub	sp, #24
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc8:	d204      	bcs.n	8004dd4 <dir_sdi+0x22>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e071      	b.n	8004ebc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d106      	bne.n	8004df8 <dir_sdi+0x46>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d902      	bls.n	8004df8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10c      	bne.n	8004e18 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	8912      	ldrh	r2, [r2, #8]
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d301      	bcc.n	8004e0e <dir_sdi+0x5c>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e056      	b.n	8004ebc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	61da      	str	r2, [r3, #28]
 8004e16:	e02d      	b.n	8004e74 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	895b      	ldrh	r3, [r3, #10]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	899b      	ldrh	r3, [r3, #12]
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e28:	e019      	b.n	8004e5e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fc9d 	bl	800476e <get_fat>
 8004e34:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3c:	d101      	bne.n	8004e42 <dir_sdi+0x90>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e03c      	b.n	8004ebc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d904      	bls.n	8004e52 <dir_sdi+0xa0>
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d301      	bcc.n	8004e56 <dir_sdi+0xa4>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e032      	b.n	8004ebc <dir_sdi+0x10a>
			ofs -= csz;
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d2e1      	bcs.n	8004e2a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004e66:	6979      	ldr	r1, [r7, #20]
 8004e68:	6938      	ldr	r0, [r7, #16]
 8004e6a:	f7ff fc61 	bl	8004730 <clust2sect>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <dir_sdi+0xd4>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e01a      	b.n	8004ebc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	899b      	ldrh	r3, [r3, #12]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	899b      	ldrh	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	fbb3 f0f2 	udiv	r0, r3, r2
 8004eae:	fb00 f202 	mul.w	r2, r0, r2
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	18ca      	adds	r2, r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	3320      	adds	r3, #32
 8004eda:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <dir_next+0x28>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004eea:	d301      	bcc.n	8004ef0 <dir_next+0x2c>
 8004eec:	2304      	movs	r3, #4
 8004eee:	e0bb      	b.n	8005068 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	899b      	ldrh	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004efc:	fb01 f202 	mul.w	r2, r1, r2
 8004f00:	1a9b      	subs	r3, r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 809d 	bne.w	8005042 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	095b      	lsrs	r3, r3, #5
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	8912      	ldrh	r2, [r2, #8]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	f0c0 808d 	bcc.w	8005042 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	61da      	str	r2, [r3, #28]
 8004f2e:	2304      	movs	r3, #4
 8004f30:	e09a      	b.n	8005068 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	899b      	ldrh	r3, [r3, #12]
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	8952      	ldrh	r2, [r2, #10]
 8004f42:	3a01      	subs	r2, #1
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d17b      	bne.n	8005042 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7ff fc0b 	bl	800476e <get_fat>
 8004f58:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d801      	bhi.n	8004f64 <dir_next+0xa0>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e081      	b.n	8005068 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6a:	d101      	bne.n	8004f70 <dir_next+0xac>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e07b      	b.n	8005068 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d359      	bcc.n	800502e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	61da      	str	r2, [r3, #28]
 8004f86:	2304      	movs	r3, #4
 8004f88:	e06e      	b.n	8005068 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7ff fe3d 	bl	8004c12 <create_chain>
 8004f98:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <dir_next+0xe0>
 8004fa0:	2307      	movs	r3, #7
 8004fa2:	e061      	b.n	8005068 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <dir_next+0xea>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e05c      	b.n	8005068 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d101      	bne.n	8004fba <dir_next+0xf6>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e056      	b.n	8005068 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f7ff fad6 	bl	800456c <sync_window>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <dir_next+0x106>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e04e      	b.n	8005068 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	899b      	ldrh	r3, [r3, #12]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	f7ff f8fe 	bl	80041d8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff fba4 	bl	8004730 <clust2sect>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fee:	e012      	b.n	8005016 <dir_next+0x152>
						fs->wflag = 1;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f7ff fab8 	bl	800456c <sync_window>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <dir_next+0x142>
 8005002:	2301      	movs	r3, #1
 8005004:	e030      	b.n	8005068 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	895b      	ldrh	r3, [r3, #10]
 800501a:	461a      	mov	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4293      	cmp	r3, r2
 8005020:	d3e6      	bcc.n	8004ff0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad2      	subs	r2, r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005034:	6979      	ldr	r1, [r7, #20]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f7ff fb7a 	bl	8004730 <clust2sect>
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	899b      	ldrh	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	fbb3 f0f2 	udiv	r0, r3, r2
 800505a:	fb00 f202 	mul.w	r2, r0, r2
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	18ca      	adds	r2, r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005080:	2100      	movs	r1, #0
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff fe95 	bl	8004db2 <dir_sdi>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800508c:	7dfb      	ldrb	r3, [r7, #23]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d12b      	bne.n	80050ea <dir_alloc+0x7a>
		n = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	4619      	mov	r1, r3
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f7ff faa9 	bl	80045f4 <move_window>
 80050a2:	4603      	mov	r3, r0
 80050a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d11d      	bne.n	80050e8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2be5      	cmp	r3, #229	@ 0xe5
 80050b4:	d004      	beq.n	80050c0 <dir_alloc+0x50>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	3301      	adds	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d102      	bne.n	80050d4 <dir_alloc+0x64>
 80050ce:	e00c      	b.n	80050ea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80050d4:	2101      	movs	r1, #1
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fef4 	bl	8004ec4 <dir_next>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0d7      	beq.n	8005096 <dir_alloc+0x26>
 80050e6:	e000      	b.n	80050ea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80050e8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d101      	bne.n	80050f4 <dir_alloc+0x84>
 80050f0:	2307      	movs	r3, #7
 80050f2:	75fb      	strb	r3, [r7, #23]
	return res;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	331a      	adds	r3, #26
 800510c:	4618      	mov	r0, r3
 800510e:	f7fe ffbf 	bl	8004090 <ld_word>
 8005112:	4603      	mov	r3, r0
 8005114:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d109      	bne.n	8005132 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe ffb4 	bl	8004090 <ld_word>
 8005128:	4603      	mov	r3, r0
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005132:	68fb      	ldr	r3, [r7, #12]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	331a      	adds	r3, #26
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	b292      	uxth	r2, r2
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe ffd8 	bl	8004108 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d109      	bne.n	8005174 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f103 0214 	add.w	r2, r3, #20
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	0c1b      	lsrs	r3, r3, #16
 800516a:	b29b      	uxth	r3, r3
 800516c:	4619      	mov	r1, r3
 800516e:	4610      	mov	r0, r2
 8005170:	f7fe ffca 	bl	8004108 <st_word>
	}
}
 8005174:	bf00      	nop
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800518a:	2100      	movs	r1, #0
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff fe10 	bl	8004db2 <dir_sdi>
 8005192:	4603      	mov	r3, r0
 8005194:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <dir_find+0x24>
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	e03e      	b.n	800521e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	4619      	mov	r1, r3
 80051a6:	6938      	ldr	r0, [r7, #16]
 80051a8:	f7ff fa24 	bl	80045f4 <move_window>
 80051ac:	4603      	mov	r3, r0
 80051ae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d12f      	bne.n	8005216 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80051be:	7bfb      	ldrb	r3, [r7, #15]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <dir_find+0x4e>
 80051c4:	2304      	movs	r3, #4
 80051c6:	75fb      	strb	r3, [r7, #23]
 80051c8:	e028      	b.n	800521c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	330b      	adds	r3, #11
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	330b      	adds	r3, #11
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <dir_find+0x86>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a18      	ldr	r0, [r3, #32]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3324      	adds	r3, #36	@ 0x24
 80051f4:	220b      	movs	r2, #11
 80051f6:	4619      	mov	r1, r3
 80051f8:	f7ff f809 	bl	800420e <mem_cmp>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005202:	2100      	movs	r1, #0
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7ff fe5d 	bl	8004ec4 <dir_next>
 800520a:	4603      	mov	r3, r0
 800520c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800520e:	7dfb      	ldrb	r3, [r7, #23]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0c5      	beq.n	80051a0 <dir_find+0x24>
 8005214:	e002      	b.n	800521c <dir_find+0xa0>
		if (res != FR_OK) break;
 8005216:	bf00      	nop
 8005218:	e000      	b.n	800521c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800521a:	bf00      	nop

	return res;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005234:	2101      	movs	r1, #1
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ff1a 	bl	8005070 <dir_alloc>
 800523c:	4603      	mov	r3, r0
 800523e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005240:	7bfb      	ldrb	r3, [r7, #15]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11c      	bne.n	8005280 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	4619      	mov	r1, r3
 800524c:	68b8      	ldr	r0, [r7, #8]
 800524e:	f7ff f9d1 	bl	80045f4 <move_window>
 8005252:	4603      	mov	r3, r0
 8005254:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005256:	7bfb      	ldrb	r3, [r7, #15]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d111      	bne.n	8005280 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	2220      	movs	r2, #32
 8005262:	2100      	movs	r1, #0
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe ffb7 	bl	80041d8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a18      	ldr	r0, [r3, #32]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3324      	adds	r3, #36	@ 0x24
 8005272:	220b      	movs	r2, #11
 8005274:	4619      	mov	r1, r3
 8005276:	f7fe ff8e 	bl	8004196 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2201      	movs	r2, #1
 800527e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005280:	7bfb      	ldrb	r3, [r7, #15]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b088      	sub	sp, #32
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3324      	adds	r3, #36	@ 0x24
 80052a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80052a2:	220b      	movs	r2, #11
 80052a4:	2120      	movs	r1, #32
 80052a6:	68b8      	ldr	r0, [r7, #8]
 80052a8:	f7fe ff96 	bl	80041d8 <mem_set>
	si = i = 0; ni = 8;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	2308      	movs	r3, #8
 80052b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	61fa      	str	r2, [r7, #28]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80052c6:	7efb      	ldrb	r3, [r7, #27]
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d94e      	bls.n	800536a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80052cc:	7efb      	ldrb	r3, [r7, #27]
 80052ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80052d0:	d006      	beq.n	80052e0 <create_name+0x54>
 80052d2:	7efb      	ldrb	r3, [r7, #27]
 80052d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80052d6:	d110      	bne.n	80052fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80052d8:	e002      	b.n	80052e0 <create_name+0x54>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	4413      	add	r3, r2
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b2f      	cmp	r3, #47	@ 0x2f
 80052ea:	d0f6      	beq.n	80052da <create_name+0x4e>
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	4413      	add	r3, r2
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80052f6:	d0f0      	beq.n	80052da <create_name+0x4e>
			break;
 80052f8:	e038      	b.n	800536c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80052fa:	7efb      	ldrb	r3, [r7, #27]
 80052fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80052fe:	d003      	beq.n	8005308 <create_name+0x7c>
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	429a      	cmp	r2, r3
 8005306:	d30c      	bcc.n	8005322 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b0b      	cmp	r3, #11
 800530c:	d002      	beq.n	8005314 <create_name+0x88>
 800530e:	7efb      	ldrb	r3, [r7, #27]
 8005310:	2b2e      	cmp	r3, #46	@ 0x2e
 8005312:	d001      	beq.n	8005318 <create_name+0x8c>
 8005314:	2306      	movs	r3, #6
 8005316:	e044      	b.n	80053a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005318:	2308      	movs	r3, #8
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	230b      	movs	r3, #11
 800531e:	617b      	str	r3, [r7, #20]
			continue;
 8005320:	e022      	b.n	8005368 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005322:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005326:	2b00      	cmp	r3, #0
 8005328:	da04      	bge.n	8005334 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800532a:	7efb      	ldrb	r3, [r7, #27]
 800532c:	3b80      	subs	r3, #128	@ 0x80
 800532e:	4a1f      	ldr	r2, [pc, #124]	@ (80053ac <create_name+0x120>)
 8005330:	5cd3      	ldrb	r3, [r2, r3]
 8005332:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005334:	7efb      	ldrb	r3, [r7, #27]
 8005336:	4619      	mov	r1, r3
 8005338:	481d      	ldr	r0, [pc, #116]	@ (80053b0 <create_name+0x124>)
 800533a:	f7fe ff8f 	bl	800425c <chk_chr>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <create_name+0xbc>
 8005344:	2306      	movs	r3, #6
 8005346:	e02c      	b.n	80053a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005348:	7efb      	ldrb	r3, [r7, #27]
 800534a:	2b60      	cmp	r3, #96	@ 0x60
 800534c:	d905      	bls.n	800535a <create_name+0xce>
 800534e:	7efb      	ldrb	r3, [r7, #27]
 8005350:	2b7a      	cmp	r3, #122	@ 0x7a
 8005352:	d802      	bhi.n	800535a <create_name+0xce>
 8005354:	7efb      	ldrb	r3, [r7, #27]
 8005356:	3b20      	subs	r3, #32
 8005358:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	613a      	str	r2, [r7, #16]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	4413      	add	r3, r2
 8005364:	7efa      	ldrb	r2, [r7, #27]
 8005366:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8005368:	e7a6      	b.n	80052b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800536a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	441a      	add	r2, r3
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <create_name+0xf4>
 800537c:	2306      	movs	r3, #6
 800537e:	e010      	b.n	80053a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2be5      	cmp	r3, #229	@ 0xe5
 8005386:	d102      	bne.n	800538e <create_name+0x102>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2205      	movs	r2, #5
 800538c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800538e:	7efb      	ldrb	r3, [r7, #27]
 8005390:	2b20      	cmp	r3, #32
 8005392:	d801      	bhi.n	8005398 <create_name+0x10c>
 8005394:	2204      	movs	r2, #4
 8005396:	e000      	b.n	800539a <create_name+0x10e>
 8005398:	2200      	movs	r2, #0
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	330b      	adds	r3, #11
 800539e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80053a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08006e74 	.word	0x08006e74
 80053b0:	08006e20 	.word	0x08006e20

080053b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80053c8:	e002      	b.n	80053d0 <follow_path+0x1c>
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	3301      	adds	r3, #1
 80053ce:	603b      	str	r3, [r7, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80053d6:	d0f8      	beq.n	80053ca <follow_path+0x16>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80053de:	d0f4      	beq.n	80053ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	2200      	movs	r2, #0
 80053e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b1f      	cmp	r3, #31
 80053ec:	d80a      	bhi.n	8005404 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2280      	movs	r2, #128	@ 0x80
 80053f2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80053f6:	2100      	movs	r1, #0
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fcda 	bl	8004db2 <dir_sdi>
 80053fe:	4603      	mov	r3, r0
 8005400:	75fb      	strb	r3, [r7, #23]
 8005402:	e048      	b.n	8005496 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005404:	463b      	mov	r3, r7
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff ff3f 	bl	800528c <create_name>
 800540e:	4603      	mov	r3, r0
 8005410:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005412:	7dfb      	ldrb	r3, [r7, #23]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d139      	bne.n	800548c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff feaf 	bl	800517c <dir_find>
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005428:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d12c      	bne.n	8005490 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005436:	7afb      	ldrb	r3, [r7, #11]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d127      	bne.n	8005490 <follow_path+0xdc>
 8005440:	2305      	movs	r3, #5
 8005442:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005444:	e024      	b.n	8005490 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005446:	7afb      	ldrb	r3, [r7, #11]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	d121      	bne.n	8005494 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	799b      	ldrb	r3, [r3, #6]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b00      	cmp	r3, #0
 800545a:	d102      	bne.n	8005462 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800545c:	2305      	movs	r3, #5
 800545e:	75fb      	strb	r3, [r7, #23]
 8005460:	e019      	b.n	8005496 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	8992      	ldrh	r2, [r2, #12]
 8005470:	fbb3 f0f2 	udiv	r0, r3, r2
 8005474:	fb00 f202 	mul.w	r2, r0, r2
 8005478:	1a9b      	subs	r3, r3, r2
 800547a:	440b      	add	r3, r1
 800547c:	4619      	mov	r1, r3
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fe3d 	bl	80050fe <ld_clust>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800548a:	e7bb      	b.n	8005404 <follow_path+0x50>
			if (res != FR_OK) break;
 800548c:	bf00      	nop
 800548e:	e002      	b.n	8005496 <follow_path+0xe2>
				break;
 8005490:	bf00      	nop
 8005492:	e000      	b.n	8005496 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005494:	bf00      	nop
			}
		}
	}

	return res;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d031      	beq.n	800551a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	e002      	b.n	80054c4 <get_ldnumber+0x24>
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	3301      	adds	r3, #1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d903      	bls.n	80054d4 <get_ldnumber+0x34>
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80054d2:	d1f4      	bne.n	80054be <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b3a      	cmp	r3, #58	@ 0x3a
 80054da:	d11c      	bne.n	8005516 <get_ldnumber+0x76>
			tp = *path;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	60fa      	str	r2, [r7, #12]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	3b30      	subs	r3, #48	@ 0x30
 80054ec:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b09      	cmp	r3, #9
 80054f2:	d80e      	bhi.n	8005512 <get_ldnumber+0x72>
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d10a      	bne.n	8005512 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d107      	bne.n	8005512 <get_ldnumber+0x72>
					vol = (int)i;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	3301      	adds	r3, #1
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	e002      	b.n	800551c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800551a:	693b      	ldr	r3, [r7, #16]
}
 800551c:	4618      	mov	r0, r3
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	70da      	strb	r2, [r3, #3]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f04f 32ff 	mov.w	r2, #4294967295
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff f856 	bl	80045f4 <move_window>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <check_fs+0x2a>
 800554e:	2304      	movs	r3, #4
 8005550:	e038      	b.n	80055c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	3334      	adds	r3, #52	@ 0x34
 8005556:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800555a:	4618      	mov	r0, r3
 800555c:	f7fe fd98 	bl	8004090 <ld_word>
 8005560:	4603      	mov	r3, r0
 8005562:	461a      	mov	r2, r3
 8005564:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005568:	429a      	cmp	r2, r3
 800556a:	d001      	beq.n	8005570 <check_fs+0x48>
 800556c:	2303      	movs	r3, #3
 800556e:	e029      	b.n	80055c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005576:	2be9      	cmp	r3, #233	@ 0xe9
 8005578:	d009      	beq.n	800558e <check_fs+0x66>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005580:	2beb      	cmp	r3, #235	@ 0xeb
 8005582:	d11e      	bne.n	80055c2 <check_fs+0x9a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800558a:	2b90      	cmp	r3, #144	@ 0x90
 800558c:	d119      	bne.n	80055c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3334      	adds	r3, #52	@ 0x34
 8005592:	3336      	adds	r3, #54	@ 0x36
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fd94 	bl	80040c2 <ld_dword>
 800559a:	4603      	mov	r3, r0
 800559c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055a0:	4a0a      	ldr	r2, [pc, #40]	@ (80055cc <check_fs+0xa4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <check_fs+0x82>
 80055a6:	2300      	movs	r3, #0
 80055a8:	e00c      	b.n	80055c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3334      	adds	r3, #52	@ 0x34
 80055ae:	3352      	adds	r3, #82	@ 0x52
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe fd86 	bl	80040c2 <ld_dword>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4a05      	ldr	r2, [pc, #20]	@ (80055d0 <check_fs+0xa8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <check_fs+0x9a>
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80055c2:	2302      	movs	r3, #2
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	00544146 	.word	0x00544146
 80055d0:	33544146 	.word	0x33544146

080055d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b096      	sub	sp, #88	@ 0x58
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	4613      	mov	r3, r2
 80055e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff ff59 	bl	80054a0 <get_ldnumber>
 80055ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80055f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da01      	bge.n	80055fa <find_volume+0x26>
 80055f6:	230b      	movs	r3, #11
 80055f8:	e262      	b.n	8005ac0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80055fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005878 <find_volume+0x2a4>)
 80055fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <find_volume+0x3a>
 800560a:	230c      	movs	r3, #12
 800560c:	e258      	b.n	8005ac0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005612:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	f023 0301 	bic.w	r3, r3, #1
 800561a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800561c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d01a      	beq.n	800565a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	4618      	mov	r0, r3
 800562a:	f7fe fc93 	bl	8003f54 <disk_status>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005634:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10c      	bne.n	800565a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <find_volume+0x82>
 8005646:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005652:	230a      	movs	r3, #10
 8005654:	e234      	b.n	8005ac0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8005656:	2300      	movs	r3, #0
 8005658:	e232      	b.n	8005ac0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800565a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005662:	b2da      	uxtb	r2, r3
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fc8b 	bl	8003f88 <disk_initialize>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005684:	2303      	movs	r3, #3
 8005686:	e21b      	b.n	8005ac0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005688:	79fb      	ldrb	r3, [r7, #7]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <find_volume+0xca>
 800568e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800569a:	230a      	movs	r3, #10
 800569c:	e210      	b.n	8005ac0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	7858      	ldrb	r0, [r3, #1]
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	330c      	adds	r3, #12
 80056a6:	461a      	mov	r2, r3
 80056a8:	2102      	movs	r1, #2
 80056aa:	f7fe fcd3 	bl	8004054 <disk_ioctl>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <find_volume+0xe4>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e203      	b.n	8005ac0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	899b      	ldrh	r3, [r3, #12]
 80056bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c0:	d80d      	bhi.n	80056de <find_volume+0x10a>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	899b      	ldrh	r3, [r3, #12]
 80056c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ca:	d308      	bcc.n	80056de <find_volume+0x10a>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	899b      	ldrh	r3, [r3, #12]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d4:	899b      	ldrh	r3, [r3, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <find_volume+0x10e>
 80056de:	2301      	movs	r3, #1
 80056e0:	e1ee      	b.n	8005ac0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80056e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056ea:	f7ff ff1d 	bl	8005528 <check_fs>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80056f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d149      	bne.n	8005790 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80056fc:	2300      	movs	r3, #0
 80056fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005700:	e01e      	b.n	8005740 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8005708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005710:	4413      	add	r3, r2
 8005712:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	3304      	adds	r3, #4
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <find_volume+0x158>
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	3308      	adds	r3, #8
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fccd 	bl	80040c2 <ld_dword>
 8005728:	4602      	mov	r2, r0
 800572a:	e000      	b.n	800572e <find_volume+0x15a>
 800572c:	2200      	movs	r2, #0
 800572e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	3358      	adds	r3, #88	@ 0x58
 8005734:	443b      	add	r3, r7
 8005736:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800573a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800573c:	3301      	adds	r3, #1
 800573e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005740:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005742:	2b03      	cmp	r3, #3
 8005744:	d9dd      	bls.n	8005702 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005746:	2300      	movs	r3, #0
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800574a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <find_volume+0x182>
 8005750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005752:	3b01      	subs	r3, #1
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	3358      	adds	r3, #88	@ 0x58
 800575c:	443b      	add	r3, r7
 800575e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005762:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <find_volume+0x1a2>
 800576a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800576c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800576e:	f7ff fedb 	bl	8005528 <check_fs>
 8005772:	4603      	mov	r3, r0
 8005774:	e000      	b.n	8005778 <find_volume+0x1a4>
 8005776:	2303      	movs	r3, #3
 8005778:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800577c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005780:	2b01      	cmp	r3, #1
 8005782:	d905      	bls.n	8005790 <find_volume+0x1bc>
 8005784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005786:	3301      	adds	r3, #1
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
 800578a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578c:	2b03      	cmp	r3, #3
 800578e:	d9e2      	bls.n	8005756 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005790:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005794:	2b04      	cmp	r3, #4
 8005796:	d101      	bne.n	800579c <find_volume+0x1c8>
 8005798:	2301      	movs	r3, #1
 800579a:	e191      	b.n	8005ac0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800579c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d901      	bls.n	80057a8 <find_volume+0x1d4>
 80057a4:	230d      	movs	r3, #13
 80057a6:	e18b      	b.n	8005ac0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	3334      	adds	r3, #52	@ 0x34
 80057ac:	330b      	adds	r3, #11
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe fc6e 	bl	8004090 <ld_word>
 80057b4:	4603      	mov	r3, r0
 80057b6:	461a      	mov	r2, r3
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	899b      	ldrh	r3, [r3, #12]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d001      	beq.n	80057c4 <find_volume+0x1f0>
 80057c0:	230d      	movs	r3, #13
 80057c2:	e17d      	b.n	8005ac0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	3334      	adds	r3, #52	@ 0x34
 80057c8:	3316      	adds	r3, #22
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fc60 	bl	8004090 <ld_word>
 80057d0:	4603      	mov	r3, r0
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80057d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <find_volume+0x214>
 80057da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057dc:	3334      	adds	r3, #52	@ 0x34
 80057de:	3324      	adds	r3, #36	@ 0x24
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fc6e 	bl	80040c2 <ld_dword>
 80057e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80057f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	789b      	ldrb	r3, [r3, #2]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d005      	beq.n	800580c <find_volume+0x238>
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	789b      	ldrb	r3, [r3, #2]
 8005804:	2b02      	cmp	r3, #2
 8005806:	d001      	beq.n	800580c <find_volume+0x238>
 8005808:	230d      	movs	r3, #13
 800580a:	e159      	b.n	8005ac0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	789b      	ldrb	r3, [r3, #2]
 8005810:	461a      	mov	r2, r3
 8005812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005814:	fb02 f303 	mul.w	r3, r2, r3
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	461a      	mov	r2, r3
 8005822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005824:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005828:	895b      	ldrh	r3, [r3, #10]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d008      	beq.n	8005840 <find_volume+0x26c>
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	895b      	ldrh	r3, [r3, #10]
 8005832:	461a      	mov	r2, r3
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	3b01      	subs	r3, #1
 800583a:	4013      	ands	r3, r2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <find_volume+0x270>
 8005840:	230d      	movs	r3, #13
 8005842:	e13d      	b.n	8005ac0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	3334      	adds	r3, #52	@ 0x34
 8005848:	3311      	adds	r3, #17
 800584a:	4618      	mov	r0, r3
 800584c:	f7fe fc20 	bl	8004090 <ld_word>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585a:	891b      	ldrh	r3, [r3, #8]
 800585c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800585e:	8992      	ldrh	r2, [r2, #12]
 8005860:	0952      	lsrs	r2, r2, #5
 8005862:	b292      	uxth	r2, r2
 8005864:	fbb3 f1f2 	udiv	r1, r3, r2
 8005868:	fb01 f202 	mul.w	r2, r1, r2
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <find_volume+0x2a8>
 8005874:	230d      	movs	r3, #13
 8005876:	e123      	b.n	8005ac0 <find_volume+0x4ec>
 8005878:	20002668 	.word	0x20002668

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800587c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587e:	3334      	adds	r3, #52	@ 0x34
 8005880:	3313      	adds	r3, #19
 8005882:	4618      	mov	r0, r3
 8005884:	f7fe fc04 	bl	8004090 <ld_word>
 8005888:	4603      	mov	r3, r0
 800588a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800588c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <find_volume+0x2cc>
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	3334      	adds	r3, #52	@ 0x34
 8005896:	3320      	adds	r3, #32
 8005898:	4618      	mov	r0, r3
 800589a:	f7fe fc12 	bl	80040c2 <ld_dword>
 800589e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a2:	3334      	adds	r3, #52	@ 0x34
 80058a4:	330e      	adds	r3, #14
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fbf2 	bl	8004090 <ld_word>
 80058ac:	4603      	mov	r3, r0
 80058ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <find_volume+0x2e6>
 80058b6:	230d      	movs	r3, #13
 80058b8:	e102      	b.n	8005ac0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058be:	4413      	add	r3, r2
 80058c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c2:	8911      	ldrh	r1, [r2, #8]
 80058c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058c6:	8992      	ldrh	r2, [r2, #12]
 80058c8:	0952      	lsrs	r2, r2, #5
 80058ca:	b292      	uxth	r2, r2
 80058cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80058d0:	b292      	uxth	r2, r2
 80058d2:	4413      	add	r3, r2
 80058d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	429a      	cmp	r2, r3
 80058dc:	d201      	bcs.n	80058e2 <find_volume+0x30e>
 80058de:	230d      	movs	r3, #13
 80058e0:	e0ee      	b.n	8005ac0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80058e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058ea:	8952      	ldrh	r2, [r2, #10]
 80058ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <find_volume+0x328>
 80058f8:	230d      	movs	r3, #13
 80058fa:	e0e1      	b.n	8005ac0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 80058fc:	2303      	movs	r3, #3
 80058fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005908:	4293      	cmp	r3, r2
 800590a:	d802      	bhi.n	8005912 <find_volume+0x33e>
 800590c:	2302      	movs	r3, #2
 800590e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005918:	4293      	cmp	r3, r2
 800591a:	d802      	bhi.n	8005922 <find_volume+0x34e>
 800591c:	2301      	movs	r3, #1
 800591e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	1c9a      	adds	r2, r3, #2
 8005926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005928:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800592e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005930:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005934:	441a      	add	r2, r3
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800593a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800593c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593e:	441a      	add	r2, r3
 8005940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005942:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8005944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005948:	2b03      	cmp	r3, #3
 800594a:	d11e      	bne.n	800598a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800594c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594e:	3334      	adds	r3, #52	@ 0x34
 8005950:	332a      	adds	r3, #42	@ 0x2a
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fb9c 	bl	8004090 <ld_word>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <find_volume+0x38e>
 800595e:	230d      	movs	r3, #13
 8005960:	e0ae      	b.n	8005ac0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005964:	891b      	ldrh	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <find_volume+0x39a>
 800596a:	230d      	movs	r3, #13
 800596c:	e0a8      	b.n	8005ac0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	3334      	adds	r3, #52	@ 0x34
 8005972:	332c      	adds	r3, #44	@ 0x2c
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe fba4 	bl	80040c2 <ld_dword>
 800597a:	4602      	mov	r2, r0
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	647b      	str	r3, [r7, #68]	@ 0x44
 8005988:	e01f      	b.n	80059ca <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800598a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598c:	891b      	ldrh	r3, [r3, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <find_volume+0x3c2>
 8005992:	230d      	movs	r3, #13
 8005994:	e094      	b.n	8005ac0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005998:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800599a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800599c:	441a      	add	r2, r3
 800599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a0:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d103      	bne.n	80059b2 <find_volume+0x3de>
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	e00a      	b.n	80059c8 <find_volume+0x3f4>
 80059b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	4613      	mov	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	4413      	add	r3, r2
 80059bc:	085a      	lsrs	r2, r3, #1
 80059be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059c8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	899b      	ldrh	r3, [r3, #12]
 80059d2:	4619      	mov	r1, r3
 80059d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059d6:	440b      	add	r3, r1
 80059d8:	3b01      	subs	r3, #1
 80059da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059dc:	8989      	ldrh	r1, [r1, #12]
 80059de:	fbb3 f3f1 	udiv	r3, r3, r1
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d201      	bcs.n	80059ea <find_volume+0x416>
 80059e6:	230d      	movs	r3, #13
 80059e8:	e06a      	b.n	8005ac0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	695a      	ldr	r2, [r3, #20]
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	2280      	movs	r2, #128	@ 0x80
 80059fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005a00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d149      	bne.n	8005a9c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	3334      	adds	r3, #52	@ 0x34
 8005a0c:	3330      	adds	r3, #48	@ 0x30
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fb3e 	bl	8004090 <ld_word>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d140      	bne.n	8005a9c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a22:	f7fe fde7 	bl	80045f4 <move_window>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d137      	bne.n	8005a9c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	2200      	movs	r2, #0
 8005a30:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	3334      	adds	r3, #52	@ 0x34
 8005a36:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fb28 	bl	8004090 <ld_word>
 8005a40:	4603      	mov	r3, r0
 8005a42:	461a      	mov	r2, r3
 8005a44:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d127      	bne.n	8005a9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	3334      	adds	r3, #52	@ 0x34
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe fb36 	bl	80040c2 <ld_dword>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <find_volume+0x4f4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d11e      	bne.n	8005a9c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a60:	3334      	adds	r3, #52	@ 0x34
 8005a62:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe fb2b 	bl	80040c2 <ld_dword>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <find_volume+0x4f8>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d113      	bne.n	8005a9c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a76:	3334      	adds	r3, #52	@ 0x34
 8005a78:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fb20 	bl	80040c2 <ld_dword>
 8005a82:	4602      	mov	r2, r0
 8005a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a86:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8a:	3334      	adds	r3, #52	@ 0x34
 8005a8c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe fb16 	bl	80040c2 <ld_dword>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005aa2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <find_volume+0x4fc>)
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <find_volume+0x4fc>)
 8005aae:	801a      	strh	r2, [r3, #0]
 8005ab0:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <find_volume+0x4fc>)
 8005ab2:	881a      	ldrh	r2, [r3, #0]
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ab8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005aba:	f7fe fd33 	bl	8004524 <clear_lock>
#endif
	return FR_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3758      	adds	r7, #88	@ 0x58
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	41615252 	.word	0x41615252
 8005acc:	61417272 	.word	0x61417272
 8005ad0:	2000266c 	.word	0x2000266c

08005ad4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005ade:	2309      	movs	r3, #9
 8005ae0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01c      	beq.n	8005b22 <validate+0x4e>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d018      	beq.n	8005b22 <validate+0x4e>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <validate+0x4e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	889a      	ldrh	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	88db      	ldrh	r3, [r3, #6]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d10c      	bne.n	8005b22 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	785b      	ldrb	r3, [r3, #1]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fa20 	bl	8003f54 <disk_status>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <validate+0x4e>
			res = FR_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <validate+0x5a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	e000      	b.n	8005b30 <validate+0x5c>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	683a      	ldr	r2, [r7, #0]
 8005b32:	6013      	str	r3, [r2, #0]
	return res;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fca2 	bl	80054a0 <get_ldnumber>
 8005b5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da01      	bge.n	8005b68 <f_mount+0x28>
 8005b64:	230b      	movs	r3, #11
 8005b66:	e02b      	b.n	8005bc0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b68:	4a17      	ldr	r2, [pc, #92]	@ (8005bc8 <f_mount+0x88>)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b78:	69b8      	ldr	r0, [r7, #24]
 8005b7a:	f7fe fcd3 	bl	8004524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	490d      	ldr	r1, [pc, #52]	@ (8005bc8 <f_mount+0x88>)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <f_mount+0x66>
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <f_mount+0x6a>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e00a      	b.n	8005bc0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005baa:	f107 010c 	add.w	r1, r7, #12
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff fd0d 	bl	80055d4 <find_volume>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20002668 	.word	0x20002668

08005bcc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b098      	sub	sp, #96	@ 0x60
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <f_open+0x18>
 8005be0:	2309      	movs	r3, #9
 8005be2:	e1b7      	b.n	8005f54 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005bea:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005bec:	79fa      	ldrb	r2, [r7, #7]
 8005bee:	f107 0110 	add.w	r1, r7, #16
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7ff fcec 	bl	80055d4 <find_volume>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8005c02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 819b 	bne.w	8005f42 <f_open+0x376>
		dj.obj.fs = fs;
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	f107 0314 	add.w	r3, r7, #20
 8005c16:	4611      	mov	r1, r2
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7ff fbcb 	bl	80053b4 <follow_path>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d118      	bne.n	8005c5e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	da03      	bge.n	8005c3e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c36:	2306      	movs	r3, #6
 8005c38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005c3c:	e00f      	b.n	8005c5e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	bf8c      	ite	hi
 8005c44:	2301      	movhi	r3, #1
 8005c46:	2300      	movls	r3, #0
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f107 0314 	add.w	r3, r7, #20
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fe fb1e 	bl	8004294 <chk_lock>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	f003 031c 	and.w	r3, r3, #28
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d07f      	beq.n	8005d68 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005c68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d017      	beq.n	8005ca0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d10e      	bne.n	8005c96 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005c78:	f7fe fb68 	bl	800434c <enq_lock>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d006      	beq.n	8005c90 <f_open+0xc4>
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff facd 	bl	8005226 <dir_register>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	e000      	b.n	8005c92 <f_open+0xc6>
 8005c90:	2312      	movs	r3, #18
 8005c92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	f043 0308 	orr.w	r3, r3, #8
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	e010      	b.n	8005cc2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ca0:	7ebb      	ldrb	r3, [r7, #26]
 8005ca2:	f003 0311 	and.w	r3, r3, #17
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <f_open+0xe6>
					res = FR_DENIED;
 8005caa:	2307      	movs	r3, #7
 8005cac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005cb0:	e007      	b.n	8005cc2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <f_open+0xf6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d168      	bne.n	8005d9c <f_open+0x1d0>
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d063      	beq.n	8005d9c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005cd4:	f7fe f8e0 	bl	8003e98 <get_fattime>
 8005cd8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cdc:	330e      	adds	r3, #14
 8005cde:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe fa2c 	bl	800413e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce8:	3316      	adds	r3, #22
 8005cea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe fa26 	bl	800413e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf4:	330b      	adds	r3, #11
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f9fc 	bl	80050fe <ld_clust>
 8005d06:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff fa14 	bl	800513c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	331c      	adds	r3, #28
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fe fa0f 	bl	800413e <st_dword>
					fs->wflag = 1;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2201      	movs	r2, #1
 8005d24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d037      	beq.n	8005d9c <f_open+0x1d0>
						dw = fs->winsect;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005d32:	f107 0314 	add.w	r3, r7, #20
 8005d36:	2200      	movs	r2, #0
 8005d38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe ff04 	bl	8004b48 <remove_chain>
 8005d40:	4603      	mov	r3, r0
 8005d42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005d46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d126      	bne.n	8005d9c <f_open+0x1d0>
							res = move_window(fs, dw);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fc4e 	bl	80045f4 <move_window>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d62:	3a01      	subs	r2, #1
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	e019      	b.n	8005d9c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d115      	bne.n	8005d9c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d70:	7ebb      	ldrb	r3, [r7, #26]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d003      	beq.n	8005d82 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005d80:	e00c      	b.n	8005d9c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	f003 0302 	and.w	r3, r3, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <f_open+0x1d0>
 8005d8c:	7ebb      	ldrb	r3, [r7, #26]
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <f_open+0x1d0>
						res = FR_DENIED;
 8005d96:	2307      	movs	r3, #7
 8005d98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d126      	bne.n	8005df2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005dbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	bf8c      	ite	hi
 8005dca:	2301      	movhi	r3, #1
 8005dcc:	2300      	movls	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fad9 	bl	8004390 <inc_lock>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <f_open+0x226>
 8005dec:	2302      	movs	r3, #2
 8005dee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005df2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 80a3 	bne.w	8005f42 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e00:	4611      	mov	r1, r2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff f97b 	bl	80050fe <ld_clust>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e10:	331c      	adds	r3, #28
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe f955 	bl	80040c2 <ld_dword>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	88da      	ldrh	r2, [r3, #6]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	79fa      	ldrb	r2, [r7, #7]
 8005e36:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3330      	adds	r3, #48	@ 0x30
 8005e4e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe f9bf 	bl	80041d8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e5a:	79fb      	ldrb	r3, [r7, #7]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d06e      	beq.n	8005f42 <f_open+0x376>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d06a      	beq.n	8005f42 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	895b      	ldrh	r3, [r3, #10]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	899b      	ldrh	r3, [r3, #12]
 8005e7e:	fb02 f303 	mul.w	r3, r2, r3
 8005e82:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e90:	e016      	b.n	8005ec0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fc69 	bl	800476e <get_fat>
 8005e9c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d802      	bhi.n	8005eaa <f_open+0x2de>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d102      	bne.n	8005eb8 <f_open+0x2ec>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005eb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <f_open+0x304>
 8005ec8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d8e0      	bhi.n	8005e92 <f_open+0x2c6>
				}
				fp->clust = clst;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ed4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d131      	bne.n	8005f42 <f_open+0x376>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	899b      	ldrh	r3, [r3, #12]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ee6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eea:	fb01 f202 	mul.w	r2, r1, r2
 8005eee:	1a9b      	subs	r3, r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d026      	beq.n	8005f42 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fc19 	bl	8004730 <clust2sect>
 8005efe:	6478      	str	r0, [r7, #68]	@ 0x44
 8005f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <f_open+0x342>
						res = FR_INT_ERR;
 8005f06:	2302      	movs	r3, #2
 8005f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005f0c:	e019      	b.n	8005f42 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	899b      	ldrh	r3, [r3, #12]
 8005f12:	461a      	mov	r2, r3
 8005f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f16:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	7858      	ldrb	r0, [r3, #1]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	2301      	movs	r3, #1
 8005f32:	f7fe f84f 	bl	8003fd4 <disk_read>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <f_open+0x376>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <f_open+0x384>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3760      	adds	r7, #96	@ 0x60
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	@ 0x30
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f107 0210 	add.w	r2, r7, #16
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fda9 	bl	8005ad4 <validate>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d107      	bne.n	8005fa0 <f_write+0x44>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	7d5b      	ldrb	r3, [r3, #21]
 8005f94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <f_write+0x4a>
 8005fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fa4:	e16a      	b.n	800627c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	7d1b      	ldrb	r3, [r3, #20]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d101      	bne.n	8005fb6 <f_write+0x5a>
 8005fb2:	2307      	movs	r3, #7
 8005fb4:	e162      	b.n	800627c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	441a      	add	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	f080 814c 	bcs.w	8006260 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	43db      	mvns	r3, r3
 8005fce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005fd0:	e146      	b.n	8006260 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	8992      	ldrh	r2, [r2, #12]
 8005fda:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fde:	fb01 f202 	mul.w	r2, r1, r2
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f040 80f1 	bne.w	80061cc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	8992      	ldrh	r2, [r2, #12]
 8005ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	8952      	ldrh	r2, [r2, #10]
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d143      	bne.n	800608e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10c      	bne.n	8006028 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006016:	2b00      	cmp	r3, #0
 8006018:	d11a      	bne.n	8006050 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2100      	movs	r1, #0
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fdf7 	bl	8004c12 <create_chain>
 8006024:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006026:	e013      	b.n	8006050 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	4619      	mov	r1, r3
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f7fe fe83 	bl	8004d42 <clmt_clust>
 800603c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800603e:	e007      	b.n	8006050 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7fe fde2 	bl	8004c12 <create_chain>
 800604e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8109 	beq.w	800626a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605a:	2b01      	cmp	r3, #1
 800605c:	d104      	bne.n	8006068 <f_write+0x10c>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2202      	movs	r2, #2
 8006062:	755a      	strb	r2, [r3, #21]
 8006064:	2302      	movs	r3, #2
 8006066:	e109      	b.n	800627c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606e:	d104      	bne.n	800607a <f_write+0x11e>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	755a      	strb	r2, [r3, #21]
 8006076:	2301      	movs	r3, #1
 8006078:	e100      	b.n	800627c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d102      	bne.n	800608e <f_write+0x132>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800608c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	7d1b      	ldrb	r3, [r3, #20]
 8006092:	b25b      	sxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	da18      	bge.n	80060ca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	7858      	ldrb	r0, [r3, #1]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	2301      	movs	r3, #1
 80060a8:	f7fd ffb4 	bl	8004014 <disk_write>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d004      	beq.n	80060bc <f_write+0x160>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2201      	movs	r2, #1
 80060b6:	755a      	strb	r2, [r3, #21]
 80060b8:	2301      	movs	r3, #1
 80060ba:	e0df      	b.n	800627c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	7d1b      	ldrb	r3, [r3, #20]
 80060c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fb2c 	bl	8004730 <clust2sect>
 80060d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <f_write+0x18e>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2202      	movs	r2, #2
 80060e4:	755a      	strb	r2, [r3, #21]
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0c8      	b.n	800627c <f_write+0x320>
			sect += csect;
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	4413      	add	r3, r2
 80060f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	899b      	ldrh	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d043      	beq.n	800618e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	4413      	add	r3, r2
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	8952      	ldrh	r2, [r2, #10]
 8006110:	4293      	cmp	r3, r2
 8006112:	d905      	bls.n	8006120 <f_write+0x1c4>
					cc = fs->csize - csect;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	895b      	ldrh	r3, [r3, #10]
 8006118:	461a      	mov	r2, r3
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	7858      	ldrb	r0, [r3, #1]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	69f9      	ldr	r1, [r7, #28]
 800612a:	f7fd ff73 	bl	8004014 <disk_write>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d004      	beq.n	800613e <f_write+0x1e2>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2201      	movs	r2, #1
 8006138:	755a      	strb	r2, [r3, #21]
 800613a:	2301      	movs	r3, #1
 800613c:	e09e      	b.n	800627c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	6a3a      	ldr	r2, [r7, #32]
 8006148:	429a      	cmp	r2, r3
 800614a:	d918      	bls.n	800617e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	8992      	ldrh	r2, [r2, #12]
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	18d1      	adds	r1, r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	899b      	ldrh	r3, [r3, #12]
 800616a:	461a      	mov	r2, r3
 800616c:	f7fe f813 	bl	8004196 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	7d1b      	ldrb	r3, [r3, #20]
 8006174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006178:	b2da      	uxtb	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	899b      	ldrh	r3, [r3, #12]
 8006182:	461a      	mov	r2, r3
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	fb02 f303 	mul.w	r3, r2, r3
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800618c:	e04b      	b.n	8006226 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	429a      	cmp	r2, r3
 8006196:	d016      	beq.n	80061c6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d210      	bcs.n	80061c6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	7858      	ldrb	r0, [r3, #1]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061ae:	2301      	movs	r3, #1
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	f7fd ff0f 	bl	8003fd4 <disk_read>
 80061b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d004      	beq.n	80061c6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	755a      	strb	r2, [r3, #21]
 80061c2:	2301      	movs	r3, #1
 80061c4:	e05a      	b.n	800627c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	899b      	ldrh	r3, [r3, #12]
 80061d0:	4618      	mov	r0, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	8992      	ldrh	r2, [r2, #12]
 80061da:	fbb3 f1f2 	udiv	r1, r3, r2
 80061de:	fb01 f202 	mul.w	r2, r1, r2
 80061e2:	1a9b      	subs	r3, r3, r2
 80061e4:	1ac3      	subs	r3, r0, r3
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80061e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d901      	bls.n	80061f4 <f_write+0x298>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	8992      	ldrh	r2, [r2, #12]
 8006202:	fbb3 f0f2 	udiv	r0, r3, r2
 8006206:	fb00 f202 	mul.w	r2, r0, r2
 800620a:	1a9b      	subs	r3, r3, r2
 800620c:	440b      	add	r3, r1
 800620e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006210:	69f9      	ldr	r1, [r7, #28]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd ffbf 	bl	8004196 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	7d1b      	ldrb	r3, [r3, #20]
 800621c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	4413      	add	r3, r2
 800622c:	61fb      	str	r3, [r7, #28]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	441a      	add	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	619a      	str	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	bf38      	it	cc
 8006246:	461a      	movcc	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	60da      	str	r2, [r3, #12]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	441a      	add	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f47f aeb5 	bne.w	8005fd2 <f_write+0x76>
 8006268:	e000      	b.n	800626c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800626a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	7d1b      	ldrb	r3, [r3, #20]
 8006270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006274:	b2da      	uxtb	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3730      	adds	r7, #48	@ 0x30
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f107 0208 	add.w	r2, r7, #8
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fc1d 	bl	8005ad4 <validate>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d168      	bne.n	8006376 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	7d1b      	ldrb	r3, [r3, #20]
 80062a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d062      	beq.n	8006376 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7d1b      	ldrb	r3, [r3, #20]
 80062b4:	b25b      	sxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	da15      	bge.n	80062e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	7858      	ldrb	r0, [r3, #1]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	2301      	movs	r3, #1
 80062ca:	f7fd fea3 	bl	8004014 <disk_write>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d001      	beq.n	80062d8 <f_sync+0x54>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e04f      	b.n	8006378 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	7d1b      	ldrb	r3, [r3, #20]
 80062dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80062e6:	f7fd fdd7 	bl	8003e98 <get_fattime>
 80062ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f7fe f97d 	bl	80045f4 <move_window>
 80062fa:	4603      	mov	r3, r0
 80062fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d138      	bne.n	8006376 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	330b      	adds	r3, #11
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	330b      	adds	r3, #11
 8006314:	f042 0220 	orr.w	r2, r2, #32
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6818      	ldr	r0, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	461a      	mov	r2, r3
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	f7fe ff08 	bl	800513c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f103 021c 	add.w	r2, r3, #28
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fd ff00 	bl	800413e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	3316      	adds	r3, #22
 8006342:	6939      	ldr	r1, [r7, #16]
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd fefa 	bl	800413e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3312      	adds	r3, #18
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f7fd fed9 	bl	8004108 <st_word>
					fs->wflag = 1;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2201      	movs	r2, #1
 800635a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fe f976 	bl	8004650 <sync_fs>
 8006364:	4603      	mov	r3, r0
 8006366:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7d1b      	ldrb	r3, [r3, #20]
 800636c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006370:	b2da      	uxtb	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006376:	7dfb      	ldrb	r3, [r7, #23]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff ff7b 	bl	8006284 <f_sync>
 800638e:	4603      	mov	r3, r0
 8006390:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d118      	bne.n	80063ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f107 0208 	add.w	r2, r7, #8
 800639e:	4611      	mov	r1, r2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fb97 	bl	8005ad4 <validate>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10c      	bne.n	80063ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7fe f879 	bl	80044ac <dec_lock>
 80063ba:	4603      	mov	r3, r0
 80063bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063be:	7bfb      	ldrb	r3, [r7, #15]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80063ea:	4b1f      	ldr	r3, [pc, #124]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 80063ec:	7a5b      	ldrb	r3, [r3, #9]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d131      	bne.n	8006458 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80063f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 80063f6:	7a5b      	ldrb	r3, [r3, #9]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 80063fe:	2100      	movs	r1, #0
 8006400:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006402:	4b19      	ldr	r3, [pc, #100]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 8006404:	7a5b      	ldrb	r3, [r3, #9]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4a17      	ldr	r2, [pc, #92]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 8006414:	7a5b      	ldrb	r3, [r3, #9]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	461a      	mov	r2, r3
 800641a:	4b13      	ldr	r3, [pc, #76]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 800641c:	4413      	add	r3, r2
 800641e:	79fa      	ldrb	r2, [r7, #7]
 8006420:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006422:	4b11      	ldr	r3, [pc, #68]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 8006424:	7a5b      	ldrb	r3, [r3, #9]
 8006426:	b2db      	uxtb	r3, r3
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	b2d1      	uxtb	r1, r2
 800642c:	4a0e      	ldr	r2, [pc, #56]	@ (8006468 <FATFS_LinkDriverEx+0x94>)
 800642e:	7251      	strb	r1, [r2, #9]
 8006430:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006432:	7dbb      	ldrb	r3, [r7, #22]
 8006434:	3330      	adds	r3, #48	@ 0x30
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	3301      	adds	r3, #1
 8006440:	223a      	movs	r2, #58	@ 0x3a
 8006442:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	3302      	adds	r3, #2
 8006448:	222f      	movs	r2, #47	@ 0x2f
 800644a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3303      	adds	r3, #3
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006454:	2300      	movs	r3, #0
 8006456:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006458:	7dfb      	ldrb	r3, [r7, #23]
}
 800645a:	4618      	mov	r0, r3
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	20002690 	.word	0x20002690

0800646c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006476:	2200      	movs	r2, #0
 8006478:	6839      	ldr	r1, [r7, #0]
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff ffaa 	bl	80063d4 <FATFS_LinkDriverEx>
 8006480:	4603      	mov	r3, r0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <siprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b510      	push	{r4, lr}
 8006490:	b09d      	sub	sp, #116	@ 0x74
 8006492:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006494:	9002      	str	r0, [sp, #8]
 8006496:	9006      	str	r0, [sp, #24]
 8006498:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800649c:	480a      	ldr	r0, [pc, #40]	@ (80064c8 <siprintf+0x3c>)
 800649e:	9107      	str	r1, [sp, #28]
 80064a0:	9104      	str	r1, [sp, #16]
 80064a2:	490a      	ldr	r1, [pc, #40]	@ (80064cc <siprintf+0x40>)
 80064a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064a8:	9105      	str	r1, [sp, #20]
 80064aa:	2400      	movs	r4, #0
 80064ac:	a902      	add	r1, sp, #8
 80064ae:	6800      	ldr	r0, [r0, #0]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80064b4:	f000 f994 	bl	80067e0 <_svfiprintf_r>
 80064b8:	9b02      	ldr	r3, [sp, #8]
 80064ba:	701c      	strb	r4, [r3, #0]
 80064bc:	b01d      	add	sp, #116	@ 0x74
 80064be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064c2:	b003      	add	sp, #12
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000028 	.word	0x20000028
 80064cc:	ffff0208 	.word	0xffff0208

080064d0 <memset>:
 80064d0:	4402      	add	r2, r0
 80064d2:	4603      	mov	r3, r0
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d100      	bne.n	80064da <memset+0xa>
 80064d8:	4770      	bx	lr
 80064da:	f803 1b01 	strb.w	r1, [r3], #1
 80064de:	e7f9      	b.n	80064d4 <memset+0x4>

080064e0 <__errno>:
 80064e0:	4b01      	ldr	r3, [pc, #4]	@ (80064e8 <__errno+0x8>)
 80064e2:	6818      	ldr	r0, [r3, #0]
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000028 	.word	0x20000028

080064ec <__libc_init_array>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006524 <__libc_init_array+0x38>)
 80064f0:	4c0d      	ldr	r4, [pc, #52]	@ (8006528 <__libc_init_array+0x3c>)
 80064f2:	1b64      	subs	r4, r4, r5
 80064f4:	10a4      	asrs	r4, r4, #2
 80064f6:	2600      	movs	r6, #0
 80064f8:	42a6      	cmp	r6, r4
 80064fa:	d109      	bne.n	8006510 <__libc_init_array+0x24>
 80064fc:	4d0b      	ldr	r5, [pc, #44]	@ (800652c <__libc_init_array+0x40>)
 80064fe:	4c0c      	ldr	r4, [pc, #48]	@ (8006530 <__libc_init_array+0x44>)
 8006500:	f000 fc64 	bl	8006dcc <_init>
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	2600      	movs	r6, #0
 800650a:	42a6      	cmp	r6, r4
 800650c:	d105      	bne.n	800651a <__libc_init_array+0x2e>
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	f855 3b04 	ldr.w	r3, [r5], #4
 8006514:	4798      	blx	r3
 8006516:	3601      	adds	r6, #1
 8006518:	e7ee      	b.n	80064f8 <__libc_init_array+0xc>
 800651a:	f855 3b04 	ldr.w	r3, [r5], #4
 800651e:	4798      	blx	r3
 8006520:	3601      	adds	r6, #1
 8006522:	e7f2      	b.n	800650a <__libc_init_array+0x1e>
 8006524:	08006f30 	.word	0x08006f30
 8006528:	08006f30 	.word	0x08006f30
 800652c:	08006f30 	.word	0x08006f30
 8006530:	08006f34 	.word	0x08006f34

08006534 <__retarget_lock_acquire_recursive>:
 8006534:	4770      	bx	lr

08006536 <__retarget_lock_release_recursive>:
 8006536:	4770      	bx	lr

08006538 <_free_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4605      	mov	r5, r0
 800653c:	2900      	cmp	r1, #0
 800653e:	d041      	beq.n	80065c4 <_free_r+0x8c>
 8006540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006544:	1f0c      	subs	r4, r1, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	bfb8      	it	lt
 800654a:	18e4      	addlt	r4, r4, r3
 800654c:	f000 f8e0 	bl	8006710 <__malloc_lock>
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <_free_r+0x90>)
 8006552:	6813      	ldr	r3, [r2, #0]
 8006554:	b933      	cbnz	r3, 8006564 <_free_r+0x2c>
 8006556:	6063      	str	r3, [r4, #4]
 8006558:	6014      	str	r4, [r2, #0]
 800655a:	4628      	mov	r0, r5
 800655c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006560:	f000 b8dc 	b.w	800671c <__malloc_unlock>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d908      	bls.n	800657a <_free_r+0x42>
 8006568:	6820      	ldr	r0, [r4, #0]
 800656a:	1821      	adds	r1, r4, r0
 800656c:	428b      	cmp	r3, r1
 800656e:	bf01      	itttt	eq
 8006570:	6819      	ldreq	r1, [r3, #0]
 8006572:	685b      	ldreq	r3, [r3, #4]
 8006574:	1809      	addeq	r1, r1, r0
 8006576:	6021      	streq	r1, [r4, #0]
 8006578:	e7ed      	b.n	8006556 <_free_r+0x1e>
 800657a:	461a      	mov	r2, r3
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	b10b      	cbz	r3, 8006584 <_free_r+0x4c>
 8006580:	42a3      	cmp	r3, r4
 8006582:	d9fa      	bls.n	800657a <_free_r+0x42>
 8006584:	6811      	ldr	r1, [r2, #0]
 8006586:	1850      	adds	r0, r2, r1
 8006588:	42a0      	cmp	r0, r4
 800658a:	d10b      	bne.n	80065a4 <_free_r+0x6c>
 800658c:	6820      	ldr	r0, [r4, #0]
 800658e:	4401      	add	r1, r0
 8006590:	1850      	adds	r0, r2, r1
 8006592:	4283      	cmp	r3, r0
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	d1e0      	bne.n	800655a <_free_r+0x22>
 8006598:	6818      	ldr	r0, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	6053      	str	r3, [r2, #4]
 800659e:	4408      	add	r0, r1
 80065a0:	6010      	str	r0, [r2, #0]
 80065a2:	e7da      	b.n	800655a <_free_r+0x22>
 80065a4:	d902      	bls.n	80065ac <_free_r+0x74>
 80065a6:	230c      	movs	r3, #12
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	e7d6      	b.n	800655a <_free_r+0x22>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428b      	cmp	r3, r1
 80065b2:	bf04      	itt	eq
 80065b4:	6819      	ldreq	r1, [r3, #0]
 80065b6:	685b      	ldreq	r3, [r3, #4]
 80065b8:	6063      	str	r3, [r4, #4]
 80065ba:	bf04      	itt	eq
 80065bc:	1809      	addeq	r1, r1, r0
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	6054      	str	r4, [r2, #4]
 80065c2:	e7ca      	b.n	800655a <_free_r+0x22>
 80065c4:	bd38      	pop	{r3, r4, r5, pc}
 80065c6:	bf00      	nop
 80065c8:	200027e0 	.word	0x200027e0

080065cc <sbrk_aligned>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4e0f      	ldr	r6, [pc, #60]	@ (800660c <sbrk_aligned+0x40>)
 80065d0:	460c      	mov	r4, r1
 80065d2:	6831      	ldr	r1, [r6, #0]
 80065d4:	4605      	mov	r5, r0
 80065d6:	b911      	cbnz	r1, 80065de <sbrk_aligned+0x12>
 80065d8:	f000 fba4 	bl	8006d24 <_sbrk_r>
 80065dc:	6030      	str	r0, [r6, #0]
 80065de:	4621      	mov	r1, r4
 80065e0:	4628      	mov	r0, r5
 80065e2:	f000 fb9f 	bl	8006d24 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d103      	bne.n	80065f2 <sbrk_aligned+0x26>
 80065ea:	f04f 34ff 	mov.w	r4, #4294967295
 80065ee:	4620      	mov	r0, r4
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	1cc4      	adds	r4, r0, #3
 80065f4:	f024 0403 	bic.w	r4, r4, #3
 80065f8:	42a0      	cmp	r0, r4
 80065fa:	d0f8      	beq.n	80065ee <sbrk_aligned+0x22>
 80065fc:	1a21      	subs	r1, r4, r0
 80065fe:	4628      	mov	r0, r5
 8006600:	f000 fb90 	bl	8006d24 <_sbrk_r>
 8006604:	3001      	adds	r0, #1
 8006606:	d1f2      	bne.n	80065ee <sbrk_aligned+0x22>
 8006608:	e7ef      	b.n	80065ea <sbrk_aligned+0x1e>
 800660a:	bf00      	nop
 800660c:	200027dc 	.word	0x200027dc

08006610 <_malloc_r>:
 8006610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006614:	1ccd      	adds	r5, r1, #3
 8006616:	f025 0503 	bic.w	r5, r5, #3
 800661a:	3508      	adds	r5, #8
 800661c:	2d0c      	cmp	r5, #12
 800661e:	bf38      	it	cc
 8006620:	250c      	movcc	r5, #12
 8006622:	2d00      	cmp	r5, #0
 8006624:	4606      	mov	r6, r0
 8006626:	db01      	blt.n	800662c <_malloc_r+0x1c>
 8006628:	42a9      	cmp	r1, r5
 800662a:	d904      	bls.n	8006636 <_malloc_r+0x26>
 800662c:	230c      	movs	r3, #12
 800662e:	6033      	str	r3, [r6, #0]
 8006630:	2000      	movs	r0, #0
 8006632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006636:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800670c <_malloc_r+0xfc>
 800663a:	f000 f869 	bl	8006710 <__malloc_lock>
 800663e:	f8d8 3000 	ldr.w	r3, [r8]
 8006642:	461c      	mov	r4, r3
 8006644:	bb44      	cbnz	r4, 8006698 <_malloc_r+0x88>
 8006646:	4629      	mov	r1, r5
 8006648:	4630      	mov	r0, r6
 800664a:	f7ff ffbf 	bl	80065cc <sbrk_aligned>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	4604      	mov	r4, r0
 8006652:	d158      	bne.n	8006706 <_malloc_r+0xf6>
 8006654:	f8d8 4000 	ldr.w	r4, [r8]
 8006658:	4627      	mov	r7, r4
 800665a:	2f00      	cmp	r7, #0
 800665c:	d143      	bne.n	80066e6 <_malloc_r+0xd6>
 800665e:	2c00      	cmp	r4, #0
 8006660:	d04b      	beq.n	80066fa <_malloc_r+0xea>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	4639      	mov	r1, r7
 8006666:	4630      	mov	r0, r6
 8006668:	eb04 0903 	add.w	r9, r4, r3
 800666c:	f000 fb5a 	bl	8006d24 <_sbrk_r>
 8006670:	4581      	cmp	r9, r0
 8006672:	d142      	bne.n	80066fa <_malloc_r+0xea>
 8006674:	6821      	ldr	r1, [r4, #0]
 8006676:	1a6d      	subs	r5, r5, r1
 8006678:	4629      	mov	r1, r5
 800667a:	4630      	mov	r0, r6
 800667c:	f7ff ffa6 	bl	80065cc <sbrk_aligned>
 8006680:	3001      	adds	r0, #1
 8006682:	d03a      	beq.n	80066fa <_malloc_r+0xea>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	442b      	add	r3, r5
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	f8d8 3000 	ldr.w	r3, [r8]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	bb62      	cbnz	r2, 80066ec <_malloc_r+0xdc>
 8006692:	f8c8 7000 	str.w	r7, [r8]
 8006696:	e00f      	b.n	80066b8 <_malloc_r+0xa8>
 8006698:	6822      	ldr	r2, [r4, #0]
 800669a:	1b52      	subs	r2, r2, r5
 800669c:	d420      	bmi.n	80066e0 <_malloc_r+0xd0>
 800669e:	2a0b      	cmp	r2, #11
 80066a0:	d917      	bls.n	80066d2 <_malloc_r+0xc2>
 80066a2:	1961      	adds	r1, r4, r5
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	6025      	str	r5, [r4, #0]
 80066a8:	bf18      	it	ne
 80066aa:	6059      	strne	r1, [r3, #4]
 80066ac:	6863      	ldr	r3, [r4, #4]
 80066ae:	bf08      	it	eq
 80066b0:	f8c8 1000 	streq.w	r1, [r8]
 80066b4:	5162      	str	r2, [r4, r5]
 80066b6:	604b      	str	r3, [r1, #4]
 80066b8:	4630      	mov	r0, r6
 80066ba:	f000 f82f 	bl	800671c <__malloc_unlock>
 80066be:	f104 000b 	add.w	r0, r4, #11
 80066c2:	1d23      	adds	r3, r4, #4
 80066c4:	f020 0007 	bic.w	r0, r0, #7
 80066c8:	1ac2      	subs	r2, r0, r3
 80066ca:	bf1c      	itt	ne
 80066cc:	1a1b      	subne	r3, r3, r0
 80066ce:	50a3      	strne	r3, [r4, r2]
 80066d0:	e7af      	b.n	8006632 <_malloc_r+0x22>
 80066d2:	6862      	ldr	r2, [r4, #4]
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	bf0c      	ite	eq
 80066d8:	f8c8 2000 	streq.w	r2, [r8]
 80066dc:	605a      	strne	r2, [r3, #4]
 80066de:	e7eb      	b.n	80066b8 <_malloc_r+0xa8>
 80066e0:	4623      	mov	r3, r4
 80066e2:	6864      	ldr	r4, [r4, #4]
 80066e4:	e7ae      	b.n	8006644 <_malloc_r+0x34>
 80066e6:	463c      	mov	r4, r7
 80066e8:	687f      	ldr	r7, [r7, #4]
 80066ea:	e7b6      	b.n	800665a <_malloc_r+0x4a>
 80066ec:	461a      	mov	r2, r3
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d1fb      	bne.n	80066ec <_malloc_r+0xdc>
 80066f4:	2300      	movs	r3, #0
 80066f6:	6053      	str	r3, [r2, #4]
 80066f8:	e7de      	b.n	80066b8 <_malloc_r+0xa8>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 f80c 	bl	800671c <__malloc_unlock>
 8006704:	e794      	b.n	8006630 <_malloc_r+0x20>
 8006706:	6005      	str	r5, [r0, #0]
 8006708:	e7d6      	b.n	80066b8 <_malloc_r+0xa8>
 800670a:	bf00      	nop
 800670c:	200027e0 	.word	0x200027e0

08006710 <__malloc_lock>:
 8006710:	4801      	ldr	r0, [pc, #4]	@ (8006718 <__malloc_lock+0x8>)
 8006712:	f7ff bf0f 	b.w	8006534 <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	200027d8 	.word	0x200027d8

0800671c <__malloc_unlock>:
 800671c:	4801      	ldr	r0, [pc, #4]	@ (8006724 <__malloc_unlock+0x8>)
 800671e:	f7ff bf0a 	b.w	8006536 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	200027d8 	.word	0x200027d8

08006728 <__ssputs_r>:
 8006728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672c:	688e      	ldr	r6, [r1, #8]
 800672e:	461f      	mov	r7, r3
 8006730:	42be      	cmp	r6, r7
 8006732:	680b      	ldr	r3, [r1, #0]
 8006734:	4682      	mov	sl, r0
 8006736:	460c      	mov	r4, r1
 8006738:	4690      	mov	r8, r2
 800673a:	d82d      	bhi.n	8006798 <__ssputs_r+0x70>
 800673c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006740:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006744:	d026      	beq.n	8006794 <__ssputs_r+0x6c>
 8006746:	6965      	ldr	r5, [r4, #20]
 8006748:	6909      	ldr	r1, [r1, #16]
 800674a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800674e:	eba3 0901 	sub.w	r9, r3, r1
 8006752:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006756:	1c7b      	adds	r3, r7, #1
 8006758:	444b      	add	r3, r9
 800675a:	106d      	asrs	r5, r5, #1
 800675c:	429d      	cmp	r5, r3
 800675e:	bf38      	it	cc
 8006760:	461d      	movcc	r5, r3
 8006762:	0553      	lsls	r3, r2, #21
 8006764:	d527      	bpl.n	80067b6 <__ssputs_r+0x8e>
 8006766:	4629      	mov	r1, r5
 8006768:	f7ff ff52 	bl	8006610 <_malloc_r>
 800676c:	4606      	mov	r6, r0
 800676e:	b360      	cbz	r0, 80067ca <__ssputs_r+0xa2>
 8006770:	6921      	ldr	r1, [r4, #16]
 8006772:	464a      	mov	r2, r9
 8006774:	f000 fae6 	bl	8006d44 <memcpy>
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800677e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	6126      	str	r6, [r4, #16]
 8006786:	6165      	str	r5, [r4, #20]
 8006788:	444e      	add	r6, r9
 800678a:	eba5 0509 	sub.w	r5, r5, r9
 800678e:	6026      	str	r6, [r4, #0]
 8006790:	60a5      	str	r5, [r4, #8]
 8006792:	463e      	mov	r6, r7
 8006794:	42be      	cmp	r6, r7
 8006796:	d900      	bls.n	800679a <__ssputs_r+0x72>
 8006798:	463e      	mov	r6, r7
 800679a:	6820      	ldr	r0, [r4, #0]
 800679c:	4632      	mov	r2, r6
 800679e:	4641      	mov	r1, r8
 80067a0:	f000 faa6 	bl	8006cf0 <memmove>
 80067a4:	68a3      	ldr	r3, [r4, #8]
 80067a6:	1b9b      	subs	r3, r3, r6
 80067a8:	60a3      	str	r3, [r4, #8]
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	4433      	add	r3, r6
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	2000      	movs	r0, #0
 80067b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b6:	462a      	mov	r2, r5
 80067b8:	f000 fad2 	bl	8006d60 <_realloc_r>
 80067bc:	4606      	mov	r6, r0
 80067be:	2800      	cmp	r0, #0
 80067c0:	d1e0      	bne.n	8006784 <__ssputs_r+0x5c>
 80067c2:	6921      	ldr	r1, [r4, #16]
 80067c4:	4650      	mov	r0, sl
 80067c6:	f7ff feb7 	bl	8006538 <_free_r>
 80067ca:	230c      	movs	r3, #12
 80067cc:	f8ca 3000 	str.w	r3, [sl]
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e7e9      	b.n	80067b2 <__ssputs_r+0x8a>
	...

080067e0 <_svfiprintf_r>:
 80067e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e4:	4698      	mov	r8, r3
 80067e6:	898b      	ldrh	r3, [r1, #12]
 80067e8:	061b      	lsls	r3, r3, #24
 80067ea:	b09d      	sub	sp, #116	@ 0x74
 80067ec:	4607      	mov	r7, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	4614      	mov	r4, r2
 80067f2:	d510      	bpl.n	8006816 <_svfiprintf_r+0x36>
 80067f4:	690b      	ldr	r3, [r1, #16]
 80067f6:	b973      	cbnz	r3, 8006816 <_svfiprintf_r+0x36>
 80067f8:	2140      	movs	r1, #64	@ 0x40
 80067fa:	f7ff ff09 	bl	8006610 <_malloc_r>
 80067fe:	6028      	str	r0, [r5, #0]
 8006800:	6128      	str	r0, [r5, #16]
 8006802:	b930      	cbnz	r0, 8006812 <_svfiprintf_r+0x32>
 8006804:	230c      	movs	r3, #12
 8006806:	603b      	str	r3, [r7, #0]
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	b01d      	add	sp, #116	@ 0x74
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	2340      	movs	r3, #64	@ 0x40
 8006814:	616b      	str	r3, [r5, #20]
 8006816:	2300      	movs	r3, #0
 8006818:	9309      	str	r3, [sp, #36]	@ 0x24
 800681a:	2320      	movs	r3, #32
 800681c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006820:	f8cd 800c 	str.w	r8, [sp, #12]
 8006824:	2330      	movs	r3, #48	@ 0x30
 8006826:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069c4 <_svfiprintf_r+0x1e4>
 800682a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800682e:	f04f 0901 	mov.w	r9, #1
 8006832:	4623      	mov	r3, r4
 8006834:	469a      	mov	sl, r3
 8006836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683a:	b10a      	cbz	r2, 8006840 <_svfiprintf_r+0x60>
 800683c:	2a25      	cmp	r2, #37	@ 0x25
 800683e:	d1f9      	bne.n	8006834 <_svfiprintf_r+0x54>
 8006840:	ebba 0b04 	subs.w	fp, sl, r4
 8006844:	d00b      	beq.n	800685e <_svfiprintf_r+0x7e>
 8006846:	465b      	mov	r3, fp
 8006848:	4622      	mov	r2, r4
 800684a:	4629      	mov	r1, r5
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ff6b 	bl	8006728 <__ssputs_r>
 8006852:	3001      	adds	r0, #1
 8006854:	f000 80a7 	beq.w	80069a6 <_svfiprintf_r+0x1c6>
 8006858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800685a:	445a      	add	r2, fp
 800685c:	9209      	str	r2, [sp, #36]	@ 0x24
 800685e:	f89a 3000 	ldrb.w	r3, [sl]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 809f 	beq.w	80069a6 <_svfiprintf_r+0x1c6>
 8006868:	2300      	movs	r3, #0
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006872:	f10a 0a01 	add.w	sl, sl, #1
 8006876:	9304      	str	r3, [sp, #16]
 8006878:	9307      	str	r3, [sp, #28]
 800687a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800687e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006880:	4654      	mov	r4, sl
 8006882:	2205      	movs	r2, #5
 8006884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006888:	484e      	ldr	r0, [pc, #312]	@ (80069c4 <_svfiprintf_r+0x1e4>)
 800688a:	f7f9 fcc9 	bl	8000220 <memchr>
 800688e:	9a04      	ldr	r2, [sp, #16]
 8006890:	b9d8      	cbnz	r0, 80068ca <_svfiprintf_r+0xea>
 8006892:	06d0      	lsls	r0, r2, #27
 8006894:	bf44      	itt	mi
 8006896:	2320      	movmi	r3, #32
 8006898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800689c:	0711      	lsls	r1, r2, #28
 800689e:	bf44      	itt	mi
 80068a0:	232b      	movmi	r3, #43	@ 0x2b
 80068a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a6:	f89a 3000 	ldrb.w	r3, [sl]
 80068aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80068ac:	d015      	beq.n	80068da <_svfiprintf_r+0xfa>
 80068ae:	9a07      	ldr	r2, [sp, #28]
 80068b0:	4654      	mov	r4, sl
 80068b2:	2000      	movs	r0, #0
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4621      	mov	r1, r4
 80068ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068be:	3b30      	subs	r3, #48	@ 0x30
 80068c0:	2b09      	cmp	r3, #9
 80068c2:	d94b      	bls.n	800695c <_svfiprintf_r+0x17c>
 80068c4:	b1b0      	cbz	r0, 80068f4 <_svfiprintf_r+0x114>
 80068c6:	9207      	str	r2, [sp, #28]
 80068c8:	e014      	b.n	80068f4 <_svfiprintf_r+0x114>
 80068ca:	eba0 0308 	sub.w	r3, r0, r8
 80068ce:	fa09 f303 	lsl.w	r3, r9, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	9304      	str	r3, [sp, #16]
 80068d6:	46a2      	mov	sl, r4
 80068d8:	e7d2      	b.n	8006880 <_svfiprintf_r+0xa0>
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	1d19      	adds	r1, r3, #4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	9103      	str	r1, [sp, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bfbb      	ittet	lt
 80068e6:	425b      	neglt	r3, r3
 80068e8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ec:	9307      	strge	r3, [sp, #28]
 80068ee:	9307      	strlt	r3, [sp, #28]
 80068f0:	bfb8      	it	lt
 80068f2:	9204      	strlt	r2, [sp, #16]
 80068f4:	7823      	ldrb	r3, [r4, #0]
 80068f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80068f8:	d10a      	bne.n	8006910 <_svfiprintf_r+0x130>
 80068fa:	7863      	ldrb	r3, [r4, #1]
 80068fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80068fe:	d132      	bne.n	8006966 <_svfiprintf_r+0x186>
 8006900:	9b03      	ldr	r3, [sp, #12]
 8006902:	1d1a      	adds	r2, r3, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	9203      	str	r2, [sp, #12]
 8006908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800690c:	3402      	adds	r4, #2
 800690e:	9305      	str	r3, [sp, #20]
 8006910:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069d4 <_svfiprintf_r+0x1f4>
 8006914:	7821      	ldrb	r1, [r4, #0]
 8006916:	2203      	movs	r2, #3
 8006918:	4650      	mov	r0, sl
 800691a:	f7f9 fc81 	bl	8000220 <memchr>
 800691e:	b138      	cbz	r0, 8006930 <_svfiprintf_r+0x150>
 8006920:	9b04      	ldr	r3, [sp, #16]
 8006922:	eba0 000a 	sub.w	r0, r0, sl
 8006926:	2240      	movs	r2, #64	@ 0x40
 8006928:	4082      	lsls	r2, r0
 800692a:	4313      	orrs	r3, r2
 800692c:	3401      	adds	r4, #1
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006934:	4824      	ldr	r0, [pc, #144]	@ (80069c8 <_svfiprintf_r+0x1e8>)
 8006936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800693a:	2206      	movs	r2, #6
 800693c:	f7f9 fc70 	bl	8000220 <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d036      	beq.n	80069b2 <_svfiprintf_r+0x1d2>
 8006944:	4b21      	ldr	r3, [pc, #132]	@ (80069cc <_svfiprintf_r+0x1ec>)
 8006946:	bb1b      	cbnz	r3, 8006990 <_svfiprintf_r+0x1b0>
 8006948:	9b03      	ldr	r3, [sp, #12]
 800694a:	3307      	adds	r3, #7
 800694c:	f023 0307 	bic.w	r3, r3, #7
 8006950:	3308      	adds	r3, #8
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006956:	4433      	add	r3, r6
 8006958:	9309      	str	r3, [sp, #36]	@ 0x24
 800695a:	e76a      	b.n	8006832 <_svfiprintf_r+0x52>
 800695c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006960:	460c      	mov	r4, r1
 8006962:	2001      	movs	r0, #1
 8006964:	e7a8      	b.n	80068b8 <_svfiprintf_r+0xd8>
 8006966:	2300      	movs	r3, #0
 8006968:	3401      	adds	r4, #1
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	4619      	mov	r1, r3
 800696e:	f04f 0c0a 	mov.w	ip, #10
 8006972:	4620      	mov	r0, r4
 8006974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006978:	3a30      	subs	r2, #48	@ 0x30
 800697a:	2a09      	cmp	r2, #9
 800697c:	d903      	bls.n	8006986 <_svfiprintf_r+0x1a6>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0c6      	beq.n	8006910 <_svfiprintf_r+0x130>
 8006982:	9105      	str	r1, [sp, #20]
 8006984:	e7c4      	b.n	8006910 <_svfiprintf_r+0x130>
 8006986:	fb0c 2101 	mla	r1, ip, r1, r2
 800698a:	4604      	mov	r4, r0
 800698c:	2301      	movs	r3, #1
 800698e:	e7f0      	b.n	8006972 <_svfiprintf_r+0x192>
 8006990:	ab03      	add	r3, sp, #12
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	462a      	mov	r2, r5
 8006996:	4b0e      	ldr	r3, [pc, #56]	@ (80069d0 <_svfiprintf_r+0x1f0>)
 8006998:	a904      	add	r1, sp, #16
 800699a:	4638      	mov	r0, r7
 800699c:	f3af 8000 	nop.w
 80069a0:	1c42      	adds	r2, r0, #1
 80069a2:	4606      	mov	r6, r0
 80069a4:	d1d6      	bne.n	8006954 <_svfiprintf_r+0x174>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	065b      	lsls	r3, r3, #25
 80069aa:	f53f af2d 	bmi.w	8006808 <_svfiprintf_r+0x28>
 80069ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069b0:	e72c      	b.n	800680c <_svfiprintf_r+0x2c>
 80069b2:	ab03      	add	r3, sp, #12
 80069b4:	9300      	str	r3, [sp, #0]
 80069b6:	462a      	mov	r2, r5
 80069b8:	4b05      	ldr	r3, [pc, #20]	@ (80069d0 <_svfiprintf_r+0x1f0>)
 80069ba:	a904      	add	r1, sp, #16
 80069bc:	4638      	mov	r0, r7
 80069be:	f000 f879 	bl	8006ab4 <_printf_i>
 80069c2:	e7ed      	b.n	80069a0 <_svfiprintf_r+0x1c0>
 80069c4:	08006ef4 	.word	0x08006ef4
 80069c8:	08006efe 	.word	0x08006efe
 80069cc:	00000000 	.word	0x00000000
 80069d0:	08006729 	.word	0x08006729
 80069d4:	08006efa 	.word	0x08006efa

080069d8 <_printf_common>:
 80069d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069dc:	4616      	mov	r6, r2
 80069de:	4698      	mov	r8, r3
 80069e0:	688a      	ldr	r2, [r1, #8]
 80069e2:	690b      	ldr	r3, [r1, #16]
 80069e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfb8      	it	lt
 80069ec:	4613      	movlt	r3, r2
 80069ee:	6033      	str	r3, [r6, #0]
 80069f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069f4:	4607      	mov	r7, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	b10a      	cbz	r2, 80069fe <_printf_common+0x26>
 80069fa:	3301      	adds	r3, #1
 80069fc:	6033      	str	r3, [r6, #0]
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	0699      	lsls	r1, r3, #26
 8006a02:	bf42      	ittt	mi
 8006a04:	6833      	ldrmi	r3, [r6, #0]
 8006a06:	3302      	addmi	r3, #2
 8006a08:	6033      	strmi	r3, [r6, #0]
 8006a0a:	6825      	ldr	r5, [r4, #0]
 8006a0c:	f015 0506 	ands.w	r5, r5, #6
 8006a10:	d106      	bne.n	8006a20 <_printf_common+0x48>
 8006a12:	f104 0a19 	add.w	sl, r4, #25
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	6832      	ldr	r2, [r6, #0]
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dc26      	bgt.n	8006a6e <_printf_common+0x96>
 8006a20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	3b00      	subs	r3, #0
 8006a28:	bf18      	it	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	0692      	lsls	r2, r2, #26
 8006a2e:	d42b      	bmi.n	8006a88 <_printf_common+0xb0>
 8006a30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a34:	4641      	mov	r1, r8
 8006a36:	4638      	mov	r0, r7
 8006a38:	47c8      	blx	r9
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d01e      	beq.n	8006a7c <_printf_common+0xa4>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6922      	ldr	r2, [r4, #16]
 8006a42:	f003 0306 	and.w	r3, r3, #6
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf02      	ittt	eq
 8006a4a:	68e5      	ldreq	r5, [r4, #12]
 8006a4c:	6833      	ldreq	r3, [r6, #0]
 8006a4e:	1aed      	subeq	r5, r5, r3
 8006a50:	68a3      	ldr	r3, [r4, #8]
 8006a52:	bf0c      	ite	eq
 8006a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a58:	2500      	movne	r5, #0
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	bfc4      	itt	gt
 8006a5e:	1a9b      	subgt	r3, r3, r2
 8006a60:	18ed      	addgt	r5, r5, r3
 8006a62:	2600      	movs	r6, #0
 8006a64:	341a      	adds	r4, #26
 8006a66:	42b5      	cmp	r5, r6
 8006a68:	d11a      	bne.n	8006aa0 <_printf_common+0xc8>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e008      	b.n	8006a80 <_printf_common+0xa8>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4652      	mov	r2, sl
 8006a72:	4641      	mov	r1, r8
 8006a74:	4638      	mov	r0, r7
 8006a76:	47c8      	blx	r9
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d103      	bne.n	8006a84 <_printf_common+0xac>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a84:	3501      	adds	r5, #1
 8006a86:	e7c6      	b.n	8006a16 <_printf_common+0x3e>
 8006a88:	18e1      	adds	r1, r4, r3
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	2030      	movs	r0, #48	@ 0x30
 8006a8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a92:	4422      	add	r2, r4
 8006a94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	e7c7      	b.n	8006a30 <_printf_common+0x58>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4622      	mov	r2, r4
 8006aa4:	4641      	mov	r1, r8
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	47c8      	blx	r9
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d0e6      	beq.n	8006a7c <_printf_common+0xa4>
 8006aae:	3601      	adds	r6, #1
 8006ab0:	e7d9      	b.n	8006a66 <_printf_common+0x8e>
	...

08006ab4 <_printf_i>:
 8006ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	7e0f      	ldrb	r7, [r1, #24]
 8006aba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006abc:	2f78      	cmp	r7, #120	@ 0x78
 8006abe:	4691      	mov	r9, r2
 8006ac0:	4680      	mov	r8, r0
 8006ac2:	460c      	mov	r4, r1
 8006ac4:	469a      	mov	sl, r3
 8006ac6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aca:	d807      	bhi.n	8006adc <_printf_i+0x28>
 8006acc:	2f62      	cmp	r7, #98	@ 0x62
 8006ace:	d80a      	bhi.n	8006ae6 <_printf_i+0x32>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	f000 80d1 	beq.w	8006c78 <_printf_i+0x1c4>
 8006ad6:	2f58      	cmp	r7, #88	@ 0x58
 8006ad8:	f000 80b8 	beq.w	8006c4c <_printf_i+0x198>
 8006adc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ae0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ae4:	e03a      	b.n	8006b5c <_printf_i+0xa8>
 8006ae6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aea:	2b15      	cmp	r3, #21
 8006aec:	d8f6      	bhi.n	8006adc <_printf_i+0x28>
 8006aee:	a101      	add	r1, pc, #4	@ (adr r1, 8006af4 <_printf_i+0x40>)
 8006af0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006af4:	08006b4d 	.word	0x08006b4d
 8006af8:	08006b61 	.word	0x08006b61
 8006afc:	08006add 	.word	0x08006add
 8006b00:	08006add 	.word	0x08006add
 8006b04:	08006add 	.word	0x08006add
 8006b08:	08006add 	.word	0x08006add
 8006b0c:	08006b61 	.word	0x08006b61
 8006b10:	08006add 	.word	0x08006add
 8006b14:	08006add 	.word	0x08006add
 8006b18:	08006add 	.word	0x08006add
 8006b1c:	08006add 	.word	0x08006add
 8006b20:	08006c5f 	.word	0x08006c5f
 8006b24:	08006b8b 	.word	0x08006b8b
 8006b28:	08006c19 	.word	0x08006c19
 8006b2c:	08006add 	.word	0x08006add
 8006b30:	08006add 	.word	0x08006add
 8006b34:	08006c81 	.word	0x08006c81
 8006b38:	08006add 	.word	0x08006add
 8006b3c:	08006b8b 	.word	0x08006b8b
 8006b40:	08006add 	.word	0x08006add
 8006b44:	08006add 	.word	0x08006add
 8006b48:	08006c21 	.word	0x08006c21
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6032      	str	r2, [r6, #0]
 8006b54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e09c      	b.n	8006c9a <_printf_i+0x1e6>
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	6820      	ldr	r0, [r4, #0]
 8006b64:	1d19      	adds	r1, r3, #4
 8006b66:	6031      	str	r1, [r6, #0]
 8006b68:	0606      	lsls	r6, r0, #24
 8006b6a:	d501      	bpl.n	8006b70 <_printf_i+0xbc>
 8006b6c:	681d      	ldr	r5, [r3, #0]
 8006b6e:	e003      	b.n	8006b78 <_printf_i+0xc4>
 8006b70:	0645      	lsls	r5, r0, #25
 8006b72:	d5fb      	bpl.n	8006b6c <_printf_i+0xb8>
 8006b74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b78:	2d00      	cmp	r5, #0
 8006b7a:	da03      	bge.n	8006b84 <_printf_i+0xd0>
 8006b7c:	232d      	movs	r3, #45	@ 0x2d
 8006b7e:	426d      	negs	r5, r5
 8006b80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b84:	4858      	ldr	r0, [pc, #352]	@ (8006ce8 <_printf_i+0x234>)
 8006b86:	230a      	movs	r3, #10
 8006b88:	e011      	b.n	8006bae <_printf_i+0xfa>
 8006b8a:	6821      	ldr	r1, [r4, #0]
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	0608      	lsls	r0, r1, #24
 8006b90:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b94:	d402      	bmi.n	8006b9c <_printf_i+0xe8>
 8006b96:	0649      	lsls	r1, r1, #25
 8006b98:	bf48      	it	mi
 8006b9a:	b2ad      	uxthmi	r5, r5
 8006b9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b9e:	4852      	ldr	r0, [pc, #328]	@ (8006ce8 <_printf_i+0x234>)
 8006ba0:	6033      	str	r3, [r6, #0]
 8006ba2:	bf14      	ite	ne
 8006ba4:	230a      	movne	r3, #10
 8006ba6:	2308      	moveq	r3, #8
 8006ba8:	2100      	movs	r1, #0
 8006baa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bae:	6866      	ldr	r6, [r4, #4]
 8006bb0:	60a6      	str	r6, [r4, #8]
 8006bb2:	2e00      	cmp	r6, #0
 8006bb4:	db05      	blt.n	8006bc2 <_printf_i+0x10e>
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	432e      	orrs	r6, r5
 8006bba:	f021 0104 	bic.w	r1, r1, #4
 8006bbe:	6021      	str	r1, [r4, #0]
 8006bc0:	d04b      	beq.n	8006c5a <_printf_i+0x1a6>
 8006bc2:	4616      	mov	r6, r2
 8006bc4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bc8:	fb03 5711 	mls	r7, r3, r1, r5
 8006bcc:	5dc7      	ldrb	r7, [r0, r7]
 8006bce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bd2:	462f      	mov	r7, r5
 8006bd4:	42bb      	cmp	r3, r7
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	d9f4      	bls.n	8006bc4 <_printf_i+0x110>
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d10b      	bne.n	8006bf6 <_printf_i+0x142>
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	07df      	lsls	r7, r3, #31
 8006be2:	d508      	bpl.n	8006bf6 <_printf_i+0x142>
 8006be4:	6923      	ldr	r3, [r4, #16]
 8006be6:	6861      	ldr	r1, [r4, #4]
 8006be8:	4299      	cmp	r1, r3
 8006bea:	bfde      	ittt	le
 8006bec:	2330      	movle	r3, #48	@ 0x30
 8006bee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bf2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bf6:	1b92      	subs	r2, r2, r6
 8006bf8:	6122      	str	r2, [r4, #16]
 8006bfa:	f8cd a000 	str.w	sl, [sp]
 8006bfe:	464b      	mov	r3, r9
 8006c00:	aa03      	add	r2, sp, #12
 8006c02:	4621      	mov	r1, r4
 8006c04:	4640      	mov	r0, r8
 8006c06:	f7ff fee7 	bl	80069d8 <_printf_common>
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d14a      	bne.n	8006ca4 <_printf_i+0x1f0>
 8006c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c12:	b004      	add	sp, #16
 8006c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	f043 0320 	orr.w	r3, r3, #32
 8006c1e:	6023      	str	r3, [r4, #0]
 8006c20:	4832      	ldr	r0, [pc, #200]	@ (8006cec <_printf_i+0x238>)
 8006c22:	2778      	movs	r7, #120	@ 0x78
 8006c24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	6831      	ldr	r1, [r6, #0]
 8006c2c:	061f      	lsls	r7, r3, #24
 8006c2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c32:	d402      	bmi.n	8006c3a <_printf_i+0x186>
 8006c34:	065f      	lsls	r7, r3, #25
 8006c36:	bf48      	it	mi
 8006c38:	b2ad      	uxthmi	r5, r5
 8006c3a:	6031      	str	r1, [r6, #0]
 8006c3c:	07d9      	lsls	r1, r3, #31
 8006c3e:	bf44      	itt	mi
 8006c40:	f043 0320 	orrmi.w	r3, r3, #32
 8006c44:	6023      	strmi	r3, [r4, #0]
 8006c46:	b11d      	cbz	r5, 8006c50 <_printf_i+0x19c>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	e7ad      	b.n	8006ba8 <_printf_i+0xf4>
 8006c4c:	4826      	ldr	r0, [pc, #152]	@ (8006ce8 <_printf_i+0x234>)
 8006c4e:	e7e9      	b.n	8006c24 <_printf_i+0x170>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	f023 0320 	bic.w	r3, r3, #32
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	e7f6      	b.n	8006c48 <_printf_i+0x194>
 8006c5a:	4616      	mov	r6, r2
 8006c5c:	e7bd      	b.n	8006bda <_printf_i+0x126>
 8006c5e:	6833      	ldr	r3, [r6, #0]
 8006c60:	6825      	ldr	r5, [r4, #0]
 8006c62:	6961      	ldr	r1, [r4, #20]
 8006c64:	1d18      	adds	r0, r3, #4
 8006c66:	6030      	str	r0, [r6, #0]
 8006c68:	062e      	lsls	r6, r5, #24
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	d501      	bpl.n	8006c72 <_printf_i+0x1be>
 8006c6e:	6019      	str	r1, [r3, #0]
 8006c70:	e002      	b.n	8006c78 <_printf_i+0x1c4>
 8006c72:	0668      	lsls	r0, r5, #25
 8006c74:	d5fb      	bpl.n	8006c6e <_printf_i+0x1ba>
 8006c76:	8019      	strh	r1, [r3, #0]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	e7bc      	b.n	8006bfa <_printf_i+0x146>
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	1d1a      	adds	r2, r3, #4
 8006c84:	6032      	str	r2, [r6, #0]
 8006c86:	681e      	ldr	r6, [r3, #0]
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7f9 fac7 	bl	8000220 <memchr>
 8006c92:	b108      	cbz	r0, 8006c98 <_printf_i+0x1e4>
 8006c94:	1b80      	subs	r0, r0, r6
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca2:	e7aa      	b.n	8006bfa <_printf_i+0x146>
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	4632      	mov	r2, r6
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4640      	mov	r0, r8
 8006cac:	47d0      	blx	sl
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0ad      	beq.n	8006c0e <_printf_i+0x15a>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	079b      	lsls	r3, r3, #30
 8006cb6:	d413      	bmi.n	8006ce0 <_printf_i+0x22c>
 8006cb8:	68e0      	ldr	r0, [r4, #12]
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	4298      	cmp	r0, r3
 8006cbe:	bfb8      	it	lt
 8006cc0:	4618      	movlt	r0, r3
 8006cc2:	e7a6      	b.n	8006c12 <_printf_i+0x15e>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4640      	mov	r0, r8
 8006ccc:	47d0      	blx	sl
 8006cce:	3001      	adds	r0, #1
 8006cd0:	d09d      	beq.n	8006c0e <_printf_i+0x15a>
 8006cd2:	3501      	adds	r5, #1
 8006cd4:	68e3      	ldr	r3, [r4, #12]
 8006cd6:	9903      	ldr	r1, [sp, #12]
 8006cd8:	1a5b      	subs	r3, r3, r1
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	dcf2      	bgt.n	8006cc4 <_printf_i+0x210>
 8006cde:	e7eb      	b.n	8006cb8 <_printf_i+0x204>
 8006ce0:	2500      	movs	r5, #0
 8006ce2:	f104 0619 	add.w	r6, r4, #25
 8006ce6:	e7f5      	b.n	8006cd4 <_printf_i+0x220>
 8006ce8:	08006f05 	.word	0x08006f05
 8006cec:	08006f16 	.word	0x08006f16

08006cf0 <memmove>:
 8006cf0:	4288      	cmp	r0, r1
 8006cf2:	b510      	push	{r4, lr}
 8006cf4:	eb01 0402 	add.w	r4, r1, r2
 8006cf8:	d902      	bls.n	8006d00 <memmove+0x10>
 8006cfa:	4284      	cmp	r4, r0
 8006cfc:	4623      	mov	r3, r4
 8006cfe:	d807      	bhi.n	8006d10 <memmove+0x20>
 8006d00:	1e43      	subs	r3, r0, #1
 8006d02:	42a1      	cmp	r1, r4
 8006d04:	d008      	beq.n	8006d18 <memmove+0x28>
 8006d06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d0e:	e7f8      	b.n	8006d02 <memmove+0x12>
 8006d10:	4402      	add	r2, r0
 8006d12:	4601      	mov	r1, r0
 8006d14:	428a      	cmp	r2, r1
 8006d16:	d100      	bne.n	8006d1a <memmove+0x2a>
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d22:	e7f7      	b.n	8006d14 <memmove+0x24>

08006d24 <_sbrk_r>:
 8006d24:	b538      	push	{r3, r4, r5, lr}
 8006d26:	4d06      	ldr	r5, [pc, #24]	@ (8006d40 <_sbrk_r+0x1c>)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fa fd82 	bl	8001838 <_sbrk>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_sbrk_r+0x1a>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_sbrk_r+0x1a>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	200027d4 	.word	0x200027d4

08006d44 <memcpy>:
 8006d44:	440a      	add	r2, r1
 8006d46:	4291      	cmp	r1, r2
 8006d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d4c:	d100      	bne.n	8006d50 <memcpy+0xc>
 8006d4e:	4770      	bx	lr
 8006d50:	b510      	push	{r4, lr}
 8006d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d5a:	4291      	cmp	r1, r2
 8006d5c:	d1f9      	bne.n	8006d52 <memcpy+0xe>
 8006d5e:	bd10      	pop	{r4, pc}

08006d60 <_realloc_r>:
 8006d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d64:	4607      	mov	r7, r0
 8006d66:	4614      	mov	r4, r2
 8006d68:	460d      	mov	r5, r1
 8006d6a:	b921      	cbnz	r1, 8006d76 <_realloc_r+0x16>
 8006d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d70:	4611      	mov	r1, r2
 8006d72:	f7ff bc4d 	b.w	8006610 <_malloc_r>
 8006d76:	b92a      	cbnz	r2, 8006d84 <_realloc_r+0x24>
 8006d78:	f7ff fbde 	bl	8006538 <_free_r>
 8006d7c:	4625      	mov	r5, r4
 8006d7e:	4628      	mov	r0, r5
 8006d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d84:	f000 f81a 	bl	8006dbc <_malloc_usable_size_r>
 8006d88:	4284      	cmp	r4, r0
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	d802      	bhi.n	8006d94 <_realloc_r+0x34>
 8006d8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d92:	d8f4      	bhi.n	8006d7e <_realloc_r+0x1e>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7ff fc3a 	bl	8006610 <_malloc_r>
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	b908      	cbnz	r0, 8006da4 <_realloc_r+0x44>
 8006da0:	4645      	mov	r5, r8
 8006da2:	e7ec      	b.n	8006d7e <_realloc_r+0x1e>
 8006da4:	42b4      	cmp	r4, r6
 8006da6:	4622      	mov	r2, r4
 8006da8:	4629      	mov	r1, r5
 8006daa:	bf28      	it	cs
 8006dac:	4632      	movcs	r2, r6
 8006dae:	f7ff ffc9 	bl	8006d44 <memcpy>
 8006db2:	4629      	mov	r1, r5
 8006db4:	4638      	mov	r0, r7
 8006db6:	f7ff fbbf 	bl	8006538 <_free_r>
 8006dba:	e7f1      	b.n	8006da0 <_realloc_r+0x40>

08006dbc <_malloc_usable_size_r>:
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f18      	subs	r0, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfbc      	itt	lt
 8006dc6:	580b      	ldrlt	r3, [r1, r0]
 8006dc8:	18c0      	addlt	r0, r0, r3
 8006dca:	4770      	bx	lr

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
