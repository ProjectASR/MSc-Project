
EncorderProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008178  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008478  08008478  0000a0b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008478  08008478  00009478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008480  08008480  0000a0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008480  08008480  00009480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08008488  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c18  200000b0  08008538  0000a0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cc8  08008538  0000acc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ba4  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002761  00000000  00000000  0001ac84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001d3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca2  00000000  00000000  0001e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000043b9  00000000  00000000  0001f0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015600  00000000  00000000  000234a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3159  00000000  00000000  00038aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012bbfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b00  00000000  00000000  0012bc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00130740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008330 	.word	0x08008330

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	08008330 	.word	0x08008330

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4802      	ldr	r0, [pc, #8]	@ (8000e7c <SELECT+0x14>)
 8000e72:	f002 f9e3 	bl	800323c <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40020400 	.word	0x40020400

08000e80 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2101      	movs	r1, #1
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <DESELECT+0x14>)
 8000e8a:	f002 f9d7 	bl	800323c <HAL_GPIO_WritePin>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020400 	.word	0x40020400

08000e98 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000ea2:	bf00      	nop
 8000ea4:	4808      	ldr	r0, [pc, #32]	@ (8000ec8 <SPI_TxByte+0x30>)
 8000ea6:	f003 fa7b 	bl	80043a0 <HAL_SPI_GetState>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d1f9      	bne.n	8000ea4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 8000eb0:	1df9      	adds	r1, r7, #7
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4803      	ldr	r0, [pc, #12]	@ (8000ec8 <SPI_TxByte+0x30>)
 8000eba:	f002 feda 	bl	8003c72 <HAL_SPI_Transmit>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000e4 	.word	0x200000e4

08000ecc <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000ed2:	23ff      	movs	r3, #255	@ 0xff
 8000ed4:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 8000eda:	bf00      	nop
 8000edc:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <SPI_RxByte+0x38>)
 8000ede:	f003 fa5f 	bl	80043a0 <HAL_SPI_GetState>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d1f9      	bne.n	8000edc <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 8000ee8:	1dba      	adds	r2, r7, #6
 8000eea:	1df9      	adds	r1, r7, #7
 8000eec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	4803      	ldr	r0, [pc, #12]	@ (8000f04 <SPI_RxByte+0x38>)
 8000ef6:	f003 f831 	bl	8003f5c <HAL_SPI_TransmitReceive>
  
  return data;
 8000efa:	79bb      	ldrb	r3, [r7, #6]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000e4 	.word	0x200000e4

08000f08 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000f10:	f7ff ffdc 	bl	8000ecc <SPI_RxByte>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  timer2 = 50;
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <SD_ReadyWait+0x34>)
 8000f2c:	2232      	movs	r2, #50	@ 0x32
 8000f2e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000f30:	f7ff ffcc 	bl	8000ecc <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000f34:	f7ff ffca 	bl	8000ecc <SPI_RxByte>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && timer2);
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2bff      	cmp	r3, #255	@ 0xff
 8000f40:	d004      	beq.n	8000f4c <SD_ReadyWait+0x28>
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SD_ReadyWait+0x34>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f3      	bne.n	8000f34 <SD_ReadyWait+0x10>
  
  return res;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20002b39 	.word	0x20002b39

08000f5c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f62:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000f66:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000f68:	f7ff ff8a 	bl	8000e80 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	e005      	b.n	8000f7e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000f72:	20ff      	movs	r0, #255	@ 0xff
 8000f74:	f7ff ff90 	bl	8000e98 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b09      	cmp	r3, #9
 8000f82:	ddf6      	ble.n	8000f72 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000f84:	f7ff ff70 	bl	8000e68 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000f88:	2340      	movs	r3, #64	@ 0x40
 8000f8a:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000f9c:	2395      	movs	r3, #149	@ 0x95
 8000f9e:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	e009      	b.n	8000fba <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff72 	bl	8000e98 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	ddf2      	ble.n	8000fa6 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000fc0:	e002      	b.n	8000fc8 <SD_PowerOn+0x6c>
  {
    Count--;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000fc8:	f7ff ff80 	bl	8000ecc <SPI_RxByte>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d002      	beq.n	8000fd8 <SD_PowerOn+0x7c>
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f4      	bne.n	8000fc2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000fd8:	f7ff ff52 	bl	8000e80 <DESELECT>
  SPI_TxByte(0XFF);
 8000fdc:	20ff      	movs	r0, #255	@ 0xff
 8000fde:	f7ff ff5b 	bl	8000e98 <SPI_TxByte>
  
  PowerFlag = 1;
 8000fe2:	4b03      	ldr	r3, [pc, #12]	@ (8000ff0 <SD_PowerOn+0x94>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	200000cd 	.word	0x200000cd

08000ff4 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <SD_PowerOff+0x14>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	200000cd 	.word	0x200000cd

0800100c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <SD_CheckPower+0x14>)
 8001012:	781b      	ldrb	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200000cd 	.word	0x200000cd

08001024 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  timer1 = 10;
 800102e:	4b17      	ldr	r3, [pc, #92]	@ (800108c <SD_RxDataBlock+0x68>)
 8001030:	220a      	movs	r2, #10
 8001032:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001034:	f7ff ff4a 	bl	8000ecc <SPI_RxByte>
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && timer1);
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2bff      	cmp	r3, #255	@ 0xff
 8001040:	d104      	bne.n	800104c <SD_RxDataBlock+0x28>
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <SD_RxDataBlock+0x68>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f3      	bne.n	8001034 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001050:	d001      	beq.n	8001056 <SD_RxDataBlock+0x32>
    return FALSE;
 8001052:	2300      	movs	r3, #0
 8001054:	e016      	b.n	8001084 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff53 	bl	8000f08 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff4d 	bl	8000f08 <SPI_RxBytePtr>
  } while(btr -= 2);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3b02      	subs	r3, #2
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1ed      	bne.n	8001056 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800107a:	f7ff ff27 	bl	8000ecc <SPI_RxByte>
  SPI_RxByte();
 800107e:	f7ff ff25 	bl	8000ecc <SPI_RxByte>
  
  return TRUE;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20002b38 	.word	0x20002b38

08001090 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010a0:	f7ff ff40 	bl	8000f24 <SD_ReadyWait>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2bff      	cmp	r3, #255	@ 0xff
 80010a8:	d001      	beq.n	80010ae <SD_TxDataBlock+0x1e>
    return FALSE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e040      	b.n	8001130 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fef1 	bl	8000e98 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80010b6:	78fb      	ldrb	r3, [r7, #3]
 80010b8:	2bfd      	cmp	r3, #253	@ 0xfd
 80010ba:	d031      	beq.n	8001120 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fee5 	bl	8000e98 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fede 	bl	8000e98 <SPI_TxByte>
    } while (--wc);
 80010dc:	7bbb      	ldrb	r3, [r7, #14]
 80010de:	3b01      	subs	r3, #1
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	7bbb      	ldrb	r3, [r7, #14]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1eb      	bne.n	80010c0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80010e8:	f7ff fef0 	bl	8000ecc <SPI_RxByte>
    SPI_RxByte();
 80010ec:	f7ff feee 	bl	8000ecc <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80010f0:	e00b      	b.n	800110a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80010f2:	f7ff feeb 	bl	8000ecc <SPI_RxByte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	2b05      	cmp	r3, #5
 8001102:	d006      	beq.n	8001112 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001104:	7b7b      	ldrb	r3, [r7, #13]
 8001106:	3301      	adds	r3, #1
 8001108:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800110a:	7b7b      	ldrb	r3, [r7, #13]
 800110c:	2b40      	cmp	r3, #64	@ 0x40
 800110e:	d9f0      	bls.n	80010f2 <SD_TxDataBlock+0x62>
 8001110:	e000      	b.n	8001114 <SD_TxDataBlock+0x84>
        break;
 8001112:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001114:	bf00      	nop
 8001116:	f7ff fed9 	bl	8000ecc <SPI_RxByte>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0fa      	beq.n	8001116 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f003 031f 	and.w	r3, r3, #31
 8001126:	2b05      	cmp	r3, #5
 8001128:	d101      	bne.n	800112e <SD_TxDataBlock+0x9e>
    return TRUE;
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001144:	f7ff feee 	bl	8000f24 <SD_ReadyWait>
 8001148:	4603      	mov	r3, r0
 800114a:	2bff      	cmp	r3, #255	@ 0xff
 800114c:	d001      	beq.n	8001152 <SD_SendCmd+0x1a>
    return 0xFF;
 800114e:	23ff      	movs	r3, #255	@ 0xff
 8001150:	e040      	b.n	80011d4 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fe9f 	bl	8000e98 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	0e1b      	lsrs	r3, r3, #24
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fe99 	bl	8000e98 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	0c1b      	lsrs	r3, r3, #16
 800116a:	b2db      	uxtb	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fe93 	bl	8000e98 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe8d 	bl	8000e98 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fe88 	bl	8000e98 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b40      	cmp	r3, #64	@ 0x40
 8001190:	d101      	bne.n	8001196 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001192:	2395      	movs	r3, #149	@ 0x95
 8001194:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b48      	cmp	r3, #72	@ 0x48
 800119a:	d101      	bne.n	80011a0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 800119c:	2387      	movs	r3, #135	@ 0x87
 800119e:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fe78 	bl	8000e98 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b4c      	cmp	r3, #76	@ 0x4c
 80011ac:	d101      	bne.n	80011b2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80011ae:	f7ff fe8d 	bl	8000ecc <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80011b2:	230a      	movs	r3, #10
 80011b4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80011b6:	f7ff fe89 	bl	8000ecc <SPI_RxByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80011be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da05      	bge.n	80011d2 <SD_SendCmd+0x9a>
 80011c6:	7bbb      	ldrb	r3, [r7, #14]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	73bb      	strb	r3, [r7, #14]
 80011cc:	7bbb      	ldrb	r3, [r7, #14]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f1      	bne.n	80011b6 <SD_SendCmd+0x7e>
  
  return res;
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80011dc:	b590      	push	{r4, r7, lr}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0d5      	b.n	800139c <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80011f0:	4b6c      	ldr	r3, [pc, #432]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <SD_disk_initialize+0x2a>
    return Stat;        
 80011fe:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	b2db      	uxtb	r3, r3
 8001204:	e0ca      	b.n	800139c <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001206:	f7ff fea9 	bl	8000f5c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800120a:	f7ff fe2d 	bl	8000e68 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001212:	2100      	movs	r1, #0
 8001214:	2040      	movs	r0, #64	@ 0x40
 8001216:	f7ff ff8f 	bl	8001138 <SD_SendCmd>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	f040 80a5 	bne.w	800136c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    timer1 = 100;
 8001222:	4b61      	ldr	r3, [pc, #388]	@ (80013a8 <SD_disk_initialize+0x1cc>)
 8001224:	2264      	movs	r2, #100	@ 0x64
 8001226:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001228:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800122c:	2048      	movs	r0, #72	@ 0x48
 800122e:	f7ff ff83 	bl	8001138 <SD_SendCmd>
 8001232:	4603      	mov	r3, r0
 8001234:	2b01      	cmp	r3, #1
 8001236:	d158      	bne.n	80012ea <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e00c      	b.n	8001258 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800123e:	7bfc      	ldrb	r4, [r7, #15]
 8001240:	f7ff fe44 	bl	8000ecc <SPI_RxByte>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	f104 0310 	add.w	r3, r4, #16
 800124c:	443b      	add	r3, r7
 800124e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	3301      	adds	r3, #1
 8001256:	73fb      	strb	r3, [r7, #15]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b03      	cmp	r3, #3
 800125c:	d9ef      	bls.n	800123e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800125e:	7abb      	ldrb	r3, [r7, #10]
 8001260:	2b01      	cmp	r3, #1
 8001262:	f040 8083 	bne.w	800136c <SD_disk_initialize+0x190>
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2baa      	cmp	r3, #170	@ 0xaa
 800126a:	d17f      	bne.n	800136c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800126c:	2100      	movs	r1, #0
 800126e:	2077      	movs	r0, #119	@ 0x77
 8001270:	f7ff ff62 	bl	8001138 <SD_SendCmd>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	d807      	bhi.n	800128a <SD_disk_initialize+0xae>
 800127a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800127e:	2069      	movs	r0, #105	@ 0x69
 8001280:	f7ff ff5a 	bl	8001138 <SD_SendCmd>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (timer1);
 800128a:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <SD_disk_initialize+0x1cc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1eb      	bne.n	800126c <SD_disk_initialize+0x90>
 8001294:	e000      	b.n	8001298 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001296:	bf00      	nop
        
        if (timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001298:	4b43      	ldr	r3, [pc, #268]	@ (80013a8 <SD_disk_initialize+0x1cc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d064      	beq.n	800136c <SD_disk_initialize+0x190>
 80012a2:	2100      	movs	r1, #0
 80012a4:	207a      	movs	r0, #122	@ 0x7a
 80012a6:	f7ff ff47 	bl	8001138 <SD_SendCmd>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d15d      	bne.n	800136c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e00c      	b.n	80012d0 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80012b6:	7bfc      	ldrb	r4, [r7, #15]
 80012b8:	f7ff fe08 	bl	8000ecc <SPI_RxByte>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	f104 0310 	add.w	r3, r4, #16
 80012c4:	443b      	add	r3, r7
 80012c6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d9ef      	bls.n	80012b6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80012d6:	7a3b      	ldrb	r3, [r7, #8]
 80012d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SD_disk_initialize+0x108>
 80012e0:	2306      	movs	r3, #6
 80012e2:	e000      	b.n	80012e6 <SD_disk_initialize+0x10a>
 80012e4:	2302      	movs	r3, #2
 80012e6:	73bb      	strb	r3, [r7, #14]
 80012e8:	e040      	b.n	800136c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80012ea:	2100      	movs	r1, #0
 80012ec:	2077      	movs	r0, #119	@ 0x77
 80012ee:	f7ff ff23 	bl	8001138 <SD_SendCmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d808      	bhi.n	800130a <SD_disk_initialize+0x12e>
 80012f8:	2100      	movs	r1, #0
 80012fa:	2069      	movs	r0, #105	@ 0x69
 80012fc:	f7ff ff1c 	bl	8001138 <SD_SendCmd>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d801      	bhi.n	800130a <SD_disk_initialize+0x12e>
 8001306:	2302      	movs	r3, #2
 8001308:	e000      	b.n	800130c <SD_disk_initialize+0x130>
 800130a:	2301      	movs	r3, #1
 800130c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d10e      	bne.n	8001332 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001314:	2100      	movs	r1, #0
 8001316:	2077      	movs	r0, #119	@ 0x77
 8001318:	f7ff ff0e 	bl	8001138 <SD_SendCmd>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d80e      	bhi.n	8001340 <SD_disk_initialize+0x164>
 8001322:	2100      	movs	r1, #0
 8001324:	2069      	movs	r0, #105	@ 0x69
 8001326:	f7ff ff07 	bl	8001138 <SD_SendCmd>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d107      	bne.n	8001340 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001330:	e00d      	b.n	800134e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001332:	2100      	movs	r1, #0
 8001334:	2041      	movs	r0, #65	@ 0x41
 8001336:	f7ff feff 	bl	8001138 <SD_SendCmd>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d005      	beq.n	800134c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (timer1);
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <SD_disk_initialize+0x1cc>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1e1      	bne.n	800130e <SD_disk_initialize+0x132>
 800134a:	e000      	b.n	800134e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800134c:	bf00      	nop
      
      if (!timer1 || SD_SendCmd(CMD16, 512) != 0)
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <SD_disk_initialize+0x1cc>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d007      	beq.n	8001368 <SD_disk_initialize+0x18c>
 8001358:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800135c:	2050      	movs	r0, #80	@ 0x50
 800135e:	f7ff feeb 	bl	8001138 <SD_SendCmd>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800136c:	4a0f      	ldr	r2, [pc, #60]	@ (80013ac <SD_disk_initialize+0x1d0>)
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001372:	f7ff fd85 	bl	8000e80 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001376:	f7ff fda9 	bl	8000ecc <SPI_RxByte>
  
  if (type) 
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	e001      	b.n	8001396 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001392:	f7ff fe2f 	bl	8000ff4 <SD_PowerOff>
  }
  
  return Stat;
 8001396:	4b03      	ldr	r3, [pc, #12]	@ (80013a4 <SD_disk_initialize+0x1c8>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b2db      	uxtb	r3, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20002b38 	.word	0x20002b38
 80013ac:	200000cc 	.word	0x200000cc

080013b0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80013c0:	2301      	movs	r3, #1
 80013c2:	e002      	b.n	80013ca <SD_disk_status+0x1a>
  
  return Stat;
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <SD_disk_status+0x28>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b2db      	uxtb	r3, r3
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000000 	.word	0x20000000

080013dc <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	607a      	str	r2, [r7, #4]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <SD_disk_read+0x1c>
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <SD_disk_read+0x20>
    return RES_PARERR;
 80013f8:	2304      	movs	r3, #4
 80013fa:	e051      	b.n	80014a0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80013fc:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <SD_disk_read+0xcc>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800140a:	2303      	movs	r3, #3
 800140c:	e048      	b.n	80014a0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800140e:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <SD_disk_read+0xd0>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d102      	bne.n	8001420 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	025b      	lsls	r3, r3, #9
 800141e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001420:	f7ff fd22 	bl	8000e68 <SELECT>
  
  if (count == 1) 
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d111      	bne.n	800144e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	2051      	movs	r0, #81	@ 0x51
 800142e:	f7ff fe83 	bl	8001138 <SD_SendCmd>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d129      	bne.n	800148c <SD_disk_read+0xb0>
 8001438:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	f7ff fdf1 	bl	8001024 <SD_RxDataBlock>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d021      	beq.n	800148c <SD_disk_read+0xb0>
      count = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	e01e      	b.n	800148c <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2052      	movs	r0, #82	@ 0x52
 8001452:	f7ff fe71 	bl	8001138 <SD_SendCmd>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d117      	bne.n	800148c <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800145c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f7ff fddf 	bl	8001024 <SD_RxDataBlock>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00a      	beq.n	8001482 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001472:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1ed      	bne.n	800145c <SD_disk_read+0x80>
 8001480:	e000      	b.n	8001484 <SD_disk_read+0xa8>
          break;
 8001482:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001484:	2100      	movs	r1, #0
 8001486:	204c      	movs	r0, #76	@ 0x4c
 8001488:	f7ff fe56 	bl	8001138 <SD_SendCmd>
    }
  }
  
  DESELECT();
 800148c:	f7ff fcf8 	bl	8000e80 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001490:	f7ff fd1c 	bl	8000ecc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	200000cc 	.word	0x200000cc

080014b0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	4603      	mov	r3, r0
 80014be:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d102      	bne.n	80014cc <SD_disk_write+0x1c>
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <SD_disk_write+0x20>
    return RES_PARERR;
 80014cc:	2304      	movs	r3, #4
 80014ce:	e06b      	b.n	80015a8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80014d0:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <SD_disk_write+0x100>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80014de:	2303      	movs	r3, #3
 80014e0:	e062      	b.n	80015a8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80014e2:	4b33      	ldr	r3, [pc, #204]	@ (80015b0 <SD_disk_write+0x100>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SD_disk_write+0x44>
    return RES_WRPRT;
 80014f0:	2302      	movs	r3, #2
 80014f2:	e059      	b.n	80015a8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <SD_disk_write+0x104>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	025b      	lsls	r3, r3, #9
 8001504:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001506:	f7ff fcaf 	bl	8000e68 <SELECT>
  
  if (count == 1) 
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d110      	bne.n	8001532 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	2058      	movs	r0, #88	@ 0x58
 8001514:	f7ff fe10 	bl	8001138 <SD_SendCmd>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13a      	bne.n	8001594 <SD_disk_write+0xe4>
 800151e:	21fe      	movs	r1, #254	@ 0xfe
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff fdb5 	bl	8001090 <SD_TxDataBlock>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d033      	beq.n	8001594 <SD_disk_write+0xe4>
      count = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	e030      	b.n	8001594 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001532:	4b20      	ldr	r3, [pc, #128]	@ (80015b4 <SD_disk_write+0x104>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d007      	beq.n	800154e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800153e:	2100      	movs	r1, #0
 8001540:	2077      	movs	r0, #119	@ 0x77
 8001542:	f7ff fdf9 	bl	8001138 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	2057      	movs	r0, #87	@ 0x57
 800154a:	f7ff fdf5 	bl	8001138 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	2059      	movs	r0, #89	@ 0x59
 8001552:	f7ff fdf1 	bl	8001138 <SD_SendCmd>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d11b      	bne.n	8001594 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800155c:	21fc      	movs	r1, #252	@ 0xfc
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f7ff fd96 	bl	8001090 <SD_TxDataBlock>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00a      	beq.n	8001580 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001570:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ee      	bne.n	800155c <SD_disk_write+0xac>
 800157e:	e000      	b.n	8001582 <SD_disk_write+0xd2>
          break;
 8001580:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001582:	21fd      	movs	r1, #253	@ 0xfd
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fd83 	bl	8001090 <SD_TxDataBlock>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001590:	2301      	movs	r3, #1
 8001592:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001594:	f7ff fc74 	bl	8000e80 <DESELECT>
  SPI_RxByte();
 8001598:	f7ff fc98 	bl	8000ecc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf14      	ite	ne
 80015a2:	2301      	movne	r3, #1
 80015a4:	2300      	moveq	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000000 	.word	0x20000000
 80015b4:	200000cc 	.word	0x200000cc

080015b8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b08b      	sub	sp, #44	@ 0x2c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	603a      	str	r2, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	460b      	mov	r3, r1
 80015c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80015d2:	2304      	movs	r3, #4
 80015d4:	e119      	b.n	800180a <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d129      	bne.n	8001636 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d017      	beq.n	800161a <SD_disk_ioctl+0x62>
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	dc1f      	bgt.n	800162e <SD_disk_ioctl+0x76>
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <SD_disk_ioctl+0x40>
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d00b      	beq.n	800160e <SD_disk_ioctl+0x56>
 80015f6:	e01a      	b.n	800162e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80015f8:	f7ff fd08 	bl	800100c <SD_CheckPower>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001602:	f7ff fcf7 	bl	8000ff4 <SD_PowerOff>
      res = RES_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800160c:	e0fb      	b.n	8001806 <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 800160e:	f7ff fca5 	bl	8000f5c <SD_PowerOn>
      res = RES_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001618:	e0f5      	b.n	8001806 <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	1c5c      	adds	r4, r3, #1
 800161e:	f7ff fcf5 	bl	800100c <SD_CheckPower>
 8001622:	4603      	mov	r3, r0
 8001624:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800162c:	e0eb      	b.n	8001806 <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 800162e:	2304      	movs	r3, #4
 8001630:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001634:	e0e7      	b.n	8001806 <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001636:	4b77      	ldr	r3, [pc, #476]	@ (8001814 <SD_disk_ioctl+0x25c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001644:	2303      	movs	r3, #3
 8001646:	e0e0      	b.n	800180a <SD_disk_ioctl+0x252>
    
    SELECT();
 8001648:	f7ff fc0e 	bl	8000e68 <SELECT>
    
    switch (ctrl) 
 800164c:	79bb      	ldrb	r3, [r7, #6]
 800164e:	2b0d      	cmp	r3, #13
 8001650:	f200 80ca 	bhi.w	80017e8 <SD_disk_ioctl+0x230>
 8001654:	a201      	add	r2, pc, #4	@ (adr r2, 800165c <SD_disk_ioctl+0xa4>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	08001753 	.word	0x08001753
 8001660:	08001695 	.word	0x08001695
 8001664:	08001743 	.word	0x08001743
 8001668:	080017e9 	.word	0x080017e9
 800166c:	080017e9 	.word	0x080017e9
 8001670:	080017e9 	.word	0x080017e9
 8001674:	080017e9 	.word	0x080017e9
 8001678:	080017e9 	.word	0x080017e9
 800167c:	080017e9 	.word	0x080017e9
 8001680:	080017e9 	.word	0x080017e9
 8001684:	080017e9 	.word	0x080017e9
 8001688:	08001765 	.word	0x08001765
 800168c:	08001789 	.word	0x08001789
 8001690:	080017ad 	.word	0x080017ad
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001694:	2100      	movs	r1, #0
 8001696:	2049      	movs	r0, #73	@ 0x49
 8001698:	f7ff fd4e 	bl	8001138 <SD_SendCmd>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f040 80a6 	bne.w	80017f0 <SD_disk_ioctl+0x238>
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	2110      	movs	r1, #16
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fcba 	bl	8001024 <SD_RxDataBlock>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 809c 	beq.w	80017f0 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80016b8:	7b3b      	ldrb	r3, [r7, #12]
 80016ba:	099b      	lsrs	r3, r3, #6
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10d      	bne.n	80016de <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80016c2:	7d7b      	ldrb	r3, [r7, #21]
 80016c4:	461a      	mov	r2, r3
 80016c6:	7d3b      	ldrb	r3, [r7, #20]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4413      	add	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3301      	adds	r3, #1
 80016d2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80016d4:	8bfb      	ldrh	r3, [r7, #30]
 80016d6:	029a      	lsls	r2, r3, #10
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	e02d      	b.n	800173a <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80016de:	7c7b      	ldrb	r3, [r7, #17]
 80016e0:	f003 030f 	and.w	r3, r3, #15
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	7dbb      	ldrb	r3, [r7, #22]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	7d7b      	ldrb	r3, [r7, #21]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f003 0306 	and.w	r3, r3, #6
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	3302      	adds	r3, #2
 8001702:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001706:	7d3b      	ldrb	r3, [r7, #20]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	b2db      	uxtb	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	7cfb      	ldrb	r3, [r7, #19]
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	b29b      	uxth	r3, r3
 8001714:	4413      	add	r3, r2
 8001716:	b29a      	uxth	r2, r3
 8001718:	7cbb      	ldrb	r3, [r7, #18]
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	b29b      	uxth	r3, r3
 800171e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29b      	uxth	r3, r3
 8001728:	3301      	adds	r3, #1
 800172a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800172c:	8bfa      	ldrh	r2, [r7, #30]
 800172e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001732:	3b09      	subs	r3, #9
 8001734:	409a      	lsls	r2, r3
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001740:	e056      	b.n	80017f0 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001748:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001750:	e055      	b.n	80017fe <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001752:	f7ff fbe7 	bl	8000f24 <SD_ReadyWait>
 8001756:	4603      	mov	r3, r0
 8001758:	2bff      	cmp	r3, #255	@ 0xff
 800175a:	d14b      	bne.n	80017f4 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001762:	e047      	b.n	80017f4 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001764:	2100      	movs	r1, #0
 8001766:	2049      	movs	r0, #73	@ 0x49
 8001768:	f7ff fce6 	bl	8001138 <SD_SendCmd>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d142      	bne.n	80017f8 <SD_disk_ioctl+0x240>
 8001772:	2110      	movs	r1, #16
 8001774:	6a38      	ldr	r0, [r7, #32]
 8001776:	f7ff fc55 	bl	8001024 <SD_RxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03b      	beq.n	80017f8 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001786:	e037      	b.n	80017f8 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001788:	2100      	movs	r1, #0
 800178a:	204a      	movs	r0, #74	@ 0x4a
 800178c:	f7ff fcd4 	bl	8001138 <SD_SendCmd>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d132      	bne.n	80017fc <SD_disk_ioctl+0x244>
 8001796:	2110      	movs	r1, #16
 8001798:	6a38      	ldr	r0, [r7, #32]
 800179a:	f7ff fc43 	bl	8001024 <SD_RxDataBlock>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d02b      	beq.n	80017fc <SD_disk_ioctl+0x244>
        res = RES_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80017aa:	e027      	b.n	80017fc <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80017ac:	2100      	movs	r1, #0
 80017ae:	207a      	movs	r0, #122	@ 0x7a
 80017b0:	f7ff fcc2 	bl	8001138 <SD_SendCmd>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017c0:	e00b      	b.n	80017da <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80017c2:	6a3c      	ldr	r4, [r7, #32]
 80017c4:	1c63      	adds	r3, r4, #1
 80017c6:	623b      	str	r3, [r7, #32]
 80017c8:	f7ff fb80 	bl	8000ecc <SPI_RxByte>
 80017cc:	4603      	mov	r3, r0
 80017ce:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80017d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017d4:	3301      	adds	r3, #1
 80017d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80017da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d9ef      	bls.n	80017c2 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 80017e8:	2304      	movs	r3, #4
 80017ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80017ee:	e006      	b.n	80017fe <SD_disk_ioctl+0x246>
      break;
 80017f0:	bf00      	nop
 80017f2:	e004      	b.n	80017fe <SD_disk_ioctl+0x246>
      break;
 80017f4:	bf00      	nop
 80017f6:	e002      	b.n	80017fe <SD_disk_ioctl+0x246>
      break;
 80017f8:	bf00      	nop
 80017fa:	e000      	b.n	80017fe <SD_disk_ioctl+0x246>
      break;
 80017fc:	bf00      	nop
    }
    
    DESELECT();
 80017fe:	f7ff fb3f 	bl	8000e80 <DESELECT>
    SPI_RxByte();
 8001802:	f7ff fb63 	bl	8000ecc <SPI_RxByte>
  }
  
  return res;
 8001806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800180a:	4618      	mov	r0, r3
 800180c:	372c      	adds	r7, #44	@ 0x2c
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_TIM_PeriodElapsedCallback>:
float Text1, Text2;
//Acceleration Set points
float Set_Accelaration1=10000;
HAL_StatusTypeDef status;
uint16_t OutputVref=5000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af02      	add	r7, sp, #8
 800181e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM13) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2e      	ldr	r2, [pc, #184]	@ (80018e0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d157      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
    	if (SDCardRecordMode==1){
 800182a:	4b2e      	ldr	r3, [pc, #184]	@ (80018e4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d153      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
        SDCardCount++;
 8001832:	4b2d      	ldr	r3, [pc, #180]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800183a:	6013      	str	r3, [r2, #0]
        if (EncoderUpdated == 1 && communicationError==0) {
 800183c:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d14a      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
 8001844:	4b2a      	ldr	r3, [pc, #168]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d146      	bne.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
            FRESULT fr;
            UINT bytes_written;

            // Open the file for appending
            fr = f_open(&fil, "Data.txt", FA_OPEN_APPEND | FA_WRITE);
 800184c:	2232      	movs	r2, #50	@ 0x32
 800184e:	4929      	ldr	r1, [pc, #164]	@ (80018f4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001850:	4829      	ldr	r0, [pc, #164]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001852:	f005 fc6d 	bl	8007130 <f_open>
 8001856:	4603      	mov	r3, r0
 8001858:	73fb      	strb	r3, [r7, #15]
            if (fr != FR_OK) {
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_TIM_PeriodElapsedCallback+0x50>
                // Optional: Handle error (blink LED, set flag, etc.)
            	communicationError=1;
 8001860:	4b23      	ldr	r3, [pc, #140]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]
                return;
 8001866:	e038      	b.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
            }

            // Format the record number and encoder tick data into a string
            sprintf(buffer, "R%lu: E1: %lu, E2: %lu\n", SDCardCount, encoder_ticks, encoder_ticks2);
 8001868:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b23      	ldr	r3, [pc, #140]	@ (80018fc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800186e:	6819      	ldr	r1, [r3, #0]
 8001870:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	460b      	mov	r3, r1
 8001878:	4922      	ldr	r1, [pc, #136]	@ (8001904 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800187a:	4823      	ldr	r0, [pc, #140]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800187c:	f006 f8b8 	bl	80079f0 <siprintf>
            //"R%lu: E1: %lu, E2: %lu\n"
            // Write to the file
            fr = f_write(&fil, buffer, strlen(buffer), &bytes_written);
 8001880:	4821      	ldr	r0, [pc, #132]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001882:	f7fe fcc5 	bl	8000210 <strlen>
 8001886:	4602      	mov	r2, r0
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	491e      	ldr	r1, [pc, #120]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800188e:	481a      	ldr	r0, [pc, #104]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001890:	f005 fe16 	bl	80074c0 <f_write>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]
            if (fr != FR_OK || bytes_written == 0) {
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d102      	bne.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x8c>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d106      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x9a>
                f_close(&fil);  // Close anyway if open
 80018a4:	4814      	ldr	r0, [pc, #80]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018a6:	f006 f81d 	bl	80078e4 <f_close>
                communicationError=1;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
                return;
 80018b0:	e013      	b.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
            }

            // Close the file
            fr = f_close(&fil);
 80018b2:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80018b4:	f006 f816 	bl	80078e4 <f_close>
 80018b8:	4603      	mov	r3, r0
 80018ba:	73fb      	strb	r3, [r7, #15]
            if (fr != FR_OK) {
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d003      	beq.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xb2>
            	communicationError=1;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
                return;
 80018c8:	e007      	b.n	80018da <HAL_TIM_PeriodElapsedCallback+0xc2>
            }

            EncoderUpdated = 0;
 80018ca:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
            record_number++;
 80018d0:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a0d      	ldr	r2, [pc, #52]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80018d8:	6013      	str	r3, [r2, #0]
    	}
    		else {

    		}
    }
}
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40001c00 	.word	0x40001c00
 80018e4:	2000000c 	.word	0x2000000c
 80018e8:	20000284 	.word	0x20000284
 80018ec:	20002af4 	.word	0x20002af4
 80018f0:	20000288 	.word	0x20000288
 80018f4:	08008348 	.word	0x08008348
 80018f8:	200012c0 	.word	0x200012c0
 80018fc:	20000278 	.word	0x20000278
 8001900:	2000027c 	.word	0x2000027c
 8001904:	08008354 	.word	0x08008354
 8001908:	200022f4 	.word	0x200022f4
 800190c:	20000004 	.word	0x20000004

08001910 <applyLowPassFilterVelocity>:
float applyLowPassFilterVelocity(float X, float Y_old) {
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	ed87 0a01 	vstr	s0, [r7, #4]
 800191a:	edc7 0a00 	vstr	s1, [r7]
    // Apply the first-order low-pass filter formula
    float Y = Y_old + G * (X - Y_old);
 800191e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001922:	edd7 7a00 	vldr	s15, [r7]
 8001926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001954 <applyLowPassFilterVelocity+0x44>
 800192e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001932:	ed97 7a00 	vldr	s14, [r7]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the filtered output
    return Y;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	ee07 3a90 	vmov	s15, r3
}
 8001944:	eeb0 0a67 	vmov.f32	s0, s15
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	3dcccccd 	.word	0x3dcccccd

08001958 <ConfigureMotor01>:
void ConfigureMotor01(int Enable, int Clockwise, uint16_t dac_value) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, Clockwise);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	2110      	movs	r1, #16
 800196e:	480a      	ldr	r0, [pc, #40]	@ (8001998 <ConfigureMotor01+0x40>)
 8001970:	f001 fc64 	bl	800323c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, Enable);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	b2db      	uxtb	r3, r3
 8001978:	461a      	mov	r2, r3
 800197a:	2120      	movs	r1, #32
 800197c:	4806      	ldr	r0, [pc, #24]	@ (8001998 <ConfigureMotor01+0x40>)
 800197e:	f001 fc5d 	bl	800323c <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <ConfigureMotor01+0x44>)
 800198a:	f001 fa28 	bl	8002dde <HAL_DAC_SetValue>

}
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020400 	.word	0x40020400
 800199c:	200000d0 	.word	0x200000d0

080019a0 <ConfigureMotor02>:
void ConfigureMotor02(int Enable, int Clockwise, uint16_t dac_value) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, Clockwise);
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	461a      	mov	r2, r3
 80019b4:	2104      	movs	r1, #4
 80019b6:	480a      	ldr	r0, [pc, #40]	@ (80019e0 <ConfigureMotor02+0x40>)
 80019b8:	f001 fc40 	bl	800323c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3, Enable);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	2108      	movs	r1, #8
 80019c4:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <ConfigureMotor02+0x40>)
 80019c6:	f001 fc39 	bl	800323c <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2200      	movs	r2, #0
 80019ce:	2110      	movs	r1, #16
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <ConfigureMotor02+0x44>)
 80019d2:	f001 fa04 	bl	8002dde <HAL_DAC_SetValue>
}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40020000 	.word	0x40020000
 80019e4:	200000d0 	.word	0x200000d0

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80019ee:	f000 fd61 	bl	80024b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019f2:	f000 ff94 	bl	800291e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f6:	f000 fab5 	bl	8001f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019fa:	f000 fcad 	bl	8002358 <MX_GPIO_Init>
  MX_TIM1_Init();
 80019fe:	f000 fb89 	bl	8002114 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001a02:	f000 fc2f 	bl	8002264 <MX_TIM4_Init>
  MX_TIM13_Init();
 8001a06:	f000 fc83 	bl	8002310 <MX_TIM13_Init>
  MX_SPI4_Init();
 8001a0a:	f000 fb45 	bl	8002098 <MX_SPI4_Init>
  MX_FATFS_Init();
 8001a0e:	f003 fce3 	bl	80053d8 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001a12:	f000 fbd9 	bl	80021c8 <MX_TIM2_Init>
  MX_DAC_Init();
 8001a16:	f000 fb0b 	bl	8002030 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  // Start encoder timers
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001a1a:	213c      	movs	r1, #60	@ 0x3c
 8001a1c:	48be      	ldr	r0, [pc, #760]	@ (8001d18 <main+0x330>)
 8001a1e:	f003 f83b 	bl	8004a98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001a22:	213c      	movs	r1, #60	@ 0x3c
 8001a24:	48bd      	ldr	r0, [pc, #756]	@ (8001d1c <main+0x334>)
 8001a26:	f003 f837 	bl	8004a98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim13);  // Start TIM2 in interrupt mode
 8001a2a:	48bd      	ldr	r0, [pc, #756]	@ (8001d20 <main+0x338>)
 8001a2c:	f002 ff16 	bl	800485c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8001a30:	48bc      	ldr	r0, [pc, #752]	@ (8001d24 <main+0x33c>)
 8001a32:	f002 fea3 	bl	800477c <HAL_TIM_Base_Start>

  // Mount the filesystem
  fresult = f_mount(&fs, "", 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	49bb      	ldr	r1, [pc, #748]	@ (8001d28 <main+0x340>)
 8001a3a:	48bc      	ldr	r0, [pc, #752]	@ (8001d2c <main+0x344>)
 8001a3c:	f005 fb32 	bl	80070a4 <f_mount>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4bba      	ldr	r3, [pc, #744]	@ (8001d30 <main+0x348>)
 8001a46:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) {
 8001a48:	4bb9      	ldr	r3, [pc, #740]	@ (8001d30 <main+0x348>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d113      	bne.n	8001a78 <main+0x90>
      // Optional: Handle mount failure
      // e.g., flash LED or set flag to disable SD logging
      // while (1);  // You can also skip this if you want MCU to continue
  } else {
      // Create a new file if mount was successful
      fresult = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001a50:	220a      	movs	r2, #10
 8001a52:	49b8      	ldr	r1, [pc, #736]	@ (8001d34 <main+0x34c>)
 8001a54:	48b8      	ldr	r0, [pc, #736]	@ (8001d38 <main+0x350>)
 8001a56:	f005 fb6b 	bl	8007130 <f_open>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4bb4      	ldr	r3, [pc, #720]	@ (8001d30 <main+0x348>)
 8001a60:	701a      	strb	r2, [r3, #0]
      if (fresult == FR_OK) {
 8001a62:	4bb3      	ldr	r3, [pc, #716]	@ (8001d30 <main+0x348>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <main+0x90>
          fresult = f_close(&fil);
 8001a6a:	48b3      	ldr	r0, [pc, #716]	@ (8001d38 <main+0x350>)
 8001a6c:	f005 ff3a 	bl	80078e4 <f_close>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	4bae      	ldr	r3, [pc, #696]	@ (8001d30 <main+0x348>)
 8001a76:	701a      	strb	r2, [r3, #0]
      }
  }
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8001a78:	2100      	movs	r1, #0
 8001a7a:	48b0      	ldr	r0, [pc, #704]	@ (8001d3c <main+0x354>)
 8001a7c:	f001 f958 	bl	8002d30 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001a80:	2110      	movs	r1, #16
 8001a82:	48ae      	ldr	r0, [pc, #696]	@ (8001d3c <main+0x354>)
 8001a84:	f001 f954 	bl	8002d30 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t time_start = __HAL_TIM_GET_COUNTER(&htim2);
 8001a88:	4ba6      	ldr	r3, [pc, #664]	@ (8001d24 <main+0x33c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	607b      	str	r3, [r7, #4]
	  MainloopCount++;
 8001a90:	4bab      	ldr	r3, [pc, #684]	@ (8001d40 <main+0x358>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	4aaa      	ldr	r2, [pc, #680]	@ (8001d40 <main+0x358>)
 8001a98:	6013      	str	r3, [r2, #0]
	  OutputVref++;
 8001a9a:	4baa      	ldr	r3, [pc, #680]	@ (8001d44 <main+0x35c>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	4ba8      	ldr	r3, [pc, #672]	@ (8001d44 <main+0x35c>)
 8001aa4:	801a      	strh	r2, [r3, #0]
	  if(OutputVref>4000){
 8001aa6:	4ba7      	ldr	r3, [pc, #668]	@ (8001d44 <main+0x35c>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001aae:	d902      	bls.n	8001ab6 <main+0xce>
		  OutputVref=0;
 8001ab0:	4ba4      	ldr	r3, [pc, #656]	@ (8001d44 <main+0x35c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	801a      	strh	r2, [r3, #0]
	  }
	  EncoderUpdated = 0;
 8001ab6:	4ba4      	ldr	r3, [pc, #656]	@ (8001d48 <main+0x360>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
	  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 8001abc:	4b97      	ldr	r3, [pc, #604]	@ (8001d1c <main+0x334>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	4aa2      	ldr	r2, [pc, #648]	@ (8001d4c <main+0x364>)
 8001ac4:	6013      	str	r3, [r2, #0]
	  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001ac6:	4b94      	ldr	r3, [pc, #592]	@ (8001d18 <main+0x330>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	4aa0      	ldr	r2, [pc, #640]	@ (8001d50 <main+0x368>)
 8001ace:	6013      	str	r3, [r2, #0]
	  EncoderUpdated = 1;
 8001ad0:	4b9d      	ldr	r3, [pc, #628]	@ (8001d48 <main+0x360>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
	  secondFromStart=__HAL_TIM_GET_COUNTER(&htim2)/100000;
 8001ad6:	4b93      	ldr	r3, [pc, #588]	@ (8001d24 <main+0x33c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	095b      	lsrs	r3, r3, #5
 8001ade:	4a9d      	ldr	r2, [pc, #628]	@ (8001d54 <main+0x36c>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	09db      	lsrs	r3, r3, #7
 8001ae6:	4a9c      	ldr	r2, [pc, #624]	@ (8001d58 <main+0x370>)
 8001ae8:	6013      	str	r3, [r2, #0]
	  // Compute **Encoder 1** Position, Velocity, & Acceleration
	  theta1 = (float)(encoder_ticks) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 8001aea:	4b98      	ldr	r3, [pc, #608]	@ (8001d4c <main+0x364>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001afa:	ee17 0a90 	vmov	r0, s15
 8001afe:	f7fe fd43 	bl	8000588 <__aeabi_f2d>
 8001b02:	a383      	add	r3, pc, #524	@ (adr r3, 8001d10 <main+0x328>)
 8001b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b08:	f7fe fd96 	bl	8000638 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4614      	mov	r4, r2
 8001b12:	461d      	mov	r5, r3
 8001b14:	4b91      	ldr	r3, [pc, #580]	@ (8001d5c <main+0x374>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001d60 <main+0x378>
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fd2f 	bl	8000588 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe feab 	bl	800088c <__aeabi_ddiv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7fe ffad 	bl	8000a9c <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4a87      	ldr	r2, [pc, #540]	@ (8001d64 <main+0x37c>)
 8001b46:	6013      	str	r3, [r2, #0]
	  velocity1 = (theta1 - theta1_prev) * 1000000  / time_interval;
 8001b48:	4b86      	ldr	r3, [pc, #536]	@ (8001d64 <main+0x37c>)
 8001b4a:	ed93 7a00 	vldr	s14, [r3]
 8001b4e:	4b86      	ldr	r3, [pc, #536]	@ (8001d68 <main+0x380>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b58:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8001d6c <main+0x384>
 8001b5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b60:	4b83      	ldr	r3, [pc, #524]	@ (8001d70 <main+0x388>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	4b80      	ldr	r3, [pc, #512]	@ (8001d74 <main+0x38c>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
	  acceleration1 = (velocity1 - velocity1_prev) * 1000000  / time_interval;
 8001b76:	4b7f      	ldr	r3, [pc, #508]	@ (8001d74 <main+0x38c>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d78 <main+0x390>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001d6c <main+0x384>
 8001b8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b8e:	4b78      	ldr	r3, [pc, #480]	@ (8001d70 <main+0x388>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	ee07 3a90 	vmov	s15, r3
 8001b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <main+0x394>)
 8001ba0:	edc3 7a00 	vstr	s15, [r3]

	  // Apply low-pass filter on the velocity of Encoder 1
	  velocity1 = applyLowPassFilterVelocity(velocity1, velocity1_prev);  // Filtered velocity
 8001ba4:	4b73      	ldr	r3, [pc, #460]	@ (8001d74 <main+0x38c>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	4b73      	ldr	r3, [pc, #460]	@ (8001d78 <main+0x390>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	eef0 0a47 	vmov.f32	s1, s14
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	f7ff feaa 	bl	8001910 <applyLowPassFilterVelocity>
 8001bbc:	eef0 7a40 	vmov.f32	s15, s0
 8001bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d74 <main+0x38c>)
 8001bc2:	edc3 7a00 	vstr	s15, [r3]

	  theta1_prev = theta1;
 8001bc6:	4b67      	ldr	r3, [pc, #412]	@ (8001d64 <main+0x37c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a67      	ldr	r2, [pc, #412]	@ (8001d68 <main+0x380>)
 8001bcc:	6013      	str	r3, [r2, #0]
	  velocity1_prev = velocity1;
 8001bce:	4b69      	ldr	r3, [pc, #420]	@ (8001d74 <main+0x38c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <main+0x390>)
 8001bd4:	6013      	str	r3, [r2, #0]

	  // Compute **Encoder 2** Position, Velocity, & Acceleration
	  theta2 = (float)(encoder_ticks2) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d50 <main+0x368>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001be6:	ee17 0a90 	vmov	r0, s15
 8001bea:	f7fe fccd 	bl	8000588 <__aeabi_f2d>
 8001bee:	a348      	add	r3, pc, #288	@ (adr r3, 8001d10 <main+0x328>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fd20 	bl	8000638 <__aeabi_dmul>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4b56      	ldr	r3, [pc, #344]	@ (8001d5c <main+0x374>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001d60 <main+0x378>
 8001c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c0e:	ee17 0a90 	vmov	r0, s15
 8001c12:	f7fe fcb9 	bl	8000588 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	4629      	mov	r1, r5
 8001c1e:	f7fe fe35 	bl	800088c <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe ff37 	bl	8000a9c <__aeabi_d2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4a53      	ldr	r2, [pc, #332]	@ (8001d80 <main+0x398>)
 8001c32:	6013      	str	r3, [r2, #0]
	  velocity2 = (theta2 - theta2_prev) * 1000000  / time_interval;
 8001c34:	4b52      	ldr	r3, [pc, #328]	@ (8001d80 <main+0x398>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	4b52      	ldr	r3, [pc, #328]	@ (8001d84 <main+0x39c>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001d6c <main+0x384>
 8001c48:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c4c:	4b48      	ldr	r3, [pc, #288]	@ (8001d70 <main+0x388>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d88 <main+0x3a0>)
 8001c5e:	edc3 7a00 	vstr	s15, [r3]
	  acceleration2 = (velocity2 - velocity2_prev) * 1000000  / time_interval;
 8001c62:	4b49      	ldr	r3, [pc, #292]	@ (8001d88 <main+0x3a0>)
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <main+0x3a4>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c72:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001d6c <main+0x384>
 8001c76:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <main+0x388>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	ee07 3a90 	vmov	s15, r3
 8001c82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c8a:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <main+0x3a8>)
 8001c8c:	edc3 7a00 	vstr	s15, [r3]

	  // Apply low-pass filter on the velocity of Encoder 2
	  velocity2 = applyLowPassFilterVelocity(velocity2, velocity2_prev);  // Filtered velocity
 8001c90:	4b3d      	ldr	r3, [pc, #244]	@ (8001d88 <main+0x3a0>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	4b3d      	ldr	r3, [pc, #244]	@ (8001d8c <main+0x3a4>)
 8001c98:	ed93 7a00 	vldr	s14, [r3]
 8001c9c:	eef0 0a47 	vmov.f32	s1, s14
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	f7ff fe34 	bl	8001910 <applyLowPassFilterVelocity>
 8001ca8:	eef0 7a40 	vmov.f32	s15, s0
 8001cac:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <main+0x3a0>)
 8001cae:	edc3 7a00 	vstr	s15, [r3]
	  theta2_prev = theta2;
 8001cb2:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <main+0x398>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a33      	ldr	r2, [pc, #204]	@ (8001d84 <main+0x39c>)
 8001cb8:	6013      	str	r3, [r2, #0]
	  velocity2_prev = velocity2;
 8001cba:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <main+0x3a0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a33      	ldr	r2, [pc, #204]	@ (8001d8c <main+0x3a4>)
 8001cc0:	6013      	str	r3, [r2, #0]
	  // Disturbance Observers //
	  Icmd1=Jn1*Set_Accelaration1/Ktn1+Idis1;
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <main+0x3ac>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <main+0x3b0>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cd2:	4b32      	ldr	r3, [pc, #200]	@ (8001d9c <main+0x3b4>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <main+0x3b8>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <main+0x3bc>)
 8001ce8:	edc3 7a00 	vstr	s15, [r3]
	  Tdis1 = (Icmd1 * Ktn1 + velocity1 * Jn1 * Gdis1) * Gdis1 / (time_interval + Gdis1) - velocity1 * Jn1 * Gdis1;
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <main+0x3bc>)
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <main+0x3b4>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d74 <main+0x38c>)
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	4b24      	ldr	r3, [pc, #144]	@ (8001d94 <main+0x3ac>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d0c:	e04c      	b.n	8001da8 <main+0x3c0>
 8001d0e:	bf00      	nop
 8001d10:	54442d18 	.word	0x54442d18
 8001d14:	400921fb 	.word	0x400921fb
 8001d18:	200001e0 	.word	0x200001e0
 8001d1c:	20000148 	.word	0x20000148
 8001d20:	2000022c 	.word	0x2000022c
 8001d24:	20000194 	.word	0x20000194
 8001d28:	0800836c 	.word	0x0800836c
 8001d2c:	2000028c 	.word	0x2000028c
 8001d30:	200022f0 	.word	0x200022f0
 8001d34:	08008348 	.word	0x08008348
 8001d38:	200012c0 	.word	0x200012c0
 8001d3c:	200000d0 	.word	0x200000d0
 8001d40:	20000280 	.word	0x20000280
 8001d44:	2000003c 	.word	0x2000003c
 8001d48:	20002af4 	.word	0x20002af4
 8001d4c:	20000278 	.word	0x20000278
 8001d50:	2000027c 	.word	0x2000027c
 8001d54:	0a7c5ac5 	.word	0x0a7c5ac5
 8001d58:	20002af8 	.word	0x20002af8
 8001d5c:	20000020 	.word	0x20000020
 8001d60:	47500000 	.word	0x47500000
 8001d64:	20002afc 	.word	0x20002afc
 8001d68:	20002b04 	.word	0x20002b04
 8001d6c:	49742400 	.word	0x49742400
 8001d70:	20000008 	.word	0x20000008
 8001d74:	20002b0c 	.word	0x20002b0c
 8001d78:	20002b14 	.word	0x20002b14
 8001d7c:	20002b1c 	.word	0x20002b1c
 8001d80:	20002b00 	.word	0x20002b00
 8001d84:	20002b08 	.word	0x20002b08
 8001d88:	20002b10 	.word	0x20002b10
 8001d8c:	20002b18 	.word	0x20002b18
 8001d90:	20002b20 	.word	0x20002b20
 8001d94:	20000014 	.word	0x20000014
 8001d98:	20000038 	.word	0x20000038
 8001d9c:	20000010 	.word	0x20000010
 8001da0:	20002b30 	.word	0x20002b30
 8001da4:	20002b24 	.word	0x20002b24
 8001da8:	4b5a      	ldr	r3, [pc, #360]	@ (8001f14 <main+0x52c>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001db2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <main+0x52c>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <main+0x530>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dcc:	4b51      	ldr	r3, [pc, #324]	@ (8001f14 <main+0x52c>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dda:	4b50      	ldr	r3, [pc, #320]	@ (8001f1c <main+0x534>)
 8001ddc:	edd3 6a00 	vldr	s13, [r3]
 8001de0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f20 <main+0x538>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dea:	4b4a      	ldr	r3, [pc, #296]	@ (8001f14 <main+0x52c>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f24 <main+0x53c>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
	  Idis1=Tdis1*Kt1;
 8001dfe:	4b49      	ldr	r3, [pc, #292]	@ (8001f24 <main+0x53c>)
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	4b48      	ldr	r3, [pc, #288]	@ (8001f28 <main+0x540>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0e:	4b47      	ldr	r3, [pc, #284]	@ (8001f2c <main+0x544>)
 8001e10:	edc3 7a00 	vstr	s15, [r3]
	  // Set the DAC output voltage
	  if(Icmd1>4.5){
 8001e14:	4b46      	ldr	r3, [pc, #280]	@ (8001f30 <main+0x548>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	dd02      	ble.n	8001e2e <main+0x446>
		  Icmd1=4.5;
 8001e28:	4b41      	ldr	r3, [pc, #260]	@ (8001f30 <main+0x548>)
 8001e2a:	4a42      	ldr	r2, [pc, #264]	@ (8001f34 <main+0x54c>)
 8001e2c:	601a      	str	r2, [r3, #0]
	  }
	  ConfigureMotor02(1, 1, Icmd1*(4000)/4.5);
 8001e2e:	4b40      	ldr	r3, [pc, #256]	@ (8001f30 <main+0x548>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001f38 <main+0x550>
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	ee17 0a90 	vmov	r0, s15
 8001e40:	f7fe fba2 	bl	8000588 <__aeabi_f2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b3c      	ldr	r3, [pc, #240]	@ (8001f3c <main+0x554>)
 8001e4a:	f7fe fd1f 	bl	800088c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe01 	bl	8000a5c <__aeabi_d2uiz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2101      	movs	r1, #1
 8001e62:	2001      	movs	r0, #1
 8001e64:	f7ff fd9c 	bl	80019a0 <ConfigureMotor02>
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2) - velocity2 * Jn2 * Gdis2;
 8001e68:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <main+0x558>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	4b35      	ldr	r3, [pc, #212]	@ (8001f44 <main+0x55c>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <main+0x560>)
 8001e7a:	edd3 6a00 	vldr	s13, [r3]
 8001e7e:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <main+0x564>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e88:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <main+0x568>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e96:	4b2e      	ldr	r3, [pc, #184]	@ (8001f50 <main+0x568>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <main+0x530>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eac:	4b28      	ldr	r3, [pc, #160]	@ (8001f50 <main+0x568>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eba:	4b23      	ldr	r3, [pc, #140]	@ (8001f48 <main+0x560>)
 8001ebc:	edd3 6a00 	vldr	s13, [r3]
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <main+0x564>)
 8001ec2:	edd3 7a00 	vldr	s15, [r3]
 8001ec6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001eca:	4b21      	ldr	r3, [pc, #132]	@ (8001f50 <main+0x568>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f54 <main+0x56c>)
 8001eda:	edc3 7a00 	vstr	s15, [r3]

	  Idis2=Tdis2*Kt2;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <main+0x56c>)
 8001ee0:	ed93 7a00 	vldr	s14, [r3]
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <main+0x570>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <main+0x574>)
 8001ef0:	edc3 7a00 	vstr	s15, [r3]

	  ConfigureMotor01(1, 1, 500);
 8001ef4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff fd2c 	bl	8001958 <ConfigureMotor01>
	  uint32_t time_end = __HAL_TIM_GET_COUNTER(&htim2);
 8001f00:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <main+0x578>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	603b      	str	r3, [r7, #0]
	  time_interval = time_end - time_start;
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4a02      	ldr	r2, [pc, #8]	@ (8001f18 <main+0x530>)
 8001f10:	6013      	str	r3, [r2, #0]
  {
 8001f12:	e5b9      	b.n	8001a88 <main+0xa0>
 8001f14:	20000018 	.word	0x20000018
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20002b0c 	.word	0x20002b0c
 8001f20:	20000014 	.word	0x20000014
 8001f24:	20002b28 	.word	0x20002b28
 8001f28:	2000001c 	.word	0x2000001c
 8001f2c:	20002b30 	.word	0x20002b30
 8001f30:	20002b24 	.word	0x20002b24
 8001f34:	40900000 	.word	0x40900000
 8001f38:	457a0000 	.word	0x457a0000
 8001f3c:	40120000 	.word	0x40120000
 8001f40:	20000024 	.word	0x20000024
 8001f44:	20000028 	.word	0x20000028
 8001f48:	20002b10 	.word	0x20002b10
 8001f4c:	2000002c 	.word	0x2000002c
 8001f50:	20000030 	.word	0x20000030
 8001f54:	20002b2c 	.word	0x20002b2c
 8001f58:	20000034 	.word	0x20000034
 8001f5c:	20002b34 	.word	0x20002b34
 8001f60:	20000194 	.word	0x20000194

08001f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b094      	sub	sp, #80	@ 0x50
 8001f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6a:	f107 0320 	add.w	r3, r7, #32
 8001f6e:	2230      	movs	r2, #48	@ 0x30
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 fd5e 	bl	8007a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f78:	f107 030c 	add.w	r3, r7, #12
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f88:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <SystemClock_Config+0xc4>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <SystemClock_Config+0xc4>)
 8001f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f94:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <SystemClock_Config+0xc4>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <SystemClock_Config+0xc8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fa8:	4a20      	ldr	r2, [pc, #128]	@ (800202c <SystemClock_Config+0xc8>)
 8001faa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <SystemClock_Config+0xc8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001fd0:	2319      	movs	r3, #25
 8001fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001fd4:	2390      	movs	r3, #144	@ 0x90
 8001fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe0:	f107 0320 	add.w	r3, r7, #32
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f001 f943 	bl	8003270 <HAL_RCC_OscConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001ff0:	f000 fa8c 	bl	800250c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002000:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002004:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	2102      	movs	r1, #2
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fbd1 	bl	80037b8 <HAL_RCC_ClockConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800201c:	f000 fa76 	bl	800250c <Error_Handler>
  }
}
 8002020:	bf00      	nop
 8002022:	3750      	adds	r7, #80	@ 0x50
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	40007000 	.word	0x40007000

08002030 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <MX_DAC_Init+0x60>)
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <MX_DAC_Init+0x64>)
 8002042:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002044:	4812      	ldr	r0, [pc, #72]	@ (8002090 <MX_DAC_Init+0x60>)
 8002046:	f000 fe51 	bl	8002cec <HAL_DAC_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002050:	f000 fa5c 	bl	800250c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002054:	2300      	movs	r3, #0
 8002056:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	4619      	mov	r1, r3
 8002062:	480b      	ldr	r0, [pc, #44]	@ (8002090 <MX_DAC_Init+0x60>)
 8002064:	f000 fee5 	bl	8002e32 <HAL_DAC_ConfigChannel>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800206e:	f000 fa4d 	bl	800250c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002072:	463b      	mov	r3, r7
 8002074:	2210      	movs	r2, #16
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	@ (8002090 <MX_DAC_Init+0x60>)
 800207a:	f000 feda 	bl	8002e32 <HAL_DAC_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002084:	f000 fa42 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	200000d0 	.word	0x200000d0
 8002094:	40007400 	.word	0x40007400

08002098 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <MX_SPI4_Init+0x74>)
 800209e:	4a1c      	ldr	r2, [pc, #112]	@ (8002110 <MX_SPI4_Init+0x78>)
 80020a0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <MX_SPI4_Init+0x74>)
 80020a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020a8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80020aa:	4b18      	ldr	r3, [pc, #96]	@ (800210c <MX_SPI4_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_SPI4_Init+0x74>)
 80020b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80020b6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <MX_SPI4_Init+0x74>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_SPI4_Init+0x74>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_SPI4_Init+0x74>)
 80020c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020ca:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <MX_SPI4_Init+0x74>)
 80020ce:	2228      	movs	r2, #40	@ 0x28
 80020d0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_SPI4_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <MX_SPI4_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_SPI4_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <MX_SPI4_Init+0x74>)
 80020e6:	2207      	movs	r2, #7
 80020e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_SPI4_Init+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_SPI4_Init+0x74>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <MX_SPI4_Init+0x74>)
 80020f8:	f001 fd10 	bl	8003b1c <HAL_SPI_Init>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8002102:	f000 fa03 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200000e4 	.word	0x200000e4
 8002110:	40013400 	.word	0x40013400

08002114 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08c      	sub	sp, #48	@ 0x30
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	2224      	movs	r2, #36	@ 0x24
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f005 fc86 	bl	8007a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002132:	4b23      	ldr	r3, [pc, #140]	@ (80021c0 <MX_TIM1_Init+0xac>)
 8002134:	4a23      	ldr	r2, [pc, #140]	@ (80021c4 <MX_TIM1_Init+0xb0>)
 8002136:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002138:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <MX_TIM1_Init+0xac>)
 800213a:	2200      	movs	r2, #0
 800213c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <MX_TIM1_Init+0xac>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002144:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <MX_TIM1_Init+0xac>)
 8002146:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800214a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <MX_TIM1_Init+0xac>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002152:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <MX_TIM1_Init+0xac>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002158:	4b19      	ldr	r3, [pc, #100]	@ (80021c0 <MX_TIM1_Init+0xac>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800215e:	2303      	movs	r3, #3
 8002160:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002166:	2301      	movs	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800216e:	2304      	movs	r3, #4
 8002170:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002172:	2302      	movs	r3, #2
 8002174:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 800217e:	2304      	movs	r3, #4
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002182:	f107 030c 	add.w	r3, r7, #12
 8002186:	4619      	mov	r1, r3
 8002188:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <MX_TIM1_Init+0xac>)
 800218a:	f002 fbdf 	bl	800494c <HAL_TIM_Encoder_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002194:	f000 f9ba 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002198:	2300      	movs	r3, #0
 800219a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <MX_TIM1_Init+0xac>)
 80021aa:	f003 f869 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80021b4:	f000 f9aa 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3730      	adds	r7, #48	@ 0x30
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000148 	.word	0x20000148
 80021c4:	40010000 	.word	0x40010000

080021c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0310 	add.w	r3, r7, #16
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002260 <MX_TIM2_Init+0x98>)
 80021e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 80021ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002260 <MX_TIM2_Init+0x98>)
 80021f0:	f240 1267 	movw	r2, #359	@ 0x167
 80021f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002260 <MX_TIM2_Init+0x98>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80021fc:	4b18      	ldr	r3, [pc, #96]	@ (8002260 <MX_TIM2_Init+0x98>)
 80021fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002204:	4b16      	ldr	r3, [pc, #88]	@ (8002260 <MX_TIM2_Init+0x98>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220a:	4b15      	ldr	r3, [pc, #84]	@ (8002260 <MX_TIM2_Init+0x98>)
 800220c:	2200      	movs	r2, #0
 800220e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002210:	4813      	ldr	r0, [pc, #76]	@ (8002260 <MX_TIM2_Init+0x98>)
 8002212:	f002 fa5b 	bl	80046cc <HAL_TIM_Base_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800221c:	f000 f976 	bl	800250c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	480c      	ldr	r0, [pc, #48]	@ (8002260 <MX_TIM2_Init+0x98>)
 800222e:	f002 fdc9 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002238:	f000 f968 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	4619      	mov	r1, r3
 8002248:	4805      	ldr	r0, [pc, #20]	@ (8002260 <MX_TIM2_Init+0x98>)
 800224a:	f003 f819 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002254:	f000 f95a 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000194 	.word	0x20000194

08002264 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08c      	sub	sp, #48	@ 0x30
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800226a:	f107 030c 	add.w	r3, r7, #12
 800226e:	2224      	movs	r2, #36	@ 0x24
 8002270:	2100      	movs	r1, #0
 8002272:	4618      	mov	r0, r3
 8002274:	f005 fbde 	bl	8007a34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002278:	463b      	mov	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <MX_TIM4_Init+0xa4>)
 8002284:	4a21      	ldr	r2, [pc, #132]	@ (800230c <MX_TIM4_Init+0xa8>)
 8002286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002288:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <MX_TIM4_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b1e      	ldr	r3, [pc, #120]	@ (8002308 <MX_TIM4_Init+0xa4>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002294:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <MX_TIM4_Init+0xa4>)
 8002296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800229a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <MX_TIM4_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <MX_TIM4_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022a8:	2303      	movs	r3, #3
 80022aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80022ac:	2302      	movs	r3, #2
 80022ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022b0:	2301      	movs	r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80022b8:	2308      	movs	r3, #8
 80022ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 8;
 80022c8:	2308      	movs	r3, #8
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	4619      	mov	r1, r3
 80022d2:	480d      	ldr	r0, [pc, #52]	@ (8002308 <MX_TIM4_Init+0xa4>)
 80022d4:	f002 fb3a 	bl	800494c <HAL_TIM_Encoder_Init>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022de:	f000 f915 	bl	800250c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022ea:	463b      	mov	r3, r7
 80022ec:	4619      	mov	r1, r3
 80022ee:	4806      	ldr	r0, [pc, #24]	@ (8002308 <MX_TIM4_Init+0xa4>)
 80022f0:	f002 ffc6 	bl	8005280 <HAL_TIMEx_MasterConfigSynchronization>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80022fa:	f000 f907 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80022fe:	bf00      	nop
 8002300:	3730      	adds	r7, #48	@ 0x30
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200001e0 	.word	0x200001e0
 800230c:	40000800 	.word	0x40000800

08002310 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002314:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <MX_TIM13_Init+0x40>)
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <MX_TIM13_Init+0x44>)
 8002318:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 14400-1;
 800231a:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <MX_TIM13_Init+0x40>)
 800231c:	f643 023f 	movw	r2, #14399	@ 0x383f
 8002320:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <MX_TIM13_Init+0x40>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8002328:	4b09      	ldr	r3, [pc, #36]	@ (8002350 <MX_TIM13_Init+0x40>)
 800232a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800232e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <MX_TIM13_Init+0x40>)
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b06      	ldr	r3, [pc, #24]	@ (8002350 <MX_TIM13_Init+0x40>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	@ (8002350 <MX_TIM13_Init+0x40>)
 800233e:	f002 f9c5 	bl	80046cc <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002348:	f000 f8e0 	bl	800250c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000022c 	.word	0x2000022c
 8002354:	40001c00 	.word	0x40001c00

08002358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	@ 0x30
 800235c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235e:	f107 031c 	add.w	r3, r7, #28
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800236e:	4b4c      	ldr	r3, [pc, #304]	@ (80024a0 <MX_GPIO_Init+0x148>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	4a4b      	ldr	r2, [pc, #300]	@ (80024a0 <MX_GPIO_Init+0x148>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6313      	str	r3, [r2, #48]	@ 0x30
 800237a:	4b49      	ldr	r3, [pc, #292]	@ (80024a0 <MX_GPIO_Init+0x148>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002386:	4b46      	ldr	r3, [pc, #280]	@ (80024a0 <MX_GPIO_Init+0x148>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	4a45      	ldr	r2, [pc, #276]	@ (80024a0 <MX_GPIO_Init+0x148>)
 800238c:	f043 0320 	orr.w	r3, r3, #32
 8002390:	6313      	str	r3, [r2, #48]	@ 0x30
 8002392:	4b43      	ldr	r3, [pc, #268]	@ (80024a0 <MX_GPIO_Init+0x148>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	4b40      	ldr	r3, [pc, #256]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a3f      	ldr	r2, [pc, #252]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b3a      	ldr	r3, [pc, #232]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a39      	ldr	r2, [pc, #228]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b37      	ldr	r3, [pc, #220]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b34      	ldr	r3, [pc, #208]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a33      	ldr	r2, [pc, #204]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023ec:	f043 0308 	orr.w	r3, r3, #8
 80023f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f2:	4b2b      	ldr	r3, [pc, #172]	@ (80024a0 <MX_GPIO_Init+0x148>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80023fe:	2200      	movs	r2, #0
 8002400:	2103      	movs	r1, #3
 8002402:	4828      	ldr	r0, [pc, #160]	@ (80024a4 <MX_GPIO_Init+0x14c>)
 8002404:	f000 ff1a 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	210c      	movs	r1, #12
 800240c:	4826      	ldr	r0, [pc, #152]	@ (80024a8 <MX_GPIO_Init+0x150>)
 800240e:	f000 ff15 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	2131      	movs	r1, #49	@ 0x31
 8002416:	4825      	ldr	r0, [pc, #148]	@ (80024ac <MX_GPIO_Init+0x154>)
 8002418:	f000 ff10 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	2103      	movs	r1, #3
 8002420:	4823      	ldr	r0, [pc, #140]	@ (80024b0 <MX_GPIO_Init+0x158>)
 8002422:	f000 ff0b 	bl	800323c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002426:	2303      	movs	r3, #3
 8002428:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242a:	2301      	movs	r3, #1
 800242c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002432:	2300      	movs	r3, #0
 8002434:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4619      	mov	r1, r3
 800243c:	4819      	ldr	r0, [pc, #100]	@ (80024a4 <MX_GPIO_Init+0x14c>)
 800243e:	f000 fd51 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002442:	230c      	movs	r3, #12
 8002444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	2301      	movs	r3, #1
 8002448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 031c 	add.w	r3, r7, #28
 8002456:	4619      	mov	r1, r3
 8002458:	4813      	ldr	r0, [pc, #76]	@ (80024a8 <MX_GPIO_Init+0x150>)
 800245a:	f000 fd43 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800245e:	2331      	movs	r3, #49	@ 0x31
 8002460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	480d      	ldr	r0, [pc, #52]	@ (80024ac <MX_GPIO_Init+0x154>)
 8002476:	f000 fd35 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800247a:	2303      	movs	r3, #3
 800247c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248a:	f107 031c 	add.w	r3, r7, #28
 800248e:	4619      	mov	r1, r3
 8002490:	4807      	ldr	r0, [pc, #28]	@ (80024b0 <MX_GPIO_Init+0x158>)
 8002492:	f000 fd27 	bl	8002ee4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002496:	bf00      	nop
 8002498:	3730      	adds	r7, #48	@ 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40021400 	.word	0x40021400
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020c00 	.word	0x40020c00

080024b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80024ba:	463b      	mov	r3, r7
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80024c6:	f000 fb99 	bl	8002bfc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80024d6:	231f      	movs	r3, #31
 80024d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80024da:	2387      	movs	r3, #135	@ 0x87
 80024dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80024de:	2300      	movs	r3, #0
 80024e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80024e2:	2300      	movs	r3, #0
 80024e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024f6:	463b      	mov	r3, r7
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fbb7 	bl	8002c6c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80024fe:	2004      	movs	r0, #4
 8002500:	f000 fb94 	bl	8002c2c <HAL_MPU_Enable>

}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002510:	b672      	cpsid	i
}
 8002512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <Error_Handler+0x8>

08002518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b0f      	ldr	r3, [pc, #60]	@ (800255c <HAL_MspInit+0x44>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <HAL_MspInit+0x44>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	@ 0x40
 800252a:	4b0c      	ldr	r3, [pc, #48]	@ (800255c <HAL_MspInit+0x44>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	4b09      	ldr	r3, [pc, #36]	@ (800255c <HAL_MspInit+0x44>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a08      	ldr	r2, [pc, #32]	@ (800255c <HAL_MspInit+0x44>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_MspInit+0x44>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	@ (80025d4 <HAL_DAC_MspInit+0x74>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d123      	bne.n	80025ca <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 8002588:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800258c:	6413      	str	r3, [r2, #64]	@ 0x40
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a0e      	ldr	r2, [pc, #56]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_DAC_MspInit+0x78>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025b2:	2330      	movs	r3, #48	@ 0x30
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025b6:	2303      	movs	r3, #3
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	@ (80025dc <HAL_DAC_MspInit+0x7c>)
 80025c6:	f000 fc8d 	bl	8002ee4 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80025ca:	bf00      	nop
 80025cc:	3728      	adds	r7, #40	@ 0x28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40007400 	.word	0x40007400
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020000 	.word	0x40020000

080025e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <HAL_SPI_MspInit+0x7c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d127      	bne.n	8002652 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a16      	ldr	r2, [pc, #88]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a10      	ldr	r2, [pc, #64]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <HAL_SPI_MspInit+0x80>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002632:	2364      	movs	r3, #100	@ 0x64
 8002634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263e:	2303      	movs	r3, #3
 8002640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002642:	2305      	movs	r3, #5
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	4805      	ldr	r0, [pc, #20]	@ (8002664 <HAL_SPI_MspInit+0x84>)
 800264e:	f000 fc49 	bl	8002ee4 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002652:	bf00      	nop
 8002654:	3728      	adds	r7, #40	@ 0x28
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40013400 	.word	0x40013400
 8002660:	40023800 	.word	0x40023800
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	@ 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2f      	ldr	r2, [pc, #188]	@ (8002744 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d129      	bne.n	80026de <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800268a:	4b2f      	ldr	r3, [pc, #188]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	4a2e      	ldr	r2, [pc, #184]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6453      	str	r3, [r2, #68]	@ 0x44
 8002696:	4b2c      	ldr	r3, [pc, #176]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a2:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a6:	4a28      	ldr	r2, [pc, #160]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ae:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80026ba:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	481d      	ldr	r0, [pc, #116]	@ (800274c <HAL_TIM_Encoder_MspInit+0xe4>)
 80026d8:	f000 fc04 	bl	8002ee4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026dc:	e02d      	b.n	800273a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <HAL_TIM_Encoder_MspInit+0xe8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d128      	bne.n	800273a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e8:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	4a16      	ldr	r2, [pc, #88]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f4:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002700:	4b11      	ldr	r3, [pc, #68]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	4a10      	ldr	r2, [pc, #64]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	6313      	str	r3, [r2, #48]	@ 0x30
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_TIM_Encoder_MspInit+0xe0>)
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002718:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800272a:	2302      	movs	r3, #2
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4807      	ldr	r0, [pc, #28]	@ (8002754 <HAL_TIM_Encoder_MspInit+0xec>)
 8002736:	f000 fbd5 	bl	8002ee4 <HAL_GPIO_Init>
}
 800273a:	bf00      	nop
 800273c:	3730      	adds	r7, #48	@ 0x30
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40010000 	.word	0x40010000
 8002748:	40023800 	.word	0x40023800
 800274c:	40021000 	.word	0x40021000
 8002750:	40000800 	.word	0x40000800
 8002754:	40020c00 	.word	0x40020c00

08002758 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002768:	d10c      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800276a:	4b15      	ldr	r3, [pc, #84]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002782:	e018      	b.n	80027b6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <HAL_TIM_Base_MspInit+0x6c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d113      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800278e:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 8002794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002798:	6413      	str	r3, [r2, #64]	@ 0x40
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	202c      	movs	r0, #44	@ 0x2c
 80027ac:	f000 f9ef 	bl	8002b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80027b0:	202c      	movs	r0, #44	@ 0x2c
 80027b2:	f000 fa08 	bl	8002bc6 <HAL_NVIC_EnableIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40001c00 	.word	0x40001c00

080027c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <NMI_Handler+0x4>

080027d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <HardFault_Handler+0x4>

080027d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <MemManage_Handler+0x4>

080027e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <UsageFault_Handler+0x4>

080027f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027fe:	b480      	push	{r7}
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281e:	f000 f8bb 	bl	8002998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800282c:	4802      	ldr	r0, [pc, #8]	@ (8002838 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800282e:	f002 f9c1 	bl	8004bb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	2000022c 	.word	0x2000022c

0800283c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002844:	4a14      	ldr	r2, [pc, #80]	@ (8002898 <_sbrk+0x5c>)
 8002846:	4b15      	ldr	r3, [pc, #84]	@ (800289c <_sbrk+0x60>)
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <_sbrk+0x64>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <_sbrk+0x64>)
 800285a:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <_sbrk+0x68>)
 800285c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <_sbrk+0x64>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	429a      	cmp	r2, r3
 800286a:	d207      	bcs.n	800287c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800286c:	f005 f8ea 	bl	8007a44 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	220c      	movs	r2, #12
 8002874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e009      	b.n	8002890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002882:	4b07      	ldr	r3, [pc, #28]	@ (80028a0 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <_sbrk+0x64>)
 800288c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20050000 	.word	0x20050000
 800289c:	00000400 	.word	0x00000400
 80028a0:	20002b3c 	.word	0x20002b3c
 80028a4:	20002cc8 	.word	0x20002cc8

080028a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <SystemInit+0x20>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b2:	4a05      	ldr	r2, [pc, #20]	@ (80028c8 <SystemInit+0x20>)
 80028b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d0:	f7ff ffea 	bl	80028a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028d4:	480c      	ldr	r0, [pc, #48]	@ (8002908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028d6:	490d      	ldr	r1, [pc, #52]	@ (800290c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80028fa:	f005 f8a9 	bl	8007a50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028fe:	f7ff f873 	bl	80019e8 <main>
  bx  lr    
 8002902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002904:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800290c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002910:	08008488 	.word	0x08008488
  ldr r2, =_sbss
 8002914:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002918:	20002cc8 	.word	0x20002cc8

0800291c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800291c:	e7fe      	b.n	800291c <ADC_IRQHandler>

0800291e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002922:	2003      	movs	r0, #3
 8002924:	f000 f928 	bl	8002b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002928:	200f      	movs	r0, #15
 800292a:	f000 f805 	bl	8002938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800292e:	f7ff fdf3 	bl	8002518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x54>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <HAL_InitTick+0x58>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f943 	bl	8002be2 <HAL_SYSTICK_Config>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e00e      	b.n	8002984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d80a      	bhi.n	8002982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800296c:	2200      	movs	r2, #0
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	f000 f90b 	bl	8002b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002978:	4a06      	ldr	r2, [pc, #24]	@ (8002994 <HAL_InitTick+0x5c>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
 8002980:	e000      	b.n	8002984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
}
 8002984:	4618      	mov	r0, r3
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000040 	.word	0x20000040
 8002990:	20000048 	.word	0x20000048
 8002994:	20000044 	.word	0x20000044

08002998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x20>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	461a      	mov	r2, r3
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_IncTick+0x24>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4413      	add	r3, r2
 80029a8:	4a04      	ldr	r2, [pc, #16]	@ (80029bc <HAL_IncTick+0x24>)
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000048 	.word	0x20000048
 80029bc:	20002b40 	.word	0x20002b40

080029c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return uwTick;
 80029c4:	4b03      	ldr	r3, [pc, #12]	@ (80029d4 <HAL_GetTick+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20002b40 	.word	0x20002b40

080029d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x40>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a00:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <__NVIC_SetPriorityGrouping+0x44>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <__NVIC_SetPriorityGrouping+0x40>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00
 8002a1c:	05fa0000 	.word	0x05fa0000

08002a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	@ (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	@ 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	@ 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b44:	d301      	bcc.n	8002b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b46:	2301      	movs	r3, #1
 8002b48:	e00f      	b.n	8002b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b74 <SysTick_Config+0x40>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b52:	210f      	movs	r1, #15
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f7ff ff8e 	bl	8002a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b5c:	4b05      	ldr	r3, [pc, #20]	@ (8002b74 <SysTick_Config+0x40>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b62:	4b04      	ldr	r3, [pc, #16]	@ (8002b74 <SysTick_Config+0x40>)
 8002b64:	2207      	movs	r2, #7
 8002b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	e000e010 	.word	0xe000e010

08002b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff ff29 	bl	80029d8 <__NVIC_SetPriorityGrouping>
}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b086      	sub	sp, #24
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	4603      	mov	r3, r0
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba0:	f7ff ff3e 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff8e 	bl	8002acc <NVIC_EncodePriority>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff5d 	bl	8002a78 <__NVIC_SetPriority>
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff31 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ffa2 	bl	8002b34 <SysTick_Config>
 8002bf0:	4603      	mov	r3, r0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002c00:	f3bf 8f5f 	dmb	sy
}
 8002c04:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <HAL_MPU_Disable+0x28>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_MPU_Disable+0x28>)
 8002c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c10:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c12:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_MPU_Disable+0x2c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00
 8002c28:	e000ed90 	.word	0xe000ed90

08002c2c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c34:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <HAL_MPU_Enable+0x38>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_MPU_Enable+0x3c>)
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	4a09      	ldr	r2, [pc, #36]	@ (8002c68 <HAL_MPU_Enable+0x3c>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c48:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c4a:	f3bf 8f4f 	dsb	sy
}
 8002c4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c50:	f3bf 8f6f 	isb	sy
}
 8002c54:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed90 	.word	0xe000ed90
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	785a      	ldrb	r2, [r3, #1]
 8002c78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c7a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c88:	4a17      	ldr	r2, [pc, #92]	@ (8002ce8 <HAL_MPU_ConfigRegion+0x7c>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7b1b      	ldrb	r3, [r3, #12]
 8002c94:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7adb      	ldrb	r3, [r3, #11]
 8002c9a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7a9b      	ldrb	r3, [r3, #10]
 8002ca2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7b5b      	ldrb	r3, [r3, #13]
 8002caa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7b9b      	ldrb	r3, [r3, #14]
 8002cb2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7bdb      	ldrb	r3, [r3, #15]
 8002cba:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cbc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7a5b      	ldrb	r3, [r3, #9]
 8002cc2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7a1b      	ldrb	r3, [r3, #8]
 8002cca:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ccc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cd4:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cd6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cd8:	6113      	str	r3, [r2, #16]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed90 	.word	0xe000ed90

08002cec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e014      	b.n	8002d28 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	791b      	ldrb	r3, [r3, #4]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d105      	bne.n	8002d14 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fc26 	bl	8002560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e046      	b.n	8002dd2 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	795b      	ldrb	r3, [r3, #5]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_DAC_Start+0x20>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e040      	b.n	8002dd2 <HAL_DAC_Start+0xa2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2201      	movs	r2, #1
 8002d6a:	409a      	lsls	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002d84:	2b3c      	cmp	r3, #60	@ 0x3c
 8002d86:	d11d      	bne.n	8002dc4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	e014      	b.n	8002dc4 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	213c      	movs	r1, #60	@ 0x3c
 8002dac:	fa01 f303 	lsl.w	r3, r1, r3
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0202 	orr.w	r2, r2, #2
 8002dc2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b087      	sub	sp, #28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e015      	b.n	8002e26 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d105      	bne.n	8002e12 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e004      	b.n	8002e1c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	3314      	adds	r3, #20
 8002e1a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b089      	sub	sp, #36	@ 0x24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_DAC_ConfigChannel+0x1c>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e042      	b.n	8002ed8 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	795b      	ldrb	r3, [r3, #5]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_DAC_ConfigChannel+0x2c>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e03c      	b.n	8002ed8 <HAL_DAC_ConfigChannel+0xa6>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2202      	movs	r2, #2
 8002e68:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	22c0      	movs	r2, #192	@ 0xc0
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	43da      	mvns	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	400a      	ands	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3724      	adds	r7, #36	@ 0x24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b089      	sub	sp, #36	@ 0x24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e175      	b.n	80031f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8164 	bne.w	80031ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_GPIO_Init+0x56>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80be 	beq.w	80031ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	4b66      	ldr	r3, [pc, #408]	@ (8003208 <HAL_GPIO_Init+0x324>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003072:	4a65      	ldr	r2, [pc, #404]	@ (8003208 <HAL_GPIO_Init+0x324>)
 8003074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003078:	6453      	str	r3, [r2, #68]	@ 0x44
 800307a:	4b63      	ldr	r3, [pc, #396]	@ (8003208 <HAL_GPIO_Init+0x324>)
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003082:	60fb      	str	r3, [r7, #12]
 8003084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003086:	4a61      	ldr	r2, [pc, #388]	@ (800320c <HAL_GPIO_Init+0x328>)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	089b      	lsrs	r3, r3, #2
 800308c:	3302      	adds	r3, #2
 800308e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003092:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a58      	ldr	r2, [pc, #352]	@ (8003210 <HAL_GPIO_Init+0x32c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d037      	beq.n	8003122 <HAL_GPIO_Init+0x23e>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_GPIO_Init+0x330>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d031      	beq.n	800311e <HAL_GPIO_Init+0x23a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a56      	ldr	r2, [pc, #344]	@ (8003218 <HAL_GPIO_Init+0x334>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d02b      	beq.n	800311a <HAL_GPIO_Init+0x236>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a55      	ldr	r2, [pc, #340]	@ (800321c <HAL_GPIO_Init+0x338>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d025      	beq.n	8003116 <HAL_GPIO_Init+0x232>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a54      	ldr	r2, [pc, #336]	@ (8003220 <HAL_GPIO_Init+0x33c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d01f      	beq.n	8003112 <HAL_GPIO_Init+0x22e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a53      	ldr	r2, [pc, #332]	@ (8003224 <HAL_GPIO_Init+0x340>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d019      	beq.n	800310e <HAL_GPIO_Init+0x22a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a52      	ldr	r2, [pc, #328]	@ (8003228 <HAL_GPIO_Init+0x344>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_GPIO_Init+0x226>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a51      	ldr	r2, [pc, #324]	@ (800322c <HAL_GPIO_Init+0x348>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d00d      	beq.n	8003106 <HAL_GPIO_Init+0x222>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a50      	ldr	r2, [pc, #320]	@ (8003230 <HAL_GPIO_Init+0x34c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d007      	beq.n	8003102 <HAL_GPIO_Init+0x21e>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4f      	ldr	r2, [pc, #316]	@ (8003234 <HAL_GPIO_Init+0x350>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d101      	bne.n	80030fe <HAL_GPIO_Init+0x21a>
 80030fa:	2309      	movs	r3, #9
 80030fc:	e012      	b.n	8003124 <HAL_GPIO_Init+0x240>
 80030fe:	230a      	movs	r3, #10
 8003100:	e010      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003102:	2308      	movs	r3, #8
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003106:	2307      	movs	r3, #7
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x240>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x240>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003134:	4935      	ldr	r1, [pc, #212]	@ (800320c <HAL_GPIO_Init+0x328>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003142:	4b3d      	ldr	r3, [pc, #244]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003166:	4a34      	ldr	r2, [pc, #208]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_GPIO_Init+0x354>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003190:	4a29      	ldr	r2, [pc, #164]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003196:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <HAL_GPIO_Init+0x354>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e4:	4a14      	ldr	r2, [pc, #80]	@ (8003238 <HAL_GPIO_Init+0x354>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae86 	bls.w	8002f04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3724      	adds	r7, #36	@ 0x24
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	40023800 	.word	0x40023800
 800320c:	40013800 	.word	0x40013800
 8003210:	40020000 	.word	0x40020000
 8003214:	40020400 	.word	0x40020400
 8003218:	40020800 	.word	0x40020800
 800321c:	40020c00 	.word	0x40020c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40021400 	.word	0x40021400
 8003228:	40021800 	.word	0x40021800
 800322c:	40021c00 	.word	0x40021c00
 8003230:	40022000 	.word	0x40022000
 8003234:	40022400 	.word	0x40022400
 8003238:	40013c00 	.word	0x40013c00

0800323c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800324c:	787b      	ldrb	r3, [r7, #1]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003252:	887a      	ldrh	r2, [r7, #2]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003258:	e003      	b.n	8003262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800325a:	887b      	ldrh	r3, [r7, #2]
 800325c:	041a      	lsls	r2, r3, #16
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	619a      	str	r2, [r3, #24]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e291      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8087 	beq.w	80033a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003294:	4b96      	ldr	r3, [pc, #600]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b04      	cmp	r3, #4
 800329e:	d00c      	beq.n	80032ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a0:	4b93      	ldr	r3, [pc, #588]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d112      	bne.n	80032d2 <HAL_RCC_OscConfig+0x62>
 80032ac:	4b90      	ldr	r3, [pc, #576]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032b8:	d10b      	bne.n	80032d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ba:	4b8d      	ldr	r3, [pc, #564]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d06c      	beq.n	80033a0 <HAL_RCC_OscConfig+0x130>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d168      	bne.n	80033a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e26b      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032da:	d106      	bne.n	80032ea <HAL_RCC_OscConfig+0x7a>
 80032dc:	4b84      	ldr	r3, [pc, #528]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a83      	ldr	r2, [pc, #524]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e6:	6013      	str	r3, [r2, #0]
 80032e8:	e02e      	b.n	8003348 <HAL_RCC_OscConfig+0xd8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10c      	bne.n	800330c <HAL_RCC_OscConfig+0x9c>
 80032f2:	4b7f      	ldr	r3, [pc, #508]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a7e      	ldr	r2, [pc, #504]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80032f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	4b7c      	ldr	r3, [pc, #496]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7b      	ldr	r2, [pc, #492]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003304:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e01d      	b.n	8003348 <HAL_RCC_OscConfig+0xd8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003314:	d10c      	bne.n	8003330 <HAL_RCC_OscConfig+0xc0>
 8003316:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a75      	ldr	r2, [pc, #468]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800331c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b73      	ldr	r3, [pc, #460]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a72      	ldr	r2, [pc, #456]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e00b      	b.n	8003348 <HAL_RCC_OscConfig+0xd8>
 8003330:	4b6f      	ldr	r3, [pc, #444]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a6e      	ldr	r2, [pc, #440]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4b6c      	ldr	r3, [pc, #432]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a6b      	ldr	r2, [pc, #428]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d013      	beq.n	8003378 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7ff fb36 	bl	80029c0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003358:	f7ff fb32 	bl	80029c0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b64      	cmp	r3, #100	@ 0x64
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e21f      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0xe8>
 8003376:	e014      	b.n	80033a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7ff fb22 	bl	80029c0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7ff fb1e 	bl	80029c0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	@ 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e20b      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003392:	4b57      	ldr	r3, [pc, #348]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x110>
 800339e:	e000      	b.n	80033a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d069      	beq.n	8003482 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033ae:	4b50      	ldr	r3, [pc, #320]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ba:	4b4d      	ldr	r3, [pc, #308]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d11c      	bne.n	8003400 <HAL_RCC_OscConfig+0x190>
 80033c6:	4b4a      	ldr	r3, [pc, #296]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d116      	bne.n	8003400 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d2:	4b47      	ldr	r3, [pc, #284]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_RCC_OscConfig+0x17a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e1df      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	493d      	ldr	r1, [pc, #244]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033fe:	e040      	b.n	8003482 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d023      	beq.n	8003450 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	4b39      	ldr	r3, [pc, #228]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a38      	ldr	r2, [pc, #224]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7ff fad4 	bl	80029c0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341c:	f7ff fad0 	bl	80029c0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1bd      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342e:	4b30      	ldr	r3, [pc, #192]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343a:	4b2d      	ldr	r3, [pc, #180]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4929      	ldr	r1, [pc, #164]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]
 800344e:	e018      	b.n	8003482 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003450:	4b27      	ldr	r3, [pc, #156]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a26      	ldr	r2, [pc, #152]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003456:	f023 0301 	bic.w	r3, r3, #1
 800345a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7ff fab0 	bl	80029c0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003464:	f7ff faac 	bl	80029c0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e199      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003476:	4b1e      	ldr	r3, [pc, #120]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d038      	beq.n	8003500 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d019      	beq.n	80034ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003496:	4b16      	ldr	r3, [pc, #88]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 8003498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800349a:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a2:	f7ff fa8d 	bl	80029c0 <HAL_GetTick>
 80034a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034aa:	f7ff fa89 	bl	80029c0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e176      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCC_OscConfig+0x23a>
 80034c8:	e01a      	b.n	8003500 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ca:	4b09      	ldr	r3, [pc, #36]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80034cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ce:	4a08      	ldr	r2, [pc, #32]	@ (80034f0 <HAL_RCC_OscConfig+0x280>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7ff fa73 	bl	80029c0 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	e00a      	b.n	80034f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034de:	f7ff fa6f 	bl	80029c0 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d903      	bls.n	80034f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e15c      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
 80034f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b91      	ldr	r3, [pc, #580]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1ee      	bne.n	80034de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a4 	beq.w	8003656 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350e:	4b8b      	ldr	r3, [pc, #556]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10d      	bne.n	8003536 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800351a:	4b88      	ldr	r3, [pc, #544]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	4a87      	ldr	r2, [pc, #540]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003524:	6413      	str	r3, [r2, #64]	@ 0x40
 8003526:	4b85      	ldr	r3, [pc, #532]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003532:	2301      	movs	r3, #1
 8003534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003536:	4b82      	ldr	r3, [pc, #520]	@ (8003740 <HAL_RCC_OscConfig+0x4d0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d118      	bne.n	8003574 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003542:	4b7f      	ldr	r3, [pc, #508]	@ (8003740 <HAL_RCC_OscConfig+0x4d0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a7e      	ldr	r2, [pc, #504]	@ (8003740 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800354e:	f7ff fa37 	bl	80029c0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7ff fa33 	bl	80029c0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b64      	cmp	r3, #100	@ 0x64
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e120      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003568:	4b75      	ldr	r3, [pc, #468]	@ (8003740 <HAL_RCC_OscConfig+0x4d0>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x31a>
 800357c:	4b6f      	ldr	r3, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800357e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003580:	4a6e      	ldr	r2, [pc, #440]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	6713      	str	r3, [r2, #112]	@ 0x70
 8003588:	e02d      	b.n	80035e6 <HAL_RCC_OscConfig+0x376>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x33c>
 8003592:	4b6a      	ldr	r3, [pc, #424]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	4a69      	ldr	r2, [pc, #420]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	@ 0x70
 800359e:	4b67      	ldr	r3, [pc, #412]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a2:	4a66      	ldr	r2, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035aa:	e01c      	b.n	80035e6 <HAL_RCC_OscConfig+0x376>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d10c      	bne.n	80035ce <HAL_RCC_OscConfig+0x35e>
 80035b4:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	4a60      	ldr	r2, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	@ 0x70
 80035c0:	4b5e      	ldr	r3, [pc, #376]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	4a5d      	ldr	r2, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80035cc:	e00b      	b.n	80035e6 <HAL_RCC_OscConfig+0x376>
 80035ce:	4b5b      	ldr	r3, [pc, #364]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035d2:	4a5a      	ldr	r2, [pc, #360]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035da:	4b58      	ldr	r3, [pc, #352]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035de:	4a57      	ldr	r2, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d015      	beq.n	800361a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7ff f9e7 	bl	80029c0 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7ff f9e3 	bl	80029c0 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e0ce      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ee      	beq.n	80035f6 <HAL_RCC_OscConfig+0x386>
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7ff f9d1 	bl	80029c0 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7ff f9cd 	bl	80029c0 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	4b40      	ldr	r3, [pc, #256]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b3c      	ldr	r3, [pc, #240]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	4a3b      	ldr	r2, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80a4 	beq.w	80037a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003660:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d06b      	beq.n	8003744 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d149      	bne.n	8003708 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003674:	4b31      	ldr	r3, [pc, #196]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800367e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7ff f99e 	bl	80029c0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7ff f99a 	bl	80029c0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e087      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	019b      	lsls	r3, r3, #6
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	041b      	lsls	r3, r3, #16
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	061b      	lsls	r3, r3, #24
 80036ca:	4313      	orrs	r3, r2
 80036cc:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80036d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d4:	4b19      	ldr	r3, [pc, #100]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7ff f96e 	bl	80029c0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e8:	f7ff f96a 	bl	80029c0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e057      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f0      	beq.n	80036e8 <HAL_RCC_OscConfig+0x478>
 8003706:	e04f      	b.n	80037a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003708:	4b0c      	ldr	r3, [pc, #48]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0b      	ldr	r2, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 800370e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7ff f954 	bl	80029c0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7ff f950 	bl	80029c0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e03d      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372e:	4b03      	ldr	r3, [pc, #12]	@ (800373c <HAL_RCC_OscConfig+0x4cc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x4ac>
 800373a:	e035      	b.n	80037a8 <HAL_RCC_OscConfig+0x538>
 800373c:	40023800 	.word	0x40023800
 8003740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003744:	4b1b      	ldr	r3, [pc, #108]	@ (80037b4 <HAL_RCC_OscConfig+0x544>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d028      	beq.n	80037a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d121      	bne.n	80037a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d11a      	bne.n	80037a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003774:	4013      	ands	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800377a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800377c:	4293      	cmp	r3, r2
 800377e:	d111      	bne.n	80037a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378a:	085b      	lsrs	r3, r3, #1
 800378c:	3b01      	subs	r3, #1
 800378e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d107      	bne.n	80037a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800

080037b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0d0      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 030f 	and.w	r3, r3, #15
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d910      	bls.n	8003800 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b67      	ldr	r3, [pc, #412]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 020f 	bic.w	r2, r3, #15
 80037e6:	4965      	ldr	r1, [pc, #404]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a58      	ldr	r2, [pc, #352]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003822:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a52      	ldr	r2, [pc, #328]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800383a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d040      	beq.n	80038dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d115      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387a:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d109      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e073      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06b      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4936      	ldr	r1, [pc, #216]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7ff f888 	bl	80029c0 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7ff f884 	bl	80029c0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e053      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038dc:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d210      	bcs.n	800390c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ea:	4b24      	ldr	r3, [pc, #144]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	4922      	ldr	r1, [pc, #136]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	@ (800397c <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	@ (8003984 <HAL_RCC_ClockConfig+0x1cc>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <HAL_RCC_ClockConfig+0x1d0>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCC_ClockConfig+0x1d4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe ffe4 	bl	8002938 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00
 8003980:	40023800 	.word	0x40023800
 8003984:	080083b4 	.word	0x080083b4
 8003988:	20000040 	.word	0x20000040
 800398c:	20000044 	.word	0x20000044

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b090      	sub	sp, #64	@ 0x40
 8003996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	637b      	str	r3, [r7, #52]	@ 0x34
 800399c:	2300      	movs	r3, #0
 800399e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a0:	2300      	movs	r3, #0
 80039a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a8:	4b59      	ldr	r3, [pc, #356]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d00d      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x40>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	f200 80a1 	bhi.w	8003afc <HAL_RCC_GetSysClockFreq+0x16c>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3a>
 80039c2:	e09b      	b.n	8003afc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b53      	ldr	r3, [pc, #332]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x184>)
 80039c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039c8:	e09b      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ca:	4b53      	ldr	r3, [pc, #332]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80039cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039ce:	e098      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039da:	4b4d      	ldr	r3, [pc, #308]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d028      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80039f8:	2100      	movs	r1, #0
 80039fa:	4b47      	ldr	r3, [pc, #284]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 80039fc:	fb03 f201 	mul.w	r2, r3, r1
 8003a00:	2300      	movs	r3, #0
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	4413      	add	r3, r2
 8003a08:	4a43      	ldr	r2, [pc, #268]	@ (8003b18 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a0a:	fba0 1202 	umull	r1, r2, r0, r2
 8003a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a10:	460a      	mov	r2, r1
 8003a12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a16:	4413      	add	r3, r2
 8003a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
 8003a20:	61fa      	str	r2, [r7, #28]
 8003a22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a2a:	f7fd f887 	bl	8000b3c <__aeabi_uldivmod>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4613      	mov	r3, r2
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a36:	e053      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a38:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	099b      	lsrs	r3, r3, #6
 8003a3e:	2200      	movs	r2, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	617a      	str	r2, [r7, #20]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a4a:	f04f 0b00 	mov.w	fp, #0
 8003a4e:	4652      	mov	r2, sl
 8003a50:	465b      	mov	r3, fp
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	0159      	lsls	r1, r3, #5
 8003a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a60:	0150      	lsls	r0, r2, #5
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	ebb2 080a 	subs.w	r8, r2, sl
 8003a6a:	eb63 090b 	sbc.w	r9, r3, fp
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a82:	ebb2 0408 	subs.w	r4, r2, r8
 8003a86:	eb63 0509 	sbc.w	r5, r3, r9
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	00eb      	lsls	r3, r5, #3
 8003a94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a98:	00e2      	lsls	r2, r4, #3
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	eb14 030a 	adds.w	r3, r4, sl
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	eb45 030b 	adc.w	r3, r5, fp
 8003aa8:	607b      	str	r3, [r7, #4]
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	028b      	lsls	r3, r1, #10
 8003aba:	4621      	mov	r1, r4
 8003abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac0:	4621      	mov	r1, r4
 8003ac2:	028a      	lsls	r2, r1, #10
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aca:	2200      	movs	r2, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	60fa      	str	r2, [r7, #12]
 8003ad0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ad4:	f7fd f832 	bl	8000b3c <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003af0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003afa:	e002      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003afc:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x184>)
 8003afe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3740      	adds	r7, #64	@ 0x40
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0e:	bf00      	nop
 8003b10:	40023800 	.word	0x40023800
 8003b14:	00f42400 	.word	0x00f42400
 8003b18:	017d7840 	.word	0x017d7840

08003b1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e09d      	b.n	8003c6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d108      	bne.n	8003b48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b3e:	d009      	beq.n	8003b54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
 8003b46:	e005      	b.n	8003b54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d106      	bne.n	8003b74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fd36 	bl	80025e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b94:	d902      	bls.n	8003b9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	e002      	b.n	8003ba2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003baa:	d007      	beq.n	8003bbc <HAL_SPI_Init+0xa0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bb4:	d002      	beq.n	8003bbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bea:	431a      	orrs	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfe:	ea42 0103 	orr.w	r1, r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c06:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	f003 0204 	and.w	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c38:	ea42 0103 	orr.w	r1, r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b088      	sub	sp, #32
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_SPI_Transmit+0x22>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e15f      	b.n	8003f54 <HAL_SPI_Transmit+0x2e2>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c9c:	f7fe fe90 	bl	80029c0 <HAL_GetTick>
 8003ca0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb6:	e148      	b.n	8003f4a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0x52>
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d102      	bne.n	8003cca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc8:	e13f      	b.n	8003f4a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	88fa      	ldrh	r2, [r7, #6]
 8003ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	88fa      	ldrh	r2, [r7, #6]
 8003ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d14:	d10f      	bne.n	8003d36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b40      	cmp	r3, #64	@ 0x40
 8003d42:	d007      	beq.n	8003d54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d5c:	d94f      	bls.n	8003dfe <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0xfa>
 8003d66:	8afb      	ldrh	r3, [r7, #22]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d142      	bne.n	8003df2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	1c9a      	adds	r2, r3, #2
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d90:	e02f      	b.n	8003df2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d112      	bne.n	8003dc6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dc4:	e015      	b.n	8003df2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc6:	f7fe fdfb 	bl	80029c0 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d803      	bhi.n	8003dde <HAL_SPI_Transmit+0x16c>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_Transmit+0x172>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d106      	bne.n	8003df2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003df0:	e0ab      	b.n	8003f4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ca      	bne.n	8003d92 <HAL_SPI_Transmit+0x120>
 8003dfc:	e080      	b.n	8003f00 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0x19a>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d174      	bne.n	8003ef6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d912      	bls.n	8003e3c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1a:	881a      	ldrh	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	1c9a      	adds	r2, r3, #2
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b02      	subs	r3, #2
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3a:	e05c      	b.n	8003ef6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e62:	e048      	b.n	8003ef6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d12b      	bne.n	8003eca <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d912      	bls.n	8003ea2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e80:	881a      	ldrh	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	1c9a      	adds	r2, r3, #2
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b02      	subs	r3, #2
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ea0:	e029      	b.n	8003ef6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	330c      	adds	r3, #12
 8003eac:	7812      	ldrb	r2, [r2, #0]
 8003eae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ec8:	e015      	b.n	8003ef6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eca:	f7fe fd79 	bl	80029c0 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d803      	bhi.n	8003ee2 <HAL_SPI_Transmit+0x270>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Transmit+0x276>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003ef4:	e029      	b.n	8003f4a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1b1      	bne.n	8003e64 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	6839      	ldr	r1, [r7, #0]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 fb77 	bl	80045f8 <SPI_EndRxTxTransaction>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e003      	b.n	8003f4a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003f52:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3720      	adds	r7, #32
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	@ 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
 8003f68:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_SPI_TransmitReceive+0x26>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e20a      	b.n	8004398 <HAL_SPI_TransmitReceive+0x43c>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8a:	f7fe fd19 	bl	80029c0 <HAL_GetTick>
 8003f8e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f96:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa6:	7efb      	ldrb	r3, [r7, #27]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d00e      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x6e>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fb2:	d106      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x66>
 8003fbc:	7efb      	ldrb	r3, [r7, #27]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d003      	beq.n	8003fca <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003fc8:	e1e0      	b.n	800438c <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x80>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x80>
 8003fd6:	887b      	ldrh	r3, [r7, #2]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d103      	bne.n	8003fe4 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003fe2:	e1d3      	b.n	800438c <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b04      	cmp	r3, #4
 8003fee:	d003      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2205      	movs	r2, #5
 8003ff4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	887a      	ldrh	r2, [r7, #2]
 8004010:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800403a:	d802      	bhi.n	8004042 <HAL_SPI_TransmitReceive+0xe6>
 800403c:	8a3b      	ldrh	r3, [r7, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d908      	bls.n	8004054 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e007      	b.n	8004064 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004062:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b40      	cmp	r3, #64	@ 0x40
 8004070:	d007      	beq.n	8004082 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004080:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800408a:	f240 8081 	bls.w	8004190 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_SPI_TransmitReceive+0x140>
 8004096:	8a7b      	ldrh	r3, [r7, #18]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d16d      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a0:	881a      	ldrh	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ac:	1c9a      	adds	r2, r3, #2
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	e05a      	b.n	8004178 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11b      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x1ac>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x1ac>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d113      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	881a      	ldrh	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d11c      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1f4>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d016      	beq.n	8004150 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	b292      	uxth	r2, r2
 800412e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	1c9a      	adds	r2, r3, #2
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004150:	f7fe fc36 	bl	80029c0 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800415c:	429a      	cmp	r2, r3
 800415e:	d80b      	bhi.n	8004178 <HAL_SPI_TransmitReceive+0x21c>
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004166:	d007      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004176:	e109      	b.n	800438c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d19f      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x166>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d199      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x166>
 800418e:	e0e3      	b.n	8004358 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_SPI_TransmitReceive+0x244>
 8004198:	8a7b      	ldrh	r3, [r7, #18]
 800419a:	2b01      	cmp	r3, #1
 800419c:	f040 80cf 	bne.w	800433e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d912      	bls.n	80041d0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b02      	subs	r3, #2
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041ce:	e0b6      	b.n	800433e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f6:	e0a2      	b.n	800433e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d134      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x314>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02f      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x314>
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	2b01      	cmp	r3, #1
 8004214:	d12c      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d912      	bls.n	8004246 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004224:	881a      	ldrh	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	1c9a      	adds	r2, r3, #2
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b02      	subs	r3, #2
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004244:	e012      	b.n	800426c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	330c      	adds	r3, #12
 8004250:	7812      	ldrb	r2, [r2, #0]
 8004252:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d148      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x3b4>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d042      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004290:	b29b      	uxth	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d923      	bls.n	80042de <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	b292      	uxth	r2, r2
 80042a2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	1c9a      	adds	r2, r3, #2
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b02      	subs	r3, #2
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d81f      	bhi.n	800430c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	e016      	b.n	800430c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f103 020c 	add.w	r2, r3, #12
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ea:	7812      	ldrb	r2, [r2, #0]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004300:	b29b      	uxth	r3, r3
 8004302:	3b01      	subs	r3, #1
 8004304:	b29a      	uxth	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800430c:	2301      	movs	r3, #1
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004310:	f7fe fb56 	bl	80029c0 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800431c:	429a      	cmp	r2, r3
 800431e:	d803      	bhi.n	8004328 <HAL_SPI_TransmitReceive+0x3cc>
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004326:	d102      	bne.n	800432e <HAL_SPI_TransmitReceive+0x3d2>
 8004328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432a:	2b00      	cmp	r3, #0
 800432c:	d107      	bne.n	800433e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800433c:	e026      	b.n	800438c <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	f47f af57 	bne.w	80041f8 <HAL_SPI_TransmitReceive+0x29c>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	f47f af50 	bne.w	80041f8 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f94b 	bl	80045f8 <SPI_EndRxTxTransaction>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004382:	e003      	b.n	800438c <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8004394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004398:	4618      	mov	r0, r3
 800439a:	3728      	adds	r7, #40	@ 0x28
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043ae:	b2db      	uxtb	r3, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043cc:	f7fe faf8 	bl	80029c0 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4413      	add	r3, r2
 80043da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043dc:	f7fe faf0 	bl	80029c0 <HAL_GetTick>
 80043e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043e2:	4b39      	ldr	r3, [pc, #228]	@ (80044c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	015b      	lsls	r3, r3, #5
 80043e8:	0d1b      	lsrs	r3, r3, #20
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	fb02 f303 	mul.w	r3, r2, r3
 80043f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043f2:	e054      	b.n	800449e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fa:	d050      	beq.n	800449e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043fc:	f7fe fae0 	bl	80029c0 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	69fa      	ldr	r2, [r7, #28]
 8004408:	429a      	cmp	r2, r3
 800440a:	d902      	bls.n	8004412 <SPI_WaitFlagStateUntilTimeout+0x56>
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d13d      	bne.n	800448e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004420:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800442a:	d111      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0x94>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004434:	d004      	beq.n	8004440 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d107      	bne.n	8004450 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800444e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004458:	d10f      	bne.n	800447a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004478:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e017      	b.n	80044be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	3b01      	subs	r3, #1
 800449c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4013      	ands	r3, r2
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	bf0c      	ite	eq
 80044ae:	2301      	moveq	r3, #1
 80044b0:	2300      	movne	r3, #0
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	461a      	mov	r2, r3
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d19b      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000040 	.word	0x20000040

080044cc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80044de:	f7fe fa6f 	bl	80029c0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	1a9b      	subs	r3, r3, r2
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	4413      	add	r3, r2
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80044ee:	f7fe fa67 	bl	80029c0 <HAL_GetTick>
 80044f2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80044fc:	4b3d      	ldr	r3, [pc, #244]	@ (80045f4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	00da      	lsls	r2, r3, #3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	0d1b      	lsrs	r3, r3, #20
 800450c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004514:	e060      	b.n	80045d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800451c:	d107      	bne.n	800452e <SPI_WaitFifoStateUntilTimeout+0x62>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800452c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d050      	beq.n	80045d8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004536:	f7fe fa43 	bl	80029c0 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004542:	429a      	cmp	r2, r3
 8004544:	d902      	bls.n	800454c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d13d      	bne.n	80045c8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800455a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004564:	d111      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800456e:	d004      	beq.n	800457a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004578:	d107      	bne.n	800458a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004588:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004592:	d10f      	bne.n	80045b4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e010      	b.n	80045ea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	4013      	ands	r3, r2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d196      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3728      	adds	r7, #40	@ 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000040 	.word	0x20000040

080045f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff ff5b 	bl	80044cc <SPI_WaitFifoStateUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d007      	beq.n	800462c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004620:	f043 0220 	orr.w	r2, r3, #32
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e046      	b.n	80046ba <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800462c:	4b25      	ldr	r3, [pc, #148]	@ (80046c4 <SPI_EndRxTxTransaction+0xcc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a25      	ldr	r2, [pc, #148]	@ (80046c8 <SPI_EndRxTxTransaction+0xd0>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0d5b      	lsrs	r3, r3, #21
 8004638:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800464a:	d112      	bne.n	8004672 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff feb0 	bl	80043bc <SPI_WaitFlagStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e023      	b.n	80046ba <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3b01      	subs	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004688:	2b80      	cmp	r3, #128	@ 0x80
 800468a:	d0f2      	beq.n	8004672 <SPI_EndRxTxTransaction+0x7a>
 800468c:	e000      	b.n	8004690 <SPI_EndRxTxTransaction+0x98>
        break;
 800468e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f7ff ff15 	bl	80044cc <SPI_WaitFifoStateUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e000      	b.n	80046ba <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000040 	.word	0x20000040
 80046c8:	165e9f81 	.word	0x165e9f81

080046cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e049      	b.n	8004772 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fe f830 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3304      	adds	r3, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4610      	mov	r0, r2
 800470c:	f000 fc4c 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e04c      	b.n	800482e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a26      	ldr	r2, [pc, #152]	@ (800483c <HAL_TIM_Base_Start+0xc0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ae:	d01d      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a22      	ldr	r2, [pc, #136]	@ (8004840 <HAL_TIM_Base_Start+0xc4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a21      	ldr	r2, [pc, #132]	@ (8004844 <HAL_TIM_Base_Start+0xc8>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004848 <HAL_TIM_Base_Start+0xcc>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <HAL_TIM_Base_Start+0xd0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004850 <HAL_TIM_Base_Start+0xd4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_TIM_Base_Start+0x70>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004854 <HAL_TIM_Base_Start+0xd8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d115      	bne.n	8004818 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	4b19      	ldr	r3, [pc, #100]	@ (8004858 <HAL_TIM_Base_Start+0xdc>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d015      	beq.n	800482a <HAL_TIM_Base_Start+0xae>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004804:	d011      	beq.n	800482a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	e008      	b.n	800482a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	e000      	b.n	800482c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000
 8004840:	40000400 	.word	0x40000400
 8004844:	40000800 	.word	0x40000800
 8004848:	40000c00 	.word	0x40000c00
 800484c:	40010400 	.word	0x40010400
 8004850:	40014000 	.word	0x40014000
 8004854:	40001800 	.word	0x40001800
 8004858:	00010007 	.word	0x00010007

0800485c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e054      	b.n	800491e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a26      	ldr	r2, [pc, #152]	@ (800492c <HAL_TIM_Base_Start_IT+0xd0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d022      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489e:	d01d      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a22      	ldr	r2, [pc, #136]	@ (8004930 <HAL_TIM_Base_Start_IT+0xd4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d018      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a21      	ldr	r2, [pc, #132]	@ (8004934 <HAL_TIM_Base_Start_IT+0xd8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d013      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004938 <HAL_TIM_Base_Start_IT+0xdc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00e      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1e      	ldr	r2, [pc, #120]	@ (800493c <HAL_TIM_Base_Start_IT+0xe0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004940 <HAL_TIM_Base_Start_IT+0xe4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIM_Base_Start_IT+0x80>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004944 <HAL_TIM_Base_Start_IT+0xe8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d115      	bne.n	8004908 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	4b19      	ldr	r3, [pc, #100]	@ (8004948 <HAL_TIM_Base_Start_IT+0xec>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d015      	beq.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f4:	d011      	beq.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0201 	orr.w	r2, r2, #1
 8004904:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	e008      	b.n	800491a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e000      	b.n	800491c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40010000 	.word	0x40010000
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	40000c00 	.word	0x40000c00
 800493c:	40010400 	.word	0x40010400
 8004940:	40014000 	.word	0x40014000
 8004944:	40001800 	.word	0x40001800
 8004948:	00010007 	.word	0x00010007

0800494c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e08f      	b.n	8004a80 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fd fe77 	bl	8002668 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6899      	ldr	r1, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a88 <HAL_TIM_Encoder_Init+0x13c>)
 800498e:	400b      	ands	r3, r1
 8004990:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 fb03 	bl	8004fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4b31      	ldr	r3, [pc, #196]	@ (8004a8c <HAL_TIM_Encoder_Init+0x140>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	021b      	lsls	r3, r3, #8
 80049d6:	4313      	orrs	r3, r2
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a90 <HAL_TIM_Encoder_Init+0x144>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004a94 <HAL_TIM_Encoder_Init+0x148>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	4313      	orrs	r3, r2
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	011a      	lsls	r2, r3, #4
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	031b      	lsls	r3, r3, #12
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3718      	adds	r7, #24
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	fffebff8 	.word	0xfffebff8
 8004a8c:	fffffcfc 	.word	0xfffffcfc
 8004a90:	fffff3f3 	.word	0xfffff3f3
 8004a94:	ffff0f0f 	.word	0xffff0f0f

08004a98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004aa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ab0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ab8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ac0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d110      	bne.n	8004aea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d102      	bne.n	8004ad4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ace:	7b7b      	ldrb	r3, [r7, #13]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d001      	beq.n	8004ad8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e069      	b.n	8004bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae8:	e031      	b.n	8004b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d110      	bne.n	8004b12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004af0:	7bbb      	ldrb	r3, [r7, #14]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004af6:	7b3b      	ldrb	r3, [r7, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e055      	b.n	8004bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b10:	e01d      	b.n	8004b4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d108      	bne.n	8004b2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b18:	7bbb      	ldrb	r3, [r7, #14]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	7b7b      	ldrb	r3, [r7, #13]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d102      	bne.n	8004b2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b24:	7b3b      	ldrb	r3, [r7, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e03e      	b.n	8004bac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2202      	movs	r2, #2
 8004b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_TIM_Encoder_Start+0xc4>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d008      	beq.n	8004b6c <HAL_TIM_Encoder_Start+0xd4>
 8004b5a:	e00f      	b.n	8004b7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2201      	movs	r2, #1
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fb65 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 8004b6a:	e016      	b.n	8004b9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2201      	movs	r2, #1
 8004b72:	2104      	movs	r1, #4
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fb5d 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 8004b7a:	e00e      	b.n	8004b9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	2100      	movs	r1, #0
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fb55 	bl	8005234 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	2104      	movs	r1, #4
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 fb4e 	bl	8005234 <TIM_CCxChannelCmd>
      break;
 8004b98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f042 0201 	orr.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d020      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0202 	mvn.w	r2, #2
 8004be8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9b4 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9a6 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f9b7 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01b      	beq.n	8004c64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f06f 0204 	mvn.w	r2, #4
 8004c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f98e 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c50:	e005      	b.n	8004c5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f980 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f991 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d020      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01b      	beq.n	8004cb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f06f 0208 	mvn.w	r2, #8
 8004c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2204      	movs	r2, #4
 8004c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f968 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004c9c:	e005      	b.n	8004caa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f95a 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 f96b 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d020      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 0310 	and.w	r3, r3, #16
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0210 	mvn.w	r2, #16
 8004ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f942 	bl	8004f6c <HAL_TIM_IC_CaptureCallback>
 8004ce8:	e005      	b.n	8004cf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f934 	bl	8004f58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f945 	bl	8004f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d007      	beq.n	8004d20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0201 	mvn.w	r2, #1
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc fd7c 	bl	8001818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d104      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00c      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 fb31 	bl	80053b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00c      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d007      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fb29 	bl	80053c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8ff 	bl	8004f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00c      	beq.n	8004dba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d007      	beq.n	8004dba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f06f 0220 	mvn.w	r2, #32
 8004db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 faf1 	bl	800539c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0b4      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x186>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	4b56      	ldr	r3, [pc, #344]	@ (8004f54 <HAL_TIM_ConfigClockSource+0x190>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e18:	d03e      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0xd4>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1e:	f200 8087 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e26:	f000 8086 	beq.w	8004f36 <HAL_TIM_ConfigClockSource+0x172>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2e:	d87f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b70      	cmp	r3, #112	@ 0x70
 8004e32:	d01a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xa6>
 8004e34:	2b70      	cmp	r3, #112	@ 0x70
 8004e36:	d87b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b60      	cmp	r3, #96	@ 0x60
 8004e3a:	d050      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x11a>
 8004e3c:	2b60      	cmp	r3, #96	@ 0x60
 8004e3e:	d877      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b50      	cmp	r3, #80	@ 0x50
 8004e42:	d03c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xfa>
 8004e44:	2b50      	cmp	r3, #80	@ 0x50
 8004e46:	d873      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b40      	cmp	r3, #64	@ 0x40
 8004e4a:	d058      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x13a>
 8004e4c:	2b40      	cmp	r3, #64	@ 0x40
 8004e4e:	d86f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b30      	cmp	r3, #48	@ 0x30
 8004e52:	d064      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b30      	cmp	r3, #48	@ 0x30
 8004e56:	d86b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d060      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d867      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d05a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	e062      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	f000 f9bb 	bl	80051f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	609a      	str	r2, [r3, #8]
      break;
 8004e96:	e04f      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	f000 f9a4 	bl	80051f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004eba:	609a      	str	r2, [r3, #8]
      break;
 8004ebc:	e03c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 f918 	bl	8005100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2150      	movs	r1, #80	@ 0x50
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f971 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004edc:	e02c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 f937 	bl	800515e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2160      	movs	r1, #96	@ 0x60
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f961 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004efc:	e01c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 f8f8 	bl	8005100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2140      	movs	r1, #64	@ 0x40
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 f951 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 f948 	bl	80051be <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	fffeff88 	.word	0xfffeff88

08004f58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a46      	ldr	r2, [pc, #280]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc6:	d00f      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a43      	ldr	r2, [pc, #268]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d00b      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a42      	ldr	r2, [pc, #264]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d007      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a41      	ldr	r2, [pc, #260]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <TIM_Base_SetConfig+0x40>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a40      	ldr	r2, [pc, #256]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d108      	bne.n	8004ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a35      	ldr	r2, [pc, #212]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d02b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005008:	d027      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a32      	ldr	r2, [pc, #200]	@ (80050d8 <TIM_Base_SetConfig+0x130>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d023      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a31      	ldr	r2, [pc, #196]	@ (80050dc <TIM_Base_SetConfig+0x134>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d01f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a30      	ldr	r2, [pc, #192]	@ (80050e0 <TIM_Base_SetConfig+0x138>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d017      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2e      	ldr	r2, [pc, #184]	@ (80050e8 <TIM_Base_SetConfig+0x140>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a2d      	ldr	r2, [pc, #180]	@ (80050ec <TIM_Base_SetConfig+0x144>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a2c      	ldr	r2, [pc, #176]	@ (80050f0 <TIM_Base_SetConfig+0x148>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a2b      	ldr	r2, [pc, #172]	@ (80050f4 <TIM_Base_SetConfig+0x14c>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2a      	ldr	r2, [pc, #168]	@ (80050f8 <TIM_Base_SetConfig+0x150>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a29      	ldr	r2, [pc, #164]	@ (80050fc <TIM_Base_SetConfig+0x154>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a10      	ldr	r2, [pc, #64]	@ (80050d4 <TIM_Base_SetConfig+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_Base_SetConfig+0xf8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a12      	ldr	r2, [pc, #72]	@ (80050e4 <TIM_Base_SetConfig+0x13c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d103      	bne.n	80050a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f023 0201 	bic.w	r2, r3, #1
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	611a      	str	r2, [r3, #16]
  }
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40010400 	.word	0x40010400
 80050e8:	40014000 	.word	0x40014000
 80050ec:	40014400 	.word	0x40014400
 80050f0:	40014800 	.word	0x40014800
 80050f4:	40001800 	.word	0x40001800
 80050f8:	40001c00 	.word	0x40001c00
 80050fc:	40002000 	.word	0x40002000

08005100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0201 	bic.w	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 030a 	bic.w	r3, r3, #10
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800515e:	b480      	push	{r7}
 8005160:	b087      	sub	sp, #28
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f023 0210 	bic.w	r2, r3, #16
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800519a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	621a      	str	r2, [r3, #32]
}
 80051b2:	bf00      	nop
 80051b4:	371c      	adds	r7, #28
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f043 0307 	orr.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	609a      	str	r2, [r3, #8]
}
 80051e8:	bf00      	nop
 80051ea:	3714      	adds	r7, #20
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	021a      	lsls	r2, r3, #8
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	431a      	orrs	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	4313      	orrs	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2201      	movs	r2, #1
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1a      	ldr	r2, [r3, #32]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	43db      	mvns	r3, r3
 8005256:	401a      	ands	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f003 031f 	and.w	r3, r3, #31
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	431a      	orrs	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005290:	2b01      	cmp	r3, #1
 8005292:	d101      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005294:	2302      	movs	r3, #2
 8005296:	e06d      	b.n	8005374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d108      	bne.n	80052de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a20      	ldr	r2, [pc, #128]	@ (8005380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d022      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530a:	d01d      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1d      	ldr	r2, [pc, #116]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d018      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a1a      	ldr	r2, [pc, #104]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00e      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d009      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d004      	beq.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10c      	bne.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800534e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80053dc:	4904      	ldr	r1, [pc, #16]	@ (80053f0 <MX_FATFS_Init+0x18>)
 80053de:	4805      	ldr	r0, [pc, #20]	@ (80053f4 <MX_FATFS_Init+0x1c>)
 80053e0:	f002 faf6 	bl	80079d0 <FATFS_LinkDriver>
 80053e4:	4603      	mov	r3, r0
 80053e6:	461a      	mov	r2, r3
 80053e8:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <MX_FATFS_Init+0x20>)
 80053ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80053ec:	bf00      	nop
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20002b48 	.word	0x20002b48
 80053f4:	2000004c 	.word	0x2000004c
 80053f8:	20002b44 	.word	0x20002b44

080053fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005400:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb fedf 	bl	80011dc <SD_disk_initialize>
 800541e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	4618      	mov	r0, r3
 8005436:	f7fb ffbb 	bl	80013b0 <SD_disk_status>
 800543a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
 8005450:	4603      	mov	r3, r0
 8005452:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 8005454:	7bf8      	ldrb	r0, [r7, #15]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	68b9      	ldr	r1, [r7, #8]
 800545c:	f7fb ffbe 	bl	80013dc <SD_disk_read>
 8005460:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800547a:	7bf8      	ldrb	r0, [r7, #15]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	f7fc f815 	bl	80014b0 <SD_disk_write>
 8005486:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	603a      	str	r2, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
 800549c:	460b      	mov	r3, r1
 800549e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 80054a0:	79b9      	ldrb	r1, [r7, #6]
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fc f886 	bl	80015b8 <SD_disk_ioctl>
 80054ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
	...

080054b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <disk_status+0x30>)
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	79fa      	ldrb	r2, [r7, #7]
 80054d0:	4905      	ldr	r1, [pc, #20]	@ (80054e8 <disk_status+0x30>)
 80054d2:	440a      	add	r2, r1
 80054d4:	7a12      	ldrb	r2, [r2, #8]
 80054d6:	4610      	mov	r0, r2
 80054d8:	4798      	blx	r3
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	20002b74 	.word	0x20002b74

080054ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005534 <disk_initialize+0x48>)
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d111      	bne.n	8005528 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	4a0b      	ldr	r2, [pc, #44]	@ (8005534 <disk_initialize+0x48>)
 8005508:	2101      	movs	r1, #1
 800550a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	4a09      	ldr	r2, [pc, #36]	@ (8005534 <disk_initialize+0x48>)
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	79fa      	ldrb	r2, [r7, #7]
 800551a:	4906      	ldr	r1, [pc, #24]	@ (8005534 <disk_initialize+0x48>)
 800551c:	440a      	add	r2, r1
 800551e:	7a12      	ldrb	r2, [r2, #8]
 8005520:	4610      	mov	r0, r2
 8005522:	4798      	blx	r3
 8005524:	4603      	mov	r3, r0
 8005526:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20002b74 	.word	0x20002b74

08005538 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005538:	b590      	push	{r4, r7, lr}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	4a0a      	ldr	r2, [pc, #40]	@ (8005574 <disk_read+0x3c>)
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	689c      	ldr	r4, [r3, #8]
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	4a07      	ldr	r2, [pc, #28]	@ (8005574 <disk_read+0x3c>)
 8005558:	4413      	add	r3, r2
 800555a:	7a18      	ldrb	r0, [r3, #8]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	47a0      	blx	r4
 8005564:	4603      	mov	r3, r0
 8005566:	75fb      	strb	r3, [r7, #23]
  return res;
 8005568:	7dfb      	ldrb	r3, [r7, #23]
}
 800556a:	4618      	mov	r0, r3
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	bf00      	nop
 8005574:	20002b74 	.word	0x20002b74

08005578 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005578:	b590      	push	{r4, r7, lr}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4603      	mov	r3, r0
 8005586:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005588:	7bfb      	ldrb	r3, [r7, #15]
 800558a:	4a0a      	ldr	r2, [pc, #40]	@ (80055b4 <disk_write+0x3c>)
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	68dc      	ldr	r4, [r3, #12]
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	4a07      	ldr	r2, [pc, #28]	@ (80055b4 <disk_write+0x3c>)
 8005598:	4413      	add	r3, r2
 800559a:	7a18      	ldrb	r0, [r3, #8]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	47a0      	blx	r4
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd90      	pop	{r4, r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20002b74 	.word	0x20002b74

080055b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	603a      	str	r2, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
 80055c4:	460b      	mov	r3, r1
 80055c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	4a09      	ldr	r2, [pc, #36]	@ (80055f0 <disk_ioctl+0x38>)
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	79fa      	ldrb	r2, [r7, #7]
 80055d6:	4906      	ldr	r1, [pc, #24]	@ (80055f0 <disk_ioctl+0x38>)
 80055d8:	440a      	add	r2, r1
 80055da:	7a10      	ldrb	r0, [r2, #8]
 80055dc:	79b9      	ldrb	r1, [r7, #6]
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	4798      	blx	r3
 80055e2:	4603      	mov	r3, r0
 80055e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	20002b74 	.word	0x20002b74

080055f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3301      	adds	r3, #1
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	b21a      	sxth	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b21b      	sxth	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	b21b      	sxth	r3, r3
 8005616:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005618:	89fb      	ldrh	r3, [r7, #14]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3714      	adds	r7, #20
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr

08005626 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3303      	adds	r3, #3
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	3202      	adds	r2, #2
 800563e:	7812      	ldrb	r2, [r2, #0]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	3201      	adds	r2, #1
 800564c:	7812      	ldrb	r2, [r2, #0]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	7812      	ldrb	r2, [r2, #0]
 800565a:	4313      	orrs	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
	return rv;
 800565e:	68fb      	ldr	r3, [r7, #12]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	607a      	str	r2, [r7, #4]
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	887b      	ldrh	r3, [r7, #2]
 8005686:	0a1b      	lsrs	r3, r3, #8
 8005688:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	887a      	ldrh	r2, [r7, #2]
 8005692:	b2d2      	uxtb	r2, r2
 8005694:	701a      	strb	r2, [r3, #0]
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	0a1b      	lsrs	r3, r3, #8
 80056ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	607a      	str	r2, [r7, #4]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	1c5a      	adds	r2, r3, #1
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	683a      	ldr	r2, [r7, #0]
 80056ea:	b2d2      	uxtb	r2, r2
 80056ec:	701a      	strb	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80056fa:	b480      	push	{r7}
 80056fc:	b087      	sub	sp, #28
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	60b9      	str	r1, [r7, #8]
 8005704:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	1c53      	adds	r3, r2, #1
 8005718:	613b      	str	r3, [r7, #16]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	6179      	str	r1, [r7, #20]
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3b01      	subs	r3, #1
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1f1      	bne.n	8005714 <mem_cpy+0x1a>
	}
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	617a      	str	r2, [r7, #20]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3b01      	subs	r3, #1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f3      	bne.n	800574c <mem_set+0x10>
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005772:	b480      	push	{r7}
 8005774:	b089      	sub	sp, #36	@ 0x24
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	61fa      	str	r2, [r7, #28]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	4619      	mov	r1, r3
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	61ba      	str	r2, [r7, #24]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	1acb      	subs	r3, r1, r3
 800579e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3b01      	subs	r3, #1
 80057a4:	607b      	str	r3, [r7, #4]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <mem_cmp+0x40>
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d0eb      	beq.n	800578a <mem_cmp+0x18>

	return r;
 80057b2:	697b      	ldr	r3, [r7, #20]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3724      	adds	r7, #36	@ 0x24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80057ca:	e002      	b.n	80057d2 <chk_chr+0x12>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3301      	adds	r3, #1
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <chk_chr+0x26>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d1f2      	bne.n	80057cc <chk_chr+0xc>
	return *str;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	781b      	ldrb	r3, [r3, #0]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
	...

080057f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	e029      	b.n	8005860 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800580c:	4a27      	ldr	r2, [pc, #156]	@ (80058ac <chk_lock+0xb4>)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	4413      	add	r3, r2
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01d      	beq.n	8005856 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800581a:	4a24      	ldr	r2, [pc, #144]	@ (80058ac <chk_lock+0xb4>)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	4413      	add	r3, r2
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d116      	bne.n	800585a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800582c:	4a1f      	ldr	r2, [pc, #124]	@ (80058ac <chk_lock+0xb4>)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	4413      	add	r3, r2
 8005834:	3304      	adds	r3, #4
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800583c:	429a      	cmp	r2, r3
 800583e:	d10c      	bne.n	800585a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005840:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <chk_lock+0xb4>)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	4413      	add	r3, r2
 8005848:	3308      	adds	r3, #8
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005850:	429a      	cmp	r2, r3
 8005852:	d102      	bne.n	800585a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005854:	e007      	b.n	8005866 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3301      	adds	r3, #1
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d9d2      	bls.n	800580c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d109      	bne.n	8005880 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d102      	bne.n	8005878 <chk_lock+0x80>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d101      	bne.n	800587c <chk_lock+0x84>
 8005878:	2300      	movs	r3, #0
 800587a:	e010      	b.n	800589e <chk_lock+0xa6>
 800587c:	2312      	movs	r3, #18
 800587e:	e00e      	b.n	800589e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d108      	bne.n	8005898 <chk_lock+0xa0>
 8005886:	4a09      	ldr	r2, [pc, #36]	@ (80058ac <chk_lock+0xb4>)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	4413      	add	r3, r2
 800588e:	330c      	adds	r3, #12
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005896:	d101      	bne.n	800589c <chk_lock+0xa4>
 8005898:	2310      	movs	r3, #16
 800589a:	e000      	b.n	800589e <chk_lock+0xa6>
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20002b54 	.word	0x20002b54

080058b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058b6:	2300      	movs	r3, #0
 80058b8:	607b      	str	r3, [r7, #4]
 80058ba:	e002      	b.n	80058c2 <enq_lock+0x12>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3301      	adds	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d806      	bhi.n	80058d6 <enq_lock+0x26>
 80058c8:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <enq_lock+0x40>)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	4413      	add	r3, r2
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f2      	bne.n	80058bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20002b54 	.word	0x20002b54

080058f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e01f      	b.n	8005944 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005904:	4a41      	ldr	r2, [pc, #260]	@ (8005a0c <inc_lock+0x118>)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	4413      	add	r3, r2
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d113      	bne.n	800593e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005916:	4a3d      	ldr	r2, [pc, #244]	@ (8005a0c <inc_lock+0x118>)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	4413      	add	r3, r2
 800591e:	3304      	adds	r3, #4
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005926:	429a      	cmp	r2, r3
 8005928:	d109      	bne.n	800593e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800592a:	4a38      	ldr	r2, [pc, #224]	@ (8005a0c <inc_lock+0x118>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	4413      	add	r3, r2
 8005932:	3308      	adds	r3, #8
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800593a:	429a      	cmp	r2, r3
 800593c:	d006      	beq.n	800594c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3301      	adds	r3, #1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d9dc      	bls.n	8005904 <inc_lock+0x10>
 800594a:	e000      	b.n	800594e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800594c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d132      	bne.n	80059ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e002      	b.n	8005960 <inc_lock+0x6c>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3301      	adds	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d806      	bhi.n	8005974 <inc_lock+0x80>
 8005966:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <inc_lock+0x118>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	011b      	lsls	r3, r3, #4
 800596c:	4413      	add	r3, r2
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f2      	bne.n	800595a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d101      	bne.n	800597e <inc_lock+0x8a>
 800597a:	2300      	movs	r3, #0
 800597c:	e040      	b.n	8005a00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4922      	ldr	r1, [pc, #136]	@ (8005a0c <inc_lock+0x118>)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	440b      	add	r3, r1
 800598a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	491e      	ldr	r1, [pc, #120]	@ (8005a0c <inc_lock+0x118>)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	440b      	add	r3, r1
 8005998:	3304      	adds	r3, #4
 800599a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	695a      	ldr	r2, [r3, #20]
 80059a0:	491a      	ldr	r1, [pc, #104]	@ (8005a0c <inc_lock+0x118>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	440b      	add	r3, r1
 80059a8:	3308      	adds	r3, #8
 80059aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80059ac:	4a17      	ldr	r2, [pc, #92]	@ (8005a0c <inc_lock+0x118>)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	4413      	add	r3, r2
 80059b4:	330c      	adds	r3, #12
 80059b6:	2200      	movs	r2, #0
 80059b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <inc_lock+0xe0>
 80059c0:	4a12      	ldr	r2, [pc, #72]	@ (8005a0c <inc_lock+0x118>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	011b      	lsls	r3, r3, #4
 80059c6:	4413      	add	r3, r2
 80059c8:	330c      	adds	r3, #12
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <inc_lock+0xe0>
 80059d0:	2300      	movs	r3, #0
 80059d2:	e015      	b.n	8005a00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d108      	bne.n	80059ec <inc_lock+0xf8>
 80059da:	4a0c      	ldr	r2, [pc, #48]	@ (8005a0c <inc_lock+0x118>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	4413      	add	r3, r2
 80059e2:	330c      	adds	r3, #12
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	e001      	b.n	80059f0 <inc_lock+0xfc>
 80059ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059f0:	4906      	ldr	r1, [pc, #24]	@ (8005a0c <inc_lock+0x118>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	440b      	add	r3, r1
 80059f8:	330c      	adds	r3, #12
 80059fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3301      	adds	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	20002b54 	.word	0x20002b54

08005a10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	607b      	str	r3, [r7, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d825      	bhi.n	8005a70 <dec_lock+0x60>
		n = Files[i].ctr;
 8005a24:	4a17      	ldr	r2, [pc, #92]	@ (8005a84 <dec_lock+0x74>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4413      	add	r3, r2
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a32:	89fb      	ldrh	r3, [r7, #14]
 8005a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a38:	d101      	bne.n	8005a3e <dec_lock+0x2e>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005a3e:	89fb      	ldrh	r3, [r7, #14]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <dec_lock+0x3a>
 8005a44:	89fb      	ldrh	r3, [r7, #14]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005a84 <dec_lock+0x74>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	011b      	lsls	r3, r3, #4
 8005a50:	4413      	add	r3, r2
 8005a52:	330c      	adds	r3, #12
 8005a54:	89fa      	ldrh	r2, [r7, #14]
 8005a56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a58:	89fb      	ldrh	r3, [r7, #14]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <dec_lock+0x5a>
 8005a5e:	4a09      	ldr	r2, [pc, #36]	@ (8005a84 <dec_lock+0x74>)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	4413      	add	r3, r2
 8005a66:	2200      	movs	r2, #0
 8005a68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	737b      	strb	r3, [r7, #13]
 8005a6e:	e001      	b.n	8005a74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a70:	2302      	movs	r3, #2
 8005a72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a74:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20002b54 	.word	0x20002b54

08005a88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	e010      	b.n	8005ab8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a96:	4a0d      	ldr	r2, [pc, #52]	@ (8005acc <clear_lock+0x44>)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	4413      	add	r3, r2
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d105      	bne.n	8005ab2 <clear_lock+0x2a>
 8005aa6:	4a09      	ldr	r2, [pc, #36]	@ (8005acc <clear_lock+0x44>)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	4413      	add	r3, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d9eb      	bls.n	8005a96 <clear_lock+0xe>
	}
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20002b54 	.word	0x20002b54

08005ad0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b086      	sub	sp, #24
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	78db      	ldrb	r3, [r3, #3]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d034      	beq.n	8005b4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	7858      	ldrb	r0, [r3, #1]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005af4:	2301      	movs	r3, #1
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f7ff fd3e 	bl	8005578 <disk_write>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	73fb      	strb	r3, [r7, #15]
 8005b06:	e022      	b.n	8005b4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d217      	bcs.n	8005b4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	789b      	ldrb	r3, [r3, #2]
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	e010      	b.n	8005b48 <sync_window+0x78>
					wsect += fs->fsize;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	7858      	ldrb	r0, [r3, #1]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	f7ff fd1b 	bl	8005578 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d8eb      	bhi.n	8005b26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d01b      	beq.n	8005ba8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ffad 	bl	8005ad0 <sync_window>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d113      	bne.n	8005ba8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	7858      	ldrb	r0, [r3, #1]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	f7ff fcd3 	bl	8005538 <disk_read>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff87 	bl	8005ad0 <sync_window>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d159      	bne.n	8005c80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d149      	bne.n	8005c68 <sync_fs+0xb4>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d145      	bne.n	8005c68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	899b      	ldrh	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	2100      	movs	r1, #0
 8005bea:	f7ff fda7 	bl	800573c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3334      	adds	r3, #52	@ 0x34
 8005bf2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005bf6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff fd36 	bl	800566c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3334      	adds	r3, #52	@ 0x34
 8005c04:	4921      	ldr	r1, [pc, #132]	@ (8005c8c <sync_fs+0xd8>)
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fd4b 	bl	80056a2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3334      	adds	r3, #52	@ 0x34
 8005c10:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005c14:	491e      	ldr	r1, [pc, #120]	@ (8005c90 <sync_fs+0xdc>)
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fd43 	bl	80056a2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3334      	adds	r3, #52	@ 0x34
 8005c20:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f7ff fd39 	bl	80056a2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3334      	adds	r3, #52	@ 0x34
 8005c34:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff fd2f 	bl	80056a2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	7858      	ldrb	r0, [r3, #1]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f7ff fc8b 	bl	8005578 <disk_write>
			fs->fsi_flag = 0;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2100      	movs	r1, #0
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fca1 	bl	80055b8 <disk_ioctl>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <sync_fs+0xcc>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	41615252 	.word	0x41615252
 8005c90:	61417272 	.word	0x61417272

08005c94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	3b02      	subs	r3, #2
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d301      	bcc.n	8005cb4 <clust2sect+0x20>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e008      	b.n	8005cc6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	895b      	ldrh	r3, [r3, #10]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	fb03 f202 	mul.w	r2, r3, r2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	4413      	add	r3, r2
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d904      	bls.n	8005cf2 <get_fat+0x20>
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	617b      	str	r3, [r7, #20]
 8005cf6:	e0ba      	b.n	8005e6e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	f000 8082 	beq.w	8005e0c <get_fat+0x13a>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	f300 80a6 	bgt.w	8005e5a <get_fat+0x188>
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d002      	beq.n	8005d18 <get_fat+0x46>
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d055      	beq.n	8005dc2 <get_fat+0xf0>
 8005d16:	e0a0      	b.n	8005e5a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4413      	add	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	899b      	ldrh	r3, [r3, #12]
 8005d2e:	4619      	mov	r1, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d36:	4413      	add	r3, r2
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6938      	ldr	r0, [r7, #16]
 8005d3c:	f7ff ff0c 	bl	8005b58 <move_window>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f040 808c 	bne.w	8005e60 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	60fa      	str	r2, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	8992      	ldrh	r2, [r2, #12]
 8005d52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d56:	fb01 f202 	mul.w	r2, r1, r2
 8005d5a:	1a9b      	subs	r3, r3, r2
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	899b      	ldrh	r3, [r3, #12]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d76:	4413      	add	r3, r2
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6938      	ldr	r0, [r7, #16]
 8005d7c:	f7ff feec 	bl	8005b58 <move_window>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d16e      	bne.n	8005e64 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	899b      	ldrh	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d92:	fb01 f202 	mul.w	r2, r1, r2
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005da0:	021b      	lsls	r3, r3, #8
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <get_fat+0xe6>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	091b      	lsrs	r3, r3, #4
 8005db6:	e002      	b.n	8005dbe <get_fat+0xec>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dbe:	617b      	str	r3, [r7, #20]
			break;
 8005dc0:	e055      	b.n	8005e6e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	899b      	ldrh	r3, [r3, #12]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	4619      	mov	r1, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6938      	ldr	r0, [r7, #16]
 8005ddc:	f7ff febc 	bl	8005b58 <move_window>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d140      	bne.n	8005e68 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	8992      	ldrh	r2, [r2, #12]
 8005df4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005df8:	fb00 f202 	mul.w	r2, r0, r2
 8005dfc:	1a9b      	subs	r3, r3, r2
 8005dfe:	440b      	add	r3, r1
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff fbf7 	bl	80055f4 <ld_word>
 8005e06:	4603      	mov	r3, r0
 8005e08:	617b      	str	r3, [r7, #20]
			break;
 8005e0a:	e030      	b.n	8005e6e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	899b      	ldrh	r3, [r3, #12]
 8005e14:	089b      	lsrs	r3, r3, #2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e20:	4413      	add	r3, r2
 8005e22:	4619      	mov	r1, r3
 8005e24:	6938      	ldr	r0, [r7, #16]
 8005e26:	f7ff fe97 	bl	8005b58 <move_window>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d11d      	bne.n	8005e6c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	8992      	ldrh	r2, [r2, #12]
 8005e3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e42:	fb00 f202 	mul.w	r2, r0, r2
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	440b      	add	r3, r1
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fbeb 	bl	8005626 <ld_dword>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e56:	617b      	str	r3, [r7, #20]
			break;
 8005e58:	e009      	b.n	8005e6e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e006      	b.n	8005e6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e60:	bf00      	nop
 8005e62:	e004      	b.n	8005e6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e6c:	bf00      	nop
		}
	}

	return val;
 8005e6e:	697b      	ldr	r3, [r7, #20]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005e78:	b590      	push	{r4, r7, lr}
 8005e7a:	b089      	sub	sp, #36	@ 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005e84:	2302      	movs	r3, #2
 8005e86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	f240 8109 	bls.w	80060a2 <put_fat+0x22a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	f080 8103 	bcs.w	80060a2 <put_fat+0x22a>
		switch (fs->fs_type) {
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b03      	cmp	r3, #3
 8005ea2:	f000 80b6 	beq.w	8006012 <put_fat+0x19a>
 8005ea6:	2b03      	cmp	r3, #3
 8005ea8:	f300 80fb 	bgt.w	80060a2 <put_fat+0x22a>
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d003      	beq.n	8005eb8 <put_fat+0x40>
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	f000 8083 	beq.w	8005fbc <put_fat+0x144>
 8005eb6:	e0f4      	b.n	80060a2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	61bb      	str	r3, [r7, #24]
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	899b      	ldrh	r3, [r3, #12]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fe3c 	bl	8005b58 <move_window>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ee4:	7ffb      	ldrb	r3, [r7, #31]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 80d4 	bne.w	8006094 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	1c5a      	adds	r2, r3, #1
 8005ef6:	61ba      	str	r2, [r7, #24]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	8992      	ldrh	r2, [r2, #12]
 8005efc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f00:	fb00 f202 	mul.w	r2, r0, r2
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	440b      	add	r3, r1
 8005f08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00d      	beq.n	8005f30 <put_fat+0xb8>
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b25b      	sxtb	r3, r3
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	b25a      	sxtb	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	b25b      	sxtb	r3, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b25b      	sxtb	r3, r3
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	e001      	b.n	8005f34 <put_fat+0xbc>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	899b      	ldrh	r3, [r3, #12]
 8005f46:	4619      	mov	r1, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f4e:	4413      	add	r3, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fe00 	bl	8005b58 <move_window>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f5c:	7ffb      	ldrb	r3, [r7, #31]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 809a 	bne.w	8006098 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	899b      	ldrh	r3, [r3, #12]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f76:	fb00 f202 	mul.w	r2, r0, r2
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <put_fat+0x11a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	091b      	lsrs	r3, r3, #4
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	e00e      	b.n	8005fb0 <put_fat+0x138>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b25b      	sxtb	r3, r3
 8005f98:	f023 030f 	bic.w	r3, r3, #15
 8005f9c:	b25a      	sxtb	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	b25b      	sxtb	r3, r3
 8005fa4:	f003 030f 	and.w	r3, r3, #15
 8005fa8:	b25b      	sxtb	r3, r3
 8005faa:	4313      	orrs	r3, r2
 8005fac:	b25b      	sxtb	r3, r3
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	70da      	strb	r2, [r3, #3]
			break;
 8005fba:	e072      	b.n	80060a2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	899b      	ldrh	r3, [r3, #12]
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fdbf 	bl	8005b58 <move_window>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005fde:	7ffb      	ldrb	r3, [r7, #31]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d15b      	bne.n	800609c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	8992      	ldrh	r2, [r2, #12]
 8005ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ff6:	fb00 f202 	mul.w	r2, r0, r2
 8005ffa:	1a9b      	subs	r3, r3, r2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	b292      	uxth	r2, r2
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fb31 	bl	800566c <st_word>
			fs->wflag = 1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	70da      	strb	r2, [r3, #3]
			break;
 8006010:	e047      	b.n	80060a2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	899b      	ldrh	r3, [r3, #12]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	b29b      	uxth	r3, r3
 800601e:	4619      	mov	r1, r3
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	fbb3 f3f1 	udiv	r3, r3, r1
 8006026:	4413      	add	r3, r2
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7ff fd94 	bl	8005b58 <move_window>
 8006030:	4603      	mov	r3, r0
 8006032:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006034:	7ffb      	ldrb	r3, [r7, #31]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d132      	bne.n	80060a0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	8992      	ldrh	r2, [r2, #12]
 800604e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006052:	fb00 f202 	mul.w	r2, r0, r2
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	440b      	add	r3, r1
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fae3 	bl	8005626 <ld_dword>
 8006060:	4603      	mov	r3, r0
 8006062:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006066:	4323      	orrs	r3, r4
 8006068:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	8992      	ldrh	r2, [r2, #12]
 8006078:	fbb3 f0f2 	udiv	r0, r3, r2
 800607c:	fb00 f202 	mul.w	r2, r0, r2
 8006080:	1a9b      	subs	r3, r3, r2
 8006082:	440b      	add	r3, r1
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fb0b 	bl	80056a2 <st_dword>
			fs->wflag = 1;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2201      	movs	r2, #1
 8006090:	70da      	strb	r2, [r3, #3]
			break;
 8006092:	e006      	b.n	80060a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006094:	bf00      	nop
 8006096:	e004      	b.n	80060a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006098:	bf00      	nop
 800609a:	e002      	b.n	80060a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800609c:	bf00      	nop
 800609e:	e000      	b.n	80060a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80060a0:	bf00      	nop
		}
	}
	return res;
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3724      	adds	r7, #36	@ 0x24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd90      	pop	{r4, r7, pc}

080060ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d904      	bls.n	80060d2 <remove_chain+0x26>
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	68ba      	ldr	r2, [r7, #8]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d301      	bcc.n	80060d6 <remove_chain+0x2a>
 80060d2:	2302      	movs	r3, #2
 80060d4:	e04b      	b.n	800616e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00c      	beq.n	80060f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	69b8      	ldr	r0, [r7, #24]
 80060e4:	f7ff fec8 	bl	8005e78 <put_fat>
 80060e8:	4603      	mov	r3, r0
 80060ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80060ec:	7ffb      	ldrb	r3, [r7, #31]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <remove_chain+0x4a>
 80060f2:	7ffb      	ldrb	r3, [r7, #31]
 80060f4:	e03b      	b.n	800616e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff fdea 	bl	8005cd2 <get_fat>
 80060fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d031      	beq.n	800616a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <remove_chain+0x64>
 800610c:	2302      	movs	r3, #2
 800610e:	e02e      	b.n	800616e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d101      	bne.n	800611c <remove_chain+0x70>
 8006118:	2301      	movs	r3, #1
 800611a:	e028      	b.n	800616e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800611c:	2200      	movs	r2, #0
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f7ff fea9 	bl	8005e78 <put_fat>
 8006126:	4603      	mov	r3, r0
 8006128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800612a:	7ffb      	ldrb	r3, [r7, #31]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <remove_chain+0x88>
 8006130:	7ffb      	ldrb	r3, [r7, #31]
 8006132:	e01c      	b.n	800616e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	695a      	ldr	r2, [r3, #20]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	3b02      	subs	r3, #2
 800613e:	429a      	cmp	r2, r3
 8006140:	d20b      	bcs.n	800615a <remove_chain+0xae>
			fs->free_clst++;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	791b      	ldrb	r3, [r3, #4]
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	429a      	cmp	r2, r3
 8006166:	d3c6      	bcc.n	80060f6 <remove_chain+0x4a>
 8006168:	e000      	b.n	800616c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800616a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b088      	sub	sp, #32
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10d      	bne.n	80061a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d004      	beq.n	80061a2 <create_chain+0x2c>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d31b      	bcc.n	80061da <create_chain+0x64>
 80061a2:	2301      	movs	r3, #1
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e018      	b.n	80061da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff fd91 	bl	8005cd2 <get_fat>
 80061b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d801      	bhi.n	80061bc <create_chain+0x46>
 80061b8:	2301      	movs	r3, #1
 80061ba:	e070      	b.n	800629e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c2:	d101      	bne.n	80061c8 <create_chain+0x52>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	e06a      	b.n	800629e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d201      	bcs.n	80061d6 <create_chain+0x60>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	e063      	b.n	800629e <create_chain+0x128>
		scl = clst;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	3301      	adds	r3, #1
 80061e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d307      	bcc.n	80061fe <create_chain+0x88>
				ncl = 2;
 80061ee:	2302      	movs	r3, #2
 80061f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d901      	bls.n	80061fe <create_chain+0x88>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e04f      	b.n	800629e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80061fe:	69f9      	ldr	r1, [r7, #28]
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fd66 	bl	8005cd2 <get_fat>
 8006206:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00e      	beq.n	800622c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d003      	beq.n	800621c <create_chain+0xa6>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621a:	d101      	bne.n	8006220 <create_chain+0xaa>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	e03e      	b.n	800629e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	429a      	cmp	r2, r3
 8006226:	d1da      	bne.n	80061de <create_chain+0x68>
 8006228:	2300      	movs	r3, #0
 800622a:	e038      	b.n	800629e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800622c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800622e:	f04f 32ff 	mov.w	r2, #4294967295
 8006232:	69f9      	ldr	r1, [r7, #28]
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7ff fe1f 	bl	8005e78 <put_fat>
 800623a:	4603      	mov	r3, r0
 800623c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <create_chain+0xe2>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d006      	beq.n	8006258 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6938      	ldr	r0, [r7, #16]
 8006250:	f7ff fe12 	bl	8005e78 <put_fat>
 8006254:	4603      	mov	r3, r0
 8006256:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d116      	bne.n	800628c <create_chain+0x116>
		fs->last_clst = ncl;
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	3b02      	subs	r3, #2
 800626e:	429a      	cmp	r2, r3
 8006270:	d804      	bhi.n	800627c <create_chain+0x106>
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	791b      	ldrb	r3, [r3, #4]
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	b2da      	uxtb	r2, r3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	711a      	strb	r2, [r3, #4]
 800628a:	e007      	b.n	800629c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d102      	bne.n	8006298 <create_chain+0x122>
 8006292:	f04f 33ff 	mov.w	r3, #4294967295
 8006296:	e000      	b.n	800629a <create_chain+0x124>
 8006298:	2301      	movs	r3, #1
 800629a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800629c:	69fb      	ldr	r3, [r7, #28]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	3304      	adds	r3, #4
 80062bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	899b      	ldrh	r3, [r3, #12]
 80062c2:	461a      	mov	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	8952      	ldrh	r2, [r2, #10]
 80062ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1d1a      	adds	r2, r3, #4
 80062d8:	613a      	str	r2, [r7, #16]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <clmt_clust+0x42>
 80062e4:	2300      	movs	r3, #0
 80062e6:	e010      	b.n	800630a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d307      	bcc.n	8006300 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3304      	adds	r3, #4
 80062fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062fe:	e7e9      	b.n	80062d4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006300:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4413      	add	r3, r2
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800632c:	d204      	bcs.n	8006338 <dir_sdi+0x22>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <dir_sdi+0x26>
		return FR_INT_ERR;
 8006338:	2302      	movs	r3, #2
 800633a:	e071      	b.n	8006420 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	683a      	ldr	r2, [r7, #0]
 8006340:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <dir_sdi+0x46>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <dir_sdi+0x46>
		clst = fs->dirbase;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	8912      	ldrh	r2, [r2, #8]
 800636a:	4293      	cmp	r3, r2
 800636c:	d301      	bcc.n	8006372 <dir_sdi+0x5c>
 800636e:	2302      	movs	r3, #2
 8006370:	e056      	b.n	8006420 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	61da      	str	r2, [r3, #28]
 800637a:	e02d      	b.n	80063d8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	895b      	ldrh	r3, [r3, #10]
 8006380:	461a      	mov	r2, r3
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	899b      	ldrh	r3, [r3, #12]
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800638c:	e019      	b.n	80063c2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6979      	ldr	r1, [r7, #20]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fc9d 	bl	8005cd2 <get_fat>
 8006398:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d101      	bne.n	80063a6 <dir_sdi+0x90>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e03c      	b.n	8006420 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d904      	bls.n	80063b6 <dir_sdi+0xa0>
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d301      	bcc.n	80063ba <dir_sdi+0xa4>
 80063b6:	2302      	movs	r3, #2
 80063b8:	e032      	b.n	8006420 <dir_sdi+0x10a>
			ofs -= csz;
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d2e1      	bcs.n	800638e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	6938      	ldr	r0, [r7, #16]
 80063ce:	f7ff fc61 	bl	8005c94 <clust2sect>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <dir_sdi+0xd4>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e01a      	b.n	8006420 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	899b      	ldrh	r3, [r3, #12]
 80063f2:	4619      	mov	r1, r3
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063fa:	441a      	add	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	899b      	ldrh	r3, [r3, #12]
 800640a:	461a      	mov	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006412:	fb00 f202 	mul.w	r2, r0, r2
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	18ca      	adds	r2, r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	3320      	adds	r3, #32
 800643e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <dir_next+0x28>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800644e:	d301      	bcc.n	8006454 <dir_next+0x2c>
 8006450:	2304      	movs	r3, #4
 8006452:	e0bb      	b.n	80065cc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	899b      	ldrh	r3, [r3, #12]
 8006458:	461a      	mov	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006460:	fb01 f202 	mul.w	r2, r1, r2
 8006464:	1a9b      	subs	r3, r3, r2
 8006466:	2b00      	cmp	r3, #0
 8006468:	f040 809d 	bne.w	80065a6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	095b      	lsrs	r3, r3, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	8912      	ldrh	r2, [r2, #8]
 8006486:	4293      	cmp	r3, r2
 8006488:	f0c0 808d 	bcc.w	80065a6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	61da      	str	r2, [r3, #28]
 8006492:	2304      	movs	r3, #4
 8006494:	e09a      	b.n	80065cc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	899b      	ldrh	r3, [r3, #12]
 800649a:	461a      	mov	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	8952      	ldrh	r2, [r2, #10]
 80064a6:	3a01      	subs	r2, #1
 80064a8:	4013      	ands	r3, r2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d17b      	bne.n	80065a6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	4619      	mov	r1, r3
 80064b6:	4610      	mov	r0, r2
 80064b8:	f7ff fc0b 	bl	8005cd2 <get_fat>
 80064bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d801      	bhi.n	80064c8 <dir_next+0xa0>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e081      	b.n	80065cc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ce:	d101      	bne.n	80064d4 <dir_next+0xac>
 80064d0:	2301      	movs	r3, #1
 80064d2:	e07b      	b.n	80065cc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d359      	bcc.n	8006592 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d104      	bne.n	80064ee <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	61da      	str	r2, [r3, #28]
 80064ea:	2304      	movs	r3, #4
 80064ec:	e06e      	b.n	80065cc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7ff fe3d 	bl	8006176 <create_chain>
 80064fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <dir_next+0xe0>
 8006504:	2307      	movs	r3, #7
 8006506:	e061      	b.n	80065cc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <dir_next+0xea>
 800650e:	2302      	movs	r3, #2
 8006510:	e05c      	b.n	80065cc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d101      	bne.n	800651e <dir_next+0xf6>
 800651a:	2301      	movs	r3, #1
 800651c:	e056      	b.n	80065cc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7ff fad6 	bl	8005ad0 <sync_window>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <dir_next+0x106>
 800652a:	2301      	movs	r3, #1
 800652c:	e04e      	b.n	80065cc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	899b      	ldrh	r3, [r3, #12]
 8006538:	461a      	mov	r2, r3
 800653a:	2100      	movs	r1, #0
 800653c:	f7ff f8fe 	bl	800573c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fba4 	bl	8005c94 <clust2sect>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
 8006552:	e012      	b.n	800657a <dir_next+0x152>
						fs->wflag = 1;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f7ff fab8 	bl	8005ad0 <sync_window>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <dir_next+0x142>
 8006566:	2301      	movs	r3, #1
 8006568:	e030      	b.n	80065cc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	3301      	adds	r3, #1
 800656e:	613b      	str	r3, [r7, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	1c5a      	adds	r2, r3, #1
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	631a      	str	r2, [r3, #48]	@ 0x30
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	895b      	ldrh	r3, [r3, #10]
 800657e:	461a      	mov	r2, r3
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4293      	cmp	r3, r2
 8006584:	d3e6      	bcc.n	8006554 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad2      	subs	r2, r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006598:	6979      	ldr	r1, [r7, #20]
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fb7a 	bl	8005c94 <clust2sect>
 80065a0:	4602      	mov	r2, r0
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	899b      	ldrh	r3, [r3, #12]
 80065b6:	461a      	mov	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80065be:	fb00 f202 	mul.w	r2, r0, r2
 80065c2:	1a9b      	subs	r3, r3, r2
 80065c4:	18ca      	adds	r2, r1, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80065e4:	2100      	movs	r1, #0
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fe95 	bl	8006316 <dir_sdi>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d12b      	bne.n	800664e <dir_alloc+0x7a>
		n = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4619      	mov	r1, r3
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f7ff faa9 	bl	8005b58 <move_window>
 8006606:	4603      	mov	r3, r0
 8006608:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d11d      	bne.n	800664c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a1b      	ldr	r3, [r3, #32]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2be5      	cmp	r3, #229	@ 0xe5
 8006618:	d004      	beq.n	8006624 <dir_alloc+0x50>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d107      	bne.n	8006634 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3301      	adds	r3, #1
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	429a      	cmp	r2, r3
 8006630:	d102      	bne.n	8006638 <dir_alloc+0x64>
 8006632:	e00c      	b.n	800664e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fef4 	bl	8006428 <dir_next>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006644:	7dfb      	ldrb	r3, [r7, #23]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0d7      	beq.n	80065fa <dir_alloc+0x26>
 800664a:	e000      	b.n	800664e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800664c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800664e:	7dfb      	ldrb	r3, [r7, #23]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d101      	bne.n	8006658 <dir_alloc+0x84>
 8006654:	2307      	movs	r3, #7
 8006656:	75fb      	strb	r3, [r7, #23]
	return res;
 8006658:	7dfb      	ldrb	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b084      	sub	sp, #16
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
 800666a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	331a      	adds	r3, #26
 8006670:	4618      	mov	r0, r3
 8006672:	f7fe ffbf 	bl	80055f4 <ld_word>
 8006676:	4603      	mov	r3, r0
 8006678:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	2b03      	cmp	r3, #3
 8006680:	d109      	bne.n	8006696 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	3314      	adds	r3, #20
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe ffb4 	bl	80055f4 <ld_word>
 800668c:	4603      	mov	r3, r0
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006696:	68fb      	ldr	r3, [r7, #12]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	331a      	adds	r3, #26
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	b292      	uxth	r2, r2
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe ffd8 	bl	800566c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d109      	bne.n	80066d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f103 0214 	add.w	r2, r3, #20
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	0c1b      	lsrs	r3, r3, #16
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fe ffca 	bl	800566c <st_word>
	}
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80066ee:	2100      	movs	r1, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fe10 	bl	8006316 <dir_sdi>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <dir_find+0x24>
 8006700:	7dfb      	ldrb	r3, [r7, #23]
 8006702:	e03e      	b.n	8006782 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4619      	mov	r1, r3
 800670a:	6938      	ldr	r0, [r7, #16]
 800670c:	f7ff fa24 	bl	8005b58 <move_window>
 8006710:	4603      	mov	r3, r0
 8006712:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d12f      	bne.n	800677a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006722:	7bfb      	ldrb	r3, [r7, #15]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <dir_find+0x4e>
 8006728:	2304      	movs	r3, #4
 800672a:	75fb      	strb	r3, [r7, #23]
 800672c:	e028      	b.n	8006780 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	330b      	adds	r3, #11
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800673a:	b2da      	uxtb	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1b      	ldr	r3, [r3, #32]
 8006744:	330b      	adds	r3, #11
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10a      	bne.n	8006766 <dir_find+0x86>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a18      	ldr	r0, [r3, #32]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3324      	adds	r3, #36	@ 0x24
 8006758:	220b      	movs	r2, #11
 800675a:	4619      	mov	r1, r3
 800675c:	f7ff f809 	bl	8005772 <mem_cmp>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00b      	beq.n	800677e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006766:	2100      	movs	r1, #0
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f7ff fe5d 	bl	8006428 <dir_next>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006772:	7dfb      	ldrb	r3, [r7, #23]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0c5      	beq.n	8006704 <dir_find+0x24>
 8006778:	e002      	b.n	8006780 <dir_find+0xa0>
		if (res != FR_OK) break;
 800677a:	bf00      	nop
 800677c:	e000      	b.n	8006780 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800677e:	bf00      	nop

	return res;
 8006780:	7dfb      	ldrb	r3, [r7, #23]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3718      	adds	r7, #24
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006798:	2101      	movs	r1, #1
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f7ff ff1a 	bl	80065d4 <dir_alloc>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d11c      	bne.n	80067e4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	4619      	mov	r1, r3
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f7ff f9d1 	bl	8005b58 <move_window>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d111      	bne.n	80067e4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	2220      	movs	r2, #32
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fe ffb7 	bl	800573c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a18      	ldr	r0, [r3, #32]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3324      	adds	r3, #36	@ 0x24
 80067d6:	220b      	movs	r2, #11
 80067d8:	4619      	mov	r1, r3
 80067da:	f7fe ff8e 	bl	80056fa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2201      	movs	r2, #1
 80067e2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3324      	adds	r3, #36	@ 0x24
 8006804:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006806:	220b      	movs	r2, #11
 8006808:	2120      	movs	r1, #32
 800680a:	68b8      	ldr	r0, [r7, #8]
 800680c:	f7fe ff96 	bl	800573c <mem_set>
	si = i = 0; ni = 8;
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	2308      	movs	r3, #8
 800681a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	61fa      	str	r2, [r7, #28]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800682a:	7efb      	ldrb	r3, [r7, #27]
 800682c:	2b20      	cmp	r3, #32
 800682e:	d94e      	bls.n	80068ce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006830:	7efb      	ldrb	r3, [r7, #27]
 8006832:	2b2f      	cmp	r3, #47	@ 0x2f
 8006834:	d006      	beq.n	8006844 <create_name+0x54>
 8006836:	7efb      	ldrb	r3, [r7, #27]
 8006838:	2b5c      	cmp	r3, #92	@ 0x5c
 800683a:	d110      	bne.n	800685e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800683c:	e002      	b.n	8006844 <create_name+0x54>
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	3301      	adds	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	4413      	add	r3, r2
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b2f      	cmp	r3, #47	@ 0x2f
 800684e:	d0f6      	beq.n	800683e <create_name+0x4e>
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	4413      	add	r3, r2
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b5c      	cmp	r3, #92	@ 0x5c
 800685a:	d0f0      	beq.n	800683e <create_name+0x4e>
			break;
 800685c:	e038      	b.n	80068d0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800685e:	7efb      	ldrb	r3, [r7, #27]
 8006860:	2b2e      	cmp	r3, #46	@ 0x2e
 8006862:	d003      	beq.n	800686c <create_name+0x7c>
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d30c      	bcc.n	8006886 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2b0b      	cmp	r3, #11
 8006870:	d002      	beq.n	8006878 <create_name+0x88>
 8006872:	7efb      	ldrb	r3, [r7, #27]
 8006874:	2b2e      	cmp	r3, #46	@ 0x2e
 8006876:	d001      	beq.n	800687c <create_name+0x8c>
 8006878:	2306      	movs	r3, #6
 800687a:	e044      	b.n	8006906 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800687c:	2308      	movs	r3, #8
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	230b      	movs	r3, #11
 8006882:	617b      	str	r3, [r7, #20]
			continue;
 8006884:	e022      	b.n	80068cc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006886:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800688a:	2b00      	cmp	r3, #0
 800688c:	da04      	bge.n	8006898 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800688e:	7efb      	ldrb	r3, [r7, #27]
 8006890:	3b80      	subs	r3, #128	@ 0x80
 8006892:	4a1f      	ldr	r2, [pc, #124]	@ (8006910 <create_name+0x120>)
 8006894:	5cd3      	ldrb	r3, [r2, r3]
 8006896:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006898:	7efb      	ldrb	r3, [r7, #27]
 800689a:	4619      	mov	r1, r3
 800689c:	481d      	ldr	r0, [pc, #116]	@ (8006914 <create_name+0x124>)
 800689e:	f7fe ff8f 	bl	80057c0 <chk_chr>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d001      	beq.n	80068ac <create_name+0xbc>
 80068a8:	2306      	movs	r3, #6
 80068aa:	e02c      	b.n	8006906 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80068ac:	7efb      	ldrb	r3, [r7, #27]
 80068ae:	2b60      	cmp	r3, #96	@ 0x60
 80068b0:	d905      	bls.n	80068be <create_name+0xce>
 80068b2:	7efb      	ldrb	r3, [r7, #27]
 80068b4:	2b7a      	cmp	r3, #122	@ 0x7a
 80068b6:	d802      	bhi.n	80068be <create_name+0xce>
 80068b8:	7efb      	ldrb	r3, [r7, #27]
 80068ba:	3b20      	subs	r3, #32
 80068bc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	613a      	str	r2, [r7, #16]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	4413      	add	r3, r2
 80068c8:	7efa      	ldrb	r2, [r7, #27]
 80068ca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80068cc:	e7a6      	b.n	800681c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80068ce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	441a      	add	r2, r3
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <create_name+0xf4>
 80068e0:	2306      	movs	r3, #6
 80068e2:	e010      	b.n	8006906 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2be5      	cmp	r3, #229	@ 0xe5
 80068ea:	d102      	bne.n	80068f2 <create_name+0x102>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2205      	movs	r2, #5
 80068f0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80068f2:	7efb      	ldrb	r3, [r7, #27]
 80068f4:	2b20      	cmp	r3, #32
 80068f6:	d801      	bhi.n	80068fc <create_name+0x10c>
 80068f8:	2204      	movs	r2, #4
 80068fa:	e000      	b.n	80068fe <create_name+0x10e>
 80068fc:	2200      	movs	r2, #0
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	330b      	adds	r3, #11
 8006902:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006904:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006906:	4618      	mov	r0, r3
 8006908:	3720      	adds	r7, #32
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	080083c4 	.word	0x080083c4
 8006914:	08008370 	.word	0x08008370

08006918 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800692c:	e002      	b.n	8006934 <follow_path+0x1c>
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b2f      	cmp	r3, #47	@ 0x2f
 800693a:	d0f8      	beq.n	800692e <follow_path+0x16>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b5c      	cmp	r3, #92	@ 0x5c
 8006942:	d0f4      	beq.n	800692e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b1f      	cmp	r3, #31
 8006950:	d80a      	bhi.n	8006968 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2280      	movs	r2, #128	@ 0x80
 8006956:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fcda 	bl	8006316 <dir_sdi>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]
 8006966:	e048      	b.n	80069fa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006968:	463b      	mov	r3, r7
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff3f 	bl	80067f0 <create_name>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d139      	bne.n	80069f0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff feaf 	bl	80066e0 <dir_find>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800698c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b04      	cmp	r3, #4
 8006998:	d12c      	bne.n	80069f4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800699a:	7afb      	ldrb	r3, [r7, #11]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d127      	bne.n	80069f4 <follow_path+0xdc>
 80069a4:	2305      	movs	r3, #5
 80069a6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80069a8:	e024      	b.n	80069f4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069aa:	7afb      	ldrb	r3, [r7, #11]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d121      	bne.n	80069f8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	799b      	ldrb	r3, [r3, #6]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d102      	bne.n	80069c6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80069c0:	2305      	movs	r3, #5
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	e019      	b.n	80069fa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	8992      	ldrh	r2, [r2, #12]
 80069d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80069d8:	fb00 f202 	mul.w	r2, r0, r2
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	440b      	add	r3, r1
 80069e0:	4619      	mov	r1, r3
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff fe3d 	bl	8006662 <ld_clust>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80069ee:	e7bb      	b.n	8006968 <follow_path+0x50>
			if (res != FR_OK) break;
 80069f0:	bf00      	nop
 80069f2:	e002      	b.n	80069fa <follow_path+0xe2>
				break;
 80069f4:	bf00      	nop
 80069f6:	e000      	b.n	80069fa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80069f8:	bf00      	nop
			}
		}
	}

	return res;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d031      	beq.n	8006a7e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e002      	b.n	8006a28 <get_ldnumber+0x24>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3301      	adds	r3, #1
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d903      	bls.n	8006a38 <get_ldnumber+0x34>
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a36:	d1f4      	bne.n	8006a22 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006a3e:	d11c      	bne.n	8006a7a <get_ldnumber+0x76>
			tp = *path;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	60fa      	str	r2, [r7, #12]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	3b30      	subs	r3, #48	@ 0x30
 8006a50:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b09      	cmp	r3, #9
 8006a56:	d80e      	bhi.n	8006a76 <get_ldnumber+0x72>
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d10a      	bne.n	8006a76 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d107      	bne.n	8006a76 <get_ldnumber+0x72>
					vol = (int)i;
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	e002      	b.n	8006a80 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006a7e:	693b      	ldr	r3, [r7, #16]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	371c      	adds	r7, #28
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	70da      	strb	r2, [r3, #3]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff f856 	bl	8005b58 <move_window>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <check_fs+0x2a>
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	e038      	b.n	8006b28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3334      	adds	r3, #52	@ 0x34
 8006aba:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fd98 	bl	80055f4 <ld_word>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <check_fs+0x48>
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e029      	b.n	8006b28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ada:	2be9      	cmp	r3, #233	@ 0xe9
 8006adc:	d009      	beq.n	8006af2 <check_fs+0x66>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ae4:	2beb      	cmp	r3, #235	@ 0xeb
 8006ae6:	d11e      	bne.n	8006b26 <check_fs+0x9a>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006aee:	2b90      	cmp	r3, #144	@ 0x90
 8006af0:	d119      	bne.n	8006b26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3334      	adds	r3, #52	@ 0x34
 8006af6:	3336      	adds	r3, #54	@ 0x36
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe fd94 	bl	8005626 <ld_dword>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006b04:	4a0a      	ldr	r2, [pc, #40]	@ (8006b30 <check_fs+0xa4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <check_fs+0x82>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e00c      	b.n	8006b28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3334      	adds	r3, #52	@ 0x34
 8006b12:	3352      	adds	r3, #82	@ 0x52
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fd86 	bl	8005626 <ld_dword>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	4a05      	ldr	r2, [pc, #20]	@ (8006b34 <check_fs+0xa8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <check_fs+0x9a>
 8006b22:	2300      	movs	r3, #0
 8006b24:	e000      	b.n	8006b28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006b26:	2302      	movs	r3, #2
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3708      	adds	r7, #8
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	00544146 	.word	0x00544146
 8006b34:	33544146 	.word	0x33544146

08006b38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b096      	sub	sp, #88	@ 0x58
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff ff59 	bl	8006a04 <get_ldnumber>
 8006b52:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da01      	bge.n	8006b5e <find_volume+0x26>
 8006b5a:	230b      	movs	r3, #11
 8006b5c:	e262      	b.n	8007024 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006b5e:	4a9f      	ldr	r2, [pc, #636]	@ (8006ddc <find_volume+0x2a4>)
 8006b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b66:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <find_volume+0x3a>
 8006b6e:	230c      	movs	r3, #12
 8006b70:	e258      	b.n	8007024 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01a      	beq.n	8006bbe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8a:	785b      	ldrb	r3, [r3, #1]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fe fc93 	bl	80054b8 <disk_status>
 8006b92:	4603      	mov	r3, r0
 8006b94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006b98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ba4:	79fb      	ldrb	r3, [r7, #7]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <find_volume+0x82>
 8006baa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	e234      	b.n	8007024 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e232      	b.n	8007024 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	785b      	ldrb	r3, [r3, #1]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fc8b 	bl	80054ec <disk_initialize>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006be8:	2303      	movs	r3, #3
 8006bea:	e21b      	b.n	8007024 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006bec:	79fb      	ldrb	r3, [r7, #7]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <find_volume+0xca>
 8006bf2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006bfe:	230a      	movs	r3, #10
 8006c00:	e210      	b.n	8007024 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	7858      	ldrb	r0, [r3, #1]
 8006c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c08:	330c      	adds	r3, #12
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	f7fe fcd3 	bl	80055b8 <disk_ioctl>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <find_volume+0xe4>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e203      	b.n	8007024 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1e:	899b      	ldrh	r3, [r3, #12]
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c24:	d80d      	bhi.n	8006c42 <find_volume+0x10a>
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	899b      	ldrh	r3, [r3, #12]
 8006c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c2e:	d308      	bcc.n	8006c42 <find_volume+0x10a>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	899b      	ldrh	r3, [r3, #12]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	899b      	ldrh	r3, [r3, #12]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <find_volume+0x10e>
 8006c42:	2301      	movs	r3, #1
 8006c44:	e1ee      	b.n	8007024 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006c4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006c4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c4e:	f7ff ff1d 	bl	8006a8c <check_fs>
 8006c52:	4603      	mov	r3, r0
 8006c54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006c58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d149      	bne.n	8006cf4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c60:	2300      	movs	r3, #0
 8006c62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c64:	e01e      	b.n	8006ca4 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006c74:	4413      	add	r3, r2
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	3304      	adds	r3, #4
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d006      	beq.n	8006c90 <find_volume+0x158>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c84:	3308      	adds	r3, #8
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fccd 	bl	8005626 <ld_dword>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	e000      	b.n	8006c92 <find_volume+0x15a>
 8006c90:	2200      	movs	r2, #0
 8006c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	3358      	adds	r3, #88	@ 0x58
 8006c98:	443b      	add	r3, r7
 8006c9a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d9dd      	bls.n	8006c66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006caa:	2300      	movs	r3, #0
 8006cac:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006cae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <find_volume+0x182>
 8006cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	3358      	adds	r3, #88	@ 0x58
 8006cc0:	443b      	add	r3, r7
 8006cc2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006cc6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006cc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <find_volume+0x1a2>
 8006cce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006cd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006cd2:	f7ff fedb 	bl	8006a8c <check_fs>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	e000      	b.n	8006cdc <find_volume+0x1a4>
 8006cda:	2303      	movs	r3, #3
 8006cdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d905      	bls.n	8006cf4 <find_volume+0x1bc>
 8006ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cea:	3301      	adds	r3, #1
 8006cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d9e2      	bls.n	8006cba <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	d101      	bne.n	8006d00 <find_volume+0x1c8>
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e191      	b.n	8007024 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006d00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d901      	bls.n	8006d0c <find_volume+0x1d4>
 8006d08:	230d      	movs	r3, #13
 8006d0a:	e18b      	b.n	8007024 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	3334      	adds	r3, #52	@ 0x34
 8006d10:	330b      	adds	r3, #11
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe fc6e 	bl	80055f4 <ld_word>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1e:	899b      	ldrh	r3, [r3, #12]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d001      	beq.n	8006d28 <find_volume+0x1f0>
 8006d24:	230d      	movs	r3, #13
 8006d26:	e17d      	b.n	8007024 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d2a:	3334      	adds	r3, #52	@ 0x34
 8006d2c:	3316      	adds	r3, #22
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fe fc60 	bl	80055f4 <ld_word>
 8006d34:	4603      	mov	r3, r0
 8006d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006d38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <find_volume+0x214>
 8006d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d40:	3334      	adds	r3, #52	@ 0x34
 8006d42:	3324      	adds	r3, #36	@ 0x24
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe fc6e 	bl	8005626 <ld_dword>
 8006d4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d50:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d54:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d5e:	789b      	ldrb	r3, [r3, #2]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d005      	beq.n	8006d70 <find_volume+0x238>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	789b      	ldrb	r3, [r3, #2]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d001      	beq.n	8006d70 <find_volume+0x238>
 8006d6c:	230d      	movs	r3, #13
 8006d6e:	e159      	b.n	8007024 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d72:	789b      	ldrb	r3, [r3, #2]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d84:	461a      	mov	r2, r3
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	895b      	ldrh	r3, [r3, #10]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <find_volume+0x26c>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d94:	895b      	ldrh	r3, [r3, #10]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9a:	895b      	ldrh	r3, [r3, #10]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <find_volume+0x270>
 8006da4:	230d      	movs	r3, #13
 8006da6:	e13d      	b.n	8007024 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	3334      	adds	r3, #52	@ 0x34
 8006dac:	3311      	adds	r3, #17
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fc20 	bl	80055f4 <ld_word>
 8006db4:	4603      	mov	r3, r0
 8006db6:	461a      	mov	r2, r3
 8006db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dbe:	891b      	ldrh	r3, [r3, #8]
 8006dc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dc2:	8992      	ldrh	r2, [r2, #12]
 8006dc4:	0952      	lsrs	r2, r2, #5
 8006dc6:	b292      	uxth	r2, r2
 8006dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006dcc:	fb01 f202 	mul.w	r2, r1, r2
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <find_volume+0x2a8>
 8006dd8:	230d      	movs	r3, #13
 8006dda:	e123      	b.n	8007024 <find_volume+0x4ec>
 8006ddc:	20002b4c 	.word	0x20002b4c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	3334      	adds	r3, #52	@ 0x34
 8006de4:	3313      	adds	r3, #19
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fc04 	bl	80055f4 <ld_word>
 8006dec:	4603      	mov	r3, r0
 8006dee:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006df0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d106      	bne.n	8006e04 <find_volume+0x2cc>
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	3334      	adds	r3, #52	@ 0x34
 8006dfa:	3320      	adds	r3, #32
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fe fc12 	bl	8005626 <ld_dword>
 8006e02:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	3334      	adds	r3, #52	@ 0x34
 8006e08:	330e      	adds	r3, #14
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe fbf2 	bl	80055f4 <ld_word>
 8006e10:	4603      	mov	r3, r0
 8006e12:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006e14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <find_volume+0x2e6>
 8006e1a:	230d      	movs	r3, #13
 8006e1c:	e102      	b.n	8007024 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006e1e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e22:	4413      	add	r3, r2
 8006e24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e26:	8911      	ldrh	r1, [r2, #8]
 8006e28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e2a:	8992      	ldrh	r2, [r2, #12]
 8006e2c:	0952      	lsrs	r2, r2, #5
 8006e2e:	b292      	uxth	r2, r2
 8006e30:	fbb1 f2f2 	udiv	r2, r1, r2
 8006e34:	b292      	uxth	r2, r2
 8006e36:	4413      	add	r3, r2
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006e3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d201      	bcs.n	8006e46 <find_volume+0x30e>
 8006e42:	230d      	movs	r3, #13
 8006e44:	e0ee      	b.n	8007024 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006e46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e4e:	8952      	ldrh	r2, [r2, #10]
 8006e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <find_volume+0x328>
 8006e5c:	230d      	movs	r3, #13
 8006e5e:	e0e1      	b.n	8007024 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006e60:	2303      	movs	r3, #3
 8006e62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d802      	bhi.n	8006e76 <find_volume+0x33e>
 8006e70:	2302      	movs	r3, #2
 8006e72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d802      	bhi.n	8006e86 <find_volume+0x34e>
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e88:	1c9a      	adds	r2, r3, #2
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e92:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006e94:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e98:	441a      	add	r2, r3
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006e9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea2:	441a      	add	r2, r3
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006ea8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	d11e      	bne.n	8006eee <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb2:	3334      	adds	r3, #52	@ 0x34
 8006eb4:	332a      	adds	r3, #42	@ 0x2a
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fb9c 	bl	80055f4 <ld_word>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <find_volume+0x38e>
 8006ec2:	230d      	movs	r3, #13
 8006ec4:	e0ae      	b.n	8007024 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	891b      	ldrh	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d001      	beq.n	8006ed2 <find_volume+0x39a>
 8006ece:	230d      	movs	r3, #13
 8006ed0:	e0a8      	b.n	8007024 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed4:	3334      	adds	r3, #52	@ 0x34
 8006ed6:	332c      	adds	r3, #44	@ 0x2c
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fba4 	bl	8005626 <ld_dword>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eec:	e01f      	b.n	8006f2e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	891b      	ldrh	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <find_volume+0x3c2>
 8006ef6:	230d      	movs	r3, #13
 8006ef8:	e094      	b.n	8007024 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006efe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f00:	441a      	add	r2, r3
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006f06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d103      	bne.n	8006f16 <find_volume+0x3de>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	e00a      	b.n	8006f2c <find_volume+0x3f4>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	4413      	add	r3, r2
 8006f20:	085a      	lsrs	r2, r3, #1
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006f2c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	69da      	ldr	r2, [r3, #28]
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	899b      	ldrh	r3, [r3, #12]
 8006f36:	4619      	mov	r1, r3
 8006f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f40:	8989      	ldrh	r1, [r1, #12]
 8006f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d201      	bcs.n	8006f4e <find_volume+0x416>
 8006f4a:	230d      	movs	r3, #13
 8006f4c:	e06a      	b.n	8007024 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f50:	f04f 32ff 	mov.w	r2, #4294967295
 8006f54:	615a      	str	r2, [r3, #20]
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f60:	2280      	movs	r2, #128	@ 0x80
 8006f62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006f64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006f68:	2b03      	cmp	r3, #3
 8006f6a:	d149      	bne.n	8007000 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6e:	3334      	adds	r3, #52	@ 0x34
 8006f70:	3330      	adds	r3, #48	@ 0x30
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fb3e 	bl	80055f4 <ld_word>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d140      	bne.n	8007000 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f80:	3301      	adds	r3, #1
 8006f82:	4619      	mov	r1, r3
 8006f84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f86:	f7fe fde7 	bl	8005b58 <move_window>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d137      	bne.n	8007000 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f92:	2200      	movs	r2, #0
 8006f94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	3334      	adds	r3, #52	@ 0x34
 8006f9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe fb28 	bl	80055f4 <ld_word>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d127      	bne.n	8007000 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb2:	3334      	adds	r3, #52	@ 0x34
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fb36 	bl	8005626 <ld_dword>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800702c <find_volume+0x4f4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d11e      	bne.n	8007000 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	3334      	adds	r3, #52	@ 0x34
 8006fc6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fe fb2b 	bl	8005626 <ld_dword>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4a17      	ldr	r2, [pc, #92]	@ (8007030 <find_volume+0x4f8>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d113      	bne.n	8007000 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fda:	3334      	adds	r3, #52	@ 0x34
 8006fdc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fe fb20 	bl	8005626 <ld_dword>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fee:	3334      	adds	r3, #52	@ 0x34
 8006ff0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fb16 	bl	8005626 <ld_dword>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ffe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007006:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <find_volume+0x4fc>)
 800700a:	881b      	ldrh	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	b29a      	uxth	r2, r3
 8007010:	4b08      	ldr	r3, [pc, #32]	@ (8007034 <find_volume+0x4fc>)
 8007012:	801a      	strh	r2, [r3, #0]
 8007014:	4b07      	ldr	r3, [pc, #28]	@ (8007034 <find_volume+0x4fc>)
 8007016:	881a      	ldrh	r2, [r3, #0]
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800701c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800701e:	f7fe fd33 	bl	8005a88 <clear_lock>
#endif
	return FR_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3758      	adds	r7, #88	@ 0x58
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	41615252 	.word	0x41615252
 8007030:	61417272 	.word	0x61417272
 8007034:	20002b50 	.word	0x20002b50

08007038 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007042:	2309      	movs	r3, #9
 8007044:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d01c      	beq.n	8007086 <validate+0x4e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d018      	beq.n	8007086 <validate+0x4e>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d013      	beq.n	8007086 <validate+0x4e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	889a      	ldrh	r2, [r3, #4]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	88db      	ldrh	r3, [r3, #6]
 8007068:	429a      	cmp	r2, r3
 800706a:	d10c      	bne.n	8007086 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	4618      	mov	r0, r3
 8007074:	f7fe fa20 	bl	80054b8 <disk_status>
 8007078:	4603      	mov	r3, r0
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <validate+0x4e>
			res = FR_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d102      	bne.n	8007092 <validate+0x5a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	e000      	b.n	8007094 <validate+0x5c>
 8007092:	2300      	movs	r3, #0
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	6013      	str	r3, [r2, #0]
	return res;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
	...

080070a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	4613      	mov	r3, r2
 80070b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80070b6:	f107 0310 	add.w	r3, r7, #16
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fca2 	bl	8006a04 <get_ldnumber>
 80070c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	da01      	bge.n	80070cc <f_mount+0x28>
 80070c8:	230b      	movs	r3, #11
 80070ca:	e02b      	b.n	8007124 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80070cc:	4a17      	ldr	r2, [pc, #92]	@ (800712c <f_mount+0x88>)
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80070dc:	69b8      	ldr	r0, [r7, #24]
 80070de:	f7fe fcd3 	bl	8005a88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d002      	beq.n	80070f4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	490d      	ldr	r1, [pc, #52]	@ (800712c <f_mount+0x88>)
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <f_mount+0x66>
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d001      	beq.n	800710e <f_mount+0x6a>
 800710a:	2300      	movs	r3, #0
 800710c:	e00a      	b.n	8007124 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800710e:	f107 010c 	add.w	r1, r7, #12
 8007112:	f107 0308 	add.w	r3, r7, #8
 8007116:	2200      	movs	r2, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fd0d 	bl	8006b38 <find_volume>
 800711e:	4603      	mov	r3, r0
 8007120:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007122:	7dfb      	ldrb	r3, [r7, #23]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3720      	adds	r7, #32
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20002b4c 	.word	0x20002b4c

08007130 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	@ 0x60
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <f_open+0x18>
 8007144:	2309      	movs	r3, #9
 8007146:	e1b7      	b.n	80074b8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007148:	79fb      	ldrb	r3, [r7, #7]
 800714a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800714e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007150:	79fa      	ldrb	r2, [r7, #7]
 8007152:	f107 0110 	add.w	r1, r7, #16
 8007156:	f107 0308 	add.w	r3, r7, #8
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fcec 	bl	8006b38 <find_volume>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 819b 	bne.w	80074a6 <f_open+0x376>
		dj.obj.fs = fs;
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	f107 0314 	add.w	r3, r7, #20
 800717a:	4611      	mov	r1, r2
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff fbcb 	bl	8006918 <follow_path>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007188:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800718c:	2b00      	cmp	r3, #0
 800718e:	d118      	bne.n	80071c2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007190:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007194:	b25b      	sxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	da03      	bge.n	80071a2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800719a:	2306      	movs	r3, #6
 800719c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80071a0:	e00f      	b.n	80071c2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf8c      	ite	hi
 80071a8:	2301      	movhi	r3, #1
 80071aa:	2300      	movls	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	f107 0314 	add.w	r3, r7, #20
 80071b4:	4611      	mov	r1, r2
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe fb1e 	bl	80057f8 <chk_lock>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	f003 031c 	and.w	r3, r3, #28
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d07f      	beq.n	80072cc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80071cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d017      	beq.n	8007204 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80071d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d10e      	bne.n	80071fa <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80071dc:	f7fe fb68 	bl	80058b0 <enq_lock>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d006      	beq.n	80071f4 <f_open+0xc4>
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff facd 	bl	800678a <dir_register>
 80071f0:	4603      	mov	r3, r0
 80071f2:	e000      	b.n	80071f6 <f_open+0xc6>
 80071f4:	2312      	movs	r3, #18
 80071f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	f043 0308 	orr.w	r3, r3, #8
 8007200:	71fb      	strb	r3, [r7, #7]
 8007202:	e010      	b.n	8007226 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007204:	7ebb      	ldrb	r3, [r7, #26]
 8007206:	f003 0311 	and.w	r3, r3, #17
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <f_open+0xe6>
					res = FR_DENIED;
 800720e:	2307      	movs	r3, #7
 8007210:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007214:	e007      	b.n	8007226 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <f_open+0xf6>
 8007220:	2308      	movs	r3, #8
 8007222:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007226:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800722a:	2b00      	cmp	r3, #0
 800722c:	d168      	bne.n	8007300 <f_open+0x1d0>
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d063      	beq.n	8007300 <f_open+0x1d0>
				dw = GET_FATTIME();
 8007238:	f7fe f8e0 	bl	80053fc <get_fattime>
 800723c:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800723e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007240:	330e      	adds	r3, #14
 8007242:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007244:	4618      	mov	r0, r3
 8007246:	f7fe fa2c 	bl	80056a2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800724a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800724c:	3316      	adds	r3, #22
 800724e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007250:	4618      	mov	r0, r3
 8007252:	f7fe fa26 	bl	80056a2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007258:	330b      	adds	r3, #11
 800725a:	2220      	movs	r2, #32
 800725c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff f9fc 	bl	8006662 <ld_clust>
 800726a:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007270:	2200      	movs	r2, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fa14 	bl	80066a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727a:	331c      	adds	r3, #28
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f7fe fa0f 	bl	80056a2 <st_dword>
					fs->wflag = 1;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2201      	movs	r2, #1
 8007288:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800728a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d037      	beq.n	8007300 <f_open+0x1d0>
						dw = fs->winsect;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007294:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	2200      	movs	r2, #0
 800729c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe ff04 	bl	80060ac <remove_chain>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80072aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d126      	bne.n	8007300 <f_open+0x1d0>
							res = move_window(fs, dw);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fe fc4e 	bl	8005b58 <move_window>
 80072bc:	4603      	mov	r3, r0
 80072be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c6:	3a01      	subs	r2, #1
 80072c8:	611a      	str	r2, [r3, #16]
 80072ca:	e019      	b.n	8007300 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80072cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d115      	bne.n	8007300 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80072d4:	7ebb      	ldrb	r3, [r7, #26]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <f_open+0x1b6>
					res = FR_NO_FILE;
 80072de:	2304      	movs	r3, #4
 80072e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80072e4:	e00c      	b.n	8007300 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d007      	beq.n	8007300 <f_open+0x1d0>
 80072f0:	7ebb      	ldrb	r3, [r7, #26]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <f_open+0x1d0>
						res = FR_DENIED;
 80072fa:	2307      	movs	r3, #7
 80072fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007300:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007304:	2b00      	cmp	r3, #0
 8007306:	d126      	bne.n	8007356 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007318:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8007322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	2b01      	cmp	r3, #1
 800732c:	bf8c      	ite	hi
 800732e:	2301      	movhi	r3, #1
 8007330:	2300      	movls	r3, #0
 8007332:	b2db      	uxtb	r3, r3
 8007334:	461a      	mov	r2, r3
 8007336:	f107 0314 	add.w	r3, r7, #20
 800733a:	4611      	mov	r1, r2
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe fad9 	bl	80058f4 <inc_lock>
 8007342:	4602      	mov	r2, r0
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <f_open+0x226>
 8007350:	2302      	movs	r3, #2
 8007352:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007356:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800735a:	2b00      	cmp	r3, #0
 800735c:	f040 80a3 	bne.w	80074a6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007364:	4611      	mov	r1, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff f97b 	bl	8006662 <ld_clust>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007374:	331c      	adds	r3, #28
 8007376:	4618      	mov	r0, r3
 8007378:	f7fe f955 	bl	8005626 <ld_dword>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	88da      	ldrh	r2, [r3, #6]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	79fa      	ldrb	r2, [r7, #7]
 800739a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3330      	adds	r3, #48	@ 0x30
 80073b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe f9bf 	bl	800573c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80073be:	79fb      	ldrb	r3, [r7, #7]
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d06e      	beq.n	80074a6 <f_open+0x376>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d06a      	beq.n	80074a6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	895b      	ldrh	r3, [r3, #10]
 80073dc:	461a      	mov	r2, r3
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	899b      	ldrh	r3, [r3, #12]
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80073f4:	e016      	b.n	8007424 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fe fc69 	bl	8005cd2 <get_fat>
 8007400:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007404:	2b01      	cmp	r3, #1
 8007406:	d802      	bhi.n	800740e <f_open+0x2de>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800740e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007414:	d102      	bne.n	800741c <f_open+0x2ec>
 8007416:	2301      	movs	r3, #1
 8007418:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800741c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800741e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007420:	1ad3      	subs	r3, r2, r3
 8007422:	657b      	str	r3, [r7, #84]	@ 0x54
 8007424:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <f_open+0x304>
 800742c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800742e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007430:	429a      	cmp	r2, r3
 8007432:	d8e0      	bhi.n	80073f6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007438:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800743a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d131      	bne.n	80074a6 <f_open+0x376>
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	899b      	ldrh	r3, [r3, #12]
 8007446:	461a      	mov	r2, r3
 8007448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744a:	fbb3 f1f2 	udiv	r1, r3, r2
 800744e:	fb01 f202 	mul.w	r2, r1, r2
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d026      	beq.n	80074a6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe fc19 	bl	8005c94 <clust2sect>
 8007462:	6478      	str	r0, [r7, #68]	@ 0x44
 8007464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007466:	2b00      	cmp	r3, #0
 8007468:	d103      	bne.n	8007472 <f_open+0x342>
						res = FR_INT_ERR;
 800746a:	2302      	movs	r3, #2
 800746c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007470:	e019      	b.n	80074a6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	899b      	ldrh	r3, [r3, #12]
 8007476:	461a      	mov	r2, r3
 8007478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800747a:	fbb3 f2f2 	udiv	r2, r3, r2
 800747e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007480:	441a      	add	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	7858      	ldrb	r0, [r3, #1]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6a1a      	ldr	r2, [r3, #32]
 8007494:	2301      	movs	r3, #1
 8007496:	f7fe f84f 	bl	8005538 <disk_read>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <f_open+0x376>
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80074a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <f_open+0x384>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80074b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3760      	adds	r7, #96	@ 0x60
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08c      	sub	sp, #48	@ 0x30
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2200      	movs	r2, #0
 80074d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f107 0210 	add.w	r2, r7, #16
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fda9 	bl	8007038 <validate>
 80074e6:	4603      	mov	r3, r0
 80074e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80074ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d107      	bne.n	8007504 <f_write+0x44>
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	7d5b      	ldrb	r3, [r3, #21]
 80074f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80074fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <f_write+0x4a>
 8007504:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007508:	e16a      	b.n	80077e0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	f003 0302 	and.w	r3, r3, #2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <f_write+0x5a>
 8007516:	2307      	movs	r3, #7
 8007518:	e162      	b.n	80077e0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	441a      	add	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	699b      	ldr	r3, [r3, #24]
 8007526:	429a      	cmp	r2, r3
 8007528:	f080 814c 	bcs.w	80077c4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	43db      	mvns	r3, r3
 8007532:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007534:	e146      	b.n	80077c4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	8992      	ldrh	r2, [r2, #12]
 800753e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007542:	fb01 f202 	mul.w	r2, r1, r2
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 80f1 	bne.w	8007730 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	8992      	ldrh	r2, [r2, #12]
 8007556:	fbb3 f3f2 	udiv	r3, r3, r2
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	8952      	ldrh	r2, [r2, #10]
 800755e:	3a01      	subs	r2, #1
 8007560:	4013      	ands	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d143      	bne.n	80075f2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10c      	bne.n	800758c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757a:	2b00      	cmp	r3, #0
 800757c:	d11a      	bne.n	80075b4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2100      	movs	r1, #0
 8007582:	4618      	mov	r0, r3
 8007584:	f7fe fdf7 	bl	8006176 <create_chain>
 8007588:	62b8      	str	r0, [r7, #40]	@ 0x28
 800758a:	e013      	b.n	80075b4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	4619      	mov	r1, r3
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7fe fe83 	bl	80062a6 <clmt_clust>
 80075a0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80075a2:	e007      	b.n	80075b4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	69db      	ldr	r3, [r3, #28]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7fe fde2 	bl	8006176 <create_chain>
 80075b2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f000 8109 	beq.w	80077ce <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80075bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d104      	bne.n	80075cc <f_write+0x10c>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2202      	movs	r2, #2
 80075c6:	755a      	strb	r2, [r3, #21]
 80075c8:	2302      	movs	r3, #2
 80075ca:	e109      	b.n	80077e0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d2:	d104      	bne.n	80075de <f_write+0x11e>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	755a      	strb	r2, [r3, #21]
 80075da:	2301      	movs	r3, #1
 80075dc:	e100      	b.n	80077e0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075e2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <f_write+0x132>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075f0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	7d1b      	ldrb	r3, [r3, #20]
 80075f6:	b25b      	sxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	da18      	bge.n	800762e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	7858      	ldrb	r0, [r3, #1]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	2301      	movs	r3, #1
 800760c:	f7fd ffb4 	bl	8005578 <disk_write>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <f_write+0x160>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	755a      	strb	r2, [r3, #21]
 800761c:	2301      	movs	r3, #1
 800761e:	e0df      	b.n	80077e0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	7d1b      	ldrb	r3, [r3, #20]
 8007624:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007628:	b2da      	uxtb	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	69db      	ldr	r3, [r3, #28]
 8007634:	4619      	mov	r1, r3
 8007636:	4610      	mov	r0, r2
 8007638:	f7fe fb2c 	bl	8005c94 <clust2sect>
 800763c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d104      	bne.n	800764e <f_write+0x18e>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2202      	movs	r2, #2
 8007648:	755a      	strb	r2, [r3, #21]
 800764a:	2302      	movs	r3, #2
 800764c:	e0c8      	b.n	80077e0 <f_write+0x320>
			sect += csect;
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	4413      	add	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	899b      	ldrh	r3, [r3, #12]
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007662:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d043      	beq.n	80076f2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	4413      	add	r3, r2
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	8952      	ldrh	r2, [r2, #10]
 8007674:	4293      	cmp	r3, r2
 8007676:	d905      	bls.n	8007684 <f_write+0x1c4>
					cc = fs->csize - csect;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	895b      	ldrh	r3, [r3, #10]
 800767c:	461a      	mov	r2, r3
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	7858      	ldrb	r0, [r3, #1]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	f7fd ff73 	bl	8005578 <disk_write>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <f_write+0x1e2>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	755a      	strb	r2, [r3, #21]
 800769e:	2301      	movs	r3, #1
 80076a0:	e09e      	b.n	80077e0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d918      	bls.n	80076e2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6a1a      	ldr	r2, [r3, #32]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	8992      	ldrh	r2, [r2, #12]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	18d1      	adds	r1, r2, r3
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	899b      	ldrh	r3, [r3, #12]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7fe f813 	bl	80056fa <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	7d1b      	ldrb	r3, [r3, #20]
 80076d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	899b      	ldrh	r3, [r3, #12]
 80076e6:	461a      	mov	r2, r3
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	fb02 f303 	mul.w	r3, r2, r3
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80076f0:	e04b      	b.n	800778a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d016      	beq.n	800772a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	699a      	ldr	r2, [r3, #24]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007704:	429a      	cmp	r2, r3
 8007706:	d210      	bcs.n	800772a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	7858      	ldrb	r0, [r3, #1]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007712:	2301      	movs	r3, #1
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	f7fd ff0f 	bl	8005538 <disk_read>
 800771a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800771c:	2b00      	cmp	r3, #0
 800771e:	d004      	beq.n	800772a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	755a      	strb	r2, [r3, #21]
 8007726:	2301      	movs	r3, #1
 8007728:	e05a      	b.n	80077e0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	899b      	ldrh	r3, [r3, #12]
 8007734:	4618      	mov	r0, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	8992      	ldrh	r2, [r2, #12]
 800773e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007742:	fb01 f202 	mul.w	r2, r1, r2
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	1ac3      	subs	r3, r0, r3
 800774a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800774c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d901      	bls.n	8007758 <f_write+0x298>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	8992      	ldrh	r2, [r2, #12]
 8007766:	fbb3 f0f2 	udiv	r0, r3, r2
 800776a:	fb00 f202 	mul.w	r2, r0, r2
 800776e:	1a9b      	subs	r3, r3, r2
 8007770:	440b      	add	r3, r1
 8007772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007774:	69f9      	ldr	r1, [r7, #28]
 8007776:	4618      	mov	r0, r3
 8007778:	f7fd ffbf 	bl	80056fa <mem_cpy>
		fp->flag |= FA_DIRTY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	7d1b      	ldrb	r3, [r3, #20]
 8007780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800778a:	69fa      	ldr	r2, [r7, #28]
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	4413      	add	r3, r2
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	441a      	add	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	619a      	str	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bf38      	it	cc
 80077aa:	461a      	movcc	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	60da      	str	r2, [r3, #12]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	441a      	add	r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	f47f aeb5 	bne.w	8007536 <f_write+0x76>
 80077cc:	e000      	b.n	80077d0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80077ce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7d1b      	ldrb	r3, [r3, #20]
 80077d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3730      	adds	r7, #48	@ 0x30
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f107 0208 	add.w	r2, r7, #8
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fc1d 	bl	8007038 <validate>
 80077fe:	4603      	mov	r3, r0
 8007800:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d168      	bne.n	80078da <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	7d1b      	ldrb	r3, [r3, #20]
 800780c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007810:	2b00      	cmp	r3, #0
 8007812:	d062      	beq.n	80078da <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7d1b      	ldrb	r3, [r3, #20]
 8007818:	b25b      	sxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	da15      	bge.n	800784a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	7858      	ldrb	r0, [r3, #1]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a1a      	ldr	r2, [r3, #32]
 800782c:	2301      	movs	r3, #1
 800782e:	f7fd fea3 	bl	8005578 <disk_write>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <f_sync+0x54>
 8007838:	2301      	movs	r3, #1
 800783a:	e04f      	b.n	80078dc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	7d1b      	ldrb	r3, [r3, #20]
 8007840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007844:	b2da      	uxtb	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800784a:	f7fd fdd7 	bl	80053fc <get_fattime>
 800784e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f7fe f97d 	bl	8005b58 <move_window>
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007862:	7dfb      	ldrb	r3, [r7, #23]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d138      	bne.n	80078da <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	330b      	adds	r3, #11
 8007872:	781a      	ldrb	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	330b      	adds	r3, #11
 8007878:	f042 0220 	orr.w	r2, r2, #32
 800787c:	b2d2      	uxtb	r2, r2
 800787e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	461a      	mov	r2, r3
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	f7fe ff08 	bl	80066a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f103 021c 	add.w	r2, r3, #28
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	4619      	mov	r1, r3
 800789c:	4610      	mov	r0, r2
 800789e:	f7fd ff00 	bl	80056a2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	3316      	adds	r3, #22
 80078a6:	6939      	ldr	r1, [r7, #16]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd fefa 	bl	80056a2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3312      	adds	r3, #18
 80078b2:	2100      	movs	r1, #0
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7fd fed9 	bl	800566c <st_word>
					fs->wflag = 1;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2201      	movs	r2, #1
 80078be:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe f976 	bl	8005bb4 <sync_fs>
 80078c8:	4603      	mov	r3, r0
 80078ca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7d1b      	ldrb	r3, [r3, #20]
 80078d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80078da:	7dfb      	ldrb	r3, [r7, #23]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7ff ff7b 	bl	80077e8 <f_sync>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d118      	bne.n	800792e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f107 0208 	add.w	r2, r7, #8
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff fb97 	bl	8007038 <validate>
 800790a:	4603      	mov	r3, r0
 800790c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10c      	bne.n	800792e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe f879 	bl	8005a10 <dec_lock>
 800791e:	4603      	mov	r3, r0
 8007920:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007922:	7bfb      	ldrb	r3, [r7, #15]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d102      	bne.n	800792e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800792e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	4613      	mov	r3, r2
 8007944:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007946:	2301      	movs	r3, #1
 8007948:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800794a:	2300      	movs	r3, #0
 800794c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800794e:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007950:	7a5b      	ldrb	r3, [r3, #9]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d131      	bne.n	80079bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007958:	4b1c      	ldr	r3, [pc, #112]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 800795a:	7a5b      	ldrb	r3, [r3, #9]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	461a      	mov	r2, r3
 8007960:	4b1a      	ldr	r3, [pc, #104]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007966:	4b19      	ldr	r3, [pc, #100]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007968:	7a5b      	ldrb	r3, [r3, #9]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4a17      	ldr	r2, [pc, #92]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007976:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007978:	7a5b      	ldrb	r3, [r3, #9]
 800797a:	b2db      	uxtb	r3, r3
 800797c:	461a      	mov	r2, r3
 800797e:	4b13      	ldr	r3, [pc, #76]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007980:	4413      	add	r3, r2
 8007982:	79fa      	ldrb	r2, [r7, #7]
 8007984:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007986:	4b11      	ldr	r3, [pc, #68]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007988:	7a5b      	ldrb	r3, [r3, #9]
 800798a:	b2db      	uxtb	r3, r3
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	b2d1      	uxtb	r1, r2
 8007990:	4a0e      	ldr	r2, [pc, #56]	@ (80079cc <FATFS_LinkDriverEx+0x94>)
 8007992:	7251      	strb	r1, [r2, #9]
 8007994:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007996:	7dbb      	ldrb	r3, [r7, #22]
 8007998:	3330      	adds	r3, #48	@ 0x30
 800799a:	b2da      	uxtb	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	3301      	adds	r3, #1
 80079a4:	223a      	movs	r2, #58	@ 0x3a
 80079a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	3302      	adds	r3, #2
 80079ac:	222f      	movs	r2, #47	@ 0x2f
 80079ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	3303      	adds	r3, #3
 80079b4:	2200      	movs	r2, #0
 80079b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80079be:	4618      	mov	r0, r3
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20002b74 	.word	0x20002b74

080079d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079da:	2200      	movs	r2, #0
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ffaa 	bl	8007938 <FATFS_LinkDriverEx>
 80079e4:	4603      	mov	r3, r0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <siprintf>:
 80079f0:	b40e      	push	{r1, r2, r3}
 80079f2:	b510      	push	{r4, lr}
 80079f4:	b09d      	sub	sp, #116	@ 0x74
 80079f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80079f8:	9002      	str	r0, [sp, #8]
 80079fa:	9006      	str	r0, [sp, #24]
 80079fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007a00:	480a      	ldr	r0, [pc, #40]	@ (8007a2c <siprintf+0x3c>)
 8007a02:	9107      	str	r1, [sp, #28]
 8007a04:	9104      	str	r1, [sp, #16]
 8007a06:	490a      	ldr	r1, [pc, #40]	@ (8007a30 <siprintf+0x40>)
 8007a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a0c:	9105      	str	r1, [sp, #20]
 8007a0e:	2400      	movs	r4, #0
 8007a10:	a902      	add	r1, sp, #8
 8007a12:	6800      	ldr	r0, [r0, #0]
 8007a14:	9301      	str	r3, [sp, #4]
 8007a16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007a18:	f000 f994 	bl	8007d44 <_svfiprintf_r>
 8007a1c:	9b02      	ldr	r3, [sp, #8]
 8007a1e:	701c      	strb	r4, [r3, #0]
 8007a20:	b01d      	add	sp, #116	@ 0x74
 8007a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a26:	b003      	add	sp, #12
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20000060 	.word	0x20000060
 8007a30:	ffff0208 	.word	0xffff0208

08007a34 <memset>:
 8007a34:	4402      	add	r2, r0
 8007a36:	4603      	mov	r3, r0
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memset+0xa>
 8007a3c:	4770      	bx	lr
 8007a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a42:	e7f9      	b.n	8007a38 <memset+0x4>

08007a44 <__errno>:
 8007a44:	4b01      	ldr	r3, [pc, #4]	@ (8007a4c <__errno+0x8>)
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	20000060 	.word	0x20000060

08007a50 <__libc_init_array>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4d0d      	ldr	r5, [pc, #52]	@ (8007a88 <__libc_init_array+0x38>)
 8007a54:	4c0d      	ldr	r4, [pc, #52]	@ (8007a8c <__libc_init_array+0x3c>)
 8007a56:	1b64      	subs	r4, r4, r5
 8007a58:	10a4      	asrs	r4, r4, #2
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	42a6      	cmp	r6, r4
 8007a5e:	d109      	bne.n	8007a74 <__libc_init_array+0x24>
 8007a60:	4d0b      	ldr	r5, [pc, #44]	@ (8007a90 <__libc_init_array+0x40>)
 8007a62:	4c0c      	ldr	r4, [pc, #48]	@ (8007a94 <__libc_init_array+0x44>)
 8007a64:	f000 fc64 	bl	8008330 <_init>
 8007a68:	1b64      	subs	r4, r4, r5
 8007a6a:	10a4      	asrs	r4, r4, #2
 8007a6c:	2600      	movs	r6, #0
 8007a6e:	42a6      	cmp	r6, r4
 8007a70:	d105      	bne.n	8007a7e <__libc_init_array+0x2e>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a78:	4798      	blx	r3
 8007a7a:	3601      	adds	r6, #1
 8007a7c:	e7ee      	b.n	8007a5c <__libc_init_array+0xc>
 8007a7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a82:	4798      	blx	r3
 8007a84:	3601      	adds	r6, #1
 8007a86:	e7f2      	b.n	8007a6e <__libc_init_array+0x1e>
 8007a88:	08008480 	.word	0x08008480
 8007a8c:	08008480 	.word	0x08008480
 8007a90:	08008480 	.word	0x08008480
 8007a94:	08008484 	.word	0x08008484

08007a98 <__retarget_lock_acquire_recursive>:
 8007a98:	4770      	bx	lr

08007a9a <__retarget_lock_release_recursive>:
 8007a9a:	4770      	bx	lr

08007a9c <_free_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	d041      	beq.n	8007b28 <_free_r+0x8c>
 8007aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aa8:	1f0c      	subs	r4, r1, #4
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfb8      	it	lt
 8007aae:	18e4      	addlt	r4, r4, r3
 8007ab0:	f000 f8e0 	bl	8007c74 <__malloc_lock>
 8007ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8007b2c <_free_r+0x90>)
 8007ab6:	6813      	ldr	r3, [r2, #0]
 8007ab8:	b933      	cbnz	r3, 8007ac8 <_free_r+0x2c>
 8007aba:	6063      	str	r3, [r4, #4]
 8007abc:	6014      	str	r4, [r2, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ac4:	f000 b8dc 	b.w	8007c80 <__malloc_unlock>
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	d908      	bls.n	8007ade <_free_r+0x42>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf01      	itttt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	1809      	addeq	r1, r1, r0
 8007ada:	6021      	streq	r1, [r4, #0]
 8007adc:	e7ed      	b.n	8007aba <_free_r+0x1e>
 8007ade:	461a      	mov	r2, r3
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	b10b      	cbz	r3, 8007ae8 <_free_r+0x4c>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d9fa      	bls.n	8007ade <_free_r+0x42>
 8007ae8:	6811      	ldr	r1, [r2, #0]
 8007aea:	1850      	adds	r0, r2, r1
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d10b      	bne.n	8007b08 <_free_r+0x6c>
 8007af0:	6820      	ldr	r0, [r4, #0]
 8007af2:	4401      	add	r1, r0
 8007af4:	1850      	adds	r0, r2, r1
 8007af6:	4283      	cmp	r3, r0
 8007af8:	6011      	str	r1, [r2, #0]
 8007afa:	d1e0      	bne.n	8007abe <_free_r+0x22>
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	6053      	str	r3, [r2, #4]
 8007b02:	4408      	add	r0, r1
 8007b04:	6010      	str	r0, [r2, #0]
 8007b06:	e7da      	b.n	8007abe <_free_r+0x22>
 8007b08:	d902      	bls.n	8007b10 <_free_r+0x74>
 8007b0a:	230c      	movs	r3, #12
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	e7d6      	b.n	8007abe <_free_r+0x22>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf04      	itt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	6063      	str	r3, [r4, #4]
 8007b1e:	bf04      	itt	eq
 8007b20:	1809      	addeq	r1, r1, r0
 8007b22:	6021      	streq	r1, [r4, #0]
 8007b24:	6054      	str	r4, [r2, #4]
 8007b26:	e7ca      	b.n	8007abe <_free_r+0x22>
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
 8007b2a:	bf00      	nop
 8007b2c:	20002cc4 	.word	0x20002cc4

08007b30 <sbrk_aligned>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4e0f      	ldr	r6, [pc, #60]	@ (8007b70 <sbrk_aligned+0x40>)
 8007b34:	460c      	mov	r4, r1
 8007b36:	6831      	ldr	r1, [r6, #0]
 8007b38:	4605      	mov	r5, r0
 8007b3a:	b911      	cbnz	r1, 8007b42 <sbrk_aligned+0x12>
 8007b3c:	f000 fba4 	bl	8008288 <_sbrk_r>
 8007b40:	6030      	str	r0, [r6, #0]
 8007b42:	4621      	mov	r1, r4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f000 fb9f 	bl	8008288 <_sbrk_r>
 8007b4a:	1c43      	adds	r3, r0, #1
 8007b4c:	d103      	bne.n	8007b56 <sbrk_aligned+0x26>
 8007b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8007b52:	4620      	mov	r0, r4
 8007b54:	bd70      	pop	{r4, r5, r6, pc}
 8007b56:	1cc4      	adds	r4, r0, #3
 8007b58:	f024 0403 	bic.w	r4, r4, #3
 8007b5c:	42a0      	cmp	r0, r4
 8007b5e:	d0f8      	beq.n	8007b52 <sbrk_aligned+0x22>
 8007b60:	1a21      	subs	r1, r4, r0
 8007b62:	4628      	mov	r0, r5
 8007b64:	f000 fb90 	bl	8008288 <_sbrk_r>
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1f2      	bne.n	8007b52 <sbrk_aligned+0x22>
 8007b6c:	e7ef      	b.n	8007b4e <sbrk_aligned+0x1e>
 8007b6e:	bf00      	nop
 8007b70:	20002cc0 	.word	0x20002cc0

08007b74 <_malloc_r>:
 8007b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b78:	1ccd      	adds	r5, r1, #3
 8007b7a:	f025 0503 	bic.w	r5, r5, #3
 8007b7e:	3508      	adds	r5, #8
 8007b80:	2d0c      	cmp	r5, #12
 8007b82:	bf38      	it	cc
 8007b84:	250c      	movcc	r5, #12
 8007b86:	2d00      	cmp	r5, #0
 8007b88:	4606      	mov	r6, r0
 8007b8a:	db01      	blt.n	8007b90 <_malloc_r+0x1c>
 8007b8c:	42a9      	cmp	r1, r5
 8007b8e:	d904      	bls.n	8007b9a <_malloc_r+0x26>
 8007b90:	230c      	movs	r3, #12
 8007b92:	6033      	str	r3, [r6, #0]
 8007b94:	2000      	movs	r0, #0
 8007b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c70 <_malloc_r+0xfc>
 8007b9e:	f000 f869 	bl	8007c74 <__malloc_lock>
 8007ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8007ba6:	461c      	mov	r4, r3
 8007ba8:	bb44      	cbnz	r4, 8007bfc <_malloc_r+0x88>
 8007baa:	4629      	mov	r1, r5
 8007bac:	4630      	mov	r0, r6
 8007bae:	f7ff ffbf 	bl	8007b30 <sbrk_aligned>
 8007bb2:	1c43      	adds	r3, r0, #1
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	d158      	bne.n	8007c6a <_malloc_r+0xf6>
 8007bb8:	f8d8 4000 	ldr.w	r4, [r8]
 8007bbc:	4627      	mov	r7, r4
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	d143      	bne.n	8007c4a <_malloc_r+0xd6>
 8007bc2:	2c00      	cmp	r4, #0
 8007bc4:	d04b      	beq.n	8007c5e <_malloc_r+0xea>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4630      	mov	r0, r6
 8007bcc:	eb04 0903 	add.w	r9, r4, r3
 8007bd0:	f000 fb5a 	bl	8008288 <_sbrk_r>
 8007bd4:	4581      	cmp	r9, r0
 8007bd6:	d142      	bne.n	8007c5e <_malloc_r+0xea>
 8007bd8:	6821      	ldr	r1, [r4, #0]
 8007bda:	1a6d      	subs	r5, r5, r1
 8007bdc:	4629      	mov	r1, r5
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7ff ffa6 	bl	8007b30 <sbrk_aligned>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d03a      	beq.n	8007c5e <_malloc_r+0xea>
 8007be8:	6823      	ldr	r3, [r4, #0]
 8007bea:	442b      	add	r3, r5
 8007bec:	6023      	str	r3, [r4, #0]
 8007bee:	f8d8 3000 	ldr.w	r3, [r8]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	bb62      	cbnz	r2, 8007c50 <_malloc_r+0xdc>
 8007bf6:	f8c8 7000 	str.w	r7, [r8]
 8007bfa:	e00f      	b.n	8007c1c <_malloc_r+0xa8>
 8007bfc:	6822      	ldr	r2, [r4, #0]
 8007bfe:	1b52      	subs	r2, r2, r5
 8007c00:	d420      	bmi.n	8007c44 <_malloc_r+0xd0>
 8007c02:	2a0b      	cmp	r2, #11
 8007c04:	d917      	bls.n	8007c36 <_malloc_r+0xc2>
 8007c06:	1961      	adds	r1, r4, r5
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	6025      	str	r5, [r4, #0]
 8007c0c:	bf18      	it	ne
 8007c0e:	6059      	strne	r1, [r3, #4]
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	bf08      	it	eq
 8007c14:	f8c8 1000 	streq.w	r1, [r8]
 8007c18:	5162      	str	r2, [r4, r5]
 8007c1a:	604b      	str	r3, [r1, #4]
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	f000 f82f 	bl	8007c80 <__malloc_unlock>
 8007c22:	f104 000b 	add.w	r0, r4, #11
 8007c26:	1d23      	adds	r3, r4, #4
 8007c28:	f020 0007 	bic.w	r0, r0, #7
 8007c2c:	1ac2      	subs	r2, r0, r3
 8007c2e:	bf1c      	itt	ne
 8007c30:	1a1b      	subne	r3, r3, r0
 8007c32:	50a3      	strne	r3, [r4, r2]
 8007c34:	e7af      	b.n	8007b96 <_malloc_r+0x22>
 8007c36:	6862      	ldr	r2, [r4, #4]
 8007c38:	42a3      	cmp	r3, r4
 8007c3a:	bf0c      	ite	eq
 8007c3c:	f8c8 2000 	streq.w	r2, [r8]
 8007c40:	605a      	strne	r2, [r3, #4]
 8007c42:	e7eb      	b.n	8007c1c <_malloc_r+0xa8>
 8007c44:	4623      	mov	r3, r4
 8007c46:	6864      	ldr	r4, [r4, #4]
 8007c48:	e7ae      	b.n	8007ba8 <_malloc_r+0x34>
 8007c4a:	463c      	mov	r4, r7
 8007c4c:	687f      	ldr	r7, [r7, #4]
 8007c4e:	e7b6      	b.n	8007bbe <_malloc_r+0x4a>
 8007c50:	461a      	mov	r2, r3
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	42a3      	cmp	r3, r4
 8007c56:	d1fb      	bne.n	8007c50 <_malloc_r+0xdc>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6053      	str	r3, [r2, #4]
 8007c5c:	e7de      	b.n	8007c1c <_malloc_r+0xa8>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	6033      	str	r3, [r6, #0]
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f80c 	bl	8007c80 <__malloc_unlock>
 8007c68:	e794      	b.n	8007b94 <_malloc_r+0x20>
 8007c6a:	6005      	str	r5, [r0, #0]
 8007c6c:	e7d6      	b.n	8007c1c <_malloc_r+0xa8>
 8007c6e:	bf00      	nop
 8007c70:	20002cc4 	.word	0x20002cc4

08007c74 <__malloc_lock>:
 8007c74:	4801      	ldr	r0, [pc, #4]	@ (8007c7c <__malloc_lock+0x8>)
 8007c76:	f7ff bf0f 	b.w	8007a98 <__retarget_lock_acquire_recursive>
 8007c7a:	bf00      	nop
 8007c7c:	20002cbc 	.word	0x20002cbc

08007c80 <__malloc_unlock>:
 8007c80:	4801      	ldr	r0, [pc, #4]	@ (8007c88 <__malloc_unlock+0x8>)
 8007c82:	f7ff bf0a 	b.w	8007a9a <__retarget_lock_release_recursive>
 8007c86:	bf00      	nop
 8007c88:	20002cbc 	.word	0x20002cbc

08007c8c <__ssputs_r>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	688e      	ldr	r6, [r1, #8]
 8007c92:	461f      	mov	r7, r3
 8007c94:	42be      	cmp	r6, r7
 8007c96:	680b      	ldr	r3, [r1, #0]
 8007c98:	4682      	mov	sl, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4690      	mov	r8, r2
 8007c9e:	d82d      	bhi.n	8007cfc <__ssputs_r+0x70>
 8007ca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ca8:	d026      	beq.n	8007cf8 <__ssputs_r+0x6c>
 8007caa:	6965      	ldr	r5, [r4, #20]
 8007cac:	6909      	ldr	r1, [r1, #16]
 8007cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cb2:	eba3 0901 	sub.w	r9, r3, r1
 8007cb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cba:	1c7b      	adds	r3, r7, #1
 8007cbc:	444b      	add	r3, r9
 8007cbe:	106d      	asrs	r5, r5, #1
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	bf38      	it	cc
 8007cc4:	461d      	movcc	r5, r3
 8007cc6:	0553      	lsls	r3, r2, #21
 8007cc8:	d527      	bpl.n	8007d1a <__ssputs_r+0x8e>
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f7ff ff52 	bl	8007b74 <_malloc_r>
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b360      	cbz	r0, 8007d2e <__ssputs_r+0xa2>
 8007cd4:	6921      	ldr	r1, [r4, #16]
 8007cd6:	464a      	mov	r2, r9
 8007cd8:	f000 fae6 	bl	80082a8 <memcpy>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007ce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	6126      	str	r6, [r4, #16]
 8007cea:	6165      	str	r5, [r4, #20]
 8007cec:	444e      	add	r6, r9
 8007cee:	eba5 0509 	sub.w	r5, r5, r9
 8007cf2:	6026      	str	r6, [r4, #0]
 8007cf4:	60a5      	str	r5, [r4, #8]
 8007cf6:	463e      	mov	r6, r7
 8007cf8:	42be      	cmp	r6, r7
 8007cfa:	d900      	bls.n	8007cfe <__ssputs_r+0x72>
 8007cfc:	463e      	mov	r6, r7
 8007cfe:	6820      	ldr	r0, [r4, #0]
 8007d00:	4632      	mov	r2, r6
 8007d02:	4641      	mov	r1, r8
 8007d04:	f000 faa6 	bl	8008254 <memmove>
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	1b9b      	subs	r3, r3, r6
 8007d0c:	60a3      	str	r3, [r4, #8]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	4433      	add	r3, r6
 8007d12:	6023      	str	r3, [r4, #0]
 8007d14:	2000      	movs	r0, #0
 8007d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d1a:	462a      	mov	r2, r5
 8007d1c:	f000 fad2 	bl	80082c4 <_realloc_r>
 8007d20:	4606      	mov	r6, r0
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d1e0      	bne.n	8007ce8 <__ssputs_r+0x5c>
 8007d26:	6921      	ldr	r1, [r4, #16]
 8007d28:	4650      	mov	r0, sl
 8007d2a:	f7ff feb7 	bl	8007a9c <_free_r>
 8007d2e:	230c      	movs	r3, #12
 8007d30:	f8ca 3000 	str.w	r3, [sl]
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e7e9      	b.n	8007d16 <__ssputs_r+0x8a>
	...

08007d44 <_svfiprintf_r>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4698      	mov	r8, r3
 8007d4a:	898b      	ldrh	r3, [r1, #12]
 8007d4c:	061b      	lsls	r3, r3, #24
 8007d4e:	b09d      	sub	sp, #116	@ 0x74
 8007d50:	4607      	mov	r7, r0
 8007d52:	460d      	mov	r5, r1
 8007d54:	4614      	mov	r4, r2
 8007d56:	d510      	bpl.n	8007d7a <_svfiprintf_r+0x36>
 8007d58:	690b      	ldr	r3, [r1, #16]
 8007d5a:	b973      	cbnz	r3, 8007d7a <_svfiprintf_r+0x36>
 8007d5c:	2140      	movs	r1, #64	@ 0x40
 8007d5e:	f7ff ff09 	bl	8007b74 <_malloc_r>
 8007d62:	6028      	str	r0, [r5, #0]
 8007d64:	6128      	str	r0, [r5, #16]
 8007d66:	b930      	cbnz	r0, 8007d76 <_svfiprintf_r+0x32>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	603b      	str	r3, [r7, #0]
 8007d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d70:	b01d      	add	sp, #116	@ 0x74
 8007d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d76:	2340      	movs	r3, #64	@ 0x40
 8007d78:	616b      	str	r3, [r5, #20]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d7e:	2320      	movs	r3, #32
 8007d80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d88:	2330      	movs	r3, #48	@ 0x30
 8007d8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f28 <_svfiprintf_r+0x1e4>
 8007d8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d92:	f04f 0901 	mov.w	r9, #1
 8007d96:	4623      	mov	r3, r4
 8007d98:	469a      	mov	sl, r3
 8007d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d9e:	b10a      	cbz	r2, 8007da4 <_svfiprintf_r+0x60>
 8007da0:	2a25      	cmp	r2, #37	@ 0x25
 8007da2:	d1f9      	bne.n	8007d98 <_svfiprintf_r+0x54>
 8007da4:	ebba 0b04 	subs.w	fp, sl, r4
 8007da8:	d00b      	beq.n	8007dc2 <_svfiprintf_r+0x7e>
 8007daa:	465b      	mov	r3, fp
 8007dac:	4622      	mov	r2, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	4638      	mov	r0, r7
 8007db2:	f7ff ff6b 	bl	8007c8c <__ssputs_r>
 8007db6:	3001      	adds	r0, #1
 8007db8:	f000 80a7 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dbe:	445a      	add	r2, fp
 8007dc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 809f 	beq.w	8007f0a <_svfiprintf_r+0x1c6>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f04f 32ff 	mov.w	r2, #4294967295
 8007dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd6:	f10a 0a01 	add.w	sl, sl, #1
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007de2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007de4:	4654      	mov	r4, sl
 8007de6:	2205      	movs	r2, #5
 8007de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dec:	484e      	ldr	r0, [pc, #312]	@ (8007f28 <_svfiprintf_r+0x1e4>)
 8007dee:	f7f8 fa17 	bl	8000220 <memchr>
 8007df2:	9a04      	ldr	r2, [sp, #16]
 8007df4:	b9d8      	cbnz	r0, 8007e2e <_svfiprintf_r+0xea>
 8007df6:	06d0      	lsls	r0, r2, #27
 8007df8:	bf44      	itt	mi
 8007dfa:	2320      	movmi	r3, #32
 8007dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e00:	0711      	lsls	r1, r2, #28
 8007e02:	bf44      	itt	mi
 8007e04:	232b      	movmi	r3, #43	@ 0x2b
 8007e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e10:	d015      	beq.n	8007e3e <_svfiprintf_r+0xfa>
 8007e12:	9a07      	ldr	r2, [sp, #28]
 8007e14:	4654      	mov	r4, sl
 8007e16:	2000      	movs	r0, #0
 8007e18:	f04f 0c0a 	mov.w	ip, #10
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e22:	3b30      	subs	r3, #48	@ 0x30
 8007e24:	2b09      	cmp	r3, #9
 8007e26:	d94b      	bls.n	8007ec0 <_svfiprintf_r+0x17c>
 8007e28:	b1b0      	cbz	r0, 8007e58 <_svfiprintf_r+0x114>
 8007e2a:	9207      	str	r2, [sp, #28]
 8007e2c:	e014      	b.n	8007e58 <_svfiprintf_r+0x114>
 8007e2e:	eba0 0308 	sub.w	r3, r0, r8
 8007e32:	fa09 f303 	lsl.w	r3, r9, r3
 8007e36:	4313      	orrs	r3, r2
 8007e38:	9304      	str	r3, [sp, #16]
 8007e3a:	46a2      	mov	sl, r4
 8007e3c:	e7d2      	b.n	8007de4 <_svfiprintf_r+0xa0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	1d19      	adds	r1, r3, #4
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	9103      	str	r1, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	bfbb      	ittet	lt
 8007e4a:	425b      	neglt	r3, r3
 8007e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e50:	9307      	strge	r3, [sp, #28]
 8007e52:	9307      	strlt	r3, [sp, #28]
 8007e54:	bfb8      	it	lt
 8007e56:	9204      	strlt	r2, [sp, #16]
 8007e58:	7823      	ldrb	r3, [r4, #0]
 8007e5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e5c:	d10a      	bne.n	8007e74 <_svfiprintf_r+0x130>
 8007e5e:	7863      	ldrb	r3, [r4, #1]
 8007e60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e62:	d132      	bne.n	8007eca <_svfiprintf_r+0x186>
 8007e64:	9b03      	ldr	r3, [sp, #12]
 8007e66:	1d1a      	adds	r2, r3, #4
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	9203      	str	r2, [sp, #12]
 8007e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e70:	3402      	adds	r4, #2
 8007e72:	9305      	str	r3, [sp, #20]
 8007e74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f38 <_svfiprintf_r+0x1f4>
 8007e78:	7821      	ldrb	r1, [r4, #0]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	f7f8 f9cf 	bl	8000220 <memchr>
 8007e82:	b138      	cbz	r0, 8007e94 <_svfiprintf_r+0x150>
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	eba0 000a 	sub.w	r0, r0, sl
 8007e8a:	2240      	movs	r2, #64	@ 0x40
 8007e8c:	4082      	lsls	r2, r0
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	4824      	ldr	r0, [pc, #144]	@ (8007f2c <_svfiprintf_r+0x1e8>)
 8007e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f7f8 f9be 	bl	8000220 <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d036      	beq.n	8007f16 <_svfiprintf_r+0x1d2>
 8007ea8:	4b21      	ldr	r3, [pc, #132]	@ (8007f30 <_svfiprintf_r+0x1ec>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_svfiprintf_r+0x1b0>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eba:	4433      	add	r3, r6
 8007ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ebe:	e76a      	b.n	8007d96 <_svfiprintf_r+0x52>
 8007ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e7a8      	b.n	8007e1c <_svfiprintf_r+0xd8>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	@ 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_svfiprintf_r+0x1a6>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c6      	beq.n	8007e74 <_svfiprintf_r+0x130>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c4      	b.n	8007e74 <_svfiprintf_r+0x130>
 8007eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7f0      	b.n	8007ed6 <_svfiprintf_r+0x192>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <_svfiprintf_r+0x1f0>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4638      	mov	r0, r7
 8007f00:	f3af 8000 	nop.w
 8007f04:	1c42      	adds	r2, r0, #1
 8007f06:	4606      	mov	r6, r0
 8007f08:	d1d6      	bne.n	8007eb8 <_svfiprintf_r+0x174>
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	065b      	lsls	r3, r3, #25
 8007f0e:	f53f af2d 	bmi.w	8007d6c <_svfiprintf_r+0x28>
 8007f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f14:	e72c      	b.n	8007d70 <_svfiprintf_r+0x2c>
 8007f16:	ab03      	add	r3, sp, #12
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <_svfiprintf_r+0x1f0>)
 8007f1e:	a904      	add	r1, sp, #16
 8007f20:	4638      	mov	r0, r7
 8007f22:	f000 f879 	bl	8008018 <_printf_i>
 8007f26:	e7ed      	b.n	8007f04 <_svfiprintf_r+0x1c0>
 8007f28:	08008444 	.word	0x08008444
 8007f2c:	0800844e 	.word	0x0800844e
 8007f30:	00000000 	.word	0x00000000
 8007f34:	08007c8d 	.word	0x08007c8d
 8007f38:	0800844a 	.word	0x0800844a

08007f3c <_printf_common>:
 8007f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f40:	4616      	mov	r6, r2
 8007f42:	4698      	mov	r8, r3
 8007f44:	688a      	ldr	r2, [r1, #8]
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	bfb8      	it	lt
 8007f50:	4613      	movlt	r3, r2
 8007f52:	6033      	str	r3, [r6, #0]
 8007f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f58:	4607      	mov	r7, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	b10a      	cbz	r2, 8007f62 <_printf_common+0x26>
 8007f5e:	3301      	adds	r3, #1
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	0699      	lsls	r1, r3, #26
 8007f66:	bf42      	ittt	mi
 8007f68:	6833      	ldrmi	r3, [r6, #0]
 8007f6a:	3302      	addmi	r3, #2
 8007f6c:	6033      	strmi	r3, [r6, #0]
 8007f6e:	6825      	ldr	r5, [r4, #0]
 8007f70:	f015 0506 	ands.w	r5, r5, #6
 8007f74:	d106      	bne.n	8007f84 <_printf_common+0x48>
 8007f76:	f104 0a19 	add.w	sl, r4, #25
 8007f7a:	68e3      	ldr	r3, [r4, #12]
 8007f7c:	6832      	ldr	r2, [r6, #0]
 8007f7e:	1a9b      	subs	r3, r3, r2
 8007f80:	42ab      	cmp	r3, r5
 8007f82:	dc26      	bgt.n	8007fd2 <_printf_common+0x96>
 8007f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007f88:	6822      	ldr	r2, [r4, #0]
 8007f8a:	3b00      	subs	r3, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2301      	movne	r3, #1
 8007f90:	0692      	lsls	r2, r2, #26
 8007f92:	d42b      	bmi.n	8007fec <_printf_common+0xb0>
 8007f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007f98:	4641      	mov	r1, r8
 8007f9a:	4638      	mov	r0, r7
 8007f9c:	47c8      	blx	r9
 8007f9e:	3001      	adds	r0, #1
 8007fa0:	d01e      	beq.n	8007fe0 <_printf_common+0xa4>
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	6922      	ldr	r2, [r4, #16]
 8007fa6:	f003 0306 	and.w	r3, r3, #6
 8007faa:	2b04      	cmp	r3, #4
 8007fac:	bf02      	ittt	eq
 8007fae:	68e5      	ldreq	r5, [r4, #12]
 8007fb0:	6833      	ldreq	r3, [r6, #0]
 8007fb2:	1aed      	subeq	r5, r5, r3
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	bf0c      	ite	eq
 8007fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fbc:	2500      	movne	r5, #0
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	bfc4      	itt	gt
 8007fc2:	1a9b      	subgt	r3, r3, r2
 8007fc4:	18ed      	addgt	r5, r5, r3
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	341a      	adds	r4, #26
 8007fca:	42b5      	cmp	r5, r6
 8007fcc:	d11a      	bne.n	8008004 <_printf_common+0xc8>
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e008      	b.n	8007fe4 <_printf_common+0xa8>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	4652      	mov	r2, sl
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	4638      	mov	r0, r7
 8007fda:	47c8      	blx	r9
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d103      	bne.n	8007fe8 <_printf_common+0xac>
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe8:	3501      	adds	r5, #1
 8007fea:	e7c6      	b.n	8007f7a <_printf_common+0x3e>
 8007fec:	18e1      	adds	r1, r4, r3
 8007fee:	1c5a      	adds	r2, r3, #1
 8007ff0:	2030      	movs	r0, #48	@ 0x30
 8007ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ff6:	4422      	add	r2, r4
 8007ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008000:	3302      	adds	r3, #2
 8008002:	e7c7      	b.n	8007f94 <_printf_common+0x58>
 8008004:	2301      	movs	r3, #1
 8008006:	4622      	mov	r2, r4
 8008008:	4641      	mov	r1, r8
 800800a:	4638      	mov	r0, r7
 800800c:	47c8      	blx	r9
 800800e:	3001      	adds	r0, #1
 8008010:	d0e6      	beq.n	8007fe0 <_printf_common+0xa4>
 8008012:	3601      	adds	r6, #1
 8008014:	e7d9      	b.n	8007fca <_printf_common+0x8e>
	...

08008018 <_printf_i>:
 8008018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800801c:	7e0f      	ldrb	r7, [r1, #24]
 800801e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008020:	2f78      	cmp	r7, #120	@ 0x78
 8008022:	4691      	mov	r9, r2
 8008024:	4680      	mov	r8, r0
 8008026:	460c      	mov	r4, r1
 8008028:	469a      	mov	sl, r3
 800802a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800802e:	d807      	bhi.n	8008040 <_printf_i+0x28>
 8008030:	2f62      	cmp	r7, #98	@ 0x62
 8008032:	d80a      	bhi.n	800804a <_printf_i+0x32>
 8008034:	2f00      	cmp	r7, #0
 8008036:	f000 80d1 	beq.w	80081dc <_printf_i+0x1c4>
 800803a:	2f58      	cmp	r7, #88	@ 0x58
 800803c:	f000 80b8 	beq.w	80081b0 <_printf_i+0x198>
 8008040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008048:	e03a      	b.n	80080c0 <_printf_i+0xa8>
 800804a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800804e:	2b15      	cmp	r3, #21
 8008050:	d8f6      	bhi.n	8008040 <_printf_i+0x28>
 8008052:	a101      	add	r1, pc, #4	@ (adr r1, 8008058 <_printf_i+0x40>)
 8008054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008058:	080080b1 	.word	0x080080b1
 800805c:	080080c5 	.word	0x080080c5
 8008060:	08008041 	.word	0x08008041
 8008064:	08008041 	.word	0x08008041
 8008068:	08008041 	.word	0x08008041
 800806c:	08008041 	.word	0x08008041
 8008070:	080080c5 	.word	0x080080c5
 8008074:	08008041 	.word	0x08008041
 8008078:	08008041 	.word	0x08008041
 800807c:	08008041 	.word	0x08008041
 8008080:	08008041 	.word	0x08008041
 8008084:	080081c3 	.word	0x080081c3
 8008088:	080080ef 	.word	0x080080ef
 800808c:	0800817d 	.word	0x0800817d
 8008090:	08008041 	.word	0x08008041
 8008094:	08008041 	.word	0x08008041
 8008098:	080081e5 	.word	0x080081e5
 800809c:	08008041 	.word	0x08008041
 80080a0:	080080ef 	.word	0x080080ef
 80080a4:	08008041 	.word	0x08008041
 80080a8:	08008041 	.word	0x08008041
 80080ac:	08008185 	.word	0x08008185
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	1d1a      	adds	r2, r3, #4
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6032      	str	r2, [r6, #0]
 80080b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80080c0:	2301      	movs	r3, #1
 80080c2:	e09c      	b.n	80081fe <_printf_i+0x1e6>
 80080c4:	6833      	ldr	r3, [r6, #0]
 80080c6:	6820      	ldr	r0, [r4, #0]
 80080c8:	1d19      	adds	r1, r3, #4
 80080ca:	6031      	str	r1, [r6, #0]
 80080cc:	0606      	lsls	r6, r0, #24
 80080ce:	d501      	bpl.n	80080d4 <_printf_i+0xbc>
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	e003      	b.n	80080dc <_printf_i+0xc4>
 80080d4:	0645      	lsls	r5, r0, #25
 80080d6:	d5fb      	bpl.n	80080d0 <_printf_i+0xb8>
 80080d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80080dc:	2d00      	cmp	r5, #0
 80080de:	da03      	bge.n	80080e8 <_printf_i+0xd0>
 80080e0:	232d      	movs	r3, #45	@ 0x2d
 80080e2:	426d      	negs	r5, r5
 80080e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080e8:	4858      	ldr	r0, [pc, #352]	@ (800824c <_printf_i+0x234>)
 80080ea:	230a      	movs	r3, #10
 80080ec:	e011      	b.n	8008112 <_printf_i+0xfa>
 80080ee:	6821      	ldr	r1, [r4, #0]
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	0608      	lsls	r0, r1, #24
 80080f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80080f8:	d402      	bmi.n	8008100 <_printf_i+0xe8>
 80080fa:	0649      	lsls	r1, r1, #25
 80080fc:	bf48      	it	mi
 80080fe:	b2ad      	uxthmi	r5, r5
 8008100:	2f6f      	cmp	r7, #111	@ 0x6f
 8008102:	4852      	ldr	r0, [pc, #328]	@ (800824c <_printf_i+0x234>)
 8008104:	6033      	str	r3, [r6, #0]
 8008106:	bf14      	ite	ne
 8008108:	230a      	movne	r3, #10
 800810a:	2308      	moveq	r3, #8
 800810c:	2100      	movs	r1, #0
 800810e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008112:	6866      	ldr	r6, [r4, #4]
 8008114:	60a6      	str	r6, [r4, #8]
 8008116:	2e00      	cmp	r6, #0
 8008118:	db05      	blt.n	8008126 <_printf_i+0x10e>
 800811a:	6821      	ldr	r1, [r4, #0]
 800811c:	432e      	orrs	r6, r5
 800811e:	f021 0104 	bic.w	r1, r1, #4
 8008122:	6021      	str	r1, [r4, #0]
 8008124:	d04b      	beq.n	80081be <_printf_i+0x1a6>
 8008126:	4616      	mov	r6, r2
 8008128:	fbb5 f1f3 	udiv	r1, r5, r3
 800812c:	fb03 5711 	mls	r7, r3, r1, r5
 8008130:	5dc7      	ldrb	r7, [r0, r7]
 8008132:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008136:	462f      	mov	r7, r5
 8008138:	42bb      	cmp	r3, r7
 800813a:	460d      	mov	r5, r1
 800813c:	d9f4      	bls.n	8008128 <_printf_i+0x110>
 800813e:	2b08      	cmp	r3, #8
 8008140:	d10b      	bne.n	800815a <_printf_i+0x142>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	07df      	lsls	r7, r3, #31
 8008146:	d508      	bpl.n	800815a <_printf_i+0x142>
 8008148:	6923      	ldr	r3, [r4, #16]
 800814a:	6861      	ldr	r1, [r4, #4]
 800814c:	4299      	cmp	r1, r3
 800814e:	bfde      	ittt	le
 8008150:	2330      	movle	r3, #48	@ 0x30
 8008152:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008156:	f106 36ff 	addle.w	r6, r6, #4294967295
 800815a:	1b92      	subs	r2, r2, r6
 800815c:	6122      	str	r2, [r4, #16]
 800815e:	f8cd a000 	str.w	sl, [sp]
 8008162:	464b      	mov	r3, r9
 8008164:	aa03      	add	r2, sp, #12
 8008166:	4621      	mov	r1, r4
 8008168:	4640      	mov	r0, r8
 800816a:	f7ff fee7 	bl	8007f3c <_printf_common>
 800816e:	3001      	adds	r0, #1
 8008170:	d14a      	bne.n	8008208 <_printf_i+0x1f0>
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	b004      	add	sp, #16
 8008178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	f043 0320 	orr.w	r3, r3, #32
 8008182:	6023      	str	r3, [r4, #0]
 8008184:	4832      	ldr	r0, [pc, #200]	@ (8008250 <_printf_i+0x238>)
 8008186:	2778      	movs	r7, #120	@ 0x78
 8008188:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	6831      	ldr	r1, [r6, #0]
 8008190:	061f      	lsls	r7, r3, #24
 8008192:	f851 5b04 	ldr.w	r5, [r1], #4
 8008196:	d402      	bmi.n	800819e <_printf_i+0x186>
 8008198:	065f      	lsls	r7, r3, #25
 800819a:	bf48      	it	mi
 800819c:	b2ad      	uxthmi	r5, r5
 800819e:	6031      	str	r1, [r6, #0]
 80081a0:	07d9      	lsls	r1, r3, #31
 80081a2:	bf44      	itt	mi
 80081a4:	f043 0320 	orrmi.w	r3, r3, #32
 80081a8:	6023      	strmi	r3, [r4, #0]
 80081aa:	b11d      	cbz	r5, 80081b4 <_printf_i+0x19c>
 80081ac:	2310      	movs	r3, #16
 80081ae:	e7ad      	b.n	800810c <_printf_i+0xf4>
 80081b0:	4826      	ldr	r0, [pc, #152]	@ (800824c <_printf_i+0x234>)
 80081b2:	e7e9      	b.n	8008188 <_printf_i+0x170>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	f023 0320 	bic.w	r3, r3, #32
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	e7f6      	b.n	80081ac <_printf_i+0x194>
 80081be:	4616      	mov	r6, r2
 80081c0:	e7bd      	b.n	800813e <_printf_i+0x126>
 80081c2:	6833      	ldr	r3, [r6, #0]
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	6961      	ldr	r1, [r4, #20]
 80081c8:	1d18      	adds	r0, r3, #4
 80081ca:	6030      	str	r0, [r6, #0]
 80081cc:	062e      	lsls	r6, r5, #24
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	d501      	bpl.n	80081d6 <_printf_i+0x1be>
 80081d2:	6019      	str	r1, [r3, #0]
 80081d4:	e002      	b.n	80081dc <_printf_i+0x1c4>
 80081d6:	0668      	lsls	r0, r5, #25
 80081d8:	d5fb      	bpl.n	80081d2 <_printf_i+0x1ba>
 80081da:	8019      	strh	r1, [r3, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	6123      	str	r3, [r4, #16]
 80081e0:	4616      	mov	r6, r2
 80081e2:	e7bc      	b.n	800815e <_printf_i+0x146>
 80081e4:	6833      	ldr	r3, [r6, #0]
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	6032      	str	r2, [r6, #0]
 80081ea:	681e      	ldr	r6, [r3, #0]
 80081ec:	6862      	ldr	r2, [r4, #4]
 80081ee:	2100      	movs	r1, #0
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7f8 f815 	bl	8000220 <memchr>
 80081f6:	b108      	cbz	r0, 80081fc <_printf_i+0x1e4>
 80081f8:	1b80      	subs	r0, r0, r6
 80081fa:	6060      	str	r0, [r4, #4]
 80081fc:	6863      	ldr	r3, [r4, #4]
 80081fe:	6123      	str	r3, [r4, #16]
 8008200:	2300      	movs	r3, #0
 8008202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008206:	e7aa      	b.n	800815e <_printf_i+0x146>
 8008208:	6923      	ldr	r3, [r4, #16]
 800820a:	4632      	mov	r2, r6
 800820c:	4649      	mov	r1, r9
 800820e:	4640      	mov	r0, r8
 8008210:	47d0      	blx	sl
 8008212:	3001      	adds	r0, #1
 8008214:	d0ad      	beq.n	8008172 <_printf_i+0x15a>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	079b      	lsls	r3, r3, #30
 800821a:	d413      	bmi.n	8008244 <_printf_i+0x22c>
 800821c:	68e0      	ldr	r0, [r4, #12]
 800821e:	9b03      	ldr	r3, [sp, #12]
 8008220:	4298      	cmp	r0, r3
 8008222:	bfb8      	it	lt
 8008224:	4618      	movlt	r0, r3
 8008226:	e7a6      	b.n	8008176 <_printf_i+0x15e>
 8008228:	2301      	movs	r3, #1
 800822a:	4632      	mov	r2, r6
 800822c:	4649      	mov	r1, r9
 800822e:	4640      	mov	r0, r8
 8008230:	47d0      	blx	sl
 8008232:	3001      	adds	r0, #1
 8008234:	d09d      	beq.n	8008172 <_printf_i+0x15a>
 8008236:	3501      	adds	r5, #1
 8008238:	68e3      	ldr	r3, [r4, #12]
 800823a:	9903      	ldr	r1, [sp, #12]
 800823c:	1a5b      	subs	r3, r3, r1
 800823e:	42ab      	cmp	r3, r5
 8008240:	dcf2      	bgt.n	8008228 <_printf_i+0x210>
 8008242:	e7eb      	b.n	800821c <_printf_i+0x204>
 8008244:	2500      	movs	r5, #0
 8008246:	f104 0619 	add.w	r6, r4, #25
 800824a:	e7f5      	b.n	8008238 <_printf_i+0x220>
 800824c:	08008455 	.word	0x08008455
 8008250:	08008466 	.word	0x08008466

08008254 <memmove>:
 8008254:	4288      	cmp	r0, r1
 8008256:	b510      	push	{r4, lr}
 8008258:	eb01 0402 	add.w	r4, r1, r2
 800825c:	d902      	bls.n	8008264 <memmove+0x10>
 800825e:	4284      	cmp	r4, r0
 8008260:	4623      	mov	r3, r4
 8008262:	d807      	bhi.n	8008274 <memmove+0x20>
 8008264:	1e43      	subs	r3, r0, #1
 8008266:	42a1      	cmp	r1, r4
 8008268:	d008      	beq.n	800827c <memmove+0x28>
 800826a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800826e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008272:	e7f8      	b.n	8008266 <memmove+0x12>
 8008274:	4402      	add	r2, r0
 8008276:	4601      	mov	r1, r0
 8008278:	428a      	cmp	r2, r1
 800827a:	d100      	bne.n	800827e <memmove+0x2a>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008286:	e7f7      	b.n	8008278 <memmove+0x24>

08008288 <_sbrk_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_sbrk_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7fa fad2 	bl	800283c <_sbrk>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_sbrk_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_sbrk_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	20002cb8 	.word	0x20002cb8

080082a8 <memcpy>:
 80082a8:	440a      	add	r2, r1
 80082aa:	4291      	cmp	r1, r2
 80082ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80082b0:	d100      	bne.n	80082b4 <memcpy+0xc>
 80082b2:	4770      	bx	lr
 80082b4:	b510      	push	{r4, lr}
 80082b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082be:	4291      	cmp	r1, r2
 80082c0:	d1f9      	bne.n	80082b6 <memcpy+0xe>
 80082c2:	bd10      	pop	{r4, pc}

080082c4 <_realloc_r>:
 80082c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c8:	4607      	mov	r7, r0
 80082ca:	4614      	mov	r4, r2
 80082cc:	460d      	mov	r5, r1
 80082ce:	b921      	cbnz	r1, 80082da <_realloc_r+0x16>
 80082d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d4:	4611      	mov	r1, r2
 80082d6:	f7ff bc4d 	b.w	8007b74 <_malloc_r>
 80082da:	b92a      	cbnz	r2, 80082e8 <_realloc_r+0x24>
 80082dc:	f7ff fbde 	bl	8007a9c <_free_r>
 80082e0:	4625      	mov	r5, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	f000 f81a 	bl	8008320 <_malloc_usable_size_r>
 80082ec:	4284      	cmp	r4, r0
 80082ee:	4606      	mov	r6, r0
 80082f0:	d802      	bhi.n	80082f8 <_realloc_r+0x34>
 80082f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082f6:	d8f4      	bhi.n	80082e2 <_realloc_r+0x1e>
 80082f8:	4621      	mov	r1, r4
 80082fa:	4638      	mov	r0, r7
 80082fc:	f7ff fc3a 	bl	8007b74 <_malloc_r>
 8008300:	4680      	mov	r8, r0
 8008302:	b908      	cbnz	r0, 8008308 <_realloc_r+0x44>
 8008304:	4645      	mov	r5, r8
 8008306:	e7ec      	b.n	80082e2 <_realloc_r+0x1e>
 8008308:	42b4      	cmp	r4, r6
 800830a:	4622      	mov	r2, r4
 800830c:	4629      	mov	r1, r5
 800830e:	bf28      	it	cs
 8008310:	4632      	movcs	r2, r6
 8008312:	f7ff ffc9 	bl	80082a8 <memcpy>
 8008316:	4629      	mov	r1, r5
 8008318:	4638      	mov	r0, r7
 800831a:	f7ff fbbf 	bl	8007a9c <_free_r>
 800831e:	e7f1      	b.n	8008304 <_realloc_r+0x40>

08008320 <_malloc_usable_size_r>:
 8008320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008324:	1f18      	subs	r0, r3, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	bfbc      	itt	lt
 800832a:	580b      	ldrlt	r3, [r1, r0]
 800832c:	18c0      	addlt	r0, r0, r3
 800832e:	4770      	bx	lr

08008330 <_init>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr

0800833c <_fini>:
 800833c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833e:	bf00      	nop
 8008340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008342:	bc08      	pop	{r3}
 8008344:	469e      	mov	lr, r3
 8008346:	4770      	bx	lr
