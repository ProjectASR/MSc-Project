
EncorderProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073d8  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080075a0  080075a0  000085a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007688  08007688  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007690  08007690  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007690  08007690  00008690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007694  08007694  00008694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007698  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022cc  2000006c  08007704  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002338  08007704  00009338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109c6  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269b  00000000  00000000  00019a62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001c100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8e  00000000  00000000  0001d140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000406b  00000000  00000000  0001ddce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015053  00000000  00000000  00021e39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2c47  00000000  00000000  00036e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129ad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004560  00000000  00000000  00129b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007588 	.word	0x08007588

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	08007588 	.word	0x08007588

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b988 	b.w	8000d6c <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	468e      	mov	lr, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	4688      	mov	r8, r1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d14a      	bne.n	8000b1a <__udivmoddi4+0xa6>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d962      	bls.n	8000b50 <__udivmoddi4+0xdc>
 8000a8a:	fab2 f682 	clz	r6, r2
 8000a8e:	b14e      	cbz	r6, 8000aa4 <__udivmoddi4+0x30>
 8000a90:	f1c6 0320 	rsb	r3, r6, #32
 8000a94:	fa01 f806 	lsl.w	r8, r1, r6
 8000a98:	fa20 f303 	lsr.w	r3, r0, r3
 8000a9c:	40b7      	lsls	r7, r6
 8000a9e:	ea43 0808 	orr.w	r8, r3, r8
 8000aa2:	40b4      	lsls	r4, r6
 8000aa4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aa8:	fa1f fc87 	uxth.w	ip, r7
 8000aac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab0:	0c23      	lsrs	r3, r4, #16
 8000ab2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ab6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aba:	fb01 f20c 	mul.w	r2, r1, ip
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0x62>
 8000ac2:	18fb      	adds	r3, r7, r3
 8000ac4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ac8:	f080 80ea 	bcs.w	8000ca0 <__udivmoddi4+0x22c>
 8000acc:	429a      	cmp	r2, r3
 8000ace:	f240 80e7 	bls.w	8000ca0 <__udivmoddi4+0x22c>
 8000ad2:	3902      	subs	r1, #2
 8000ad4:	443b      	add	r3, r7
 8000ad6:	1a9a      	subs	r2, r3, r2
 8000ad8:	b2a3      	uxth	r3, r4
 8000ada:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ade:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000aea:	459c      	cmp	ip, r3
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x8e>
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000af4:	f080 80d6 	bcs.w	8000ca4 <__udivmoddi4+0x230>
 8000af8:	459c      	cmp	ip, r3
 8000afa:	f240 80d3 	bls.w	8000ca4 <__udivmoddi4+0x230>
 8000afe:	443b      	add	r3, r7
 8000b00:	3802      	subs	r0, #2
 8000b02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b06:	eba3 030c 	sub.w	r3, r3, ip
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	b11d      	cbz	r5, 8000b16 <__udivmoddi4+0xa2>
 8000b0e:	40f3      	lsrs	r3, r6
 8000b10:	2200      	movs	r2, #0
 8000b12:	e9c5 3200 	strd	r3, r2, [r5]
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d905      	bls.n	8000b2a <__udivmoddi4+0xb6>
 8000b1e:	b10d      	cbz	r5, 8000b24 <__udivmoddi4+0xb0>
 8000b20:	e9c5 0100 	strd	r0, r1, [r5]
 8000b24:	2100      	movs	r1, #0
 8000b26:	4608      	mov	r0, r1
 8000b28:	e7f5      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b2a:	fab3 f183 	clz	r1, r3
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d146      	bne.n	8000bc0 <__udivmoddi4+0x14c>
 8000b32:	4573      	cmp	r3, lr
 8000b34:	d302      	bcc.n	8000b3c <__udivmoddi4+0xc8>
 8000b36:	4282      	cmp	r2, r0
 8000b38:	f200 8105 	bhi.w	8000d46 <__udivmoddi4+0x2d2>
 8000b3c:	1a84      	subs	r4, r0, r2
 8000b3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b42:	2001      	movs	r0, #1
 8000b44:	4690      	mov	r8, r2
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d0e5      	beq.n	8000b16 <__udivmoddi4+0xa2>
 8000b4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b4e:	e7e2      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000b50:	2a00      	cmp	r2, #0
 8000b52:	f000 8090 	beq.w	8000c76 <__udivmoddi4+0x202>
 8000b56:	fab2 f682 	clz	r6, r2
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	f040 80a4 	bne.w	8000ca8 <__udivmoddi4+0x234>
 8000b60:	1a8a      	subs	r2, r1, r2
 8000b62:	0c03      	lsrs	r3, r0, #16
 8000b64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b68:	b280      	uxth	r0, r0
 8000b6a:	b2bc      	uxth	r4, r7
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d907      	bls.n	8000b92 <__udivmoddi4+0x11e>
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x11c>
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f200 80e0 	bhi.w	8000d50 <__udivmoddi4+0x2dc>
 8000b90:	46c4      	mov	ip, r8
 8000b92:	1a9b      	subs	r3, r3, r2
 8000b94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba0:	fb02 f404 	mul.w	r4, r2, r4
 8000ba4:	429c      	cmp	r4, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x144>
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x142>
 8000bb0:	429c      	cmp	r4, r3
 8000bb2:	f200 80ca 	bhi.w	8000d4a <__udivmoddi4+0x2d6>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	1b1b      	subs	r3, r3, r4
 8000bba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bbe:	e7a5      	b.n	8000b0c <__udivmoddi4+0x98>
 8000bc0:	f1c1 0620 	rsb	r6, r1, #32
 8000bc4:	408b      	lsls	r3, r1
 8000bc6:	fa22 f706 	lsr.w	r7, r2, r6
 8000bca:	431f      	orrs	r7, r3
 8000bcc:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd0:	fa20 f306 	lsr.w	r3, r0, r6
 8000bd4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000bd8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	fa1f fc87 	uxth.w	ip, r7
 8000be6:	fbbe f0f9 	udiv	r0, lr, r9
 8000bea:	0c1c      	lsrs	r4, r3, #16
 8000bec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bf4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x1a0>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c06:	f080 809c 	bcs.w	8000d42 <__udivmoddi4+0x2ce>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8099 	bls.w	8000d42 <__udivmoddi4+0x2ce>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	eba4 040e 	sub.w	r4, r4, lr
 8000c18:	fa1f fe83 	uxth.w	lr, r3
 8000c1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c20:	fb09 4413 	mls	r4, r9, r3, r4
 8000c24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c2c:	45a4      	cmp	ip, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x1ce>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c36:	f080 8082 	bcs.w	8000d3e <__udivmoddi4+0x2ca>
 8000c3a:	45a4      	cmp	ip, r4
 8000c3c:	d97f      	bls.n	8000d3e <__udivmoddi4+0x2ca>
 8000c3e:	3b02      	subs	r3, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c46:	eba4 040c 	sub.w	r4, r4, ip
 8000c4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c4e:	4564      	cmp	r4, ip
 8000c50:	4673      	mov	r3, lr
 8000c52:	46e1      	mov	r9, ip
 8000c54:	d362      	bcc.n	8000d1c <__udivmoddi4+0x2a8>
 8000c56:	d05f      	beq.n	8000d18 <__udivmoddi4+0x2a4>
 8000c58:	b15d      	cbz	r5, 8000c72 <__udivmoddi4+0x1fe>
 8000c5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000c5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000c62:	fa04 f606 	lsl.w	r6, r4, r6
 8000c66:	fa22 f301 	lsr.w	r3, r2, r1
 8000c6a:	431e      	orrs	r6, r3
 8000c6c:	40cc      	lsrs	r4, r1
 8000c6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000c72:	2100      	movs	r1, #0
 8000c74:	e74f      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000c76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c7a:	0c01      	lsrs	r1, r0, #16
 8000c7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c86:	463b      	mov	r3, r7
 8000c88:	4638      	mov	r0, r7
 8000c8a:	463c      	mov	r4, r7
 8000c8c:	46b8      	mov	r8, r7
 8000c8e:	46be      	mov	lr, r7
 8000c90:	2620      	movs	r6, #32
 8000c92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c96:	eba2 0208 	sub.w	r2, r2, r8
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	e766      	b.n	8000b6e <__udivmoddi4+0xfa>
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	e718      	b.n	8000ad6 <__udivmoddi4+0x62>
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	e72c      	b.n	8000b02 <__udivmoddi4+0x8e>
 8000ca8:	f1c6 0220 	rsb	r2, r6, #32
 8000cac:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	40b1      	lsls	r1, r6
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cc2:	b2bc      	uxth	r4, r7
 8000cc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb08 f904 	mul.w	r9, r8, r4
 8000cd2:	40b0      	lsls	r0, r6
 8000cd4:	4589      	cmp	r9, r1
 8000cd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000cda:	b280      	uxth	r0, r0
 8000cdc:	d93e      	bls.n	8000d5c <__udivmoddi4+0x2e8>
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ce4:	d201      	bcs.n	8000cea <__udivmoddi4+0x276>
 8000ce6:	4589      	cmp	r9, r1
 8000ce8:	d81f      	bhi.n	8000d2a <__udivmoddi4+0x2b6>
 8000cea:	eba1 0109 	sub.w	r1, r1, r9
 8000cee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cf2:	fb09 f804 	mul.w	r8, r9, r4
 8000cf6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cfa:	b292      	uxth	r2, r2
 8000cfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d00:	4542      	cmp	r2, r8
 8000d02:	d229      	bcs.n	8000d58 <__udivmoddi4+0x2e4>
 8000d04:	18ba      	adds	r2, r7, r2
 8000d06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d0a:	d2c4      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d0c:	4542      	cmp	r2, r8
 8000d0e:	d2c2      	bcs.n	8000c96 <__udivmoddi4+0x222>
 8000d10:	f1a9 0102 	sub.w	r1, r9, #2
 8000d14:	443a      	add	r2, r7
 8000d16:	e7be      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d18:	45f0      	cmp	r8, lr
 8000d1a:	d29d      	bcs.n	8000c58 <__udivmoddi4+0x1e4>
 8000d1c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d20:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d24:	3801      	subs	r0, #1
 8000d26:	46e1      	mov	r9, ip
 8000d28:	e796      	b.n	8000c58 <__udivmoddi4+0x1e4>
 8000d2a:	eba7 0909 	sub.w	r9, r7, r9
 8000d2e:	4449      	add	r1, r9
 8000d30:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d38:	fb09 f804 	mul.w	r8, r9, r4
 8000d3c:	e7db      	b.n	8000cf6 <__udivmoddi4+0x282>
 8000d3e:	4673      	mov	r3, lr
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1ce>
 8000d42:	4650      	mov	r0, sl
 8000d44:	e766      	b.n	8000c14 <__udivmoddi4+0x1a0>
 8000d46:	4608      	mov	r0, r1
 8000d48:	e6fd      	b.n	8000b46 <__udivmoddi4+0xd2>
 8000d4a:	443b      	add	r3, r7
 8000d4c:	3a02      	subs	r2, #2
 8000d4e:	e733      	b.n	8000bb8 <__udivmoddi4+0x144>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	443b      	add	r3, r7
 8000d56:	e71c      	b.n	8000b92 <__udivmoddi4+0x11e>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	e79c      	b.n	8000c96 <__udivmoddi4+0x222>
 8000d5c:	eba1 0109 	sub.w	r1, r1, r9
 8000d60:	46c4      	mov	ip, r8
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fb09 f804 	mul.w	r8, r9, r4
 8000d6a:	e7c4      	b.n	8000cf6 <__udivmoddi4+0x282>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2101      	movs	r1, #1
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <SELECT+0x14>)
 8000d7a:	f002 f9cb 	bl	8003114 <HAL_GPIO_WritePin>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020400 	.word	0x40020400

08000d88 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2101      	movs	r1, #1
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <DESELECT+0x14>)
 8000d92:	f002 f9bf 	bl	8003114 <HAL_GPIO_WritePin>
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020400 	.word	0x40020400

08000da0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 8000daa:	bf00      	nop
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <SPI_TxByte+0x30>)
 8000dae:	f003 fa63 	bl	8004278 <HAL_SPI_GetState>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d1f9      	bne.n	8000dac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 8000db8:	1df9      	adds	r1, r7, #7
 8000dba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <SPI_TxByte+0x30>)
 8000dc2:	f002 fec2 	bl	8003b4a <HAL_SPI_Transmit>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200000a0 	.word	0x200000a0

08000dd4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 8000de2:	bf00      	nop
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <SPI_RxByte+0x38>)
 8000de6:	f003 fa47 	bl	8004278 <HAL_SPI_GetState>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d1f9      	bne.n	8000de4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 8000df0:	1dba      	adds	r2, r7, #6
 8000df2:	1df9      	adds	r1, r7, #7
 8000df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4803      	ldr	r0, [pc, #12]	@ (8000e0c <SPI_RxByte+0x38>)
 8000dfe:	f003 f819 	bl	8003e34 <HAL_SPI_TransmitReceive>
  
  return data;
 8000e02:	79bb      	ldrb	r3, [r7, #6]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	200000a0 	.word	0x200000a0

08000e10 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000e18:	f7ff ffdc 	bl	8000dd4 <SPI_RxByte>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	701a      	strb	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  timer2 = 50;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <SD_ReadyWait+0x34>)
 8000e34:	2232      	movs	r2, #50	@ 0x32
 8000e36:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000e38:	f7ff ffcc 	bl	8000dd4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000e3c:	f7ff ffca 	bl	8000dd4 <SPI_RxByte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && timer2);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2bff      	cmp	r3, #255	@ 0xff
 8000e48:	d004      	beq.n	8000e54 <SD_ReadyWait+0x28>
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <SD_ReadyWait+0x34>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f3      	bne.n	8000e3c <SD_ReadyWait+0x10>
  
  return res;
 8000e54:	79fb      	ldrb	r3, [r7, #7]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200022f5 	.word	0x200022f5

08000e64 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000e6a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000e6e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000e70:	f7ff ff8a 	bl	8000d88 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	e005      	b.n	8000e86 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000e7a:	20ff      	movs	r0, #255	@ 0xff
 8000e7c:	f7ff ff90 	bl	8000da0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	3301      	adds	r3, #1
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	2b09      	cmp	r3, #9
 8000e8a:	ddf6      	ble.n	8000e7a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000e8c:	f7ff ff70 	bl	8000d70 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000ea4:	2395      	movs	r3, #149	@ 0x95
 8000ea6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	e009      	b.n	8000ec2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000eae:	1d3a      	adds	r2, r7, #4
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff72 	bl	8000da0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b05      	cmp	r3, #5
 8000ec6:	ddf2      	ble.n	8000eae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000ec8:	e002      	b.n	8000ed0 <SD_PowerOn+0x6c>
  {
    Count--;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000ed0:	f7ff ff80 	bl	8000dd4 <SPI_RxByte>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d002      	beq.n	8000ee0 <SD_PowerOn+0x7c>
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1f4      	bne.n	8000eca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000ee0:	f7ff ff52 	bl	8000d88 <DESELECT>
  SPI_TxByte(0XFF);
 8000ee4:	20ff      	movs	r0, #255	@ 0xff
 8000ee6:	f7ff ff5b 	bl	8000da0 <SPI_TxByte>
  
  PowerFlag = 1;
 8000eea:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <SD_PowerOn+0x94>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000089 	.word	0x20000089

08000efc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <SD_PowerOff+0x14>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20000089 	.word	0x20000089

08000f14 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000f18:	4b03      	ldr	r3, [pc, #12]	@ (8000f28 <SD_CheckPower+0x14>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000089 	.word	0x20000089

08000f2c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  timer1 = 10;
 8000f36:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <SD_RxDataBlock+0x68>)
 8000f38:	220a      	movs	r2, #10
 8000f3a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000f3c:	f7ff ff4a 	bl	8000dd4 <SPI_RxByte>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && timer1);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2bff      	cmp	r3, #255	@ 0xff
 8000f48:	d104      	bne.n	8000f54 <SD_RxDataBlock+0x28>
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <SD_RxDataBlock+0x68>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f3      	bne.n	8000f3c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f58:	d001      	beq.n	8000f5e <SD_RxDataBlock+0x32>
    return FALSE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e016      	b.n	8000f8c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1c5a      	adds	r2, r3, #1
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff53 	bl	8000e10 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	1c5a      	adds	r2, r3, #1
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff4d 	bl	8000e10 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ed      	bne.n	8000f5e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000f82:	f7ff ff27 	bl	8000dd4 <SPI_RxByte>
  SPI_RxByte();
 8000f86:	f7ff ff25 	bl	8000dd4 <SPI_RxByte>
  
  return TRUE;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200022f4 	.word	0x200022f4

08000f98 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000fa8:	f7ff ff40 	bl	8000e2c <SD_ReadyWait>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2bff      	cmp	r3, #255	@ 0xff
 8000fb0:	d001      	beq.n	8000fb6 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e040      	b.n	8001038 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff fef1 	bl	8000da0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2bfd      	cmp	r3, #253	@ 0xfd
 8000fc2:	d031      	beq.n	8001028 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fee5 	bl	8000da0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fede 	bl	8000da0 <SPI_TxByte>
    } while (--wc);
 8000fe4:	7bbb      	ldrb	r3, [r7, #14]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	73bb      	strb	r3, [r7, #14]
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1eb      	bne.n	8000fc8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000ff0:	f7ff fef0 	bl	8000dd4 <SPI_RxByte>
    SPI_RxByte();
 8000ff4:	f7ff feee 	bl	8000dd4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000ff8:	e00b      	b.n	8001012 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000ffa:	f7ff feeb 	bl	8000dd4 <SPI_RxByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	2b05      	cmp	r3, #5
 800100a:	d006      	beq.n	800101a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	3301      	adds	r3, #1
 8001010:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001012:	7b7b      	ldrb	r3, [r7, #13]
 8001014:	2b40      	cmp	r3, #64	@ 0x40
 8001016:	d9f0      	bls.n	8000ffa <SD_TxDataBlock+0x62>
 8001018:	e000      	b.n	800101c <SD_TxDataBlock+0x84>
        break;
 800101a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800101c:	bf00      	nop
 800101e:	f7ff fed9 	bl	8000dd4 <SPI_RxByte>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0fa      	beq.n	800101e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	f003 031f 	and.w	r3, r3, #31
 800102e:	2b05      	cmp	r3, #5
 8001030:	d101      	bne.n	8001036 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800104c:	f7ff feee 	bl	8000e2c <SD_ReadyWait>
 8001050:	4603      	mov	r3, r0
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d001      	beq.n	800105a <SD_SendCmd+0x1a>
    return 0xFF;
 8001056:	23ff      	movs	r3, #255	@ 0xff
 8001058:	e040      	b.n	80010dc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fe9f 	bl	8000da0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	0e1b      	lsrs	r3, r3, #24
 8001066:	b2db      	uxtb	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fe99 	bl	8000da0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	0c1b      	lsrs	r3, r3, #16
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fe93 	bl	8000da0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fe8d 	bl	8000da0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe88 	bl	8000da0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b40      	cmp	r3, #64	@ 0x40
 8001098:	d101      	bne.n	800109e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800109a:	2395      	movs	r3, #149	@ 0x95
 800109c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b48      	cmp	r3, #72	@ 0x48
 80010a2:	d101      	bne.n	80010a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80010a4:	2387      	movs	r3, #135	@ 0x87
 80010a6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe78 	bl	8000da0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b4c      	cmp	r3, #76	@ 0x4c
 80010b4:	d101      	bne.n	80010ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80010b6:	f7ff fe8d 	bl	8000dd4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80010ba:	230a      	movs	r3, #10
 80010bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80010be:	f7ff fe89 	bl	8000dd4 <SPI_RxByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80010c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	da05      	bge.n	80010da <SD_SendCmd+0x9a>
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f1      	bne.n	80010be <SD_SendCmd+0x7e>
  
  return res;
 80010da:	7b7b      	ldrb	r3, [r7, #13]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80010f4:	2301      	movs	r3, #1
 80010f6:	e0d5      	b.n	80012a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80010f8:	4b6c      	ldr	r3, [pc, #432]	@ (80012ac <SD_disk_initialize+0x1c8>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <SD_disk_initialize+0x2a>
    return Stat;        
 8001106:	4b69      	ldr	r3, [pc, #420]	@ (80012ac <SD_disk_initialize+0x1c8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	e0ca      	b.n	80012a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800110e:	f7ff fea9 	bl	8000e64 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001112:	f7ff fe2d 	bl	8000d70 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800111a:	2100      	movs	r1, #0
 800111c:	2040      	movs	r0, #64	@ 0x40
 800111e:	f7ff ff8f 	bl	8001040 <SD_SendCmd>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 80a5 	bne.w	8001274 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    timer1 = 100;
 800112a:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <SD_disk_initialize+0x1cc>)
 800112c:	2264      	movs	r2, #100	@ 0x64
 800112e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001130:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001134:	2048      	movs	r0, #72	@ 0x48
 8001136:	f7ff ff83 	bl	8001040 <SD_SendCmd>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d158      	bne.n	80011f2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e00c      	b.n	8001160 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001146:	7bfc      	ldrb	r4, [r7, #15]
 8001148:	f7ff fe44 	bl	8000dd4 <SPI_RxByte>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	f104 0310 	add.w	r3, r4, #16
 8001154:	443b      	add	r3, r7
 8001156:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	3301      	adds	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d9ef      	bls.n	8001146 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001166:	7abb      	ldrb	r3, [r7, #10]
 8001168:	2b01      	cmp	r3, #1
 800116a:	f040 8083 	bne.w	8001274 <SD_disk_initialize+0x190>
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	2baa      	cmp	r3, #170	@ 0xaa
 8001172:	d17f      	bne.n	8001274 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001174:	2100      	movs	r1, #0
 8001176:	2077      	movs	r0, #119	@ 0x77
 8001178:	f7ff ff62 	bl	8001040 <SD_SendCmd>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d807      	bhi.n	8001192 <SD_disk_initialize+0xae>
 8001182:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001186:	2069      	movs	r0, #105	@ 0x69
 8001188:	f7ff ff5a 	bl	8001040 <SD_SendCmd>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (timer1);
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <SD_disk_initialize+0x1cc>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1eb      	bne.n	8001174 <SD_disk_initialize+0x90>
 800119c:	e000      	b.n	80011a0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800119e:	bf00      	nop
        
        if (timer1 && SD_SendCmd(CMD58, 0) == 0)
 80011a0:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <SD_disk_initialize+0x1cc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d064      	beq.n	8001274 <SD_disk_initialize+0x190>
 80011aa:	2100      	movs	r1, #0
 80011ac:	207a      	movs	r0, #122	@ 0x7a
 80011ae:	f7ff ff47 	bl	8001040 <SD_SendCmd>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d15d      	bne.n	8001274 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e00c      	b.n	80011d8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80011be:	7bfc      	ldrb	r4, [r7, #15]
 80011c0:	f7ff fe08 	bl	8000dd4 <SPI_RxByte>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	f104 0310 	add.w	r3, r4, #16
 80011cc:	443b      	add	r3, r7
 80011ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d9ef      	bls.n	80011be <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80011de:	7a3b      	ldrb	r3, [r7, #8]
 80011e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SD_disk_initialize+0x108>
 80011e8:	2306      	movs	r3, #6
 80011ea:	e000      	b.n	80011ee <SD_disk_initialize+0x10a>
 80011ec:	2302      	movs	r3, #2
 80011ee:	73bb      	strb	r3, [r7, #14]
 80011f0:	e040      	b.n	8001274 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80011f2:	2100      	movs	r1, #0
 80011f4:	2077      	movs	r0, #119	@ 0x77
 80011f6:	f7ff ff23 	bl	8001040 <SD_SendCmd>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d808      	bhi.n	8001212 <SD_disk_initialize+0x12e>
 8001200:	2100      	movs	r1, #0
 8001202:	2069      	movs	r0, #105	@ 0x69
 8001204:	f7ff ff1c 	bl	8001040 <SD_SendCmd>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	d801      	bhi.n	8001212 <SD_disk_initialize+0x12e>
 800120e:	2302      	movs	r3, #2
 8001210:	e000      	b.n	8001214 <SD_disk_initialize+0x130>
 8001212:	2301      	movs	r3, #1
 8001214:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d10e      	bne.n	800123a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800121c:	2100      	movs	r1, #0
 800121e:	2077      	movs	r0, #119	@ 0x77
 8001220:	f7ff ff0e 	bl	8001040 <SD_SendCmd>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d80e      	bhi.n	8001248 <SD_disk_initialize+0x164>
 800122a:	2100      	movs	r1, #0
 800122c:	2069      	movs	r0, #105	@ 0x69
 800122e:	f7ff ff07 	bl	8001040 <SD_SendCmd>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d107      	bne.n	8001248 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001238:	e00d      	b.n	8001256 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800123a:	2100      	movs	r1, #0
 800123c:	2041      	movs	r0, #65	@ 0x41
 800123e:	f7ff feff 	bl	8001040 <SD_SendCmd>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (timer1);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <SD_disk_initialize+0x1cc>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e1      	bne.n	8001216 <SD_disk_initialize+0x132>
 8001252:	e000      	b.n	8001256 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001254:	bf00      	nop
      
      if (!timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <SD_disk_initialize+0x1cc>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <SD_disk_initialize+0x18c>
 8001260:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001264:	2050      	movs	r0, #80	@ 0x50
 8001266:	f7ff feeb 	bl	8001040 <SD_SendCmd>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001274:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <SD_disk_initialize+0x1d0>)
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800127a:	f7ff fd85 	bl	8000d88 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800127e:	f7ff fda9 	bl	8000dd4 <SPI_RxByte>
  
  if (type) 
 8001282:	7bbb      	ldrb	r3, [r7, #14]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <SD_disk_initialize+0x1c8>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	b2da      	uxtb	r2, r3
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SD_disk_initialize+0x1c8>)
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e001      	b.n	800129e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800129a:	f7ff fe2f 	bl	8000efc <SD_PowerOff>
  }
  
  return Stat;
 800129e:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <SD_disk_initialize+0x1c8>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd90      	pop	{r4, r7, pc}
 80012ac:	20000000 	.word	0x20000000
 80012b0:	200022f4 	.word	0x200022f4
 80012b4:	20000088 	.word	0x20000088

080012b8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80012c8:	2301      	movs	r3, #1
 80012ca:	e002      	b.n	80012d2 <SD_disk_status+0x1a>
  
  return Stat;
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SD_disk_status+0x28>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000000 	.word	0x20000000

080012e4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <SD_disk_read+0x1c>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <SD_disk_read+0x20>
    return RES_PARERR;
 8001300:	2304      	movs	r3, #4
 8001302:	e051      	b.n	80013a8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001304:	4b2a      	ldr	r3, [pc, #168]	@ (80013b0 <SD_disk_read+0xcc>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001312:	2303      	movs	r3, #3
 8001314:	e048      	b.n	80013a8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001316:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <SD_disk_read+0xd0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001328:	f7ff fd22 	bl	8000d70 <SELECT>
  
  if (count == 1) 
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d111      	bne.n	8001356 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	2051      	movs	r0, #81	@ 0x51
 8001336:	f7ff fe83 	bl	8001040 <SD_SendCmd>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d129      	bne.n	8001394 <SD_disk_read+0xb0>
 8001340:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001344:	68b8      	ldr	r0, [r7, #8]
 8001346:	f7ff fdf1 	bl	8000f2c <SD_RxDataBlock>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d021      	beq.n	8001394 <SD_disk_read+0xb0>
      count = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	e01e      	b.n	8001394 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	2052      	movs	r0, #82	@ 0x52
 800135a:	f7ff fe71 	bl	8001040 <SD_SendCmd>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d117      	bne.n	8001394 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001364:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f7ff fddf 	bl	8000f2c <SD_RxDataBlock>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00a      	beq.n	800138a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800137a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3b01      	subs	r3, #1
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d1ed      	bne.n	8001364 <SD_disk_read+0x80>
 8001388:	e000      	b.n	800138c <SD_disk_read+0xa8>
          break;
 800138a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800138c:	2100      	movs	r1, #0
 800138e:	204c      	movs	r0, #76	@ 0x4c
 8001390:	f7ff fe56 	bl	8001040 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001394:	f7ff fcf8 	bl	8000d88 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001398:	f7ff fd1c 	bl	8000dd4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	bf14      	ite	ne
 80013a2:	2301      	movne	r3, #1
 80013a4:	2300      	moveq	r3, #0
 80013a6:	b2db      	uxtb	r3, r3
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000088 	.word	0x20000088

080013b8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <SD_disk_write+0x1c>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <SD_disk_write+0x20>
    return RES_PARERR;
 80013d4:	2304      	movs	r3, #4
 80013d6:	e06b      	b.n	80014b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80013d8:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <SD_disk_write+0x100>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <SD_disk_write+0x32>
    return RES_NOTRDY;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e062      	b.n	80014b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80013ea:	4b33      	ldr	r3, [pc, #204]	@ (80014b8 <SD_disk_write+0x100>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SD_disk_write+0x44>
    return RES_WRPRT;
 80013f8:	2302      	movs	r3, #2
 80013fa:	e059      	b.n	80014b0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80013fc:	4b2f      	ldr	r3, [pc, #188]	@ (80014bc <SD_disk_write+0x104>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d102      	bne.n	800140e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	025b      	lsls	r3, r3, #9
 800140c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800140e:	f7ff fcaf 	bl	8000d70 <SELECT>
  
  if (count == 1) 
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d110      	bne.n	800143a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	2058      	movs	r0, #88	@ 0x58
 800141c:	f7ff fe10 	bl	8001040 <SD_SendCmd>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d13a      	bne.n	800149c <SD_disk_write+0xe4>
 8001426:	21fe      	movs	r1, #254	@ 0xfe
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff fdb5 	bl	8000f98 <SD_TxDataBlock>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d033      	beq.n	800149c <SD_disk_write+0xe4>
      count = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	e030      	b.n	800149c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <SD_disk_write+0x104>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	2077      	movs	r0, #119	@ 0x77
 800144a:	f7ff fdf9 	bl	8001040 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	2057      	movs	r0, #87	@ 0x57
 8001452:	f7ff fdf5 	bl	8001040 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	2059      	movs	r0, #89	@ 0x59
 800145a:	f7ff fdf1 	bl	8001040 <SD_SendCmd>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d11b      	bne.n	800149c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001464:	21fc      	movs	r1, #252	@ 0xfc
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	f7ff fd96 	bl	8000f98 <SD_TxDataBlock>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d00a      	beq.n	8001488 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001478:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	3b01      	subs	r3, #1
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <SD_disk_write+0xac>
 8001486:	e000      	b.n	800148a <SD_disk_write+0xd2>
          break;
 8001488:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800148a:	21fd      	movs	r1, #253	@ 0xfd
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fd83 	bl	8000f98 <SD_TxDataBlock>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <SD_disk_write+0xe4>
      {        
        count = 1;
 8001498:	2301      	movs	r3, #1
 800149a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800149c:	f7ff fc74 	bl	8000d88 <DESELECT>
  SPI_RxByte();
 80014a0:	f7ff fc98 	bl	8000dd4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000088 	.word	0x20000088

080014c0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b08b      	sub	sp, #44	@ 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	603a      	str	r2, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
 80014cc:	460b      	mov	r3, r1
 80014ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80014da:	2304      	movs	r3, #4
 80014dc:	e119      	b.n	8001712 <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 80014e4:	79bb      	ldrb	r3, [r7, #6]
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d129      	bne.n	800153e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d017      	beq.n	8001522 <SD_disk_ioctl+0x62>
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	dc1f      	bgt.n	8001536 <SD_disk_ioctl+0x76>
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <SD_disk_ioctl+0x40>
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d00b      	beq.n	8001516 <SD_disk_ioctl+0x56>
 80014fe:	e01a      	b.n	8001536 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001500:	f7ff fd08 	bl	8000f14 <SD_CheckPower>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800150a:	f7ff fcf7 	bl	8000efc <SD_PowerOff>
      res = RES_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001514:	e0fb      	b.n	800170e <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001516:	f7ff fca5 	bl	8000e64 <SD_PowerOn>
      res = RES_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001520:	e0f5      	b.n	800170e <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	1c5c      	adds	r4, r3, #1
 8001526:	f7ff fcf5 	bl	8000f14 <SD_CheckPower>
 800152a:	4603      	mov	r3, r0
 800152c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800152e:	2300      	movs	r3, #0
 8001530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001534:	e0eb      	b.n	800170e <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001536:	2304      	movs	r3, #4
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800153c:	e0e7      	b.n	800170e <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800153e:	4b77      	ldr	r3, [pc, #476]	@ (800171c <SD_disk_ioctl+0x25c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800154c:	2303      	movs	r3, #3
 800154e:	e0e0      	b.n	8001712 <SD_disk_ioctl+0x252>
    
    SELECT();
 8001550:	f7ff fc0e 	bl	8000d70 <SELECT>
    
    switch (ctrl) 
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b0d      	cmp	r3, #13
 8001558:	f200 80ca 	bhi.w	80016f0 <SD_disk_ioctl+0x230>
 800155c:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <SD_disk_ioctl+0xa4>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	0800165b 	.word	0x0800165b
 8001568:	0800159d 	.word	0x0800159d
 800156c:	0800164b 	.word	0x0800164b
 8001570:	080016f1 	.word	0x080016f1
 8001574:	080016f1 	.word	0x080016f1
 8001578:	080016f1 	.word	0x080016f1
 800157c:	080016f1 	.word	0x080016f1
 8001580:	080016f1 	.word	0x080016f1
 8001584:	080016f1 	.word	0x080016f1
 8001588:	080016f1 	.word	0x080016f1
 800158c:	080016f1 	.word	0x080016f1
 8001590:	0800166d 	.word	0x0800166d
 8001594:	08001691 	.word	0x08001691
 8001598:	080016b5 	.word	0x080016b5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800159c:	2100      	movs	r1, #0
 800159e:	2049      	movs	r0, #73	@ 0x49
 80015a0:	f7ff fd4e 	bl	8001040 <SD_SendCmd>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f040 80a6 	bne.w	80016f8 <SD_disk_ioctl+0x238>
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2110      	movs	r1, #16
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fcba 	bl	8000f2c <SD_RxDataBlock>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 809c 	beq.w	80016f8 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 80015c0:	7b3b      	ldrb	r3, [r7, #12]
 80015c2:	099b      	lsrs	r3, r3, #6
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10d      	bne.n	80015e6 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80015ca:	7d7b      	ldrb	r3, [r7, #21]
 80015cc:	461a      	mov	r2, r3
 80015ce:	7d3b      	ldrb	r3, [r7, #20]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3301      	adds	r3, #1
 80015da:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80015dc:	8bfb      	ldrh	r3, [r7, #30]
 80015de:	029a      	lsls	r2, r3, #10
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	e02d      	b.n	8001642 <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80015e6:	7c7b      	ldrb	r3, [r7, #17]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	7dbb      	ldrb	r3, [r7, #22]
 80015f0:	09db      	lsrs	r3, r3, #7
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	4413      	add	r3, r2
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	f003 0306 	and.w	r3, r3, #6
 8001602:	b2db      	uxtb	r3, r3
 8001604:	4413      	add	r3, r2
 8001606:	b2db      	uxtb	r3, r3
 8001608:	3302      	adds	r3, #2
 800160a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800160e:	7d3b      	ldrb	r3, [r7, #20]
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b29a      	uxth	r2, r3
 8001620:	7cbb      	ldrb	r3, [r7, #18]
 8001622:	029b      	lsls	r3, r3, #10
 8001624:	b29b      	uxth	r3, r3
 8001626:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800162a:	b29b      	uxth	r3, r3
 800162c:	4413      	add	r3, r2
 800162e:	b29b      	uxth	r3, r3
 8001630:	3301      	adds	r3, #1
 8001632:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001634:	8bfa      	ldrh	r2, [r7, #30]
 8001636:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800163a:	3b09      	subs	r3, #9
 800163c:	409a      	lsls	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001648:	e056      	b.n	80016f8 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001658:	e055      	b.n	8001706 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800165a:	f7ff fbe7 	bl	8000e2c <SD_ReadyWait>
 800165e:	4603      	mov	r3, r0
 8001660:	2bff      	cmp	r3, #255	@ 0xff
 8001662:	d14b      	bne.n	80016fc <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800166a:	e047      	b.n	80016fc <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800166c:	2100      	movs	r1, #0
 800166e:	2049      	movs	r0, #73	@ 0x49
 8001670:	f7ff fce6 	bl	8001040 <SD_SendCmd>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d142      	bne.n	8001700 <SD_disk_ioctl+0x240>
 800167a:	2110      	movs	r1, #16
 800167c:	6a38      	ldr	r0, [r7, #32]
 800167e:	f7ff fc55 	bl	8000f2c <SD_RxDataBlock>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d03b      	beq.n	8001700 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800168e:	e037      	b.n	8001700 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001690:	2100      	movs	r1, #0
 8001692:	204a      	movs	r0, #74	@ 0x4a
 8001694:	f7ff fcd4 	bl	8001040 <SD_SendCmd>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d132      	bne.n	8001704 <SD_disk_ioctl+0x244>
 800169e:	2110      	movs	r1, #16
 80016a0:	6a38      	ldr	r0, [r7, #32]
 80016a2:	f7ff fc43 	bl	8000f2c <SD_RxDataBlock>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d02b      	beq.n	8001704 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80016b2:	e027      	b.n	8001704 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80016b4:	2100      	movs	r1, #0
 80016b6:	207a      	movs	r0, #122	@ 0x7a
 80016b8:	f7ff fcc2 	bl	8001040 <SD_SendCmd>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d116      	bne.n	80016f0 <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016c8:	e00b      	b.n	80016e2 <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80016ca:	6a3c      	ldr	r4, [r7, #32]
 80016cc:	1c63      	adds	r3, r4, #1
 80016ce:	623b      	str	r3, [r7, #32]
 80016d0:	f7ff fb80 	bl	8000dd4 <SPI_RxByte>
 80016d4:	4603      	mov	r3, r0
 80016d6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80016d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016dc:	3301      	adds	r3, #1
 80016de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80016e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d9ef      	bls.n	80016ca <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 80016f0:	2304      	movs	r3, #4
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80016f6:	e006      	b.n	8001706 <SD_disk_ioctl+0x246>
      break;
 80016f8:	bf00      	nop
 80016fa:	e004      	b.n	8001706 <SD_disk_ioctl+0x246>
      break;
 80016fc:	bf00      	nop
 80016fe:	e002      	b.n	8001706 <SD_disk_ioctl+0x246>
      break;
 8001700:	bf00      	nop
 8001702:	e000      	b.n	8001706 <SD_disk_ioctl+0x246>
      break;
 8001704:	bf00      	nop
    }
    
    DESELECT();
 8001706:	f7ff fb3f 	bl	8000d88 <DESELECT>
    SPI_RxByte();
 800170a:	f7ff fb63 	bl	8000dd4 <SPI_RxByte>
  }
  
  return res;
 800170e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001712:	4618      	mov	r0, r3
 8001714:	372c      	adds	r7, #44	@ 0x2c
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_TIM_PeriodElapsedCallback>:
float Text1, Text2;  // External torque estimation (Nm)
// External Torque Estimations
float Text1, Text2;
HAL_StatusTypeDef status;
uint16_t OutputVref=5000;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM13) {
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0f      	ldr	r2, [pc, #60]	@ (800176c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d118      	bne.n	8001764 <HAL_TIM_PeriodElapsedCallback+0x44>
    	if (SDCardRecordMode==1){
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d014      	beq.n	8001764 <HAL_TIM_PeriodElapsedCallback+0x44>
            record_number++;*/
        }

    		else {
    			   // Send RGB values to ESP32
    				uint8_t txData[3] = {100, 0, 0};
 800173a:	4a0e      	ldr	r2, [pc, #56]	@ (8001774 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	4611      	mov	r1, r2
 8001744:	8019      	strh	r1, [r3, #0]
 8001746:	3302      	adds	r3, #2
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	701a      	strb	r2, [r3, #0]
    			    HAL_SPI_Transmit(&hspi4, txData, 3, HAL_MAX_DELAY);
 800174c:	f107 010c 	add.w	r1, r7, #12
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
 8001754:	2203      	movs	r2, #3
 8001756:	4808      	ldr	r0, [pc, #32]	@ (8001778 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001758:	f002 f9f7 	bl	8003b4a <HAL_SPI_Transmit>
    			    HAL_Delay(500);  // Delay between transmissions for clarity
 800175c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001760:	f001 f882 	bl	8002868 <HAL_Delay>
    		}
    }
}
 8001764:	bf00      	nop
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40001c00 	.word	0x40001c00
 8001770:	200022ac 	.word	0x200022ac
 8001774:	080075a0 	.word	0x080075a0
 8001778:	200000a0 	.word	0x200000a0

0800177c <applyLowPassFilterVelocity>:
float applyLowPassFilterVelocity(float X, float Y_old) {
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	ed87 0a01 	vstr	s0, [r7, #4]
 8001786:	edc7 0a00 	vstr	s1, [r7]
    // Apply the first-order low-pass filter formula
    float Y = Y_old + G * (X - Y_old);
 800178a:	ed97 7a01 	vldr	s14, [r7, #4]
 800178e:	edd7 7a00 	vldr	s15, [r7]
 8001792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001796:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80017c0 <applyLowPassFilterVelocity+0x44>
 800179a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179e:	ed97 7a00 	vldr	s14, [r7]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the filtered output
    return Y;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	ee07 3a90 	vmov	s15, r3
}
 80017b0:	eeb0 0a67 	vmov.f32	s0, s15
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	3dcccccd 	.word	0x3dcccccd

080017c4 <ConfigureMotor01>:
void ConfigureMotor01(int Enable, int Clockwise, uint16_t dac_value) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	4613      	mov	r3, r2
 80017d0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, Clockwise);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	2110      	movs	r1, #16
 80017da:	480a      	ldr	r0, [pc, #40]	@ (8001804 <ConfigureMotor01+0x40>)
 80017dc:	f001 fc9a 	bl	8003114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, Enable);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	461a      	mov	r2, r3
 80017e6:	2120      	movs	r1, #32
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <ConfigureMotor01+0x40>)
 80017ea:	f001 fc93 	bl	8003114 <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2200      	movs	r2, #0
 80017f2:	2100      	movs	r1, #0
 80017f4:	4804      	ldr	r0, [pc, #16]	@ (8001808 <ConfigureMotor01+0x44>)
 80017f6:	f001 fa5e 	bl	8002cb6 <HAL_DAC_SetValue>

}
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40020400 	.word	0x40020400
 8001808:	2000008c 	.word	0x2000008c

0800180c <ConfigureMotor02>:
void ConfigureMotor02(int Enable, int Clockwise, uint16_t dac_value) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	4613      	mov	r3, r2
 8001818:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, Clockwise);
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	461a      	mov	r2, r3
 8001820:	2104      	movs	r1, #4
 8001822:	480a      	ldr	r0, [pc, #40]	@ (800184c <ConfigureMotor02+0x40>)
 8001824:	f001 fc76 	bl	8003114 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3, Enable);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	2108      	movs	r1, #8
 8001830:	4806      	ldr	r0, [pc, #24]	@ (800184c <ConfigureMotor02+0x40>)
 8001832:	f001 fc6f 	bl	8003114 <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2200      	movs	r2, #0
 800183a:	2110      	movs	r1, #16
 800183c:	4804      	ldr	r0, [pc, #16]	@ (8001850 <ConfigureMotor02+0x44>)
 800183e:	f001 fa3a 	bl	8002cb6 <HAL_DAC_SetValue>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40020000 	.word	0x40020000
 8001850:	2000008c 	.word	0x2000008c
 8001854:	00000000 	.word	0x00000000

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800185e:	f000 fda7 	bl	80023b0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f000 ffa4 	bl	80027ae <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 fafb 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186a:	f000 fcf3 	bl	8002254 <MX_GPIO_Init>
  MX_TIM1_Init();
 800186e:	f000 fbcf 	bl	8002010 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001872:	f000 fc75 	bl	8002160 <MX_TIM4_Init>
  MX_TIM13_Init();
 8001876:	f000 fcc9 	bl	800220c <MX_TIM13_Init>
  MX_SPI4_Init();
 800187a:	f000 fb8b 	bl	8001f94 <MX_SPI4_Init>
  MX_FATFS_Init();
 800187e:	f003 fd17 	bl	80052b0 <MX_FATFS_Init>
  MX_TIM2_Init();
 8001882:	f000 fc1f 	bl	80020c4 <MX_TIM2_Init>
  MX_DAC_Init();
 8001886:	f000 fb51 	bl	8001f2c <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  // Start encoder timers
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800188a:	213c      	movs	r1, #60	@ 0x3c
 800188c:	48bc      	ldr	r0, [pc, #752]	@ (8001b80 <main+0x328>)
 800188e:	f003 f86f 	bl	8004970 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001892:	213c      	movs	r1, #60	@ 0x3c
 8001894:	48bb      	ldr	r0, [pc, #748]	@ (8001b84 <main+0x32c>)
 8001896:	f003 f86b 	bl	8004970 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim13);  // Start TIM2 in interrupt mode
 800189a:	48bb      	ldr	r0, [pc, #748]	@ (8001b88 <main+0x330>)
 800189c:	f002 ff4a 	bl	8004734 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 80018a0:	48ba      	ldr	r0, [pc, #744]	@ (8001b8c <main+0x334>)
 80018a2:	f002 fed7 	bl	8004654 <HAL_TIM_Base_Start>

  // Mount the filesystem
  fresult = f_mount(&fs, "", 1);
 80018a6:	2201      	movs	r2, #1
 80018a8:	49b9      	ldr	r1, [pc, #740]	@ (8001b90 <main+0x338>)
 80018aa:	48ba      	ldr	r0, [pc, #744]	@ (8001b94 <main+0x33c>)
 80018ac:	f005 fb2e 	bl	8006f0c <f_mount>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4bb8      	ldr	r3, [pc, #736]	@ (8001b98 <main+0x340>)
 80018b6:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) {
 80018b8:	4bb7      	ldr	r3, [pc, #732]	@ (8001b98 <main+0x340>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d113      	bne.n	80018e8 <main+0x90>
      // Optional: Handle mount failure
      // e.g., flash LED or set flag to disable SD logging
      // while (1);  // You can also skip this if you want MCU to continue
  } else {
      // Create a new file if mount was successful
      fresult = f_open(&fil, "Data.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80018c0:	220a      	movs	r2, #10
 80018c2:	49b6      	ldr	r1, [pc, #728]	@ (8001b9c <main+0x344>)
 80018c4:	48b6      	ldr	r0, [pc, #728]	@ (8001ba0 <main+0x348>)
 80018c6:	f005 fb67 	bl	8006f98 <f_open>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	4bb2      	ldr	r3, [pc, #712]	@ (8001b98 <main+0x340>)
 80018d0:	701a      	strb	r2, [r3, #0]
      if (fresult == FR_OK) {
 80018d2:	4bb1      	ldr	r3, [pc, #708]	@ (8001b98 <main+0x340>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <main+0x90>
          fresult = f_close(&fil);
 80018da:	48b1      	ldr	r0, [pc, #708]	@ (8001ba0 <main+0x348>)
 80018dc:	f005 fda2 	bl	8007424 <f_close>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4bac      	ldr	r3, [pc, #688]	@ (8001b98 <main+0x340>)
 80018e6:	701a      	strb	r2, [r3, #0]
      }
  }
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80018e8:	2100      	movs	r1, #0
 80018ea:	48ae      	ldr	r0, [pc, #696]	@ (8001ba4 <main+0x34c>)
 80018ec:	f001 f98c 	bl	8002c08 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 80018f0:	2110      	movs	r1, #16
 80018f2:	48ac      	ldr	r0, [pc, #688]	@ (8001ba4 <main+0x34c>)
 80018f4:	f001 f988 	bl	8002c08 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t time_start = __HAL_TIM_GET_COUNTER(&htim2);
 80018f8:	4ba4      	ldr	r3, [pc, #656]	@ (8001b8c <main+0x334>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	607b      	str	r3, [r7, #4]
	  MainloopCount++;
 8001900:	4ba9      	ldr	r3, [pc, #676]	@ (8001ba8 <main+0x350>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4aa8      	ldr	r2, [pc, #672]	@ (8001ba8 <main+0x350>)
 8001908:	6013      	str	r3, [r2, #0]
	  OutputVref++;
 800190a:	4ba8      	ldr	r3, [pc, #672]	@ (8001bac <main+0x354>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	b29a      	uxth	r2, r3
 8001912:	4ba6      	ldr	r3, [pc, #664]	@ (8001bac <main+0x354>)
 8001914:	801a      	strh	r2, [r3, #0]
	  if(OutputVref>4000){
 8001916:	4ba5      	ldr	r3, [pc, #660]	@ (8001bac <main+0x354>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800191e:	d902      	bls.n	8001926 <main+0xce>
		  OutputVref=0;
 8001920:	4ba2      	ldr	r3, [pc, #648]	@ (8001bac <main+0x354>)
 8001922:	2200      	movs	r2, #0
 8001924:	801a      	strh	r2, [r3, #0]
	  }
	  EncoderUpdated = 0;
 8001926:	4ba2      	ldr	r3, [pc, #648]	@ (8001bb0 <main+0x358>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
	  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 800192c:	4b95      	ldr	r3, [pc, #596]	@ (8001b84 <main+0x32c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	4aa0      	ldr	r2, [pc, #640]	@ (8001bb4 <main+0x35c>)
 8001934:	6013      	str	r3, [r2, #0]
	  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001936:	4b92      	ldr	r3, [pc, #584]	@ (8001b80 <main+0x328>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	4a9e      	ldr	r2, [pc, #632]	@ (8001bb8 <main+0x360>)
 800193e:	6013      	str	r3, [r2, #0]
	  EncoderUpdated = 1;
 8001940:	4b9b      	ldr	r3, [pc, #620]	@ (8001bb0 <main+0x358>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
	  secondFromStart=__HAL_TIM_GET_COUNTER(&htim2)/100000;
 8001946:	4b91      	ldr	r3, [pc, #580]	@ (8001b8c <main+0x334>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	095b      	lsrs	r3, r3, #5
 800194e:	4a9b      	ldr	r2, [pc, #620]	@ (8001bbc <main+0x364>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	09db      	lsrs	r3, r3, #7
 8001956:	4a9a      	ldr	r2, [pc, #616]	@ (8001bc0 <main+0x368>)
 8001958:	6013      	str	r3, [r2, #0]
	  // Compute **Encoder 1** Position, Velocity, & Acceleration
	  theta1 = (float)(encoder_ticks) * 2.0f * M_PI / (float)CPR;
 800195a:	4b96      	ldr	r3, [pc, #600]	@ (8001bb4 <main+0x35c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001966:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fdaf 	bl	80004d0 <__aeabi_f2d>
 8001972:	a37f      	add	r3, pc, #508	@ (adr r3, 8001b70 <main+0x318>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe02 	bl	8000580 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a37c      	add	r3, pc, #496	@ (adr r3, 8001b78 <main+0x320>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe ff23 	bl	80007d4 <__aeabi_ddiv>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7ff f805 	bl	80009a4 <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	4a89      	ldr	r2, [pc, #548]	@ (8001bc4 <main+0x36c>)
 800199e:	6013      	str	r3, [r2, #0]
	  velocity1 = (theta1 - theta1_prev) * 1000000  / time_interval;
 80019a0:	4b88      	ldr	r3, [pc, #544]	@ (8001bc4 <main+0x36c>)
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	4b88      	ldr	r3, [pc, #544]	@ (8001bc8 <main+0x370>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001bcc <main+0x374>
 80019b4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019b8:	4b85      	ldr	r3, [pc, #532]	@ (8001bd0 <main+0x378>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c8:	4b82      	ldr	r3, [pc, #520]	@ (8001bd4 <main+0x37c>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	  acceleration1 = (velocity1 - velocity1_prev) * 1000000  / time_interval;
 80019ce:	4b81      	ldr	r3, [pc, #516]	@ (8001bd4 <main+0x37c>)
 80019d0:	ed93 7a00 	vldr	s14, [r3]
 80019d4:	4b80      	ldr	r3, [pc, #512]	@ (8001bd8 <main+0x380>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8001bcc <main+0x374>
 80019e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80019e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd0 <main+0x378>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	ee07 3a90 	vmov	s15, r3
 80019ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f6:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <main+0x384>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]

	  // Apply low-pass filter on the velocity of Encoder 1
	  velocity1 = applyLowPassFilterVelocity(velocity1, velocity1_prev);  // Filtered velocity
 80019fc:	4b75      	ldr	r3, [pc, #468]	@ (8001bd4 <main+0x37c>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	4b75      	ldr	r3, [pc, #468]	@ (8001bd8 <main+0x380>)
 8001a04:	ed93 7a00 	vldr	s14, [r3]
 8001a08:	eef0 0a47 	vmov.f32	s1, s14
 8001a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a10:	f7ff feb4 	bl	800177c <applyLowPassFilterVelocity>
 8001a14:	eef0 7a40 	vmov.f32	s15, s0
 8001a18:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd4 <main+0x37c>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]

	  theta1_prev = theta1;
 8001a1e:	4b69      	ldr	r3, [pc, #420]	@ (8001bc4 <main+0x36c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a69      	ldr	r2, [pc, #420]	@ (8001bc8 <main+0x370>)
 8001a24:	6013      	str	r3, [r2, #0]
	  velocity1_prev = velocity1;
 8001a26:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd4 <main+0x37c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	@ (8001bd8 <main+0x380>)
 8001a2c:	6013      	str	r3, [r2, #0]

	  // Compute **Encoder 2** Position, Velocity, & Acceleration
	  theta2 = (float)(encoder_ticks2) * 2.0f * M_PI / (float)CPR;
 8001a2e:	4b62      	ldr	r3, [pc, #392]	@ (8001bb8 <main+0x360>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a3e:	ee17 0a90 	vmov	r0, s15
 8001a42:	f7fe fd45 	bl	80004d0 <__aeabi_f2d>
 8001a46:	a34a      	add	r3, pc, #296	@ (adr r3, 8001b70 <main+0x318>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7fe fd98 	bl	8000580 <__aeabi_dmul>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	a347      	add	r3, pc, #284	@ (adr r3, 8001b78 <main+0x320>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe feb9 	bl	80007d4 <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7fe ff9b 	bl	80009a4 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a5b      	ldr	r2, [pc, #364]	@ (8001be0 <main+0x388>)
 8001a72:	6013      	str	r3, [r2, #0]
	  velocity2 = (theta2 - theta2_prev) * 1000000  / time_interval;
 8001a74:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <main+0x388>)
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <main+0x38c>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a84:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8001bcc <main+0x374>
 8001a88:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001a8c:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <main+0x378>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9c:	4b52      	ldr	r3, [pc, #328]	@ (8001be8 <main+0x390>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
	  acceleration2 = (velocity2 - velocity2_prev) * 1000000  / time_interval;
 8001aa2:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <main+0x390>)
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4b50      	ldr	r3, [pc, #320]	@ (8001bec <main+0x394>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab2:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001bcc <main+0x374>
 8001ab6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001aba:	4b45      	ldr	r3, [pc, #276]	@ (8001bd0 <main+0x378>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aca:	4b49      	ldr	r3, [pc, #292]	@ (8001bf0 <main+0x398>)
 8001acc:	edc3 7a00 	vstr	s15, [r3]

	  // Apply low-pass filter on the velocity of Encoder 2
	  velocity2 = applyLowPassFilterVelocity(velocity2, velocity2_prev);  // Filtered velocity
 8001ad0:	4b45      	ldr	r3, [pc, #276]	@ (8001be8 <main+0x390>)
 8001ad2:	edd3 7a00 	vldr	s15, [r3]
 8001ad6:	4b45      	ldr	r3, [pc, #276]	@ (8001bec <main+0x394>)
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	eef0 0a47 	vmov.f32	s1, s14
 8001ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae4:	f7ff fe4a 	bl	800177c <applyLowPassFilterVelocity>
 8001ae8:	eef0 7a40 	vmov.f32	s15, s0
 8001aec:	4b3e      	ldr	r3, [pc, #248]	@ (8001be8 <main+0x390>)
 8001aee:	edc3 7a00 	vstr	s15, [r3]
	  theta2_prev = theta2;
 8001af2:	4b3b      	ldr	r3, [pc, #236]	@ (8001be0 <main+0x388>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a3b      	ldr	r2, [pc, #236]	@ (8001be4 <main+0x38c>)
 8001af8:	6013      	str	r3, [r2, #0]
	  velocity2_prev = velocity2;
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <main+0x390>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a3b      	ldr	r2, [pc, #236]	@ (8001bec <main+0x394>)
 8001b00:	6013      	str	r3, [r2, #0]
	  // Disturbance Observers //
	  Tdis1 = (Icmd1 * Ktn1 + velocity1 * Jn1 * Gdis1) * Gdis1 / (time_interval + Gdis1) - velocity1 * Jn1 * Gdis1;
 8001b02:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf4 <main+0x39c>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf8 <main+0x3a0>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b12:	4b30      	ldr	r3, [pc, #192]	@ (8001bd4 <main+0x37c>)
 8001b14:	edd3 6a00 	vldr	s13, [r3]
 8001b18:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <main+0x3a4>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b22:	4b37      	ldr	r3, [pc, #220]	@ (8001c00 <main+0x3a8>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b30:	4b33      	ldr	r3, [pc, #204]	@ (8001c00 <main+0x3a8>)
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b3a:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <main+0x378>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b46:	4b2e      	ldr	r3, [pc, #184]	@ (8001c00 <main+0x3a8>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b54:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <main+0x37c>)
 8001b56:	edd3 6a00 	vldr	s13, [r3]
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <main+0x3a4>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b64:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <main+0x3a8>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6e:	e049      	b.n	8001c04 <main+0x3ac>
 8001b70:	54442d18 	.word	0x54442d18
 8001b74:	400921fb 	.word	0x400921fb
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40dc2b80 	.word	0x40dc2b80
 8001b80:	2000019c 	.word	0x2000019c
 8001b84:	20000104 	.word	0x20000104
 8001b88:	200001e8 	.word	0x200001e8
 8001b8c:	20000150 	.word	0x20000150
 8001b90:	080075a4 	.word	0x080075a4
 8001b94:	20000240 	.word	0x20000240
 8001b98:	200022a4 	.word	0x200022a4
 8001b9c:	080075a8 	.word	0x080075a8
 8001ba0:	20001274 	.word	0x20001274
 8001ba4:	2000008c 	.word	0x2000008c
 8001ba8:	2000023c 	.word	0x2000023c
 8001bac:	20000048 	.word	0x20000048
 8001bb0:	200022a8 	.word	0x200022a8
 8001bb4:	20000234 	.word	0x20000234
 8001bb8:	20000238 	.word	0x20000238
 8001bbc:	0a7c5ac5 	.word	0x0a7c5ac5
 8001bc0:	200022b0 	.word	0x200022b0
 8001bc4:	200022b4 	.word	0x200022b4
 8001bc8:	200022bc 	.word	0x200022bc
 8001bcc:	49742400 	.word	0x49742400
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	200022c4 	.word	0x200022c4
 8001bd8:	200022cc 	.word	0x200022cc
 8001bdc:	200022d4 	.word	0x200022d4
 8001be0:	200022b8 	.word	0x200022b8
 8001be4:	200022c0 	.word	0x200022c0
 8001be8:	200022c8 	.word	0x200022c8
 8001bec:	200022d0 	.word	0x200022d0
 8001bf0:	200022d8 	.word	0x200022d8
 8001bf4:	20000008 	.word	0x20000008
 8001bf8:	2000000c 	.word	0x2000000c
 8001bfc:	20000010 	.word	0x20000010
 8001c00:	20000014 	.word	0x20000014
 8001c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c08:	4b7d      	ldr	r3, [pc, #500]	@ (8001e00 <main+0x5a8>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2) - velocity2 * Jn2 * Gdis2;
 8001c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8001e04 <main+0x5ac>)
 8001c10:	ed93 7a00 	vldr	s14, [r3]
 8001c14:	4b7c      	ldr	r3, [pc, #496]	@ (8001e08 <main+0x5b0>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e0c <main+0x5b4>)
 8001c20:	edd3 6a00 	vldr	s13, [r3]
 8001c24:	4b7a      	ldr	r3, [pc, #488]	@ (8001e10 <main+0x5b8>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c2e:	4b79      	ldr	r3, [pc, #484]	@ (8001e14 <main+0x5bc>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3c:	4b75      	ldr	r3, [pc, #468]	@ (8001e14 <main+0x5bc>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c46:	4b74      	ldr	r3, [pc, #464]	@ (8001e18 <main+0x5c0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	ee07 3a90 	vmov	s15, r3
 8001c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c52:	4b70      	ldr	r3, [pc, #448]	@ (8001e14 <main+0x5bc>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c60:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <main+0x5b4>)
 8001c62:	edd3 6a00 	vldr	s13, [r3]
 8001c66:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <main+0x5b8>)
 8001c68:	edd3 7a00 	vldr	s15, [r3]
 8001c6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c70:	4b68      	ldr	r3, [pc, #416]	@ (8001e14 <main+0x5bc>)
 8001c72:	edd3 7a00 	vldr	s15, [r3]
 8001c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c7e:	4b67      	ldr	r3, [pc, #412]	@ (8001e1c <main+0x5c4>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
	  Idis1=Tdis1*Kt1;
 8001c84:	4b5e      	ldr	r3, [pc, #376]	@ (8001e00 <main+0x5a8>)
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	4b65      	ldr	r3, [pc, #404]	@ (8001e20 <main+0x5c8>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	4b63      	ldr	r3, [pc, #396]	@ (8001e24 <main+0x5cc>)
 8001c96:	edc3 7a00 	vstr	s15, [r3]
	  Idis2=Tdis2*Kt2;
 8001c9a:	4b60      	ldr	r3, [pc, #384]	@ (8001e1c <main+0x5c4>)
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	4b61      	ldr	r3, [pc, #388]	@ (8001e28 <main+0x5d0>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001caa:	4b60      	ldr	r3, [pc, #384]	@ (8001e2c <main+0x5d4>)
 8001cac:	edc3 7a00 	vstr	s15, [r3]
	  Text1=(Icmd1*(1/Kt1)+velocity1 * Jn1 * Grtob1-(Fint+Ffric))*Grtob1/(time_interval + Grtob1)-velocity1 * Jn1 * Grtob1;
 8001cb0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e20 <main+0x5c8>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001e30 <main+0x5d8>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cc8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e34 <main+0x5dc>)
 8001cca:	edd3 6a00 	vldr	s13, [r3]
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <main+0x5e0>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cd8:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <main+0x5e4>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce6:	4b56      	ldr	r3, [pc, #344]	@ (8001e40 <main+0x5e8>)
 8001ce8:	edd3 6a00 	vldr	s13, [r3]
 8001cec:	4b55      	ldr	r3, [pc, #340]	@ (8001e44 <main+0x5ec>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfa:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <main+0x5e4>)
 8001cfc:	edd3 7a00 	vldr	s15, [r3]
 8001d00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d04:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <main+0x5c0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	ee07 3a90 	vmov	s15, r3
 8001d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d10:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <main+0x5e4>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d1e:	4b45      	ldr	r3, [pc, #276]	@ (8001e34 <main+0x5dc>)
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	4b44      	ldr	r3, [pc, #272]	@ (8001e38 <main+0x5e0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d2e:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <main+0x5e4>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <main+0x5f0>)
 8001d3e:	edc3 7a00 	vstr	s15, [r3]
	  Text2 = (Icmd2 * (1 / Kt2) + velocity2 * Jn2 * Grtob2 - (Fint2 + Ffric2)) * Grtob2 / (time_interval + Grtob2) - velocity2 * Jn2 * Grtob2;
 8001d42:	4b39      	ldr	r3, [pc, #228]	@ (8001e28 <main+0x5d0>)
 8001d44:	edd3 7a00 	vldr	s15, [r3]
 8001d48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d50:	4b2c      	ldr	r3, [pc, #176]	@ (8001e04 <main+0x5ac>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e0c <main+0x5b4>)
 8001d5c:	edd3 6a00 	vldr	s13, [r3]
 8001d60:	4b2b      	ldr	r3, [pc, #172]	@ (8001e10 <main+0x5b8>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6a:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <main+0x5f4>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d78:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <main+0x5f8>)
 8001d7a:	edd3 6a00 	vldr	s13, [r3]
 8001d7e:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <main+0x5fc>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <main+0x5f4>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <main+0x5c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <main+0x5f4>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db0:	4b16      	ldr	r3, [pc, #88]	@ (8001e0c <main+0x5b4>)
 8001db2:	edd3 6a00 	vldr	s13, [r3]
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <main+0x5b8>)
 8001db8:	edd3 7a00 	vldr	s15, [r3]
 8001dbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dc0:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <main+0x5f4>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <main+0x600>)
 8001dd0:	edc3 7a00 	vstr	s15, [r3]
	  // Set the DAC output voltage

	  ConfigureMotor01(1, 1, 2000);
 8001dd4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fcf2 	bl	80017c4 <ConfigureMotor01>
	  ConfigureMotor02(1, 0, 2000);
 8001de0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7ff fd10 	bl	800180c <ConfigureMotor02>
	  uint32_t time_end = __HAL_TIM_GET_COUNTER(&htim2);
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <main+0x604>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	603b      	str	r3, [r7, #0]
	  time_interval = time_end - time_start;
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <main+0x5c0>)
 8001dfc:	6013      	str	r3, [r2, #0]
  {
 8001dfe:	e57b      	b.n	80018f8 <main+0xa0>
 8001e00:	200022dc 	.word	0x200022dc
 8001e04:	20000028 	.word	0x20000028
 8001e08:	2000002c 	.word	0x2000002c
 8001e0c:	200022c8 	.word	0x200022c8
 8001e10:	20000030 	.word	0x20000030
 8001e14:	20000034 	.word	0x20000034
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	200022e0 	.word	0x200022e0
 8001e20:	20000018 	.word	0x20000018
 8001e24:	200022e4 	.word	0x200022e4
 8001e28:	20000038 	.word	0x20000038
 8001e2c:	200022e8 	.word	0x200022e8
 8001e30:	20000008 	.word	0x20000008
 8001e34:	200022c4 	.word	0x200022c4
 8001e38:	20000010 	.word	0x20000010
 8001e3c:	2000001c 	.word	0x2000001c
 8001e40:	20000020 	.word	0x20000020
 8001e44:	20000024 	.word	0x20000024
 8001e48:	200022ec 	.word	0x200022ec
 8001e4c:	2000003c 	.word	0x2000003c
 8001e50:	20000040 	.word	0x20000040
 8001e54:	20000044 	.word	0x20000044
 8001e58:	200022f0 	.word	0x200022f0
 8001e5c:	20000150 	.word	0x20000150

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	@ 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	@ 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fb5d 	bl	800752e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <SystemClock_Config+0xc4>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e88:	4a26      	ldr	r2, [pc, #152]	@ (8001f24 <SystemClock_Config+0xc4>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <SystemClock_Config+0xc4>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <SystemClock_Config+0xc8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ea4:	4a20      	ldr	r2, [pc, #128]	@ (8001f28 <SystemClock_Config+0xc8>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <SystemClock_Config+0xc8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ecc:	2319      	movs	r3, #25
 8001ece:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001ed0:	2390      	movs	r3, #144	@ 0x90
 8001ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001edc:	f107 0320 	add.w	r3, r7, #32
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f001 f931 	bl	8003148 <HAL_RCC_OscConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001eec:	f000 fa8c 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ef0:	230f      	movs	r3, #15
 8001ef2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 fbbf 	bl	8003690 <HAL_RCC_ClockConfig>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001f18:	f000 fa76 	bl	8002408 <Error_Handler>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3750      	adds	r7, #80	@ 0x50
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40007000 	.word	0x40007000

08001f2c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f32:	463b      	mov	r3, r7
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001f3a:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <MX_DAC_Init+0x60>)
 8001f3c:	4a14      	ldr	r2, [pc, #80]	@ (8001f90 <MX_DAC_Init+0x64>)
 8001f3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001f40:	4812      	ldr	r0, [pc, #72]	@ (8001f8c <MX_DAC_Init+0x60>)
 8001f42:	f000 fe3f 	bl	8002bc4 <HAL_DAC_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001f4c:	f000 fa5c 	bl	8002408 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480b      	ldr	r0, [pc, #44]	@ (8001f8c <MX_DAC_Init+0x60>)
 8001f60:	f000 fed3 	bl	8002d0a <HAL_DAC_ConfigChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001f6a:	f000 fa4d 	bl	8002408 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2210      	movs	r2, #16
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_DAC_Init+0x60>)
 8001f76:	f000 fec8 	bl	8002d0a <HAL_DAC_ConfigChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001f80:	f000 fa42 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001f84:	bf00      	nop
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	2000008c 	.word	0x2000008c
 8001f90:	40007400 	.word	0x40007400

08001f94 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <MX_SPI4_Init+0x78>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fa0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fa4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fac:	4b16      	ldr	r3, [pc, #88]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001fb2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fba:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fca:	2220      	movs	r2, #32
 8001fcc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001fee:	2208      	movs	r2, #8
 8001ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_SPI4_Init+0x74>)
 8001ff4:	f001 fcfe 	bl	80039f4 <HAL_SPI_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8001ffe:	f000 fa03 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200000a0 	.word	0x200000a0
 800200c:	40013400 	.word	0x40013400

08002010 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	@ 0x30
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002016:	f107 030c 	add.w	r3, r7, #12
 800201a:	2224      	movs	r2, #36	@ 0x24
 800201c:	2100      	movs	r1, #0
 800201e:	4618      	mov	r0, r3
 8002020:	f005 fa85 	bl	800752e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002024:	463b      	mov	r3, r7
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800202e:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002030:	4a23      	ldr	r2, [pc, #140]	@ (80020c0 <MX_TIM1_Init+0xb0>)
 8002032:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002034:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002036:	2200      	movs	r2, #0
 8002038:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <MX_TIM1_Init+0xac>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002040:	4b1e      	ldr	r3, [pc, #120]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002042:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002046:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002048:	4b1c      	ldr	r3, [pc, #112]	@ (80020bc <MX_TIM1_Init+0xac>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800204e:	4b1b      	ldr	r3, [pc, #108]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800205a:	2303      	movs	r3, #3
 800205c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002062:	2301      	movs	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 800206a:	2304      	movs	r3, #4
 800206c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800206e:	2302      	movs	r3, #2
 8002070:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002072:	2301      	movs	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002076:	2300      	movs	r3, #0
 8002078:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 800207a:	2304      	movs	r3, #4
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	4619      	mov	r1, r3
 8002084:	480d      	ldr	r0, [pc, #52]	@ (80020bc <MX_TIM1_Init+0xac>)
 8002086:	f002 fbcd 	bl	8004824 <HAL_TIM_Encoder_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002090:	f000 f9ba 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002094:	2300      	movs	r3, #0
 8002096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <MX_TIM1_Init+0xac>)
 80020a6:	f003 f857 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020b0:	f000 f9aa 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020b4:	bf00      	nop
 80020b6:	3730      	adds	r7, #48	@ 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000104 	.word	0x20000104
 80020c0:	40010000 	.word	0x40010000

080020c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ca:	f107 0310 	add.w	r3, r7, #16
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	605a      	str	r2, [r3, #4]
 80020d4:	609a      	str	r2, [r3, #8]
 80020d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020e2:	4b1e      	ldr	r3, [pc, #120]	@ (800215c <MX_TIM2_Init+0x98>)
 80020e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80020e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM2_Init+0x98>)
 80020ec:	f240 1267 	movw	r2, #359	@ 0x167
 80020f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM2_Init+0x98>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM2_Init+0x98>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002100:	4b16      	ldr	r3, [pc, #88]	@ (800215c <MX_TIM2_Init+0x98>)
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002106:	4b15      	ldr	r3, [pc, #84]	@ (800215c <MX_TIM2_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800210c:	4813      	ldr	r0, [pc, #76]	@ (800215c <MX_TIM2_Init+0x98>)
 800210e:	f002 fa49 	bl	80045a4 <HAL_TIM_Base_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002118:	f000 f976 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800211c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002120:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <MX_TIM2_Init+0x98>)
 800212a:	f002 fdb7 	bl	8004c9c <HAL_TIM_ConfigClockSource>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002134:	f000 f968 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_TIM2_Init+0x98>)
 8002146:	f003 f807 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002150:	f000 f95a 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20000150 	.word	0x20000150

08002160 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	2224      	movs	r2, #36	@ 0x24
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f005 f9dd 	bl	800752e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	463b      	mov	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800217e:	4b21      	ldr	r3, [pc, #132]	@ (8002204 <MX_TIM4_Init+0xa4>)
 8002180:	4a21      	ldr	r2, [pc, #132]	@ (8002208 <MX_TIM4_Init+0xa8>)
 8002182:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002184:	4b1f      	ldr	r3, [pc, #124]	@ (8002204 <MX_TIM4_Init+0xa4>)
 8002186:	2200      	movs	r2, #0
 8002188:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <MX_TIM4_Init+0xa4>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002190:	4b1c      	ldr	r3, [pc, #112]	@ (8002204 <MX_TIM4_Init+0xa4>)
 8002192:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002196:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <MX_TIM4_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <MX_TIM4_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021a4:	2303      	movs	r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80021a8:	2302      	movs	r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021ac:	2301      	movs	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80021b4:	2308      	movs	r3, #8
 80021b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80021b8:	2302      	movs	r3, #2
 80021ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021bc:	2301      	movs	r3, #1
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 8;
 80021c4:	2308      	movs	r3, #8
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80021c8:	f107 030c 	add.w	r3, r7, #12
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	@ (8002204 <MX_TIM4_Init+0xa4>)
 80021d0:	f002 fb28 	bl	8004824 <HAL_TIM_Encoder_Init>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80021da:	f000 f915 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e6:	463b      	mov	r3, r7
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	@ (8002204 <MX_TIM4_Init+0xa4>)
 80021ec:	f002 ffb4 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80021f6:	f000 f907 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3730      	adds	r7, #48	@ 0x30
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000019c 	.word	0x2000019c
 8002208:	40000800 	.word	0x40000800

0800220c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002210:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_TIM13_Init+0x40>)
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <MX_TIM13_Init+0x44>)
 8002214:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 14400-1;
 8002216:	4b0d      	ldr	r3, [pc, #52]	@ (800224c <MX_TIM13_Init+0x40>)
 8002218:	f643 023f 	movw	r2, #14399	@ 0x383f
 800221c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b0b      	ldr	r3, [pc, #44]	@ (800224c <MX_TIM13_Init+0x40>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_TIM13_Init+0x40>)
 8002226:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800222a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <MX_TIM13_Init+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_TIM13_Init+0x40>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_TIM13_Init+0x40>)
 800223a:	f002 f9b3 	bl	80045a4 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8002244:	f000 f8e0 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200001e8 	.word	0x200001e8
 8002250:	40001c00 	.word	0x40001c00

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	@ 0x30
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800226a:	4b4c      	ldr	r3, [pc, #304]	@ (800239c <MX_GPIO_Init+0x148>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a4b      	ldr	r2, [pc, #300]	@ (800239c <MX_GPIO_Init+0x148>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b49      	ldr	r3, [pc, #292]	@ (800239c <MX_GPIO_Init+0x148>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	61bb      	str	r3, [r7, #24]
 8002280:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002282:	4b46      	ldr	r3, [pc, #280]	@ (800239c <MX_GPIO_Init+0x148>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	4a45      	ldr	r2, [pc, #276]	@ (800239c <MX_GPIO_Init+0x148>)
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	6313      	str	r3, [r2, #48]	@ 0x30
 800228e:	4b43      	ldr	r3, [pc, #268]	@ (800239c <MX_GPIO_Init+0x148>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800229a:	4b40      	ldr	r3, [pc, #256]	@ (800239c <MX_GPIO_Init+0x148>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	4a3f      	ldr	r2, [pc, #252]	@ (800239c <MX_GPIO_Init+0x148>)
 80022a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a6:	4b3d      	ldr	r3, [pc, #244]	@ (800239c <MX_GPIO_Init+0x148>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <MX_GPIO_Init+0x148>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a39      	ldr	r2, [pc, #228]	@ (800239c <MX_GPIO_Init+0x148>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <MX_GPIO_Init+0x148>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ca:	4b34      	ldr	r3, [pc, #208]	@ (800239c <MX_GPIO_Init+0x148>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	4a33      	ldr	r2, [pc, #204]	@ (800239c <MX_GPIO_Init+0x148>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d6:	4b31      	ldr	r3, [pc, #196]	@ (800239c <MX_GPIO_Init+0x148>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e2:	4b2e      	ldr	r3, [pc, #184]	@ (800239c <MX_GPIO_Init+0x148>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a2d      	ldr	r2, [pc, #180]	@ (800239c <MX_GPIO_Init+0x148>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b2b      	ldr	r3, [pc, #172]	@ (800239c <MX_GPIO_Init+0x148>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2103      	movs	r1, #3
 80022fe:	4828      	ldr	r0, [pc, #160]	@ (80023a0 <MX_GPIO_Init+0x14c>)
 8002300:	f000 ff08 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	210c      	movs	r1, #12
 8002308:	4826      	ldr	r0, [pc, #152]	@ (80023a4 <MX_GPIO_Init+0x150>)
 800230a:	f000 ff03 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	2131      	movs	r1, #49	@ 0x31
 8002312:	4825      	ldr	r0, [pc, #148]	@ (80023a8 <MX_GPIO_Init+0x154>)
 8002314:	f000 fefe 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	2103      	movs	r1, #3
 800231c:	4823      	ldr	r0, [pc, #140]	@ (80023ac <MX_GPIO_Init+0x158>)
 800231e:	f000 fef9 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002322:	2303      	movs	r3, #3
 8002324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002332:	f107 031c 	add.w	r3, r7, #28
 8002336:	4619      	mov	r1, r3
 8002338:	4819      	ldr	r0, [pc, #100]	@ (80023a0 <MX_GPIO_Init+0x14c>)
 800233a:	f000 fd3f 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800233e:	230c      	movs	r3, #12
 8002340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234a:	2300      	movs	r3, #0
 800234c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234e:	f107 031c 	add.w	r3, r7, #28
 8002352:	4619      	mov	r1, r3
 8002354:	4813      	ldr	r0, [pc, #76]	@ (80023a4 <MX_GPIO_Init+0x150>)
 8002356:	f000 fd31 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800235a:	2331      	movs	r3, #49	@ 0x31
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	2301      	movs	r3, #1
 8002360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2300      	movs	r3, #0
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 031c 	add.w	r3, r7, #28
 800236e:	4619      	mov	r1, r3
 8002370:	480d      	ldr	r0, [pc, #52]	@ (80023a8 <MX_GPIO_Init+0x154>)
 8002372:	f000 fd23 	bl	8002dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002376:	2303      	movs	r3, #3
 8002378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	4807      	ldr	r0, [pc, #28]	@ (80023ac <MX_GPIO_Init+0x158>)
 800238e:	f000 fd15 	bl	8002dbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002392:	bf00      	nop
 8002394:	3730      	adds	r7, #48	@ 0x30
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40021400 	.word	0x40021400
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020c00 	.word	0x40020c00

080023b0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80023b6:	463b      	mov	r3, r7
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80023c2:	f000 fb87 	bl	8002ad4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80023c6:	2301      	movs	r3, #1
 80023c8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80023d2:	231f      	movs	r3, #31
 80023d4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80023d6:	2387      	movs	r3, #135	@ 0x87
 80023d8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80023da:	2300      	movs	r3, #0
 80023dc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80023de:	2300      	movs	r3, #0
 80023e0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80023e2:	2301      	movs	r3, #1
 80023e4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80023e6:	2301      	movs	r3, #1
 80023e8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fba5 	bl	8002b44 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80023fa:	2004      	movs	r0, #4
 80023fc:	f000 fb82 	bl	8002b04 <HAL_MPU_Enable>

}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <Error_Handler+0x8>

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_MspInit+0x44>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b0c      	ldr	r3, [pc, #48]	@ (8002458 <HAL_MspInit+0x44>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <HAL_MspInit+0x44>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	4a08      	ldr	r2, [pc, #32]	@ (8002458 <HAL_MspInit+0x44>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800243c:	6453      	str	r3, [r2, #68]	@ 0x44
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_MspInit+0x44>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800

0800245c <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <HAL_DAC_MspInit+0x74>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d123      	bne.n	80024c6 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800247e:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 8002484:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002488:	6413      	str	r3, [r2, #64]	@ 0x40
 800248a:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b0f      	ldr	r3, [pc, #60]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	4a0e      	ldr	r2, [pc, #56]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <HAL_DAC_MspInit+0x78>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024ae:	2330      	movs	r3, #48	@ 0x30
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024b2:	2303      	movs	r3, #3
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	@ (80024d8 <HAL_DAC_MspInit+0x7c>)
 80024c2:	f000 fc7b 	bl	8002dbc <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80024c6:	bf00      	nop
 80024c8:	3728      	adds	r7, #40	@ 0x28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40007400 	.word	0x40007400
 80024d4:	40023800 	.word	0x40023800
 80024d8:	40020000 	.word	0x40020000

080024dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <HAL_SPI_MspInit+0x7c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d127      	bne.n	800254e <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80024fe:	4b17      	ldr	r3, [pc, #92]	@ (800255c <HAL_SPI_MspInit+0x80>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002502:	4a16      	ldr	r2, [pc, #88]	@ (800255c <HAL_SPI_MspInit+0x80>)
 8002504:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002508:	6453      	str	r3, [r2, #68]	@ 0x44
 800250a:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_SPI_MspInit+0x80>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_SPI_MspInit+0x80>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <HAL_SPI_MspInit+0x80>)
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <HAL_SPI_MspInit+0x80>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800252e:	2364      	movs	r3, #100	@ 0x64
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800253e:	2305      	movs	r3, #5
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	4805      	ldr	r0, [pc, #20]	@ (8002560 <HAL_SPI_MspInit+0x84>)
 800254a:	f000 fc37 	bl	8002dbc <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800254e:	bf00      	nop
 8002550:	3728      	adds	r7, #40	@ 0x28
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40013400 	.word	0x40013400
 800255c:	40023800 	.word	0x40023800
 8002560:	40021000 	.word	0x40021000

08002564 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08c      	sub	sp, #48	@ 0x30
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2f      	ldr	r2, [pc, #188]	@ (8002640 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d129      	bne.n	80025da <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002586:	4b2f      	ldr	r3, [pc, #188]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	4a2e      	ldr	r2, [pc, #184]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	6453      	str	r3, [r2, #68]	@ 0x44
 8002592:	4b2c      	ldr	r3, [pc, #176]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800259e:	4b29      	ldr	r3, [pc, #164]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	4a28      	ldr	r2, [pc, #160]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025a4:	f043 0310 	orr.w	r3, r3, #16
 80025a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025aa:	4b26      	ldr	r3, [pc, #152]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80025b6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	481d      	ldr	r0, [pc, #116]	@ (8002648 <HAL_TIM_Encoder_MspInit+0xe4>)
 80025d4:	f000 fbf2 	bl	8002dbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025d8:	e02d      	b.n	8002636 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1b      	ldr	r2, [pc, #108]	@ (800264c <HAL_TIM_Encoder_MspInit+0xe8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d128      	bne.n	8002636 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	4a16      	ldr	r2, [pc, #88]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a10      	ldr	r2, [pc, #64]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <HAL_TIM_Encoder_MspInit+0xe0>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002614:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261a:	2302      	movs	r3, #2
 800261c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002622:	2300      	movs	r3, #0
 8002624:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002626:	2302      	movs	r3, #2
 8002628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262a:	f107 031c 	add.w	r3, r7, #28
 800262e:	4619      	mov	r1, r3
 8002630:	4807      	ldr	r0, [pc, #28]	@ (8002650 <HAL_TIM_Encoder_MspInit+0xec>)
 8002632:	f000 fbc3 	bl	8002dbc <HAL_GPIO_Init>
}
 8002636:	bf00      	nop
 8002638:	3730      	adds	r7, #48	@ 0x30
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40010000 	.word	0x40010000
 8002644:	40023800 	.word	0x40023800
 8002648:	40021000 	.word	0x40021000
 800264c:	40000800 	.word	0x40000800
 8002650:	40020c00 	.word	0x40020c00

08002654 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d10c      	bne.n	8002680 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6413      	str	r3, [r2, #64]	@ 0x40
 8002672:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 800267e:	e018      	b.n	80026b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d113      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a0b      	ldr	r2, [pc, #44]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 8002690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_TIM_Base_MspInit+0x68>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	202c      	movs	r0, #44	@ 0x2c
 80026a8:	f000 f9dd 	bl	8002a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80026ac:	202c      	movs	r0, #44	@ 0x2c
 80026ae:	f000 f9f6 	bl	8002a9e <HAL_NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40001c00 	.word	0x40001c00

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <NMI_Handler+0x4>

080026cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <HardFault_Handler+0x4>

080026d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <MemManage_Handler+0x4>

080026dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <BusFault_Handler+0x4>

080026e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <UsageFault_Handler+0x4>

080026ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271a:	f000 f885 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800272a:	f002 f9af 	bl	8004a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001e8 	.word	0x200001e8

08002738 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800273c:	4b06      	ldr	r3, [pc, #24]	@ (8002758 <SystemInit+0x20>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002742:	4a05      	ldr	r2, [pc, #20]	@ (8002758 <SystemInit+0x20>)
 8002744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800275c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002760:	f7ff ffea 	bl	8002738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002764:	480c      	ldr	r0, [pc, #48]	@ (8002798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002766:	490d      	ldr	r1, [pc, #52]	@ (800279c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800277c:	4c0a      	ldr	r4, [pc, #40]	@ (80027a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800278a:	f004 fed9 	bl	8007540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278e:	f7ff f863 	bl	8001858 <main>
  bx  lr    
 8002792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002794:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80027a0:	08007698 	.word	0x08007698
  ldr r2, =_sbss
 80027a4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80027a8:	20002338 	.word	0x20002338

080027ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC_IRQHandler>

080027ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b2:	2003      	movs	r0, #3
 80027b4:	f000 f94c 	bl	8002a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b8:	200f      	movs	r0, #15
 80027ba:	f000 f805 	bl	80027c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027be:	f7ff fe29 	bl	8002414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027d0:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_InitTick+0x54>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_InitTick+0x58>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f967 	bl	8002aba <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00e      	b.n	8002814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b0f      	cmp	r3, #15
 80027fa:	d80a      	bhi.n	8002812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027fc:	2200      	movs	r2, #0
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f000 f92f 	bl	8002a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002808:	4a06      	ldr	r2, [pc, #24]	@ (8002824 <HAL_InitTick+0x5c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	e000      	b.n	8002814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	2000004c 	.word	0x2000004c
 8002820:	20000054 	.word	0x20000054
 8002824:	20000050 	.word	0x20000050

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	@ (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000054 	.word	0x20000054
 800284c:	200022f8 	.word	0x200022f8

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	@ (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200022f8 	.word	0x200022f8

08002868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002870:	f7ff ffee 	bl	8002850 <HAL_GetTick>
 8002874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002880:	d005      	beq.n	800288e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <HAL_Delay+0x44>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800288e:	bf00      	nop
 8002890:	f7ff ffde 	bl	8002850 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	429a      	cmp	r2, r3
 800289e:	d8f7      	bhi.n	8002890 <HAL_Delay+0x28>
  {
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000054 	.word	0x20000054

080028b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028cc:	4013      	ands	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	@ (80028f0 <__NVIC_SetPriorityGrouping+0x40>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	05fa0000 	.word	0x05fa0000

080028f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	@ (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	@ (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	@ (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	@ (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
         );
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a1c:	d301      	bcc.n	8002a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00f      	b.n	8002a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a22:	4a0a      	ldr	r2, [pc, #40]	@ (8002a4c <SysTick_Config+0x40>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f7ff ff8e 	bl	8002950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <SysTick_Config+0x40>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3a:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <SysTick_Config+0x40>)
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000e010 	.word	0xe000e010

08002a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ff29 	bl	80028b0 <__NVIC_SetPriorityGrouping>
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a78:	f7ff ff3e 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7ff ff8e 	bl	80029a4 <NVIC_EncodePriority>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff ff5d 	bl	8002950 <__NVIC_SetPriority>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff31 	bl	8002914 <__NVIC_EnableIRQ>
}
 8002ab2:	bf00      	nop
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff ffa2 	bl	8002a0c <SysTick_Config>
 8002ac8:	4603      	mov	r3, r0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ad8:	f3bf 8f5f 	dmb	sy
}
 8002adc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ade:	4b07      	ldr	r3, [pc, #28]	@ (8002afc <HAL_MPU_Disable+0x28>)
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	4a06      	ldr	r2, [pc, #24]	@ (8002afc <HAL_MPU_Disable+0x28>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002aea:	4b05      	ldr	r3, [pc, #20]	@ (8002b00 <HAL_MPU_Disable+0x2c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	e000ed90 	.word	0xe000ed90

08002b04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b3c <HAL_MPU_Enable+0x38>)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <HAL_MPU_Enable+0x3c>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1a:	4a09      	ldr	r2, [pc, #36]	@ (8002b40 <HAL_MPU_Enable+0x3c>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b20:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002b22:	f3bf 8f4f 	dsb	sy
}
 8002b26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b28:	f3bf 8f6f 	isb	sy
}
 8002b2c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	e000ed90 	.word	0xe000ed90
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	785a      	ldrb	r2, [r3, #1]
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002b52:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002b54:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4a19      	ldr	r2, [pc, #100]	@ (8002bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002b60:	4a17      	ldr	r2, [pc, #92]	@ (8002bc0 <HAL_MPU_ConfigRegion+0x7c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7b1b      	ldrb	r3, [r3, #12]
 8002b6c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7adb      	ldrb	r3, [r3, #11]
 8002b72:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7a9b      	ldrb	r3, [r3, #10]
 8002b7a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b5b      	ldrb	r3, [r3, #13]
 8002b82:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	7b9b      	ldrb	r3, [r3, #14]
 8002b8a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	7bdb      	ldrb	r3, [r3, #15]
 8002b92:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7a5b      	ldrb	r3, [r3, #9]
 8002b9a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	7a1b      	ldrb	r3, [r3, #8]
 8002ba2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ba4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002bae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002bb0:	6113      	str	r3, [r2, #16]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	e000ed90 	.word	0xe000ed90

08002bc4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e014      	b.n	8002c00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fc38 	bl	800245c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e046      	b.n	8002caa <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	795b      	ldrb	r3, [r3, #5]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_DAC_Start+0x20>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e040      	b.n	8002caa <HAL_DAC_Start+0xa2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2202      	movs	r2, #2
 8002c32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2201      	movs	r2, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002c5c:	2b3c      	cmp	r3, #60	@ 0x3c
 8002c5e:	d11d      	bne.n	8002c9c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e014      	b.n	8002c9c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	213c      	movs	r1, #60	@ 0x3c
 8002c84:	fa01 f303 	lsl.w	r3, r1, r3
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0202 	orr.w	r2, r2, #2
 8002c9a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e015      	b.n	8002cfe <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d105      	bne.n	8002cea <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	e004      	b.n	8002cf4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	3314      	adds	r3, #20
 8002cf2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b089      	sub	sp, #36	@ 0x24
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <HAL_DAC_ConfigChannel+0x1c>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e042      	b.n	8002db0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	795b      	ldrb	r3, [r3, #5]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_DAC_ConfigChannel+0x2c>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e03c      	b.n	8002db0 <HAL_DAC_ConfigChannel+0xa6>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	22c0      	movs	r2, #192	@ 0xc0
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	400a      	ands	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002dae:	7ffb      	ldrb	r3, [r7, #31]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3724      	adds	r7, #36	@ 0x24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	@ 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e175      	b.n	80030c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8164 	bne.w	80030c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x56>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80be 	beq.w	80030c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	4b66      	ldr	r3, [pc, #408]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	4a65      	ldr	r2, [pc, #404]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f52:	4b63      	ldr	r3, [pc, #396]	@ (80030e0 <HAL_GPIO_Init+0x324>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f5e:	4a61      	ldr	r2, [pc, #388]	@ (80030e4 <HAL_GPIO_Init+0x328>)
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	089b      	lsrs	r3, r3, #2
 8002f64:	3302      	adds	r3, #2
 8002f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0303 	and.w	r3, r3, #3
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	220f      	movs	r2, #15
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a58      	ldr	r2, [pc, #352]	@ (80030e8 <HAL_GPIO_Init+0x32c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d037      	beq.n	8002ffa <HAL_GPIO_Init+0x23e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	@ (80030ec <HAL_GPIO_Init+0x330>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d031      	beq.n	8002ff6 <HAL_GPIO_Init+0x23a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a56      	ldr	r2, [pc, #344]	@ (80030f0 <HAL_GPIO_Init+0x334>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02b      	beq.n	8002ff2 <HAL_GPIO_Init+0x236>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_GPIO_Init+0x338>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d025      	beq.n	8002fee <HAL_GPIO_Init+0x232>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a54      	ldr	r2, [pc, #336]	@ (80030f8 <HAL_GPIO_Init+0x33c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d01f      	beq.n	8002fea <HAL_GPIO_Init+0x22e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a53      	ldr	r2, [pc, #332]	@ (80030fc <HAL_GPIO_Init+0x340>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d019      	beq.n	8002fe6 <HAL_GPIO_Init+0x22a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a52      	ldr	r2, [pc, #328]	@ (8003100 <HAL_GPIO_Init+0x344>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_GPIO_Init+0x226>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a51      	ldr	r2, [pc, #324]	@ (8003104 <HAL_GPIO_Init+0x348>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00d      	beq.n	8002fde <HAL_GPIO_Init+0x222>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a50      	ldr	r2, [pc, #320]	@ (8003108 <HAL_GPIO_Init+0x34c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <HAL_GPIO_Init+0x21e>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800310c <HAL_GPIO_Init+0x350>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d101      	bne.n	8002fd6 <HAL_GPIO_Init+0x21a>
 8002fd2:	2309      	movs	r3, #9
 8002fd4:	e012      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fd6:	230a      	movs	r3, #10
 8002fd8:	e010      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fda:	2308      	movs	r3, #8
 8002fdc:	e00e      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fde:	2307      	movs	r3, #7
 8002fe0:	e00c      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fe2:	2306      	movs	r3, #6
 8002fe4:	e00a      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e008      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e006      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e004      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e002      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_GPIO_Init+0x240>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	f002 0203 	and.w	r2, r2, #3
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4093      	lsls	r3, r2
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4313      	orrs	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800300c:	4935      	ldr	r1, [pc, #212]	@ (80030e4 <HAL_GPIO_Init+0x328>)
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a34      	ldr	r2, [pc, #208]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b32      	ldr	r3, [pc, #200]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a29      	ldr	r2, [pc, #164]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800306e:	4b28      	ldr	r3, [pc, #160]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	43db      	mvns	r3, r3
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	4013      	ands	r3, r2
 800307c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800308a:	69ba      	ldr	r2, [r7, #24]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_GPIO_Init+0x354>)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003098:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_GPIO_Init+0x354>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030bc:	4a14      	ldr	r2, [pc, #80]	@ (8003110 <HAL_GPIO_Init+0x354>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3301      	adds	r3, #1
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b0f      	cmp	r3, #15
 80030cc:	f67f ae86 	bls.w	8002ddc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40020000 	.word	0x40020000
 80030ec:	40020400 	.word	0x40020400
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00
 80030f8:	40021000 	.word	0x40021000
 80030fc:	40021400 	.word	0x40021400
 8003100:	40021800 	.word	0x40021800
 8003104:	40021c00 	.word	0x40021c00
 8003108:	40022000 	.word	0x40022000
 800310c:	40022400 	.word	0x40022400
 8003110:	40013c00 	.word	0x40013c00

08003114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003130:	e003      	b.n	800313a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e291      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8087 	beq.w	800327a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800316c:	4b96      	ldr	r3, [pc, #600]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b04      	cmp	r3, #4
 8003176:	d00c      	beq.n	8003192 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003178:	4b93      	ldr	r3, [pc, #588]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 030c 	and.w	r3, r3, #12
 8003180:	2b08      	cmp	r3, #8
 8003182:	d112      	bne.n	80031aa <HAL_RCC_OscConfig+0x62>
 8003184:	4b90      	ldr	r3, [pc, #576]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800318c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003190:	d10b      	bne.n	80031aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003192:	4b8d      	ldr	r3, [pc, #564]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d06c      	beq.n	8003278 <HAL_RCC_OscConfig+0x130>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d168      	bne.n	8003278 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e26b      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b2:	d106      	bne.n	80031c2 <HAL_RCC_OscConfig+0x7a>
 80031b4:	4b84      	ldr	r3, [pc, #528]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a83      	ldr	r2, [pc, #524]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	e02e      	b.n	8003220 <HAL_RCC_OscConfig+0xd8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x9c>
 80031ca:	4b7f      	ldr	r3, [pc, #508]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7e      	ldr	r2, [pc, #504]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4b7c      	ldr	r3, [pc, #496]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7b      	ldr	r2, [pc, #492]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e01d      	b.n	8003220 <HAL_RCC_OscConfig+0xd8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0xc0>
 80031ee:	4b76      	ldr	r3, [pc, #472]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a75      	ldr	r2, [pc, #468]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b73      	ldr	r3, [pc, #460]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a72      	ldr	r2, [pc, #456]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0xd8>
 8003208:	4b6f      	ldr	r3, [pc, #444]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6e      	ldr	r2, [pc, #440]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800320e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b6c      	ldr	r3, [pc, #432]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800321a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7ff fb12 	bl	8002850 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003230:	f7ff fb0e 	bl	8002850 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	@ 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e21f      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b61      	ldr	r3, [pc, #388]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0xe8>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7ff fafe 	bl	8002850 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7ff fafa 	bl	8002850 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	@ 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e20b      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	4b57      	ldr	r3, [pc, #348]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x110>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d069      	beq.n	800335a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003286:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00b      	beq.n	80032aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003292:	4b4d      	ldr	r3, [pc, #308]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b08      	cmp	r3, #8
 800329c:	d11c      	bne.n	80032d8 <HAL_RCC_OscConfig+0x190>
 800329e:	4b4a      	ldr	r3, [pc, #296]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d116      	bne.n	80032d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032aa:	4b47      	ldr	r3, [pc, #284]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e1df      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c2:	4b41      	ldr	r3, [pc, #260]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	493d      	ldr	r1, [pc, #244]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	e040      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d023      	beq.n	8003328 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032e0:	4b39      	ldr	r3, [pc, #228]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a38      	ldr	r2, [pc, #224]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff fab0 	bl	8002850 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7ff faac 	bl	8002850 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1bd      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003306:	4b30      	ldr	r3, [pc, #192]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b2d      	ldr	r3, [pc, #180]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4929      	ldr	r1, [pc, #164]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
 8003326:	e018      	b.n	800335a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003328:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a26      	ldr	r2, [pc, #152]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003334:	f7ff fa8c 	bl	8002850 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800333c:	f7ff fa88 	bl	8002850 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e199      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800334e:	4b1e      	ldr	r3, [pc, #120]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d038      	beq.n	80033d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d019      	beq.n	80033a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336e:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003370:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7ff fa69 	bl	8002850 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003382:	f7ff fa65 	bl	8002850 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e176      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 8003396:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x23a>
 80033a0:	e01a      	b.n	80033d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a2:	4b09      	ldr	r3, [pc, #36]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80033a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a6:	4a08      	ldr	r2, [pc, #32]	@ (80033c8 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7ff fa4f 	bl	8002850 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e00a      	b.n	80033cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b6:	f7ff fa4b 	bl	8002850 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d903      	bls.n	80033cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e15c      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
 80033c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033cc:	4b91      	ldr	r3, [pc, #580]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80033ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ee      	bne.n	80033b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80a4 	beq.w	800352e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b8b      	ldr	r3, [pc, #556]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	4b88      	ldr	r3, [pc, #544]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	4a87      	ldr	r2, [pc, #540]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80033f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fe:	4b85      	ldr	r3, [pc, #532]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340a:	2301      	movs	r3, #1
 800340c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340e:	4b82      	ldr	r3, [pc, #520]	@ (8003618 <HAL_RCC_OscConfig+0x4d0>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003416:	2b00      	cmp	r3, #0
 8003418:	d118      	bne.n	800344c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800341a:	4b7f      	ldr	r3, [pc, #508]	@ (8003618 <HAL_RCC_OscConfig+0x4d0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7e      	ldr	r2, [pc, #504]	@ (8003618 <HAL_RCC_OscConfig+0x4d0>)
 8003420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003426:	f7ff fa13 	bl	8002850 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800342e:	f7ff fa0f 	bl	8002850 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b64      	cmp	r3, #100	@ 0x64
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e120      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003440:	4b75      	ldr	r3, [pc, #468]	@ (8003618 <HAL_RCC_OscConfig+0x4d0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d106      	bne.n	8003462 <HAL_RCC_OscConfig+0x31a>
 8003454:	4b6f      	ldr	r3, [pc, #444]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003458:	4a6e      	ldr	r2, [pc, #440]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003460:	e02d      	b.n	80034be <HAL_RCC_OscConfig+0x376>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10c      	bne.n	8003484 <HAL_RCC_OscConfig+0x33c>
 800346a:	4b6a      	ldr	r3, [pc, #424]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	4a69      	ldr	r2, [pc, #420]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	@ 0x70
 8003476:	4b67      	ldr	r3, [pc, #412]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347a:	4a66      	ldr	r2, [pc, #408]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	6713      	str	r3, [r2, #112]	@ 0x70
 8003482:	e01c      	b.n	80034be <HAL_RCC_OscConfig+0x376>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b05      	cmp	r3, #5
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_OscConfig+0x35e>
 800348c:	4b61      	ldr	r3, [pc, #388]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a60      	ldr	r2, [pc, #384]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	4b5e      	ldr	r3, [pc, #376]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349c:	4a5d      	ldr	r2, [pc, #372]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a4:	e00b      	b.n	80034be <HAL_RCC_OscConfig+0x376>
 80034a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034aa:	4a5a      	ldr	r2, [pc, #360]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b2:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b6:	4a57      	ldr	r2, [pc, #348]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d015      	beq.n	80034f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7ff f9c3 	bl	8002850 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034cc:	e00a      	b.n	80034e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ce:	f7ff f9bf 	bl	8002850 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0ce      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0ee      	beq.n	80034ce <HAL_RCC_OscConfig+0x386>
 80034f0:	e014      	b.n	800351c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7ff f9ad 	bl	8002850 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7ff f9a9 	bl	8002850 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003510:	4b40      	ldr	r3, [pc, #256]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ee      	bne.n	80034fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d105      	bne.n	800352e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003522:	4b3c      	ldr	r3, [pc, #240]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	4a3b      	ldr	r2, [pc, #236]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80a4 	beq.w	8003680 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003538:	4b36      	ldr	r3, [pc, #216]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f003 030c 	and.w	r3, r3, #12
 8003540:	2b08      	cmp	r3, #8
 8003542:	d06b      	beq.n	800361c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b02      	cmp	r3, #2
 800354a:	d149      	bne.n	80035e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354c:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a30      	ldr	r2, [pc, #192]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003552:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff f97a 	bl	8002850 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7ff f976 	bl	8002850 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e087      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	4b28      	ldr	r3, [pc, #160]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69da      	ldr	r2, [r3, #28]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	3b01      	subs	r3, #1
 8003598:	041b      	lsls	r3, r3, #16
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a0:	061b      	lsls	r3, r3, #24
 80035a2:	4313      	orrs	r3, r2
 80035a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80035aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff f94a 	bl	8002850 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c0:	f7ff f946 	bl	8002850 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e057      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f0      	beq.n	80035c0 <HAL_RCC_OscConfig+0x478>
 80035de:	e04f      	b.n	8003680 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 80035e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7ff f930 	bl	8002850 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7ff f92c 	bl	8002850 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e03d      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCC_OscConfig+0x4cc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x4ac>
 8003612:	e035      	b.n	8003680 <HAL_RCC_OscConfig+0x538>
 8003614:	40023800 	.word	0x40023800
 8003618:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800361c:	4b1b      	ldr	r3, [pc, #108]	@ (800368c <HAL_RCC_OscConfig+0x544>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d028      	beq.n	800367c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003634:	429a      	cmp	r2, r3
 8003636:	d121      	bne.n	800367c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d11a      	bne.n	800367c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800364c:	4013      	ands	r3, r2
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003652:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003676:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0d0      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d910      	bls.n	80036d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b67      	ldr	r3, [pc, #412]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 020f 	bic.w	r2, r3, #15
 80036be:	4965      	ldr	r1, [pc, #404]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b63      	ldr	r3, [pc, #396]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0b8      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d020      	beq.n	8003726 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f0:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a58      	ldr	r2, [pc, #352]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 80036f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003708:	4b53      	ldr	r3, [pc, #332]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a52      	ldr	r2, [pc, #328]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 800370e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003714:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	494d      	ldr	r1, [pc, #308]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d040      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b47      	ldr	r3, [pc, #284]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d115      	bne.n	8003772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e07f      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d107      	bne.n	8003762 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	4b41      	ldr	r3, [pc, #260]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e073      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	4b3d      	ldr	r3, [pc, #244]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06b      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003772:	4b39      	ldr	r3, [pc, #228]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 0203 	bic.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4936      	ldr	r1, [pc, #216]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003780:	4313      	orrs	r3, r2
 8003782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7ff f864 	bl	8002850 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800378c:	f7ff f860 	bl	8002850 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379a:	4293      	cmp	r3, r2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e053      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 020c 	and.w	r2, r3, #12
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1eb      	bne.n	800378c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b4:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d210      	bcs.n	80037e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c2:	4b24      	ldr	r3, [pc, #144]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 020f 	bic.w	r2, r3, #15
 80037ca:	4922      	ldr	r1, [pc, #136]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e032      	b.n	800384a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0304 	and.w	r3, r3, #4
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4916      	ldr	r1, [pc, #88]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380e:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	490e      	ldr	r1, [pc, #56]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003822:	f000 f821 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8003826:	4602      	mov	r2, r0
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	490a      	ldr	r1, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x1cc>)
 8003834:	5ccb      	ldrb	r3, [r1, r3]
 8003836:	fa22 f303 	lsr.w	r3, r2, r3
 800383a:	4a09      	ldr	r2, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1d0>)
 800383c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383e:	4b09      	ldr	r3, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1d4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe ffc0 	bl	80027c8 <HAL_InitTick>

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40023c00 	.word	0x40023c00
 8003858:	40023800 	.word	0x40023800
 800385c:	080075f8 	.word	0x080075f8
 8003860:	2000004c 	.word	0x2000004c
 8003864:	20000050 	.word	0x20000050

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b090      	sub	sp, #64	@ 0x40
 800386e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	637b      	str	r3, [r7, #52]	@ 0x34
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003878:	2300      	movs	r3, #0
 800387a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800387c:	2300      	movs	r3, #0
 800387e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003880:	4b59      	ldr	r3, [pc, #356]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d00d      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x40>
 800388c:	2b08      	cmp	r3, #8
 800388e:	f200 80a1 	bhi.w	80039d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0x34>
 8003896:	2b04      	cmp	r3, #4
 8003898:	d003      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800389a:	e09b      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800389c:	4b53      	ldr	r3, [pc, #332]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x184>)
 800389e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a0:	e09b      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a2:	4b53      	ldr	r3, [pc, #332]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038a6:	e098      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a8:	4b4f      	ldr	r3, [pc, #316]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80038b2:	4b4d      	ldr	r3, [pc, #308]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d028      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038be:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	2200      	movs	r2, #0
 80038c6:	623b      	str	r3, [r7, #32]
 80038c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d0:	2100      	movs	r1, #0
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d4:	fb03 f201 	mul.w	r2, r3, r1
 80038d8:	2300      	movs	r3, #0
 80038da:	fb00 f303 	mul.w	r3, r0, r3
 80038de:	4413      	add	r3, r2
 80038e0:	4a43      	ldr	r2, [pc, #268]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e2:	fba0 1202 	umull	r1, r2, r0, r2
 80038e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038e8:	460a      	mov	r2, r1
 80038ea:	62ba      	str	r2, [r7, #40]	@ 0x28
 80038ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ee:	4413      	add	r3, r2
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038f4:	2200      	movs	r2, #0
 80038f6:	61bb      	str	r3, [r7, #24]
 80038f8:	61fa      	str	r2, [r7, #28]
 80038fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003902:	f7fd f89f 	bl	8000a44 <__aeabi_uldivmod>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4613      	mov	r3, r2
 800390c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800390e:	e053      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003910:	4b35      	ldr	r3, [pc, #212]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	2200      	movs	r2, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	617a      	str	r2, [r7, #20]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003922:	f04f 0b00 	mov.w	fp, #0
 8003926:	4652      	mov	r2, sl
 8003928:	465b      	mov	r3, fp
 800392a:	f04f 0000 	mov.w	r0, #0
 800392e:	f04f 0100 	mov.w	r1, #0
 8003932:	0159      	lsls	r1, r3, #5
 8003934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003938:	0150      	lsls	r0, r2, #5
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	ebb2 080a 	subs.w	r8, r2, sl
 8003942:	eb63 090b 	sbc.w	r9, r3, fp
 8003946:	f04f 0200 	mov.w	r2, #0
 800394a:	f04f 0300 	mov.w	r3, #0
 800394e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800395a:	ebb2 0408 	subs.w	r4, r2, r8
 800395e:	eb63 0509 	sbc.w	r5, r3, r9
 8003962:	f04f 0200 	mov.w	r2, #0
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	00eb      	lsls	r3, r5, #3
 800396c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003970:	00e2      	lsls	r2, r4, #3
 8003972:	4614      	mov	r4, r2
 8003974:	461d      	mov	r5, r3
 8003976:	eb14 030a 	adds.w	r3, r4, sl
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	eb45 030b 	adc.w	r3, r5, fp
 8003980:	607b      	str	r3, [r7, #4]
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800398e:	4629      	mov	r1, r5
 8003990:	028b      	lsls	r3, r1, #10
 8003992:	4621      	mov	r1, r4
 8003994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003998:	4621      	mov	r1, r4
 800399a:	028a      	lsls	r2, r1, #10
 800399c:	4610      	mov	r0, r2
 800399e:	4619      	mov	r1, r3
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	2200      	movs	r2, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	60fa      	str	r2, [r7, #12]
 80039a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ac:	f7fd f84a 	bl	8000a44 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4613      	mov	r3, r2
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039b8:	4b0b      	ldr	r3, [pc, #44]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80039c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x184>)
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3740      	adds	r7, #64	@ 0x40
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	017d7840 	.word	0x017d7840

080039f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e09d      	b.n	8003b42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d108      	bne.n	8003a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a16:	d009      	beq.n	8003a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
 8003a1e:	e005      	b.n	8003a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe fd48 	bl	80024dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a6c:	d902      	bls.n	8003a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	e002      	b.n	8003a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003a82:	d007      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad6:	ea42 0103 	orr.w	r1, r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	0c1b      	lsrs	r3, r3, #16
 8003af0:	f003 0204 	and.w	r2, r3, #4
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b10:	ea42 0103 	orr.w	r1, r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b088      	sub	sp, #32
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	603b      	str	r3, [r7, #0]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_SPI_Transmit+0x22>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e15f      	b.n	8003e2c <HAL_SPI_Transmit+0x2e2>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b74:	f7fe fe6c 	bl	8002850 <HAL_GetTick>
 8003b78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b8e:	e148      	b.n	8003e22 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_SPI_Transmit+0x52>
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba0:	e13f      	b.n	8003e22 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2203      	movs	r2, #3
 8003ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	88fa      	ldrh	r2, [r7, #6]
 8003bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bec:	d10f      	bne.n	8003c0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c18:	2b40      	cmp	r3, #64	@ 0x40
 8003c1a:	d007      	beq.n	8003c2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c34:	d94f      	bls.n	8003cd6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_SPI_Transmit+0xfa>
 8003c3e:	8afb      	ldrh	r3, [r7, #22]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d142      	bne.n	8003cca <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c68:	e02f      	b.n	8003cca <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d112      	bne.n	8003c9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	1c9a      	adds	r2, r3, #2
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	3b01      	subs	r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c9c:	e015      	b.n	8003cca <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c9e:	f7fe fdd7 	bl	8002850 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d803      	bhi.n	8003cb6 <HAL_SPI_Transmit+0x16c>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d102      	bne.n	8003cbc <HAL_SPI_Transmit+0x172>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d106      	bne.n	8003cca <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003cc8:	e0ab      	b.n	8003e22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1ca      	bne.n	8003c6a <HAL_SPI_Transmit+0x120>
 8003cd4:	e080      	b.n	8003dd8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x19a>
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d174      	bne.n	8003dce <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d912      	bls.n	8003d14 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf2:	881a      	ldrh	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cfe:	1c9a      	adds	r2, r3, #2
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b02      	subs	r3, #2
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d12:	e05c      	b.n	8003dce <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	330c      	adds	r3, #12
 8003d1e:	7812      	ldrb	r2, [r2, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d3a:	e048      	b.n	8003dce <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d12b      	bne.n	8003da2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d912      	bls.n	8003d7a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d58:	881a      	ldrh	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b02      	subs	r3, #2
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d78:	e029      	b.n	8003dce <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	7812      	ldrb	r2, [r2, #0]
 8003d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003da0:	e015      	b.n	8003dce <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da2:	f7fe fd55 	bl	8002850 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d803      	bhi.n	8003dba <HAL_SPI_Transmit+0x270>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d102      	bne.n	8003dc0 <HAL_SPI_Transmit+0x276>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d106      	bne.n	8003dce <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003dcc:	e029      	b.n	8003e22 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1b1      	bne.n	8003d3c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fb77 	bl	80044d0 <SPI_EndRxTxTransaction>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e003      	b.n	8003e22 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3720      	adds	r7, #32
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	@ 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e42:	2301      	movs	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x26>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e20a      	b.n	8004270 <HAL_SPI_TransmitReceive+0x43c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e62:	f7fe fcf5 	bl	8002850 <HAL_GetTick>
 8003e66:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e6e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e7e:	7efb      	ldrb	r3, [r7, #27]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00e      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x6e>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8a:	d106      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <HAL_SPI_TransmitReceive+0x66>
 8003e94:	7efb      	ldrb	r3, [r7, #27]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d003      	beq.n	8003ea2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003ea0:	e1e0      	b.n	8004264 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x80>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x80>
 8003eae:	887b      	ldrh	r3, [r7, #2]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d103      	bne.n	8003ebc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003eba:	e1d3      	b.n	8004264 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d003      	beq.n	8003ed0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2205      	movs	r2, #5
 8003ecc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	887a      	ldrh	r2, [r7, #2]
 8003ee0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	887a      	ldrh	r2, [r7, #2]
 8003ee8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	887a      	ldrh	r2, [r7, #2]
 8003ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f12:	d802      	bhi.n	8003f1a <HAL_SPI_TransmitReceive+0xe6>
 8003f14:	8a3b      	ldrh	r3, [r7, #16]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d908      	bls.n	8003f2c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e007      	b.n	8003f3c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f46:	2b40      	cmp	r3, #64	@ 0x40
 8003f48:	d007      	beq.n	8003f5a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f62:	f240 8081 	bls.w	8004068 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x140>
 8003f6e:	8a7b      	ldrh	r3, [r7, #18]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d16d      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f78:	881a      	ldrh	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f84:	1c9a      	adds	r2, r3, #2
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f98:	e05a      	b.n	8004050 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d11b      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x1ac>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x1ac>
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d113      	bne.n	8003fe0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	1c9a      	adds	r2, r3, #2
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d11c      	bne.n	8004028 <HAL_SPI_TransmitReceive+0x1f4>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004004:	b292      	uxth	r2, r2
 8004006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400c:	1c9a      	adds	r2, r3, #2
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004024:	2301      	movs	r3, #1
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004028:	f7fe fc12 	bl	8002850 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004034:	429a      	cmp	r2, r3
 8004036:	d80b      	bhi.n	8004050 <HAL_SPI_TransmitReceive+0x21c>
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403e:	d007      	beq.n	8004050 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800404e:	e109      	b.n	8004264 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d19f      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x166>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004060:	b29b      	uxth	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d199      	bne.n	8003f9a <HAL_SPI_TransmitReceive+0x166>
 8004066:	e0e3      	b.n	8004230 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_SPI_TransmitReceive+0x244>
 8004070:	8a7b      	ldrh	r3, [r7, #18]
 8004072:	2b01      	cmp	r3, #1
 8004074:	f040 80cf 	bne.w	8004216 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b01      	cmp	r3, #1
 8004080:	d912      	bls.n	80040a8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004086:	881a      	ldrh	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004092:	1c9a      	adds	r2, r3, #2
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b02      	subs	r3, #2
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040a6:	e0b6      	b.n	8004216 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	330c      	adds	r3, #12
 80040b2:	7812      	ldrb	r2, [r2, #0]
 80040b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040ce:	e0a2      	b.n	8004216 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d134      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x314>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d02f      	beq.n	8004148 <HAL_SPI_TransmitReceive+0x314>
 80040e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d12c      	bne.n	8004148 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d912      	bls.n	800411e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004108:	1c9a      	adds	r2, r3, #2
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b02      	subs	r3, #2
 8004116:	b29a      	uxth	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800411c:	e012      	b.n	8004144 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d148      	bne.n	80041e8 <HAL_SPI_TransmitReceive+0x3b4>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d042      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d923      	bls.n	80041b6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	b292      	uxth	r2, r2
 800417a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	1c9a      	adds	r2, r3, #2
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b02      	subs	r3, #2
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d81f      	bhi.n	80041e4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e016      	b.n	80041e4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f103 020c 	add.w	r2, r3, #12
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	7812      	ldrb	r2, [r2, #0]
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e4:	2301      	movs	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e8:	f7fe fb32 	bl	8002850 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d803      	bhi.n	8004200 <HAL_SPI_TransmitReceive+0x3cc>
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d102      	bne.n	8004206 <HAL_SPI_TransmitReceive+0x3d2>
 8004200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8004214:	e026      	b.n	8004264 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	f47f af57 	bne.w	80040d0 <HAL_SPI_TransmitReceive+0x29c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f af50 	bne.w	80040d0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f94b 	bl	80044d0 <SPI_EndRxTxTransaction>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2220      	movs	r2, #32
 800424a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425a:	e003      	b.n	8004264 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800426c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	@ 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004286:	b2db      	uxtb	r3, r3
}
 8004288:	4618      	mov	r0, r3
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a4:	f7fe fad4 	bl	8002850 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b4:	f7fe facc 	bl	8002850 <HAL_GetTick>
 80042b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ca:	e054      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d050      	beq.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d4:	f7fe fabc 	bl	8002850 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d13d      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80042f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004302:	d111      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430c:	d004      	beq.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004316:	d107      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004330:	d10f      	bne.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e017      	b.n	8004396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3b01      	subs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d19b      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	2000004c 	.word	0x2000004c

080043a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	@ 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043b6:	f7fe fa4b 	bl	8002850 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	4413      	add	r3, r2
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80043c6:	f7fe fa43 	bl	8002850 <HAL_GetTick>
 80043ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80043d4:	4b3d      	ldr	r3, [pc, #244]	@ (80044cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	00da      	lsls	r2, r3, #3
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	0d1b      	lsrs	r3, r3, #20
 80043e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80043ec:	e060      	b.n	80044b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80043f4:	d107      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x62>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004404:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440c:	d050      	beq.n	80044b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800440e:	f7fe fa1f 	bl	8002850 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	6a3b      	ldr	r3, [r7, #32]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441a:	429a      	cmp	r2, r3
 800441c:	d902      	bls.n	8004424 <SPI_WaitFifoStateUntilTimeout+0x80>
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	2b00      	cmp	r3, #0
 8004422:	d13d      	bne.n	80044a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004432:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800443c:	d111      	bne.n	8004462 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004446:	d004      	beq.n	8004452 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004450:	d107      	bne.n	8004462 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004460:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800446a:	d10f      	bne.n	800448c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800448a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e010      	b.n	80044c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	3b01      	subs	r3, #1
 80044ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d196      	bne.n	80043ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3728      	adds	r7, #40	@ 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2000004c 	.word	0x2000004c

080044d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff ff5b 	bl	80043a4 <SPI_WaitFifoStateUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d007      	beq.n	8004504 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e046      	b.n	8004592 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004504:	4b25      	ldr	r3, [pc, #148]	@ (800459c <SPI_EndRxTxTransaction+0xcc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a25      	ldr	r2, [pc, #148]	@ (80045a0 <SPI_EndRxTxTransaction+0xd0>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0d5b      	lsrs	r3, r3, #21
 8004510:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004514:	fb02 f303 	mul.w	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004522:	d112      	bne.n	800454a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2200      	movs	r2, #0
 800452c:	2180      	movs	r1, #128	@ 0x80
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f7ff feb0 	bl	8004294 <SPI_WaitFlagStateUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d016      	beq.n	8004568 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800453e:	f043 0220 	orr.w	r2, r3, #32
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e023      	b.n	8004592 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	3b01      	subs	r3, #1
 8004554:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b80      	cmp	r3, #128	@ 0x80
 8004562:	d0f2      	beq.n	800454a <SPI_EndRxTxTransaction+0x7a>
 8004564:	e000      	b.n	8004568 <SPI_EndRxTxTransaction+0x98>
        break;
 8004566:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2200      	movs	r2, #0
 8004570:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ff15 	bl	80043a4 <SPI_WaitFifoStateUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004584:	f043 0220 	orr.w	r2, r3, #32
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e000      	b.n	8004592 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	2000004c 	.word	0x2000004c
 80045a0:	165e9f81 	.word	0x165e9f81

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e049      	b.n	800464a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fe f842 	bl	8002654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fc4c 	bl	8004e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e04c      	b.n	8004706 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a26      	ldr	r2, [pc, #152]	@ (8004714 <HAL_TIM_Base_Start+0xc0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d022      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004686:	d01d      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a22      	ldr	r2, [pc, #136]	@ (8004718 <HAL_TIM_Base_Start+0xc4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d018      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a21      	ldr	r2, [pc, #132]	@ (800471c <HAL_TIM_Base_Start+0xc8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004720 <HAL_TIM_Base_Start+0xcc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00e      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_TIM_Base_Start+0xd0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004728 <HAL_TIM_Base_Start+0xd4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_TIM_Base_Start+0x70>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a1b      	ldr	r2, [pc, #108]	@ (800472c <HAL_TIM_Base_Start+0xd8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d115      	bne.n	80046f0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	4b19      	ldr	r3, [pc, #100]	@ (8004730 <HAL_TIM_Base_Start+0xdc>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2b06      	cmp	r3, #6
 80046d4:	d015      	beq.n	8004702 <HAL_TIM_Base_Start+0xae>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046dc:	d011      	beq.n	8004702 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ee:	e008      	b.n	8004702 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0201 	orr.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e000      	b.n	8004704 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	40010000 	.word	0x40010000
 8004718:	40000400 	.word	0x40000400
 800471c:	40000800 	.word	0x40000800
 8004720:	40000c00 	.word	0x40000c00
 8004724:	40010400 	.word	0x40010400
 8004728:	40014000 	.word	0x40014000
 800472c:	40001800 	.word	0x40001800
 8004730:	00010007 	.word	0x00010007

08004734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e054      	b.n	80047f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0201 	orr.w	r2, r2, #1
 8004762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <HAL_TIM_Base_Start_IT+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d022      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004776:	d01d      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <HAL_TIM_Base_Start_IT+0xd4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d018      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a21      	ldr	r2, [pc, #132]	@ (800480c <HAL_TIM_Base_Start_IT+0xd8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d013      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a1f      	ldr	r2, [pc, #124]	@ (8004810 <HAL_TIM_Base_Start_IT+0xdc>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d00e      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1e      	ldr	r2, [pc, #120]	@ (8004814 <HAL_TIM_Base_Start_IT+0xe0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d009      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <HAL_TIM_Base_Start_IT+0xe4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d004      	beq.n	80047b4 <HAL_TIM_Base_Start_IT+0x80>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1b      	ldr	r2, [pc, #108]	@ (800481c <HAL_TIM_Base_Start_IT+0xe8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d115      	bne.n	80047e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <HAL_TIM_Base_Start_IT+0xec>)
 80047bc:	4013      	ands	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b06      	cmp	r3, #6
 80047c4:	d015      	beq.n	80047f2 <HAL_TIM_Base_Start_IT+0xbe>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047cc:	d011      	beq.n	80047f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	e008      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e000      	b.n	80047f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40001800 	.word	0x40001800
 8004820:	00010007 	.word	0x00010007

08004824 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e08f      	b.n	8004958 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7fd fe89 	bl	8002564 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6899      	ldr	r1, [r3, #8]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_TIM_Encoder_Init+0x13c>)
 8004866:	400b      	ands	r3, r1
 8004868:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f000 fb03 	bl	8004e80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4b31      	ldr	r3, [pc, #196]	@ (8004964 <HAL_TIM_Encoder_Init+0x140>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	4313      	orrs	r3, r2
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_TIM_Encoder_Init+0x144>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4b2a      	ldr	r3, [pc, #168]	@ (800496c <HAL_TIM_Encoder_Init+0x148>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	4313      	orrs	r3, r2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	011a      	lsls	r2, r3, #4
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	031b      	lsls	r3, r3, #12
 80048e4:	4313      	orrs	r3, r2
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80048f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80048fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	4313      	orrs	r3, r2
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	fffebff8 	.word	0xfffebff8
 8004964:	fffffcfc 	.word	0xfffffcfc
 8004968:	fffff3f3 	.word	0xfffff3f3
 800496c:	ffff0f0f 	.word	0xffff0f0f

08004970 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004980:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004988:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004990:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004998:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d110      	bne.n	80049c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049a6:	7b7b      	ldrb	r3, [r7, #13]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d001      	beq.n	80049b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e069      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049c0:	e031      	b.n	8004a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b04      	cmp	r3, #4
 80049c6:	d110      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ce:	7b3b      	ldrb	r3, [r7, #12]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e055      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049e8:	e01d      	b.n	8004a26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d108      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d105      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f6:	7b7b      	ldrb	r3, [r7, #13]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d102      	bne.n	8004a02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049fc:	7b3b      	ldrb	r3, [r7, #12]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d001      	beq.n	8004a06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e03e      	b.n	8004a84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_TIM_Encoder_Start+0xc4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d008      	beq.n	8004a44 <HAL_TIM_Encoder_Start+0xd4>
 8004a32:	e00f      	b.n	8004a54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fb65 	bl	800510c <TIM_CCxChannelCmd>
      break;
 8004a42:	e016      	b.n	8004a72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	2104      	movs	r1, #4
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fb5d 	bl	800510c <TIM_CCxChannelCmd>
      break;
 8004a52:	e00e      	b.n	8004a72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fb55 	bl	800510c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2201      	movs	r2, #1
 8004a68:	2104      	movs	r1, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f000 fb4e 	bl	800510c <TIM_CCxChannelCmd>
      break;
 8004a70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0201 	orr.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d020      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01b      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0202 	mvn.w	r2, #2
 8004ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f9b4 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f9a6 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f9b7 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d020      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01b      	beq.n	8004b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f06f 0204 	mvn.w	r2, #4
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f98e 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004b28:	e005      	b.n	8004b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f980 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f991 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0208 	mvn.w	r2, #8
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f968 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f95a 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f96b 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0310 	and.w	r3, r3, #16
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f942 	bl	8004e44 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f934 	bl	8004e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f945 	bl	8004e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00c      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0201 	mvn.w	r2, #1
 8004bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc fd94 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d104      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb31 	bl	8005288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fb29 	bl	800529c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f8ff 	bl	8004e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0220 	mvn.w	r2, #32
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 faf1 	bl	8005274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e0b4      	b.n	8004e22 <HAL_TIM_ConfigClockSource+0x186>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	4b56      	ldr	r3, [pc, #344]	@ (8004e2c <HAL_TIM_ConfigClockSource+0x190>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf0:	d03e      	beq.n	8004d70 <HAL_TIM_ConfigClockSource+0xd4>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	f200 8087 	bhi.w	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cfe:	f000 8086 	beq.w	8004e0e <HAL_TIM_ConfigClockSource+0x172>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d87f      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d08:	2b70      	cmp	r3, #112	@ 0x70
 8004d0a:	d01a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0xa6>
 8004d0c:	2b70      	cmp	r3, #112	@ 0x70
 8004d0e:	d87b      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d10:	2b60      	cmp	r3, #96	@ 0x60
 8004d12:	d050      	beq.n	8004db6 <HAL_TIM_ConfigClockSource+0x11a>
 8004d14:	2b60      	cmp	r3, #96	@ 0x60
 8004d16:	d877      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d18:	2b50      	cmp	r3, #80	@ 0x50
 8004d1a:	d03c      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0xfa>
 8004d1c:	2b50      	cmp	r3, #80	@ 0x50
 8004d1e:	d873      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d20:	2b40      	cmp	r3, #64	@ 0x40
 8004d22:	d058      	beq.n	8004dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8004d24:	2b40      	cmp	r3, #64	@ 0x40
 8004d26:	d86f      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d28:	2b30      	cmp	r3, #48	@ 0x30
 8004d2a:	d064      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	2b30      	cmp	r3, #48	@ 0x30
 8004d2e:	d86b      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d30:	2b20      	cmp	r3, #32
 8004d32:	d060      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d867      	bhi.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05c      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d05a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0x15a>
 8004d40:	e062      	b.n	8004e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	f000 f9bb 	bl	80050cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	609a      	str	r2, [r3, #8]
      break;
 8004d6e:	e04f      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d80:	f000 f9a4 	bl	80050cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d92:	609a      	str	r2, [r3, #8]
      break;
 8004d94:	e03c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	461a      	mov	r2, r3
 8004da4:	f000 f918 	bl	8004fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2150      	movs	r1, #80	@ 0x50
 8004dae:	4618      	mov	r0, r3
 8004db0:	f000 f971 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004db4:	e02c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f000 f937 	bl	8005036 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2160      	movs	r1, #96	@ 0x60
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f961 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004dd4:	e01c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004de2:	461a      	mov	r2, r3
 8004de4:	f000 f8f8 	bl	8004fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2140      	movs	r1, #64	@ 0x40
 8004dee:	4618      	mov	r0, r3
 8004df0:	f000 f951 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004df4:	e00c      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f000 f948 	bl	8005096 <TIM_ITRx_SetConfig>
      break;
 8004e06:	e003      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e000      	b.n	8004e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	fffeff88 	.word	0xfffeff88

08004e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e60:	bf00      	nop
 8004e62:	370c      	adds	r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a46      	ldr	r2, [pc, #280]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a43      	ldr	r2, [pc, #268]	@ (8004fb0 <TIM_Base_SetConfig+0x130>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a42      	ldr	r2, [pc, #264]	@ (8004fb4 <TIM_Base_SetConfig+0x134>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a41      	ldr	r2, [pc, #260]	@ (8004fb8 <TIM_Base_SetConfig+0x138>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_Base_SetConfig+0x40>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a40      	ldr	r2, [pc, #256]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d108      	bne.n	8004ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a35      	ldr	r2, [pc, #212]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee0:	d027      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a32      	ldr	r2, [pc, #200]	@ (8004fb0 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d023      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a31      	ldr	r2, [pc, #196]	@ (8004fb4 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2f      	ldr	r2, [pc, #188]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d017      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc0 <TIM_Base_SetConfig+0x140>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc4 <TIM_Base_SetConfig+0x144>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc8 <TIM_Base_SetConfig+0x148>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <TIM_Base_SetConfig+0x14c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd0 <TIM_Base_SetConfig+0x150>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_Base_SetConfig+0xb2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <TIM_Base_SetConfig+0x154>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a10      	ldr	r2, [pc, #64]	@ (8004fac <TIM_Base_SetConfig+0x12c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_Base_SetConfig+0xf8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <TIM_Base_SetConfig+0x13c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d103      	bne.n	8004f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	691a      	ldr	r2, [r3, #16]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d105      	bne.n	8004f9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	611a      	str	r2, [r3, #16]
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40014400 	.word	0x40014400
 8004fc8:	40014800 	.word	0x40014800
 8004fcc:	40001800 	.word	0x40001800
 8004fd0:	40001c00 	.word	0x40001c00
 8004fd4:	40002000 	.word	0x40002000

08004fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f023 0201 	bic.w	r2, r3, #1
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f023 030a 	bic.w	r3, r3, #10
 8005014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	621a      	str	r2, [r3, #32]
}
 800502a:	bf00      	nop
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005036:	b480      	push	{r7}
 8005038:	b087      	sub	sp, #28
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	f023 0210 	bic.w	r2, r3, #16
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005060:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	031b      	lsls	r3, r3, #12
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005072:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f043 0307 	orr.w	r3, r3, #7
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
 80050d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	021a      	lsls	r2, r3, #8
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	609a      	str	r2, [r3, #8]
}
 8005100:	bf00      	nop
 8005102:	371c      	adds	r7, #28
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2201      	movs	r2, #1
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e06d      	b.n	800524c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a30      	ldr	r2, [pc, #192]	@ (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a2f      	ldr	r2, [pc, #188]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d108      	bne.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a20      	ldr	r2, [pc, #128]	@ (8005258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d022      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d01d      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d018      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d013      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00e      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a15      	ldr	r2, [pc, #84]	@ (800525c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d009      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10c      	bne.n	800523a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	4313      	orrs	r3, r2
 8005230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400
 8005260:	40000400 	.word	0x40000400
 8005264:	40000800 	.word	0x40000800
 8005268:	40000c00 	.word	0x40000c00
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800

08005274 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80052b4:	4904      	ldr	r1, [pc, #16]	@ (80052c8 <MX_FATFS_Init+0x18>)
 80052b6:	4805      	ldr	r0, [pc, #20]	@ (80052cc <MX_FATFS_Init+0x1c>)
 80052b8:	f002 f92a 	bl	8007510 <FATFS_LinkDriver>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	4b03      	ldr	r3, [pc, #12]	@ (80052d0 <MX_FATFS_Init+0x20>)
 80052c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20002300 	.word	0x20002300
 80052cc:	20000058 	.word	0x20000058
 80052d0:	200022fc 	.word	0x200022fc

080052d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80052d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80052da:	4618      	mov	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb fef7 	bl	80010e4 <SD_disk_initialize>
 80052f6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb ffd3 	bl	80012b8 <SD_disk_status>
 8005312:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	603b      	str	r3, [r7, #0]
 8005328:	4603      	mov	r3, r0
 800532a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 800532c:	7bf8      	ldrb	r0, [r7, #15]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	f7fb ffd6 	bl	80012e4 <SD_disk_read>
 8005338:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b084      	sub	sp, #16
 8005346:	af00      	add	r7, sp, #0
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4603      	mov	r3, r0
 8005350:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005352:	7bf8      	ldrb	r0, [r7, #15]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	f7fc f82d 	bl	80013b8 <SD_disk_write>
 800535e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	603a      	str	r2, [r7, #0]
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	460b      	mov	r3, r1
 8005376:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 8005378:	79b9      	ldrb	r1, [r7, #6]
 800537a:	79fb      	ldrb	r3, [r7, #7]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fc f89e 	bl	80014c0 <SD_disk_ioctl>
 8005384:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005386:	4618      	mov	r0, r3
 8005388:	3708      	adds	r7, #8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	4a08      	ldr	r2, [pc, #32]	@ (80053c0 <disk_status+0x30>)
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	79fa      	ldrb	r2, [r7, #7]
 80053a8:	4905      	ldr	r1, [pc, #20]	@ (80053c0 <disk_status+0x30>)
 80053aa:	440a      	add	r2, r1
 80053ac:	7a12      	ldrb	r2, [r2, #8]
 80053ae:	4610      	mov	r0, r2
 80053b0:	4798      	blx	r3
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80053b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000232c 	.word	0x2000232c

080053c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	4a0d      	ldr	r2, [pc, #52]	@ (800540c <disk_initialize+0x48>)
 80053d6:	5cd3      	ldrb	r3, [r2, r3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d111      	bne.n	8005400 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	4a0b      	ldr	r2, [pc, #44]	@ (800540c <disk_initialize+0x48>)
 80053e0:	2101      	movs	r1, #1
 80053e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	4a09      	ldr	r2, [pc, #36]	@ (800540c <disk_initialize+0x48>)
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	79fa      	ldrb	r2, [r7, #7]
 80053f2:	4906      	ldr	r1, [pc, #24]	@ (800540c <disk_initialize+0x48>)
 80053f4:	440a      	add	r2, r1
 80053f6:	7a12      	ldrb	r2, [r2, #8]
 80053f8:	4610      	mov	r0, r2
 80053fa:	4798      	blx	r3
 80053fc:	4603      	mov	r3, r0
 80053fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	2000232c 	.word	0x2000232c

08005410 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005410:	b590      	push	{r4, r7, lr}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	4a0a      	ldr	r2, [pc, #40]	@ (800544c <disk_read+0x3c>)
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	689c      	ldr	r4, [r3, #8]
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	4a07      	ldr	r2, [pc, #28]	@ (800544c <disk_read+0x3c>)
 8005430:	4413      	add	r3, r2
 8005432:	7a18      	ldrb	r0, [r3, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	47a0      	blx	r4
 800543c:	4603      	mov	r3, r0
 800543e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005440:	7dfb      	ldrb	r3, [r7, #23]
}
 8005442:	4618      	mov	r0, r3
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}
 800544a:	bf00      	nop
 800544c:	2000232c 	.word	0x2000232c

08005450 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <disk_write+0x3c>)
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	68dc      	ldr	r4, [r3, #12]
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	4a07      	ldr	r2, [pc, #28]	@ (800548c <disk_write+0x3c>)
 8005470:	4413      	add	r3, r2
 8005472:	7a18      	ldrb	r0, [r3, #8]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	47a0      	blx	r4
 800547c:	4603      	mov	r3, r0
 800547e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005480:	7dfb      	ldrb	r3, [r7, #23]
}
 8005482:	4618      	mov	r0, r3
 8005484:	371c      	adds	r7, #28
 8005486:	46bd      	mov	sp, r7
 8005488:	bd90      	pop	{r4, r7, pc}
 800548a:	bf00      	nop
 800548c:	2000232c 	.word	0x2000232c

08005490 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	603a      	str	r2, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
 800549c:	460b      	mov	r3, r1
 800549e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	4a09      	ldr	r2, [pc, #36]	@ (80054c8 <disk_ioctl+0x38>)
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	79fa      	ldrb	r2, [r7, #7]
 80054ae:	4906      	ldr	r1, [pc, #24]	@ (80054c8 <disk_ioctl+0x38>)
 80054b0:	440a      	add	r2, r1
 80054b2:	7a10      	ldrb	r0, [r2, #8]
 80054b4:	79b9      	ldrb	r1, [r7, #6]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	4798      	blx	r3
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	2000232c 	.word	0x2000232c

080054cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3301      	adds	r3, #1
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80054dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	b21a      	sxth	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	b21b      	sxth	r3, r3
 80054ee:	81fb      	strh	r3, [r7, #14]
	return rv;
 80054f0:	89fb      	ldrh	r3, [r7, #14]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	3303      	adds	r3, #3
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	3202      	adds	r2, #2
 8005516:	7812      	ldrb	r2, [r2, #0]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	021b      	lsls	r3, r3, #8
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	3201      	adds	r2, #1
 8005524:	7812      	ldrb	r2, [r2, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
	return rv;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	887a      	ldrh	r2, [r7, #2]
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]
 800555c:	887b      	ldrh	r3, [r7, #2]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	887a      	ldrh	r2, [r7, #2]
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	701a      	strb	r2, [r3, #0]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	1c5a      	adds	r2, r3, #1
 8005588:	607a      	str	r2, [r7, #4]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	0a1b      	lsrs	r3, r3, #8
 8005594:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	1c5a      	adds	r2, r3, #1
 800559a:	607a      	str	r2, [r7, #4]
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	0a1b      	lsrs	r3, r3, #8
 80055a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	b2d2      	uxtb	r2, r2
 80055b2:	701a      	strb	r2, [r3, #0]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	0a1b      	lsrs	r3, r3, #8
 80055b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80055d2:	b480      	push	{r7}
 80055d4:	b087      	sub	sp, #28
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00d      	beq.n	8005608 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	1c53      	adds	r3, r2, #1
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	1c59      	adds	r1, r3, #1
 80055f6:	6179      	str	r1, [r7, #20]
 80055f8:	7812      	ldrb	r2, [r2, #0]
 80055fa:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3b01      	subs	r3, #1
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f1      	bne.n	80055ec <mem_cpy+0x1a>
	}
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	617a      	str	r2, [r7, #20]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3b01      	subs	r3, #1
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f3      	bne.n	8005624 <mem_set+0x10>
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800564a:	b480      	push	{r7}
 800564c:	b089      	sub	sp, #36	@ 0x24
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	1c5a      	adds	r2, r3, #1
 8005666:	61fa      	str	r2, [r7, #28]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	61ba      	str	r2, [r7, #24]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	1acb      	subs	r3, r1, r3
 8005676:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <mem_cmp+0x40>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0eb      	beq.n	8005662 <mem_cmp+0x18>

	return r;
 800568a:	697b      	ldr	r3, [r7, #20]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3724      	adds	r7, #36	@ 0x24
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80056a2:	e002      	b.n	80056aa <chk_chr+0x12>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3301      	adds	r3, #1
 80056a8:	607b      	str	r3, [r7, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <chk_chr+0x26>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d1f2      	bne.n	80056a4 <chk_chr+0xc>
	return *str;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	781b      	ldrb	r3, [r3, #0]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
	...

080056d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e029      	b.n	8005738 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80056e4:	4a27      	ldr	r2, [pc, #156]	@ (8005784 <chk_lock+0xb4>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	4413      	add	r3, r2
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01d      	beq.n	800572e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80056f2:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <chk_lock+0xb4>)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	4413      	add	r3, r2
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	429a      	cmp	r2, r3
 8005702:	d116      	bne.n	8005732 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005704:	4a1f      	ldr	r2, [pc, #124]	@ (8005784 <chk_lock+0xb4>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	011b      	lsls	r3, r3, #4
 800570a:	4413      	add	r3, r2
 800570c:	3304      	adds	r3, #4
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005714:	429a      	cmp	r2, r3
 8005716:	d10c      	bne.n	8005732 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005718:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <chk_lock+0xb4>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	4413      	add	r3, r2
 8005720:	3308      	adds	r3, #8
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005728:	429a      	cmp	r2, r3
 800572a:	d102      	bne.n	8005732 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800572c:	e007      	b.n	800573e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800572e:	2301      	movs	r3, #1
 8005730:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d9d2      	bls.n	80056e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d109      	bne.n	8005758 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <chk_lock+0x80>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d101      	bne.n	8005754 <chk_lock+0x84>
 8005750:	2300      	movs	r3, #0
 8005752:	e010      	b.n	8005776 <chk_lock+0xa6>
 8005754:	2312      	movs	r3, #18
 8005756:	e00e      	b.n	8005776 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d108      	bne.n	8005770 <chk_lock+0xa0>
 800575e:	4a09      	ldr	r2, [pc, #36]	@ (8005784 <chk_lock+0xb4>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	4413      	add	r3, r2
 8005766:	330c      	adds	r3, #12
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800576e:	d101      	bne.n	8005774 <chk_lock+0xa4>
 8005770:	2310      	movs	r3, #16
 8005772:	e000      	b.n	8005776 <chk_lock+0xa6>
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	2000230c 	.word	0x2000230c

08005788 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e002      	b.n	800579a <enq_lock+0x12>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3301      	adds	r3, #1
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d806      	bhi.n	80057ae <enq_lock+0x26>
 80057a0:	4a09      	ldr	r2, [pc, #36]	@ (80057c8 <enq_lock+0x40>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	4413      	add	r3, r2
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f2      	bne.n	8005794 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	2000230c 	.word	0x2000230c

080057cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e01f      	b.n	800581c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80057dc:	4a41      	ldr	r2, [pc, #260]	@ (80058e4 <inc_lock+0x118>)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	4413      	add	r3, r2
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d113      	bne.n	8005816 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80057ee:	4a3d      	ldr	r2, [pc, #244]	@ (80058e4 <inc_lock+0x118>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	4413      	add	r3, r2
 80057f6:	3304      	adds	r3, #4
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80057fe:	429a      	cmp	r2, r3
 8005800:	d109      	bne.n	8005816 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005802:	4a38      	ldr	r2, [pc, #224]	@ (80058e4 <inc_lock+0x118>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4413      	add	r3, r2
 800580a:	3308      	adds	r3, #8
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005812:	429a      	cmp	r2, r3
 8005814:	d006      	beq.n	8005824 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3301      	adds	r3, #1
 800581a:	60fb      	str	r3, [r7, #12]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d9dc      	bls.n	80057dc <inc_lock+0x10>
 8005822:	e000      	b.n	8005826 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005824:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d132      	bne.n	8005892 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	e002      	b.n	8005838 <inc_lock+0x6c>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d806      	bhi.n	800584c <inc_lock+0x80>
 800583e:	4a29      	ldr	r2, [pc, #164]	@ (80058e4 <inc_lock+0x118>)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	011b      	lsls	r3, r3, #4
 8005844:	4413      	add	r3, r2
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f2      	bne.n	8005832 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d101      	bne.n	8005856 <inc_lock+0x8a>
 8005852:	2300      	movs	r3, #0
 8005854:	e040      	b.n	80058d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4922      	ldr	r1, [pc, #136]	@ (80058e4 <inc_lock+0x118>)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	011b      	lsls	r3, r3, #4
 8005860:	440b      	add	r3, r1
 8005862:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	491e      	ldr	r1, [pc, #120]	@ (80058e4 <inc_lock+0x118>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	440b      	add	r3, r1
 8005870:	3304      	adds	r3, #4
 8005872:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	491a      	ldr	r1, [pc, #104]	@ (80058e4 <inc_lock+0x118>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	440b      	add	r3, r1
 8005880:	3308      	adds	r3, #8
 8005882:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <inc_lock+0x118>)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	4413      	add	r3, r2
 800588c:	330c      	adds	r3, #12
 800588e:	2200      	movs	r2, #0
 8005890:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d009      	beq.n	80058ac <inc_lock+0xe0>
 8005898:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <inc_lock+0x118>)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	4413      	add	r3, r2
 80058a0:	330c      	adds	r3, #12
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <inc_lock+0xe0>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e015      	b.n	80058d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d108      	bne.n	80058c4 <inc_lock+0xf8>
 80058b2:	4a0c      	ldr	r2, [pc, #48]	@ (80058e4 <inc_lock+0x118>)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	4413      	add	r3, r2
 80058ba:	330c      	adds	r3, #12
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	3301      	adds	r3, #1
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	e001      	b.n	80058c8 <inc_lock+0xfc>
 80058c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058c8:	4906      	ldr	r1, [pc, #24]	@ (80058e4 <inc_lock+0x118>)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	440b      	add	r3, r1
 80058d0:	330c      	adds	r3, #12
 80058d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	2000230c 	.word	0x2000230c

080058e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	607b      	str	r3, [r7, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d825      	bhi.n	8005948 <dec_lock+0x60>
		n = Files[i].ctr;
 80058fc:	4a17      	ldr	r2, [pc, #92]	@ (800595c <dec_lock+0x74>)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	4413      	add	r3, r2
 8005904:	330c      	adds	r3, #12
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800590a:	89fb      	ldrh	r3, [r7, #14]
 800590c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005910:	d101      	bne.n	8005916 <dec_lock+0x2e>
 8005912:	2300      	movs	r3, #0
 8005914:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005916:	89fb      	ldrh	r3, [r7, #14]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <dec_lock+0x3a>
 800591c:	89fb      	ldrh	r3, [r7, #14]
 800591e:	3b01      	subs	r3, #1
 8005920:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005922:	4a0e      	ldr	r2, [pc, #56]	@ (800595c <dec_lock+0x74>)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	4413      	add	r3, r2
 800592a:	330c      	adds	r3, #12
 800592c:	89fa      	ldrh	r2, [r7, #14]
 800592e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <dec_lock+0x5a>
 8005936:	4a09      	ldr	r2, [pc, #36]	@ (800595c <dec_lock+0x74>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	4413      	add	r3, r2
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	737b      	strb	r3, [r7, #13]
 8005946:	e001      	b.n	800594c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005948:	2302      	movs	r3, #2
 800594a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800594c:	7b7b      	ldrb	r3, [r7, #13]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2000230c 	.word	0x2000230c

08005960 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e010      	b.n	8005990 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800596e:	4a0d      	ldr	r2, [pc, #52]	@ (80059a4 <clear_lock+0x44>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	4413      	add	r3, r2
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	429a      	cmp	r2, r3
 800597c:	d105      	bne.n	800598a <clear_lock+0x2a>
 800597e:	4a09      	ldr	r2, [pc, #36]	@ (80059a4 <clear_lock+0x44>)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	4413      	add	r3, r2
 8005986:	2200      	movs	r2, #0
 8005988:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3301      	adds	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d9eb      	bls.n	800596e <clear_lock+0xe>
	}
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	2000230c 	.word	0x2000230c

080059a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	78db      	ldrb	r3, [r3, #3]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d034      	beq.n	8005a26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	7858      	ldrb	r0, [r3, #1]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80059cc:	2301      	movs	r3, #1
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f7ff fd3e 	bl	8005450 <disk_write>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80059da:	2301      	movs	r3, #1
 80059dc:	73fb      	strb	r3, [r7, #15]
 80059de:	e022      	b.n	8005a26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	1ad2      	subs	r2, r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d217      	bcs.n	8005a26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	789b      	ldrb	r3, [r3, #2]
 80059fa:	613b      	str	r3, [r7, #16]
 80059fc:	e010      	b.n	8005a20 <sync_window+0x78>
					wsect += fs->fsize;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4413      	add	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	7858      	ldrb	r0, [r3, #1]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005a12:	2301      	movs	r3, #1
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	f7ff fd1b 	bl	8005450 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d8eb      	bhi.n	80059fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3718      	adds	r7, #24
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d01b      	beq.n	8005a80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ffad 	bl	80059a8 <sync_window>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d113      	bne.n	8005a80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7858      	ldrb	r0, [r3, #1]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005a62:	2301      	movs	r3, #1
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	f7ff fcd3 	bl	8005410 <disk_read>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d004      	beq.n	8005a7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005a70:	f04f 33ff 	mov.w	r3, #4294967295
 8005a74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ff87 	bl	80059a8 <sync_window>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d159      	bne.n	8005b58 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b03      	cmp	r3, #3
 8005aaa:	d149      	bne.n	8005b40 <sync_fs+0xb4>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	791b      	ldrb	r3, [r3, #4]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d145      	bne.n	8005b40 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	899b      	ldrh	r3, [r3, #12]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	f7ff fda7 	bl	8005614 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3334      	adds	r3, #52	@ 0x34
 8005aca:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005ace:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fd36 	bl	8005544 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3334      	adds	r3, #52	@ 0x34
 8005adc:	4921      	ldr	r1, [pc, #132]	@ (8005b64 <sync_fs+0xd8>)
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fd4b 	bl	800557a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3334      	adds	r3, #52	@ 0x34
 8005ae8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005aec:	491e      	ldr	r1, [pc, #120]	@ (8005b68 <sync_fs+0xdc>)
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fd43 	bl	800557a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3334      	adds	r3, #52	@ 0x34
 8005af8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f7ff fd39 	bl	800557a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3334      	adds	r3, #52	@ 0x34
 8005b0c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7ff fd2f 	bl	800557a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7858      	ldrb	r0, [r3, #1]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b34:	2301      	movs	r3, #1
 8005b36:	f7ff fc8b 	bl	8005450 <disk_write>
			fs->fsi_flag = 0;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	785b      	ldrb	r3, [r3, #1]
 8005b44:	2200      	movs	r2, #0
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fca1 	bl	8005490 <disk_ioctl>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <sync_fs+0xcc>
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	41615252 	.word	0x41615252
 8005b68:	61417272 	.word	0x61417272

08005b6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	3b02      	subs	r3, #2
 8005b7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	3b02      	subs	r3, #2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d301      	bcc.n	8005b8c <clust2sect+0x20>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	e008      	b.n	8005b9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	895b      	ldrh	r3, [r3, #10]
 8005b90:	461a      	mov	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	fb03 f202 	mul.w	r2, r3, r2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	4413      	add	r3, r2
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d904      	bls.n	8005bca <get_fat+0x20>
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d302      	bcc.n	8005bd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005bca:	2301      	movs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e0ba      	b.n	8005d46 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	f000 8082 	beq.w	8005ce4 <get_fat+0x13a>
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	f300 80a6 	bgt.w	8005d32 <get_fat+0x188>
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d002      	beq.n	8005bf0 <get_fat+0x46>
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d055      	beq.n	8005c9a <get_fat+0xf0>
 8005bee:	e0a0      	b.n	8005d32 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	899b      	ldrh	r3, [r3, #12]
 8005c06:	4619      	mov	r1, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c0e:	4413      	add	r3, r2
 8005c10:	4619      	mov	r1, r3
 8005c12:	6938      	ldr	r0, [r7, #16]
 8005c14:	f7ff ff0c 	bl	8005a30 <move_window>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f040 808c 	bne.w	8005d38 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	60fa      	str	r2, [r7, #12]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	8992      	ldrh	r2, [r2, #12]
 8005c2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c2e:	fb01 f202 	mul.w	r2, r1, r2
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4413      	add	r3, r2
 8005c38:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c3c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	899b      	ldrh	r3, [r3, #12]
 8005c46:	4619      	mov	r1, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c4e:	4413      	add	r3, r2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6938      	ldr	r0, [r7, #16]
 8005c54:	f7ff feec 	bl	8005a30 <move_window>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d16e      	bne.n	8005d3c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	899b      	ldrh	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c6a:	fb01 f202 	mul.w	r2, r1, r2
 8005c6e:	1a9b      	subs	r3, r3, r2
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d002      	beq.n	8005c90 <get_fat+0xe6>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	091b      	lsrs	r3, r3, #4
 8005c8e:	e002      	b.n	8005c96 <get_fat+0xec>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c96:	617b      	str	r3, [r7, #20]
			break;
 8005c98:	e055      	b.n	8005d46 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	899b      	ldrh	r3, [r3, #12]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cae:	4413      	add	r3, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6938      	ldr	r0, [r7, #16]
 8005cb4:	f7ff febc 	bl	8005a30 <move_window>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d140      	bne.n	8005d40 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	8992      	ldrh	r2, [r2, #12]
 8005ccc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cd0:	fb00 f202 	mul.w	r2, r0, r2
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fbf7 	bl	80054cc <ld_word>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	617b      	str	r3, [r7, #20]
			break;
 8005ce2:	e030      	b.n	8005d46 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	899b      	ldrh	r3, [r3, #12]
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6938      	ldr	r0, [r7, #16]
 8005cfe:	f7ff fe97 	bl	8005a30 <move_window>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d11d      	bne.n	8005d44 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	8992      	ldrh	r2, [r2, #12]
 8005d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d1a:	fb00 f202 	mul.w	r2, r0, r2
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	440b      	add	r3, r1
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fbeb 	bl	80054fe <ld_dword>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005d2e:	617b      	str	r3, [r7, #20]
			break;
 8005d30:	e009      	b.n	8005d46 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005d32:	2301      	movs	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e006      	b.n	8005d46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d38:	bf00      	nop
 8005d3a:	e004      	b.n	8005d46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d3c:	bf00      	nop
 8005d3e:	e002      	b.n	8005d46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005d44:	bf00      	nop
		}
	}

	return val;
 8005d46:	697b      	ldr	r3, [r7, #20]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b089      	sub	sp, #36	@ 0x24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	f240 8109 	bls.w	8005f7a <put_fat+0x22a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	f080 8103 	bcs.w	8005f7a <put_fat+0x22a>
		switch (fs->fs_type) {
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	f000 80b6 	beq.w	8005eea <put_fat+0x19a>
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	f300 80fb 	bgt.w	8005f7a <put_fat+0x22a>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d003      	beq.n	8005d90 <put_fat+0x40>
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	f000 8083 	beq.w	8005e94 <put_fat+0x144>
 8005d8e:	e0f4      	b.n	8005f7a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	899b      	ldrh	r3, [r3, #12]
 8005da6:	4619      	mov	r1, r3
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dae:	4413      	add	r3, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fe3c 	bl	8005a30 <move_window>
 8005db8:	4603      	mov	r3, r0
 8005dba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005dbc:	7ffb      	ldrb	r3, [r7, #31]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 80d4 	bne.w	8005f6c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	61ba      	str	r2, [r7, #24]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	8992      	ldrh	r2, [r2, #12]
 8005dd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005dd8:	fb00 f202 	mul.w	r2, r0, r2
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	440b      	add	r3, r1
 8005de0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00d      	beq.n	8005e08 <put_fat+0xb8>
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b25b      	sxtb	r3, r3
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	b25a      	sxtb	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	b25b      	sxtb	r3, r3
 8005e00:	4313      	orrs	r3, r2
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	e001      	b.n	8005e0c <put_fat+0xbc>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2201      	movs	r2, #1
 8005e14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	899b      	ldrh	r3, [r3, #12]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f7ff fe00 	bl	8005a30 <move_window>
 8005e30:	4603      	mov	r3, r0
 8005e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005e34:	7ffb      	ldrb	r3, [r7, #31]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 809a 	bne.w	8005f70 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	899b      	ldrh	r3, [r3, #12]
 8005e46:	461a      	mov	r2, r3
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e4e:	fb00 f202 	mul.w	r2, r0, r2
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	440b      	add	r3, r1
 8005e56:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <put_fat+0x11a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	e00e      	b.n	8005e88 <put_fat+0x138>
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	b25b      	sxtb	r3, r3
 8005e70:	f023 030f 	bic.w	r3, r3, #15
 8005e74:	b25a      	sxtb	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	b25b      	sxtb	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	70da      	strb	r2, [r3, #3]
			break;
 8005e92:	e072      	b.n	8005f7a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	899b      	ldrh	r3, [r3, #12]
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff fdbf 	bl	8005a30 <move_window>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005eb6:	7ffb      	ldrb	r3, [r7, #31]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d15b      	bne.n	8005f74 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	8992      	ldrh	r2, [r2, #12]
 8005eca:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ece:	fb00 f202 	mul.w	r2, r0, r2
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	440b      	add	r3, r1
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	b292      	uxth	r2, r2
 8005eda:	4611      	mov	r1, r2
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fb31 	bl	8005544 <st_word>
			fs->wflag = 1;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	70da      	strb	r2, [r3, #3]
			break;
 8005ee8:	e047      	b.n	8005f7a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	899b      	ldrh	r3, [r3, #12]
 8005ef2:	089b      	lsrs	r3, r3, #2
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005efe:	4413      	add	r3, r2
 8005f00:	4619      	mov	r1, r3
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fd94 	bl	8005a30 <move_window>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f0c:	7ffb      	ldrb	r3, [r7, #31]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d132      	bne.n	8005f78 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	8992      	ldrh	r2, [r2, #12]
 8005f26:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f2a:	fb00 f202 	mul.w	r2, r0, r2
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	440b      	add	r3, r1
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fae3 	bl	80054fe <ld_dword>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f3e:	4323      	orrs	r3, r4
 8005f40:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	8992      	ldrh	r2, [r2, #12]
 8005f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f54:	fb00 f202 	mul.w	r2, r0, r2
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fb0b 	bl	800557a <st_dword>
			fs->wflag = 1;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2201      	movs	r2, #1
 8005f68:	70da      	strb	r2, [r3, #3]
			break;
 8005f6a:	e006      	b.n	8005f7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f6c:	bf00      	nop
 8005f6e:	e004      	b.n	8005f7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f70:	bf00      	nop
 8005f72:	e002      	b.n	8005f7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f74:	bf00      	nop
 8005f76:	e000      	b.n	8005f7a <put_fat+0x22a>
			if (res != FR_OK) break;
 8005f78:	bf00      	nop
		}
	}
	return res;
 8005f7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3724      	adds	r7, #36	@ 0x24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd90      	pop	{r4, r7, pc}

08005f84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d904      	bls.n	8005faa <remove_chain+0x26>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d301      	bcc.n	8005fae <remove_chain+0x2a>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e04b      	b.n	8006046 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	69b8      	ldr	r0, [r7, #24]
 8005fbc:	f7ff fec8 	bl	8005d50 <put_fat>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005fc4:	7ffb      	ldrb	r3, [r7, #31]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <remove_chain+0x4a>
 8005fca:	7ffb      	ldrb	r3, [r7, #31]
 8005fcc:	e03b      	b.n	8006046 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff fdea 	bl	8005baa <get_fat>
 8005fd6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d031      	beq.n	8006042 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d101      	bne.n	8005fe8 <remove_chain+0x64>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	e02e      	b.n	8006046 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fee:	d101      	bne.n	8005ff4 <remove_chain+0x70>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e028      	b.n	8006046 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	68b9      	ldr	r1, [r7, #8]
 8005ff8:	69b8      	ldr	r0, [r7, #24]
 8005ffa:	f7ff fea9 	bl	8005d50 <put_fat>
 8005ffe:	4603      	mov	r3, r0
 8006000:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006002:	7ffb      	ldrb	r3, [r7, #31]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <remove_chain+0x88>
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	e01c      	b.n	8006046 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	695a      	ldr	r2, [r3, #20]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	3b02      	subs	r3, #2
 8006016:	429a      	cmp	r2, r3
 8006018:	d20b      	bcs.n	8006032 <remove_chain+0xae>
			fs->free_clst++;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	791b      	ldrb	r3, [r3, #4]
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	68ba      	ldr	r2, [r7, #8]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3c6      	bcc.n	8005fce <remove_chain+0x4a>
 8006040:	e000      	b.n	8006044 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006042:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10d      	bne.n	8006080 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <create_chain+0x2c>
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	429a      	cmp	r2, r3
 8006078:	d31b      	bcc.n	80060b2 <create_chain+0x64>
 800607a:	2301      	movs	r3, #1
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e018      	b.n	80060b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff fd91 	bl	8005baa <get_fat>
 8006088:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d801      	bhi.n	8006094 <create_chain+0x46>
 8006090:	2301      	movs	r3, #1
 8006092:	e070      	b.n	8006176 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609a:	d101      	bne.n	80060a0 <create_chain+0x52>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	e06a      	b.n	8006176 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d201      	bcs.n	80060ae <create_chain+0x60>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	e063      	b.n	8006176 <create_chain+0x128>
		scl = clst;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	3301      	adds	r3, #1
 80060ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d307      	bcc.n	80060d6 <create_chain+0x88>
				ncl = 2;
 80060c6:	2302      	movs	r3, #2
 80060c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d901      	bls.n	80060d6 <create_chain+0x88>
 80060d2:	2300      	movs	r3, #0
 80060d4:	e04f      	b.n	8006176 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80060d6:	69f9      	ldr	r1, [r7, #28]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7ff fd66 	bl	8005baa <get_fat>
 80060de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d003      	beq.n	80060f4 <create_chain+0xa6>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d101      	bne.n	80060f8 <create_chain+0xaa>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	e03e      	b.n	8006176 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d1da      	bne.n	80060b6 <create_chain+0x68>
 8006100:	2300      	movs	r3, #0
 8006102:	e038      	b.n	8006176 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006104:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	69f9      	ldr	r1, [r7, #28]
 800610c:	6938      	ldr	r0, [r7, #16]
 800610e:	f7ff fe1f 	bl	8005d50 <put_fat>
 8006112:	4603      	mov	r3, r0
 8006114:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <create_chain+0xe2>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d006      	beq.n	8006130 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6938      	ldr	r0, [r7, #16]
 8006128:	f7ff fe12 	bl	8005d50 <put_fat>
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d116      	bne.n	8006164 <create_chain+0x116>
		fs->last_clst = ncl;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	3b02      	subs	r3, #2
 8006146:	429a      	cmp	r2, r3
 8006148:	d804      	bhi.n	8006154 <create_chain+0x106>
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	1e5a      	subs	r2, r3, #1
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	791b      	ldrb	r3, [r3, #4]
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	b2da      	uxtb	r2, r3
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	711a      	strb	r2, [r3, #4]
 8006162:	e007      	b.n	8006174 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006164:	7dfb      	ldrb	r3, [r7, #23]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <create_chain+0x122>
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
 800616e:	e000      	b.n	8006172 <create_chain+0x124>
 8006170:	2301      	movs	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006174:	69fb      	ldr	r3, [r7, #28]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006194:	d204      	bcs.n	80061a0 <dir_sdi+0x22>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	f003 031f 	and.w	r3, r3, #31
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 80061a0:	2302      	movs	r3, #2
 80061a2:	e071      	b.n	8006288 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <dir_sdi+0x46>
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d902      	bls.n	80061c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10c      	bne.n	80061e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	095b      	lsrs	r3, r3, #5
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	8912      	ldrh	r2, [r2, #8]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d301      	bcc.n	80061da <dir_sdi+0x5c>
 80061d6:	2302      	movs	r3, #2
 80061d8:	e056      	b.n	8006288 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	61da      	str	r2, [r3, #28]
 80061e2:	e02d      	b.n	8006240 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	895b      	ldrh	r3, [r3, #10]
 80061e8:	461a      	mov	r2, r3
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	899b      	ldrh	r3, [r3, #12]
 80061ee:	fb02 f303 	mul.w	r3, r2, r3
 80061f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80061f4:	e019      	b.n	800622a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6979      	ldr	r1, [r7, #20]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fcd5 	bl	8005baa <get_fat>
 8006200:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d101      	bne.n	800620e <dir_sdi+0x90>
 800620a:	2301      	movs	r3, #1
 800620c:	e03c      	b.n	8006288 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d904      	bls.n	800621e <dir_sdi+0xa0>
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	429a      	cmp	r2, r3
 800621c:	d301      	bcc.n	8006222 <dir_sdi+0xa4>
 800621e:	2302      	movs	r3, #2
 8006220:	e032      	b.n	8006288 <dir_sdi+0x10a>
			ofs -= csz;
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	429a      	cmp	r2, r3
 8006230:	d2e1      	bcs.n	80061f6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006232:	6979      	ldr	r1, [r7, #20]
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7ff fc99 	bl	8005b6c <clust2sect>
 800623a:	4602      	mov	r2, r0
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <dir_sdi+0xd4>
 800624e:	2302      	movs	r3, #2
 8006250:	e01a      	b.n	8006288 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	69da      	ldr	r2, [r3, #28]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	899b      	ldrh	r3, [r3, #12]
 800625a:	4619      	mov	r1, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006262:	441a      	add	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	899b      	ldrh	r3, [r3, #12]
 8006272:	461a      	mov	r2, r3
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	fbb3 f0f2 	udiv	r0, r3, r2
 800627a:	fb00 f202 	mul.w	r2, r0, r2
 800627e:	1a9b      	subs	r3, r3, r2
 8006280:	18ca      	adds	r2, r1, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	3320      	adds	r3, #32
 80062a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <dir_next+0x28>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80062b6:	d301      	bcc.n	80062bc <dir_next+0x2c>
 80062b8:	2304      	movs	r3, #4
 80062ba:	e0bb      	b.n	8006434 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	899b      	ldrh	r3, [r3, #12]
 80062c0:	461a      	mov	r2, r3
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062c8:	fb01 f202 	mul.w	r2, r1, r2
 80062cc:	1a9b      	subs	r3, r3, r2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 809d 	bne.w	800640e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10b      	bne.n	80062fe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	8912      	ldrh	r2, [r2, #8]
 80062ee:	4293      	cmp	r3, r2
 80062f0:	f0c0 808d 	bcc.w	800640e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	61da      	str	r2, [r3, #28]
 80062fa:	2304      	movs	r3, #4
 80062fc:	e09a      	b.n	8006434 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	899b      	ldrh	r3, [r3, #12]
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	fbb3 f3f2 	udiv	r3, r3, r2
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	8952      	ldrh	r2, [r2, #10]
 800630e:	3a01      	subs	r2, #1
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d17b      	bne.n	800640e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	4619      	mov	r1, r3
 800631e:	4610      	mov	r0, r2
 8006320:	f7ff fc43 	bl	8005baa <get_fat>
 8006324:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d801      	bhi.n	8006330 <dir_next+0xa0>
 800632c:	2302      	movs	r3, #2
 800632e:	e081      	b.n	8006434 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d101      	bne.n	800633c <dir_next+0xac>
 8006338:	2301      	movs	r3, #1
 800633a:	e07b      	b.n	8006434 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	429a      	cmp	r2, r3
 8006344:	d359      	bcc.n	80063fa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d104      	bne.n	8006356 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	61da      	str	r2, [r3, #28]
 8006352:	2304      	movs	r3, #4
 8006354:	e06e      	b.n	8006434 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7ff fe75 	bl	800604e <create_chain>
 8006364:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <dir_next+0xe0>
 800636c:	2307      	movs	r3, #7
 800636e:	e061      	b.n	8006434 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <dir_next+0xea>
 8006376:	2302      	movs	r3, #2
 8006378:	e05c      	b.n	8006434 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d101      	bne.n	8006386 <dir_next+0xf6>
 8006382:	2301      	movs	r3, #1
 8006384:	e056      	b.n	8006434 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fb0e 	bl	80059a8 <sync_window>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <dir_next+0x106>
 8006392:	2301      	movs	r3, #1
 8006394:	e04e      	b.n	8006434 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	899b      	ldrh	r3, [r3, #12]
 80063a0:	461a      	mov	r2, r3
 80063a2:	2100      	movs	r1, #0
 80063a4:	f7ff f936 	bl	8005614 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063a8:	2300      	movs	r3, #0
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f7ff fbdc 	bl	8005b6c <clust2sect>
 80063b4:	4602      	mov	r2, r0
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80063ba:	e012      	b.n	80063e2 <dir_next+0x152>
						fs->wflag = 1;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff faf0 	bl	80059a8 <sync_window>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <dir_next+0x142>
 80063ce:	2301      	movs	r3, #1
 80063d0:	e030      	b.n	8006434 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3301      	adds	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063dc:	1c5a      	adds	r2, r3, #1
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	895b      	ldrh	r3, [r3, #10]
 80063e6:	461a      	mov	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d3e6      	bcc.n	80063bc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	697a      	ldr	r2, [r7, #20]
 80063fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006400:	6979      	ldr	r1, [r7, #20]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f7ff fbb2 	bl	8005b6c <clust2sect>
 8006408:	4602      	mov	r2, r0
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	899b      	ldrh	r3, [r3, #12]
 800641e:	461a      	mov	r2, r3
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	fbb3 f0f2 	udiv	r0, r3, r2
 8006426:	fb00 f202 	mul.w	r2, r0, r2
 800642a:	1a9b      	subs	r3, r3, r2
 800642c:	18ca      	adds	r2, r1, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800644c:	2100      	movs	r1, #0
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fe95 	bl	800617e <dir_sdi>
 8006454:	4603      	mov	r3, r0
 8006456:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d12b      	bne.n	80064b6 <dir_alloc+0x7a>
		n = 0;
 800645e:	2300      	movs	r3, #0
 8006460:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	4619      	mov	r1, r3
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fae1 	bl	8005a30 <move_window>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11d      	bne.n	80064b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2be5      	cmp	r3, #229	@ 0xe5
 8006480:	d004      	beq.n	800648c <dir_alloc+0x50>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d107      	bne.n	800649c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	3301      	adds	r3, #1
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d102      	bne.n	80064a0 <dir_alloc+0x64>
 800649a:	e00c      	b.n	80064b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80064a0:	2101      	movs	r1, #1
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff fef4 	bl	8006290 <dir_next>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0d7      	beq.n	8006462 <dir_alloc+0x26>
 80064b2:	e000      	b.n	80064b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80064b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d101      	bne.n	80064c0 <dir_alloc+0x84>
 80064bc:	2307      	movs	r3, #7
 80064be:	75fb      	strb	r3, [r7, #23]
	return res;
 80064c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3718      	adds	r7, #24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	331a      	adds	r3, #26
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fff7 	bl	80054cc <ld_word>
 80064de:	4603      	mov	r3, r0
 80064e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d109      	bne.n	80064fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	3314      	adds	r3, #20
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe ffec 	bl	80054cc <ld_word>
 80064f4:	4603      	mov	r3, r0
 80064f6:	041b      	lsls	r3, r3, #16
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80064fe:	68fb      	ldr	r3, [r7, #12]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	331a      	adds	r3, #26
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	b292      	uxth	r2, r2
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff f810 	bl	8005544 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d109      	bne.n	8006540 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f103 0214 	add.w	r2, r3, #20
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	4610      	mov	r0, r2
 800653c:	f7ff f802 	bl	8005544 <st_word>
	}
}
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fe10 	bl	800617e <dir_sdi>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006562:	7dfb      	ldrb	r3, [r7, #23]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <dir_find+0x24>
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	e03e      	b.n	80065ea <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	4619      	mov	r1, r3
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f7ff fa5c 	bl	8005a30 <move_window>
 8006578:	4603      	mov	r3, r0
 800657a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800657c:	7dfb      	ldrb	r3, [r7, #23]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d12f      	bne.n	80065e2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <dir_find+0x4e>
 8006590:	2304      	movs	r3, #4
 8006592:	75fb      	strb	r3, [r7, #23]
 8006594:	e028      	b.n	80065e8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	330b      	adds	r3, #11
 800659c:	781b      	ldrb	r3, [r3, #0]
 800659e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	330b      	adds	r3, #11
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10a      	bne.n	80065ce <dir_find+0x86>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a18      	ldr	r0, [r3, #32]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3324      	adds	r3, #36	@ 0x24
 80065c0:	220b      	movs	r2, #11
 80065c2:	4619      	mov	r1, r3
 80065c4:	f7ff f841 	bl	800564a <mem_cmp>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00b      	beq.n	80065e6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80065ce:	2100      	movs	r1, #0
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f7ff fe5d 	bl	8006290 <dir_next>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0c5      	beq.n	800656c <dir_find+0x24>
 80065e0:	e002      	b.n	80065e8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80065e6:	bf00      	nop

	return res;
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006600:	2101      	movs	r1, #1
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff ff1a 	bl	800643c <dir_alloc>
 8006608:	4603      	mov	r3, r0
 800660a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d11c      	bne.n	800664c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	4619      	mov	r1, r3
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f7ff fa09 	bl	8005a30 <move_window>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d111      	bne.n	800664c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	2220      	movs	r2, #32
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f7fe ffef 	bl	8005614 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a18      	ldr	r0, [r3, #32]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3324      	adds	r3, #36	@ 0x24
 800663e:	220b      	movs	r2, #11
 8006640:	4619      	mov	r1, r3
 8006642:	f7fe ffc6 	bl	80055d2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2201      	movs	r2, #1
 800664a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b088      	sub	sp, #32
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3324      	adds	r3, #36	@ 0x24
 800666c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800666e:	220b      	movs	r2, #11
 8006670:	2120      	movs	r1, #32
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	f7fe ffce 	bl	8005614 <mem_set>
	si = i = 0; ni = 8;
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	2308      	movs	r3, #8
 8006682:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	61fa      	str	r2, [r7, #28]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006692:	7efb      	ldrb	r3, [r7, #27]
 8006694:	2b20      	cmp	r3, #32
 8006696:	d94e      	bls.n	8006736 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006698:	7efb      	ldrb	r3, [r7, #27]
 800669a:	2b2f      	cmp	r3, #47	@ 0x2f
 800669c:	d006      	beq.n	80066ac <create_name+0x54>
 800669e:	7efb      	ldrb	r3, [r7, #27]
 80066a0:	2b5c      	cmp	r3, #92	@ 0x5c
 80066a2:	d110      	bne.n	80066c6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80066a4:	e002      	b.n	80066ac <create_name+0x54>
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	3301      	adds	r3, #1
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	4413      	add	r3, r2
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80066b6:	d0f6      	beq.n	80066a6 <create_name+0x4e>
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80066c2:	d0f0      	beq.n	80066a6 <create_name+0x4e>
			break;
 80066c4:	e038      	b.n	8006738 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80066c6:	7efb      	ldrb	r3, [r7, #27]
 80066c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ca:	d003      	beq.n	80066d4 <create_name+0x7c>
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d30c      	bcc.n	80066ee <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2b0b      	cmp	r3, #11
 80066d8:	d002      	beq.n	80066e0 <create_name+0x88>
 80066da:	7efb      	ldrb	r3, [r7, #27]
 80066dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80066de:	d001      	beq.n	80066e4 <create_name+0x8c>
 80066e0:	2306      	movs	r3, #6
 80066e2:	e044      	b.n	800676e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80066e4:	2308      	movs	r3, #8
 80066e6:	613b      	str	r3, [r7, #16]
 80066e8:	230b      	movs	r3, #11
 80066ea:	617b      	str	r3, [r7, #20]
			continue;
 80066ec:	e022      	b.n	8006734 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80066ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da04      	bge.n	8006700 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80066f6:	7efb      	ldrb	r3, [r7, #27]
 80066f8:	3b80      	subs	r3, #128	@ 0x80
 80066fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006778 <create_name+0x120>)
 80066fc:	5cd3      	ldrb	r3, [r2, r3]
 80066fe:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006700:	7efb      	ldrb	r3, [r7, #27]
 8006702:	4619      	mov	r1, r3
 8006704:	481d      	ldr	r0, [pc, #116]	@ (800677c <create_name+0x124>)
 8006706:	f7fe ffc7 	bl	8005698 <chk_chr>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <create_name+0xbc>
 8006710:	2306      	movs	r3, #6
 8006712:	e02c      	b.n	800676e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006714:	7efb      	ldrb	r3, [r7, #27]
 8006716:	2b60      	cmp	r3, #96	@ 0x60
 8006718:	d905      	bls.n	8006726 <create_name+0xce>
 800671a:	7efb      	ldrb	r3, [r7, #27]
 800671c:	2b7a      	cmp	r3, #122	@ 0x7a
 800671e:	d802      	bhi.n	8006726 <create_name+0xce>
 8006720:	7efb      	ldrb	r3, [r7, #27]
 8006722:	3b20      	subs	r3, #32
 8006724:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	613a      	str	r2, [r7, #16]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	4413      	add	r3, r2
 8006730:	7efa      	ldrb	r2, [r7, #27]
 8006732:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006734:	e7a6      	b.n	8006684 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006736:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	441a      	add	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <create_name+0xf4>
 8006748:	2306      	movs	r3, #6
 800674a:	e010      	b.n	800676e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2be5      	cmp	r3, #229	@ 0xe5
 8006752:	d102      	bne.n	800675a <create_name+0x102>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2205      	movs	r2, #5
 8006758:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800675a:	7efb      	ldrb	r3, [r7, #27]
 800675c:	2b20      	cmp	r3, #32
 800675e:	d801      	bhi.n	8006764 <create_name+0x10c>
 8006760:	2204      	movs	r2, #4
 8006762:	e000      	b.n	8006766 <create_name+0x10e>
 8006764:	2200      	movs	r2, #0
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	330b      	adds	r3, #11
 800676a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800676c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800676e:	4618      	mov	r0, r3
 8006770:	3720      	adds	r7, #32
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	08007608 	.word	0x08007608
 800677c:	080075b4 	.word	0x080075b4

08006780 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006794:	e002      	b.n	800679c <follow_path+0x1c>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80067a2:	d0f8      	beq.n	8006796 <follow_path+0x16>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80067aa:	d0f4      	beq.n	8006796 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b1f      	cmp	r3, #31
 80067b8:	d80a      	bhi.n	80067d0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2280      	movs	r2, #128	@ 0x80
 80067be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff fcda 	bl	800617e <dir_sdi>
 80067ca:	4603      	mov	r3, r0
 80067cc:	75fb      	strb	r3, [r7, #23]
 80067ce:	e048      	b.n	8006862 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80067d0:	463b      	mov	r3, r7
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ff3f 	bl	8006658 <create_name>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d139      	bne.n	8006858 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff feaf 	bl	8006548 <dir_find>
 80067ea:	4603      	mov	r3, r0
 80067ec:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80067f4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d12c      	bne.n	800685c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b00      	cmp	r3, #0
 800680a:	d127      	bne.n	800685c <follow_path+0xdc>
 800680c:	2305      	movs	r3, #5
 800680e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006810:	e024      	b.n	800685c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006812:	7afb      	ldrb	r3, [r7, #11]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b00      	cmp	r3, #0
 800681a:	d121      	bne.n	8006860 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	799b      	ldrb	r3, [r3, #6]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006828:	2305      	movs	r3, #5
 800682a:	75fb      	strb	r3, [r7, #23]
 800682c:	e019      	b.n	8006862 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8992      	ldrh	r2, [r2, #12]
 800683c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006840:	fb00 f202 	mul.w	r2, r0, r2
 8006844:	1a9b      	subs	r3, r3, r2
 8006846:	440b      	add	r3, r1
 8006848:	4619      	mov	r1, r3
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff fe3d 	bl	80064ca <ld_clust>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006856:	e7bb      	b.n	80067d0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006858:	bf00      	nop
 800685a:	e002      	b.n	8006862 <follow_path+0xe2>
				break;
 800685c:	bf00      	nop
 800685e:	e000      	b.n	8006862 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006860:	bf00      	nop
			}
		}
	}

	return res;
 8006862:	7dfb      	ldrb	r3, [r7, #23]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006874:	f04f 33ff 	mov.w	r3, #4294967295
 8006878:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d031      	beq.n	80068e6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e002      	b.n	8006890 <get_ldnumber+0x24>
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	3301      	adds	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b20      	cmp	r3, #32
 8006896:	d903      	bls.n	80068a0 <get_ldnumber+0x34>
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b3a      	cmp	r3, #58	@ 0x3a
 800689e:	d1f4      	bne.n	800688a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b3a      	cmp	r3, #58	@ 0x3a
 80068a6:	d11c      	bne.n	80068e2 <get_ldnumber+0x76>
			tp = *path;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	60fa      	str	r2, [r7, #12]
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	3b30      	subs	r3, #48	@ 0x30
 80068b8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b09      	cmp	r3, #9
 80068be:	d80e      	bhi.n	80068de <get_ldnumber+0x72>
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d10a      	bne.n	80068de <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d107      	bne.n	80068de <get_ldnumber+0x72>
					vol = (int)i;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	3301      	adds	r3, #1
 80068d6:	617b      	str	r3, [r7, #20]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	e002      	b.n	80068e8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80068e2:	2300      	movs	r3, #0
 80068e4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80068e6:	693b      	ldr	r3, [r7, #16]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	371c      	adds	r7, #28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	70da      	strb	r2, [r3, #3]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f04f 32ff 	mov.w	r2, #4294967295
 800690a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f7ff f88e 	bl	8005a30 <move_window>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <check_fs+0x2a>
 800691a:	2304      	movs	r3, #4
 800691c:	e038      	b.n	8006990 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3334      	adds	r3, #52	@ 0x34
 8006922:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fdd0 	bl	80054cc <ld_word>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006934:	429a      	cmp	r2, r3
 8006936:	d001      	beq.n	800693c <check_fs+0x48>
 8006938:	2303      	movs	r3, #3
 800693a:	e029      	b.n	8006990 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006942:	2be9      	cmp	r3, #233	@ 0xe9
 8006944:	d009      	beq.n	800695a <check_fs+0x66>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800694c:	2beb      	cmp	r3, #235	@ 0xeb
 800694e:	d11e      	bne.n	800698e <check_fs+0x9a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006956:	2b90      	cmp	r3, #144	@ 0x90
 8006958:	d119      	bne.n	800698e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3334      	adds	r3, #52	@ 0x34
 800695e:	3336      	adds	r3, #54	@ 0x36
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fdcc 	bl	80054fe <ld_dword>
 8006966:	4603      	mov	r3, r0
 8006968:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800696c:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <check_fs+0xa4>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <check_fs+0x82>
 8006972:	2300      	movs	r3, #0
 8006974:	e00c      	b.n	8006990 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3334      	adds	r3, #52	@ 0x34
 800697a:	3352      	adds	r3, #82	@ 0x52
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fdbe 	bl	80054fe <ld_dword>
 8006982:	4603      	mov	r3, r0
 8006984:	4a05      	ldr	r2, [pc, #20]	@ (800699c <check_fs+0xa8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d101      	bne.n	800698e <check_fs+0x9a>
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800698e:	2302      	movs	r3, #2
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	00544146 	.word	0x00544146
 800699c:	33544146 	.word	0x33544146

080069a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b096      	sub	sp, #88	@ 0x58
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	4613      	mov	r3, r2
 80069ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff ff59 	bl	800686c <get_ldnumber>
 80069ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80069bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da01      	bge.n	80069c6 <find_volume+0x26>
 80069c2:	230b      	movs	r3, #11
 80069c4:	e262      	b.n	8006e8c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80069c6:	4a9f      	ldr	r2, [pc, #636]	@ (8006c44 <find_volume+0x2a4>)
 80069c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ce:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80069d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <find_volume+0x3a>
 80069d6:	230c      	movs	r3, #12
 80069d8:	e258      	b.n	8006e8c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80069e0:	79fb      	ldrb	r3, [r7, #7]
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80069e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d01a      	beq.n	8006a26 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	785b      	ldrb	r3, [r3, #1]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe fccb 	bl	8005390 <disk_status>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10c      	bne.n	8006a26 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <find_volume+0x82>
 8006a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e234      	b.n	8006e8c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8006a22:	2300      	movs	r3, #0
 8006a24:	e232      	b.n	8006e8c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe fcc3 	bl	80053c4 <disk_initialize>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006a44:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006a50:	2303      	movs	r3, #3
 8006a52:	e21b      	b.n	8006e8c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006a54:	79fb      	ldrb	r3, [r7, #7]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <find_volume+0xca>
 8006a5a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006a66:	230a      	movs	r3, #10
 8006a68:	e210      	b.n	8006e8c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a6c:	7858      	ldrb	r0, [r3, #1]
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	330c      	adds	r3, #12
 8006a72:	461a      	mov	r2, r3
 8006a74:	2102      	movs	r1, #2
 8006a76:	f7fe fd0b 	bl	8005490 <disk_ioctl>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <find_volume+0xe4>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e203      	b.n	8006e8c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	899b      	ldrh	r3, [r3, #12]
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8c:	d80d      	bhi.n	8006aaa <find_volume+0x10a>
 8006a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a90:	899b      	ldrh	r3, [r3, #12]
 8006a92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a96:	d308      	bcc.n	8006aaa <find_volume+0x10a>
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	899b      	ldrh	r3, [r3, #12]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	899b      	ldrh	r3, [r3, #12]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <find_volume+0x10e>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e1ee      	b.n	8006e8c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006ab2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ab4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ab6:	f7ff ff1d 	bl	80068f4 <check_fs>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006ac0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d149      	bne.n	8006b5c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ac8:	2300      	movs	r3, #0
 8006aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8006acc:	e01e      	b.n	8006b0c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8006ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006adc:	4413      	add	r3, r2
 8006ade:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d006      	beq.n	8006af8 <find_volume+0x158>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	3308      	adds	r3, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fd05 	bl	80054fe <ld_dword>
 8006af4:	4602      	mov	r2, r0
 8006af6:	e000      	b.n	8006afa <find_volume+0x15a>
 8006af8:	2200      	movs	r2, #0
 8006afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	3358      	adds	r3, #88	@ 0x58
 8006b00:	443b      	add	r3, r7
 8006b02:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	3301      	adds	r3, #1
 8006b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b0e:	2b03      	cmp	r3, #3
 8006b10:	d9dd      	bls.n	8006ace <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006b12:	2300      	movs	r3, #0
 8006b14:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <find_volume+0x182>
 8006b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	3358      	adds	r3, #88	@ 0x58
 8006b28:	443b      	add	r3, r7
 8006b2a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006b2e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <find_volume+0x1a2>
 8006b36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b38:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b3a:	f7ff fedb 	bl	80068f4 <check_fs>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	e000      	b.n	8006b44 <find_volume+0x1a4>
 8006b42:	2303      	movs	r3, #3
 8006b44:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006b48:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d905      	bls.n	8006b5c <find_volume+0x1bc>
 8006b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b52:	3301      	adds	r3, #1
 8006b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d9e2      	bls.n	8006b22 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d101      	bne.n	8006b68 <find_volume+0x1c8>
 8006b64:	2301      	movs	r3, #1
 8006b66:	e191      	b.n	8006e8c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006b68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d901      	bls.n	8006b74 <find_volume+0x1d4>
 8006b70:	230d      	movs	r3, #13
 8006b72:	e18b      	b.n	8006e8c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3334      	adds	r3, #52	@ 0x34
 8006b78:	330b      	adds	r3, #11
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fca6 	bl	80054cc <ld_word>
 8006b80:	4603      	mov	r3, r0
 8006b82:	461a      	mov	r2, r3
 8006b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b86:	899b      	ldrh	r3, [r3, #12]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d001      	beq.n	8006b90 <find_volume+0x1f0>
 8006b8c:	230d      	movs	r3, #13
 8006b8e:	e17d      	b.n	8006e8c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	3334      	adds	r3, #52	@ 0x34
 8006b94:	3316      	adds	r3, #22
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fe fc98 	bl	80054cc <ld_word>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <find_volume+0x214>
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba8:	3334      	adds	r3, #52	@ 0x34
 8006baa:	3324      	adds	r3, #36	@ 0x24
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7fe fca6 	bl	80054fe <ld_dword>
 8006bb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bb8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bbc:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc6:	789b      	ldrb	r3, [r3, #2]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d005      	beq.n	8006bd8 <find_volume+0x238>
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	789b      	ldrb	r3, [r3, #2]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d001      	beq.n	8006bd8 <find_volume+0x238>
 8006bd4:	230d      	movs	r3, #13
 8006bd6:	e159      	b.n	8006e8c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	789b      	ldrb	r3, [r3, #2]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be0:	fb02 f303 	mul.w	r3, r2, r3
 8006be4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bec:	461a      	mov	r2, r3
 8006bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf4:	895b      	ldrh	r3, [r3, #10]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <find_volume+0x26c>
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfc:	895b      	ldrh	r3, [r3, #10]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c02:	895b      	ldrh	r3, [r3, #10]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	4013      	ands	r3, r2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <find_volume+0x270>
 8006c0c:	230d      	movs	r3, #13
 8006c0e:	e13d      	b.n	8006e8c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c12:	3334      	adds	r3, #52	@ 0x34
 8006c14:	3311      	adds	r3, #17
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fe fc58 	bl	80054cc <ld_word>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c26:	891b      	ldrh	r3, [r3, #8]
 8006c28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c2a:	8992      	ldrh	r2, [r2, #12]
 8006c2c:	0952      	lsrs	r2, r2, #5
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c34:	fb01 f202 	mul.w	r2, r1, r2
 8006c38:	1a9b      	subs	r3, r3, r2
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d003      	beq.n	8006c48 <find_volume+0x2a8>
 8006c40:	230d      	movs	r3, #13
 8006c42:	e123      	b.n	8006e8c <find_volume+0x4ec>
 8006c44:	20002304 	.word	0x20002304

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c4a:	3334      	adds	r3, #52	@ 0x34
 8006c4c:	3313      	adds	r3, #19
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fc3c 	bl	80054cc <ld_word>
 8006c54:	4603      	mov	r3, r0
 8006c56:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <find_volume+0x2cc>
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c60:	3334      	adds	r3, #52	@ 0x34
 8006c62:	3320      	adds	r3, #32
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe fc4a 	bl	80054fe <ld_dword>
 8006c6a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6e:	3334      	adds	r3, #52	@ 0x34
 8006c70:	330e      	adds	r3, #14
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fc2a 	bl	80054cc <ld_word>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006c7c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <find_volume+0x2e6>
 8006c82:	230d      	movs	r3, #13
 8006c84:	e102      	b.n	8006e8c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006c86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8a:	4413      	add	r3, r2
 8006c8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c8e:	8911      	ldrh	r1, [r2, #8]
 8006c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c92:	8992      	ldrh	r2, [r2, #12]
 8006c94:	0952      	lsrs	r2, r2, #5
 8006c96:	b292      	uxth	r2, r2
 8006c98:	fbb1 f2f2 	udiv	r2, r1, r2
 8006c9c:	b292      	uxth	r2, r2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ca2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d201      	bcs.n	8006cae <find_volume+0x30e>
 8006caa:	230d      	movs	r3, #13
 8006cac:	e0ee      	b.n	8006e8c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006cae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cb6:	8952      	ldrh	r2, [r2, #10]
 8006cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <find_volume+0x328>
 8006cc4:	230d      	movs	r3, #13
 8006cc6:	e0e1      	b.n	8006e8c <find_volume+0x4ec>
		fmt = FS_FAT32;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d802      	bhi.n	8006cde <find_volume+0x33e>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d802      	bhi.n	8006cee <find_volume+0x34e>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cfa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006cfc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d00:	441a      	add	r2, r3
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8006d06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0a:	441a      	add	r2, r3
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8006d10:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d11e      	bne.n	8006d56 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d1a:	3334      	adds	r3, #52	@ 0x34
 8006d1c:	332a      	adds	r3, #42	@ 0x2a
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fbd4 	bl	80054cc <ld_word>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <find_volume+0x38e>
 8006d2a:	230d      	movs	r3, #13
 8006d2c:	e0ae      	b.n	8006e8c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d30:	891b      	ldrh	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <find_volume+0x39a>
 8006d36:	230d      	movs	r3, #13
 8006d38:	e0a8      	b.n	8006e8c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3c:	3334      	adds	r3, #52	@ 0x34
 8006d3e:	332c      	adds	r3, #44	@ 0x2c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe fbdc 	bl	80054fe <ld_dword>
 8006d46:	4602      	mov	r2, r0
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d54:	e01f      	b.n	8006d96 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	891b      	ldrh	r3, [r3, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <find_volume+0x3c2>
 8006d5e:	230d      	movs	r3, #13
 8006d60:	e094      	b.n	8006e8c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d68:	441a      	add	r2, r3
 8006d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d6c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006d6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d103      	bne.n	8006d7e <find_volume+0x3de>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	e00a      	b.n	8006d94 <find_volume+0x3f4>
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	085a      	lsrs	r2, r3, #1
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006d94:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	69da      	ldr	r2, [r3, #28]
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	899b      	ldrh	r3, [r3, #12]
 8006d9e:	4619      	mov	r1, r3
 8006da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da2:	440b      	add	r3, r1
 8006da4:	3b01      	subs	r3, #1
 8006da6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006da8:	8989      	ldrh	r1, [r1, #12]
 8006daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d201      	bcs.n	8006db6 <find_volume+0x416>
 8006db2:	230d      	movs	r3, #13
 8006db4:	e06a      	b.n	8006e8c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dbc:	615a      	str	r2, [r3, #20]
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	2280      	movs	r2, #128	@ 0x80
 8006dca:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006dcc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d149      	bne.n	8006e68 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dd6:	3334      	adds	r3, #52	@ 0x34
 8006dd8:	3330      	adds	r3, #48	@ 0x30
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe fb76 	bl	80054cc <ld_word>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d140      	bne.n	8006e68 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de8:	3301      	adds	r3, #1
 8006dea:	4619      	mov	r1, r3
 8006dec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dee:	f7fe fe1f 	bl	8005a30 <move_window>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d137      	bne.n	8006e68 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e00:	3334      	adds	r3, #52	@ 0x34
 8006e02:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006e06:	4618      	mov	r0, r3
 8006e08:	f7fe fb60 	bl	80054cc <ld_word>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d127      	bne.n	8006e68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	3334      	adds	r3, #52	@ 0x34
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fb6e 	bl	80054fe <ld_dword>
 8006e22:	4603      	mov	r3, r0
 8006e24:	4a1b      	ldr	r2, [pc, #108]	@ (8006e94 <find_volume+0x4f4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d11e      	bne.n	8006e68 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	3334      	adds	r3, #52	@ 0x34
 8006e2e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fe fb63 	bl	80054fe <ld_dword>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <find_volume+0x4f8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e42:	3334      	adds	r3, #52	@ 0x34
 8006e44:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fb58 	bl	80054fe <ld_dword>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e52:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	3334      	adds	r3, #52	@ 0x34
 8006e58:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fb4e 	bl	80054fe <ld_dword>
 8006e62:	4602      	mov	r2, r0
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006e6e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006e70:	4b0a      	ldr	r3, [pc, #40]	@ (8006e9c <find_volume+0x4fc>)
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	4b08      	ldr	r3, [pc, #32]	@ (8006e9c <find_volume+0x4fc>)
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <find_volume+0x4fc>)
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e82:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006e84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e86:	f7fe fd6b 	bl	8005960 <clear_lock>
#endif
	return FR_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3758      	adds	r7, #88	@ 0x58
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	41615252 	.word	0x41615252
 8006e98:	61417272 	.word	0x61417272
 8006e9c:	20002308 	.word	0x20002308

08006ea0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006eaa:	2309      	movs	r3, #9
 8006eac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01c      	beq.n	8006eee <validate+0x4e>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d018      	beq.n	8006eee <validate+0x4e>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d013      	beq.n	8006eee <validate+0x4e>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	889a      	ldrh	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	88db      	ldrh	r3, [r3, #6]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d10c      	bne.n	8006eee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fa58 	bl	8005390 <disk_status>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <validate+0x4e>
			res = FR_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d102      	bne.n	8006efa <validate+0x5a>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	e000      	b.n	8006efc <validate+0x5c>
 8006efa:	2300      	movs	r3, #0
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	6013      	str	r3, [r2, #0]
	return res;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
	...

08006f0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fca2 	bl	800686c <get_ldnumber>
 8006f28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	da01      	bge.n	8006f34 <f_mount+0x28>
 8006f30:	230b      	movs	r3, #11
 8006f32:	e02b      	b.n	8006f8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006f34:	4a17      	ldr	r2, [pc, #92]	@ (8006f94 <f_mount+0x88>)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006f44:	69b8      	ldr	r0, [r7, #24]
 8006f46:	f7fe fd0b 	bl	8005960 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d002      	beq.n	8006f5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	490d      	ldr	r1, [pc, #52]	@ (8006f94 <f_mount+0x88>)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <f_mount+0x66>
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <f_mount+0x6a>
 8006f72:	2300      	movs	r3, #0
 8006f74:	e00a      	b.n	8006f8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006f76:	f107 010c 	add.w	r1, r7, #12
 8006f7a:	f107 0308 	add.w	r3, r7, #8
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff fd0d 	bl	80069a0 <find_volume>
 8006f86:	4603      	mov	r3, r0
 8006f88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3720      	adds	r7, #32
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20002304 	.word	0x20002304

08006f98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b098      	sub	sp, #96	@ 0x60
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <f_open+0x18>
 8006fac:	2309      	movs	r3, #9
 8006fae:	e1b7      	b.n	8007320 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006fb0:	79fb      	ldrb	r3, [r7, #7]
 8006fb2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	f107 0110 	add.w	r1, r7, #16
 8006fbe:	f107 0308 	add.w	r3, r7, #8
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7ff fcec 	bl	80069a0 <find_volume>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006fce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 819b 	bne.w	800730e <f_open+0x376>
		dj.obj.fs = fs;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	4611      	mov	r1, r2
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fbcb 	bl	8006780 <follow_path>
 8006fea:	4603      	mov	r3, r0
 8006fec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006ff0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d118      	bne.n	800702a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ff8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ffc:	b25b      	sxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	da03      	bge.n	800700a <f_open+0x72>
				res = FR_INVALID_NAME;
 8007002:	2306      	movs	r3, #6
 8007004:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8007008:	e00f      	b.n	800702a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800700a:	79fb      	ldrb	r3, [r7, #7]
 800700c:	2b01      	cmp	r3, #1
 800700e:	bf8c      	ite	hi
 8007010:	2301      	movhi	r3, #1
 8007012:	2300      	movls	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	f107 0314 	add.w	r3, r7, #20
 800701c:	4611      	mov	r1, r2
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fb56 	bl	80056d0 <chk_lock>
 8007024:	4603      	mov	r3, r0
 8007026:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	f003 031c 	and.w	r3, r3, #28
 8007030:	2b00      	cmp	r3, #0
 8007032:	d07f      	beq.n	8007134 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8007034:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007038:	2b00      	cmp	r3, #0
 800703a:	d017      	beq.n	800706c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800703c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007040:	2b04      	cmp	r3, #4
 8007042:	d10e      	bne.n	8007062 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007044:	f7fe fba0 	bl	8005788 <enq_lock>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d006      	beq.n	800705c <f_open+0xc4>
 800704e:	f107 0314 	add.w	r3, r7, #20
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff facd 	bl	80065f2 <dir_register>
 8007058:	4603      	mov	r3, r0
 800705a:	e000      	b.n	800705e <f_open+0xc6>
 800705c:	2312      	movs	r3, #18
 800705e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007062:	79fb      	ldrb	r3, [r7, #7]
 8007064:	f043 0308 	orr.w	r3, r3, #8
 8007068:	71fb      	strb	r3, [r7, #7]
 800706a:	e010      	b.n	800708e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800706c:	7ebb      	ldrb	r3, [r7, #26]
 800706e:	f003 0311 	and.w	r3, r3, #17
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <f_open+0xe6>
					res = FR_DENIED;
 8007076:	2307      	movs	r3, #7
 8007078:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800707c:	e007      	b.n	800708e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800707e:	79fb      	ldrb	r3, [r7, #7]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d002      	beq.n	800708e <f_open+0xf6>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800708e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007092:	2b00      	cmp	r3, #0
 8007094:	d168      	bne.n	8007168 <f_open+0x1d0>
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b00      	cmp	r3, #0
 800709e:	d063      	beq.n	8007168 <f_open+0x1d0>
				dw = GET_FATTIME();
 80070a0:	f7fe f918 	bl	80052d4 <get_fattime>
 80070a4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80070a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070a8:	330e      	adds	r3, #14
 80070aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fa64 	bl	800557a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80070b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b4:	3316      	adds	r3, #22
 80070b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fa5e 	bl	800557a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	330b      	adds	r3, #11
 80070c2:	2220      	movs	r2, #32
 80070c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070ca:	4611      	mov	r1, r2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7ff f9fc 	bl	80064ca <ld_clust>
 80070d2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070d8:	2200      	movs	r2, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f7ff fa14 	bl	8006508 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	331c      	adds	r3, #28
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fa47 	bl	800557a <st_dword>
					fs->wflag = 1;
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2201      	movs	r2, #1
 80070f0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80070f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d037      	beq.n	8007168 <f_open+0x1d0>
						dw = fs->winsect;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fc:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80070fe:	f107 0314 	add.w	r3, r7, #20
 8007102:	2200      	movs	r2, #0
 8007104:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe ff3c 	bl	8005f84 <remove_chain>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8007112:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007116:	2b00      	cmp	r3, #0
 8007118:	d126      	bne.n	8007168 <f_open+0x1d0>
							res = move_window(fs, dw);
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800711e:	4618      	mov	r0, r3
 8007120:	f7fe fc86 	bl	8005a30 <move_window>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800712e:	3a01      	subs	r2, #1
 8007130:	611a      	str	r2, [r3, #16]
 8007132:	e019      	b.n	8007168 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007134:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007138:	2b00      	cmp	r3, #0
 800713a:	d115      	bne.n	8007168 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800713c:	7ebb      	ldrb	r3, [r7, #26]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <f_open+0x1b6>
					res = FR_NO_FILE;
 8007146:	2304      	movs	r3, #4
 8007148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800714c:	e00c      	b.n	8007168 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800714e:	79fb      	ldrb	r3, [r7, #7]
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <f_open+0x1d0>
 8007158:	7ebb      	ldrb	r3, [r7, #26]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <f_open+0x1d0>
						res = FR_DENIED;
 8007162:	2307      	movs	r3, #7
 8007164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007168:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800716c:	2b00      	cmp	r3, #0
 800716e:	d126      	bne.n	80071be <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007180:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800718a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	2b01      	cmp	r3, #1
 8007194:	bf8c      	ite	hi
 8007196:	2301      	movhi	r3, #1
 8007198:	2300      	movls	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	f107 0314 	add.w	r3, r7, #20
 80071a2:	4611      	mov	r1, r2
 80071a4:	4618      	mov	r0, r3
 80071a6:	f7fe fb11 	bl	80057cc <inc_lock>
 80071aa:	4602      	mov	r2, r0
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <f_open+0x226>
 80071b8:	2302      	movs	r3, #2
 80071ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80071be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f040 80a3 	bne.w	800730e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff f97b 	bl	80064ca <ld_clust>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80071da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071dc:	331c      	adds	r3, #28
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f98d 	bl	80054fe <ld_dword>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	88da      	ldrh	r2, [r3, #6]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	79fa      	ldrb	r2, [r7, #7]
 8007202:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3330      	adds	r3, #48	@ 0x30
 800721a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800721e:	2100      	movs	r1, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f7fe f9f7 	bl	8005614 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d06e      	beq.n	800730e <f_open+0x376>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d06a      	beq.n	800730e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	895b      	ldrh	r3, [r3, #10]
 8007244:	461a      	mov	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	899b      	ldrh	r3, [r3, #12]
 800724a:	fb02 f303 	mul.w	r3, r2, r3
 800724e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	657b      	str	r3, [r7, #84]	@ 0x54
 800725c:	e016      	b.n	800728c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007262:	4618      	mov	r0, r3
 8007264:	f7fe fca1 	bl	8005baa <get_fat>
 8007268:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800726a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800726c:	2b01      	cmp	r3, #1
 800726e:	d802      	bhi.n	8007276 <f_open+0x2de>
 8007270:	2302      	movs	r3, #2
 8007272:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d102      	bne.n	8007284 <f_open+0x2ec>
 800727e:	2301      	movs	r3, #1
 8007280:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007284:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	657b      	str	r3, [r7, #84]	@ 0x54
 800728c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007290:	2b00      	cmp	r3, #0
 8007292:	d103      	bne.n	800729c <f_open+0x304>
 8007294:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007296:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007298:	429a      	cmp	r2, r3
 800729a:	d8e0      	bhi.n	800725e <f_open+0x2c6>
				}
				fp->clust = clst;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072a0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80072a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d131      	bne.n	800730e <f_open+0x376>
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	899b      	ldrh	r3, [r3, #12]
 80072ae:	461a      	mov	r2, r3
 80072b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80072b6:	fb01 f202 	mul.w	r2, r1, r2
 80072ba:	1a9b      	subs	r3, r3, r2
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d026      	beq.n	800730e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe fc51 	bl	8005b6c <clust2sect>
 80072ca:	6478      	str	r0, [r7, #68]	@ 0x44
 80072cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <f_open+0x342>
						res = FR_INT_ERR;
 80072d2:	2302      	movs	r3, #2
 80072d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80072d8:	e019      	b.n	800730e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	899b      	ldrh	r3, [r3, #12]
 80072de:	461a      	mov	r2, r3
 80072e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80072e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072e8:	441a      	add	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	7858      	ldrb	r0, [r3, #1]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	2301      	movs	r3, #1
 80072fe:	f7fe f887 	bl	8005410 <disk_read>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <f_open+0x376>
 8007308:	2301      	movs	r3, #1
 800730a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800730e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <f_open+0x384>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800731c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8007320:	4618      	mov	r0, r3
 8007322:	3760      	adds	r7, #96	@ 0x60
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f107 0208 	add.w	r2, r7, #8
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fdb1 	bl	8006ea0 <validate>
 800733e:	4603      	mov	r3, r0
 8007340:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d168      	bne.n	800741a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	7d1b      	ldrb	r3, [r3, #20]
 800734c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d062      	beq.n	800741a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	7d1b      	ldrb	r3, [r3, #20]
 8007358:	b25b      	sxtb	r3, r3
 800735a:	2b00      	cmp	r3, #0
 800735c:	da15      	bge.n	800738a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	7858      	ldrb	r0, [r3, #1]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	2301      	movs	r3, #1
 800736e:	f7fe f86f 	bl	8005450 <disk_write>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <f_sync+0x54>
 8007378:	2301      	movs	r3, #1
 800737a:	e04f      	b.n	800741c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	7d1b      	ldrb	r3, [r3, #20]
 8007380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007384:	b2da      	uxtb	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800738a:	f7fd ffa3 	bl	80052d4 <get_fattime>
 800738e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f7fe fb49 	bl	8005a30 <move_window>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d138      	bne.n	800741a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ac:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	330b      	adds	r3, #11
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	330b      	adds	r3, #11
 80073b8:	f042 0220 	orr.w	r2, r2, #32
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6818      	ldr	r0, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	461a      	mov	r2, r3
 80073ca:	68f9      	ldr	r1, [r7, #12]
 80073cc:	f7ff f89c 	bl	8006508 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f103 021c 	add.w	r2, r3, #28
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fe f8cc 	bl	800557a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3316      	adds	r3, #22
 80073e6:	6939      	ldr	r1, [r7, #16]
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fe f8c6 	bl	800557a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	3312      	adds	r3, #18
 80073f2:	2100      	movs	r1, #0
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe f8a5 	bl	8005544 <st_word>
					fs->wflag = 1;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2201      	movs	r2, #1
 80073fe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fb42 	bl	8005a8c <sync_fs>
 8007408:	4603      	mov	r3, r0
 800740a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7d1b      	ldrb	r3, [r3, #20]
 8007410:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007414:	b2da      	uxtb	r2, r3
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800741a:	7dfb      	ldrb	r3, [r7, #23]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff ff7b 	bl	8007328 <f_sync>
 8007432:	4603      	mov	r3, r0
 8007434:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d118      	bne.n	800746e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f107 0208 	add.w	r2, r7, #8
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fd2b 	bl	8006ea0 <validate>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	4618      	mov	r0, r3
 800745a:	f7fe fa45 	bl	80058e8 <dec_lock>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	4613      	mov	r3, r2
 8007484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800748e:	4b1f      	ldr	r3, [pc, #124]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 8007490:	7a5b      	ldrb	r3, [r3, #9]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2b00      	cmp	r3, #0
 8007496:	d131      	bne.n	80074fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007498:	4b1c      	ldr	r3, [pc, #112]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 800749a:	7a5b      	ldrb	r3, [r3, #9]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	461a      	mov	r2, r3
 80074a0:	4b1a      	ldr	r3, [pc, #104]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074a2:	2100      	movs	r1, #0
 80074a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80074a6:	4b19      	ldr	r3, [pc, #100]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074a8:	7a5b      	ldrb	r3, [r3, #9]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	4a17      	ldr	r2, [pc, #92]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4413      	add	r3, r2
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80074b6:	4b15      	ldr	r3, [pc, #84]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074b8:	7a5b      	ldrb	r3, [r3, #9]
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	4b13      	ldr	r3, [pc, #76]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074c0:	4413      	add	r3, r2
 80074c2:	79fa      	ldrb	r2, [r7, #7]
 80074c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80074c6:	4b11      	ldr	r3, [pc, #68]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074c8:	7a5b      	ldrb	r3, [r3, #9]
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	b2d1      	uxtb	r1, r2
 80074d0:	4a0e      	ldr	r2, [pc, #56]	@ (800750c <FATFS_LinkDriverEx+0x94>)
 80074d2:	7251      	strb	r1, [r2, #9]
 80074d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80074d6:	7dbb      	ldrb	r3, [r7, #22]
 80074d8:	3330      	adds	r3, #48	@ 0x30
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	3301      	adds	r3, #1
 80074e4:	223a      	movs	r2, #58	@ 0x3a
 80074e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	3302      	adds	r3, #2
 80074ec:	222f      	movs	r2, #47	@ 0x2f
 80074ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	3303      	adds	r3, #3
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	2000232c 	.word	0x2000232c

08007510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800751a:	2200      	movs	r2, #0
 800751c:	6839      	ldr	r1, [r7, #0]
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ffaa 	bl	8007478 <FATFS_LinkDriverEx>
 8007524:	4603      	mov	r3, r0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <memset>:
 800752e:	4402      	add	r2, r0
 8007530:	4603      	mov	r3, r0
 8007532:	4293      	cmp	r3, r2
 8007534:	d100      	bne.n	8007538 <memset+0xa>
 8007536:	4770      	bx	lr
 8007538:	f803 1b01 	strb.w	r1, [r3], #1
 800753c:	e7f9      	b.n	8007532 <memset+0x4>
	...

08007540 <__libc_init_array>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4d0d      	ldr	r5, [pc, #52]	@ (8007578 <__libc_init_array+0x38>)
 8007544:	4c0d      	ldr	r4, [pc, #52]	@ (800757c <__libc_init_array+0x3c>)
 8007546:	1b64      	subs	r4, r4, r5
 8007548:	10a4      	asrs	r4, r4, #2
 800754a:	2600      	movs	r6, #0
 800754c:	42a6      	cmp	r6, r4
 800754e:	d109      	bne.n	8007564 <__libc_init_array+0x24>
 8007550:	4d0b      	ldr	r5, [pc, #44]	@ (8007580 <__libc_init_array+0x40>)
 8007552:	4c0c      	ldr	r4, [pc, #48]	@ (8007584 <__libc_init_array+0x44>)
 8007554:	f000 f818 	bl	8007588 <_init>
 8007558:	1b64      	subs	r4, r4, r5
 800755a:	10a4      	asrs	r4, r4, #2
 800755c:	2600      	movs	r6, #0
 800755e:	42a6      	cmp	r6, r4
 8007560:	d105      	bne.n	800756e <__libc_init_array+0x2e>
 8007562:	bd70      	pop	{r4, r5, r6, pc}
 8007564:	f855 3b04 	ldr.w	r3, [r5], #4
 8007568:	4798      	blx	r3
 800756a:	3601      	adds	r6, #1
 800756c:	e7ee      	b.n	800754c <__libc_init_array+0xc>
 800756e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007572:	4798      	blx	r3
 8007574:	3601      	adds	r6, #1
 8007576:	e7f2      	b.n	800755e <__libc_init_array+0x1e>
 8007578:	08007690 	.word	0x08007690
 800757c:	08007690 	.word	0x08007690
 8007580:	08007690 	.word	0x08007690
 8007584:	08007694 	.word	0x08007694

08007588 <_init>:
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	bf00      	nop
 800758c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758e:	bc08      	pop	{r3}
 8007590:	469e      	mov	lr, r3
 8007592:	4770      	bx	lr

08007594 <_fini>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	bf00      	nop
 8007598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759a:	bc08      	pop	{r3}
 800759c:	469e      	mov	lr, r3
 800759e:	4770      	bx	lr
