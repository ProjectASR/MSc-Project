
BIManual_control1_DFR_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800ae00  0800ae00  0001ae00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b090  0800b090  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b090  0800b090  0001b090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b098  0800b098  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b09c  0800b09c  0001b09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c50  200000a0  0800b140  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cf0  0800b140  00024cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020417  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046ac  00000000  00000000  0004052a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00044bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001458  00000000  00000000  00046600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005764  00000000  00000000  00047a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023770  00000000  00000000  0004d1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe513  00000000  00000000  0007092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007338  00000000  00000000  0016ee40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00176178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ade8 	.word	0x0800ade8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	0800ade8 	.word	0x0800ade8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <init_DAC>:
#include "MCP4725.h"

void init_DAC(dac_instance *dac, I2C_HandleTypeDef *hi2c, uint8_t addr,
		uint16_t vRef, uint8_t powerMode) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	80bb      	strh	r3, [r7, #4]
	// Set the values of the parameters
	dac->hi2c_ptr = hi2c;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	68ba      	ldr	r2, [r7, #8]
 8000ed2:	601a      	str	r2, [r3, #0]
	dac->I2C_addr = addr;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	79fa      	ldrb	r2, [r7, #7]
 8000ed8:	711a      	strb	r2, [r3, #4]
	dac->refVoltage = vRef;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	88ba      	ldrh	r2, [r7, #4]
 8000ede:	80da      	strh	r2, [r3, #6]
	dac->PowerMode = powerMode;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	7e3a      	ldrb	r2, [r7, #24]
 8000ee4:	721a      	strb	r2, [r3, #8]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <outputVoltage>:

void outputVoltage(dac_instance *dac, uint16_t voltage) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
	int ret1;
	uint8_t data[3]; // Increase size to accommodate three bytes

	if (voltage > dac->refVoltage) {
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	88db      	ldrh	r3, [r3, #6]
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d835      	bhi.n	8000f76 <outputVoltage+0x82>
		// Handle error
		return;
	} else {
		uint16_t dacValue = (uint16_t) (((float) voltage / dac->refVoltage)
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	88db      	ldrh	r3, [r3, #6]
 8000f18:	ee07 3a90 	vmov	s15, r3
 8000f1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
				* 4095); // 1638 for 2000
 8000f24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000f80 <outputVoltage+0x8c>
 8000f28:	ee67 7a87 	vmul.f32	s15, s15, s14
		uint16_t dacValue = (uint16_t) (((float) voltage / dac->refVoltage)
 8000f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f30:	ee17 3a90 	vmov	r3, s15
 8000f34:	82fb      	strh	r3, [r7, #22]
		dac->dacTest = dacValue;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	8afa      	ldrh	r2, [r7, #22]
 8000f3a:	815a      	strh	r2, [r3, #10]
		// data[0] = MCP4725_Write_CMD | (dac->PowerMode << 1);     // dont need this since we operate at normal mode
		data[0] = MCP4725_Write_CMD; // MCP4725_Write_CMD - 0x40 = 64
 8000f3c:	2340      	movs	r3, #64	; 0x40
 8000f3e:	733b      	strb	r3, [r7, #12]
		data[1] = (dacValue >> 4) & 0xFF; // 8 MSBs of data
 8000f40:	8afb      	ldrh	r3, [r7, #22]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	737b      	strb	r3, [r7, #13]
		data[2] = dacValue & 0x0F; // 4 LSBs of data
 8000f4a:	8afb      	ldrh	r3, [r7, #22]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	73bb      	strb	r3, [r7, #14]
		ret1 = HAL_I2C_Master_Transmit(dac->hi2c_ptr, dac->I2C_addr, data, 3,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	f107 020c 	add.w	r2, r7, #12
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	f003 fcf2 	bl	8004954 <HAL_I2C_Master_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e000      	b.n	8000f78 <outputVoltage+0x84>
		return;
 8000f76:	bf00      	nop
		HAL_MAX_DELAY);
	}
}
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	457ff000 	.word	0x457ff000

08000f84 <set_dob>:
#include <dob.h>

void set_dob(dob_instance *dob, float k, float j, float g) {
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f90:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f94:	ed87 1a00 	vstr	s2, [r7]

	dob->Kt = k;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	601a      	str	r2, [r3, #0]
	dob->Jm = j;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	605a      	str	r2, [r3, #4]
	dob->G_dis = g;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	609a      	str	r2, [r3, #8]
	dob->temp = 0;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]

}
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <update_dob>:

void update_dob(dob_instance *dob, float Ia_ref, float velocity) {
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fcc:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * dob->Kt + dob->Jm * dob->G_dis * velocity;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffa:	edc7 7a05 	vstr	s15, [r7, #20]
	dob->temp = dob->temp + (T_in - dob->temp) * dob->G_dis * dt/1000.0; // /dt
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fa70 	bl	80004e8 <__aeabi_f2d>
 8001008:	4604      	mov	r4, r0
 800100a:	460d      	mov	r5, r1
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001012:	ed97 7a05 	vldr	s14, [r7, #20]
 8001016:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001020:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <update_dob+0xd0>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102e:	ee17 0a90 	vmov	r0, s15
 8001032:	f7ff fa59 	bl	80004e8 <__aeabi_f2d>
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <update_dob+0xd4>)
 800103c:	f7ff fbd6 	bl	80007ec <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4620      	mov	r0, r4
 8001046:	4629      	mov	r1, r5
 8001048:	f7ff f8f0 	bl	800022c <__adddf3>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fd62 	bl	8000b1c <__aeabi_d2f>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	60da      	str	r2, [r3, #12]

	dob->T_dis = dob->temp - dob->Jm * dob->G_dis * velocity;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	ed93 7a03 	vldr	s14, [r3, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	edd3 6a01 	vldr	s13, [r3, #4]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001070:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001074:	edd7 7a01 	vldr	s15, [r7, #4]
 8001078:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bdb0      	pop	{r4, r5, r7, pc}
 800108e:	bf00      	nop
 8001090:	20000004 	.word	0x20000004
 8001094:	408f4000 	.word	0x408f4000

08001098 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2101      	movs	r1, #1
 80010a0:	4802      	ldr	r0, [pc, #8]	; (80010ac <SELECT+0x14>)
 80010a2:	f003 fb7b 	bl	800479c <HAL_GPIO_WritePin>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40020400 	.word	0x40020400

080010b0 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	2101      	movs	r1, #1
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DESELECT+0x14>)
 80010ba:	f003 fb6f 	bl	800479c <HAL_GPIO_WritePin>
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40020400 	.word	0x40020400

080010c8 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 80010d2:	bf00      	nop
 80010d4:	4808      	ldr	r0, [pc, #32]	; (80010f8 <SPI_TxByte+0x30>)
 80010d6:	f005 fd23 	bl	8006b20 <HAL_SPI_GetState>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d1f9      	bne.n	80010d4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 80010e0:	1df9      	adds	r1, r7, #7
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	2201      	movs	r2, #1
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <SPI_TxByte+0x30>)
 80010ea:	f005 f998 	bl	800641e <HAL_SPI_Transmit>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	2000045c 	.word	0x2000045c

080010fc <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 800110a:	bf00      	nop
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <SPI_RxByte+0x38>)
 800110e:	f005 fd07 	bl	8006b20 <HAL_SPI_GetState>
 8001112:	4603      	mov	r3, r0
 8001114:	2b01      	cmp	r3, #1
 8001116:	d1f9      	bne.n	800110c <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 8001118:	1dba      	adds	r2, r7, #6
 800111a:	1df9      	adds	r1, r7, #7
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <SPI_RxByte+0x38>)
 8001126:	f005 fae8 	bl	80066fa <HAL_SPI_TransmitReceive>
  
  return data;
 800112a:	79bb      	ldrb	r3, [r7, #6]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	2000045c 	.word	0x2000045c

08001138 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001140:	f7ff ffdc 	bl	80010fc <SPI_RxByte>
 8001144:	4603      	mov	r3, r0
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <SD_ReadyWait+0x34>)
 800115c:	2232      	movs	r2, #50	; 0x32
 800115e:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001160:	f7ff ffcc 	bl	80010fc <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001164:	f7ff ffca 	bl	80010fc <SPI_RxByte>
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	2bff      	cmp	r3, #255	; 0xff
 8001170:	d004      	beq.n	800117c <SD_ReadyWait+0x28>
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SD_ReadyWait+0x34>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f3      	bne.n	8001164 <SD_ReadyWait+0x10>
  
  return res;
 800117c:	79fb      	ldrb	r3, [r7, #7]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000e4a 	.word	0x20000e4a

0800118c <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001192:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001196:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8001198:	f7ff ff8a 	bl	80010b0 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e005      	b.n	80011ae <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80011a2:	20ff      	movs	r0, #255	; 0xff
 80011a4:	f7ff ff90 	bl	80010c8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	3301      	adds	r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	ddf6      	ble.n	80011a2 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80011b4:	f7ff ff70 	bl	8001098 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80011cc:	2395      	movs	r3, #149	; 0x95
 80011ce:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	e009      	b.n	80011ea <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff72 	bl	80010c8 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	ddf2      	ble.n	80011d6 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80011f0:	e002      	b.n	80011f8 <SD_PowerOn+0x6c>
  {
    Count--;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80011f8:	f7ff ff80 	bl	80010fc <SPI_RxByte>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d002      	beq.n	8001208 <SD_PowerOn+0x7c>
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1f4      	bne.n	80011f2 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001208:	f7ff ff52 	bl	80010b0 <DESELECT>
  SPI_TxByte(0XFF);
 800120c:	20ff      	movs	r0, #255	; 0xff
 800120e:	f7ff ff5b 	bl	80010c8 <SPI_TxByte>
  
  PowerFlag = 1;
 8001212:	4b03      	ldr	r3, [pc, #12]	; (8001220 <SD_PowerOn+0x94>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200000bd 	.word	0x200000bd

08001224 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <SD_PowerOff+0x14>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	200000bd 	.word	0x200000bd

0800123c <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001240:	4b03      	ldr	r3, [pc, #12]	; (8001250 <SD_CheckPower+0x14>)
 8001242:	781b      	ldrb	r3, [r3, #0]
}
 8001244:	4618      	mov	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200000bd 	.word	0x200000bd

08001254 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <SD_RxDataBlock+0x68>)
 8001260:	220a      	movs	r2, #10
 8001262:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001264:	f7ff ff4a 	bl	80010fc <SPI_RxByte>
 8001268:	4603      	mov	r3, r0
 800126a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2bff      	cmp	r3, #255	; 0xff
 8001270:	d104      	bne.n	800127c <SD_RxDataBlock+0x28>
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <SD_RxDataBlock+0x68>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1f3      	bne.n	8001264 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2bfe      	cmp	r3, #254	; 0xfe
 8001280:	d001      	beq.n	8001286 <SD_RxDataBlock+0x32>
    return FALSE;
 8001282:	2300      	movs	r3, #0
 8001284:	e016      	b.n	80012b4 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff53 	bl	8001138 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff4d 	bl	8001138 <SPI_RxBytePtr>
  } while(btr -= 2);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3b02      	subs	r3, #2
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ed      	bne.n	8001286 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80012aa:	f7ff ff27 	bl	80010fc <SPI_RxByte>
  SPI_RxByte();
 80012ae:	f7ff ff25 	bl	80010fc <SPI_RxByte>
  
  return TRUE;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000e49 	.word	0x20000e49

080012c0 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80012d0:	f7ff ff40 	bl	8001154 <SD_ReadyWait>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d001      	beq.n	80012de <SD_TxDataBlock+0x1e>
    return FALSE;
 80012da:	2300      	movs	r3, #0
 80012dc:	e040      	b.n	8001360 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fef1 	bl	80010c8 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2bfd      	cmp	r3, #253	; 0xfd
 80012ea:	d031      	beq.n	8001350 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fee5 	bl	80010c8 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fede 	bl	80010c8 <SPI_TxByte>
    } while (--wc);
 800130c:	7bbb      	ldrb	r3, [r7, #14]
 800130e:	3b01      	subs	r3, #1
 8001310:	73bb      	strb	r3, [r7, #14]
 8001312:	7bbb      	ldrb	r3, [r7, #14]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1eb      	bne.n	80012f0 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001318:	f7ff fef0 	bl	80010fc <SPI_RxByte>
    SPI_RxByte();
 800131c:	f7ff feee 	bl	80010fc <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001320:	e00b      	b.n	800133a <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001322:	f7ff feeb 	bl	80010fc <SPI_RxByte>
 8001326:	4603      	mov	r3, r0
 8001328:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	f003 031f 	and.w	r3, r3, #31
 8001330:	2b05      	cmp	r3, #5
 8001332:	d006      	beq.n	8001342 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001334:	7b7b      	ldrb	r3, [r7, #13]
 8001336:	3301      	adds	r3, #1
 8001338:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 800133a:	7b7b      	ldrb	r3, [r7, #13]
 800133c:	2b40      	cmp	r3, #64	; 0x40
 800133e:	d9f0      	bls.n	8001322 <SD_TxDataBlock+0x62>
 8001340:	e000      	b.n	8001344 <SD_TxDataBlock+0x84>
        break;
 8001342:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001344:	bf00      	nop
 8001346:	f7ff fed9 	bl	80010fc <SPI_RxByte>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0fa      	beq.n	8001346 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2b05      	cmp	r3, #5
 8001358:	d101      	bne.n	800135e <SD_TxDataBlock+0x9e>
    return TRUE;
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001374:	f7ff feee 	bl	8001154 <SD_ReadyWait>
 8001378:	4603      	mov	r3, r0
 800137a:	2bff      	cmp	r3, #255	; 0xff
 800137c:	d001      	beq.n	8001382 <SD_SendCmd+0x1a>
    return 0xFF;
 800137e:	23ff      	movs	r3, #255	; 0xff
 8001380:	e040      	b.n	8001404 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe9f 	bl	80010c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	0e1b      	lsrs	r3, r3, #24
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fe99 	bl	80010c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	0c1b      	lsrs	r3, r3, #16
 800139a:	b2db      	uxtb	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe93 	bl	80010c8 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe8d 	bl	80010c8 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe88 	bl	80010c8 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b40      	cmp	r3, #64	; 0x40
 80013c0:	d101      	bne.n	80013c6 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80013c2:	2395      	movs	r3, #149	; 0x95
 80013c4:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b48      	cmp	r3, #72	; 0x48
 80013ca:	d101      	bne.n	80013d0 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80013cc:	2387      	movs	r3, #135	; 0x87
 80013ce:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fe78 	bl	80010c8 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	2b4c      	cmp	r3, #76	; 0x4c
 80013dc:	d101      	bne.n	80013e2 <SD_SendCmd+0x7a>
    SPI_RxByte();
 80013de:	f7ff fe8d 	bl	80010fc <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80013e2:	230a      	movs	r3, #10
 80013e4:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80013e6:	f7ff fe89 	bl	80010fc <SPI_RxByte>
 80013ea:	4603      	mov	r3, r0
 80013ec:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80013ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da05      	bge.n	8001402 <SD_SendCmd+0x9a>
 80013f6:	7bbb      	ldrb	r3, [r7, #14]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	73bb      	strb	r3, [r7, #14]
 80013fc:	7bbb      	ldrb	r3, [r7, #14]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f1      	bne.n	80013e6 <SD_SendCmd+0x7e>
  
  return res;
 8001402:	7b7b      	ldrb	r3, [r7, #13]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 800140c:	b590      	push	{r4, r7, lr}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 800141c:	2301      	movs	r3, #1
 800141e:	e0d5      	b.n	80015cc <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001420:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <SD_disk_initialize+0x1c8>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <SD_disk_initialize+0x2a>
    return Stat;        
 800142e:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <SD_disk_initialize+0x1c8>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	e0ca      	b.n	80015cc <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001436:	f7ff fea9 	bl	800118c <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 800143a:	f7ff fe2d 	bl	8001098 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001442:	2100      	movs	r1, #0
 8001444:	2040      	movs	r0, #64	; 0x40
 8001446:	f7ff ff8f 	bl	8001368 <SD_SendCmd>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	f040 80a5 	bne.w	800159c <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001452:	4b61      	ldr	r3, [pc, #388]	; (80015d8 <SD_disk_initialize+0x1cc>)
 8001454:	2264      	movs	r2, #100	; 0x64
 8001456:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001458:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800145c:	2048      	movs	r0, #72	; 0x48
 800145e:	f7ff ff83 	bl	8001368 <SD_SendCmd>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	d158      	bne.n	800151a <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e00c      	b.n	8001488 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800146e:	7bfc      	ldrb	r4, [r7, #15]
 8001470:	f7ff fe44 	bl	80010fc <SPI_RxByte>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	f104 0310 	add.w	r3, r4, #16
 800147c:	443b      	add	r3, r7
 800147e:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	3301      	adds	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	7bfb      	ldrb	r3, [r7, #15]
 800148a:	2b03      	cmp	r3, #3
 800148c:	d9ef      	bls.n	800146e <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 800148e:	7abb      	ldrb	r3, [r7, #10]
 8001490:	2b01      	cmp	r3, #1
 8001492:	f040 8083 	bne.w	800159c <SD_disk_initialize+0x190>
 8001496:	7afb      	ldrb	r3, [r7, #11]
 8001498:	2baa      	cmp	r3, #170	; 0xaa
 800149a:	d17f      	bne.n	800159c <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 800149c:	2100      	movs	r1, #0
 800149e:	2077      	movs	r0, #119	; 0x77
 80014a0:	f7ff ff62 	bl	8001368 <SD_SendCmd>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d807      	bhi.n	80014ba <SD_disk_initialize+0xae>
 80014aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80014ae:	2069      	movs	r0, #105	; 0x69
 80014b0:	f7ff ff5a 	bl	8001368 <SD_SendCmd>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <SD_disk_initialize+0x1cc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1eb      	bne.n	800149c <SD_disk_initialize+0x90>
 80014c4:	e000      	b.n	80014c8 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80014c6:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80014c8:	4b43      	ldr	r3, [pc, #268]	; (80015d8 <SD_disk_initialize+0x1cc>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d064      	beq.n	800159c <SD_disk_initialize+0x190>
 80014d2:	2100      	movs	r1, #0
 80014d4:	207a      	movs	r0, #122	; 0x7a
 80014d6:	f7ff ff47 	bl	8001368 <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d15d      	bne.n	800159c <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	73fb      	strb	r3, [r7, #15]
 80014e4:	e00c      	b.n	8001500 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80014e6:	7bfc      	ldrb	r4, [r7, #15]
 80014e8:	f7ff fe08 	bl	80010fc <SPI_RxByte>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	f104 0310 	add.w	r3, r4, #16
 80014f4:	443b      	add	r3, r7
 80014f6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	3301      	adds	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d9ef      	bls.n	80014e6 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SD_disk_initialize+0x108>
 8001510:	2306      	movs	r3, #6
 8001512:	e000      	b.n	8001516 <SD_disk_initialize+0x10a>
 8001514:	2302      	movs	r3, #2
 8001516:	73bb      	strb	r3, [r7, #14]
 8001518:	e040      	b.n	800159c <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800151a:	2100      	movs	r1, #0
 800151c:	2077      	movs	r0, #119	; 0x77
 800151e:	f7ff ff23 	bl	8001368 <SD_SendCmd>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d808      	bhi.n	800153a <SD_disk_initialize+0x12e>
 8001528:	2100      	movs	r1, #0
 800152a:	2069      	movs	r0, #105	; 0x69
 800152c:	f7ff ff1c 	bl	8001368 <SD_SendCmd>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d801      	bhi.n	800153a <SD_disk_initialize+0x12e>
 8001536:	2302      	movs	r3, #2
 8001538:	e000      	b.n	800153c <SD_disk_initialize+0x130>
 800153a:	2301      	movs	r3, #1
 800153c:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d10e      	bne.n	8001562 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001544:	2100      	movs	r1, #0
 8001546:	2077      	movs	r0, #119	; 0x77
 8001548:	f7ff ff0e 	bl	8001368 <SD_SendCmd>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d80e      	bhi.n	8001570 <SD_disk_initialize+0x164>
 8001552:	2100      	movs	r1, #0
 8001554:	2069      	movs	r0, #105	; 0x69
 8001556:	f7ff ff07 	bl	8001368 <SD_SendCmd>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d107      	bne.n	8001570 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001560:	e00d      	b.n	800157e <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001562:	2100      	movs	r1, #0
 8001564:	2041      	movs	r0, #65	; 0x41
 8001566:	f7ff feff 	bl	8001368 <SD_SendCmd>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <SD_disk_initialize+0x1cc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1e1      	bne.n	800153e <SD_disk_initialize+0x132>
 800157a:	e000      	b.n	800157e <SD_disk_initialize+0x172>
            break; /* CMD1 */
 800157c:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 800157e:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <SD_disk_initialize+0x1cc>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <SD_disk_initialize+0x18c>
 8001588:	f44f 7100 	mov.w	r1, #512	; 0x200
 800158c:	2050      	movs	r0, #80	; 0x50
 800158e:	f7ff feeb 	bl	8001368 <SD_SendCmd>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 800159c:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <SD_disk_initialize+0x1d0>)
 800159e:	7bbb      	ldrb	r3, [r7, #14]
 80015a0:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80015a2:	f7ff fd85 	bl	80010b0 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80015a6:	f7ff fda9 	bl	80010fc <SPI_RxByte>
  
  if (type) 
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80015b0:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <SD_disk_initialize+0x1c8>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SD_disk_initialize+0x1c8>)
 80015be:	701a      	strb	r2, [r3, #0]
 80015c0:	e001      	b.n	80015c6 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80015c2:	f7ff fe2f 	bl	8001224 <SD_PowerOff>
  }
  
  return Stat;
 80015c6:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <SD_disk_initialize+0x1c8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd90      	pop	{r4, r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000e49 	.word	0x20000e49
 80015dc:	200000bc 	.word	0x200000bc

080015e0 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <SD_disk_status+0x14>
    return STA_NOINIT; 
 80015f0:	2301      	movs	r3, #1
 80015f2:	e002      	b.n	80015fa <SD_disk_status+0x1a>
  
  return Stat;
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <SD_disk_status+0x28>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b2db      	uxtb	r3, r3
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000000 	.word	0x20000000

0800160c <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	60b9      	str	r1, [r7, #8]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	4603      	mov	r3, r0
 800161a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <SD_disk_read+0x1c>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <SD_disk_read+0x20>
    return RES_PARERR;
 8001628:	2304      	movs	r3, #4
 800162a:	e051      	b.n	80016d0 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 800162c:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <SD_disk_read+0xcc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SD_disk_read+0x32>
    return RES_NOTRDY;
 800163a:	2303      	movs	r3, #3
 800163c:	e048      	b.n	80016d0 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <SD_disk_read+0xd0>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001650:	f7ff fd22 	bl	8001098 <SELECT>
  
  if (count == 1) 
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d111      	bne.n	800167e <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	2051      	movs	r0, #81	; 0x51
 800165e:	f7ff fe83 	bl	8001368 <SD_SendCmd>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d129      	bne.n	80016bc <SD_disk_read+0xb0>
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	68b8      	ldr	r0, [r7, #8]
 800166e:	f7ff fdf1 	bl	8001254 <SD_RxDataBlock>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d021      	beq.n	80016bc <SD_disk_read+0xb0>
      count = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	e01e      	b.n	80016bc <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2052      	movs	r0, #82	; 0x52
 8001682:	f7ff fe71 	bl	8001368 <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d117      	bne.n	80016bc <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 800168c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f7ff fddf 	bl	8001254 <SD_RxDataBlock>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00a      	beq.n	80016b2 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80016a2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	603b      	str	r3, [r7, #0]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ed      	bne.n	800168c <SD_disk_read+0x80>
 80016b0:	e000      	b.n	80016b4 <SD_disk_read+0xa8>
          break;
 80016b2:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 80016b4:	2100      	movs	r1, #0
 80016b6:	204c      	movs	r0, #76	; 0x4c
 80016b8:	f7ff fe56 	bl	8001368 <SD_SendCmd>
    }
  }
  
  DESELECT();
 80016bc:	f7ff fcf8 	bl	80010b0 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80016c0:	f7ff fd1c 	bl	80010fc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	bf14      	ite	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	2300      	moveq	r3, #0
 80016ce:	b2db      	uxtb	r3, r3
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000000 	.word	0x20000000
 80016dc:	200000bc 	.word	0x200000bc

080016e0 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	4603      	mov	r3, r0
 80016ee:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d102      	bne.n	80016fc <SD_disk_write+0x1c>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <SD_disk_write+0x20>
    return RES_PARERR;
 80016fc:	2304      	movs	r3, #4
 80016fe:	e06b      	b.n	80017d8 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001700:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <SD_disk_write+0x100>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SD_disk_write+0x32>
    return RES_NOTRDY;
 800170e:	2303      	movs	r3, #3
 8001710:	e062      	b.n	80017d8 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <SD_disk_write+0x100>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001720:	2302      	movs	r3, #2
 8001722:	e059      	b.n	80017d8 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001724:	4b2f      	ldr	r3, [pc, #188]	; (80017e4 <SD_disk_write+0x104>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	025b      	lsls	r3, r3, #9
 8001734:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001736:	f7ff fcaf 	bl	8001098 <SELECT>
  
  if (count == 1) 
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d110      	bne.n	8001762 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	2058      	movs	r0, #88	; 0x58
 8001744:	f7ff fe10 	bl	8001368 <SD_SendCmd>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13a      	bne.n	80017c4 <SD_disk_write+0xe4>
 800174e:	21fe      	movs	r1, #254	; 0xfe
 8001750:	68b8      	ldr	r0, [r7, #8]
 8001752:	f7ff fdb5 	bl	80012c0 <SD_TxDataBlock>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d033      	beq.n	80017c4 <SD_disk_write+0xe4>
      count = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	e030      	b.n	80017c4 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <SD_disk_write+0x104>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800176e:	2100      	movs	r1, #0
 8001770:	2077      	movs	r0, #119	; 0x77
 8001772:	f7ff fdf9 	bl	8001368 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	2057      	movs	r0, #87	; 0x57
 800177a:	f7ff fdf5 	bl	8001368 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2059      	movs	r0, #89	; 0x59
 8001782:	f7ff fdf1 	bl	8001368 <SD_SendCmd>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d11b      	bne.n	80017c4 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 800178c:	21fc      	movs	r1, #252	; 0xfc
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f7ff fd96 	bl	80012c0 <SD_TxDataBlock>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80017a0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <SD_disk_write+0xac>
 80017ae:	e000      	b.n	80017b2 <SD_disk_write+0xd2>
          break;
 80017b0:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 80017b2:	21fd      	movs	r1, #253	; 0xfd
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fd83 	bl	80012c0 <SD_TxDataBlock>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <SD_disk_write+0xe4>
      {        
        count = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 80017c4:	f7ff fc74 	bl	80010b0 <DESELECT>
  SPI_RxByte();
 80017c8:	f7ff fc98 	bl	80010fc <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	bf14      	ite	ne
 80017d2:	2301      	movne	r3, #1
 80017d4:	2300      	moveq	r3, #0
 80017d6:	b2db      	uxtb	r3, r3
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200000bc 	.word	0x200000bc

080017e8 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	603a      	str	r2, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
 80017f4:	460b      	mov	r3, r1
 80017f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001802:	2304      	movs	r3, #4
 8001804:	e11b      	b.n	8001a3e <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	2b05      	cmp	r3, #5
 8001810:	d129      	bne.n	8001866 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d017      	beq.n	800184a <SD_disk_ioctl+0x62>
 800181a:	2b02      	cmp	r3, #2
 800181c:	dc1f      	bgt.n	800185e <SD_disk_ioctl+0x76>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <SD_disk_ioctl+0x40>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d00b      	beq.n	800183e <SD_disk_ioctl+0x56>
 8001826:	e01a      	b.n	800185e <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001828:	f7ff fd08 	bl	800123c <SD_CheckPower>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001832:	f7ff fcf7 	bl	8001224 <SD_PowerOff>
      res = RES_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800183c:	e0fd      	b.n	8001a3a <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800183e:	f7ff fca5 	bl	800118c <SD_PowerOn>
      res = RES_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001848:	e0f7      	b.n	8001a3a <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	1c5c      	adds	r4, r3, #1
 800184e:	f7ff fcf5 	bl	800123c <SD_CheckPower>
 8001852:	4603      	mov	r3, r0
 8001854:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001856:	2300      	movs	r3, #0
 8001858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800185c:	e0ed      	b.n	8001a3a <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800185e:	2304      	movs	r3, #4
 8001860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001864:	e0e9      	b.n	8001a3a <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001866:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <SD_disk_ioctl+0x260>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001874:	2303      	movs	r3, #3
 8001876:	e0e2      	b.n	8001a3e <SD_disk_ioctl+0x256>
    
    SELECT();
 8001878:	f7ff fc0e 	bl	8001098 <SELECT>
    
    switch (ctrl) 
 800187c:	79bb      	ldrb	r3, [r7, #6]
 800187e:	2b0d      	cmp	r3, #13
 8001880:	f200 80cc 	bhi.w	8001a1c <SD_disk_ioctl+0x234>
 8001884:	a201      	add	r2, pc, #4	; (adr r2, 800188c <SD_disk_ioctl+0xa4>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	08001987 	.word	0x08001987
 8001890:	080018c5 	.word	0x080018c5
 8001894:	08001977 	.word	0x08001977
 8001898:	08001a1d 	.word	0x08001a1d
 800189c:	08001a1d 	.word	0x08001a1d
 80018a0:	08001a1d 	.word	0x08001a1d
 80018a4:	08001a1d 	.word	0x08001a1d
 80018a8:	08001a1d 	.word	0x08001a1d
 80018ac:	08001a1d 	.word	0x08001a1d
 80018b0:	08001a1d 	.word	0x08001a1d
 80018b4:	08001a1d 	.word	0x08001a1d
 80018b8:	08001999 	.word	0x08001999
 80018bc:	080019bd 	.word	0x080019bd
 80018c0:	080019e1 	.word	0x080019e1
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80018c4:	2100      	movs	r1, #0
 80018c6:	2049      	movs	r0, #73	; 0x49
 80018c8:	f7ff fd4e 	bl	8001368 <SD_SendCmd>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80a8 	bne.w	8001a24 <SD_disk_ioctl+0x23c>
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2110      	movs	r1, #16
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fcba 	bl	8001254 <SD_RxDataBlock>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 809e 	beq.w	8001a24 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d10e      	bne.n	8001910 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80018f2:	7d7b      	ldrb	r3, [r7, #21]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	7d3b      	ldrb	r3, [r7, #20]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4413      	add	r3, r2
 8001900:	b29b      	uxth	r3, r3
 8001902:	3301      	adds	r3, #1
 8001904:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001906:	8bfb      	ldrh	r3, [r7, #30]
 8001908:	029a      	lsls	r2, r3, #10
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e02e      	b.n	800196e <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001910:	7c7b      	ldrb	r3, [r7, #17]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	b2da      	uxtb	r2, r3
 8001918:	7dbb      	ldrb	r3, [r7, #22]
 800191a:	09db      	lsrs	r3, r3, #7
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4413      	add	r3, r2
 8001920:	b2da      	uxtb	r2, r3
 8001922:	7d7b      	ldrb	r3, [r7, #21]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	f003 0306 	and.w	r3, r3, #6
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4413      	add	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3302      	adds	r3, #2
 8001934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001938:	7d3b      	ldrb	r3, [r7, #20]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b29a      	uxth	r2, r3
 8001940:	7cfb      	ldrb	r3, [r7, #19]
 8001942:	b29b      	uxth	r3, r3
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	b29b      	uxth	r3, r3
 8001948:	4413      	add	r3, r2
 800194a:	b29a      	uxth	r2, r3
 800194c:	7cbb      	ldrb	r3, [r7, #18]
 800194e:	029b      	lsls	r3, r3, #10
 8001950:	b29b      	uxth	r3, r3
 8001952:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	3301      	adds	r3, #1
 800195e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001960:	8bfa      	ldrh	r2, [r7, #30]
 8001962:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001966:	3b09      	subs	r3, #9
 8001968:	409a      	lsls	r2, r3
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001974:	e056      	b.n	8001a24 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001984:	e055      	b.n	8001a32 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001986:	f7ff fbe5 	bl	8001154 <SD_ReadyWait>
 800198a:	4603      	mov	r3, r0
 800198c:	2bff      	cmp	r3, #255	; 0xff
 800198e:	d14b      	bne.n	8001a28 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001990:	2300      	movs	r3, #0
 8001992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001996:	e047      	b.n	8001a28 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001998:	2100      	movs	r1, #0
 800199a:	2049      	movs	r0, #73	; 0x49
 800199c:	f7ff fce4 	bl	8001368 <SD_SendCmd>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d142      	bne.n	8001a2c <SD_disk_ioctl+0x244>
 80019a6:	2110      	movs	r1, #16
 80019a8:	6a38      	ldr	r0, [r7, #32]
 80019aa:	f7ff fc53 	bl	8001254 <SD_RxDataBlock>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03b      	beq.n	8001a2c <SD_disk_ioctl+0x244>
        res = RES_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019ba:	e037      	b.n	8001a2c <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80019bc:	2100      	movs	r1, #0
 80019be:	204a      	movs	r0, #74	; 0x4a
 80019c0:	f7ff fcd2 	bl	8001368 <SD_SendCmd>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d132      	bne.n	8001a30 <SD_disk_ioctl+0x248>
 80019ca:	2110      	movs	r1, #16
 80019cc:	6a38      	ldr	r0, [r7, #32]
 80019ce:	f7ff fc41 	bl	8001254 <SD_RxDataBlock>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d02b      	beq.n	8001a30 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80019de:	e027      	b.n	8001a30 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80019e0:	2100      	movs	r1, #0
 80019e2:	207a      	movs	r0, #122	; 0x7a
 80019e4:	f7ff fcc0 	bl	8001368 <SD_SendCmd>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019f4:	e00b      	b.n	8001a0e <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80019f6:	6a3c      	ldr	r4, [r7, #32]
 80019f8:	1c63      	adds	r3, r4, #1
 80019fa:	623b      	str	r3, [r7, #32]
 80019fc:	f7ff fb7e 	bl	80010fc <SPI_RxByte>
 8001a00:	4603      	mov	r3, r0
 8001a02:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001a04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a08:	3301      	adds	r3, #1
 8001a0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001a0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d9ef      	bls.n	80019f6 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a22:	e006      	b.n	8001a32 <SD_disk_ioctl+0x24a>
      break;
 8001a24:	bf00      	nop
 8001a26:	e004      	b.n	8001a32 <SD_disk_ioctl+0x24a>
      break;
 8001a28:	bf00      	nop
 8001a2a:	e002      	b.n	8001a32 <SD_disk_ioctl+0x24a>
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <SD_disk_ioctl+0x24a>
      break;
 8001a30:	bf00      	nop
    }
    
    DESELECT();
 8001a32:	f7ff fb3d 	bl	80010b0 <DESELECT>
    SPI_RxByte();
 8001a36:	f7ff fb61 	bl	80010fc <SPI_RxByte>
  }
  
  return res;
 8001a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	372c      	adds	r7, #44	; 0x2c
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd90      	pop	{r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000000 	.word	0x20000000

08001a4c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8001a5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <vApplicationGetIdleTaskMemory+0x30>)
 8001a62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	200000c0 	.word	0x200000c0
 8001a7c:	20000160 	.word	0x20000160

08001a80 <send_uart>:

int Status = -2;

/*********************** to send the data to the uart ****************************/

void send_uart(char *string) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(string);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7fe fbc1 	bl	8000210 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // transmit in blocking mode
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <send_uart+0x2c>)
 8001a9e:	f005 ff0b 	bl	80078b8 <HAL_UART_Transmit>

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000558 	.word	0x20000558

08001ab0 <SDCARD_Task>:
/*************Timing**************/
TickType_t xLastWakeTime_BM, xLastWakeTime_SDCARD;

void Bimanual_MotorCtrl(void);

void SDCARD_Task(void *argument) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	xLastWakeTime_SDCARD = xTaskGetTickCount();
 8001ab8:	f007 f9ce 	bl	8008e58 <xTaskGetTickCount>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a03      	ldr	r2, [pc, #12]	; (8001acc <SDCARD_Task+0x1c>)
 8001ac0:	6013      	str	r3, [r2, #0]
	while (1) {

		vTaskDelay(2);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f007 f878 	bl	8008bb8 <vTaskDelay>
 8001ac8:	e7fb      	b.n	8001ac2 <SDCARD_Task+0x12>
 8001aca:	bf00      	nop
 8001acc:	20000df8 	.word	0x20000df8

08001ad0 <INITIALIZATION_Task>:
		//vTaskDelayUntil(&xLastWakeTime_SDCARD, pdMS_TO_TICKS(2)); // 500 Hz
	}

}

void INITIALIZATION_Task(void *argument) {
 8001ad0:	b590      	push	{r4, r7, lr}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	6078      	str	r0, [r7, #4]

	while (1) {

		uint8_t data[] = "Hello slave!!";
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <INITIALIZATION_Task+0x34>)
 8001ada:	f107 0408 	add.w	r4, r7, #8
 8001ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ae2:	8023      	strh	r3, [r4, #0]
		HAL_I2C_Master_Transmit(&hi2c3, 12, data, 32, 10);
 8001ae4:	f107 0208 	add.w	r2, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	2320      	movs	r3, #32
 8001aee:	210c      	movs	r1, #12
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <INITIALIZATION_Task+0x38>)
 8001af2:	f002 ff2f 	bl	8004954 <HAL_I2C_Master_Transmit>
		send_uart("huttooooooooooo\n");
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <INITIALIZATION_Task+0x3c>)
 8001af8:	f7ff ffc2 	bl	8001a80 <send_uart>
		vTaskDelay(10);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f007 f85b 	bl	8008bb8 <vTaskDelay>
	while (1) {
 8001b02:	e7e9      	b.n	8001ad8 <INITIALIZATION_Task+0x8>
 8001b04:	0800ae14 	.word	0x0800ae14
 8001b08:	20000408 	.word	0x20000408
 8001b0c:	0800ae00 	.word	0x0800ae00

08001b10 <BM_Task>:
		//vTaskSuspend(INITIALIZATION_Task_Hnadler);
	}

}

void BM_Task(void *argument) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	xLastWakeTime_BM = xTaskGetTickCount();
 8001b18:	f007 f99e 	bl	8008e58 <xTaskGetTickCount>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <BM_Task+0x94>)
 8001b20:	6013      	str	r3, [r2, #0]
	while (1) {
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
		Bimanual_MotorCtrl(); // nearly 150us
 8001b22:	f000 fc8f 	bl	8002444 <Bimanual_MotorCtrl>
		// HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_9);
		// use semiphore*/

		if (motor1_pos > ThetaConuter * 5 && SD_Done == 0) {
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <BM_Task+0x98>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <BM_Task+0x9c>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d528      	bpl.n	8001b9a <BM_Task+0x8a>
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <BM_Task+0xa0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d124      	bne.n	8001b9a <BM_Task+0x8a>

			PositionData1[ThetaConuter] = motor1_pos;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <BM_Task+0x98>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <BM_Task+0x9c>)
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <BM_Task+0xa4>)
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	601a      	str	r2, [r3, #0]
			PositionData2[ThetaConuter] = motor2_pos;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <BM_Task+0x98>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <BM_Task+0xa8>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4914      	ldr	r1, [pc, #80]	; (8001bbc <BM_Task+0xac>)
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	601a      	str	r2, [r3, #0]
			TorqueData1[ThetaConuter] = T_Rec1;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <BM_Task+0x98>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <BM_Task+0xb0>)
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	4912      	ldr	r1, [pc, #72]	; (8001bc4 <BM_Task+0xb4>)
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	601a      	str	r2, [r3, #0]
			TorqueData2[ThetaConuter] = T_Rec2;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <BM_Task+0x98>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a10      	ldr	r2, [pc, #64]	; (8001bc8 <BM_Task+0xb8>)
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	4910      	ldr	r1, [pc, #64]	; (8001bcc <BM_Task+0xbc>)
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	601a      	str	r2, [r3, #0]
			 sprintf(buffer, "%d,%d\n", (int) (motor2_pos * 1000),
			 (int) (T_Rec2 * 1000));
			 Update_File("positionVsTorque2.txt", buffer);
			 vPortFree(buffer);
			 Unmount_SD("/");*/
			ThetaConuter = ThetaConuter + 1;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <BM_Task+0x98>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	3301      	adds	r3, #1
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <BM_Task+0x98>)
 8001b98:	6013      	str	r3, [r2, #0]
		}

		vTaskDelayUntil(&xLastWakeTime_BM, MS_TO_TICKS(1)); // 2 kHz
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4801      	ldr	r0, [pc, #4]	; (8001ba4 <BM_Task+0x94>)
 8001b9e:	f006 ff87 	bl	8008ab0 <vTaskDelayUntil>
		Bimanual_MotorCtrl(); // nearly 150us
 8001ba2:	e7be      	b.n	8001b22 <BM_Task+0x12>
 8001ba4:	20000df4 	.word	0x20000df4
 8001ba8:	20000dc8 	.word	0x20000dc8
 8001bac:	2000074c 	.word	0x2000074c
 8001bb0:	20000dcc 	.word	0x20000dcc
 8001bb4:	20000aa8 	.word	0x20000aa8
 8001bb8:	20000750 	.word	0x20000750
 8001bbc:	20000c38 	.word	0x20000c38
 8001bc0:	2000075c 	.word	0x2000075c
 8001bc4:	20000788 	.word	0x20000788
 8001bc8:	20000774 	.word	0x20000774
 8001bcc:	20000918 	.word	0x20000918

08001bd0 <HAL_GPIO_EXTI_Callback>:
		buffer[i] = '\0';
}

/******************** Interrupt for user button to toggle the outputs **********************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 8001bda:	f002 fb45 	bl	8004268 <HAL_GetTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x88>)
 8001be2:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_13 && (currentMillis - previousMillis > 150)) {
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bea:	d116      	bne.n	8001c1a <HAL_GPIO_EXTI_Callback+0x4a>
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x88>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b96      	cmp	r3, #150	; 0x96
 8001bf8:	d90f      	bls.n	8001c1a <HAL_GPIO_EXTI_Callback+0x4a>

		// User Button was pressed
		previousMillis = currentMillis;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x88>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c00:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // blue LED
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	4816      	ldr	r0, [pc, #88]	; (8001c60 <HAL_GPIO_EXTI_Callback+0x90>)
 8001c06:	f002 fde2 	bl	80047ce <HAL_GPIO_TogglePin>
		Enable ^= GPIO_PIN_SET; //Toggle the state
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	f083 0301 	eor.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c16:	701a      	strb	r2, [r3, #0]
		// External Button 2 was pressed PE14
		previousMillis = currentMillis;
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // M_Driver1_Enable
		Enable ^= GPIO_PIN_SET; //Toggle the state
	}
}
 8001c18:	e01a      	b.n	8001c50 <HAL_GPIO_EXTI_Callback+0x80>
	else if (GPIO_Pin == GPIO_PIN_14
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c20:	d116      	bne.n	8001c50 <HAL_GPIO_EXTI_Callback+0x80>
	&& (currentMillis - previousMillis > 150)) {
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b96      	cmp	r3, #150	; 0x96
 8001c2e:	d90f      	bls.n	8001c50 <HAL_GPIO_EXTI_Callback+0x80>
		previousMillis = currentMillis;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_GPIO_EXTI_Callback+0x8c>)
 8001c36:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // M_Driver1_Enable
 8001c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3c:	480a      	ldr	r0, [pc, #40]	; (8001c68 <HAL_GPIO_EXTI_Callback+0x98>)
 8001c3e:	f002 fdc6 	bl	80047ce <HAL_GPIO_TogglePin>
		Enable ^= GPIO_PIN_SET; //Toggle the state
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c4e:	701a      	strb	r2, [r3, #0]
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000de0 	.word	0x20000de0
 8001c5c:	20000ddc 	.word	0x20000ddc
 8001c60:	40020400 	.word	0x40020400
 8001c64:	20000020 	.word	0x20000020
 8001c68:	40021000 	.word	0x40021000

08001c6c <findJ>:

float findJ(bool i) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	71fb      	strb	r3, [r7, #7]
	float FAJ = weight * FAweight[i] * (hight * FAlen[i] * FArog[i])
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	4a7c      	ldr	r2, [pc, #496]	; (8001e6c <findJ+0x200>)
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	ed93 7a00 	vldr	s14, [r3]
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <findJ+0x204>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4a79      	ldr	r2, [pc, #484]	; (8001e74 <findJ+0x208>)
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	edd3 6a00 	vldr	s13, [r3]
 8001c98:	4b77      	ldr	r3, [pc, #476]	; (8001e78 <findJ+0x20c>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	4a75      	ldr	r2, [pc, #468]	; (8001e7c <findJ+0x210>)
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
			* (hight * FAlen[i] * FArog[i]);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <findJ+0x208>)
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	edd3 6a00 	vldr	s13, [r3]
 8001cc2:	4b6d      	ldr	r3, [pc, #436]	; (8001e78 <findJ+0x20c>)
 8001cc4:	edd3 7a00 	vldr	s15, [r3]
 8001cc8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <findJ+0x210>)
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float FAJ = weight * FAweight[i] * (hight * FAlen[i] * FArog[i])
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a05 	vstr	s15, [r7, #20]
	float HAJ1 = weight * HAweight[i] * (hight * HAlen[i] * HArog[i])
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a66      	ldr	r2, [pc, #408]	; (8001e80 <findJ+0x214>)
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	ed93 7a00 	vldr	s14, [r3]
 8001cf0:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <findJ+0x204>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	4a61      	ldr	r2, [pc, #388]	; (8001e84 <findJ+0x218>)
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	edd3 6a00 	vldr	s13, [r3]
 8001d06:	4b5c      	ldr	r3, [pc, #368]	; (8001e78 <findJ+0x20c>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <findJ+0x21c>)
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d20:	ee27 7a27 	vmul.f32	s14, s14, s15
			* (hight * HAlen[i] * HArog[i]);
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <findJ+0x218>)
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <findJ+0x20c>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <findJ+0x21c>)
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float HAJ1 = weight * HAweight[i] * (hight * HAlen[i] * HArog[i])
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	edc7 7a04 	vstr	s15, [r7, #16]

	float HAJ = HAJ1
			+ (weight * HAweight[i])
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	4a4a      	ldr	r2, [pc, #296]	; (8001e80 <findJ+0x214>)
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	ed93 7a00 	vldr	s14, [r3]
 8001d5e:	4b44      	ldr	r3, [pc, #272]	; (8001e70 <findJ+0x204>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	ee27 7a27 	vmul.f32	s14, s14, s15
					* ((hight * (FAlen[i] + HAlen[i] * HAcog[i]))
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	4a42      	ldr	r2, [pc, #264]	; (8001e74 <findJ+0x208>)
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	edd3 6a00 	vldr	s13, [r3]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4a43      	ldr	r2, [pc, #268]	; (8001e84 <findJ+0x218>)
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	ed93 6a00 	vldr	s12, [r3]
 8001d80:	79fb      	ldrb	r3, [r7, #7]
 8001d82:	4a42      	ldr	r2, [pc, #264]	; (8001e8c <findJ+0x220>)
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d90:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d94:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <findJ+0x20c>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
							* (hight * (FAlen[i] + HAlen[i] * HAcog[i]))
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	4a34      	ldr	r2, [pc, #208]	; (8001e74 <findJ+0x208>)
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	ed93 6a00 	vldr	s12, [r3]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a35      	ldr	r2, [pc, #212]	; (8001e84 <findJ+0x218>)
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	edd3 5a00 	vldr	s11, [r3]
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4a34      	ldr	r2, [pc, #208]	; (8001e8c <findJ+0x220>)
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	edd3 7a00 	vldr	s15, [r3]
 8001dc2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dc6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <findJ+0x20c>)
 8001dcc:	edd3 7a00 	vldr	s15, [r3]
 8001dd0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001dd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
							- (hight * HAlen[i] * HAcog[i])
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <findJ+0x218>)
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	ed93 6a00 	vldr	s12, [r3]
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <findJ+0x20c>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <findJ+0x220>)
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee26 6a27 	vmul.f32	s12, s12, s15
									* (hight * HAlen[i] * HAcog[i]));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	4a20      	ldr	r2, [pc, #128]	; (8001e84 <findJ+0x218>)
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	edd3 5a00 	vldr	s11, [r3]
 8001e0a:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <findJ+0x20c>)
 8001e0c:	edd3 7a00 	vldr	s15, [r3]
 8001e10:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <findJ+0x220>)
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e24:	ee66 7a27 	vmul.f32	s15, s12, s15
							- (hight * HAlen[i] * HAcog[i])
 8001e28:	ee76 7ae7 	vsub.f32	s15, s13, s15
					* ((hight * (FAlen[i] + HAlen[i] * HAcog[i]))
 8001e2c:	ee67 7a27 	vmul.f32	s15, s14, s15
	float HAJ = HAJ1
 8001e30:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	edc7 7a03 	vstr	s15, [r7, #12]

	return FAJ + HAJ + J_Ro + J_M;
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <findJ+0x224>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e52:	4b10      	ldr	r3, [pc, #64]	; (8001e94 <findJ+0x228>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	371c      	adds	r7, #28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	0800ae64 	.word	0x0800ae64
 8001e70:	20000028 	.word	0x20000028
 8001e74:	0800ae74 	.word	0x0800ae74
 8001e78:	20000024 	.word	0x20000024
 8001e7c:	0800ae84 	.word	0x0800ae84
 8001e80:	0800ae6c 	.word	0x0800ae6c
 8001e84:	0800ae7c 	.word	0x0800ae7c
 8001e88:	0800ae8c 	.word	0x0800ae8c
 8001e8c:	0800ae94 	.word	0x0800ae94
 8001e90:	20000dec 	.word	0x20000dec
 8001e94:	20000018 	.word	0x20000018

08001e98 <findG>:

float findG(bool i) {	// pos = angle from horizontal
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
	float w = FAweight[i] + HAweight[i];
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4a38      	ldr	r2, [pc, #224]	; (8001f88 <findG+0xf0>)
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	ed93 7a00 	vldr	s14, [r3]
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	4a36      	ldr	r2, [pc, #216]	; (8001f8c <findG+0xf4>)
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	edd3 7a00 	vldr	s15, [r3]
 8001eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ebe:	edc7 7a05 	vstr	s15, [r7, #20]
	float TFA = FAweight[i] * FAlen[i] * HAcog[i];
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <findG+0xf0>)
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	; (8001f90 <findG+0xf8>)
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <findG+0xfc>)
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	edc7 7a04 	vstr	s15, [r7, #16]
	float THA = HAweight[i] * (HAlen[i] * HAcog[i] + FAlen[i]);
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <findG+0xf4>)
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	79fb      	ldrb	r3, [r7, #7]
 8001f00:	4a25      	ldr	r2, [pc, #148]	; (8001f98 <findG+0x100>)
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <findG+0xfc>)
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	edd3 7a00 	vldr	s15, [r3]
 8001f16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <findG+0xf8>)
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	4413      	add	r3, r2
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2e:	edc7 7a03 	vstr	s15, [r7, #12]

	return w * weight * g * (hight * (TFA + THA) / w) + RoWeight * RoCOG;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <findG+0x104>)
 8001f34:	ed93 7a00 	vldr	s14, [r3]
 8001f38:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f40:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001fa0 <findG+0x108>
 8001f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f48:	edd7 6a04 	vldr	s13, [r7, #16]
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <findG+0x10c>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001f5e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001f62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f6a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001fa8 <findG+0x110>
 8001f6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8001fa8 <findG+0x110>
 8001f72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f76:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	0800ae64 	.word	0x0800ae64
 8001f8c:	0800ae6c 	.word	0x0800ae6c
 8001f90:	0800ae74 	.word	0x0800ae74
 8001f94:	0800ae94 	.word	0x0800ae94
 8001f98:	0800ae7c 	.word	0x0800ae7c
 8001f9c:	20000028 	.word	0x20000028
 8001fa0:	411cf5c3 	.word	0x411cf5c3
 8001fa4:	20000024 	.word	0x20000024
	...

08001fb0 <torque_profile>:
	float I_gain = 2.0;

	return v * I_gain;
}

float torque_profile(float position, bool IsRo, bool IsDown) {
 8001fb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	ed87 0a01 	vstr	s0, [r7, #4]
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	70fb      	strb	r3, [r7, #3]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	70bb      	strb	r3, [r7, #2]

	if (IsRo) {
 8001fc6:	78fb      	ldrb	r3, [r7, #3]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80ce 	beq.w	800216a <torque_profile+0x1ba>
		if (!IsDown) {
 8001fce:	78bb      	ldrb	r3, [r7, #2]
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d063      	beq.n	80020a2 <torque_profile+0xf2>
			return -0.00006 * position * position * position
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fa84 	bl	80004e8 <__aeabi_f2d>
 8001fe0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002318 <torque_profile+0x368>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe fad7 	bl	8000598 <__aeabi_dmul>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4614      	mov	r4, r2
 8001ff0:	461d      	mov	r5, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fa78 	bl	80004e8 <__aeabi_f2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe faca 	bl	8000598 <__aeabi_dmul>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4614      	mov	r4, r2
 800200a:	461d      	mov	r5, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7fe fa6b 	bl	80004e8 <__aeabi_f2d>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4620      	mov	r0, r4
 8002018:	4629      	mov	r1, r5
 800201a:	f7fe fabd 	bl	8000598 <__aeabi_dmul>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fa5e 	bl	80004e8 <__aeabi_f2d>
 800202c:	a3bc      	add	r3, pc, #752	; (adr r3, 8002320 <torque_profile+0x370>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	f7fe fab1 	bl	8000598 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4690      	mov	r8, r2
 800203c:	4699      	mov	r9, r3
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fa52 	bl	80004e8 <__aeabi_f2d>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4640      	mov	r0, r8
 800204a:	4649      	mov	r1, r9
 800204c:	f7fe faa4 	bl	8000598 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	f7fe f8e8 	bl	800022c <__adddf3>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4614      	mov	r4, r2
 8002062:	461d      	mov	r5, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fa3f 	bl	80004e8 <__aeabi_f2d>
 800206a:	a3af      	add	r3, pc, #700	; (adr r3, 8002328 <torque_profile+0x378>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fa92 	bl	8000598 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4620      	mov	r0, r4
 800207a:	4629      	mov	r1, r5
 800207c:	f7fe f8d6 	bl	800022c <__adddf3>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	a3a9      	add	r3, pc, #676	; (adr r3, 8002330 <torque_profile+0x380>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe f8cd 	bl	800022c <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd3f 	bl	8000b1c <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	e130      	b.n	8002304 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fa20 	bl	80004e8 <__aeabi_f2d>
 80020a8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002338 <torque_profile+0x388>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe fa73 	bl	8000598 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4614      	mov	r4, r2
 80020b8:	461d      	mov	r5, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7fe fa14 	bl	80004e8 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4620      	mov	r0, r4
 80020c6:	4629      	mov	r1, r5
 80020c8:	f7fe fa66 	bl	8000598 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	461d      	mov	r5, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7fe fa07 	bl	80004e8 <__aeabi_f2d>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f7fe fa59 	bl	8000598 <__aeabi_dmul>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4614      	mov	r4, r2
 80020ec:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7fe f9fa 	bl	80004e8 <__aeabi_f2d>
 80020f4:	a392      	add	r3, pc, #584	; (adr r3, 8002340 <torque_profile+0x390>)
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	f7fe fa4d 	bl	8000598 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4690      	mov	r8, r2
 8002104:	4699      	mov	r9, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe f9ee 	bl	80004e8 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4640      	mov	r0, r8
 8002112:	4649      	mov	r1, r9
 8002114:	f7fe fa40 	bl	8000598 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4620      	mov	r0, r4
 800211e:	4629      	mov	r1, r5
 8002120:	f7fe f884 	bl	800022c <__adddf3>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4614      	mov	r4, r2
 800212a:	461d      	mov	r5, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7fe f9db 	bl	80004e8 <__aeabi_f2d>
 8002132:	a385      	add	r3, pc, #532	; (adr r3, 8002348 <torque_profile+0x398>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe fa2e 	bl	8000598 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4620      	mov	r0, r4
 8002142:	4629      	mov	r1, r5
 8002144:	f7fe f872 	bl	800022c <__adddf3>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	a37f      	add	r3, pc, #508	; (adr r3, 8002350 <torque_profile+0x3a0>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f869 	bl	800022c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fcdb 	bl	8000b1c <__aeabi_d2f>
 8002166:	4603      	mov	r3, r0
 8002168:	e0cc      	b.n	8002304 <torque_profile+0x354>
		}
	} else {
		if (!IsDown) {
 800216a:	78bb      	ldrb	r3, [r7, #2]
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d063      	beq.n	800223e <torque_profile+0x28e>
			return -0.00006 * position * position * position
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe f9b6 	bl	80004e8 <__aeabi_f2d>
 800217c:	a366      	add	r3, pc, #408	; (adr r3, 8002318 <torque_profile+0x368>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	f7fe fa09 	bl	8000598 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4614      	mov	r4, r2
 800218c:	461d      	mov	r5, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe f9aa 	bl	80004e8 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f9fc 	bl	8000598 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	461d      	mov	r5, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe f99d 	bl	80004e8 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe f9ef 	bl	8000598 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe f990 	bl	80004e8 <__aeabi_f2d>
 80021c8:	a355      	add	r3, pc, #340	; (adr r3, 8002320 <torque_profile+0x370>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe f9e3 	bl	8000598 <__aeabi_dmul>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4690      	mov	r8, r2
 80021d8:	4699      	mov	r9, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe f984 	bl	80004e8 <__aeabi_f2d>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4640      	mov	r0, r8
 80021e6:	4649      	mov	r1, r9
 80021e8:	f7fe f9d6 	bl	8000598 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4620      	mov	r0, r4
 80021f2:	4629      	mov	r1, r5
 80021f4:	f7fe f81a 	bl	800022c <__adddf3>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4614      	mov	r4, r2
 80021fe:	461d      	mov	r5, r3
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe f971 	bl	80004e8 <__aeabi_f2d>
 8002206:	a348      	add	r3, pc, #288	; (adr r3, 8002328 <torque_profile+0x378>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f9c4 	bl	8000598 <__aeabi_dmul>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4620      	mov	r0, r4
 8002216:	4629      	mov	r1, r5
 8002218:	f7fe f808 	bl	800022c <__adddf3>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	a342      	add	r3, pc, #264	; (adr r3, 8002330 <torque_profile+0x380>)
 8002226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222a:	f7fd ffff 	bl	800022c <__adddf3>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc71 	bl	8000b1c <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	e062      	b.n	8002304 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fe f952 	bl	80004e8 <__aeabi_f2d>
 8002244:	a33c      	add	r3, pc, #240	; (adr r3, 8002338 <torque_profile+0x388>)
 8002246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224a:	f7fe f9a5 	bl	8000598 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4614      	mov	r4, r2
 8002254:	461d      	mov	r5, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe f946 	bl	80004e8 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4620      	mov	r0, r4
 8002262:	4629      	mov	r1, r5
 8002264:	f7fe f998 	bl	8000598 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4614      	mov	r4, r2
 800226e:	461d      	mov	r5, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7fe f939 	bl	80004e8 <__aeabi_f2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4620      	mov	r0, r4
 800227c:	4629      	mov	r1, r5
 800227e:	f7fe f98b 	bl	8000598 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4614      	mov	r4, r2
 8002288:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe f92c 	bl	80004e8 <__aeabi_f2d>
 8002290:	a32b      	add	r3, pc, #172	; (adr r3, 8002340 <torque_profile+0x390>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fe f97f 	bl	8000598 <__aeabi_dmul>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4690      	mov	r8, r2
 80022a0:	4699      	mov	r9, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f920 	bl	80004e8 <__aeabi_f2d>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4640      	mov	r0, r8
 80022ae:	4649      	mov	r1, r9
 80022b0:	f7fe f972 	bl	8000598 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fd ffb6 	bl	800022c <__adddf3>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7fe f90d 	bl	80004e8 <__aeabi_f2d>
 80022ce:	a31e      	add	r3, pc, #120	; (adr r3, 8002348 <torque_profile+0x398>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fe f960 	bl	8000598 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4620      	mov	r0, r4
 80022de:	4629      	mov	r1, r5
 80022e0:	f7fd ffa4 	bl	800022c <__adddf3>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	a318      	add	r3, pc, #96	; (adr r3, 8002350 <torque_profile+0x3a0>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fd ff9b 	bl	800022c <__adddf3>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f7fe fc0d 	bl	8000b1c <__aeabi_d2f>
 8002302:	4603      	mov	r3, r0
		}
	}
}
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002314:	f3af 8000 	nop.w
 8002318:	4d551d69 	.word	0x4d551d69
 800231c:	bf0f7510 	.word	0xbf0f7510
 8002320:	8d4fdf3b 	.word	0x8d4fdf3b
 8002324:	3f726e97 	.word	0x3f726e97
 8002328:	212d7732 	.word	0x212d7732
 800232c:	3fd8f41f 	.word	0x3fd8f41f
 8002330:	df3b645a 	.word	0xdf3b645a
 8002334:	40504d4f 	.word	0x40504d4f
 8002338:	88e368f1 	.word	0x88e368f1
 800233c:	3ef4f8b5 	.word	0x3ef4f8b5
 8002340:	b5dcc63f 	.word	0xb5dcc63f
 8002344:	3f907c84 	.word	0x3f907c84
 8002348:	ced91687 	.word	0xced91687
 800234c:	3ffb53f7 	.word	0x3ffb53f7
 8002350:	a9fbe76d 	.word	0xa9fbe76d
 8002354:	40513af1 	.word	0x40513af1

08002358 <T_gravity>:

float T_gravity(float position, bool IsDown, float G, bool IsRo) {
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002362:	4603      	mov	r3, r0
 8002364:	edc7 0a01 	vstr	s1, [r7, #4]
 8002368:	460a      	mov	r2, r1
 800236a:	72fb      	strb	r3, [r7, #11]
 800236c:	4613      	mov	r3, r2
 800236e:	72bb      	strb	r3, [r7, #10]

//float k_angle = 1; // coefficient to determine the angle, this would be a cos function
	if (IsRo) {
 8002370:	7abb      	ldrb	r3, [r7, #10]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <T_gravity+0x24>
		return 0;
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e05c      	b.n	8002436 <T_gravity+0xde>
	} else {
		if (!IsDown) {
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	f083 0301 	eor.w	r3, r3, #1
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d028      	beq.n	80023da <T_gravity+0x82>
			return G * cos(position) * G;
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7fe f8ad 	bl	80004e8 <__aeabi_f2d>
 800238e:	4604      	mov	r4, r0
 8002390:	460d      	mov	r5, r1
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7fe f8a8 	bl	80004e8 <__aeabi_f2d>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	ec43 2b10 	vmov	d0, r2, r3
 80023a0:	f007 fce6 	bl	8009d70 <cos>
 80023a4:	ec53 2b10 	vmov	r2, r3, d0
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4614      	mov	r4, r2
 80023b6:	461d      	mov	r5, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe f895 	bl	80004e8 <__aeabi_f2d>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4620      	mov	r0, r4
 80023c4:	4629      	mov	r1, r5
 80023c6:	f7fe f8e7 	bl	8000598 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fba3 	bl	8000b1c <__aeabi_d2f>
 80023d6:	4603      	mov	r3, r0
 80023d8:	e02d      	b.n	8002436 <T_gravity+0xde>
		} else {
			return -G * cos(position) * G;
 80023da:	edd7 7a01 	vldr	s15, [r7, #4]
 80023de:	eef1 7a67 	vneg.f32	s15, s15
 80023e2:	ee17 3a90 	vmov	r3, s15
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f87e 	bl	80004e8 <__aeabi_f2d>
 80023ec:	4604      	mov	r4, r0
 80023ee:	460d      	mov	r5, r1
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f7fe f879 	bl	80004e8 <__aeabi_f2d>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	ec43 2b10 	vmov	d0, r2, r3
 80023fe:	f007 fcb7 	bl	8009d70 <cos>
 8002402:	ec53 2b10 	vmov	r2, r3, d0
 8002406:	4620      	mov	r0, r4
 8002408:	4629      	mov	r1, r5
 800240a:	f7fe f8c5 	bl	8000598 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4614      	mov	r4, r2
 8002414:	461d      	mov	r5, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe f866 	bl	80004e8 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fe f8b8 	bl	8000598 <__aeabi_dmul>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fb74 	bl	8000b1c <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
		}

	}
}
 8002436:	ee07 3a90 	vmov	s15, r3
 800243a:	eeb0 0a67 	vmov.f32	s0, s15
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bdb0      	pop	{r4, r5, r7, pc}

08002444 <Bimanual_MotorCtrl>:

void Bimanual_MotorCtrl(void) {
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	ed2d 8b02 	vpush	{d8}
 800244a:	af00      	add	r7, sp, #0

	update_encoder(&enc_instance_M1, &htim1); // update the encoder1
 800244c:	497a      	ldr	r1, [pc, #488]	; (8002638 <Bimanual_MotorCtrl+0x1f4>)
 800244e:	487b      	ldr	r0, [pc, #492]	; (800263c <Bimanual_MotorCtrl+0x1f8>)
 8002450:	f001 fa42 	bl	80038d8 <update_encoder>
	update_encoder(&enc_instance_M2, &htim4);
 8002454:	497a      	ldr	r1, [pc, #488]	; (8002640 <Bimanual_MotorCtrl+0x1fc>)
 8002456:	487b      	ldr	r0, [pc, #492]	; (8002644 <Bimanual_MotorCtrl+0x200>)
 8002458:	f001 fa3e 	bl	80038d8 <update_encoder>

	motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 800245c:	4b77      	ldr	r3, [pc, #476]	; (800263c <Bimanual_MotorCtrl+0x1f8>)
 800245e:	ed93 7a00 	vldr	s14, [r3]
 8002462:	4b79      	ldr	r3, [pc, #484]	; (8002648 <Bimanual_MotorCtrl+0x204>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246c:	4b77      	ldr	r3, [pc, #476]	; (800264c <Bimanual_MotorCtrl+0x208>)
 800246e:	edc3 7a00 	vstr	s15, [r3]
	motor2_vel = enc_instance_M2.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 8002472:	4b74      	ldr	r3, [pc, #464]	; (8002644 <Bimanual_MotorCtrl+0x200>)
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	4b73      	ldr	r3, [pc, #460]	; (8002648 <Bimanual_MotorCtrl+0x204>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002482:	4b73      	ldr	r3, [pc, #460]	; (8002650 <Bimanual_MotorCtrl+0x20c>)
 8002484:	edc3 7a00 	vstr	s15, [r3]

	if (motor1_vel > 0) {
 8002488:	4b70      	ldr	r3, [pc, #448]	; (800264c <Bimanual_MotorCtrl+0x208>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	dd03      	ble.n	80024a0 <Bimanual_MotorCtrl+0x5c>
		IsDown = 1;
 8002498:	4b6e      	ldr	r3, [pc, #440]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	e00a      	b.n	80024b6 <Bimanual_MotorCtrl+0x72>
	} else if (motor1_vel < 0) {
 80024a0:	4b6a      	ldr	r3, [pc, #424]	; (800264c <Bimanual_MotorCtrl+0x208>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	d502      	bpl.n	80024b6 <Bimanual_MotorCtrl+0x72>
		IsDown = 0;
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
	}

	if (IsDown) {
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00f      	beq.n	80024de <Bimanual_MotorCtrl+0x9a>
		motor1_vel = -motor1_vel;
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <Bimanual_MotorCtrl+0x208>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	eef1 7a67 	vneg.f32	s15, s15
 80024c8:	4b60      	ldr	r3, [pc, #384]	; (800264c <Bimanual_MotorCtrl+0x208>)
 80024ca:	edc3 7a00 	vstr	s15, [r3]
		motor2_vel = -motor2_vel;
 80024ce:	4b60      	ldr	r3, [pc, #384]	; (8002650 <Bimanual_MotorCtrl+0x20c>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	eef1 7a67 	vneg.f32	s15, s15
 80024d8:	4b5d      	ldr	r3, [pc, #372]	; (8002650 <Bimanual_MotorCtrl+0x20c>)
 80024da:	edc3 7a00 	vstr	s15, [r3]
	}

	motor1_pos = enc_instance_M1.position * Ticks_to_Deg; // from tick to degrees -> 360.0/(512.0*26.0)
 80024de:	4b57      	ldr	r3, [pc, #348]	; (800263c <Bimanual_MotorCtrl+0x1f8>)
 80024e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <Bimanual_MotorCtrl+0x214>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	4b5b      	ldr	r3, [pc, #364]	; (800265c <Bimanual_MotorCtrl+0x218>)
 80024f0:	edc3 7a00 	vstr	s15, [r3]
	motor2_pos = enc_instance_M2.position * Ticks_to_Deg;
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <Bimanual_MotorCtrl+0x200>)
 80024f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80024fa:	4b57      	ldr	r3, [pc, #348]	; (8002658 <Bimanual_MotorCtrl+0x214>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <Bimanual_MotorCtrl+0x21c>)
 8002506:	edc3 7a00 	vstr	s15, [r3]

	T_Dis1 = dob1.T_dis;
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <Bimanual_MotorCtrl+0x220>)
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	4a56      	ldr	r2, [pc, #344]	; (8002668 <Bimanual_MotorCtrl+0x224>)
 8002510:	6013      	str	r3, [r2, #0]
	T_Rec1 = rtob1.T_extern;
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <Bimanual_MotorCtrl+0x228>)
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	4a56      	ldr	r2, [pc, #344]	; (8002670 <Bimanual_MotorCtrl+0x22c>)
 8002518:	6013      	str	r3, [r2, #0]

	T_Dis2 = dob2.T_dis;
 800251a:	4b56      	ldr	r3, [pc, #344]	; (8002674 <Bimanual_MotorCtrl+0x230>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	4a56      	ldr	r2, [pc, #344]	; (8002678 <Bimanual_MotorCtrl+0x234>)
 8002520:	6013      	str	r3, [r2, #0]
	T_Rec2 = rtob2.T_extern;
 8002522:	4b56      	ldr	r3, [pc, #344]	; (800267c <Bimanual_MotorCtrl+0x238>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	4a56      	ldr	r2, [pc, #344]	; (8002680 <Bimanual_MotorCtrl+0x23c>)
 8002528:	6013      	str	r3, [r2, #0]

	T_P1 = torque_profile(motor1_pos, IsRo, IsDown) / (5 * 26);
 800252a:	4b4c      	ldr	r3, [pc, #304]	; (800265c <Bimanual_MotorCtrl+0x218>)
 800252c:	edd3 7a00 	vldr	s15, [r3]
 8002530:	4b54      	ldr	r3, [pc, #336]	; (8002684 <Bimanual_MotorCtrl+0x240>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4a47      	ldr	r2, [pc, #284]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 8002536:	7812      	ldrb	r2, [r2, #0]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	f7ff fd36 	bl	8001fb0 <torque_profile>
 8002544:	eeb0 7a40 	vmov.f32	s14, s0
 8002548:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002688 <Bimanual_MotorCtrl+0x244>
 800254c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002550:	4b4e      	ldr	r3, [pc, #312]	; (800268c <Bimanual_MotorCtrl+0x248>)
 8002552:	edc3 7a00 	vstr	s15, [r3]
	T_P2 = torque_profile(motor2_pos, IsRo, IsDown) / (5 * 26);
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <Bimanual_MotorCtrl+0x21c>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <Bimanual_MotorCtrl+0x240>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4a3c      	ldr	r2, [pc, #240]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	eeb0 0a67 	vmov.f32	s0, s15
 800256c:	f7ff fd20 	bl	8001fb0 <torque_profile>
 8002570:	eeb0 7a40 	vmov.f32	s14, s0
 8002574:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002688 <Bimanual_MotorCtrl+0x244>
 8002578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800257c:	4b44      	ldr	r3, [pc, #272]	; (8002690 <Bimanual_MotorCtrl+0x24c>)
 800257e:	edc3 7a00 	vstr	s15, [r3]

	T_G1 = T_gravity(motor1_pos, IsDown, G, IsRo) / 26;
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <Bimanual_MotorCtrl+0x218>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	4b32      	ldr	r3, [pc, #200]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4a41      	ldr	r2, [pc, #260]	; (8002694 <Bimanual_MotorCtrl+0x250>)
 800258e:	ed92 7a00 	vldr	s14, [r2]
 8002592:	4a3c      	ldr	r2, [pc, #240]	; (8002684 <Bimanual_MotorCtrl+0x240>)
 8002594:	7812      	ldrb	r2, [r2, #0]
 8002596:	4611      	mov	r1, r2
 8002598:	eef0 0a47 	vmov.f32	s1, s14
 800259c:	4618      	mov	r0, r3
 800259e:	eeb0 0a67 	vmov.f32	s0, s15
 80025a2:	f7ff fed9 	bl	8002358 <T_gravity>
 80025a6:	eeb0 7a40 	vmov.f32	s14, s0
 80025aa:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80025ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b2:	4b39      	ldr	r3, [pc, #228]	; (8002698 <Bimanual_MotorCtrl+0x254>)
 80025b4:	edc3 7a00 	vstr	s15, [r3]
	T_G2 = T_gravity(motor2_pos, IsDown, G, IsRo) / 26;
 80025b8:	4b29      	ldr	r3, [pc, #164]	; (8002660 <Bimanual_MotorCtrl+0x21c>)
 80025ba:	edd3 7a00 	vldr	s15, [r3]
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <Bimanual_MotorCtrl+0x250>)
 80025c4:	ed92 7a00 	vldr	s14, [r2]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	; (8002684 <Bimanual_MotorCtrl+0x240>)
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	4611      	mov	r1, r2
 80025ce:	eef0 0a47 	vmov.f32	s1, s14
 80025d2:	4618      	mov	r0, r3
 80025d4:	eeb0 0a67 	vmov.f32	s0, s15
 80025d8:	f7ff febe 	bl	8002358 <T_gravity>
 80025dc:	eeb0 7a40 	vmov.f32	s14, s0
 80025e0:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80025e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025e8:	4b2c      	ldr	r3, [pc, #176]	; (800269c <Bimanual_MotorCtrl+0x258>)
 80025ea:	edc3 7a00 	vstr	s15, [r3]

	if (IsDown) {
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <Bimanual_MotorCtrl+0x210>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d058      	beq.n	80026a8 <Bimanual_MotorCtrl+0x264>
		k_s = -fabs(k_s);
 80025f6:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <Bimanual_MotorCtrl+0x25c>)
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	eef0 7ae7 	vabs.f32	s15, s15
 8002600:	ee17 0a90 	vmov	r0, s15
 8002604:	f7fd ff70 	bl	80004e8 <__aeabi_f2d>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fa84 	bl	8000b1c <__aeabi_d2f>
 8002614:	4603      	mov	r3, r0
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eef1 7a67 	vneg.f32	s15, s15
 800261e:	4b20      	ldr	r3, [pc, #128]	; (80026a0 <Bimanual_MotorCtrl+0x25c>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
		k_sd = +fabs(k_sd);
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <Bimanual_MotorCtrl+0x260>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	eef0 7ae7 	vabs.f32	s15, s15
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <Bimanual_MotorCtrl+0x260>)
 8002630:	edc3 7a00 	vstr	s15, [r3]
 8002634:	e057      	b.n	80026e6 <Bimanual_MotorCtrl+0x2a2>
 8002636:	bf00      	nop
 8002638:	200004c0 	.word	0x200004c0
 800263c:	2000066c 	.word	0x2000066c
 8002640:	2000050c 	.word	0x2000050c
 8002644:	2000067c 	.word	0x2000067c
 8002648:	20000dd0 	.word	0x20000dd0
 800264c:	20000744 	.word	0x20000744
 8002650:	20000748 	.word	0x20000748
 8002654:	20000de5 	.word	0x20000de5
 8002658:	20000dd8 	.word	0x20000dd8
 800265c:	2000074c 	.word	0x2000074c
 8002660:	20000750 	.word	0x20000750
 8002664:	200006bc 	.word	0x200006bc
 8002668:	20000758 	.word	0x20000758
 800266c:	200006d0 	.word	0x200006d0
 8002670:	2000075c 	.word	0x2000075c
 8002674:	200006ec 	.word	0x200006ec
 8002678:	20000770 	.word	0x20000770
 800267c:	20000700 	.word	0x20000700
 8002680:	20000774 	.word	0x20000774
 8002684:	20000de4 	.word	0x20000de4
 8002688:	43020000 	.word	0x43020000
 800268c:	20000760 	.word	0x20000760
 8002690:	20000778 	.word	0x20000778
 8002694:	20000df0 	.word	0x20000df0
 8002698:	20000764 	.word	0x20000764
 800269c:	2000077c 	.word	0x2000077c
 80026a0:	20000008 	.word	0x20000008
 80026a4:	20000784 	.word	0x20000784
	} else {
		k_s = fabs(k_s);
 80026a8:	4bd1      	ldr	r3, [pc, #836]	; (80029f0 <Bimanual_MotorCtrl+0x5ac>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eef0 7ae7 	vabs.f32	s15, s15
 80026b2:	4bcf      	ldr	r3, [pc, #828]	; (80029f0 <Bimanual_MotorCtrl+0x5ac>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
		k_sd = -fabs(k_sd);
 80026b8:	4bce      	ldr	r3, [pc, #824]	; (80029f4 <Bimanual_MotorCtrl+0x5b0>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	eef0 7ae7 	vabs.f32	s15, s15
 80026c2:	ee17 0a90 	vmov	r0, s15
 80026c6:	f7fd ff0f 	bl	80004e8 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4610      	mov	r0, r2
 80026d0:	4619      	mov	r1, r3
 80026d2:	f7fe fa23 	bl	8000b1c <__aeabi_d2f>
 80026d6:	4603      	mov	r3, r0
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eef1 7a67 	vneg.f32	s15, s15
 80026e0:	4bc4      	ldr	r3, [pc, #784]	; (80029f4 <Bimanual_MotorCtrl+0x5b0>)
 80026e2:	edc3 7a00 	vstr	s15, [r3]
	}
	apply_pid(&pid_instance_M11, (T_P1 - T_G1 - T_Rec1), dt);
 80026e6:	4bc4      	ldr	r3, [pc, #784]	; (80029f8 <Bimanual_MotorCtrl+0x5b4>)
 80026e8:	ed93 7a00 	vldr	s14, [r3]
 80026ec:	4bc3      	ldr	r3, [pc, #780]	; (80029fc <Bimanual_MotorCtrl+0x5b8>)
 80026ee:	edd3 7a00 	vldr	s15, [r3]
 80026f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f6:	4bc2      	ldr	r3, [pc, #776]	; (8002a00 <Bimanual_MotorCtrl+0x5bc>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002700:	4bc0      	ldr	r3, [pc, #768]	; (8002a04 <Bimanual_MotorCtrl+0x5c0>)
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	eef0 0a47 	vmov.f32	s1, s14
 800270a:	eeb0 0a67 	vmov.f32	s0, s15
 800270e:	48be      	ldr	r0, [pc, #760]	; (8002a08 <Bimanual_MotorCtrl+0x5c4>)
 8002710:	f001 f842 	bl	8003798 <apply_pid>
	apply_pid(&pid_instance_M21,
			(T_P2 - T_G2 - T_Rec2 - k_s * (motor1_pos - motor2_pos)
 8002714:	4bbd      	ldr	r3, [pc, #756]	; (8002a0c <Bimanual_MotorCtrl+0x5c8>)
 8002716:	ed93 7a00 	vldr	s14, [r3]
 800271a:	4bbd      	ldr	r3, [pc, #756]	; (8002a10 <Bimanual_MotorCtrl+0x5cc>)
 800271c:	edd3 7a00 	vldr	s15, [r3]
 8002720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002724:	4bbb      	ldr	r3, [pc, #748]	; (8002a14 <Bimanual_MotorCtrl+0x5d0>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800272e:	4bba      	ldr	r3, [pc, #744]	; (8002a18 <Bimanual_MotorCtrl+0x5d4>)
 8002730:	edd3 6a00 	vldr	s13, [r3]
 8002734:	4bb9      	ldr	r3, [pc, #740]	; (8002a1c <Bimanual_MotorCtrl+0x5d8>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800273e:	4bac      	ldr	r3, [pc, #688]	; (80029f0 <Bimanual_MotorCtrl+0x5ac>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002748:	ee37 7a67 	vsub.f32	s14, s14, s15
					- k_sd * (motor1_vel - motor2_vel)), dt);
 800274c:	4bb4      	ldr	r3, [pc, #720]	; (8002a20 <Bimanual_MotorCtrl+0x5dc>)
 800274e:	edd3 6a00 	vldr	s13, [r3]
 8002752:	4bb4      	ldr	r3, [pc, #720]	; (8002a24 <Bimanual_MotorCtrl+0x5e0>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800275c:	4ba5      	ldr	r3, [pc, #660]	; (80029f4 <Bimanual_MotorCtrl+0x5b0>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
	apply_pid(&pid_instance_M21,
 8002766:	ee77 7a67 	vsub.f32	s15, s14, s15
 800276a:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <Bimanual_MotorCtrl+0x5c0>)
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	eef0 0a47 	vmov.f32	s1, s14
 8002774:	eeb0 0a67 	vmov.f32	s0, s15
 8002778:	48ab      	ldr	r0, [pc, #684]	; (8002a28 <Bimanual_MotorCtrl+0x5e4>)
 800277a:	f001 f80d 	bl	8003798 <apply_pid>

	Ia_ref1 = ((pid_instance_M11.output) + T_Dis1) / k_T; // master
 800277e:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <Bimanual_MotorCtrl+0x5c4>)
 8002780:	ed93 7a05 	vldr	s14, [r3, #20]
 8002784:	4ba9      	ldr	r3, [pc, #676]	; (8002a2c <Bimanual_MotorCtrl+0x5e8>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800278e:	4ba8      	ldr	r3, [pc, #672]	; (8002a30 <Bimanual_MotorCtrl+0x5ec>)
 8002790:	ed93 7a00 	vldr	s14, [r3]
 8002794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002798:	4ba6      	ldr	r3, [pc, #664]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 800279a:	edc3 7a00 	vstr	s15, [r3]
	Ia_ref2 = ((pid_instance_M21.output) + T_Dis2) / k_T; // slave
 800279e:	4ba2      	ldr	r3, [pc, #648]	; (8002a28 <Bimanual_MotorCtrl+0x5e4>)
 80027a0:	ed93 7a05 	vldr	s14, [r3, #20]
 80027a4:	4ba4      	ldr	r3, [pc, #656]	; (8002a38 <Bimanual_MotorCtrl+0x5f4>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee77 6a27 	vadd.f32	s13, s14, s15
 80027ae:	4ba0      	ldr	r3, [pc, #640]	; (8002a30 <Bimanual_MotorCtrl+0x5ec>)
 80027b0:	ed93 7a00 	vldr	s14, [r3]
 80027b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b8:	4ba0      	ldr	r3, [pc, #640]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 80027ba:	edc3 7a00 	vstr	s15, [r3]

	if (fabs(Ia_ref1) > I_max) {
 80027be:	4b9d      	ldr	r3, [pc, #628]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 80027c0:	edd3 7a00 	vldr	s15, [r3]
 80027c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80027c8:	4b9d      	ldr	r3, [pc, #628]	; (8002a40 <Bimanual_MotorCtrl+0x5fc>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	dd2d      	ble.n	8002834 <Bimanual_MotorCtrl+0x3f0>
		Ia_ref1 = (Ia_ref1 / fabs(Ia_ref1)) * I_max;
 80027d8:	4b96      	ldr	r3, [pc, #600]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe83 	bl	80004e8 <__aeabi_f2d>
 80027e2:	4604      	mov	r4, r0
 80027e4:	460d      	mov	r5, r1
 80027e6:	4b93      	ldr	r3, [pc, #588]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eef0 7ae7 	vabs.f32	s15, s15
 80027f0:	ee17 0a90 	vmov	r0, s15
 80027f4:	f7fd fe78 	bl	80004e8 <__aeabi_f2d>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4620      	mov	r0, r4
 80027fe:	4629      	mov	r1, r5
 8002800:	f7fd fff4 	bl	80007ec <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4614      	mov	r4, r2
 800280a:	461d      	mov	r5, r3
 800280c:	4b8c      	ldr	r3, [pc, #560]	; (8002a40 <Bimanual_MotorCtrl+0x5fc>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe69 	bl	80004e8 <__aeabi_f2d>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4620      	mov	r0, r4
 800281c:	4629      	mov	r1, r5
 800281e:	f7fd febb 	bl	8000598 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f977 	bl	8000b1c <__aeabi_d2f>
 800282e:	4603      	mov	r3, r0
 8002830:	4a80      	ldr	r2, [pc, #512]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 8002832:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) > I_max) {
 8002834:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	eeb0 7ae7 	vabs.f32	s14, s15
 800283e:	4b80      	ldr	r3, [pc, #512]	; (8002a40 <Bimanual_MotorCtrl+0x5fc>)
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	dd2d      	ble.n	80028aa <Bimanual_MotorCtrl+0x466>
		Ia_ref2 = (Ia_ref2 / fabs(Ia_ref2)) * I_max;
 800284e:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe48 	bl	80004e8 <__aeabi_f2d>
 8002858:	4604      	mov	r4, r0
 800285a:	460d      	mov	r5, r1
 800285c:	4b77      	ldr	r3, [pc, #476]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	eef0 7ae7 	vabs.f32	s15, s15
 8002866:	ee17 0a90 	vmov	r0, s15
 800286a:	f7fd fe3d 	bl	80004e8 <__aeabi_f2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd ffb9 	bl	80007ec <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4614      	mov	r4, r2
 8002880:	461d      	mov	r5, r3
 8002882:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <Bimanual_MotorCtrl+0x5fc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe2e 	bl	80004e8 <__aeabi_f2d>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4620      	mov	r0, r4
 8002892:	4629      	mov	r1, r5
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f93c 	bl	8000b1c <__aeabi_d2f>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4a65      	ldr	r2, [pc, #404]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 80028a8:	6013      	str	r3, [r2, #0]
	}

	update_dob(&dob1, Ia_ref1,
 80028aa:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 80028ac:	ed93 8a00 	vldr	s16, [r3]
			enc_instance_M1.velocity * 60.0 * RPM_to_Rads_per_sec / 512.0); //  &dob1,  Ia_ref,  velocity
 80028b0:	4b64      	ldr	r3, [pc, #400]	; (8002a44 <Bimanual_MotorCtrl+0x600>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fe17 	bl	80004e8 <__aeabi_f2d>
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <Bimanual_MotorCtrl+0x604>)
 80028c0:	f7fd fe6a 	bl	8000598 <__aeabi_dmul>
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4614      	mov	r4, r2
 80028ca:	461d      	mov	r5, r3
 80028cc:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <Bimanual_MotorCtrl+0x608>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe09 	bl	80004e8 <__aeabi_f2d>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4620      	mov	r0, r4
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fd fe5b 	bl	8000598 <__aeabi_dmul>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80028f2:	f7fd ff7b 	bl	80007ec <__aeabi_ddiv>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
	update_dob(&dob1, Ia_ref1,
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f90d 	bl	8000b1c <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	ee00 3a90 	vmov	s1, r3
 8002908:	eeb0 0a48 	vmov.f32	s0, s16
 800290c:	4850      	ldr	r0, [pc, #320]	; (8002a50 <Bimanual_MotorCtrl+0x60c>)
 800290e:	f7fe fb57 	bl	8000fc0 <update_dob>
	update_rtob(&rtob1, Ia_ref1,
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <Bimanual_MotorCtrl+0x5f0>)
 8002914:	ed93 8a00 	vldr	s16, [r3]
			enc_instance_M1.velocity * 60.0 * RPM_to_Rads_per_sec / 512.0); // &rtob1, Ia_ref, velocity
 8002918:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <Bimanual_MotorCtrl+0x600>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fde3 	bl	80004e8 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <Bimanual_MotorCtrl+0x604>)
 8002928:	f7fd fe36 	bl	8000598 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4614      	mov	r4, r2
 8002932:	461d      	mov	r5, r3
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <Bimanual_MotorCtrl+0x608>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7fd fdd5 	bl	80004e8 <__aeabi_f2d>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fe27 	bl	8000598 <__aeabi_dmul>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4610      	mov	r0, r2
 8002950:	4619      	mov	r1, r3
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800295a:	f7fd ff47 	bl	80007ec <__aeabi_ddiv>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
	update_rtob(&rtob1, Ia_ref1,
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f8d9 	bl	8000b1c <__aeabi_d2f>
 800296a:	4603      	mov	r3, r0
 800296c:	ee00 3a90 	vmov	s1, r3
 8002970:	eeb0 0a48 	vmov.f32	s0, s16
 8002974:	4837      	ldr	r0, [pc, #220]	; (8002a54 <Bimanual_MotorCtrl+0x610>)
 8002976:	f001 f819 	bl	80039ac <update_rtob>

	update_dob(&dob2, Ia_ref2,
 800297a:	4b30      	ldr	r3, [pc, #192]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 800297c:	ed93 8a00 	vldr	s16, [r3]
			enc_instance_M2.velocity * 60.0 * RPM_to_Rads_per_sec / 512.0); //  &dob1,  Ia_ref,  velocity
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <Bimanual_MotorCtrl+0x614>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fdaf 	bl	80004e8 <__aeabi_f2d>
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <Bimanual_MotorCtrl+0x604>)
 8002990:	f7fd fe02 	bl	8000598 <__aeabi_dmul>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4614      	mov	r4, r2
 800299a:	461d      	mov	r5, r3
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <Bimanual_MotorCtrl+0x608>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fda1 	bl	80004e8 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f7fd fdf3 	bl	8000598 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 80029c2:	f7fd ff13 	bl	80007ec <__aeabi_ddiv>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
	update_dob(&dob2, Ia_ref2,
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f8a5 	bl	8000b1c <__aeabi_d2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	ee00 3a90 	vmov	s1, r3
 80029d8:	eeb0 0a48 	vmov.f32	s0, s16
 80029dc:	481f      	ldr	r0, [pc, #124]	; (8002a5c <Bimanual_MotorCtrl+0x618>)
 80029de:	f7fe faef 	bl	8000fc0 <update_dob>
	update_rtob(&rtob2, Ia_ref2,
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <Bimanual_MotorCtrl+0x5f8>)
 80029e4:	ed93 8a00 	vldr	s16, [r3]
			enc_instance_M2.velocity * 60.0 * RPM_to_Rads_per_sec / 512.0); // &rtob1, Ia_ref, velocity
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <Bimanual_MotorCtrl+0x614>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	e038      	b.n	8002a60 <Bimanual_MotorCtrl+0x61c>
 80029ee:	bf00      	nop
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000784 	.word	0x20000784
 80029f8:	20000760 	.word	0x20000760
 80029fc:	20000764 	.word	0x20000764
 8002a00:	2000075c 	.word	0x2000075c
 8002a04:	20000004 	.word	0x20000004
 8002a08:	2000068c 	.word	0x2000068c
 8002a0c:	20000778 	.word	0x20000778
 8002a10:	2000077c 	.word	0x2000077c
 8002a14:	20000774 	.word	0x20000774
 8002a18:	2000074c 	.word	0x2000074c
 8002a1c:	20000750 	.word	0x20000750
 8002a20:	20000744 	.word	0x20000744
 8002a24:	20000748 	.word	0x20000748
 8002a28:	200006a4 	.word	0x200006a4
 8002a2c:	20000758 	.word	0x20000758
 8002a30:	20000014 	.word	0x20000014
 8002a34:	20000754 	.word	0x20000754
 8002a38:	20000770 	.word	0x20000770
 8002a3c:	2000076c 	.word	0x2000076c
 8002a40:	2000001c 	.word	0x2000001c
 8002a44:	2000066c 	.word	0x2000066c
 8002a48:	404e0000 	.word	0x404e0000
 8002a4c:	20000dd4 	.word	0x20000dd4
 8002a50:	200006bc 	.word	0x200006bc
 8002a54:	200006d0 	.word	0x200006d0
 8002a58:	2000067c 	.word	0x2000067c
 8002a5c:	200006ec 	.word	0x200006ec
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd41 	bl	80004e8 <__aeabi_f2d>
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	4b77      	ldr	r3, [pc, #476]	; (8002c48 <Bimanual_MotorCtrl+0x804>)
 8002a6c:	f7fd fd94 	bl	8000598 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <Bimanual_MotorCtrl+0x808>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd33 	bl	80004e8 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fd85 	bl	8000598 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4610      	mov	r0, r2
 8002a94:	4619      	mov	r1, r3
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8002a9e:	f7fd fea5 	bl	80007ec <__aeabi_ddiv>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
	update_rtob(&rtob2, Ia_ref2,
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f837 	bl	8000b1c <__aeabi_d2f>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	ee00 3a90 	vmov	s1, r3
 8002ab4:	eeb0 0a48 	vmov.f32	s0, s16
 8002ab8:	4865      	ldr	r0, [pc, #404]	; (8002c50 <Bimanual_MotorCtrl+0x80c>)
 8002aba:	f000 ff77 	bl	80039ac <update_rtob>

	if (IsDown) {
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <Bimanual_MotorCtrl+0x810>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d026      	beq.n	8002b14 <Bimanual_MotorCtrl+0x6d0>
		if (Ia_ref1 < 0) {
 8002ac6:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <Bimanual_MotorCtrl+0x814>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	d505      	bpl.n	8002ae2 <Bimanual_MotorCtrl+0x69e>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2110      	movs	r1, #16
 8002ada:	4860      	ldr	r0, [pc, #384]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002adc:	f001 fe5e 	bl	800479c <HAL_GPIO_WritePin>
 8002ae0:	e004      	b.n	8002aec <Bimanual_MotorCtrl+0x6a8>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2110      	movs	r1, #16
 8002ae6:	485d      	ldr	r0, [pc, #372]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002ae8:	f001 fe58 	bl	800479c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 < 0) {
 8002aec:	4b5c      	ldr	r3, [pc, #368]	; (8002c60 <Bimanual_MotorCtrl+0x81c>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afa:	d505      	bpl.n	8002b08 <Bimanual_MotorCtrl+0x6c4>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8002afc:	2201      	movs	r2, #1
 8002afe:	2104      	movs	r1, #4
 8002b00:	4858      	ldr	r0, [pc, #352]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002b02:	f001 fe4b 	bl	800479c <HAL_GPIO_WritePin>
 8002b06:	e02b      	b.n	8002b60 <Bimanual_MotorCtrl+0x71c>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	4855      	ldr	r0, [pc, #340]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002b0e:	f001 fe45 	bl	800479c <HAL_GPIO_WritePin>
 8002b12:	e025      	b.n	8002b60 <Bimanual_MotorCtrl+0x71c>
					GPIO_PIN_RESET);
		}
	} else {
		if (Ia_ref1 > 0) {
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <Bimanual_MotorCtrl+0x814>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b22:	dd05      	ble.n	8002b30 <Bimanual_MotorCtrl+0x6ec>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8002b24:	2201      	movs	r2, #1
 8002b26:	2110      	movs	r1, #16
 8002b28:	484c      	ldr	r0, [pc, #304]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002b2a:	f001 fe37 	bl	800479c <HAL_GPIO_WritePin>
 8002b2e:	e004      	b.n	8002b3a <Bimanual_MotorCtrl+0x6f6>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8002b30:	2200      	movs	r2, #0
 8002b32:	2110      	movs	r1, #16
 8002b34:	4849      	ldr	r0, [pc, #292]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002b36:	f001 fe31 	bl	800479c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 > 0) {
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <Bimanual_MotorCtrl+0x81c>)
 8002b3c:	edd3 7a00 	vldr	s15, [r3]
 8002b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	dd05      	ble.n	8002b56 <Bimanual_MotorCtrl+0x712>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2104      	movs	r1, #4
 8002b4e:	4845      	ldr	r0, [pc, #276]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002b50:	f001 fe24 	bl	800479c <HAL_GPIO_WritePin>
 8002b54:	e004      	b.n	8002b60 <Bimanual_MotorCtrl+0x71c>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8002b56:	2200      	movs	r2, #0
 8002b58:	2104      	movs	r1, #4
 8002b5a:	4842      	ldr	r0, [pc, #264]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002b5c:	f001 fe1e 	bl	800479c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}
	}

	volt1 = fabs(Ia_ref1 * 5000 / I_max);
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <Bimanual_MotorCtrl+0x814>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002c68 <Bimanual_MotorCtrl+0x824>
 8002b6a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	; (8002c6c <Bimanual_MotorCtrl+0x828>)
 8002b70:	ed93 7a00 	vldr	s14, [r3]
 8002b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b78:	eef0 7ae7 	vabs.f32	s15, s15
 8002b7c:	4b3c      	ldr	r3, [pc, #240]	; (8002c70 <Bimanual_MotorCtrl+0x82c>)
 8002b7e:	edc3 7a00 	vstr	s15, [r3]
	volt2 = fabs(Ia_ref1 * 5000 / I_max);
 8002b82:	4b35      	ldr	r3, [pc, #212]	; (8002c58 <Bimanual_MotorCtrl+0x814>)
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002c68 <Bimanual_MotorCtrl+0x824>
 8002b8c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <Bimanual_MotorCtrl+0x828>)
 8002b92:	ed93 7a00 	vldr	s14, [r3]
 8002b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b9a:	eef0 7ae7 	vabs.f32	s15, s15
 8002b9e:	4b35      	ldr	r3, [pc, #212]	; (8002c74 <Bimanual_MotorCtrl+0x830>)
 8002ba0:	edc3 7a00 	vstr	s15, [r3]

	if (motor1_vel < 0) {
 8002ba4:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <Bimanual_MotorCtrl+0x834>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb2:	d50a      	bpl.n	8002bca <Bimanual_MotorCtrl+0x786>
		HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2120      	movs	r1, #32
 8002bb8:	4828      	ldr	r0, [pc, #160]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002bba:	f001 fdef 	bl	800479c <HAL_GPIO_WritePin>
				GPIO_PIN_SET); // M_Driver1_Enabl
		HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER2_ENABLE_Pin,
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2108      	movs	r1, #8
 8002bc2:	4828      	ldr	r0, [pc, #160]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002bc4:	f001 fdea 	bl	800479c <HAL_GPIO_WritePin>
 8002bc8:	e004      	b.n	8002bd4 <Bimanual_MotorCtrl+0x790>
				GPIO_PIN_SET); // M_Driver1_Enable
	} else {
		HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2120      	movs	r1, #32
 8002bce:	4823      	ldr	r0, [pc, #140]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002bd0:	f001 fde4 	bl	800479c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET); // M_Driver1_Enabl
		//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET); // M_Driver1_Enable
	}

	if (fabs(motor1_pos - motor2_pos) < 1.0) {
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <Bimanual_MotorCtrl+0x838>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b29      	ldr	r3, [pc, #164]	; (8002c80 <Bimanual_MotorCtrl+0x83c>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	eef0 7ae7 	vabs.f32	s15, s15
 8002be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	d505      	bpl.n	8002c02 <Bimanual_MotorCtrl+0x7be>
		HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2120      	movs	r1, #32
 8002bfa:	481a      	ldr	r0, [pc, #104]	; (8002c64 <Bimanual_MotorCtrl+0x820>)
 8002bfc:	f001 fdce 	bl	800479c <HAL_GPIO_WritePin>
 8002c00:	e004      	b.n	8002c0c <Bimanual_MotorCtrl+0x7c8>
				GPIO_PIN_RESET); // M_Driver1_Enable
	} else {
		HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8002c02:	2201      	movs	r2, #1
 8002c04:	2120      	movs	r1, #32
 8002c06:	4815      	ldr	r0, [pc, #84]	; (8002c5c <Bimanual_MotorCtrl+0x818>)
 8002c08:	f001 fdc8 	bl	800479c <HAL_GPIO_WritePin>
				GPIO_PIN_SET); // M_Driver1_Enable
	}

	outputVoltage(&dac1, (uint16_t) volt1);
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <Bimanual_MotorCtrl+0x82c>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c16:	ee17 3a90 	vmov	r3, s15
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4819      	ldr	r0, [pc, #100]	; (8002c84 <Bimanual_MotorCtrl+0x840>)
 8002c20:	f7fe f968 	bl	8000ef4 <outputVoltage>
	outputVoltage(&dac2, (uint16_t) volt2);
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <Bimanual_MotorCtrl+0x830>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c2e:	ee17 3a90 	vmov	r3, s15
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	4814      	ldr	r0, [pc, #80]	; (8002c88 <Bimanual_MotorCtrl+0x844>)
 8002c38:	f7fe f95c 	bl	8000ef4 <outputVoltage>
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	ecbd 8b02 	vpop	{d8}
 8002c44:	bdb0      	pop	{r4, r5, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	404e0000 	.word	0x404e0000
 8002c4c:	20000dd4 	.word	0x20000dd4
 8002c50:	20000700 	.word	0x20000700
 8002c54:	20000de5 	.word	0x20000de5
 8002c58:	20000754 	.word	0x20000754
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	2000076c 	.word	0x2000076c
 8002c64:	40020000 	.word	0x40020000
 8002c68:	459c4000 	.word	0x459c4000
 8002c6c:	2000001c 	.word	0x2000001c
 8002c70:	20000768 	.word	0x20000768
 8002c74:	20000780 	.word	0x20000780
 8002c78:	20000744 	.word	0x20000744
 8002c7c:	2000074c 	.word	0x2000074c
 8002c80:	20000750 	.word	0x20000750
 8002c84:	2000071c 	.word	0x2000071c
 8002c88:	20000728 	.word	0x20000728

08002c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c8c:	b5b0      	push	{r4, r5, r7, lr}
 8002c8e:	b08a      	sub	sp, #40	; 0x28
 8002c90:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c92:	f001 fac8 	bl	8004226 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c96:	f000 f965 	bl	8002f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c9a:	f000 fbdd 	bl	8003458 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002c9e:	f000 fbab 	bl	80033f8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8002ca2:	f000 fac9 	bl	8003238 <MX_TIM1_Init>
  MX_I2C1_Init();
 8002ca6:	f000 f9c9 	bl	800303c <MX_I2C1_Init>
  MX_TIM4_Init();
 8002caa:	f000 fb1f 	bl	80032ec <MX_TIM4_Init>
  MX_I2C2_Init();
 8002cae:	f000 fa05 	bl	80030bc <MX_I2C2_Init>
  MX_SPI4_Init();
 8002cb2:	f000 fa83 	bl	80031bc <MX_SPI4_Init>
  MX_FATFS_Init();
 8002cb6:	f005 fa87 	bl	80081c8 <MX_FATFS_Init>
  MX_I2C3_Init();
 8002cba:	f000 fa3f 	bl	800313c <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002cbe:	f000 fb6b 	bl	8003398 <MX_USART2_UART_Init>
	 Create_File("positionVsTorque1.txt");
	 Create_File("positionVsTorque2.txt");
	 Unmount_SD("/");
	 */

	SEM_1 = xSemaphoreCreateBinary();
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f005 fcde 	bl	8008688 <xQueueGenericCreate>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4a77      	ldr	r2, [pc, #476]	; (8002eac <main+0x220>)
 8002cd0:	6013      	str	r3, [r2, #0]

	xTaskCreate(BM_Task, "BM", 128, NULL, 5, &BM_Task_Hnadler);
 8002cd2:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <main+0x224>)
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	4975      	ldr	r1, [pc, #468]	; (8002eb4 <main+0x228>)
 8002ce0:	4875      	ldr	r0, [pc, #468]	; (8002eb8 <main+0x22c>)
 8002ce2:	f005 fd95 	bl	8008810 <xTaskCreate>
	xTaskCreate(INITIALIZATION_Task, "INIT", 128, NULL, 1,
 8002ce6:	4b75      	ldr	r3, [pc, #468]	; (8002ebc <main+0x230>)
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2301      	movs	r3, #1
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	4973      	ldr	r1, [pc, #460]	; (8002ec0 <main+0x234>)
 8002cf4:	4873      	ldr	r0, [pc, #460]	; (8002ec4 <main+0x238>)
 8002cf6:	f005 fd8b 	bl	8008810 <xTaskCreate>
			&INITIALIZATION_Task_Hnadler);
	xTaskCreate(SDCARD_Task, "SD", 128, NULL, 3, &SDCARD_Task_Hnadler);
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <main+0x23c>)
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2303      	movs	r3, #3
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	2300      	movs	r3, #0
 8002d04:	2280      	movs	r2, #128	; 0x80
 8002d06:	4971      	ldr	r1, [pc, #452]	; (8002ecc <main+0x240>)
 8002d08:	4871      	ldr	r0, [pc, #452]	; (8002ed0 <main+0x244>)
 8002d0a:	f005 fd81 	bl	8008810 <xTaskCreate>

//xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask)

// Initialize ADC, encoder, PWM, and set initial parameters
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8002d0e:	213c      	movs	r1, #60	; 0x3c
 8002d10:	4870      	ldr	r0, [pc, #448]	; (8002ed4 <main+0x248>)
 8002d12:	f004 fa1b 	bl	800714c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8002d16:	213c      	movs	r1, #60	; 0x3c
 8002d18:	486f      	ldr	r0, [pc, #444]	; (8002ed8 <main+0x24c>)
 8002d1a:	f004 fa17 	bl	800714c <HAL_TIM_Encoder_Start_IT>
	/*DFRobot_GP8XXX_IIC_begin(&GP8211s_1, &hi2c1, gp8211s, 0x58);
	 DFRobot_GP8XXX_IIC_setDACOutRange(&GP8211s_1, eOutputRange5V);
	 DFRobot_GP8XXX_IIC_begin(&GP8211s_2, &hi2c2, gp8211s, 0x58);
	 DFRobot_GP8XXX_IIC_setDACOutRange(&GP8211s_2, eOutputRange5V);
	 */
	init_DAC(&dac1, &hi2c1, 0xC0, DAC_Ref, 0);
 8002d1e:	f241 3247 	movw	r2, #4935	; 0x1347
 8002d22:	2300      	movs	r3, #0
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4613      	mov	r3, r2
 8002d28:	22c0      	movs	r2, #192	; 0xc0
 8002d2a:	496c      	ldr	r1, [pc, #432]	; (8002edc <main+0x250>)
 8002d2c:	486c      	ldr	r0, [pc, #432]	; (8002ee0 <main+0x254>)
 8002d2e:	f7fe f8c3 	bl	8000eb8 <init_DAC>
	init_DAC(&dac2, &hi2c2, 0xC0, DAC_Ref, 0);
 8002d32:	f241 3247 	movw	r2, #4935	; 0x1347
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	22c0      	movs	r2, #192	; 0xc0
 8002d3e:	4969      	ldr	r1, [pc, #420]	; (8002ee4 <main+0x258>)
 8002d40:	4869      	ldr	r0, [pc, #420]	; (8002ee8 <main+0x25c>)
 8002d42:	f7fe f8b9 	bl	8000eb8 <init_DAC>

	init_encoder(&enc_instance_M1);
 8002d46:	4869      	ldr	r0, [pc, #420]	; (8002eec <main+0x260>)
 8002d48:	f000 fdb0 	bl	80038ac <init_encoder>
//	set_pid_gain(&pid_instance_M1, Kp, Ki, Kd); // set gains

	init_encoder(&enc_instance_M2);
 8002d4c:	4868      	ldr	r0, [pc, #416]	; (8002ef0 <main+0x264>)
 8002d4e:	f000 fdad 	bl	80038ac <init_encoder>
	//set_pid_gain(&pid_instance_M2, Kp, Ki, Kd); // set gains
//set_pid_gain(&pid_instance_M1, 0.25, 0.01, 2.0); // set gains

	set_pid_gain(&pid_instance_M11, 5.0, 0.0, 0.0); // set gains
 8002d52:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8002ef4 <main+0x268>
 8002d56:	eddf 0a67 	vldr	s1, [pc, #412]	; 8002ef4 <main+0x268>
 8002d5a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002d5e:	4866      	ldr	r0, [pc, #408]	; (8002ef8 <main+0x26c>)
 8002d60:	f000 fd01 	bl	8003766 <set_pid_gain>
	set_pid_gain(&pid_instance_M21, 5.0, 0.0, 0.0); // set gains
 8002d64:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8002ef4 <main+0x268>
 8002d68:	eddf 0a62 	vldr	s1, [pc, #392]	; 8002ef4 <main+0x268>
 8002d6c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002d70:	4862      	ldr	r0, [pc, #392]	; (8002efc <main+0x270>)
 8002d72:	f000 fcf8 	bl	8003766 <set_pid_gain>

	J = findJ(IsMale);
 8002d76:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <main+0x274>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff76 	bl	8001c6c <findJ>
 8002d80:	eef0 7a40 	vmov.f32	s15, s0
 8002d84:	4b5f      	ldr	r3, [pc, #380]	; (8002f04 <main+0x278>)
 8002d86:	edc3 7a00 	vstr	s15, [r3]
	J = 0.001;
 8002d8a:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <main+0x278>)
 8002d8c:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <main+0x27c>)
 8002d8e:	601a      	str	r2, [r3, #0]
	G = findG(IsMale);
 8002d90:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <main+0x274>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f87f 	bl	8001e98 <findG>
 8002d9a:	eef0 7a40 	vmov.f32	s15, s0
 8002d9e:	4b5b      	ldr	r3, [pc, #364]	; (8002f0c <main+0x280>)
 8002da0:	edc3 7a00 	vstr	s15, [r3]

	set_dob(&dob1, k_T, J, 50.0); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , G = 50
 8002da4:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <main+0x284>)
 8002da6:	edd3 7a00 	vldr	s15, [r3]
 8002daa:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <main+0x278>)
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8002f14 <main+0x288>
 8002db4:	eef0 0a47 	vmov.f32	s1, s14
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	4856      	ldr	r0, [pc, #344]	; (8002f18 <main+0x28c>)
 8002dbe:	f7fe f8e1 	bl	8000f84 <set_dob>
	set_rtob(&rtob1, k_T, J, 50.0, 0.0129, 0.0003);
 8002dc2:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <main+0x284>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	; (8002f04 <main+0x278>)
 8002dca:	ed93 7a00 	vldr	s14, [r3]
 8002dce:	ed9f 2a53 	vldr	s4, [pc, #332]	; 8002f1c <main+0x290>
 8002dd2:	eddf 1a53 	vldr	s3, [pc, #332]	; 8002f20 <main+0x294>
 8002dd6:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8002f14 <main+0x288>
 8002dda:	eef0 0a47 	vmov.f32	s1, s14
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	4850      	ldr	r0, [pc, #320]	; (8002f24 <main+0x298>)
 8002de4:	f000 fdba 	bl	800395c <set_rtob>

	set_dob(&dob2, k_T, J, 50.0); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , G = 50
 8002de8:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <main+0x284>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	4b45      	ldr	r3, [pc, #276]	; (8002f04 <main+0x278>)
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8002f14 <main+0x288>
 8002df8:	eef0 0a47 	vmov.f32	s1, s14
 8002dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8002e00:	4849      	ldr	r0, [pc, #292]	; (8002f28 <main+0x29c>)
 8002e02:	f7fe f8bf 	bl	8000f84 <set_dob>
	set_rtob(&rtob2, k_T, J, 50.0, 0.0129, 0.0003);
 8002e06:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <main+0x284>)
 8002e08:	edd3 7a00 	vldr	s15, [r3]
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <main+0x278>)
 8002e0e:	ed93 7a00 	vldr	s14, [r3]
 8002e12:	ed9f 2a42 	vldr	s4, [pc, #264]	; 8002f1c <main+0x290>
 8002e16:	eddf 1a42 	vldr	s3, [pc, #264]	; 8002f20 <main+0x294>
 8002e1a:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 8002f14 <main+0x288>
 8002e1e:	eef0 0a47 	vmov.f32	s1, s14
 8002e22:	eeb0 0a67 	vmov.f32	s0, s15
 8002e26:	4841      	ldr	r0, [pc, #260]	; (8002f2c <main+0x2a0>)
 8002e28:	f000 fd98 	bl	800395c <set_rtob>

	RPM_k = (float) 60.0 / (PPR * gear_ratio); // to calculate RPM form ticks/s
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <main+0x2a4>)
 8002e2e:	ed93 7a00 	vldr	s14, [r3]
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <main+0x2a8>)
 8002e34:	edd3 7a00 	vldr	s15, [r3]
 8002e38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e3c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8002f38 <main+0x2ac>
 8002e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e44:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <main+0x2b0>)
 8002e46:	edc3 7a00 	vstr	s15, [r3]
	RPM_to_Rads_per_sec = 2.0 * 3.14 / 60.0; // to calculate rads per sec from rpm
 8002e4a:	4b3d      	ldr	r3, [pc, #244]	; (8002f40 <main+0x2b4>)
 8002e4c:	4a3d      	ldr	r2, [pc, #244]	; (8002f44 <main+0x2b8>)
 8002e4e:	601a      	str	r2, [r3, #0]
	Ticks_to_Deg = 360.0 / (512.0 * 26.0);  // to calculate degrees form ticks
 8002e50:	4b3d      	ldr	r3, [pc, #244]	; (8002f48 <main+0x2bc>)
 8002e52:	4a3e      	ldr	r2, [pc, #248]	; (8002f4c <main+0x2c0>)
 8002e54:	601a      	str	r2, [r3, #0]

	/*********************************** mount sd card ***********************************/

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //BLUE LED
 8002e56:	2200      	movs	r2, #0
 8002e58:	2180      	movs	r1, #128	; 0x80
 8002e5a:	483d      	ldr	r0, [pc, #244]	; (8002f50 <main+0x2c4>)
 8002e5c:	f001 fc9e 	bl	800479c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); //M_Driver1_Enable
 8002e60:	2200      	movs	r2, #0
 8002e62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e66:	483b      	ldr	r0, [pc, #236]	; (8002f54 <main+0x2c8>)
 8002e68:	f001 fc98 	bl	800479c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //RED LED
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e72:	4837      	ldr	r0, [pc, #220]	; (8002f50 <main+0x2c4>)
 8002e74:	f001 fc92 	bl	800479c <HAL_GPIO_WritePin>

	/*************************/
	Enable = GPIO_PIN_RESET;
 8002e78:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <main+0x2cc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]

	vTaskStartScheduler();
 8002e7e:	f005 fed1 	bl	8008c24 <vTaskStartScheduler>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <main+0x2d0>)
 8002e84:	1d3c      	adds	r4, r7, #4
 8002e86:	461d      	mov	r5, r3
 8002e88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fa77 	bl	800838c <osThreadCreate>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <main+0x2d4>)
 8002ea2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002ea4:	f005 fa6b 	bl	800837e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002ea8:	e7fe      	b.n	8002ea8 <main+0x21c>
 8002eaa:	bf00      	nop
 8002eac:	20000740 	.word	0x20000740
 8002eb0:	20000734 	.word	0x20000734
 8002eb4:	0800ae24 	.word	0x0800ae24
 8002eb8:	08001b11 	.word	0x08001b11
 8002ebc:	2000073c 	.word	0x2000073c
 8002ec0:	0800ae28 	.word	0x0800ae28
 8002ec4:	08001ad1 	.word	0x08001ad1
 8002ec8:	20000738 	.word	0x20000738
 8002ecc:	0800ae30 	.word	0x0800ae30
 8002ed0:	08001ab1 	.word	0x08001ab1
 8002ed4:	200004c0 	.word	0x200004c0
 8002ed8:	2000050c 	.word	0x2000050c
 8002edc:	20000360 	.word	0x20000360
 8002ee0:	2000071c 	.word	0x2000071c
 8002ee4:	200003b4 	.word	0x200003b4
 8002ee8:	20000728 	.word	0x20000728
 8002eec:	2000066c 	.word	0x2000066c
 8002ef0:	2000067c 	.word	0x2000067c
 8002ef4:	00000000 	.word	0x00000000
 8002ef8:	2000068c 	.word	0x2000068c
 8002efc:	200006a4 	.word	0x200006a4
 8002f00:	20000de6 	.word	0x20000de6
 8002f04:	20000de8 	.word	0x20000de8
 8002f08:	3a83126f 	.word	0x3a83126f
 8002f0c:	20000df0 	.word	0x20000df0
 8002f10:	20000014 	.word	0x20000014
 8002f14:	42480000 	.word	0x42480000
 8002f18:	200006bc 	.word	0x200006bc
 8002f1c:	399d4952 	.word	0x399d4952
 8002f20:	3c535a86 	.word	0x3c535a86
 8002f24:	200006d0 	.word	0x200006d0
 8002f28:	200006ec 	.word	0x200006ec
 8002f2c:	20000700 	.word	0x20000700
 8002f30:	2000000c 	.word	0x2000000c
 8002f34:	20000010 	.word	0x20000010
 8002f38:	42700000 	.word	0x42700000
 8002f3c:	20000dd0 	.word	0x20000dd0
 8002f40:	20000dd4 	.word	0x20000dd4
 8002f44:	3dd65b7a 	.word	0x3dd65b7a
 8002f48:	20000dd8 	.word	0x20000dd8
 8002f4c:	3cdd89d9 	.word	0x3cdd89d9
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40021000 	.word	0x40021000
 8002f58:	20000020 	.word	0x20000020
 8002f5c:	0800ae40 	.word	0x0800ae40
 8002f60:	20000668 	.word	0x20000668

08002f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b094      	sub	sp, #80	; 0x50
 8002f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f6a:	f107 0320 	add.w	r3, r7, #32
 8002f6e:	2230      	movs	r2, #48	; 0x30
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f006 fe1e 	bl	8009bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f88:	4b2a      	ldr	r3, [pc, #168]	; (8003034 <SystemClock_Config+0xd0>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	4a29      	ldr	r2, [pc, #164]	; (8003034 <SystemClock_Config+0xd0>)
 8002f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	; 0x40
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <SystemClock_Config+0xd0>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	60bb      	str	r3, [r7, #8]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	4b25      	ldr	r3, [pc, #148]	; (8003038 <SystemClock_Config+0xd4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a24      	ldr	r2, [pc, #144]	; (8003038 <SystemClock_Config+0xd4>)
 8002fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b22      	ldr	r3, [pc, #136]	; (8003038 <SystemClock_Config+0xd4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002fcc:	2304      	movs	r3, #4
 8002fce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002fd0:	23d8      	movs	r3, #216	; 0xd8
 8002fd2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fdc:	f107 0320 	add.w	r3, r7, #32
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f002 f885 	bl	80050f0 <HAL_RCC_OscConfig>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002fec:	f000 fbb6 	bl	800375c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002ff0:	f002 f82e 	bl	8005050 <HAL_PWREx_EnableOverDrive>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002ffa:	f000 fbaf 	bl	800375c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ffe:	230f      	movs	r3, #15
 8003000:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003002:	2302      	movs	r3, #2
 8003004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800300a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800300e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	2107      	movs	r1, #7
 800301c:	4618      	mov	r0, r3
 800301e:	f002 fb0b 	bl	8005638 <HAL_RCC_ClockConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003028:	f000 fb98 	bl	800375c <Error_Handler>
  }
}
 800302c:	bf00      	nop
 800302e:	3750      	adds	r7, #80	; 0x50
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000

0800303c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003040:	4b1b      	ldr	r3, [pc, #108]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <MX_I2C1_Init+0x78>)
 8003044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8003046:	4b1a      	ldr	r3, [pc, #104]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003048:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <MX_I2C1_Init+0x7c>)
 800304a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800304c:	4b18      	ldr	r3, [pc, #96]	; (80030b0 <MX_I2C1_Init+0x74>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003052:	4b17      	ldr	r3, [pc, #92]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003054:	2201      	movs	r2, #1
 8003056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003058:	4b15      	ldr	r3, [pc, #84]	; (80030b0 <MX_I2C1_Init+0x74>)
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003060:	2200      	movs	r2, #0
 8003062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003066:	2200      	movs	r2, #0
 8003068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <MX_I2C1_Init+0x74>)
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003070:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003076:	480e      	ldr	r0, [pc, #56]	; (80030b0 <MX_I2C1_Init+0x74>)
 8003078:	f001 fbdc 	bl	8004834 <HAL_I2C_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003082:	f000 fb6b 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003086:	2100      	movs	r1, #0
 8003088:	4809      	ldr	r0, [pc, #36]	; (80030b0 <MX_I2C1_Init+0x74>)
 800308a:	f001 ff49 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003094:	f000 fb62 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003098:	2100      	movs	r1, #0
 800309a:	4805      	ldr	r0, [pc, #20]	; (80030b0 <MX_I2C1_Init+0x74>)
 800309c:	f001 ff8b 	bl	8004fb6 <HAL_I2CEx_ConfigDigitalFilter>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80030a6:	f000 fb59 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000360 	.word	0x20000360
 80030b4:	40005400 	.word	0x40005400
 80030b8:	20404768 	.word	0x20404768

080030bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <MX_I2C2_Init+0x74>)
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <MX_I2C2_Init+0x78>)
 80030c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80030c6:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <MX_I2C2_Init+0x74>)
 80030c8:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <MX_I2C2_Init+0x7c>)
 80030ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <MX_I2C2_Init+0x74>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <MX_I2C2_Init+0x74>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030d8:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_I2C2_Init+0x74>)
 80030da:	2200      	movs	r2, #0
 80030dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80030de:	4b14      	ldr	r3, [pc, #80]	; (8003130 <MX_I2C2_Init+0x74>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030e4:	4b12      	ldr	r3, [pc, #72]	; (8003130 <MX_I2C2_Init+0x74>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030ea:	4b11      	ldr	r3, [pc, #68]	; (8003130 <MX_I2C2_Init+0x74>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030f0:	4b0f      	ldr	r3, [pc, #60]	; (8003130 <MX_I2C2_Init+0x74>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80030f6:	480e      	ldr	r0, [pc, #56]	; (8003130 <MX_I2C2_Init+0x74>)
 80030f8:	f001 fb9c 	bl	8004834 <HAL_I2C_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003102:	f000 fb2b 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003106:	2100      	movs	r1, #0
 8003108:	4809      	ldr	r0, [pc, #36]	; (8003130 <MX_I2C2_Init+0x74>)
 800310a:	f001 ff09 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003114:	f000 fb22 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003118:	2100      	movs	r1, #0
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_I2C2_Init+0x74>)
 800311c:	f001 ff4b 	bl	8004fb6 <HAL_I2CEx_ConfigDigitalFilter>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003126:	f000 fb19 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	200003b4 	.word	0x200003b4
 8003134:	40005800 	.word	0x40005800
 8003138:	20404768 	.word	0x20404768

0800313c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003140:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <MX_I2C3_Init+0x78>)
 8003144:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8003146:	4b1a      	ldr	r3, [pc, #104]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003148:	4a1b      	ldr	r2, [pc, #108]	; (80031b8 <MX_I2C3_Init+0x7c>)
 800314a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800314c:	4b18      	ldr	r3, [pc, #96]	; (80031b0 <MX_I2C3_Init+0x74>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003152:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003154:	2201      	movs	r2, #1
 8003156:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003158:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <MX_I2C3_Init+0x74>)
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800315e:	4b14      	ldr	r3, [pc, #80]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <MX_I2C3_Init+0x74>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003170:	4b0f      	ldr	r3, [pc, #60]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003176:	480e      	ldr	r0, [pc, #56]	; (80031b0 <MX_I2C3_Init+0x74>)
 8003178:	f001 fb5c 	bl	8004834 <HAL_I2C_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003182:	f000 faeb 	bl	800375c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003186:	2100      	movs	r1, #0
 8003188:	4809      	ldr	r0, [pc, #36]	; (80031b0 <MX_I2C3_Init+0x74>)
 800318a:	f001 fec9 	bl	8004f20 <HAL_I2CEx_ConfigAnalogFilter>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003194:	f000 fae2 	bl	800375c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003198:	2100      	movs	r1, #0
 800319a:	4805      	ldr	r0, [pc, #20]	; (80031b0 <MX_I2C3_Init+0x74>)
 800319c:	f001 ff0b 	bl	8004fb6 <HAL_I2CEx_ConfigDigitalFilter>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80031a6:	f000 fad9 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	20000408 	.word	0x20000408
 80031b4:	40005c00 	.word	0x40005c00
 80031b8:	20404768 	.word	0x20404768

080031bc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <MX_SPI4_Init+0x74>)
 80031c2:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <MX_SPI4_Init+0x78>)
 80031c4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80031c6:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <MX_SPI4_Init+0x74>)
 80031c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031cc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <MX_SPI4_Init+0x74>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <MX_SPI4_Init+0x74>)
 80031d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031da:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MX_SPI4_Init+0x74>)
 80031de:	2200      	movs	r2, #0
 80031e0:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <MX_SPI4_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <MX_SPI4_Init+0x74>)
 80031ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ee:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <MX_SPI4_Init+0x74>)
 80031f2:	2228      	movs	r2, #40	; 0x28
 80031f4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <MX_SPI4_Init+0x74>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <MX_SPI4_Init+0x74>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <MX_SPI4_Init+0x74>)
 8003204:	2200      	movs	r2, #0
 8003206:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <MX_SPI4_Init+0x74>)
 800320a:	2207      	movs	r2, #7
 800320c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <MX_SPI4_Init+0x74>)
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <MX_SPI4_Init+0x74>)
 8003216:	2208      	movs	r2, #8
 8003218:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800321a:	4805      	ldr	r0, [pc, #20]	; (8003230 <MX_SPI4_Init+0x74>)
 800321c:	f003 f854 	bl	80062c8 <HAL_SPI_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8003226:	f000 fa99 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	2000045c 	.word	0x2000045c
 8003234:	40013400 	.word	0x40013400

08003238 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800323e:	f107 030c 	add.w	r3, r7, #12
 8003242:	2224      	movs	r2, #36	; 0x24
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f006 fcb4 	bl	8009bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800324c:	463b      	mov	r3, r7
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <MX_TIM1_Init+0xac>)
 8003258:	4a23      	ldr	r2, [pc, #140]	; (80032e8 <MX_TIM1_Init+0xb0>)
 800325a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <MX_TIM1_Init+0xac>)
 800325e:	2200      	movs	r2, #0
 8003260:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <MX_TIM1_Init+0xac>)
 8003264:	2200      	movs	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003268:	4b1e      	ldr	r3, [pc, #120]	; (80032e4 <MX_TIM1_Init+0xac>)
 800326a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003270:	4b1c      	ldr	r3, [pc, #112]	; (80032e4 <MX_TIM1_Init+0xac>)
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <MX_TIM1_Init+0xac>)
 8003278:	2200      	movs	r2, #0
 800327a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <MX_TIM1_Init+0xac>)
 800327e:	2200      	movs	r2, #0
 8003280:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003282:	2303      	movs	r3, #3
 8003284:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003286:	2302      	movs	r3, #2
 8003288:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800328a:	2301      	movs	r3, #1
 800328c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003296:	2302      	movs	r3, #2
 8003298:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800329a:	2301      	movs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800329e:	2300      	movs	r3, #0
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80032a6:	f107 030c 	add.w	r3, r7, #12
 80032aa:	4619      	mov	r1, r3
 80032ac:	480d      	ldr	r0, [pc, #52]	; (80032e4 <MX_TIM1_Init+0xac>)
 80032ae:	f003 fea7 	bl	8007000 <HAL_TIM_Encoder_Init>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80032b8:	f000 fa50 	bl	800375c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032bc:	2300      	movs	r3, #0
 80032be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032c8:	463b      	mov	r3, r7
 80032ca:	4619      	mov	r1, r3
 80032cc:	4805      	ldr	r0, [pc, #20]	; (80032e4 <MX_TIM1_Init+0xac>)
 80032ce:	f004 f9f9 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80032d8:	f000 fa40 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032dc:	bf00      	nop
 80032de:	3730      	adds	r7, #48	; 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200004c0 	.word	0x200004c0
 80032e8:	40010000 	.word	0x40010000

080032ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	2224      	movs	r2, #36	; 0x24
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fc5a 	bl	8009bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003300:	463b      	mov	r3, r7
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800330a:	4b21      	ldr	r3, [pc, #132]	; (8003390 <MX_TIM4_Init+0xa4>)
 800330c:	4a21      	ldr	r2, [pc, #132]	; (8003394 <MX_TIM4_Init+0xa8>)
 800330e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003310:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <MX_TIM4_Init+0xa4>)
 8003312:	2200      	movs	r2, #0
 8003314:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	4b1e      	ldr	r3, [pc, #120]	; (8003390 <MX_TIM4_Init+0xa4>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <MX_TIM4_Init+0xa4>)
 800331e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003322:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003324:	4b1a      	ldr	r3, [pc, #104]	; (8003390 <MX_TIM4_Init+0xa4>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <MX_TIM4_Init+0xa4>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003330:	2303      	movs	r3, #3
 8003332:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003334:	2302      	movs	r3, #2
 8003336:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003338:	2301      	movs	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003344:	2302      	movs	r3, #2
 8003346:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003348:	2301      	movs	r3, #1
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003354:	f107 030c 	add.w	r3, r7, #12
 8003358:	4619      	mov	r1, r3
 800335a:	480d      	ldr	r0, [pc, #52]	; (8003390 <MX_TIM4_Init+0xa4>)
 800335c:	f003 fe50 	bl	8007000 <HAL_TIM_Encoder_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003366:	f000 f9f9 	bl	800375c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003372:	463b      	mov	r3, r7
 8003374:	4619      	mov	r1, r3
 8003376:	4806      	ldr	r0, [pc, #24]	; (8003390 <MX_TIM4_Init+0xa4>)
 8003378:	f004 f9a4 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003382:	f000 f9eb 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	3730      	adds	r7, #48	; 0x30
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000050c 	.word	0x2000050c
 8003394:	40000800 	.word	0x40000800

08003398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <MX_USART2_UART_Init+0x5c>)
 80033a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033be:	220c      	movs	r2, #12
 80033c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033da:	4805      	ldr	r0, [pc, #20]	; (80033f0 <MX_USART2_UART_Init+0x58>)
 80033dc:	f004 fa1e 	bl	800781c <HAL_UART_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033e6:	f000 f9b9 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000558 	.word	0x20000558
 80033f4:	40004400 	.word	0x40004400

080033f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <MX_USART3_UART_Init+0x58>)
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <MX_USART3_UART_Init+0x5c>)
 8003400:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003408:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <MX_USART3_UART_Init+0x58>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003410:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003412:	2200      	movs	r2, #0
 8003414:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003416:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <MX_USART3_UART_Init+0x58>)
 800341e:	220c      	movs	r2, #12
 8003420:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <MX_USART3_UART_Init+0x58>)
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800342e:	4b08      	ldr	r3, [pc, #32]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003430:	2200      	movs	r2, #0
 8003432:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003434:	4b06      	ldr	r3, [pc, #24]	; (8003450 <MX_USART3_UART_Init+0x58>)
 8003436:	2200      	movs	r2, #0
 8003438:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800343a:	4805      	ldr	r0, [pc, #20]	; (8003450 <MX_USART3_UART_Init+0x58>)
 800343c:	f004 f9ee 	bl	800781c <HAL_UART_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003446:	f000 f989 	bl	800375c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200005e0 	.word	0x200005e0
 8003454:	40004800 	.word	0x40004800

08003458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
 800346c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800346e:	4ba7      	ldr	r3, [pc, #668]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4aa6      	ldr	r2, [pc, #664]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003474:	f043 0310 	orr.w	r3, r3, #16
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4ba4      	ldr	r3, [pc, #656]	; (800370c <MX_GPIO_Init+0x2b4>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	623b      	str	r3, [r7, #32]
 8003484:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	4ba1      	ldr	r3, [pc, #644]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	4aa0      	ldr	r2, [pc, #640]	; (800370c <MX_GPIO_Init+0x2b4>)
 800348c:	f043 0304 	orr.w	r3, r3, #4
 8003490:	6313      	str	r3, [r2, #48]	; 0x30
 8003492:	4b9e      	ldr	r3, [pc, #632]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800349e:	4b9b      	ldr	r3, [pc, #620]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a9a      	ldr	r2, [pc, #616]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b98      	ldr	r3, [pc, #608]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80034b6:	4b95      	ldr	r3, [pc, #596]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a94      	ldr	r2, [pc, #592]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b92      	ldr	r3, [pc, #584]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ca:	617b      	str	r3, [r7, #20]
 80034cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	4b8f      	ldr	r3, [pc, #572]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a8e      	ldr	r2, [pc, #568]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b8c      	ldr	r3, [pc, #560]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	4a88      	ldr	r2, [pc, #544]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034ec:	f043 0302 	orr.w	r3, r3, #2
 80034f0:	6313      	str	r3, [r2, #48]	; 0x30
 80034f2:	4b86      	ldr	r3, [pc, #536]	; (800370c <MX_GPIO_Init+0x2b4>)
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034fe:	4b83      	ldr	r3, [pc, #524]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a82      	ldr	r2, [pc, #520]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003504:	f043 0308 	orr.w	r3, r3, #8
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b80      	ldr	r3, [pc, #512]	; (800370c <MX_GPIO_Init+0x2b4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	60bb      	str	r3, [r7, #8]
 8003514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003516:	4b7d      	ldr	r3, [pc, #500]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a7c      	ldr	r2, [pc, #496]	; (800370c <MX_GPIO_Init+0x2b4>)
 800351c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b7a      	ldr	r3, [pc, #488]	; (800370c <MX_GPIO_Init+0x2b4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, __Pin|SD_Indication_Pin|SD_Writing_Indicator_Pin, GPIO_PIN_RESET);
 800352e:	2200      	movs	r2, #0
 8003530:	f244 2108 	movw	r1, #16904	; 0x4208
 8003534:	4876      	ldr	r0, [pc, #472]	; (8003710 <MX_GPIO_Init+0x2b8>)
 8003536:	f001 f931 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR2_DIREC_Pin|M_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);
 800353a:	2200      	movs	r2, #0
 800353c:	210c      	movs	r1, #12
 800353e:	4875      	ldr	r0, [pc, #468]	; (8003714 <MX_GPIO_Init+0x2bc>)
 8003540:	f001 f92c 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Error_Indication_2_GPIO_Port, Error_Indication_2_Pin, GPIO_PIN_RESET);
 8003544:	2200      	movs	r2, #0
 8003546:	2120      	movs	r1, #32
 8003548:	4873      	ldr	r0, [pc, #460]	; (8003718 <MX_GPIO_Init+0x2c0>)
 800354a:	f001 f927 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_SC_LD1_Pin|Error_Indication_1_Pin|For_Testing_Pin|LD3_Pin
 800354e:	2200      	movs	r2, #0
 8003550:	f245 01b5 	movw	r1, #20661	; 0x50b5
 8003554:	4871      	ldr	r0, [pc, #452]	; (800371c <MX_GPIO_Init+0x2c4>)
 8003556:	f001 f921 	bl	800479c <HAL_GPIO_WritePin>
                          |MOTOR1_DIREC_Pin|M_DRIVER1_ENABLE_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003560:	486f      	ldr	r0, [pc, #444]	; (8003720 <MX_GPIO_Init+0x2c8>)
 8003562:	f001 f91b 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NodeMCU_CS_GPIO_Port, NodeMCU_CS_Pin, GPIO_PIN_SET);
 8003566:	2201      	movs	r2, #1
 8003568:	2101      	movs	r1, #1
 800356a:	486e      	ldr	r0, [pc, #440]	; (8003724 <MX_GPIO_Init+0x2cc>)
 800356c:	f001 f916 	bl	800479c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8003570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	4864      	ldr	r0, [pc, #400]	; (8003718 <MX_GPIO_Init+0x2c0>)
 8003588:	f000 ff5c 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : __Pin SD_Indication_Pin SD_Writing_Indicator_Pin */
  GPIO_InitStruct.Pin = __Pin|SD_Indication_Pin|SD_Writing_Indicator_Pin;
 800358c:	f244 2308 	movw	r3, #16904	; 0x4208
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003592:	2301      	movs	r3, #1
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359a:	2300      	movs	r3, #0
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800359e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a2:	4619      	mov	r1, r3
 80035a4:	485a      	ldr	r0, [pc, #360]	; (8003710 <MX_GPIO_Init+0x2b8>)
 80035a6:	f000 ff4d 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR2_DIREC_Pin M_DRIVER2_ENABLE_Pin */
  GPIO_InitStruct.Pin = MOTOR2_DIREC_Pin|M_DRIVER2_ENABLE_Pin;
 80035aa:	230c      	movs	r3, #12
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ae:	2301      	movs	r3, #1
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b6:	2300      	movs	r3, #0
 80035b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035be:	4619      	mov	r1, r3
 80035c0:	4854      	ldr	r0, [pc, #336]	; (8003714 <MX_GPIO_Init+0x2bc>)
 80035c2:	f000 ff3f 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Selection_1_Pin Mode_Selection_2_Pin Mode_Selection_3_Pin Limit_SW1_Pin
                           Limit_SW2_Pin */
  GPIO_InitStruct.Pin = Mode_Selection_1_Pin|Mode_Selection_2_Pin|Mode_Selection_3_Pin|Limit_SW1_Pin
 80035c6:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
                          |Limit_SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035cc:	2300      	movs	r3, #0
 80035ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d8:	4619      	mov	r1, r3
 80035da:	484e      	ldr	r0, [pc, #312]	; (8003714 <MX_GPIO_Init+0x2bc>)
 80035dc:	f000 ff32 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : Error_Indication_2_Pin */
  GPIO_InitStruct.Pin = Error_Indication_2_Pin;
 80035e0:	2320      	movs	r3, #32
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Error_Indication_2_GPIO_Port, &GPIO_InitStruct);
 80035f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f4:	4619      	mov	r1, r3
 80035f6:	4848      	ldr	r0, [pc, #288]	; (8003718 <MX_GPIO_Init+0x2c0>)
 80035f8:	f000 ff24 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_SC_LD1_Pin Error_Indication_1_Pin LD3_Pin MOTOR1_DIREC_Pin
                           M_DRIVER1_ENABLE_Pin LD2_Pin */
  GPIO_InitStruct.Pin = SD_SC_LD1_Pin|Error_Indication_1_Pin|LD3_Pin|MOTOR1_DIREC_Pin
 80035fc:	f244 03b5 	movw	r3, #16565	; 0x40b5
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
                          |M_DRIVER1_ENABLE_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003602:	2301      	movs	r3, #1
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003612:	4619      	mov	r1, r3
 8003614:	4841      	ldr	r0, [pc, #260]	; (800371c <MX_GPIO_Init+0x2c4>)
 8003616:	f000 ff15 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : MST_SLV_SHIFT_Pin SD_WRITING_EN_SWITCH_PIN_Pin */
  GPIO_InitStruct.Pin = MST_SLV_SHIFT_Pin|SD_WRITING_EN_SWITCH_PIN_Pin;
 800361a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003620:	2300      	movs	r3, #0
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003624:	2301      	movs	r3, #1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800362c:	4619      	mov	r1, r3
 800362e:	4838      	ldr	r0, [pc, #224]	; (8003710 <MX_GPIO_Init+0x2b8>)
 8003630:	f000 ff08 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_BTN_Pin */
  GPIO_InitStruct.Pin = START_STOP_BTN_Pin;
 8003634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800363a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003640:	2301      	movs	r3, #1
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_STOP_BTN_GPIO_Port, &GPIO_InitStruct);
 8003644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003648:	4619      	mov	r1, r3
 800364a:	4836      	ldr	r0, [pc, #216]	; (8003724 <MX_GPIO_Init+0x2cc>)
 800364c:	f000 fefa 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHANGE_EXERCISE_Pin */
  GPIO_InitStruct.Pin = CHANGE_EXERCISE_Pin;
 8003650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003656:	2300      	movs	r3, #0
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800365a:	2301      	movs	r3, #1
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHANGE_EXERCISE_GPIO_Port, &GPIO_InitStruct);
 800365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003662:	4619      	mov	r1, r3
 8003664:	482d      	ldr	r0, [pc, #180]	; (800371c <MX_GPIO_Init+0x2c4>)
 8003666:	f000 feed 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : For_Testing_Pin */
  GPIO_InitStruct.Pin = For_Testing_Pin;
 800366a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800366e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003670:	2301      	movs	r3, #1
 8003672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003674:	2302      	movs	r3, #2
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003678:	2300      	movs	r3, #0
 800367a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(For_Testing_GPIO_Port, &GPIO_InitStruct);
 800367c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003680:	4619      	mov	r1, r3
 8003682:	4826      	ldr	r0, [pc, #152]	; (800371c <MX_GPIO_Init+0x2c4>)
 8003684:	f000 fede 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|GPIO_PIN_9;
 8003688:	f44f 7310 	mov.w	r3, #576	; 0x240
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368e:	2301      	movs	r3, #1
 8003690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003696:	2300      	movs	r3, #0
 8003698:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800369a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369e:	4619      	mov	r1, r3
 80036a0:	481f      	ldr	r0, [pc, #124]	; (8003720 <MX_GPIO_Init+0x2c8>)
 80036a2:	f000 fecf 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036aa:	2300      	movs	r3, #0
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b6:	4619      	mov	r1, r3
 80036b8:	4819      	ldr	r0, [pc, #100]	; (8003720 <MX_GPIO_Init+0x2c8>)
 80036ba:	f000 fec3 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_SW3_Pin Limit_SW4_Pin */
  GPIO_InitStruct.Pin = Limit_SW3_Pin|Limit_SW4_Pin;
 80036be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80036c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d0:	4619      	mov	r1, r3
 80036d2:	4811      	ldr	r0, [pc, #68]	; (8003718 <MX_GPIO_Init+0x2c0>)
 80036d4:	f000 feb6 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : NodeMCU_CS_Pin */
  GPIO_InitStruct.Pin = NodeMCU_CS_Pin;
 80036d8:	2301      	movs	r3, #1
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036dc:	2301      	movs	r3, #1
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	2300      	movs	r3, #0
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(NodeMCU_CS_GPIO_Port, &GPIO_InitStruct);
 80036e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ec:	4619      	mov	r1, r3
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <MX_GPIO_Init+0x2cc>)
 80036f0:	f000 fea8 	bl	8004444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80036f4:	2200      	movs	r2, #0
 80036f6:	2105      	movs	r1, #5
 80036f8:	2028      	movs	r0, #40	; 0x28
 80036fa:	f000 fe79 	bl	80043f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036fe:	2028      	movs	r0, #40	; 0x28
 8003700:	f000 fe92 	bl	8004428 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003704:	bf00      	nop
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	40021400 	.word	0x40021400
 8003714:	40020000 	.word	0x40020000
 8003718:	40020800 	.word	0x40020800
 800371c:	40020400 	.word	0x40020400
 8003720:	40021800 	.word	0x40021800
 8003724:	40021000 	.word	0x40021000

08003728 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003730:	2001      	movs	r0, #1
 8003732:	f004 fe77 	bl	8008424 <osDelay>
 8003736:	e7fb      	b.n	8003730 <StartDefaultTask+0x8>

08003738 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a04      	ldr	r2, [pc, #16]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d101      	bne.n	800374e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800374a:	f000 fd79 	bl	8004240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40001000 	.word	0x40001000

0800375c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003760:	b672      	cpsid	i
}
 8003762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003764:	e7fe      	b.n	8003764 <Error_Handler+0x8>

08003766 <set_pid_gain>:
#define INTEGRAL_GAIN_MAX 2000000
//#define PID_MAX 2047
#define PID_MAX 5000

// Set PID gains
void set_pid_gain(pid_instance_int16 *pid_instance, float p, float i, float d) {
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003772:	edc7 0a01 	vstr	s1, [r7, #4]
 8003776:	ed87 1a00 	vstr	s2, [r7]
	pid_instance->p_gain = p;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	601a      	str	r2, [r3, #0]
	pid_instance->i_gain = i;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	605a      	str	r2, [r3, #4]
	pid_instance->d_gain = d;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	609a      	str	r2, [r3, #8]

}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <apply_pid>:
	pid_instance->d_gain = 0;
	pid_instance->error_integral = 0;
}

void apply_pid(pid_instance_int16 *pid_instance, float input_error,
		float dt) {
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80037a4:	edc7 0a01 	vstr	s1, [r7, #4]
	pid_instance->error_integral += input_error * dt;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80037ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80037b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	edc3 7a04 	vstr	s15, [r3, #16]

	// Limit integral gain
	if (pid_instance->error_integral > INTEGRAL_GAIN_MAX) {
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80037ca:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800388c <apply_pid+0xf4>
 80037ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	dd02      	ble.n	80037de <apply_pid+0x46>
		pid_instance->error_integral = INTEGRAL_GAIN_MAX;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <apply_pid+0xf8>)
 80037dc:	611a      	str	r2, [r3, #16]
	}

	if (pid_instance->error_integral < -INTEGRAL_GAIN_MAX) {
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80037e4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003894 <apply_pid+0xfc>
 80037e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f0:	d502      	bpl.n	80037f8 <apply_pid+0x60>
		pid_instance->error_integral = -INTEGRAL_GAIN_MAX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <apply_pid+0x100>)
 80037f6:	611a      	str	r2, [r3, #16]
	}

	// Calculate PID output
	pid_instance->output = pid_instance->p_gain * input_error
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	ed93 7a00 	vldr	s14, [r3]
 80037fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003802:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ pid_instance->i_gain * (pid_instance->error_integral)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	edd3 6a01 	vldr	s13, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003816:	ee37 7a27 	vadd.f32	s14, s14, s15
	+ pid_instance->d_gain * (input_error - pid_instance->last_error)/dt;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	edd3 7a03 	vldr	s15, [r3, #12]
 8003826:	ed97 6a02 	vldr	s12, [r7, #8]
 800382a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800382e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8003832:	edd7 6a01 	vldr	s13, [r7, #4]
 8003836:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800383a:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance->output = pid_instance->p_gain * input_error
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	edc3 7a05 	vstr	s15, [r3, #20]

	// Limit PID output
	if (pid_instance->output >= PID_MAX) {
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	edd3 7a05 	vldr	s15, [r3, #20]
 800384a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800389c <apply_pid+0x104>
 800384e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	db02      	blt.n	800385e <apply_pid+0xc6>
		pid_instance->output = PID_MAX;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <apply_pid+0x108>)
 800385c:	615a      	str	r2, [r3, #20]
	}

	if (pid_instance->output <= -PID_MAX) {
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	edd3 7a05 	vldr	s15, [r3, #20]
 8003864:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80038a4 <apply_pid+0x10c>
 8003868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800386c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003870:	d802      	bhi.n	8003878 <apply_pid+0xe0>
		pid_instance->output = -PID_MAX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <apply_pid+0x110>)
 8003876:	615a      	str	r2, [r3, #20]
	}
	pid_instance->last_error = input_error;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	60da      	str	r2, [r3, #12]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	49f42400 	.word	0x49f42400
 8003890:	49f42400 	.word	0x49f42400
 8003894:	c9f42400 	.word	0xc9f42400
 8003898:	c9f42400 	.word	0xc9f42400
 800389c:	459c4000 	.word	0x459c4000
 80038a0:	459c4000 	.word	0x459c4000
 80038a4:	c59c4000 	.word	0xc59c4000
 80038a8:	c59c4000 	.word	0xc59c4000

080038ac <init_encoder>:
#include "motor_encoder.h"
#include "stdio.h"

// Initialize encoder parameters
void init_encoder(encoder_instance *encoder_value) {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	encoder_value->velocity = 0;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]
	encoder_value->position = 0;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	605a      	str	r2, [r3, #4]
	encoder_value->last_counter_value = 0;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <update_encoder>:

// Update encoder values based on timer and quadrature counting
void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim) {
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]

	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim); // Get quadrature count
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	60fb      	str	r3, [r7, #12]

	encoder_value->count = (int16_t) temp_counter;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	b21a      	sxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	819a      	strh	r2, [r3, #12]
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80038f8:	ee07 3a90 	vmov	s15, r3
 80038fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003900:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003954 <update_encoder+0x7c>
 8003904:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (float) dt;
 8003908:	4b13      	ldr	r3, [pc, #76]	; (8003958 <update_encoder+0x80>)
 800390a:	ed93 7a00 	vldr	s14, [r3]
 800390e:	eec6 7a87 	vdiv.f32	s15, s13, s14
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	edc3 7a00 	vstr	s15, [r3]
	encoder_value->position += (float) encoder_value->count / (float) 4.0; //  Update position based on quadrature factor
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	ed93 7a01 	vldr	s14, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003924:	ee07 3a90 	vmov	s15, r3
 8003928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800392c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8003930:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	edc3 7a01 	vstr	s15, [r3, #4]
	__HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	437a0000 	.word	0x437a0000
 8003958:	20000004 	.word	0x20000004

0800395c <set_rtob>:
#include <rtob.h>

void set_rtob(rtob_instance *rtob, float k, float j, float g, float f, float b) {
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6178      	str	r0, [r7, #20]
 8003964:	ed87 0a04 	vstr	s0, [r7, #16]
 8003968:	edc7 0a03 	vstr	s1, [r7, #12]
 800396c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003970:	edc7 1a01 	vstr	s3, [r7, #4]
 8003974:	ed87 2a00 	vstr	s4, [r7]

	rtob->Kt = k;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	601a      	str	r2, [r3, #0]
	rtob->Jm = j;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	605a      	str	r2, [r3, #4]
	rtob->G_dis = g;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	609a      	str	r2, [r3, #8]
	rtob->temp = 0;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f04f 0200 	mov.w	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
	rtob->F = f;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	615a      	str	r2, [r3, #20]
	rtob->B = b;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	619a      	str	r2, [r3, #24]

}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <update_rtob>:

void update_rtob(rtob_instance *rtob, float Ia_ref, float velocity) {
 80039ac:	b5b0      	push	{r4, r5, r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	ed87 0a02 	vstr	s0, [r7, #8]
 80039b8:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_dis * velocity - rtob->F
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	ed93 7a00 	vldr	s14, [r3]
 80039c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80039c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80039d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80039da:	edd7 7a01 	vldr	s15, [r7, #4]
 80039de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80039ec:	ee37 7a67 	vsub.f32	s14, s14, s15
			- rtob->B * velocity;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	edd3 6a06 	vldr	s13, [r3, #24]
 80039f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_dis * velocity - rtob->F
 80039fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a02:	edc7 7a05 	vstr	s15, [r7, #20]
	rtob->temp = rtob->temp + (T_in - rtob->temp) * rtob->G_dis * dt/1000.0; // /dt
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fc fd6c 	bl	80004e8 <__aeabi_f2d>
 8003a10:	4604      	mov	r4, r0
 8003a12:	460d      	mov	r5, r1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <update_rtob+0xec>)
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	ee17 0a90 	vmov	r0, s15
 8003a3a:	f7fc fd55 	bl	80004e8 <__aeabi_f2d>
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <update_rtob+0xf0>)
 8003a44:	f7fc fed2 	bl	80007ec <__aeabi_ddiv>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f7fc fbec 	bl	800022c <__adddf3>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f85e 	bl	8000b1c <__aeabi_d2f>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	60da      	str	r2, [r3, #12]

	rtob->T_extern = rtob->temp - rtob->Jm * rtob->G_dis * velocity;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a78:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	edc3 7a04 	vstr	s15, [r3, #16]

}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bdb0      	pop	{r4, r5, r7, pc}
 8003a96:	bf00      	nop
 8003a98:	20000004 	.word	0x20000004
 8003a9c:	408f4000 	.word	0x408f4000

08003aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_MspInit+0x4c>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a10      	ldr	r2, [pc, #64]	; (8003aec <HAL_MspInit+0x4c>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <HAL_MspInit+0x4c>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	607b      	str	r3, [r7, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_MspInit+0x4c>)
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_MspInit+0x4c>)
 8003ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <HAL_MspInit+0x4c>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	210f      	movs	r1, #15
 8003ada:	f06f 0001 	mvn.w	r0, #1
 8003ade:	f000 fc87 	bl	80043f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023800 	.word	0x40023800

08003af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b0b0      	sub	sp, #192	; 0xc0
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0c:	2284      	movs	r2, #132	; 0x84
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f006 f84f 	bl	8009bb4 <memset>
  if(hi2c->Instance==I2C1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a77      	ldr	r2, [pc, #476]	; (8003cf8 <HAL_I2C_MspInit+0x208>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d13e      	bne.n	8003b9e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 ffd9 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8003b3c:	f7ff fe0e 	bl	800375c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b40:	4b6e      	ldr	r3, [pc, #440]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b44:	4a6d      	ldr	r2, [pc, #436]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b46:	f043 0302 	orr.w	r3, r3, #2
 8003b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4c:	4b6b      	ldr	r3, [pc, #428]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	627b      	str	r3, [r7, #36]	; 0x24
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003b58:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b60:	2312      	movs	r3, #18
 8003b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b72:	2304      	movs	r3, #4
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b78:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4860      	ldr	r0, [pc, #384]	; (8003d00 <HAL_I2C_MspInit+0x210>)
 8003b80:	f000 fc60 	bl	8004444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b84:	4b5d      	ldr	r3, [pc, #372]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	4a5c      	ldr	r2, [pc, #368]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b90:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003b9c:	e0a7      	b.n	8003cee <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_I2C_MspInit+0x214>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d13d      	bne.n	8003c24 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f001 ff95 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8003bc4:	f7ff fdca 	bl	800375c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003bce:	f043 0320 	orr.w	r3, r3, #32
 8003bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd4:	4b49      	ldr	r3, [pc, #292]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003be0:	2303      	movs	r3, #3
 8003be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003be6:	2312      	movs	r3, #18
 8003be8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003bfe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c02:	4619      	mov	r1, r3
 8003c04:	4840      	ldr	r0, [pc, #256]	; (8003d08 <HAL_I2C_MspInit+0x218>)
 8003c06:	f000 fc1d 	bl	8004444 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003c0a:	4b3c      	ldr	r3, [pc, #240]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a3b      	ldr	r2, [pc, #236]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b39      	ldr	r3, [pc, #228]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69bb      	ldr	r3, [r7, #24]
}
 8003c22:	e064      	b.n	8003cee <HAL_I2C_MspInit+0x1fe>
  else if(hi2c->Instance==I2C3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a38      	ldr	r2, [pc, #224]	; (8003d0c <HAL_I2C_MspInit+0x21c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d15f      	bne.n	8003cee <HAL_I2C_MspInit+0x1fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c32:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 ff52 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_I2C_MspInit+0x15e>
      Error_Handler();
 8003c4a:	f7ff fd87 	bl	800375c <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4e:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a2a      	ldr	r2, [pc, #168]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a24      	ldr	r2, [pc, #144]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
 8003c72:	4b22      	ldr	r3, [pc, #136]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c86:	2312      	movs	r3, #18
 8003c88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c98:	2304      	movs	r3, #4
 8003c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	481a      	ldr	r0, [pc, #104]	; (8003d10 <HAL_I2C_MspInit+0x220>)
 8003ca6:	f000 fbcd 	bl	8004444 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cb2:	2312      	movs	r3, #18
 8003cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cca:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4810      	ldr	r0, [pc, #64]	; (8003d14 <HAL_I2C_MspInit+0x224>)
 8003cd2:	f000 fbb7 	bl	8004444 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003cdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_I2C_MspInit+0x20c>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	bf00      	nop
 8003cf0:	37c0      	adds	r7, #192	; 0xc0
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40005400 	.word	0x40005400
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40020400 	.word	0x40020400
 8003d04:	40005800 	.word	0x40005800
 8003d08:	40021400 	.word	0x40021400
 8003d0c:	40005c00 	.word	0x40005c00
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020000 	.word	0x40020000

08003d18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	; 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 0314 	add.w	r3, r7, #20
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a17      	ldr	r2, [pc, #92]	; (8003d94 <HAL_SPI_MspInit+0x7c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d127      	bne.n	8003d8a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003d3a:	4b17      	ldr	r3, [pc, #92]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a16      	ldr	r2, [pc, #88]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b14      	ldr	r3, [pc, #80]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d52:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a10      	ldr	r2, [pc, #64]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d58:	f043 0310 	orr.w	r3, r3, #16
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5e:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <HAL_SPI_MspInit+0x80>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8003d6a:	2364      	movs	r3, #100	; 0x64
 8003d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d76:	2303      	movs	r3, #3
 8003d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003d7a:	2305      	movs	r3, #5
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d7e:	f107 0314 	add.w	r3, r7, #20
 8003d82:	4619      	mov	r1, r3
 8003d84:	4805      	ldr	r0, [pc, #20]	; (8003d9c <HAL_SPI_MspInit+0x84>)
 8003d86:	f000 fb5d 	bl	8004444 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8003d8a:	bf00      	nop
 8003d8c:	3728      	adds	r7, #40	; 0x28
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40013400 	.word	0x40013400
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a33      	ldr	r2, [pc, #204]	; (8003e8c <HAL_TIM_Encoder_MspInit+0xec>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d131      	bne.n	8003e26 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a32      	ldr	r2, [pc, #200]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003de0:	f043 0310 	orr.w	r3, r3, #16
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_ch1_Pin|Encoder1_ch2_Pin;
 8003df2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e00:	2300      	movs	r3, #0
 8003e02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e04:	2301      	movs	r3, #1
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4821      	ldr	r0, [pc, #132]	; (8003e94 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003e10:	f000 fb18 	bl	8004444 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2105      	movs	r1, #5
 8003e18:	201b      	movs	r0, #27
 8003e1a:	f000 fae9 	bl	80043f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003e1e:	201b      	movs	r0, #27
 8003e20:	f000 fb02 	bl	8004428 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003e24:	e02d      	b.n	8003e82 <HAL_TIM_Encoder_MspInit+0xe2>
  else if(htim_encoder->Instance==TIM4)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1b      	ldr	r2, [pc, #108]	; (8003e98 <HAL_TIM_Encoder_MspInit+0xf8>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d128      	bne.n	8003e82 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e30:	4b17      	ldr	r3, [pc, #92]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3c:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	4a10      	ldr	r2, [pc, #64]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e4e:	f043 0308 	orr.w	r3, r3, #8
 8003e52:	6313      	str	r3, [r2, #48]	; 0x30
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_ch1_Pin|Encoder2_ch2_Pin;
 8003e60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e72:	2302      	movs	r3, #2
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4807      	ldr	r0, [pc, #28]	; (8003e9c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003e7e:	f000 fae1 	bl	8004444 <HAL_GPIO_Init>
}
 8003e82:	bf00      	nop
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40000800 	.word	0x40000800
 8003e9c:	40020c00 	.word	0x40020c00

08003ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b0ac      	sub	sp, #176	; 0xb0
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eb8:	f107 0318 	add.w	r3, r7, #24
 8003ebc:	2284      	movs	r2, #132	; 0x84
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f005 fe77 	bl	8009bb4 <memset>
  if(huart->Instance==USART2)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_UART_MspInit+0x134>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d13b      	bne.n	8003f48 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ed8:	f107 0318 	add.w	r3, r7, #24
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fe03 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003ee8:	f7ff fc38 	bl	800375c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eec:	4b3a      	ldr	r3, [pc, #232]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	4a39      	ldr	r2, [pc, #228]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef8:	4b37      	ldr	r3, [pc, #220]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	4a33      	ldr	r2, [pc, #204]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f0a:	f043 0308 	orr.w	r3, r3, #8
 8003f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f10:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003f1c:	2360      	movs	r3, #96	; 0x60
 8003f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f34:	2307      	movs	r3, #7
 8003f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4826      	ldr	r0, [pc, #152]	; (8003fdc <HAL_UART_MspInit+0x13c>)
 8003f42:	f000 fa7f 	bl	8004444 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003f46:	e041      	b.n	8003fcc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_UART_MspInit+0x140>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d13c      	bne.n	8003fcc <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f56:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f5c:	f107 0318 	add.w	r3, r7, #24
 8003f60:	4618      	mov	r0, r3
 8003f62:	f001 fdc1 	bl	8005ae8 <HAL_RCCEx_PeriphCLKConfig>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8003f6c:	f7ff fbf6 	bl	800375c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f70:	4b19      	ldr	r3, [pc, #100]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4a18      	ldr	r2, [pc, #96]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7c:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f88:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f8e:	f043 0308 	orr.w	r3, r3, #8
 8003f92:	6313      	str	r3, [r2, #48]	; 0x30
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_UART_MspInit+0x138>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	60bb      	str	r3, [r7, #8]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003fa0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003fa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fba:	2307      	movs	r3, #7
 8003fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4805      	ldr	r0, [pc, #20]	; (8003fdc <HAL_UART_MspInit+0x13c>)
 8003fc8:	f000 fa3c 	bl	8004444 <HAL_GPIO_Init>
}
 8003fcc:	bf00      	nop
 8003fce:	37b0      	adds	r7, #176	; 0xb0
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020c00 	.word	0x40020c00
 8003fe0:	40004800 	.word	0x40004800

08003fe4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	; 0x38
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <HAL_InitTick+0xe0>)
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <HAL_InitTick+0xe0>)
 8003ffa:	f043 0310 	orr.w	r3, r3, #16
 8003ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8004000:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_InitTick+0xe0>)
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800400c:	f107 0210 	add.w	r2, r7, #16
 8004010:	f107 0314 	add.w	r3, r7, #20
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fd34 	bl	8005a84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004026:	f001 fd05 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 800402a:	6378      	str	r0, [r7, #52]	; 0x34
 800402c:	e004      	b.n	8004038 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800402e:	f001 fd01 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8004032:	4603      	mov	r3, r0
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	4a23      	ldr	r2, [pc, #140]	; (80040c8 <HAL_InitTick+0xe4>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	3b01      	subs	r3, #1
 8004044:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <HAL_InitTick+0xe8>)
 8004048:	4a21      	ldr	r2, [pc, #132]	; (80040d0 <HAL_InitTick+0xec>)
 800404a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <HAL_InitTick+0xe8>)
 800404e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004052:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004054:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <HAL_InitTick+0xe8>)
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <HAL_InitTick+0xe8>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_InitTick+0xe8>)
 8004062:	2200      	movs	r2, #0
 8004064:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_InitTick+0xe8>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800406c:	4817      	ldr	r0, [pc, #92]	; (80040cc <HAL_InitTick+0xe8>)
 800406e:	f002 feed 	bl	8006e4c <HAL_TIM_Base_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004078:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11b      	bne.n	80040b8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004080:	4812      	ldr	r0, [pc, #72]	; (80040cc <HAL_InitTick+0xe8>)
 8004082:	f002 ff45 	bl	8006f10 <HAL_TIM_Base_Start_IT>
 8004086:	4603      	mov	r3, r0
 8004088:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800408c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004090:	2b00      	cmp	r3, #0
 8004092:	d111      	bne.n	80040b8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004094:	2036      	movs	r0, #54	; 0x36
 8004096:	f000 f9c7 	bl	8004428 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b0f      	cmp	r3, #15
 800409e:	d808      	bhi.n	80040b2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80040a0:	2200      	movs	r2, #0
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	2036      	movs	r0, #54	; 0x36
 80040a6:	f000 f9a3 	bl	80043f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_InitTick+0xf0>)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	e002      	b.n	80040b8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80040b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3738      	adds	r7, #56	; 0x38
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	431bde83 	.word	0x431bde83
 80040cc:	20000dfc 	.word	0x20000dfc
 80040d0:	40001000 	.word	0x40001000
 80040d4:	20000030 	.word	0x20000030

080040d8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0

	if (Timer1 > 0)
 80040dc:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <SDTimer_Handler+0x40>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <SDTimer_Handler+0x1c>
		Timer1--;
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <SDTimer_Handler+0x40>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <SDTimer_Handler+0x40>)
 80040f2:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <SDTimer_Handler+0x44>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d006      	beq.n	800410c <SDTimer_Handler+0x34>
		Timer2--;
 80040fe:	4b07      	ldr	r3, [pc, #28]	; (800411c <SDTimer_Handler+0x44>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <SDTimer_Handler+0x44>)
 800410a:	701a      	strb	r2, [r3, #0]
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000e49 	.word	0x20000e49
 800411c:	20000e4a 	.word	0x20000e4a

08004120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004124:	e7fe      	b.n	8004124 <NMI_Handler+0x4>

08004126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800412a:	e7fe      	b.n	800412a <HardFault_Handler+0x4>

0800412c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004130:	e7fe      	b.n	8004130 <MemManage_Handler+0x4>

08004132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004136:	e7fe      	b.n	8004136 <BusFault_Handler+0x4>

08004138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800413c:	e7fe      	b.n	800413c <UsageFault_Handler+0x4>

0800413e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004142:	bf00      	nop
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <TIM1_CC_IRQHandler+0x10>)
 8004152:	f003 f8a9 	bl	80072a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200004c0 	.word	0x200004c0

08004160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8004164:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004168:	f000 fb4c 	bl	8004804 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_STOP_BTN_Pin);
 800416c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004170:	f000 fb48 	bl	8004804 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	bd80      	pop	{r7, pc}

08004178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	FatFsCnt++;
 800417c:	4b0a      	ldr	r3, [pc, #40]	; (80041a8 <TIM6_DAC_IRQHandler+0x30>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3301      	adds	r3, #1
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <TIM6_DAC_IRQHandler+0x30>)
 8004188:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <TIM6_DAC_IRQHandler+0x30>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b09      	cmp	r3, #9
 8004192:	d904      	bls.n	800419e <TIM6_DAC_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <TIM6_DAC_IRQHandler+0x30>)
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800419a:	f7ff ff9d 	bl	80040d8 <SDTimer_Handler>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800419e:	4803      	ldr	r0, [pc, #12]	; (80041ac <TIM6_DAC_IRQHandler+0x34>)
 80041a0:	f003 f882 	bl	80072a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041a4:	bf00      	nop
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20000e48 	.word	0x20000e48
 80041ac:	20000dfc 	.word	0x20000dfc

080041b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <SystemInit+0x20>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <SystemInit+0x20>)
 80041bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800420c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041d8:	480d      	ldr	r0, [pc, #52]	; (8004210 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041da:	490e      	ldr	r1, [pc, #56]	; (8004214 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041dc:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041e0:	e002      	b.n	80041e8 <LoopCopyDataInit>

080041e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041e6:	3304      	adds	r3, #4

080041e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041ec:	d3f9      	bcc.n	80041e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041f0:	4c0b      	ldr	r4, [pc, #44]	; (8004220 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041f4:	e001      	b.n	80041fa <LoopFillZerobss>

080041f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041f8:	3204      	adds	r2, #4

080041fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041fc:	d3fb      	bcc.n	80041f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80041fe:	f7ff ffd7 	bl	80041b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004202:	f005 fd35 	bl	8009c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004206:	f7fe fd41 	bl	8002c8c <main>
  bx  lr    
 800420a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800420c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004214:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8004218:	0800b0a0 	.word	0x0800b0a0
  ldr r2, =_sbss
 800421c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8004220:	20004cf0 	.word	0x20004cf0

08004224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004224:	e7fe      	b.n	8004224 <ADC_IRQHandler>

08004226 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800422a:	2003      	movs	r0, #3
 800422c:	f000 f8d5 	bl	80043da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004230:	200f      	movs	r0, #15
 8004232:	f7ff fed7 	bl	8003fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004236:	f7ff fc33 	bl	8003aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x20>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_IncTick+0x24>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4413      	add	r3, r2
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <HAL_IncTick+0x24>)
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop
 8004260:	20000034 	.word	0x20000034
 8004264:	20000e4c 	.word	0x20000e4c

08004268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return uwTick;
 800426c:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_GetTick+0x14>)
 800426e:	681b      	ldr	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	20000e4c 	.word	0x20000e4c

08004280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <__NVIC_SetPriorityGrouping+0x40>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800429c:	4013      	ands	r3, r2
 800429e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <__NVIC_SetPriorityGrouping+0x44>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ae:	4a04      	ldr	r2, [pc, #16]	; (80042c0 <__NVIC_SetPriorityGrouping+0x40>)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	60d3      	str	r3, [r2, #12]
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	05fa0000 	.word	0x05fa0000

080042c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <__NVIC_GetPriorityGrouping+0x18>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0a1b      	lsrs	r3, r3, #8
 80042d2:	f003 0307 	and.w	r3, r3, #7
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	e000ed00 	.word	0xe000ed00

080042e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	db0b      	blt.n	800430e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	f003 021f 	and.w	r2, r3, #31
 80042fc:	4907      	ldr	r1, [pc, #28]	; (800431c <__NVIC_EnableIRQ+0x38>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2001      	movs	r0, #1
 8004306:	fa00 f202 	lsl.w	r2, r0, r2
 800430a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	e000e100 	.word	0xe000e100

08004320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800432c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004330:	2b00      	cmp	r3, #0
 8004332:	db0a      	blt.n	800434a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	490c      	ldr	r1, [pc, #48]	; (800436c <__NVIC_SetPriority+0x4c>)
 800433a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	440b      	add	r3, r1
 8004344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004348:	e00a      	b.n	8004360 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	4908      	ldr	r1, [pc, #32]	; (8004370 <__NVIC_SetPriority+0x50>)
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	3b04      	subs	r3, #4
 8004358:	0112      	lsls	r2, r2, #4
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	440b      	add	r3, r1
 800435e:	761a      	strb	r2, [r3, #24]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	e000e100 	.word	0xe000e100
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004374:	b480      	push	{r7}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	f1c3 0307 	rsb	r3, r3, #7
 800438e:	2b04      	cmp	r3, #4
 8004390:	bf28      	it	cs
 8004392:	2304      	movcs	r3, #4
 8004394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3304      	adds	r3, #4
 800439a:	2b06      	cmp	r3, #6
 800439c:	d902      	bls.n	80043a4 <NVIC_EncodePriority+0x30>
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	3b03      	subs	r3, #3
 80043a2:	e000      	b.n	80043a6 <NVIC_EncodePriority+0x32>
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a8:	f04f 32ff 	mov.w	r2, #4294967295
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	fa02 f303 	lsl.w	r3, r2, r3
 80043b2:	43da      	mvns	r2, r3
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	401a      	ands	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043bc:	f04f 31ff 	mov.w	r1, #4294967295
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa01 f303 	lsl.w	r3, r1, r3
 80043c6:	43d9      	mvns	r1, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043cc:	4313      	orrs	r3, r2
         );
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3724      	adds	r7, #36	; 0x24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ff4c 	bl	8004280 <__NVIC_SetPriorityGrouping>
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004402:	f7ff ff61 	bl	80042c8 <__NVIC_GetPriorityGrouping>
 8004406:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	6978      	ldr	r0, [r7, #20]
 800440e:	f7ff ffb1 	bl	8004374 <NVIC_EncodePriority>
 8004412:	4602      	mov	r2, r0
 8004414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff ff80 	bl	8004320 <__NVIC_SetPriority>
}
 8004420:	bf00      	nop
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff54 	bl	80042e4 <__NVIC_EnableIRQ>
}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	; 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e175      	b.n	8004750 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004464:	2201      	movs	r2, #1
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4013      	ands	r3, r2
 8004476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	429a      	cmp	r2, r3
 800447e:	f040 8164 	bne.w	800474a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d005      	beq.n	800449a <HAL_GPIO_Init+0x56>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d130      	bne.n	80044fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	2203      	movs	r2, #3
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044d0:	2201      	movs	r2, #1
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4013      	ands	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 0201 	and.w	r2, r3, #1
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	2b03      	cmp	r3, #3
 8004506:	d017      	beq.n	8004538 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	2203      	movs	r2, #3
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d123      	bne.n	800458c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	08da      	lsrs	r2, r3, #3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	3208      	adds	r2, #8
 800454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	220f      	movs	r2, #15
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	4013      	ands	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	08da      	lsrs	r2, r3, #3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3208      	adds	r2, #8
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	2203      	movs	r2, #3
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f003 0203 	and.w	r2, r3, #3
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fa02 f303 	lsl.w	r3, r2, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80be 	beq.w	800474a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ce:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_GPIO_Init+0x324>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_GPIO_Init+0x324>)
 80045d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045d8:	6453      	str	r3, [r2, #68]	; 0x44
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <HAL_GPIO_Init+0x324>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80045e6:	4a61      	ldr	r2, [pc, #388]	; (800476c <HAL_GPIO_Init+0x328>)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	3302      	adds	r3, #2
 80045ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	220f      	movs	r2, #15
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4013      	ands	r3, r2
 8004608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a58      	ldr	r2, [pc, #352]	; (8004770 <HAL_GPIO_Init+0x32c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d037      	beq.n	8004682 <HAL_GPIO_Init+0x23e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a57      	ldr	r2, [pc, #348]	; (8004774 <HAL_GPIO_Init+0x330>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d031      	beq.n	800467e <HAL_GPIO_Init+0x23a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a56      	ldr	r2, [pc, #344]	; (8004778 <HAL_GPIO_Init+0x334>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d02b      	beq.n	800467a <HAL_GPIO_Init+0x236>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a55      	ldr	r2, [pc, #340]	; (800477c <HAL_GPIO_Init+0x338>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d025      	beq.n	8004676 <HAL_GPIO_Init+0x232>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a54      	ldr	r2, [pc, #336]	; (8004780 <HAL_GPIO_Init+0x33c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01f      	beq.n	8004672 <HAL_GPIO_Init+0x22e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a53      	ldr	r2, [pc, #332]	; (8004784 <HAL_GPIO_Init+0x340>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d019      	beq.n	800466e <HAL_GPIO_Init+0x22a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_GPIO_Init+0x344>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <HAL_GPIO_Init+0x226>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a51      	ldr	r2, [pc, #324]	; (800478c <HAL_GPIO_Init+0x348>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00d      	beq.n	8004666 <HAL_GPIO_Init+0x222>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a50      	ldr	r2, [pc, #320]	; (8004790 <HAL_GPIO_Init+0x34c>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d007      	beq.n	8004662 <HAL_GPIO_Init+0x21e>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4f      	ldr	r2, [pc, #316]	; (8004794 <HAL_GPIO_Init+0x350>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <HAL_GPIO_Init+0x21a>
 800465a:	2309      	movs	r3, #9
 800465c:	e012      	b.n	8004684 <HAL_GPIO_Init+0x240>
 800465e:	230a      	movs	r3, #10
 8004660:	e010      	b.n	8004684 <HAL_GPIO_Init+0x240>
 8004662:	2308      	movs	r3, #8
 8004664:	e00e      	b.n	8004684 <HAL_GPIO_Init+0x240>
 8004666:	2307      	movs	r3, #7
 8004668:	e00c      	b.n	8004684 <HAL_GPIO_Init+0x240>
 800466a:	2306      	movs	r3, #6
 800466c:	e00a      	b.n	8004684 <HAL_GPIO_Init+0x240>
 800466e:	2305      	movs	r3, #5
 8004670:	e008      	b.n	8004684 <HAL_GPIO_Init+0x240>
 8004672:	2304      	movs	r3, #4
 8004674:	e006      	b.n	8004684 <HAL_GPIO_Init+0x240>
 8004676:	2303      	movs	r3, #3
 8004678:	e004      	b.n	8004684 <HAL_GPIO_Init+0x240>
 800467a:	2302      	movs	r3, #2
 800467c:	e002      	b.n	8004684 <HAL_GPIO_Init+0x240>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_GPIO_Init+0x240>
 8004682:	2300      	movs	r3, #0
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	f002 0203 	and.w	r2, r2, #3
 800468a:	0092      	lsls	r2, r2, #2
 800468c:	4093      	lsls	r3, r2
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004694:	4935      	ldr	r1, [pc, #212]	; (800476c <HAL_GPIO_Init+0x328>)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	3302      	adds	r3, #2
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_GPIO_Init+0x354>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046c6:	4a34      	ldr	r2, [pc, #208]	; (8004798 <HAL_GPIO_Init+0x354>)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046cc:	4b32      	ldr	r3, [pc, #200]	; (8004798 <HAL_GPIO_Init+0x354>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f0:	4a29      	ldr	r2, [pc, #164]	; (8004798 <HAL_GPIO_Init+0x354>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046f6:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_GPIO_Init+0x354>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800471a:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <HAL_GPIO_Init+0x354>)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_GPIO_Init+0x354>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004744:	4a14      	ldr	r2, [pc, #80]	; (8004798 <HAL_GPIO_Init+0x354>)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b0f      	cmp	r3, #15
 8004754:	f67f ae86 	bls.w	8004464 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	40013800 	.word	0x40013800
 8004770:	40020000 	.word	0x40020000
 8004774:	40020400 	.word	0x40020400
 8004778:	40020800 	.word	0x40020800
 800477c:	40020c00 	.word	0x40020c00
 8004780:	40021000 	.word	0x40021000
 8004784:	40021400 	.word	0x40021400
 8004788:	40021800 	.word	0x40021800
 800478c:	40021c00 	.word	0x40021c00
 8004790:	40022000 	.word	0x40022000
 8004794:	40022400 	.word	0x40022400
 8004798:	40013c00 	.word	0x40013c00

0800479c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
 80047a8:	4613      	mov	r3, r2
 80047aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80047b8:	e003      	b.n	80047c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80047ba:	887b      	ldrh	r3, [r7, #2]
 80047bc:	041a      	lsls	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	619a      	str	r2, [r3, #24]
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047e0:	887a      	ldrh	r2, [r7, #2]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4013      	ands	r3, r2
 80047e6:	041a      	lsls	r2, r3, #16
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	43d9      	mvns	r1, r3
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	400b      	ands	r3, r1
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	619a      	str	r2, [r3, #24]
}
 80047f6:	bf00      	nop
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800480e:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800481a:	4a05      	ldr	r2, [pc, #20]	; (8004830 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fd f9d4 	bl	8001bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40013c00 	.word	0x40013c00

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff f948 	bl	8003af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004884:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004894:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048aa:	609a      	str	r2, [r3, #8]
 80048ac:	e006      	b.n	80048bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d104      	bne.n	80048ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b1d      	ldr	r3, [pc, #116]	; (8004950 <HAL_I2C_Init+0x11c>)
 80048da:	430b      	orrs	r3, r1
 80048dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69d9      	ldr	r1, [r3, #28]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1a      	ldr	r2, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	02008000 	.word	0x02008000

08004954 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	461a      	mov	r2, r3
 8004960:	460b      	mov	r3, r1
 8004962:	817b      	strh	r3, [r7, #10]
 8004964:	4613      	mov	r3, r2
 8004966:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b20      	cmp	r3, #32
 8004972:	f040 80da 	bne.w	8004b2a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_I2C_Master_Transmit+0x30>
 8004980:	2302      	movs	r3, #2
 8004982:	e0d3      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800498c:	f7ff fc6c 	bl	8004268 <HAL_GetTick>
 8004990:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	2319      	movs	r3, #25
 8004998:	2201      	movs	r2, #1
 800499a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 f8f0 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0be      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2221      	movs	r2, #33	; 0x21
 80049b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2210      	movs	r2, #16
 80049ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	893a      	ldrh	r2, [r7, #8]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2bff      	cmp	r3, #255	; 0xff
 80049de:	d90e      	bls.n	80049fe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	22ff      	movs	r2, #255	; 0xff
 80049e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	8979      	ldrh	r1, [r7, #10]
 80049ee:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <HAL_I2C_Master_Transmit+0x1e0>)
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa60 	bl	8004ebc <I2C_TransferConfig>
 80049fc:	e06c      	b.n	8004ad8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	8979      	ldrh	r1, [r7, #10]
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fa4f 	bl	8004ebc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a1e:	e05b      	b.n	8004ad8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	6a39      	ldr	r1, [r7, #32]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f8ed 	bl	8004c04 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e07b      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	781a      	ldrb	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d034      	beq.n	8004ad8 <HAL_I2C_Master_Transmit+0x184>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d130      	bne.n	8004ad8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	9300      	str	r3, [sp, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2180      	movs	r1, #128	; 0x80
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f87f 	bl	8004b84 <I2C_WaitOnFlagUntilTimeout>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e04d      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2bff      	cmp	r3, #255	; 0xff
 8004a98:	d90e      	bls.n	8004ab8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	; 0xff
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	8979      	ldrh	r1, [r7, #10]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 fa03 	bl	8004ebc <I2C_TransferConfig>
 8004ab6:	e00f      	b.n	8004ad8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	8979      	ldrh	r1, [r7, #10]
 8004aca:	2300      	movs	r3, #0
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f9f2 	bl	8004ebc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d19e      	bne.n	8004a20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	6a39      	ldr	r1, [r7, #32]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f8cc 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e01a      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2220      	movs	r2, #32
 8004afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <HAL_I2C_Master_Transmit+0x1e4>)
 8004b0a:	400b      	ands	r3, r1
 8004b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2220      	movs	r2, #32
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	e000      	b.n	8004b2c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
  }
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3718      	adds	r7, #24
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	80002000 	.word	0x80002000
 8004b38:	fe00e800 	.word	0xfe00e800

08004b3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d103      	bne.n	8004b5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d007      	beq.n	8004b78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0201 	orr.w	r2, r2, #1
 8004b76:	619a      	str	r2, [r3, #24]
  }
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b94:	e022      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d01e      	beq.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7ff fb63 	bl	8004268 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d113      	bne.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e00f      	b.n	8004bfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d0cd      	beq.n	8004b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c10:	e02c      	b.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f870 	bl	8004cfc <I2C_IsErrorOccurred>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e02a      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2c:	d01e      	beq.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7ff fb1b 	bl	8004268 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d113      	bne.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e007      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d1cb      	bne.n	8004c12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c90:	e028      	b.n	8004ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f830 	bl	8004cfc <I2C_IsErrorOccurred>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e026      	b.n	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7ff fadf 	bl	8004268 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d113      	bne.n	8004ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d1cf      	bne.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d068      	beq.n	8004dfa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d30:	e049      	b.n	8004dc6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d045      	beq.n	8004dc6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d3a:	f7ff fa95 	bl	8004268 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d302      	bcc.n	8004d50 <I2C_IsErrorOccurred+0x54>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d13a      	bne.n	8004dc6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d121      	bne.n	8004db8 <I2C_IsErrorOccurred+0xbc>
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d7a:	d01d      	beq.n	8004db8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d01a      	beq.n	8004db8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004d92:	f7ff fa69 	bl	8004268 <HAL_GetTick>
 8004d96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d98:	e00e      	b.n	8004db8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004d9a:	f7ff fa65 	bl	8004268 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b19      	cmp	r3, #25
 8004da6:	d907      	bls.n	8004db8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	f043 0320 	orr.w	r3, r3, #32
 8004dae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004db6:	e006      	b.n	8004dc6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 0320 	and.w	r3, r3, #32
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d1e9      	bne.n	8004d9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d003      	beq.n	8004ddc <I2C_IsErrorOccurred+0xe0>
 8004dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0aa      	beq.n	8004d32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2220      	movs	r2, #32
 8004dea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00b      	beq.n	8004e24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f043 0308 	orr.w	r3, r3, #8
 8004e34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00b      	beq.n	8004e68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	f043 0302 	orr.w	r3, r3, #2
 8004e56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01c      	beq.n	8004eaa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff fe63 	bl	8004b3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6859      	ldr	r1, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <I2C_IsErrorOccurred+0x1bc>)
 8004e82:	400b      	ands	r3, r1
 8004e84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	fe00e800 	.word	0xfe00e800

08004ebc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	607b      	str	r3, [r7, #4]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ed4:	7a7b      	ldrb	r3, [r7, #9]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004edc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	0d5b      	lsrs	r3, r3, #21
 8004ef6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004efa:	4b08      	ldr	r3, [pc, #32]	; (8004f1c <I2C_TransferConfig+0x60>)
 8004efc:	430b      	orrs	r3, r1
 8004efe:	43db      	mvns	r3, r3
 8004f00:	ea02 0103 	and.w	r1, r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	03ff63ff 	.word	0x03ff63ff

08004f20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	d138      	bne.n	8004fa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d101      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e032      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2224      	movs	r2, #36	; 0x24
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0201 	bic.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d139      	bne.n	8005040 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e033      	b.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	; 0x24
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005008:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800505a:	4b23      	ldr	r3, [pc, #140]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	4a22      	ldr	r2, [pc, #136]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	; 0x40
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800507c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800507e:	f7ff f8f3 	bl	8004268 <HAL_GetTick>
 8005082:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005084:	e009      	b.n	800509a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005086:	f7ff f8ef 	bl	8004268 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005094:	d901      	bls.n	800509a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e022      	b.n	80050e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a6:	d1ee      	bne.n	8005086 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050a8:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0f      	ldr	r2, [pc, #60]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050b4:	f7ff f8d8 	bl	8004268 <HAL_GetTick>
 80050b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050ba:	e009      	b.n	80050d0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050bc:	f7ff f8d4 	bl	8004268 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ca:	d901      	bls.n	80050d0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e007      	b.n	80050e0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050d0:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050dc:	d1ee      	bne.n	80050bc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	40023800 	.word	0x40023800
 80050ec:	40007000 	.word	0x40007000

080050f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e291      	b.n	800562a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8087 	beq.w	8005222 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005114:	4b96      	ldr	r3, [pc, #600]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 030c 	and.w	r3, r3, #12
 800511c:	2b04      	cmp	r3, #4
 800511e:	d00c      	beq.n	800513a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005120:	4b93      	ldr	r3, [pc, #588]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b08      	cmp	r3, #8
 800512a:	d112      	bne.n	8005152 <HAL_RCC_OscConfig+0x62>
 800512c:	4b90      	ldr	r3, [pc, #576]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005138:	d10b      	bne.n	8005152 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800513a:	4b8d      	ldr	r3, [pc, #564]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d06c      	beq.n	8005220 <HAL_RCC_OscConfig+0x130>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d168      	bne.n	8005220 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e26b      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x7a>
 800515c:	4b84      	ldr	r3, [pc, #528]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a83      	ldr	r2, [pc, #524]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e02e      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x9c>
 8005172:	4b7f      	ldr	r3, [pc, #508]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	4b7c      	ldr	r3, [pc, #496]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a7b      	ldr	r2, [pc, #492]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	e01d      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0xc0>
 8005196:	4b76      	ldr	r3, [pc, #472]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a75      	ldr	r2, [pc, #468]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800519c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b73      	ldr	r3, [pc, #460]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a72      	ldr	r2, [pc, #456]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e00b      	b.n	80051c8 <HAL_RCC_OscConfig+0xd8>
 80051b0:	4b6f      	ldr	r3, [pc, #444]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6e      	ldr	r2, [pc, #440]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b6c      	ldr	r3, [pc, #432]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a6b      	ldr	r2, [pc, #428]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d013      	beq.n	80051f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d0:	f7ff f84a 	bl	8004268 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d8:	f7ff f846 	bl	8004268 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b64      	cmp	r3, #100	; 0x64
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e21f      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ea:	4b61      	ldr	r3, [pc, #388]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0xe8>
 80051f6:	e014      	b.n	8005222 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7ff f836 	bl	8004268 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005200:	f7ff f832 	bl	8004268 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b64      	cmp	r3, #100	; 0x64
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e20b      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005212:	4b57      	ldr	r3, [pc, #348]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x110>
 800521e:	e000      	b.n	8005222 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d069      	beq.n	8005302 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800522e:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800523a:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 030c 	and.w	r3, r3, #12
 8005242:	2b08      	cmp	r3, #8
 8005244:	d11c      	bne.n	8005280 <HAL_RCC_OscConfig+0x190>
 8005246:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005252:	4b47      	ldr	r3, [pc, #284]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_RCC_OscConfig+0x17a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d001      	beq.n	800526a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e1df      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800526a:	4b41      	ldr	r3, [pc, #260]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	493d      	ldr	r1, [pc, #244]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800527a:	4313      	orrs	r3, r2
 800527c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527e:	e040      	b.n	8005302 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d023      	beq.n	80052d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005288:	4b39      	ldr	r3, [pc, #228]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a38      	ldr	r2, [pc, #224]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fe ffe8 	bl	8004268 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529c:	f7fe ffe4 	bl	8004268 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1bd      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ae:	4b30      	ldr	r3, [pc, #192]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	4b2d      	ldr	r3, [pc, #180]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4929      	ldr	r1, [pc, #164]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
 80052ce:	e018      	b.n	8005302 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052d6:	f023 0301 	bic.w	r3, r3, #1
 80052da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052dc:	f7fe ffc4 	bl	8004268 <HAL_GetTick>
 80052e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e2:	e008      	b.n	80052f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e4:	f7fe ffc0 	bl	8004268 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e199      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052f6:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1f0      	bne.n	80052e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d038      	beq.n	8005380 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d019      	beq.n	800534a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005316:	4b16      	ldr	r3, [pc, #88]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005322:	f7fe ffa1 	bl	8004268 <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800532a:	f7fe ff9d 	bl	8004268 <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b02      	cmp	r3, #2
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e176      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800533c:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800533e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0f0      	beq.n	800532a <HAL_RCC_OscConfig+0x23a>
 8005348:	e01a      	b.n	8005380 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 800534c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <HAL_RCC_OscConfig+0x280>)
 8005350:	f023 0301 	bic.w	r3, r3, #1
 8005354:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005356:	f7fe ff87 	bl	8004268 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535e:	f7fe ff83 	bl	8004268 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d903      	bls.n	8005374 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e15c      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
 8005370:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005374:	4b91      	ldr	r3, [pc, #580]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ee      	bne.n	800535e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80a4 	beq.w	80054d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538e:	4b8b      	ldr	r3, [pc, #556]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10d      	bne.n	80053b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800539a:	4b88      	ldr	r3, [pc, #544]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	4a87      	ldr	r2, [pc, #540]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80053a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a4:	6413      	str	r3, [r2, #64]	; 0x40
 80053a6:	4b85      	ldr	r3, [pc, #532]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b2:	2301      	movs	r3, #1
 80053b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053b6:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <HAL_RCC_OscConfig+0x4d0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d118      	bne.n	80053f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x4d0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a7e      	ldr	r2, [pc, #504]	; (80055c0 <HAL_RCC_OscConfig+0x4d0>)
 80053c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053ce:	f7fe ff4b 	bl	8004268 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d6:	f7fe ff47 	bl	8004268 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b64      	cmp	r3, #100	; 0x64
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e120      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e8:	4b75      	ldr	r3, [pc, #468]	; (80055c0 <HAL_RCC_OscConfig+0x4d0>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d106      	bne.n	800540a <HAL_RCC_OscConfig+0x31a>
 80053fc:	4b6f      	ldr	r3, [pc, #444]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a6e      	ldr	r2, [pc, #440]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	e02d      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x33c>
 8005412:	4b6a      	ldr	r3, [pc, #424]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005416:	4a69      	ldr	r2, [pc, #420]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	6713      	str	r3, [r2, #112]	; 0x70
 800541e:	4b67      	ldr	r3, [pc, #412]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005422:	4a66      	ldr	r2, [pc, #408]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005424:	f023 0304 	bic.w	r3, r3, #4
 8005428:	6713      	str	r3, [r2, #112]	; 0x70
 800542a:	e01c      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d10c      	bne.n	800544e <HAL_RCC_OscConfig+0x35e>
 8005434:	4b61      	ldr	r3, [pc, #388]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005438:	4a60      	ldr	r2, [pc, #384]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800543a:	f043 0304 	orr.w	r3, r3, #4
 800543e:	6713      	str	r3, [r2, #112]	; 0x70
 8005440:	4b5e      	ldr	r3, [pc, #376]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	e00b      	b.n	8005466 <HAL_RCC_OscConfig+0x376>
 800544e:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a5a      	ldr	r2, [pc, #360]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	; 0x70
 800545a:	4b58      	ldr	r3, [pc, #352]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800545c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545e:	4a57      	ldr	r2, [pc, #348]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d015      	beq.n	800549a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800546e:	f7fe fefb 	bl	8004268 <HAL_GetTick>
 8005472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005474:	e00a      	b.n	800548c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005476:	f7fe fef7 	bl	8004268 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e0ce      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800548c:	4b4b      	ldr	r3, [pc, #300]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ee      	beq.n	8005476 <HAL_RCC_OscConfig+0x386>
 8005498:	e014      	b.n	80054c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800549a:	f7fe fee5 	bl	8004268 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a0:	e00a      	b.n	80054b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054a2:	f7fe fee1 	bl	8004268 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e0b8      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b8:	4b40      	ldr	r3, [pc, #256]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1ee      	bne.n	80054a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d105      	bne.n	80054d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ca:	4b3c      	ldr	r3, [pc, #240]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80a4 	beq.w	8005628 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 030c 	and.w	r3, r3, #12
 80054e8:	2b08      	cmp	r3, #8
 80054ea:	d06b      	beq.n	80055c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d149      	bne.n	8005588 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b31      	ldr	r3, [pc, #196]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a30      	ldr	r2, [pc, #192]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fe feb2 	bl	8004268 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005508:	f7fe feae 	bl	8004268 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e087      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551a:	4b28      	ldr	r3, [pc, #160]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	019b      	lsls	r3, r3, #6
 8005536:	431a      	orrs	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553c:	085b      	lsrs	r3, r3, #1
 800553e:	3b01      	subs	r3, #1
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	061b      	lsls	r3, r3, #24
 800554a:	4313      	orrs	r3, r2
 800554c:	4a1b      	ldr	r2, [pc, #108]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800554e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005552:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005554:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800555e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fe fe82 	bl	8004268 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005568:	f7fe fe7e 	bl	8004268 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e057      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0f0      	beq.n	8005568 <HAL_RCC_OscConfig+0x478>
 8005586:	e04f      	b.n	8005628 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a0b      	ldr	r2, [pc, #44]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 800558e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fe fe68 	bl	8004268 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559c:	f7fe fe64 	bl	8004268 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e03d      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <HAL_RCC_OscConfig+0x4cc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x4ac>
 80055ba:	e035      	b.n	8005628 <HAL_RCC_OscConfig+0x538>
 80055bc:	40023800 	.word	0x40023800
 80055c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_RCC_OscConfig+0x544>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d028      	beq.n	8005624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d121      	bne.n	8005624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d11a      	bne.n	8005624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d111      	bne.n	8005624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560a:	085b      	lsrs	r3, r3, #1
 800560c:	3b01      	subs	r3, #1
 800560e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d107      	bne.n	8005624 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3718      	adds	r7, #24
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023800 	.word	0x40023800

08005638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0d0      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005650:	4b6a      	ldr	r3, [pc, #424]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d910      	bls.n	8005680 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b67      	ldr	r3, [pc, #412]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 020f 	bic.w	r2, r3, #15
 8005666:	4965      	ldr	r1, [pc, #404]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b63      	ldr	r3, [pc, #396]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0b8      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005698:	4b59      	ldr	r3, [pc, #356]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a58      	ldr	r2, [pc, #352]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800569e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a52      	ldr	r2, [pc, #328]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b50      	ldr	r3, [pc, #320]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	494d      	ldr	r1, [pc, #308]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d040      	beq.n	800575c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b47      	ldr	r3, [pc, #284]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d115      	bne.n	800571a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d107      	bne.n	800570a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fa:	4b41      	ldr	r3, [pc, #260]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e073      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570a:	4b3d      	ldr	r3, [pc, #244]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e06b      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f023 0203 	bic.w	r2, r3, #3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4936      	ldr	r1, [pc, #216]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 8005728:	4313      	orrs	r3, r2
 800572a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572c:	f7fe fd9c 	bl	8004268 <HAL_GetTick>
 8005730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005732:	e00a      	b.n	800574a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005734:	f7fe fd98 	bl	8004268 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e053      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574a:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 020c 	and.w	r2, r3, #12
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	429a      	cmp	r2, r3
 800575a:	d1eb      	bne.n	8005734 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d210      	bcs.n	800578c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 020f 	bic.w	r2, r3, #15
 8005772:	4922      	ldr	r1, [pc, #136]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b20      	ldr	r3, [pc, #128]	; (80057fc <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e032      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005798:	4b19      	ldr	r3, [pc, #100]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4916      	ldr	r1, [pc, #88]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057b6:	4b12      	ldr	r3, [pc, #72]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	490e      	ldr	r1, [pc, #56]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ca:	f000 f821 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_RCC_ClockConfig+0x1c8>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	490a      	ldr	r1, [pc, #40]	; (8005804 <HAL_RCC_ClockConfig+0x1cc>)
 80057dc:	5ccb      	ldrb	r3, [r1, r3]
 80057de:	fa22 f303 	lsr.w	r3, r2, r3
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <HAL_RCC_ClockConfig+0x1d0>)
 80057e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057e6:	4b09      	ldr	r3, [pc, #36]	; (800580c <HAL_RCC_ClockConfig+0x1d4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fbfa 	bl	8003fe4 <HAL_InitTick>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023c00 	.word	0x40023c00
 8005800:	40023800 	.word	0x40023800
 8005804:	0800ae9c 	.word	0x0800ae9c
 8005808:	2000002c 	.word	0x2000002c
 800580c:	20000030 	.word	0x20000030

08005810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b094      	sub	sp, #80	; 0x50
 8005816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	647b      	str	r3, [r7, #68]	; 0x44
 800581c:	2300      	movs	r3, #0
 800581e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005820:	2300      	movs	r3, #0
 8005822:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005828:	4b79      	ldr	r3, [pc, #484]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b08      	cmp	r3, #8
 8005832:	d00d      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x40>
 8005834:	2b08      	cmp	r3, #8
 8005836:	f200 80e1 	bhi.w	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x34>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d003      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0x3a>
 8005842:	e0db      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005846:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005848:	e0db      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584a:	4b73      	ldr	r3, [pc, #460]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x208>)
 800584c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800584e:	e0d8      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005850:	4b6f      	ldr	r3, [pc, #444]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005858:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800585a:	4b6d      	ldr	r3, [pc, #436]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d063      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b6a      	ldr	r3, [pc, #424]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	2200      	movs	r2, #0
 800586e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005870:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
 800587a:	2300      	movs	r3, #0
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f04f 0000 	mov.w	r0, #0
 800588a:	f04f 0100 	mov.w	r1, #0
 800588e:	0159      	lsls	r1, r3, #5
 8005890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005894:	0150      	lsls	r0, r2, #5
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4621      	mov	r1, r4
 800589c:	1a51      	subs	r1, r2, r1
 800589e:	6139      	str	r1, [r7, #16]
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb63 0301 	sbc.w	r3, r3, r1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b4:	4659      	mov	r1, fp
 80058b6:	018b      	lsls	r3, r1, #6
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058be:	4651      	mov	r1, sl
 80058c0:	018a      	lsls	r2, r1, #6
 80058c2:	4651      	mov	r1, sl
 80058c4:	ebb2 0801 	subs.w	r8, r2, r1
 80058c8:	4659      	mov	r1, fp
 80058ca:	eb63 0901 	sbc.w	r9, r3, r1
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e2:	4690      	mov	r8, r2
 80058e4:	4699      	mov	r9, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	eb18 0303 	adds.w	r3, r8, r3
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	462b      	mov	r3, r5
 80058f0:	eb49 0303 	adc.w	r3, r9, r3
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005902:	4629      	mov	r1, r5
 8005904:	024b      	lsls	r3, r1, #9
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800590c:	4621      	mov	r1, r4
 800590e:	024a      	lsls	r2, r1, #9
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005916:	2200      	movs	r2, #0
 8005918:	62bb      	str	r3, [r7, #40]	; 0x28
 800591a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800591c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005920:	f7fb f94c 	bl	8000bbc <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4613      	mov	r3, r2
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592c:	e058      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592e:	4b38      	ldr	r3, [pc, #224]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	2200      	movs	r2, #0
 8005936:	4618      	mov	r0, r3
 8005938:	4611      	mov	r1, r2
 800593a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	f04f 0000 	mov.w	r0, #0
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	0159      	lsls	r1, r3, #5
 8005956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800595a:	0150      	lsls	r0, r2, #5
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4641      	mov	r1, r8
 8005962:	ebb2 0a01 	subs.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb63 0b01 	sbc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005978:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800597c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005980:	ebb2 040a 	subs.w	r4, r2, sl
 8005984:	eb63 050b 	sbc.w	r5, r3, fp
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	464b      	mov	r3, r9
 80059a4:	eb45 0303 	adc.w	r3, r5, r3
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059b6:	4629      	mov	r1, r5
 80059b8:	028b      	lsls	r3, r1, #10
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c0:	4621      	mov	r1, r4
 80059c2:	028a      	lsls	r2, r1, #10
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ca:	2200      	movs	r2, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	61fa      	str	r2, [r7, #28]
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	f7fb f8f2 	bl	8000bbc <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4613      	mov	r3, r2
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80059e0:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	3301      	adds	r3, #1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80059f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	; (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3750      	adds	r7, #80	; 0x50
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	007a1200 	.word	0x007a1200

08005a1c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000002c 	.word	0x2000002c

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a38:	f7ff fff0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0a9b      	lsrs	r3, r3, #10
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	; (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	0800aeac 	.word	0x0800aeac

08005a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a60:	f7ff ffdc 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	0b5b      	lsrs	r3, r3, #13
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4903      	ldr	r1, [pc, #12]	; (8005a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	0800aeac 	.word	0x0800aeac

08005a84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	220f      	movs	r2, #15
 8005a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0203 	and.w	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ac6:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <HAL_RCC_GetClockConfig+0x60>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 020f 	and.w	r2, r3, #15
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	601a      	str	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40023c00 	.word	0x40023c00

08005ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b088      	sub	sp, #32
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005afc:	2300      	movs	r3, #0
 8005afe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b10:	4b69      	ldr	r3, [pc, #420]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a68      	ldr	r2, [pc, #416]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005b1a:	6093      	str	r3, [r2, #8]
 8005b1c:	4b66      	ldr	r3, [pc, #408]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b24:	4964      	ldr	r1, [pc, #400]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d017      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b42:	4b5d      	ldr	r3, [pc, #372]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b50:	4959      	ldr	r1, [pc, #356]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b60:	d101      	bne.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b62:	2301      	movs	r3, #1
 8005b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d017      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b7e:	4b4e      	ldr	r3, [pc, #312]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	494a      	ldr	r1, [pc, #296]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b9c:	d101      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d101      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 808b 	beq.w	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bcc:	4b3a      	ldr	r3, [pc, #232]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	4a39      	ldr	r2, [pc, #228]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8005bd8:	4b37      	ldr	r3, [pc, #220]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005be4:	4b35      	ldr	r3, [pc, #212]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf0:	f7fe fb3a 	bl	8004268 <HAL_GetTick>
 8005bf4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf8:	f7fe fb36 	bl	8004268 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e357      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005c0a:	4b2c      	ldr	r3, [pc, #176]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c16:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d035      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2e:	693a      	ldr	r2, [r7, #16]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d02e      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c4a:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c5c:	4b16      	ldr	r3, [pc, #88]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d114      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fe fafe 	bl	8004268 <HAL_GetTick>
 8005c6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fe fafa 	bl	8004268 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e319      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ee      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9e:	d111      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005cae:	400b      	ands	r3, r1
 8005cb0:	4901      	ldr	r1, [pc, #4]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	e00b      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	0ffffcff 	.word	0x0ffffcff
 8005cc4:	4baa      	ldr	r3, [pc, #680]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4aa9      	ldr	r2, [pc, #676]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005cce:	6093      	str	r3, [r2, #8]
 8005cd0:	4ba7      	ldr	r3, [pc, #668]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cdc:	49a4      	ldr	r1, [pc, #656]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d010      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cee:	4ba0      	ldr	r3, [pc, #640]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf4:	4a9e      	ldr	r2, [pc, #632]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005cfe:	4b9c      	ldr	r3, [pc, #624]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	4999      	ldr	r1, [pc, #612]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00a      	beq.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d1c:	4b94      	ldr	r3, [pc, #592]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d2a:	4991      	ldr	r1, [pc, #580]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d3e:	4b8c      	ldr	r3, [pc, #560]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d4c:	4988      	ldr	r1, [pc, #544]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d60:	4b83      	ldr	r3, [pc, #524]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d6e:	4980      	ldr	r1, [pc, #512]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00a      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d82:	4b7b      	ldr	r3, [pc, #492]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d90:	4977      	ldr	r1, [pc, #476]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005da4:	4b72      	ldr	r3, [pc, #456]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	496f      	ldr	r1, [pc, #444]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00a      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005dc6:	4b6a      	ldr	r3, [pc, #424]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dcc:	f023 020c 	bic.w	r2, r3, #12
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd4:	4966      	ldr	r1, [pc, #408]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00a      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df6:	495e      	ldr	r1, [pc, #376]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00a      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e0a:	4b59      	ldr	r3, [pc, #356]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e18:	4955      	ldr	r1, [pc, #340]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00a      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e2c:	4b50      	ldr	r3, [pc, #320]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	494d      	ldr	r1, [pc, #308]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e4e:	4b48      	ldr	r3, [pc, #288]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	4944      	ldr	r1, [pc, #272]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e70:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e7e:	493c      	ldr	r1, [pc, #240]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e92:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	4933      	ldr	r1, [pc, #204]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005eb4:	4b2e      	ldr	r3, [pc, #184]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ec2:	492b      	ldr	r1, [pc, #172]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d011      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005ed6:	4b26      	ldr	r3, [pc, #152]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005edc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee4:	4922      	ldr	r1, [pc, #136]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef4:	d101      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005f06:	2301      	movs	r3, #1
 8005f08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f24:	4912      	ldr	r1, [pc, #72]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f48:	4909      	ldr	r1, [pc, #36]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d006      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80d9 	beq.w	8006116 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a01      	ldr	r2, [pc, #4]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f6a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f6e:	e001      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005f70:	40023800 	.word	0x40023800
 8005f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f76:	f7fe f977 	bl	8004268 <HAL_GetTick>
 8005f7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f7c:	e008      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f7e:	f7fe f973 	bl	8004268 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	2b64      	cmp	r3, #100	; 0x64
 8005f8a:	d901      	bls.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e194      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f90:	4b6c      	ldr	r3, [pc, #432]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f0      	bne.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d021      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11d      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005fb0:	4b64      	ldr	r3, [pc, #400]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fbe:	4b61      	ldr	r3, [pc, #388]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc4:	0e1b      	lsrs	r3, r3, #24
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	019a      	lsls	r2, r3, #6
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	041b      	lsls	r3, r3, #16
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	061b      	lsls	r3, r3, #24
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	071b      	lsls	r3, r3, #28
 8005fe4:	4957      	ldr	r1, [pc, #348]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006000:	d00a      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800600a:	2b00      	cmp	r3, #0
 800600c:	d02e      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006016:	d129      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006018:	4b4a      	ldr	r3, [pc, #296]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800601a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601e:	0c1b      	lsrs	r3, r3, #16
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006026:	4b47      	ldr	r3, [pc, #284]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602c:	0f1b      	lsrs	r3, r3, #28
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	019a      	lsls	r2, r3, #6
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	041b      	lsls	r3, r3, #16
 800603e:	431a      	orrs	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	061b      	lsls	r3, r3, #24
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	071b      	lsls	r3, r3, #28
 800604c:	493d      	ldr	r1, [pc, #244]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006054:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800605a:	f023 021f 	bic.w	r2, r3, #31
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	3b01      	subs	r3, #1
 8006064:	4937      	ldr	r1, [pc, #220]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d01d      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006078:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800607a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800607e:	0e1b      	lsrs	r3, r3, #24
 8006080:	f003 030f 	and.w	r3, r3, #15
 8006084:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006086:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800608c:	0f1b      	lsrs	r3, r3, #28
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	041b      	lsls	r3, r3, #16
 80060a0:	431a      	orrs	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	061b      	lsls	r3, r3, #24
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	071b      	lsls	r3, r3, #28
 80060ac:	4925      	ldr	r1, [pc, #148]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d011      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	019a      	lsls	r2, r3, #6
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	041b      	lsls	r3, r3, #16
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	061b      	lsls	r3, r3, #24
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	071b      	lsls	r3, r3, #28
 80060dc:	4919      	ldr	r1, [pc, #100]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060e4:	4b17      	ldr	r3, [pc, #92]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a16      	ldr	r2, [pc, #88]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060f0:	f7fe f8ba 	bl	8004268 <HAL_GetTick>
 80060f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80060f8:	f7fe f8b6 	bl	8004268 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	; 0x64
 8006104:	d901      	bls.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e0d7      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800610a:	4b0e      	ldr	r3, [pc, #56]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	2b01      	cmp	r3, #1
 800611a:	f040 80cd 	bne.w	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800611e:	4b09      	ldr	r3, [pc, #36]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a08      	ldr	r2, [pc, #32]	; (8006144 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800612a:	f7fe f89d 	bl	8004268 <HAL_GetTick>
 800612e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006130:	e00a      	b.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006132:	f7fe f899 	bl	8004268 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b64      	cmp	r3, #100	; 0x64
 800613e:	d903      	bls.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e0ba      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006144:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006148:	4b5e      	ldr	r3, [pc, #376]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006154:	d0ed      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006172:	2b00      	cmp	r3, #0
 8006174:	d02e      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d12a      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800617e:	4b51      	ldr	r3, [pc, #324]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006184:	0c1b      	lsrs	r3, r3, #16
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800618c:	4b4d      	ldr	r3, [pc, #308]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	0f1b      	lsrs	r3, r3, #28
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	019a      	lsls	r2, r3, #6
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	041b      	lsls	r3, r3, #16
 80061a4:	431a      	orrs	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	061b      	lsls	r3, r3, #24
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	071b      	lsls	r3, r3, #28
 80061b2:	4944      	ldr	r1, [pc, #272]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061ba:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	3b01      	subs	r3, #1
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	493d      	ldr	r1, [pc, #244]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ce:	4313      	orrs	r3, r2
 80061d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d022      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e8:	d11d      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f0:	0e1b      	lsrs	r3, r3, #24
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061f8:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	0f1b      	lsrs	r3, r3, #28
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	019a      	lsls	r2, r3, #6
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	041b      	lsls	r3, r3, #16
 8006212:	431a      	orrs	r2, r3
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	061b      	lsls	r3, r3, #24
 8006218:	431a      	orrs	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	071b      	lsls	r3, r3, #28
 800621e:	4929      	ldr	r1, [pc, #164]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0308 	and.w	r3, r3, #8
 800622e:	2b00      	cmp	r3, #0
 8006230:	d028      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006232:	4b24      	ldr	r3, [pc, #144]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006240:	4b20      	ldr	r3, [pc, #128]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	0c1b      	lsrs	r3, r3, #16
 8006248:	f003 0303 	and.w	r3, r3, #3
 800624c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	019a      	lsls	r2, r3, #6
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	041b      	lsls	r3, r3, #16
 8006258:	431a      	orrs	r2, r3
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	4917      	ldr	r1, [pc, #92]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800626e:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4911      	ldr	r1, [pc, #68]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006284:	4b0f      	ldr	r3, [pc, #60]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a0e      	ldr	r2, [pc, #56]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006290:	f7fd ffea 	bl	8004268 <HAL_GetTick>
 8006294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006296:	e008      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006298:	f7fd ffe6 	bl	8004268 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	; 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e007      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062aa:	4b06      	ldr	r3, [pc, #24]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062b6:	d1ef      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3720      	adds	r7, #32
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40023800 	.word	0x40023800

080062c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e09d      	b.n	8006416 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d108      	bne.n	80062f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ea:	d009      	beq.n	8006300 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	61da      	str	r2, [r3, #28]
 80062f2:	e005      	b.n	8006300 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd fcfc 	bl	8003d18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006336:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006340:	d902      	bls.n	8006348 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
 8006346:	e002      	b.n	800634e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800634c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006356:	d007      	beq.n	8006368 <HAL_SPI_Init+0xa0>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006360:	d002      	beq.n	8006368 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a0:	431a      	orrs	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	ea42 0103 	orr.w	r1, r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	0c1b      	lsrs	r3, r3, #16
 80063c4:	f003 0204 	and.w	r2, r3, #4
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0310 	and.w	r3, r3, #16
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d6:	f003 0308 	and.w	r3, r3, #8
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063e4:	ea42 0103 	orr.w	r1, r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006404:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b088      	sub	sp, #32
 8006422:	af00      	add	r7, sp, #0
 8006424:	60f8      	str	r0, [r7, #12]
 8006426:	60b9      	str	r1, [r7, #8]
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_SPI_Transmit+0x22>
 800643c:	2302      	movs	r3, #2
 800643e:	e158      	b.n	80066f2 <HAL_SPI_Transmit+0x2d4>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006448:	f7fd ff0e 	bl	8004268 <HAL_GetTick>
 800644c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800644e:	88fb      	ldrh	r3, [r7, #6]
 8006450:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b01      	cmp	r3, #1
 800645c:	d002      	beq.n	8006464 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800645e:	2302      	movs	r3, #2
 8006460:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006462:	e13d      	b.n	80066e0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_SPI_Transmit+0x52>
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006474:	e134      	b.n	80066e0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2203      	movs	r2, #3
 800647a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	88fa      	ldrh	r2, [r7, #6]
 800648e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	d10f      	bne.n	80064e2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d007      	beq.n	8006500 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006508:	d94b      	bls.n	80065a2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Transmit+0xfa>
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d13e      	bne.n	8006596 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800653c:	e02b      	b.n	8006596 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d112      	bne.n	8006572 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655c:	1c9a      	adds	r2, r3, #2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006570:	e011      	b.n	8006596 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006572:	f7fd fe79 	bl	8004268 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d803      	bhi.n	800658a <HAL_SPI_Transmit+0x16c>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d102      	bne.n	8006590 <HAL_SPI_Transmit+0x172>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006594:	e0a4      	b.n	80066e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ce      	bne.n	800653e <HAL_SPI_Transmit+0x120>
 80065a0:	e07c      	b.n	800669c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_SPI_Transmit+0x192>
 80065aa:	8afb      	ldrh	r3, [r7, #22]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d170      	bne.n	8006692 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d912      	bls.n	80065e0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	881a      	ldrh	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	1c9a      	adds	r2, r3, #2
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b02      	subs	r3, #2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065de:	e058      	b.n	8006692 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	330c      	adds	r3, #12
 80065ea:	7812      	ldrb	r2, [r2, #0]
 80065ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	1c5a      	adds	r2, r3, #1
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b01      	subs	r3, #1
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006606:	e044      	b.n	8006692 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 0302 	and.w	r3, r3, #2
 8006612:	2b02      	cmp	r3, #2
 8006614:	d12b      	bne.n	800666e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d912      	bls.n	8006646 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b02      	subs	r3, #2
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006644:	e025      	b.n	8006692 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800666c:	e011      	b.n	8006692 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800666e:	f7fd fdfb 	bl	8004268 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d803      	bhi.n	8006686 <HAL_SPI_Transmit+0x268>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006684:	d102      	bne.n	800668c <HAL_SPI_Transmit+0x26e>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006690:	e026      	b.n	80066e0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1b5      	bne.n	8006608 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fb69 	bl	8006d78 <SPI_EndRxTxTransaction>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d002      	beq.n	80066de <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e000      	b.n	80066e0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b08a      	sub	sp, #40	; 0x28
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006708:	2301      	movs	r3, #1
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006718:	2b01      	cmp	r3, #1
 800671a:	d101      	bne.n	8006720 <HAL_SPI_TransmitReceive+0x26>
 800671c:	2302      	movs	r3, #2
 800671e:	e1fb      	b.n	8006b18 <HAL_SPI_TransmitReceive+0x41e>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006728:	f7fd fd9e 	bl	8004268 <HAL_GetTick>
 800672c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006734:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800673c:	887b      	ldrh	r3, [r7, #2]
 800673e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006740:	887b      	ldrh	r3, [r7, #2]
 8006742:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006744:	7efb      	ldrb	r3, [r7, #27]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d00e      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x6e>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006750:	d106      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d102      	bne.n	8006760 <HAL_SPI_TransmitReceive+0x66>
 800675a:	7efb      	ldrb	r3, [r7, #27]
 800675c:	2b04      	cmp	r3, #4
 800675e:	d003      	beq.n	8006768 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006760:	2302      	movs	r3, #2
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006766:	e1cd      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_SPI_TransmitReceive+0x80>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d002      	beq.n	800677a <HAL_SPI_TransmitReceive+0x80>
 8006774:	887b      	ldrh	r3, [r7, #2]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d103      	bne.n	8006782 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006780:	e1c0      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b04      	cmp	r3, #4
 800678c:	d003      	beq.n	8006796 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2205      	movs	r2, #5
 8006792:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	887a      	ldrh	r2, [r7, #2]
 80067a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	887a      	ldrh	r2, [r7, #2]
 80067ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	887a      	ldrh	r2, [r7, #2]
 80067bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	887a      	ldrh	r2, [r7, #2]
 80067c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067d8:	d802      	bhi.n	80067e0 <HAL_SPI_TransmitReceive+0xe6>
 80067da:	8a3b      	ldrh	r3, [r7, #16]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d908      	bls.n	80067f2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	e007      	b.n	8006802 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006800:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	d007      	beq.n	8006820 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800681e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006828:	d97c      	bls.n	8006924 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <HAL_SPI_TransmitReceive+0x13e>
 8006832:	8a7b      	ldrh	r3, [r7, #18]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d169      	bne.n	800690c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	881a      	ldrh	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	1c9a      	adds	r2, r3, #2
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006852:	b29b      	uxth	r3, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	b29a      	uxth	r2, r3
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800685c:	e056      	b.n	800690c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b02      	cmp	r3, #2
 800686a:	d11b      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x1aa>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d016      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x1aa>
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2b01      	cmp	r3, #1
 800687a:	d113      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006880:	881a      	ldrh	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688c:	1c9a      	adds	r2, r3, #2
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006896:	b29b      	uxth	r3, r3
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d11c      	bne.n	80068ec <HAL_SPI_TransmitReceive+0x1f2>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d016      	beq.n	80068ec <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68da      	ldr	r2, [r3, #12]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	b292      	uxth	r2, r2
 80068ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	1c9a      	adds	r2, r3, #2
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068e8:	2301      	movs	r3, #1
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80068ec:	f7fd fcbc 	bl	8004268 <HAL_GetTick>
 80068f0:	4602      	mov	r2, r0
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d807      	bhi.n	800690c <HAL_SPI_TransmitReceive+0x212>
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d003      	beq.n	800690c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800690a:	e0fb      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1a3      	bne.n	800685e <HAL_SPI_TransmitReceive+0x164>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d19d      	bne.n	800685e <HAL_SPI_TransmitReceive+0x164>
 8006922:	e0df      	b.n	8006ae4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x23a>
 800692c:	8a7b      	ldrh	r3, [r7, #18]
 800692e:	2b01      	cmp	r3, #1
 8006930:	f040 80cb 	bne.w	8006aca <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006938:	b29b      	uxth	r3, r3
 800693a:	2b01      	cmp	r3, #1
 800693c:	d912      	bls.n	8006964 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	881a      	ldrh	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	1c9a      	adds	r2, r3, #2
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b02      	subs	r3, #2
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006962:	e0b2      	b.n	8006aca <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	7812      	ldrb	r2, [r2, #0]
 8006970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	1c5a      	adds	r2, r3, #1
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800698a:	e09e      	b.n	8006aca <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d134      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x30a>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02f      	beq.n	8006a04 <HAL_SPI_TransmitReceive+0x30a>
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d12c      	bne.n	8006a04 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d912      	bls.n	80069da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	881a      	ldrh	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	1c9a      	adds	r2, r3, #2
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b02      	subs	r3, #2
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d8:	e012      	b.n	8006a00 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d148      	bne.n	8006aa4 <HAL_SPI_TransmitReceive+0x3aa>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d042      	beq.n	8006aa4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d923      	bls.n	8006a72 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	b292      	uxth	r2, r2
 8006a36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3c:	1c9a      	adds	r2, r3, #2
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	3b02      	subs	r3, #2
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d81f      	bhi.n	8006aa0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a6e:	605a      	str	r2, [r3, #4]
 8006a70:	e016      	b.n	8006aa0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f103 020c 	add.w	r2, r3, #12
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	7812      	ldrb	r2, [r2, #0]
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006aa4:	f7fd fbe0 	bl	8004268 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d803      	bhi.n	8006abc <HAL_SPI_TransmitReceive+0x3c2>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d102      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x3c8>
 8006abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006ac8:	e01c      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f47f af5b 	bne.w	800698c <HAL_SPI_TransmitReceive+0x292>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f47f af54 	bne.w	800698c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f945 	bl	8006d78 <SPI_EndRxTxTransaction>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	661a      	str	r2, [r3, #96]	; 0x60
 8006b00:	e000      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3728      	adds	r7, #40	; 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b2e:	b2db      	uxtb	r3, r3
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b088      	sub	sp, #32
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b4c:	f7fd fb8c 	bl	8004268 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	683a      	ldr	r2, [r7, #0]
 8006b58:	4413      	add	r3, r2
 8006b5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b5c:	f7fd fb84 	bl	8004268 <HAL_GetTick>
 8006b60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b62:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	015b      	lsls	r3, r3, #5
 8006b68:	0d1b      	lsrs	r3, r3, #20
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	fb02 f303 	mul.w	r3, r2, r3
 8006b70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b72:	e054      	b.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7a:	d050      	beq.n	8006c1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b7c:	f7fd fb74 	bl	8004268 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	69fa      	ldr	r2, [r7, #28]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d902      	bls.n	8006b92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d13d      	bne.n	8006c0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006baa:	d111      	bne.n	8006bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb4:	d004      	beq.n	8006bc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbe:	d107      	bne.n	8006bd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd8:	d10f      	bne.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e017      	b.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d101      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4013      	ands	r3, r2
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	bf0c      	ite	eq
 8006c2e:	2301      	moveq	r3, #1
 8006c30:	2300      	movne	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d19b      	bne.n	8006b74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	2000002c 	.word	0x2000002c

08006c4c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c5e:	f7fd fb03 	bl	8004268 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006c6e:	f7fd fafb 	bl	8004268 <HAL_GetTick>
 8006c72:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006c7c:	4b3d      	ldr	r3, [pc, #244]	; (8006d74 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	00da      	lsls	r2, r3, #3
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	0d1b      	lsrs	r3, r3, #20
 8006c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006c94:	e060      	b.n	8006d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006c9c:	d107      	bne.n	8006cae <SPI_WaitFifoStateUntilTimeout+0x62>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d104      	bne.n	8006cae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d050      	beq.n	8006d58 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cb6:	f7fd fad7 	bl	8004268 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d902      	bls.n	8006ccc <SPI_WaitFifoStateUntilTimeout+0x80>
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d13d      	bne.n	8006d48 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ce4:	d111      	bne.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cee:	d004      	beq.n	8006cfa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cf8:	d107      	bne.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d12:	d10f      	bne.n	8006d34 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d32:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e010      	b.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d196      	bne.n	8006c96 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3728      	adds	r7, #40	; 0x28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	2000002c 	.word	0x2000002c

08006d78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff ff5b 	bl	8006c4c <SPI_WaitFifoStateUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d007      	beq.n	8006dac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da0:	f043 0220 	orr.w	r2, r3, #32
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e046      	b.n	8006e3a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006dac:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <SPI_EndRxTxTransaction+0xcc>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a25      	ldr	r2, [pc, #148]	; (8006e48 <SPI_EndRxTxTransaction+0xd0>)
 8006db2:	fba2 2303 	umull	r2, r3, r2, r3
 8006db6:	0d5b      	lsrs	r3, r3, #21
 8006db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006dbc:	fb02 f303 	mul.w	r3, r2, r3
 8006dc0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dca:	d112      	bne.n	8006df2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2180      	movs	r1, #128	; 0x80
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff feb0 	bl	8006b3c <SPI_WaitFlagStateUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d016      	beq.n	8006e10 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de6:	f043 0220 	orr.w	r2, r3, #32
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e023      	b.n	8006e3a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00a      	beq.n	8006e0e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e08:	2b80      	cmp	r3, #128	; 0x80
 8006e0a:	d0f2      	beq.n	8006df2 <SPI_EndRxTxTransaction+0x7a>
 8006e0c:	e000      	b.n	8006e10 <SPI_EndRxTxTransaction+0x98>
        break;
 8006e0e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff ff15 	bl	8006c4c <SPI_WaitFifoStateUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e000      	b.n	8006e3a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000002c 	.word	0x2000002c
 8006e48:	165e9f81 	.word	0x165e9f81

08006e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e049      	b.n	8006ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 f841 	bl	8006efa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f000 fb54 	bl	8007538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b083      	sub	sp, #12
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f02:	bf00      	nop
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
	...

08006f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d001      	beq.n	8006f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e054      	b.n	8006fd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a26      	ldr	r2, [pc, #152]	; (8006fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d022      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f52:	d01d      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a22      	ldr	r2, [pc, #136]	; (8006fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d018      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d013      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1f      	ldr	r2, [pc, #124]	; (8006fec <HAL_TIM_Base_Start_IT+0xdc>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d00e      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1e      	ldr	r2, [pc, #120]	; (8006ff0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d009      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d004      	beq.n	8006f90 <HAL_TIM_Base_Start_IT+0x80>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1b      	ldr	r2, [pc, #108]	; (8006ff8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d115      	bne.n	8006fbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_TIM_Base_Start_IT+0xec>)
 8006f98:	4013      	ands	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b06      	cmp	r3, #6
 8006fa0:	d015      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0xbe>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	d011      	beq.n	8006fce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f042 0201 	orr.w	r2, r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fba:	e008      	b.n	8006fce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e000      	b.n	8006fd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40010000 	.word	0x40010000
 8006fe4:	40000400 	.word	0x40000400
 8006fe8:	40000800 	.word	0x40000800
 8006fec:	40000c00 	.word	0x40000c00
 8006ff0:	40010400 	.word	0x40010400
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40001800 	.word	0x40001800
 8006ffc:	00010007 	.word	0x00010007

08007000 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e08f      	b.n	8007134 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d106      	bne.n	800702e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7fc feb9 	bl	8003da0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2202      	movs	r2, #2
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b3e      	ldr	r3, [pc, #248]	; (800713c <HAL_TIM_Encoder_Init+0x13c>)
 8007042:	400b      	ands	r3, r1
 8007044:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3304      	adds	r3, #4
 800704e:	4619      	mov	r1, r3
 8007050:	4610      	mov	r0, r2
 8007052:	f000 fa71 	bl	8007538 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6a1b      	ldr	r3, [r3, #32]
 800706c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	4313      	orrs	r3, r2
 8007076:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4b31      	ldr	r3, [pc, #196]	; (8007140 <HAL_TIM_Encoder_Init+0x140>)
 800707c:	4013      	ands	r3, r2
 800707e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	4313      	orrs	r3, r2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <HAL_TIM_Encoder_Init+0x144>)
 8007096:	4013      	ands	r3, r2
 8007098:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800709a:	693a      	ldr	r2, [r7, #16]
 800709c:	4b2a      	ldr	r3, [pc, #168]	; (8007148 <HAL_TIM_Encoder_Init+0x148>)
 800709e:	4013      	ands	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	021b      	lsls	r3, r3, #8
 80070ac:	4313      	orrs	r3, r2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	011a      	lsls	r2, r3, #4
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	031b      	lsls	r3, r3, #12
 80070c0:	4313      	orrs	r3, r2
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80070d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685a      	ldr	r2, [r3, #4]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	4313      	orrs	r3, r2
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	fffebff8 	.word	0xfffebff8
 8007140:	fffffcfc 	.word	0xfffffcfc
 8007144:	fffff3f3 	.word	0xfffff3f3
 8007148:	ffff0f0f 	.word	0xffff0f0f

0800714c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800715c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007164:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007174:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d110      	bne.n	800719e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d102      	bne.n	8007188 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007182:	7b7b      	ldrb	r3, [r7, #13]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d001      	beq.n	800718c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e089      	b.n	80072a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800719c:	e031      	b.n	8007202 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d110      	bne.n	80071c6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071a4:	7bbb      	ldrb	r3, [r7, #14]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d102      	bne.n	80071b0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071aa:	7b3b      	ldrb	r3, [r7, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e075      	b.n	80072a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071c4:	e01d      	b.n	8007202 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d108      	bne.n	80071de <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d105      	bne.n	80071de <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80071d2:	7b7b      	ldrb	r3, [r7, #13]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d102      	bne.n	80071de <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80071d8:	7b3b      	ldrb	r3, [r7, #12]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d001      	beq.n	80071e2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e05e      	b.n	80072a0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2202      	movs	r2, #2
 80071f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	2b04      	cmp	r3, #4
 800720c:	d010      	beq.n	8007230 <HAL_TIM_Encoder_Start_IT+0xe4>
 800720e:	e01f      	b.n	8007250 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2201      	movs	r2, #1
 8007216:	2100      	movs	r1, #0
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fa2d 	bl	8007678 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68da      	ldr	r2, [r3, #12]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f042 0202 	orr.w	r2, r2, #2
 800722c:	60da      	str	r2, [r3, #12]
      break;
 800722e:	e02e      	b.n	800728e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2201      	movs	r2, #1
 8007236:	2104      	movs	r1, #4
 8007238:	4618      	mov	r0, r3
 800723a:	f000 fa1d 	bl	8007678 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68da      	ldr	r2, [r3, #12]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f042 0204 	orr.w	r2, r2, #4
 800724c:	60da      	str	r2, [r3, #12]
      break;
 800724e:	e01e      	b.n	800728e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2201      	movs	r2, #1
 8007256:	2100      	movs	r1, #0
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fa0d 	bl	8007678 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2201      	movs	r2, #1
 8007264:	2104      	movs	r1, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fa06 	bl	8007678 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68da      	ldr	r2, [r3, #12]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0202 	orr.w	r2, r2, #2
 800727a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f042 0204 	orr.w	r2, r2, #4
 800728a:	60da      	str	r2, [r3, #12]
      break;
 800728c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d122      	bne.n	8007304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d11b      	bne.n	8007304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f06f 0202 	mvn.w	r2, #2
 80072d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f905 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 80072f0:	e005      	b.n	80072fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8f7 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f908 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0304 	and.w	r3, r3, #4
 800730e:	2b04      	cmp	r3, #4
 8007310:	d122      	bne.n	8007358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b04      	cmp	r3, #4
 800731e:	d11b      	bne.n	8007358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f06f 0204 	mvn.w	r2, #4
 8007328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2202      	movs	r2, #2
 800732e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f8db 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 8007344:	e005      	b.n	8007352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f8cd 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8de 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0308 	and.w	r3, r3, #8
 8007362:	2b08      	cmp	r3, #8
 8007364:	d122      	bne.n	80073ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b08      	cmp	r3, #8
 8007372:	d11b      	bne.n	80073ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f06f 0208 	mvn.w	r2, #8
 800737c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2204      	movs	r2, #4
 8007382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	f003 0303 	and.w	r3, r3, #3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f8b1 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 8007398:	e005      	b.n	80073a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f8a3 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f8b4 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d122      	bne.n	8007400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b10      	cmp	r3, #16
 80073c6:	d11b      	bne.n	8007400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f06f 0210 	mvn.w	r2, #16
 80073d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2208      	movs	r2, #8
 80073d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	69db      	ldr	r3, [r3, #28]
 80073de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f887 	bl	80074fa <HAL_TIM_IC_CaptureCallback>
 80073ec:	e005      	b.n	80073fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f879 	bl	80074e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f88a 	bl	800750e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b01      	cmp	r3, #1
 800740c:	d10e      	bne.n	800742c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	d107      	bne.n	800742c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f06f 0201 	mvn.w	r2, #1
 8007424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fc f986 	bl	8003738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007436:	2b80      	cmp	r3, #128	; 0x80
 8007438:	d10e      	bne.n	8007458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007444:	2b80      	cmp	r3, #128	; 0x80
 8007446:	d107      	bne.n	8007458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9ce 	bl	80077f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	d10e      	bne.n	8007486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007472:	2b80      	cmp	r3, #128	; 0x80
 8007474:	d107      	bne.n	8007486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800747e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f9c1 	bl	8007808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b40      	cmp	r3, #64	; 0x40
 8007492:	d10e      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800749e:	2b40      	cmp	r3, #64	; 0x40
 80074a0:	d107      	bne.n	80074b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f838 	bl	8007522 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	f003 0320 	and.w	r3, r3, #32
 80074bc:	2b20      	cmp	r3, #32
 80074be:	d10e      	bne.n	80074de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d107      	bne.n	80074de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f06f 0220 	mvn.w	r2, #32
 80074d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 f981 	bl	80077e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074de:	bf00      	nop
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007522:	b480      	push	{r7}
 8007524:	b083      	sub	sp, #12
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a40      	ldr	r2, [pc, #256]	; (800764c <TIM_Base_SetConfig+0x114>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d013      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007556:	d00f      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a3d      	ldr	r2, [pc, #244]	; (8007650 <TIM_Base_SetConfig+0x118>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d00b      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <TIM_Base_SetConfig+0x11c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d007      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <TIM_Base_SetConfig+0x120>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d003      	beq.n	8007578 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a3a      	ldr	r2, [pc, #232]	; (800765c <TIM_Base_SetConfig+0x124>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d108      	bne.n	800758a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4313      	orrs	r3, r2
 8007588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a2f      	ldr	r2, [pc, #188]	; (800764c <TIM_Base_SetConfig+0x114>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d02b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007598:	d027      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4a2c      	ldr	r2, [pc, #176]	; (8007650 <TIM_Base_SetConfig+0x118>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d023      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a2b      	ldr	r2, [pc, #172]	; (8007654 <TIM_Base_SetConfig+0x11c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01f      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a2a      	ldr	r2, [pc, #168]	; (8007658 <TIM_Base_SetConfig+0x120>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a29      	ldr	r2, [pc, #164]	; (800765c <TIM_Base_SetConfig+0x124>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d017      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a28      	ldr	r2, [pc, #160]	; (8007660 <TIM_Base_SetConfig+0x128>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a27      	ldr	r2, [pc, #156]	; (8007664 <TIM_Base_SetConfig+0x12c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00f      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <TIM_Base_SetConfig+0x130>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a25      	ldr	r2, [pc, #148]	; (800766c <TIM_Base_SetConfig+0x134>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a24      	ldr	r2, [pc, #144]	; (8007670 <TIM_Base_SetConfig+0x138>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a23      	ldr	r2, [pc, #140]	; (8007674 <TIM_Base_SetConfig+0x13c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <TIM_Base_SetConfig+0x114>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d003      	beq.n	8007630 <TIM_Base_SetConfig+0xf8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a0c      	ldr	r2, [pc, #48]	; (800765c <TIM_Base_SetConfig+0x124>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d103      	bne.n	8007638 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	615a      	str	r2, [r3, #20]
}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800
 800766c:	40001800 	.word	0x40001800
 8007670:	40001c00 	.word	0x40001c00
 8007674:	40002000 	.word	0x40002000

08007678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f003 031f 	and.w	r3, r3, #31
 800768a:	2201      	movs	r2, #1
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	43db      	mvns	r3, r3
 800769a:	401a      	ands	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1a      	ldr	r2, [r3, #32]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f003 031f 	and.w	r3, r3, #31
 80076aa:	6879      	ldr	r1, [r7, #4]
 80076ac:	fa01 f303 	lsl.w	r3, r1, r3
 80076b0:	431a      	orrs	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e06d      	b.n	80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a30      	ldr	r2, [pc, #192]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d004      	beq.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2f      	ldr	r2, [pc, #188]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007716:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007728:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a20      	ldr	r2, [pc, #128]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d022      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774e:	d01d      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1d      	ldr	r2, [pc, #116]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d018      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1c      	ldr	r2, [pc, #112]	; (80077d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d013      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1a      	ldr	r2, [pc, #104]	; (80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00e      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d009      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a16      	ldr	r2, [pc, #88]	; (80077d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d004      	beq.n	800778c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a15      	ldr	r2, [pc, #84]	; (80077dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d10c      	bne.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	4313      	orrs	r3, r2
 800779c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010400 	.word	0x40010400
 80077cc:	40000400 	.word	0x40000400
 80077d0:	40000800 	.word	0x40000800
 80077d4:	40000c00 	.word	0x40000c00
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40001800 	.word	0x40001800

080077e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e040      	b.n	80078b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7fc fb2e 	bl	8003ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2224      	movs	r2, #36	; 0x24
 8007848:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f8b0 	bl	80079c0 <UART_SetConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	2b01      	cmp	r3, #1
 8007864:	d101      	bne.n	800786a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e022      	b.n	80078b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fb08 	bl	8007e88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007886:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007896:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f042 0201 	orr.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb8f 	bl	8007fcc <UART_CheckIdleState>
 80078ae:	4603      	mov	r3, r0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af02      	add	r7, sp, #8
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	4613      	mov	r3, r2
 80078c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078cc:	2b20      	cmp	r3, #32
 80078ce:	d171      	bne.n	80079b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d002      	beq.n	80078dc <HAL_UART_Transmit+0x24>
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d101      	bne.n	80078e0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e06a      	b.n	80079b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2221      	movs	r2, #33	; 0x21
 80078ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078ee:	f7fc fcbb 	bl	8004268 <HAL_GetTick>
 80078f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	88fa      	ldrh	r2, [r7, #6]
 8007900:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790c:	d108      	bne.n	8007920 <HAL_UART_Transmit+0x68>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	61bb      	str	r3, [r7, #24]
 800791e:	e003      	b.n	8007928 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007924:	2300      	movs	r3, #0
 8007926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007928:	e02c      	b.n	8007984 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2200      	movs	r2, #0
 8007932:	2180      	movs	r1, #128	; 0x80
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	f000 fb80 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d001      	beq.n	8007944 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e038      	b.n	80079b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007958:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3302      	adds	r3, #2
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	e007      	b.n	8007972 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	781a      	ldrb	r2, [r3, #0]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	3301      	adds	r3, #1
 8007970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1cc      	bne.n	800792a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	2200      	movs	r2, #0
 8007998:	2140      	movs	r1, #64	; 0x40
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f000 fb4d 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80079a6:	2303      	movs	r3, #3
 80079a8:	e005      	b.n	80079b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2220      	movs	r2, #32
 80079ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	e000      	b.n	80079b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80079b4:	2302      	movs	r3, #2
  }
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	4ba6      	ldr	r3, [pc, #664]	; (8007c84 <UART_SetConfig+0x2c4>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	6979      	ldr	r1, [r7, #20]
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	430a      	orrs	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a94      	ldr	r2, [pc, #592]	; (8007c88 <UART_SetConfig+0x2c8>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d120      	bne.n	8007a7e <UART_SetConfig+0xbe>
 8007a3c:	4b93      	ldr	r3, [pc, #588]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d816      	bhi.n	8007a78 <UART_SetConfig+0xb8>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x90>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a6d 	.word	0x08007a6d
 8007a58:	08007a67 	.word	0x08007a67
 8007a5c:	08007a73 	.word	0x08007a73
 8007a60:	2301      	movs	r3, #1
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	e150      	b.n	8007d08 <UART_SetConfig+0x348>
 8007a66:	2302      	movs	r3, #2
 8007a68:	77fb      	strb	r3, [r7, #31]
 8007a6a:	e14d      	b.n	8007d08 <UART_SetConfig+0x348>
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e14a      	b.n	8007d08 <UART_SetConfig+0x348>
 8007a72:	2308      	movs	r3, #8
 8007a74:	77fb      	strb	r3, [r7, #31]
 8007a76:	e147      	b.n	8007d08 <UART_SetConfig+0x348>
 8007a78:	2310      	movs	r3, #16
 8007a7a:	77fb      	strb	r3, [r7, #31]
 8007a7c:	e144      	b.n	8007d08 <UART_SetConfig+0x348>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a83      	ldr	r2, [pc, #524]	; (8007c90 <UART_SetConfig+0x2d0>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d132      	bne.n	8007aee <UART_SetConfig+0x12e>
 8007a88:	4b80      	ldr	r3, [pc, #512]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a8e:	f003 030c 	and.w	r3, r3, #12
 8007a92:	2b0c      	cmp	r3, #12
 8007a94:	d828      	bhi.n	8007ae8 <UART_SetConfig+0x128>
 8007a96:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <UART_SetConfig+0xdc>)
 8007a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9c:	08007ad1 	.word	0x08007ad1
 8007aa0:	08007ae9 	.word	0x08007ae9
 8007aa4:	08007ae9 	.word	0x08007ae9
 8007aa8:	08007ae9 	.word	0x08007ae9
 8007aac:	08007add 	.word	0x08007add
 8007ab0:	08007ae9 	.word	0x08007ae9
 8007ab4:	08007ae9 	.word	0x08007ae9
 8007ab8:	08007ae9 	.word	0x08007ae9
 8007abc:	08007ad7 	.word	0x08007ad7
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007ae9 	.word	0x08007ae9
 8007acc:	08007ae3 	.word	0x08007ae3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	77fb      	strb	r3, [r7, #31]
 8007ad4:	e118      	b.n	8007d08 <UART_SetConfig+0x348>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e115      	b.n	8007d08 <UART_SetConfig+0x348>
 8007adc:	2304      	movs	r3, #4
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e112      	b.n	8007d08 <UART_SetConfig+0x348>
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e10f      	b.n	8007d08 <UART_SetConfig+0x348>
 8007ae8:	2310      	movs	r3, #16
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e10c      	b.n	8007d08 <UART_SetConfig+0x348>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a68      	ldr	r2, [pc, #416]	; (8007c94 <UART_SetConfig+0x2d4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d120      	bne.n	8007b3a <UART_SetConfig+0x17a>
 8007af8:	4b64      	ldr	r3, [pc, #400]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b02:	2b30      	cmp	r3, #48	; 0x30
 8007b04:	d013      	beq.n	8007b2e <UART_SetConfig+0x16e>
 8007b06:	2b30      	cmp	r3, #48	; 0x30
 8007b08:	d814      	bhi.n	8007b34 <UART_SetConfig+0x174>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d009      	beq.n	8007b22 <UART_SetConfig+0x162>
 8007b0e:	2b20      	cmp	r3, #32
 8007b10:	d810      	bhi.n	8007b34 <UART_SetConfig+0x174>
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <UART_SetConfig+0x15c>
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d006      	beq.n	8007b28 <UART_SetConfig+0x168>
 8007b1a:	e00b      	b.n	8007b34 <UART_SetConfig+0x174>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	77fb      	strb	r3, [r7, #31]
 8007b20:	e0f2      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b22:	2302      	movs	r3, #2
 8007b24:	77fb      	strb	r3, [r7, #31]
 8007b26:	e0ef      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	77fb      	strb	r3, [r7, #31]
 8007b2c:	e0ec      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b2e:	2308      	movs	r3, #8
 8007b30:	77fb      	strb	r3, [r7, #31]
 8007b32:	e0e9      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b34:	2310      	movs	r3, #16
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e0e6      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a56      	ldr	r2, [pc, #344]	; (8007c98 <UART_SetConfig+0x2d8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d120      	bne.n	8007b86 <UART_SetConfig+0x1c6>
 8007b44:	4b51      	ldr	r3, [pc, #324]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b50:	d013      	beq.n	8007b7a <UART_SetConfig+0x1ba>
 8007b52:	2bc0      	cmp	r3, #192	; 0xc0
 8007b54:	d814      	bhi.n	8007b80 <UART_SetConfig+0x1c0>
 8007b56:	2b80      	cmp	r3, #128	; 0x80
 8007b58:	d009      	beq.n	8007b6e <UART_SetConfig+0x1ae>
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	d810      	bhi.n	8007b80 <UART_SetConfig+0x1c0>
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <UART_SetConfig+0x1a8>
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d006      	beq.n	8007b74 <UART_SetConfig+0x1b4>
 8007b66:	e00b      	b.n	8007b80 <UART_SetConfig+0x1c0>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	77fb      	strb	r3, [r7, #31]
 8007b6c:	e0cc      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e0c9      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b74:	2304      	movs	r3, #4
 8007b76:	77fb      	strb	r3, [r7, #31]
 8007b78:	e0c6      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e0c3      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b80:	2310      	movs	r3, #16
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e0c0      	b.n	8007d08 <UART_SetConfig+0x348>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a44      	ldr	r2, [pc, #272]	; (8007c9c <UART_SetConfig+0x2dc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d125      	bne.n	8007bdc <UART_SetConfig+0x21c>
 8007b90:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b9e:	d017      	beq.n	8007bd0 <UART_SetConfig+0x210>
 8007ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba4:	d817      	bhi.n	8007bd6 <UART_SetConfig+0x216>
 8007ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007baa:	d00b      	beq.n	8007bc4 <UART_SetConfig+0x204>
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb0:	d811      	bhi.n	8007bd6 <UART_SetConfig+0x216>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <UART_SetConfig+0x1fe>
 8007bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bba:	d006      	beq.n	8007bca <UART_SetConfig+0x20a>
 8007bbc:	e00b      	b.n	8007bd6 <UART_SetConfig+0x216>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e0a1      	b.n	8007d08 <UART_SetConfig+0x348>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e09e      	b.n	8007d08 <UART_SetConfig+0x348>
 8007bca:	2304      	movs	r3, #4
 8007bcc:	77fb      	strb	r3, [r7, #31]
 8007bce:	e09b      	b.n	8007d08 <UART_SetConfig+0x348>
 8007bd0:	2308      	movs	r3, #8
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e098      	b.n	8007d08 <UART_SetConfig+0x348>
 8007bd6:	2310      	movs	r3, #16
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e095      	b.n	8007d08 <UART_SetConfig+0x348>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <UART_SetConfig+0x2e0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d125      	bne.n	8007c32 <UART_SetConfig+0x272>
 8007be6:	4b29      	ldr	r3, [pc, #164]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf4:	d017      	beq.n	8007c26 <UART_SetConfig+0x266>
 8007bf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bfa:	d817      	bhi.n	8007c2c <UART_SetConfig+0x26c>
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c00:	d00b      	beq.n	8007c1a <UART_SetConfig+0x25a>
 8007c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c06:	d811      	bhi.n	8007c2c <UART_SetConfig+0x26c>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <UART_SetConfig+0x254>
 8007c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c10:	d006      	beq.n	8007c20 <UART_SetConfig+0x260>
 8007c12:	e00b      	b.n	8007c2c <UART_SetConfig+0x26c>
 8007c14:	2301      	movs	r3, #1
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e076      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	77fb      	strb	r3, [r7, #31]
 8007c1e:	e073      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c20:	2304      	movs	r3, #4
 8007c22:	77fb      	strb	r3, [r7, #31]
 8007c24:	e070      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c26:	2308      	movs	r3, #8
 8007c28:	77fb      	strb	r3, [r7, #31]
 8007c2a:	e06d      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	77fb      	strb	r3, [r7, #31]
 8007c30:	e06a      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1b      	ldr	r2, [pc, #108]	; (8007ca4 <UART_SetConfig+0x2e4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d138      	bne.n	8007cae <UART_SetConfig+0x2ee>
 8007c3c:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <UART_SetConfig+0x2cc>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c42:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c4a:	d017      	beq.n	8007c7c <UART_SetConfig+0x2bc>
 8007c4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c50:	d82a      	bhi.n	8007ca8 <UART_SetConfig+0x2e8>
 8007c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c56:	d00b      	beq.n	8007c70 <UART_SetConfig+0x2b0>
 8007c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5c:	d824      	bhi.n	8007ca8 <UART_SetConfig+0x2e8>
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <UART_SetConfig+0x2aa>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c66:	d006      	beq.n	8007c76 <UART_SetConfig+0x2b6>
 8007c68:	e01e      	b.n	8007ca8 <UART_SetConfig+0x2e8>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	77fb      	strb	r3, [r7, #31]
 8007c6e:	e04b      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c70:	2302      	movs	r3, #2
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e048      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c76:	2304      	movs	r3, #4
 8007c78:	77fb      	strb	r3, [r7, #31]
 8007c7a:	e045      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c7c:	2308      	movs	r3, #8
 8007c7e:	77fb      	strb	r3, [r7, #31]
 8007c80:	e042      	b.n	8007d08 <UART_SetConfig+0x348>
 8007c82:	bf00      	nop
 8007c84:	efff69f3 	.word	0xefff69f3
 8007c88:	40011000 	.word	0x40011000
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40004400 	.word	0x40004400
 8007c94:	40004800 	.word	0x40004800
 8007c98:	40004c00 	.word	0x40004c00
 8007c9c:	40005000 	.word	0x40005000
 8007ca0:	40011400 	.word	0x40011400
 8007ca4:	40007800 	.word	0x40007800
 8007ca8:	2310      	movs	r3, #16
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e02c      	b.n	8007d08 <UART_SetConfig+0x348>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a72      	ldr	r2, [pc, #456]	; (8007e7c <UART_SetConfig+0x4bc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d125      	bne.n	8007d04 <UART_SetConfig+0x344>
 8007cb8:	4b71      	ldr	r3, [pc, #452]	; (8007e80 <UART_SetConfig+0x4c0>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cc2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007cc6:	d017      	beq.n	8007cf8 <UART_SetConfig+0x338>
 8007cc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ccc:	d817      	bhi.n	8007cfe <UART_SetConfig+0x33e>
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd2:	d00b      	beq.n	8007cec <UART_SetConfig+0x32c>
 8007cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cd8:	d811      	bhi.n	8007cfe <UART_SetConfig+0x33e>
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <UART_SetConfig+0x326>
 8007cde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ce2:	d006      	beq.n	8007cf2 <UART_SetConfig+0x332>
 8007ce4:	e00b      	b.n	8007cfe <UART_SetConfig+0x33e>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	77fb      	strb	r3, [r7, #31]
 8007cea:	e00d      	b.n	8007d08 <UART_SetConfig+0x348>
 8007cec:	2302      	movs	r3, #2
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e00a      	b.n	8007d08 <UART_SetConfig+0x348>
 8007cf2:	2304      	movs	r3, #4
 8007cf4:	77fb      	strb	r3, [r7, #31]
 8007cf6:	e007      	b.n	8007d08 <UART_SetConfig+0x348>
 8007cf8:	2308      	movs	r3, #8
 8007cfa:	77fb      	strb	r3, [r7, #31]
 8007cfc:	e004      	b.n	8007d08 <UART_SetConfig+0x348>
 8007cfe:	2310      	movs	r3, #16
 8007d00:	77fb      	strb	r3, [r7, #31]
 8007d02:	e001      	b.n	8007d08 <UART_SetConfig+0x348>
 8007d04:	2310      	movs	r3, #16
 8007d06:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d10:	d15b      	bne.n	8007dca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007d12:	7ffb      	ldrb	r3, [r7, #31]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d828      	bhi.n	8007d6a <UART_SetConfig+0x3aa>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <UART_SetConfig+0x360>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d55 	.word	0x08007d55
 8007d2c:	08007d6b 	.word	0x08007d6b
 8007d30:	08007d5b 	.word	0x08007d5b
 8007d34:	08007d6b 	.word	0x08007d6b
 8007d38:	08007d6b 	.word	0x08007d6b
 8007d3c:	08007d6b 	.word	0x08007d6b
 8007d40:	08007d63 	.word	0x08007d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fe76 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8007d48:	61b8      	str	r0, [r7, #24]
        break;
 8007d4a:	e013      	b.n	8007d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fd fe86 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8007d50:	61b8      	str	r0, [r7, #24]
        break;
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d54:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <UART_SetConfig+0x4c4>)
 8007d56:	61bb      	str	r3, [r7, #24]
        break;
 8007d58:	e00c      	b.n	8007d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d5a:	f7fd fd59 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 8007d5e:	61b8      	str	r0, [r7, #24]
        break;
 8007d60:	e008      	b.n	8007d74 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d66:	61bb      	str	r3, [r7, #24]
        break;
 8007d68:	e004      	b.n	8007d74 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	77bb      	strb	r3, [r7, #30]
        break;
 8007d72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d074      	beq.n	8007e64 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	005a      	lsls	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	085b      	lsrs	r3, r3, #1
 8007d84:	441a      	add	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b0f      	cmp	r3, #15
 8007d94:	d916      	bls.n	8007dc4 <UART_SetConfig+0x404>
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d212      	bcs.n	8007dc4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f023 030f 	bic.w	r3, r3, #15
 8007da6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f003 0307 	and.w	r3, r3, #7
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	89fb      	ldrh	r3, [r7, #14]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	89fa      	ldrh	r2, [r7, #14]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	e04f      	b.n	8007e64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	77bb      	strb	r3, [r7, #30]
 8007dc8:	e04c      	b.n	8007e64 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dca:	7ffb      	ldrb	r3, [r7, #31]
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d828      	bhi.n	8007e22 <UART_SetConfig+0x462>
 8007dd0:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x418>)
 8007dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd6:	bf00      	nop
 8007dd8:	08007dfd 	.word	0x08007dfd
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007e23 	.word	0x08007e23
 8007de8:	08007e13 	.word	0x08007e13
 8007dec:	08007e23 	.word	0x08007e23
 8007df0:	08007e23 	.word	0x08007e23
 8007df4:	08007e23 	.word	0x08007e23
 8007df8:	08007e1b 	.word	0x08007e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dfc:	f7fd fe1a 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8007e00:	61b8      	str	r0, [r7, #24]
        break;
 8007e02:	e013      	b.n	8007e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e04:	f7fd fe2a 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8007e08:	61b8      	str	r0, [r7, #24]
        break;
 8007e0a:	e00f      	b.n	8007e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e0c:	4b1d      	ldr	r3, [pc, #116]	; (8007e84 <UART_SetConfig+0x4c4>)
 8007e0e:	61bb      	str	r3, [r7, #24]
        break;
 8007e10:	e00c      	b.n	8007e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e12:	f7fd fcfd 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 8007e16:	61b8      	str	r0, [r7, #24]
        break;
 8007e18:	e008      	b.n	8007e2c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e1e:	61bb      	str	r3, [r7, #24]
        break;
 8007e20:	e004      	b.n	8007e2c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	77bb      	strb	r3, [r7, #30]
        break;
 8007e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d018      	beq.n	8007e64 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	085a      	lsrs	r2, r3, #1
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	441a      	add	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b0f      	cmp	r3, #15
 8007e4a:	d909      	bls.n	8007e60 <UART_SetConfig+0x4a0>
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e52:	d205      	bcs.n	8007e60 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	b29a      	uxth	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	60da      	str	r2, [r3, #12]
 8007e5e:	e001      	b.n	8007e64 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e70:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40007c00 	.word	0x40007c00
 8007e80:	40023800 	.word	0x40023800
 8007e84:	00f42400 	.word	0x00f42400

08007e88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	f003 0320 	and.w	r3, r3, #32
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01a      	beq.n	8007f9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f86:	d10a      	bne.n	8007f9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	430a      	orrs	r2, r1
 8007fbe:	605a      	str	r2, [r3, #4]
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fdc:	f7fc f944 	bl	8004268 <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	d10e      	bne.n	800800e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f81b 	bl	800803a <UART_WaitOnFlagUntilTimeout>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e011      	b.n	8008032 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2220      	movs	r2, #32
 8008012:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b09c      	sub	sp, #112	; 0x70
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	603b      	str	r3, [r7, #0]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800804a:	e0a7      	b.n	800819c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	f000 80a3 	beq.w	800819c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008056:	f7fc f907 	bl	8004268 <HAL_GetTick>
 800805a:	4602      	mov	r2, r0
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008062:	429a      	cmp	r2, r3
 8008064:	d302      	bcc.n	800806c <UART_WaitOnFlagUntilTimeout+0x32>
 8008066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008068:	2b00      	cmp	r3, #0
 800806a:	d13f      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008074:	e853 3f00 	ldrex	r3, [r3]
 8008078:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800807a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008080:	667b      	str	r3, [r7, #100]	; 0x64
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800808a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800808c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008090:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e6      	bne.n	800806c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	663b      	str	r3, [r7, #96]	; 0x60
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3308      	adds	r3, #8
 80080bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080be:	64ba      	str	r2, [r7, #72]	; 0x48
 80080c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80080c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80080cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e5      	bne.n	800809e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2220      	movs	r2, #32
 80080d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2220      	movs	r2, #32
 80080dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e068      	b.n	80081be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0304 	and.w	r3, r3, #4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d050      	beq.n	800819c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008108:	d148      	bne.n	800819c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008112:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008128:	66fb      	str	r3, [r7, #108]	; 0x6c
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	637b      	str	r3, [r7, #52]	; 0x34
 8008134:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008138:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	3308      	adds	r3, #8
 800814c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	613b      	str	r3, [r7, #16]
   return(result);
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f023 0301 	bic.w	r3, r3, #1
 800815c:	66bb      	str	r3, [r7, #104]	; 0x68
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3308      	adds	r3, #8
 8008164:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008166:	623a      	str	r2, [r7, #32]
 8008168:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	69f9      	ldr	r1, [r7, #28]
 800816c:	6a3a      	ldr	r2, [r7, #32]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	61bb      	str	r3, [r7, #24]
   return(result);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2220      	movs	r2, #32
 800817e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2220      	movs	r2, #32
 8008184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e010      	b.n	80081be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69da      	ldr	r2, [r3, #28]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4013      	ands	r3, r2
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	bf0c      	ite	eq
 80081ac:	2301      	moveq	r3, #1
 80081ae:	2300      	movne	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	79fb      	ldrb	r3, [r7, #7]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	f43f af48 	beq.w	800804c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3770      	adds	r7, #112	; 0x70
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80081cc:	4904      	ldr	r1, [pc, #16]	; (80081e0 <MX_FATFS_Init+0x18>)
 80081ce:	4805      	ldr	r0, [pc, #20]	; (80081e4 <MX_FATFS_Init+0x1c>)
 80081d0:	f000 f8ae 	bl	8008330 <FATFS_LinkDriver>
 80081d4:	4603      	mov	r3, r0
 80081d6:	461a      	mov	r2, r3
 80081d8:	4b03      	ldr	r3, [pc, #12]	; (80081e8 <MX_FATFS_Init+0x20>)
 80081da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081dc:	bf00      	nop
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	20000e54 	.word	0x20000e54
 80081e4:	20000038 	.word	0x20000038
 80081e8:	20000e50 	.word	0x20000e50

080081ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	4603      	mov	r3, r0
 80081f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80081f6:	79fb      	ldrb	r3, [r7, #7]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7f9 f907 	bl	800140c <SD_disk_initialize>
 80081fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	4603      	mov	r3, r0
 8008210:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8008212:	79fb      	ldrb	r3, [r7, #7]
 8008214:	4618      	mov	r0, r3
 8008216:	f7f9 f9e3 	bl	80015e0 <SD_disk_status>
 800821a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60b9      	str	r1, [r7, #8]
 800822c:	607a      	str	r2, [r7, #4]
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 8008234:	7bf8      	ldrb	r0, [r7, #15]
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	68b9      	ldr	r1, [r7, #8]
 800823c:	f7f9 f9e6 	bl	800160c <SD_disk_read>
 8008240:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b084      	sub	sp, #16
 800824e:	af00      	add	r7, sp, #0
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800825a:	7bf8      	ldrb	r0, [r7, #15]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	68b9      	ldr	r1, [r7, #8]
 8008262:	f7f9 fa3d 	bl	80016e0 <SD_disk_write>
 8008266:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	603a      	str	r2, [r7, #0]
 800827a:	71fb      	strb	r3, [r7, #7]
 800827c:	460b      	mov	r3, r1
 800827e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 8008280:	79b9      	ldrb	r1, [r7, #6]
 8008282:	79fb      	ldrb	r3, [r7, #7]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	4618      	mov	r0, r3
 8008288:	f7f9 faae 	bl	80017e8 <SD_disk_ioctl>
 800828c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
	...

08008298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	4613      	mov	r3, r2
 80082a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082b0:	7a5b      	ldrb	r3, [r3, #9]
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d131      	bne.n	800831c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082b8:	4b1c      	ldr	r3, [pc, #112]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082ba:	7a5b      	ldrb	r3, [r3, #9]
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	461a      	mov	r2, r3
 80082c0:	4b1a      	ldr	r3, [pc, #104]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082c2:	2100      	movs	r1, #0
 80082c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082c6:	4b19      	ldr	r3, [pc, #100]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082c8:	7a5b      	ldrb	r3, [r3, #9]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	4a17      	ldr	r2, [pc, #92]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	4413      	add	r3, r2
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082d6:	4b15      	ldr	r3, [pc, #84]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082d8:	7a5b      	ldrb	r3, [r3, #9]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082e0:	4413      	add	r3, r2
 80082e2:	79fa      	ldrb	r2, [r7, #7]
 80082e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082e6:	4b11      	ldr	r3, [pc, #68]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082e8:	7a5b      	ldrb	r3, [r3, #9]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	1c5a      	adds	r2, r3, #1
 80082ee:	b2d1      	uxtb	r1, r2
 80082f0:	4a0e      	ldr	r2, [pc, #56]	; (800832c <FATFS_LinkDriverEx+0x94>)
 80082f2:	7251      	strb	r1, [r2, #9]
 80082f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082f6:	7dbb      	ldrb	r3, [r7, #22]
 80082f8:	3330      	adds	r3, #48	; 0x30
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3301      	adds	r3, #1
 8008304:	223a      	movs	r2, #58	; 0x3a
 8008306:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3302      	adds	r3, #2
 800830c:	222f      	movs	r2, #47	; 0x2f
 800830e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	3303      	adds	r3, #3
 8008314:	2200      	movs	r2, #0
 8008316:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008318:	2300      	movs	r3, #0
 800831a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	20000e58 	.word	0x20000e58

08008330 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	6839      	ldr	r1, [r7, #0]
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f7ff ffaa 	bl	8008298 <FATFS_LinkDriverEx>
 8008344:	4603      	mov	r3, r0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	4603      	mov	r3, r0
 8008356:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800835c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008360:	2b84      	cmp	r3, #132	; 0x84
 8008362:	d005      	beq.n	8008370 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008364:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	3303      	adds	r3, #3
 800836e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008370:	68fb      	ldr	r3, [r7, #12]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008382:	f000 fc4f 	bl	8008c24 <vTaskStartScheduler>
  
  return osOK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}

0800838c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800838c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800838e:	b089      	sub	sp, #36	; 0x24
 8008390:	af04      	add	r7, sp, #16
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d020      	beq.n	80083e0 <osThreadCreate+0x54>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01c      	beq.n	80083e0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	685c      	ldr	r4, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	691e      	ldr	r6, [r3, #16]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ffc8 	bl	800834e <makeFreeRtosPriority>
 80083be:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083c8:	9202      	str	r2, [sp, #8]
 80083ca:	9301      	str	r3, [sp, #4]
 80083cc:	9100      	str	r1, [sp, #0]
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	4632      	mov	r2, r6
 80083d2:	4629      	mov	r1, r5
 80083d4:	4620      	mov	r0, r4
 80083d6:	f000 f9b8 	bl	800874a <xTaskCreateStatic>
 80083da:	4603      	mov	r3, r0
 80083dc:	60fb      	str	r3, [r7, #12]
 80083de:	e01c      	b.n	800841a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685c      	ldr	r4, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083ec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7ff ffaa 	bl	800834e <makeFreeRtosPriority>
 80083fa:	4602      	mov	r2, r0
 80083fc:	f107 030c 	add.w	r3, r7, #12
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	9200      	str	r2, [sp, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	4632      	mov	r2, r6
 8008408:	4629      	mov	r1, r5
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fa00 	bl	8008810 <xTaskCreate>
 8008410:	4603      	mov	r3, r0
 8008412:	2b01      	cmp	r3, #1
 8008414:	d001      	beq.n	800841a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008416:	2300      	movs	r3, #0
 8008418:	e000      	b.n	800841c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800841a:	68fb      	ldr	r3, [r7, #12]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3714      	adds	r7, #20
 8008420:	46bd      	mov	sp, r7
 8008422:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008424 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <osDelay+0x16>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	e000      	b.n	800843c <osDelay+0x18>
 800843a:	2301      	movs	r3, #1
 800843c:	4618      	mov	r0, r3
 800843e:	f000 fbbb 	bl	8008bb8 <vTaskDelay>
  
  return osOK;
 8008442:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f103 0208 	add.w	r2, r3, #8
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f04f 32ff 	mov.w	r2, #4294967295
 8008464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f103 0208 	add.w	r2, r3, #8
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f103 0208 	add.w	r2, r3, #8
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	1c5a      	adds	r2, r3, #1
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084ee:	b480      	push	{r7}
 80084f0:	b085      	sub	sp, #20
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d103      	bne.n	800850e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	e00c      	b.n	8008528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	3308      	adds	r3, #8
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	e002      	b.n	800851c <vListInsert+0x2e>
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	429a      	cmp	r2, r3
 8008526:	d2f6      	bcs.n	8008516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6892      	ldr	r2, [r2, #8]
 8008576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	6852      	ldr	r2, [r2, #4]
 8008580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	429a      	cmp	r2, r3
 800858a:	d103      	bne.n	8008594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	1e5a      	subs	r2, r3, #1
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10c      	bne.n	80085e2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	b672      	cpsid	i
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	b662      	cpsie	i
 80085dc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085de:	bf00      	nop
 80085e0:	e7fe      	b.n	80085e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80085e2:	f001 f81b 	bl	800961c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ee:	68f9      	ldr	r1, [r7, #12]
 80085f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	441a      	add	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008612:	3b01      	subs	r3, #1
 8008614:	68f9      	ldr	r1, [r7, #12]
 8008616:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008618:	fb01 f303 	mul.w	r3, r1, r3
 800861c:	441a      	add	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	22ff      	movs	r2, #255	; 0xff
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	; 0xff
 800862e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d114      	bne.n	8008662 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01a      	beq.n	8008676 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	3310      	adds	r3, #16
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fd35 	bl	80090b4 <xTaskRemoveFromEventList>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d012      	beq.n	8008676 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <xQueueGenericReset+0xd0>)
 8008652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	e009      	b.n	8008676 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	3310      	adds	r3, #16
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fef0 	bl	800844c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3324      	adds	r3, #36	; 0x24
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff feeb 	bl	800844c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008676:	f001 f805 	bl	8009684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800867a:	2301      	movs	r3, #1
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	e000ed04 	.word	0xe000ed04

08008688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af02      	add	r7, sp, #8
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10c      	bne.n	80086b6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a0:	b672      	cpsid	i
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	b662      	cpsie	i
 80086b0:	613b      	str	r3, [r7, #16]
}
 80086b2:	bf00      	nop
 80086b4:	e7fe      	b.n	80086b4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d102      	bne.n	80086c2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086bc:	2300      	movs	r3, #0
 80086be:	61fb      	str	r3, [r7, #28]
 80086c0:	e004      	b.n	80086cc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	3348      	adds	r3, #72	; 0x48
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 f88b 	bl	80097ec <pvPortMalloc>
 80086d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d011      	beq.n	8008702 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3348      	adds	r3, #72	; 0x48
 80086e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086f0:	79fa      	ldrb	r2, [r7, #7]
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	4613      	mov	r3, r2
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f805 	bl	800870c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008702:	69bb      	ldr	r3, [r7, #24]
	}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008720:	69bb      	ldr	r3, [r7, #24]
 8008722:	69ba      	ldr	r2, [r7, #24]
 8008724:	601a      	str	r2, [r3, #0]
 8008726:	e002      	b.n	800872e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800873a:	2101      	movs	r1, #1
 800873c:	69b8      	ldr	r0, [r7, #24]
 800873e:	f7ff ff39 	bl	80085b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008742:	bf00      	nop
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800874a:	b580      	push	{r7, lr}
 800874c:	b08e      	sub	sp, #56	; 0x38
 800874e:	af04      	add	r7, sp, #16
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10c      	bne.n	8008778 <xTaskCreateStatic+0x2e>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	b672      	cpsid	i
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	b662      	cpsie	i
 8008772:	623b      	str	r3, [r7, #32]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10c      	bne.n	8008798 <xTaskCreateStatic+0x4e>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008782:	b672      	cpsid	i
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	b662      	cpsie	i
 8008792:	61fb      	str	r3, [r7, #28]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008798:	23a0      	movs	r3, #160	; 0xa0
 800879a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	2ba0      	cmp	r3, #160	; 0xa0
 80087a0:	d00c      	beq.n	80087bc <xTaskCreateStatic+0x72>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	b672      	cpsid	i
 80087a8:	f383 8811 	msr	BASEPRI, r3
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f3bf 8f4f 	dsb	sy
 80087b4:	b662      	cpsie	i
 80087b6:	61bb      	str	r3, [r7, #24]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01e      	beq.n	8008802 <xTaskCreateStatic+0xb8>
 80087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d01b      	beq.n	8008802 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087d2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087dc:	2300      	movs	r3, #0
 80087de:	9303      	str	r3, [sp, #12]
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	9302      	str	r3, [sp, #8]
 80087e4:	f107 0314 	add.w	r3, r7, #20
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f851 	bl	800889c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087fc:	f000 f8ee 	bl	80089dc <prvAddNewTaskToReadyList>
 8008800:	e001      	b.n	8008806 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008806:	697b      	ldr	r3, [r7, #20]
	}
 8008808:	4618      	mov	r0, r3
 800880a:	3728      	adds	r7, #40	; 0x28
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af04      	add	r7, sp, #16
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	4613      	mov	r3, r2
 800881e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008820:	88fb      	ldrh	r3, [r7, #6]
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	4618      	mov	r0, r3
 8008826:	f000 ffe1 	bl	80097ec <pvPortMalloc>
 800882a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008832:	20a0      	movs	r0, #160	; 0xa0
 8008834:	f000 ffda 	bl	80097ec <pvPortMalloc>
 8008838:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	631a      	str	r2, [r3, #48]	; 0x30
 8008846:	e005      	b.n	8008854 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008848:	6978      	ldr	r0, [r7, #20]
 800884a:	f001 f899 	bl	8009980 <vPortFree>
 800884e:	e001      	b.n	8008854 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d017      	beq.n	800888a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008862:	88fa      	ldrh	r2, [r7, #6]
 8008864:	2300      	movs	r3, #0
 8008866:	9303      	str	r3, [sp, #12]
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	9301      	str	r3, [sp, #4]
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 f80f 	bl	800889c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800887e:	69f8      	ldr	r0, [r7, #28]
 8008880:	f000 f8ac 	bl	80089dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008884:	2301      	movs	r3, #1
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	e002      	b.n	8008890 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008890:	69bb      	ldr	r3, [r7, #24]
	}
 8008892:	4618      	mov	r0, r3
 8008894:	3720      	adds	r7, #32
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b088      	sub	sp, #32
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	607a      	str	r2, [r7, #4]
 80088a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80088b4:	440b      	add	r3, r1
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	f023 0307 	bic.w	r3, r3, #7
 80088c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f003 0307 	and.w	r3, r3, #7
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00c      	beq.n	80088e8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	b672      	cpsid	i
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	b662      	cpsie	i
 80088e2:	617b      	str	r3, [r7, #20]
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01f      	beq.n	800892e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088ee:	2300      	movs	r3, #0
 80088f0:	61fb      	str	r3, [r7, #28]
 80088f2:	e012      	b.n	800891a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	7819      	ldrb	r1, [r3, #0]
 80088fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	4413      	add	r3, r2
 8008902:	3334      	adds	r3, #52	; 0x34
 8008904:	460a      	mov	r2, r1
 8008906:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	4413      	add	r3, r2
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d006      	beq.n	8008922 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	3301      	adds	r3, #1
 8008918:	61fb      	str	r3, [r7, #28]
 800891a:	69fb      	ldr	r3, [r7, #28]
 800891c:	2b0f      	cmp	r3, #15
 800891e:	d9e9      	bls.n	80088f4 <prvInitialiseNewTask+0x58>
 8008920:	e000      	b.n	8008924 <prvInitialiseNewTask+0x88>
			{
				break;
 8008922:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800892c:	e003      	b.n	8008936 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	2b06      	cmp	r3, #6
 800893a:	d901      	bls.n	8008940 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800893c:	2306      	movs	r3, #6
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008944:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800894a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	2200      	movs	r2, #0
 8008950:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	3304      	adds	r3, #4
 8008956:	4618      	mov	r0, r3
 8008958:	f7ff fd98 	bl	800848c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	3318      	adds	r3, #24
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fd93 	bl	800848c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800896c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896e:	f1c3 0207 	rsb	r2, r3, #7
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800897c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	2200      	movs	r2, #0
 8008988:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	334c      	adds	r3, #76	; 0x4c
 8008990:	224c      	movs	r2, #76	; 0x4c
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f90d 	bl	8009bb4 <memset>
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <prvInitialiseNewTask+0x134>)
 800899e:	651a      	str	r2, [r3, #80]	; 0x50
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	4a0c      	ldr	r2, [pc, #48]	; (80089d4 <prvInitialiseNewTask+0x138>)
 80089a4:	655a      	str	r2, [r3, #84]	; 0x54
 80089a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a8:	4a0b      	ldr	r2, [pc, #44]	; (80089d8 <prvInitialiseNewTask+0x13c>)
 80089aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	68f9      	ldr	r1, [r7, #12]
 80089b0:	69b8      	ldr	r0, [r7, #24]
 80089b2:	f000 fd25 	bl	8009400 <pxPortInitialiseStack>
 80089b6:	4602      	mov	r2, r0
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d002      	beq.n	80089c8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c8:	bf00      	nop
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20004bb0 	.word	0x20004bb0
 80089d4:	20004c18 	.word	0x20004c18
 80089d8:	20004c80 	.word	0x20004c80

080089dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089e4:	f000 fe1a 	bl	800961c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089e8:	4b2a      	ldr	r3, [pc, #168]	; (8008a94 <prvAddNewTaskToReadyList+0xb8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3301      	adds	r3, #1
 80089ee:	4a29      	ldr	r2, [pc, #164]	; (8008a94 <prvAddNewTaskToReadyList+0xb8>)
 80089f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089f2:	4b29      	ldr	r3, [pc, #164]	; (8008a98 <prvAddNewTaskToReadyList+0xbc>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d109      	bne.n	8008a0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089fa:	4a27      	ldr	r2, [pc, #156]	; (8008a98 <prvAddNewTaskToReadyList+0xbc>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <prvAddNewTaskToReadyList+0xb8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d110      	bne.n	8008a2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a08:	f000 fbd0 	bl	80091ac <prvInitialiseTaskLists>
 8008a0c:	e00d      	b.n	8008a2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a0e:	4b23      	ldr	r3, [pc, #140]	; (8008a9c <prvAddNewTaskToReadyList+0xc0>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d109      	bne.n	8008a2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008a16:	4b20      	ldr	r3, [pc, #128]	; (8008a98 <prvAddNewTaskToReadyList+0xbc>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d802      	bhi.n	8008a2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008a24:	4a1c      	ldr	r2, [pc, #112]	; (8008a98 <prvAddNewTaskToReadyList+0xbc>)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <prvAddNewTaskToReadyList+0xc4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	4a1b      	ldr	r2, [pc, #108]	; (8008aa0 <prvAddNewTaskToReadyList+0xc4>)
 8008a32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	2201      	movs	r2, #1
 8008a3a:	409a      	lsls	r2, r3
 8008a3c:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <prvAddNewTaskToReadyList+0xc8>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	4a18      	ldr	r2, [pc, #96]	; (8008aa4 <prvAddNewTaskToReadyList+0xc8>)
 8008a44:	6013      	str	r3, [r2, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <prvAddNewTaskToReadyList+0xcc>)
 8008a54:	441a      	add	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3304      	adds	r3, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f7ff fd22 	bl	80084a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a62:	f000 fe0f 	bl	8009684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a66:	4b0d      	ldr	r3, [pc, #52]	; (8008a9c <prvAddNewTaskToReadyList+0xc0>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00e      	beq.n	8008a8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a6e:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <prvAddNewTaskToReadyList+0xbc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d207      	bcs.n	8008a8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	; (8008aac <prvAddNewTaskToReadyList+0xd0>)
 8008a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a8c:	bf00      	nop
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	20000f64 	.word	0x20000f64
 8008a98:	20000e64 	.word	0x20000e64
 8008a9c:	20000f70 	.word	0x20000f70
 8008aa0:	20000f80 	.word	0x20000f80
 8008aa4:	20000f6c 	.word	0x20000f6c
 8008aa8:	20000e68 	.word	0x20000e68
 8008aac:	e000ed04 	.word	0xe000ed04

08008ab0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08a      	sub	sp, #40	; 0x28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10c      	bne.n	8008ade <vTaskDelayUntil+0x2e>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	b672      	cpsid	i
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	b662      	cpsie	i
 8008ad8:	617b      	str	r3, [r7, #20]
}
 8008ada:	bf00      	nop
 8008adc:	e7fe      	b.n	8008adc <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10c      	bne.n	8008afe <vTaskDelayUntil+0x4e>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	b672      	cpsid	i
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	b662      	cpsie	i
 8008af8:	613b      	str	r3, [r7, #16]
}
 8008afa:	bf00      	nop
 8008afc:	e7fe      	b.n	8008afc <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 8008afe:	4b2b      	ldr	r3, [pc, #172]	; (8008bac <vTaskDelayUntil+0xfc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d00c      	beq.n	8008b20 <vTaskDelayUntil+0x70>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	b672      	cpsid	i
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	b662      	cpsie	i
 8008b1a:	60fb      	str	r3, [r7, #12]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 8008b20:	f000 f8ee 	bl	8008d00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008b24:	4b22      	ldr	r3, [pc, #136]	; (8008bb0 <vTaskDelayUntil+0x100>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4413      	add	r3, r2
 8008b32:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6a3a      	ldr	r2, [r7, #32]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d20b      	bcs.n	8008b56 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d211      	bcs.n	8008b6c <vTaskDelayUntil+0xbc>
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d90d      	bls.n	8008b6c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	627b      	str	r3, [r7, #36]	; 0x24
 8008b54:	e00a      	b.n	8008b6c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d303      	bcc.n	8008b68 <vTaskDelayUntil+0xb8>
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d901      	bls.n	8008b6c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fbd7 	bl	8009334 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008b86:	f000 f8c9 	bl	8008d1c <xTaskResumeAll>
 8008b8a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d107      	bne.n	8008ba2 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 8008b92:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <vTaskDelayUntil+0x104>)
 8008b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ba2:	bf00      	nop
 8008ba4:	3728      	adds	r7, #40	; 0x28
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20000f8c 	.word	0x20000f8c
 8008bb0:	20000f68 	.word	0x20000f68
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d019      	beq.n	8008bfe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008bca:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <vTaskDelay+0x64>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00c      	beq.n	8008bec <vTaskDelay+0x34>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	b672      	cpsid	i
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	b662      	cpsie	i
 8008be6:	60bb      	str	r3, [r7, #8]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008bec:	f000 f888 	bl	8008d00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fb9e 	bl	8009334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008bf8:	f000 f890 	bl	8008d1c <xTaskResumeAll>
 8008bfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d107      	bne.n	8008c14 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008c04:	4b06      	ldr	r3, [pc, #24]	; (8008c20 <vTaskDelay+0x68>)
 8008c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c0a:	601a      	str	r2, [r3, #0]
 8008c0c:	f3bf 8f4f 	dsb	sy
 8008c10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c14:	bf00      	nop
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20000f8c 	.word	0x20000f8c
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	; 0x28
 8008c28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c32:	463a      	mov	r2, r7
 8008c34:	1d39      	adds	r1, r7, #4
 8008c36:	f107 0308 	add.w	r3, r7, #8
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7f8 ff06 	bl	8001a4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	9202      	str	r2, [sp, #8]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	460a      	mov	r2, r1
 8008c52:	4923      	ldr	r1, [pc, #140]	; (8008ce0 <vTaskStartScheduler+0xbc>)
 8008c54:	4823      	ldr	r0, [pc, #140]	; (8008ce4 <vTaskStartScheduler+0xc0>)
 8008c56:	f7ff fd78 	bl	800874a <xTaskCreateStatic>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4a22      	ldr	r2, [pc, #136]	; (8008ce8 <vTaskStartScheduler+0xc4>)
 8008c5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008c60:	4b21      	ldr	r3, [pc, #132]	; (8008ce8 <vTaskStartScheduler+0xc4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d002      	beq.n	8008c6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	617b      	str	r3, [r7, #20]
 8008c6c:	e001      	b.n	8008c72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d11d      	bne.n	8008cb4 <vTaskStartScheduler+0x90>
	__asm volatile
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	b672      	cpsid	i
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	b662      	cpsie	i
 8008c8c:	613b      	str	r3, [r7, #16]
}
 8008c8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c90:	4b16      	ldr	r3, [pc, #88]	; (8008cec <vTaskStartScheduler+0xc8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	334c      	adds	r3, #76	; 0x4c
 8008c96:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <vTaskStartScheduler+0xcc>)
 8008c98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c9a:	4b16      	ldr	r3, [pc, #88]	; (8008cf4 <vTaskStartScheduler+0xd0>)
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <vTaskStartScheduler+0xd4>)
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ca8:	4b14      	ldr	r3, [pc, #80]	; (8008cfc <vTaskStartScheduler+0xd8>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008cae:	f000 fc37 	bl	8009520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008cb2:	e010      	b.n	8008cd6 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d10c      	bne.n	8008cd6 <vTaskStartScheduler+0xb2>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	b672      	cpsid	i
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	b662      	cpsie	i
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <vTaskStartScheduler+0xb0>
}
 8008cd6:	bf00      	nop
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	0800ae5c 	.word	0x0800ae5c
 8008ce4:	0800917d 	.word	0x0800917d
 8008ce8:	20000f88 	.word	0x20000f88
 8008cec:	20000e64 	.word	0x20000e64
 8008cf0:	2000009c 	.word	0x2000009c
 8008cf4:	20000f84 	.word	0x20000f84
 8008cf8:	20000f70 	.word	0x20000f70
 8008cfc:	20000f68 	.word	0x20000f68

08008d00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d00:	b480      	push	{r7}
 8008d02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008d04:	4b04      	ldr	r3, [pc, #16]	; (8008d18 <vTaskSuspendAll+0x18>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	4a03      	ldr	r2, [pc, #12]	; (8008d18 <vTaskSuspendAll+0x18>)
 8008d0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008d0e:	bf00      	nop
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	20000f8c 	.word	0x20000f8c

08008d1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d22:	2300      	movs	r3, #0
 8008d24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d2a:	4b42      	ldr	r3, [pc, #264]	; (8008e34 <xTaskResumeAll+0x118>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <xTaskResumeAll+0x30>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	603b      	str	r3, [r7, #0]
}
 8008d48:	bf00      	nop
 8008d4a:	e7fe      	b.n	8008d4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d4c:	f000 fc66 	bl	800961c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d50:	4b38      	ldr	r3, [pc, #224]	; (8008e34 <xTaskResumeAll+0x118>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	4a37      	ldr	r2, [pc, #220]	; (8008e34 <xTaskResumeAll+0x118>)
 8008d58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d5a:	4b36      	ldr	r3, [pc, #216]	; (8008e34 <xTaskResumeAll+0x118>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d161      	bne.n	8008e26 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d62:	4b35      	ldr	r3, [pc, #212]	; (8008e38 <xTaskResumeAll+0x11c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d05d      	beq.n	8008e26 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d6a:	e02e      	b.n	8008dca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6c:	4b33      	ldr	r3, [pc, #204]	; (8008e3c <xTaskResumeAll+0x120>)
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3318      	adds	r3, #24
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7ff fbf1 	bl	8008560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3304      	adds	r3, #4
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7ff fbec 	bl	8008560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	4b2b      	ldr	r3, [pc, #172]	; (8008e40 <xTaskResumeAll+0x124>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	4a2a      	ldr	r2, [pc, #168]	; (8008e40 <xTaskResumeAll+0x124>)
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4a27      	ldr	r2, [pc, #156]	; (8008e44 <xTaskResumeAll+0x128>)
 8008da8:	441a      	add	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7ff fb78 	bl	80084a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dba:	4b23      	ldr	r3, [pc, #140]	; (8008e48 <xTaskResumeAll+0x12c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d302      	bcc.n	8008dca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008dc4:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <xTaskResumeAll+0x130>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dca:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <xTaskResumeAll+0x120>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1cc      	bne.n	8008d6c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008dd8:	f000 fa8c 	bl	80092f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ddc:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <xTaskResumeAll+0x134>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d010      	beq.n	8008e0a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008de8:	f000 f846 	bl	8008e78 <xTaskIncrementTick>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008df2:	4b16      	ldr	r3, [pc, #88]	; (8008e4c <xTaskResumeAll+0x130>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1f1      	bne.n	8008de8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <xTaskResumeAll+0x134>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e0a:	4b10      	ldr	r3, [pc, #64]	; (8008e4c <xTaskResumeAll+0x130>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e16:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <xTaskResumeAll+0x138>)
 8008e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e26:	f000 fc2d 	bl	8009684 <vPortExitCritical>

	return xAlreadyYielded;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20000f8c 	.word	0x20000f8c
 8008e38:	20000f64 	.word	0x20000f64
 8008e3c:	20000f24 	.word	0x20000f24
 8008e40:	20000f6c 	.word	0x20000f6c
 8008e44:	20000e68 	.word	0x20000e68
 8008e48:	20000e64 	.word	0x20000e64
 8008e4c:	20000f78 	.word	0x20000f78
 8008e50:	20000f74 	.word	0x20000f74
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008e5e:	4b05      	ldr	r3, [pc, #20]	; (8008e74 <xTaskGetTickCount+0x1c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008e64:	687b      	ldr	r3, [r7, #4]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000f68 	.word	0x20000f68

08008e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e82:	4b4f      	ldr	r3, [pc, #316]	; (8008fc0 <xTaskIncrementTick+0x148>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	f040 808a 	bne.w	8008fa0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e8c:	4b4d      	ldr	r3, [pc, #308]	; (8008fc4 <xTaskIncrementTick+0x14c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	3301      	adds	r3, #1
 8008e92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008e94:	4a4b      	ldr	r2, [pc, #300]	; (8008fc4 <xTaskIncrementTick+0x14c>)
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d122      	bne.n	8008ee6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ea0:	4b49      	ldr	r3, [pc, #292]	; (8008fc8 <xTaskIncrementTick+0x150>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00c      	beq.n	8008ec4 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eae:	b672      	cpsid	i
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	b662      	cpsie	i
 8008ebe:	603b      	str	r3, [r7, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	e7fe      	b.n	8008ec2 <xTaskIncrementTick+0x4a>
 8008ec4:	4b40      	ldr	r3, [pc, #256]	; (8008fc8 <xTaskIncrementTick+0x150>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	4b40      	ldr	r3, [pc, #256]	; (8008fcc <xTaskIncrementTick+0x154>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a3e      	ldr	r2, [pc, #248]	; (8008fc8 <xTaskIncrementTick+0x150>)
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	4a3e      	ldr	r2, [pc, #248]	; (8008fcc <xTaskIncrementTick+0x154>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	4b3d      	ldr	r3, [pc, #244]	; (8008fd0 <xTaskIncrementTick+0x158>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3301      	adds	r3, #1
 8008ede:	4a3c      	ldr	r2, [pc, #240]	; (8008fd0 <xTaskIncrementTick+0x158>)
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	f000 fa07 	bl	80092f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008ee6:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <xTaskIncrementTick+0x15c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d348      	bcc.n	8008f82 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ef0:	4b35      	ldr	r3, [pc, #212]	; (8008fc8 <xTaskIncrementTick+0x150>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efa:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <xTaskIncrementTick+0x15c>)
 8008efc:	f04f 32ff 	mov.w	r2, #4294967295
 8008f00:	601a      	str	r2, [r3, #0]
					break;
 8008f02:	e03e      	b.n	8008f82 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f04:	4b30      	ldr	r3, [pc, #192]	; (8008fc8 <xTaskIncrementTick+0x150>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d203      	bcs.n	8008f24 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f1c:	4a2d      	ldr	r2, [pc, #180]	; (8008fd4 <xTaskIncrementTick+0x15c>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f22:	e02e      	b.n	8008f82 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fb19 	bl	8008560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d004      	beq.n	8008f40 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	3318      	adds	r3, #24
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fb10 	bl	8008560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f44:	2201      	movs	r2, #1
 8008f46:	409a      	lsls	r2, r3
 8008f48:	4b23      	ldr	r3, [pc, #140]	; (8008fd8 <xTaskIncrementTick+0x160>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	4a22      	ldr	r2, [pc, #136]	; (8008fd8 <xTaskIncrementTick+0x160>)
 8008f50:	6013      	str	r3, [r2, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4a1f      	ldr	r2, [pc, #124]	; (8008fdc <xTaskIncrementTick+0x164>)
 8008f60:	441a      	add	r2, r3
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f7ff fa9c 	bl	80084a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <xTaskIncrementTick+0x168>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d3b9      	bcc.n	8008ef0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f80:	e7b6      	b.n	8008ef0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008f82:	4b17      	ldr	r3, [pc, #92]	; (8008fe0 <xTaskIncrementTick+0x168>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	4914      	ldr	r1, [pc, #80]	; (8008fdc <xTaskIncrementTick+0x164>)
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d907      	bls.n	8008faa <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	e004      	b.n	8008faa <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008fa0:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <xTaskIncrementTick+0x16c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	4a0f      	ldr	r2, [pc, #60]	; (8008fe4 <xTaskIncrementTick+0x16c>)
 8008fa8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <xTaskIncrementTick+0x170>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008fb6:	697b      	ldr	r3, [r7, #20]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	20000f8c 	.word	0x20000f8c
 8008fc4:	20000f68 	.word	0x20000f68
 8008fc8:	20000f1c 	.word	0x20000f1c
 8008fcc:	20000f20 	.word	0x20000f20
 8008fd0:	20000f7c 	.word	0x20000f7c
 8008fd4:	20000f84 	.word	0x20000f84
 8008fd8:	20000f6c 	.word	0x20000f6c
 8008fdc:	20000e68 	.word	0x20000e68
 8008fe0:	20000e64 	.word	0x20000e64
 8008fe4:	20000f74 	.word	0x20000f74
 8008fe8:	20000f78 	.word	0x20000f78

08008fec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008fec:	b480      	push	{r7}
 8008fee:	b087      	sub	sp, #28
 8008ff0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ff2:	4b2a      	ldr	r3, [pc, #168]	; (800909c <vTaskSwitchContext+0xb0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ffa:	4b29      	ldr	r3, [pc, #164]	; (80090a0 <vTaskSwitchContext+0xb4>)
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009000:	e046      	b.n	8009090 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009002:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <vTaskSwitchContext+0xb4>)
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009008:	4b26      	ldr	r3, [pc, #152]	; (80090a4 <vTaskSwitchContext+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	fab3 f383 	clz	r3, r3
 8009014:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	f1c3 031f 	rsb	r3, r3, #31
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	4922      	ldr	r1, [pc, #136]	; (80090a8 <vTaskSwitchContext+0xbc>)
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	440b      	add	r3, r1
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10c      	bne.n	800904c <vTaskSwitchContext+0x60>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	b672      	cpsid	i
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	b662      	cpsie	i
 8009046:	607b      	str	r3, [r7, #4]
}
 8009048:	bf00      	nop
 800904a:	e7fe      	b.n	800904a <vTaskSwitchContext+0x5e>
 800904c:	697a      	ldr	r2, [r7, #20]
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	4a14      	ldr	r2, [pc, #80]	; (80090a8 <vTaskSwitchContext+0xbc>)
 8009058:	4413      	add	r3, r2
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	685a      	ldr	r2, [r3, #4]
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	605a      	str	r2, [r3, #4]
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	3308      	adds	r3, #8
 800906e:	429a      	cmp	r2, r3
 8009070:	d104      	bne.n	800907c <vTaskSwitchContext+0x90>
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	605a      	str	r2, [r3, #4]
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	4a0a      	ldr	r2, [pc, #40]	; (80090ac <vTaskSwitchContext+0xc0>)
 8009084:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <vTaskSwitchContext+0xc0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	334c      	adds	r3, #76	; 0x4c
 800908c:	4a08      	ldr	r2, [pc, #32]	; (80090b0 <vTaskSwitchContext+0xc4>)
 800908e:	6013      	str	r3, [r2, #0]
}
 8009090:	bf00      	nop
 8009092:	371c      	adds	r7, #28
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000f8c 	.word	0x20000f8c
 80090a0:	20000f78 	.word	0x20000f78
 80090a4:	20000f6c 	.word	0x20000f6c
 80090a8:	20000e68 	.word	0x20000e68
 80090ac:	20000e64 	.word	0x20000e64
 80090b0:	2000009c 	.word	0x2000009c

080090b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10c      	bne.n	80090e4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80090ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ce:	b672      	cpsid	i
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	b662      	cpsie	i
 80090de:	60fb      	str	r3, [r7, #12]
}
 80090e0:	bf00      	nop
 80090e2:	e7fe      	b.n	80090e2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	3318      	adds	r3, #24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fa39 	bl	8008560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090ee:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <xTaskRemoveFromEventList+0xb0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d11c      	bne.n	8009130 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	3304      	adds	r3, #4
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff fa30 	bl	8008560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	2201      	movs	r2, #1
 8009106:	409a      	lsls	r2, r3
 8009108:	4b17      	ldr	r3, [pc, #92]	; (8009168 <xTaskRemoveFromEventList+0xb4>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4313      	orrs	r3, r2
 800910e:	4a16      	ldr	r2, [pc, #88]	; (8009168 <xTaskRemoveFromEventList+0xb4>)
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	4613      	mov	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a13      	ldr	r2, [pc, #76]	; (800916c <xTaskRemoveFromEventList+0xb8>)
 8009120:	441a      	add	r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7ff f9bc 	bl	80084a6 <vListInsertEnd>
 800912e:	e005      	b.n	800913c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	3318      	adds	r3, #24
 8009134:	4619      	mov	r1, r3
 8009136:	480e      	ldr	r0, [pc, #56]	; (8009170 <xTaskRemoveFromEventList+0xbc>)
 8009138:	f7ff f9b5 	bl	80084a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	4b0c      	ldr	r3, [pc, #48]	; (8009174 <xTaskRemoveFromEventList+0xc0>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009146:	429a      	cmp	r2, r3
 8009148:	d905      	bls.n	8009156 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800914a:	2301      	movs	r3, #1
 800914c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800914e:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <xTaskRemoveFromEventList+0xc4>)
 8009150:	2201      	movs	r2, #1
 8009152:	601a      	str	r2, [r3, #0]
 8009154:	e001      	b.n	800915a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800915a:	697b      	ldr	r3, [r7, #20]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3718      	adds	r7, #24
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000f8c 	.word	0x20000f8c
 8009168:	20000f6c 	.word	0x20000f6c
 800916c:	20000e68 	.word	0x20000e68
 8009170:	20000f24 	.word	0x20000f24
 8009174:	20000e64 	.word	0x20000e64
 8009178:	20000f78 	.word	0x20000f78

0800917c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009184:	f000 f852 	bl	800922c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009188:	4b06      	ldr	r3, [pc, #24]	; (80091a4 <prvIdleTask+0x28>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d9f9      	bls.n	8009184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009190:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <prvIdleTask+0x2c>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091a0:	e7f0      	b.n	8009184 <prvIdleTask+0x8>
 80091a2:	bf00      	nop
 80091a4:	20000e68 	.word	0x20000e68
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091b2:	2300      	movs	r3, #0
 80091b4:	607b      	str	r3, [r7, #4]
 80091b6:	e00c      	b.n	80091d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	4613      	mov	r3, r2
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4a12      	ldr	r2, [pc, #72]	; (800920c <prvInitialiseTaskLists+0x60>)
 80091c4:	4413      	add	r3, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7ff f940 	bl	800844c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3301      	adds	r3, #1
 80091d0:	607b      	str	r3, [r7, #4]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d9ef      	bls.n	80091b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091d8:	480d      	ldr	r0, [pc, #52]	; (8009210 <prvInitialiseTaskLists+0x64>)
 80091da:	f7ff f937 	bl	800844c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091de:	480d      	ldr	r0, [pc, #52]	; (8009214 <prvInitialiseTaskLists+0x68>)
 80091e0:	f7ff f934 	bl	800844c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091e4:	480c      	ldr	r0, [pc, #48]	; (8009218 <prvInitialiseTaskLists+0x6c>)
 80091e6:	f7ff f931 	bl	800844c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091ea:	480c      	ldr	r0, [pc, #48]	; (800921c <prvInitialiseTaskLists+0x70>)
 80091ec:	f7ff f92e 	bl	800844c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <prvInitialiseTaskLists+0x74>)
 80091f2:	f7ff f92b 	bl	800844c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091f6:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <prvInitialiseTaskLists+0x78>)
 80091f8:	4a05      	ldr	r2, [pc, #20]	; (8009210 <prvInitialiseTaskLists+0x64>)
 80091fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <prvInitialiseTaskLists+0x7c>)
 80091fe:	4a05      	ldr	r2, [pc, #20]	; (8009214 <prvInitialiseTaskLists+0x68>)
 8009200:	601a      	str	r2, [r3, #0]
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000e68 	.word	0x20000e68
 8009210:	20000ef4 	.word	0x20000ef4
 8009214:	20000f08 	.word	0x20000f08
 8009218:	20000f24 	.word	0x20000f24
 800921c:	20000f38 	.word	0x20000f38
 8009220:	20000f50 	.word	0x20000f50
 8009224:	20000f1c 	.word	0x20000f1c
 8009228:	20000f20 	.word	0x20000f20

0800922c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009232:	e019      	b.n	8009268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009234:	f000 f9f2 	bl	800961c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009238:	4b10      	ldr	r3, [pc, #64]	; (800927c <prvCheckTasksWaitingTermination+0x50>)
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	4618      	mov	r0, r3
 8009246:	f7ff f98b 	bl	8008560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800924a:	4b0d      	ldr	r3, [pc, #52]	; (8009280 <prvCheckTasksWaitingTermination+0x54>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	3b01      	subs	r3, #1
 8009250:	4a0b      	ldr	r2, [pc, #44]	; (8009280 <prvCheckTasksWaitingTermination+0x54>)
 8009252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009254:	4b0b      	ldr	r3, [pc, #44]	; (8009284 <prvCheckTasksWaitingTermination+0x58>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3b01      	subs	r3, #1
 800925a:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <prvCheckTasksWaitingTermination+0x58>)
 800925c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800925e:	f000 fa11 	bl	8009684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f810 	bl	8009288 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009268:	4b06      	ldr	r3, [pc, #24]	; (8009284 <prvCheckTasksWaitingTermination+0x58>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e1      	bne.n	8009234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009270:	bf00      	nop
 8009272:	bf00      	nop
 8009274:	3708      	adds	r7, #8
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	20000f38 	.word	0x20000f38
 8009280:	20000f64 	.word	0x20000f64
 8009284:	20000f4c 	.word	0x20000f4c

08009288 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	334c      	adds	r3, #76	; 0x4c
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fc95 	bl	8009bc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d108      	bne.n	80092b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	4618      	mov	r0, r3
 80092aa:	f000 fb69 	bl	8009980 <vPortFree>
				vPortFree( pxTCB );
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fb66 	bl	8009980 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092b4:	e01a      	b.n	80092ec <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d103      	bne.n	80092c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 fb5d 	bl	8009980 <vPortFree>
	}
 80092c6:	e011      	b.n	80092ec <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d00c      	beq.n	80092ec <prvDeleteTCB+0x64>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	b672      	cpsid	i
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	b662      	cpsie	i
 80092e6:	60fb      	str	r3, [r7, #12]
}
 80092e8:	bf00      	nop
 80092ea:	e7fe      	b.n	80092ea <prvDeleteTCB+0x62>
	}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092fa:	4b0c      	ldr	r3, [pc, #48]	; (800932c <prvResetNextTaskUnblockTime+0x38>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009304:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <prvResetNextTaskUnblockTime+0x3c>)
 8009306:	f04f 32ff 	mov.w	r2, #4294967295
 800930a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800930c:	e008      	b.n	8009320 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800930e:	4b07      	ldr	r3, [pc, #28]	; (800932c <prvResetNextTaskUnblockTime+0x38>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	4a04      	ldr	r2, [pc, #16]	; (8009330 <prvResetNextTaskUnblockTime+0x3c>)
 800931e:	6013      	str	r3, [r2, #0]
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20000f1c 	.word	0x20000f1c
 8009330:	20000f84 	.word	0x20000f84

08009334 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800933e:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009344:	4b28      	ldr	r3, [pc, #160]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3304      	adds	r3, #4
 800934a:	4618      	mov	r0, r3
 800934c:	f7ff f908 	bl	8008560 <uxListRemove>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009356:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935c:	2201      	movs	r2, #1
 800935e:	fa02 f303 	lsl.w	r3, r2, r3
 8009362:	43da      	mvns	r2, r3
 8009364:	4b21      	ldr	r3, [pc, #132]	; (80093ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4013      	ands	r3, r2
 800936a:	4a20      	ldr	r2, [pc, #128]	; (80093ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800936c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009374:	d10a      	bne.n	800938c <prvAddCurrentTaskToDelayedList+0x58>
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d007      	beq.n	800938c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800937c:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3304      	adds	r3, #4
 8009382:	4619      	mov	r1, r3
 8009384:	481a      	ldr	r0, [pc, #104]	; (80093f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009386:	f7ff f88e 	bl	80084a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800938a:	e026      	b.n	80093da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4413      	add	r3, r2
 8009392:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009394:	4b14      	ldr	r3, [pc, #80]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800939c:	68ba      	ldr	r2, [r7, #8]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d209      	bcs.n	80093b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093a4:	4b13      	ldr	r3, [pc, #76]	; (80093f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	4b0f      	ldr	r3, [pc, #60]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3304      	adds	r3, #4
 80093ae:	4619      	mov	r1, r3
 80093b0:	4610      	mov	r0, r2
 80093b2:	f7ff f89c 	bl	80084ee <vListInsert>
}
 80093b6:	e010      	b.n	80093da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b8:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7ff f892 	bl	80084ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80093ca:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d202      	bcs.n	80093da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80093d4:	4a09      	ldr	r2, [pc, #36]	; (80093fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6013      	str	r3, [r2, #0]
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	20000f68 	.word	0x20000f68
 80093e8:	20000e64 	.word	0x20000e64
 80093ec:	20000f6c 	.word	0x20000f6c
 80093f0:	20000f50 	.word	0x20000f50
 80093f4:	20000f20 	.word	0x20000f20
 80093f8:	20000f1c 	.word	0x20000f1c
 80093fc:	20000f84 	.word	0x20000f84

08009400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	3b04      	subs	r3, #4
 8009410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3b04      	subs	r3, #4
 800941e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3b04      	subs	r3, #4
 800942e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009430:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <pxPortInitialiseStack+0x64>)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3b14      	subs	r3, #20
 800943a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3b04      	subs	r3, #4
 8009446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f06f 0202 	mvn.w	r2, #2
 800944e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3b20      	subs	r3, #32
 8009454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009456:	68fb      	ldr	r3, [r7, #12]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	08009469 	.word	0x08009469

08009468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009472:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <prvTaskExitError+0x5c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d00c      	beq.n	8009496 <prvTaskExitError+0x2e>
	__asm volatile
 800947c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009480:	b672      	cpsid	i
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	b662      	cpsie	i
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <prvTaskExitError+0x2c>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	b672      	cpsid	i
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	b662      	cpsie	i
 80094aa:	60bb      	str	r3, [r7, #8]
}
 80094ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094ae:	bf00      	nop
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d0fc      	beq.n	80094b0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094b6:	bf00      	nop
 80094b8:	bf00      	nop
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr
 80094c4:	2000004c 	.word	0x2000004c
	...

080094d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	20000e64 	.word	0x20000e64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094f8:	4808      	ldr	r0, [pc, #32]	; (800951c <prvPortStartFirstTask+0x24>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8814 	msr	CONTROL, r0
 800950a:	b662      	cpsie	i
 800950c:	b661      	cpsie	f
 800950e:	f3bf 8f4f 	dsb	sy
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	df00      	svc	0
 8009518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800951a:	bf00      	nop
 800951c:	e000ed08 	.word	0xe000ed08

08009520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009526:	4b37      	ldr	r3, [pc, #220]	; (8009604 <xPortStartScheduler+0xe4>)
 8009528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	b2db      	uxtb	r3, r3
 8009530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	22ff      	movs	r2, #255	; 0xff
 8009536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b2db      	uxtb	r3, r3
 800953e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009548:	b2da      	uxtb	r2, r3
 800954a:	4b2f      	ldr	r3, [pc, #188]	; (8009608 <xPortStartScheduler+0xe8>)
 800954c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800954e:	4b2f      	ldr	r3, [pc, #188]	; (800960c <xPortStartScheduler+0xec>)
 8009550:	2207      	movs	r2, #7
 8009552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009554:	e009      	b.n	800956a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009556:	4b2d      	ldr	r3, [pc, #180]	; (800960c <xPortStartScheduler+0xec>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3b01      	subs	r3, #1
 800955c:	4a2b      	ldr	r2, [pc, #172]	; (800960c <xPortStartScheduler+0xec>)
 800955e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	b2db      	uxtb	r3, r3
 8009568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d0ef      	beq.n	8009556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009576:	4b25      	ldr	r3, [pc, #148]	; (800960c <xPortStartScheduler+0xec>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f1c3 0307 	rsb	r3, r3, #7
 800957e:	2b04      	cmp	r3, #4
 8009580:	d00c      	beq.n	800959c <xPortStartScheduler+0x7c>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	b672      	cpsid	i
 8009588:	f383 8811 	msr	BASEPRI, r3
 800958c:	f3bf 8f6f 	isb	sy
 8009590:	f3bf 8f4f 	dsb	sy
 8009594:	b662      	cpsie	i
 8009596:	60bb      	str	r3, [r7, #8]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800959c:	4b1b      	ldr	r3, [pc, #108]	; (800960c <xPortStartScheduler+0xec>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	4a1a      	ldr	r2, [pc, #104]	; (800960c <xPortStartScheduler+0xec>)
 80095a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095a6:	4b19      	ldr	r3, [pc, #100]	; (800960c <xPortStartScheduler+0xec>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ae:	4a17      	ldr	r2, [pc, #92]	; (800960c <xPortStartScheduler+0xec>)
 80095b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	b2da      	uxtb	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ba:	4b15      	ldr	r3, [pc, #84]	; (8009610 <xPortStartScheduler+0xf0>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a14      	ldr	r2, [pc, #80]	; (8009610 <xPortStartScheduler+0xf0>)
 80095c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095c6:	4b12      	ldr	r3, [pc, #72]	; (8009610 <xPortStartScheduler+0xf0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a11      	ldr	r2, [pc, #68]	; (8009610 <xPortStartScheduler+0xf0>)
 80095cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095d2:	f000 f8dd 	bl	8009790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095d6:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <xPortStartScheduler+0xf4>)
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095dc:	f000 f8fc 	bl	80097d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095e0:	4b0d      	ldr	r3, [pc, #52]	; (8009618 <xPortStartScheduler+0xf8>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a0c      	ldr	r2, [pc, #48]	; (8009618 <xPortStartScheduler+0xf8>)
 80095e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095ec:	f7ff ff84 	bl	80094f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095f0:	f7ff fcfc 	bl	8008fec <vTaskSwitchContext>
	prvTaskExitError();
 80095f4:	f7ff ff38 	bl	8009468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	e000e400 	.word	0xe000e400
 8009608:	20000f90 	.word	0x20000f90
 800960c:	20000f94 	.word	0x20000f94
 8009610:	e000ed20 	.word	0xe000ed20
 8009614:	2000004c 	.word	0x2000004c
 8009618:	e000ef34 	.word	0xe000ef34

0800961c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	b672      	cpsid	i
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	b662      	cpsie	i
 8009636:	607b      	str	r3, [r7, #4]
}
 8009638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800963a:	4b10      	ldr	r3, [pc, #64]	; (800967c <vPortEnterCritical+0x60>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	3301      	adds	r3, #1
 8009640:	4a0e      	ldr	r2, [pc, #56]	; (800967c <vPortEnterCritical+0x60>)
 8009642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009644:	4b0d      	ldr	r3, [pc, #52]	; (800967c <vPortEnterCritical+0x60>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d111      	bne.n	8009670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <vPortEnterCritical+0x64>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00c      	beq.n	8009670 <vPortEnterCritical+0x54>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	b672      	cpsid	i
 800965c:	f383 8811 	msr	BASEPRI, r3
 8009660:	f3bf 8f6f 	isb	sy
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	b662      	cpsie	i
 800966a:	603b      	str	r3, [r7, #0]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <vPortEnterCritical+0x52>
	}
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	2000004c 	.word	0x2000004c
 8009680:	e000ed04 	.word	0xe000ed04

08009684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800968a:	4b13      	ldr	r3, [pc, #76]	; (80096d8 <vPortExitCritical+0x54>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10c      	bne.n	80096ac <vPortExitCritical+0x28>
	__asm volatile
 8009692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009696:	b672      	cpsid	i
 8009698:	f383 8811 	msr	BASEPRI, r3
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	f3bf 8f4f 	dsb	sy
 80096a4:	b662      	cpsie	i
 80096a6:	607b      	str	r3, [r7, #4]
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80096ac:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <vPortExitCritical+0x54>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	4a09      	ldr	r2, [pc, #36]	; (80096d8 <vPortExitCritical+0x54>)
 80096b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <vPortExitCritical+0x54>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d105      	bne.n	80096ca <vPortExitCritical+0x46>
 80096be:	2300      	movs	r3, #0
 80096c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	2000004c 	.word	0x2000004c
 80096dc:	00000000 	.word	0x00000000

080096e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096e0:	f3ef 8009 	mrs	r0, PSP
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <pxCurrentTCBConst>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	f01e 0f10 	tst.w	lr, #16
 80096f0:	bf08      	it	eq
 80096f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009704:	b672      	cpsid	i
 8009706:	f380 8811 	msr	BASEPRI, r0
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	b662      	cpsie	i
 8009714:	f7ff fc6a 	bl	8008fec <vTaskSwitchContext>
 8009718:	f04f 0000 	mov.w	r0, #0
 800971c:	f380 8811 	msr	BASEPRI, r0
 8009720:	bc09      	pop	{r0, r3}
 8009722:	6819      	ldr	r1, [r3, #0]
 8009724:	6808      	ldr	r0, [r1, #0]
 8009726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972a:	f01e 0f10 	tst.w	lr, #16
 800972e:	bf08      	it	eq
 8009730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009734:	f380 8809 	msr	PSP, r0
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop

08009740 <pxCurrentTCBConst>:
 8009740:	20000e64 	.word	0x20000e64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	607b      	str	r3, [r7, #4]
}
 8009764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009766:	f7ff fb87 	bl	8008e78 <xTaskIncrementTick>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d003      	beq.n	8009778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <SysTick_Handler+0x44>)
 8009772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	f383 8811 	msr	BASEPRI, r3
}
 8009782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009784:	bf00      	nop
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	e000ed04 	.word	0xe000ed04

08009790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009794:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <vPortSetupTimerInterrupt+0x34>)
 8009796:	2200      	movs	r2, #0
 8009798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <vPortSetupTimerInterrupt+0x38>)
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097a0:	4b0a      	ldr	r3, [pc, #40]	; (80097cc <vPortSetupTimerInterrupt+0x3c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a0a      	ldr	r2, [pc, #40]	; (80097d0 <vPortSetupTimerInterrupt+0x40>)
 80097a6:	fba2 2303 	umull	r2, r3, r2, r3
 80097aa:	099b      	lsrs	r3, r3, #6
 80097ac:	4a09      	ldr	r2, [pc, #36]	; (80097d4 <vPortSetupTimerInterrupt+0x44>)
 80097ae:	3b01      	subs	r3, #1
 80097b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097b2:	4b04      	ldr	r3, [pc, #16]	; (80097c4 <vPortSetupTimerInterrupt+0x34>)
 80097b4:	2207      	movs	r2, #7
 80097b6:	601a      	str	r2, [r3, #0]
}
 80097b8:	bf00      	nop
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	e000e010 	.word	0xe000e010
 80097c8:	e000e018 	.word	0xe000e018
 80097cc:	2000002c 	.word	0x2000002c
 80097d0:	10624dd3 	.word	0x10624dd3
 80097d4:	e000e014 	.word	0xe000e014

080097d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097e8 <vPortEnableVFP+0x10>
 80097dc:	6801      	ldr	r1, [r0, #0]
 80097de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097e2:	6001      	str	r1, [r0, #0]
 80097e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097e6:	bf00      	nop
 80097e8:	e000ed88 	.word	0xe000ed88

080097ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	; 0x28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097f8:	f7ff fa82 	bl	8008d00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097fc:	4b5b      	ldr	r3, [pc, #364]	; (800996c <pvPortMalloc+0x180>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009804:	f000 f91a 	bl	8009a3c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009808:	4b59      	ldr	r3, [pc, #356]	; (8009970 <pvPortMalloc+0x184>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4013      	ands	r3, r2
 8009810:	2b00      	cmp	r3, #0
 8009812:	f040 8092 	bne.w	800993a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d01f      	beq.n	800985c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800981c:	2208      	movs	r2, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4413      	add	r3, r2
 8009822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	2b00      	cmp	r3, #0
 800982c:	d016      	beq.n	800985c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f023 0307 	bic.w	r3, r3, #7
 8009834:	3308      	adds	r3, #8
 8009836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00c      	beq.n	800985c <pvPortMalloc+0x70>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	b672      	cpsid	i
 8009848:	f383 8811 	msr	BASEPRI, r3
 800984c:	f3bf 8f6f 	isb	sy
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	b662      	cpsie	i
 8009856:	617b      	str	r3, [r7, #20]
}
 8009858:	bf00      	nop
 800985a:	e7fe      	b.n	800985a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d06b      	beq.n	800993a <pvPortMalloc+0x14e>
 8009862:	4b44      	ldr	r3, [pc, #272]	; (8009974 <pvPortMalloc+0x188>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	687a      	ldr	r2, [r7, #4]
 8009868:	429a      	cmp	r2, r3
 800986a:	d866      	bhi.n	800993a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800986c:	4b42      	ldr	r3, [pc, #264]	; (8009978 <pvPortMalloc+0x18c>)
 800986e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009870:	4b41      	ldr	r3, [pc, #260]	; (8009978 <pvPortMalloc+0x18c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009876:	e004      	b.n	8009882 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	d903      	bls.n	8009894 <pvPortMalloc+0xa8>
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1f1      	bne.n	8009878 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009894:	4b35      	ldr	r3, [pc, #212]	; (800996c <pvPortMalloc+0x180>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800989a:	429a      	cmp	r2, r3
 800989c:	d04d      	beq.n	800993a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2208      	movs	r2, #8
 80098a4:	4413      	add	r3, r2
 80098a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a3b      	ldr	r3, [r7, #32]
 80098ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	1ad2      	subs	r2, r2, r3
 80098b8:	2308      	movs	r3, #8
 80098ba:	005b      	lsls	r3, r3, #1
 80098bc:	429a      	cmp	r2, r3
 80098be:	d921      	bls.n	8009904 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4413      	add	r3, r2
 80098c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	f003 0307 	and.w	r3, r3, #7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d00c      	beq.n	80098ec <pvPortMalloc+0x100>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	b672      	cpsid	i
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	b662      	cpsie	i
 80098e6:	613b      	str	r3, [r7, #16]
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098fe:	69b8      	ldr	r0, [r7, #24]
 8009900:	f000 f8fe 	bl	8009b00 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009904:	4b1b      	ldr	r3, [pc, #108]	; (8009974 <pvPortMalloc+0x188>)
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	4a19      	ldr	r2, [pc, #100]	; (8009974 <pvPortMalloc+0x188>)
 8009910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009912:	4b18      	ldr	r3, [pc, #96]	; (8009974 <pvPortMalloc+0x188>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	4b19      	ldr	r3, [pc, #100]	; (800997c <pvPortMalloc+0x190>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	429a      	cmp	r2, r3
 800991c:	d203      	bcs.n	8009926 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <pvPortMalloc+0x188>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a16      	ldr	r2, [pc, #88]	; (800997c <pvPortMalloc+0x190>)
 8009924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009928:	685a      	ldr	r2, [r3, #4]
 800992a:	4b11      	ldr	r3, [pc, #68]	; (8009970 <pvPortMalloc+0x184>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	431a      	orrs	r2, r3
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800993a:	f7ff f9ef 	bl	8008d1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	f003 0307 	and.w	r3, r3, #7
 8009944:	2b00      	cmp	r3, #0
 8009946:	d00c      	beq.n	8009962 <pvPortMalloc+0x176>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	b672      	cpsid	i
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	b662      	cpsie	i
 800995c:	60fb      	str	r3, [r7, #12]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <pvPortMalloc+0x174>
	return pvReturn;
 8009962:	69fb      	ldr	r3, [r7, #28]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3728      	adds	r7, #40	; 0x28
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	20004ba0 	.word	0x20004ba0
 8009970:	20004bac 	.word	0x20004bac
 8009974:	20004ba4 	.word	0x20004ba4
 8009978:	20004b98 	.word	0x20004b98
 800997c:	20004ba8 	.word	0x20004ba8

08009980 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d04c      	beq.n	8009a2c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009992:	2308      	movs	r3, #8
 8009994:	425b      	negs	r3, r3
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	4b23      	ldr	r3, [pc, #140]	; (8009a34 <vPortFree+0xb4>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4013      	ands	r3, r2
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10c      	bne.n	80099c8 <vPortFree+0x48>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	b672      	cpsid	i
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	b662      	cpsie	i
 80099c2:	60fb      	str	r3, [r7, #12]
}
 80099c4:	bf00      	nop
 80099c6:	e7fe      	b.n	80099c6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d00c      	beq.n	80099ea <vPortFree+0x6a>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	b672      	cpsid	i
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	b662      	cpsie	i
 80099e4:	60bb      	str	r3, [r7, #8]
}
 80099e6:	bf00      	nop
 80099e8:	e7fe      	b.n	80099e8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	4b11      	ldr	r3, [pc, #68]	; (8009a34 <vPortFree+0xb4>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4013      	ands	r3, r2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d019      	beq.n	8009a2c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d115      	bne.n	8009a2c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <vPortFree+0xb4>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	43db      	mvns	r3, r3
 8009a0a:	401a      	ands	r2, r3
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a10:	f7ff f976 	bl	8008d00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <vPortFree+0xb8>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	4a06      	ldr	r2, [pc, #24]	; (8009a38 <vPortFree+0xb8>)
 8009a20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a22:	6938      	ldr	r0, [r7, #16]
 8009a24:	f000 f86c 	bl	8009b00 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a28:	f7ff f978 	bl	8008d1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a2c:	bf00      	nop
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	20004bac 	.word	0x20004bac
 8009a38:	20004ba4 	.word	0x20004ba4

08009a3c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a46:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a48:	4b27      	ldr	r3, [pc, #156]	; (8009ae8 <prvHeapInit+0xac>)
 8009a4a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f003 0307 	and.w	r3, r3, #7
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00c      	beq.n	8009a70 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	3307      	adds	r3, #7
 8009a5a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	4a1f      	ldr	r2, [pc, #124]	; (8009ae8 <prvHeapInit+0xac>)
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a74:	4a1d      	ldr	r2, [pc, #116]	; (8009aec <prvHeapInit+0xb0>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a7a:	4b1c      	ldr	r3, [pc, #112]	; (8009aec <prvHeapInit+0xb0>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	4413      	add	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a88:	2208      	movs	r2, #8
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	1a9b      	subs	r3, r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f023 0307 	bic.w	r3, r3, #7
 8009a96:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	4a15      	ldr	r2, [pc, #84]	; (8009af0 <prvHeapInit+0xb4>)
 8009a9c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a9e:	4b14      	ldr	r3, [pc, #80]	; (8009af0 <prvHeapInit+0xb4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009aa6:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <prvHeapInit+0xb4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009abc:	4b0c      	ldr	r3, [pc, #48]	; (8009af0 <prvHeapInit+0xb4>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	4a0a      	ldr	r2, [pc, #40]	; (8009af4 <prvHeapInit+0xb8>)
 8009aca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4a09      	ldr	r2, [pc, #36]	; (8009af8 <prvHeapInit+0xbc>)
 8009ad2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ad4:	4b09      	ldr	r3, [pc, #36]	; (8009afc <prvHeapInit+0xc0>)
 8009ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ada:	601a      	str	r2, [r3, #0]
}
 8009adc:	bf00      	nop
 8009ade:	3714      	adds	r7, #20
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20000f98 	.word	0x20000f98
 8009aec:	20004b98 	.word	0x20004b98
 8009af0:	20004ba0 	.word	0x20004ba0
 8009af4:	20004ba8 	.word	0x20004ba8
 8009af8:	20004ba4 	.word	0x20004ba4
 8009afc:	20004bac 	.word	0x20004bac

08009b00 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b08:	4b28      	ldr	r3, [pc, #160]	; (8009bac <prvInsertBlockIntoFreeList+0xac>)
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	e002      	b.n	8009b14 <prvInsertBlockIntoFreeList+0x14>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d8f7      	bhi.n	8009b0e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	4413      	add	r3, r2
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d108      	bne.n	8009b42 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	441a      	add	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	441a      	add	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d118      	bne.n	8009b88 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d00d      	beq.n	8009b7e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685a      	ldr	r2, [r3, #4]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	441a      	add	r2, r3
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e008      	b.n	8009b90 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b7e:	4b0c      	ldr	r3, [pc, #48]	; (8009bb0 <prvInsertBlockIntoFreeList+0xb0>)
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	e003      	b.n	8009b90 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d002      	beq.n	8009b9e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b9e:	bf00      	nop
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	20004b98 	.word	0x20004b98
 8009bb0:	20004ba0 	.word	0x20004ba0

08009bb4 <memset>:
 8009bb4:	4402      	add	r2, r0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d100      	bne.n	8009bbe <memset+0xa>
 8009bbc:	4770      	bx	lr
 8009bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc2:	e7f9      	b.n	8009bb8 <memset+0x4>

08009bc4 <_reclaim_reent>:
 8009bc4:	4b29      	ldr	r3, [pc, #164]	; (8009c6c <_reclaim_reent+0xa8>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4283      	cmp	r3, r0
 8009bca:	b570      	push	{r4, r5, r6, lr}
 8009bcc:	4604      	mov	r4, r0
 8009bce:	d04b      	beq.n	8009c68 <_reclaim_reent+0xa4>
 8009bd0:	69c3      	ldr	r3, [r0, #28]
 8009bd2:	b143      	cbz	r3, 8009be6 <_reclaim_reent+0x22>
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d144      	bne.n	8009c64 <_reclaim_reent+0xa0>
 8009bda:	69e3      	ldr	r3, [r4, #28]
 8009bdc:	6819      	ldr	r1, [r3, #0]
 8009bde:	b111      	cbz	r1, 8009be6 <_reclaim_reent+0x22>
 8009be0:	4620      	mov	r0, r4
 8009be2:	f000 f86b 	bl	8009cbc <_free_r>
 8009be6:	6961      	ldr	r1, [r4, #20]
 8009be8:	b111      	cbz	r1, 8009bf0 <_reclaim_reent+0x2c>
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 f866 	bl	8009cbc <_free_r>
 8009bf0:	69e1      	ldr	r1, [r4, #28]
 8009bf2:	b111      	cbz	r1, 8009bfa <_reclaim_reent+0x36>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f000 f861 	bl	8009cbc <_free_r>
 8009bfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009bfc:	b111      	cbz	r1, 8009c04 <_reclaim_reent+0x40>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 f85c 	bl	8009cbc <_free_r>
 8009c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c06:	b111      	cbz	r1, 8009c0e <_reclaim_reent+0x4a>
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 f857 	bl	8009cbc <_free_r>
 8009c0e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009c10:	b111      	cbz	r1, 8009c18 <_reclaim_reent+0x54>
 8009c12:	4620      	mov	r0, r4
 8009c14:	f000 f852 	bl	8009cbc <_free_r>
 8009c18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009c1a:	b111      	cbz	r1, 8009c22 <_reclaim_reent+0x5e>
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 f84d 	bl	8009cbc <_free_r>
 8009c22:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c24:	b111      	cbz	r1, 8009c2c <_reclaim_reent+0x68>
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 f848 	bl	8009cbc <_free_r>
 8009c2c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009c2e:	b111      	cbz	r1, 8009c36 <_reclaim_reent+0x72>
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 f843 	bl	8009cbc <_free_r>
 8009c36:	6a23      	ldr	r3, [r4, #32]
 8009c38:	b1b3      	cbz	r3, 8009c68 <_reclaim_reent+0xa4>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c40:	4718      	bx	r3
 8009c42:	5949      	ldr	r1, [r1, r5]
 8009c44:	b941      	cbnz	r1, 8009c58 <_reclaim_reent+0x94>
 8009c46:	3504      	adds	r5, #4
 8009c48:	69e3      	ldr	r3, [r4, #28]
 8009c4a:	2d80      	cmp	r5, #128	; 0x80
 8009c4c:	68d9      	ldr	r1, [r3, #12]
 8009c4e:	d1f8      	bne.n	8009c42 <_reclaim_reent+0x7e>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 f833 	bl	8009cbc <_free_r>
 8009c56:	e7c0      	b.n	8009bda <_reclaim_reent+0x16>
 8009c58:	680e      	ldr	r6, [r1, #0]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f82e 	bl	8009cbc <_free_r>
 8009c60:	4631      	mov	r1, r6
 8009c62:	e7ef      	b.n	8009c44 <_reclaim_reent+0x80>
 8009c64:	2500      	movs	r5, #0
 8009c66:	e7ef      	b.n	8009c48 <_reclaim_reent+0x84>
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	bf00      	nop
 8009c6c:	2000009c 	.word	0x2000009c

08009c70 <__libc_init_array>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	4d0d      	ldr	r5, [pc, #52]	; (8009ca8 <__libc_init_array+0x38>)
 8009c74:	4c0d      	ldr	r4, [pc, #52]	; (8009cac <__libc_init_array+0x3c>)
 8009c76:	1b64      	subs	r4, r4, r5
 8009c78:	10a4      	asrs	r4, r4, #2
 8009c7a:	2600      	movs	r6, #0
 8009c7c:	42a6      	cmp	r6, r4
 8009c7e:	d109      	bne.n	8009c94 <__libc_init_array+0x24>
 8009c80:	4d0b      	ldr	r5, [pc, #44]	; (8009cb0 <__libc_init_array+0x40>)
 8009c82:	4c0c      	ldr	r4, [pc, #48]	; (8009cb4 <__libc_init_array+0x44>)
 8009c84:	f001 f8b0 	bl	800ade8 <_init>
 8009c88:	1b64      	subs	r4, r4, r5
 8009c8a:	10a4      	asrs	r4, r4, #2
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	42a6      	cmp	r6, r4
 8009c90:	d105      	bne.n	8009c9e <__libc_init_array+0x2e>
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c98:	4798      	blx	r3
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	e7ee      	b.n	8009c7c <__libc_init_array+0xc>
 8009c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca2:	4798      	blx	r3
 8009ca4:	3601      	adds	r6, #1
 8009ca6:	e7f2      	b.n	8009c8e <__libc_init_array+0x1e>
 8009ca8:	0800b098 	.word	0x0800b098
 8009cac:	0800b098 	.word	0x0800b098
 8009cb0:	0800b098 	.word	0x0800b098
 8009cb4:	0800b09c 	.word	0x0800b09c

08009cb8 <__retarget_lock_acquire_recursive>:
 8009cb8:	4770      	bx	lr

08009cba <__retarget_lock_release_recursive>:
 8009cba:	4770      	bx	lr

08009cbc <_free_r>:
 8009cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cbe:	2900      	cmp	r1, #0
 8009cc0:	d044      	beq.n	8009d4c <_free_r+0x90>
 8009cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc6:	9001      	str	r0, [sp, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	f1a1 0404 	sub.w	r4, r1, #4
 8009cce:	bfb8      	it	lt
 8009cd0:	18e4      	addlt	r4, r4, r3
 8009cd2:	f000 f83f 	bl	8009d54 <__malloc_lock>
 8009cd6:	4a1e      	ldr	r2, [pc, #120]	; (8009d50 <_free_r+0x94>)
 8009cd8:	9801      	ldr	r0, [sp, #4]
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	b933      	cbnz	r3, 8009cec <_free_r+0x30>
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	6014      	str	r4, [r2, #0]
 8009ce2:	b003      	add	sp, #12
 8009ce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ce8:	f000 b83a 	b.w	8009d60 <__malloc_unlock>
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d908      	bls.n	8009d02 <_free_r+0x46>
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf01      	itttt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	1949      	addeq	r1, r1, r5
 8009cfe:	6021      	streq	r1, [r4, #0]
 8009d00:	e7ed      	b.n	8009cde <_free_r+0x22>
 8009d02:	461a      	mov	r2, r3
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b10b      	cbz	r3, 8009d0c <_free_r+0x50>
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	d9fa      	bls.n	8009d02 <_free_r+0x46>
 8009d0c:	6811      	ldr	r1, [r2, #0]
 8009d0e:	1855      	adds	r5, r2, r1
 8009d10:	42a5      	cmp	r5, r4
 8009d12:	d10b      	bne.n	8009d2c <_free_r+0x70>
 8009d14:	6824      	ldr	r4, [r4, #0]
 8009d16:	4421      	add	r1, r4
 8009d18:	1854      	adds	r4, r2, r1
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	d1e0      	bne.n	8009ce2 <_free_r+0x26>
 8009d20:	681c      	ldr	r4, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	6053      	str	r3, [r2, #4]
 8009d26:	440c      	add	r4, r1
 8009d28:	6014      	str	r4, [r2, #0]
 8009d2a:	e7da      	b.n	8009ce2 <_free_r+0x26>
 8009d2c:	d902      	bls.n	8009d34 <_free_r+0x78>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	6003      	str	r3, [r0, #0]
 8009d32:	e7d6      	b.n	8009ce2 <_free_r+0x26>
 8009d34:	6825      	ldr	r5, [r4, #0]
 8009d36:	1961      	adds	r1, r4, r5
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	bf04      	itt	eq
 8009d3c:	6819      	ldreq	r1, [r3, #0]
 8009d3e:	685b      	ldreq	r3, [r3, #4]
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	bf04      	itt	eq
 8009d44:	1949      	addeq	r1, r1, r5
 8009d46:	6021      	streq	r1, [r4, #0]
 8009d48:	6054      	str	r4, [r2, #4]
 8009d4a:	e7ca      	b.n	8009ce2 <_free_r+0x26>
 8009d4c:	b003      	add	sp, #12
 8009d4e:	bd30      	pop	{r4, r5, pc}
 8009d50:	20004cec 	.word	0x20004cec

08009d54 <__malloc_lock>:
 8009d54:	4801      	ldr	r0, [pc, #4]	; (8009d5c <__malloc_lock+0x8>)
 8009d56:	f7ff bfaf 	b.w	8009cb8 <__retarget_lock_acquire_recursive>
 8009d5a:	bf00      	nop
 8009d5c:	20004ce8 	.word	0x20004ce8

08009d60 <__malloc_unlock>:
 8009d60:	4801      	ldr	r0, [pc, #4]	; (8009d68 <__malloc_unlock+0x8>)
 8009d62:	f7ff bfaa 	b.w	8009cba <__retarget_lock_release_recursive>
 8009d66:	bf00      	nop
 8009d68:	20004ce8 	.word	0x20004ce8
 8009d6c:	00000000 	.word	0x00000000

08009d70 <cos>:
 8009d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d72:	ec53 2b10 	vmov	r2, r3, d0
 8009d76:	4826      	ldr	r0, [pc, #152]	; (8009e10 <cos+0xa0>)
 8009d78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d7c:	4281      	cmp	r1, r0
 8009d7e:	dc06      	bgt.n	8009d8e <cos+0x1e>
 8009d80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009e08 <cos+0x98>
 8009d84:	b005      	add	sp, #20
 8009d86:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d8a:	f000 b845 	b.w	8009e18 <__kernel_cos>
 8009d8e:	4821      	ldr	r0, [pc, #132]	; (8009e14 <cos+0xa4>)
 8009d90:	4281      	cmp	r1, r0
 8009d92:	dd09      	ble.n	8009da8 <cos+0x38>
 8009d94:	ee10 0a10 	vmov	r0, s0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	f7f6 fa45 	bl	8000228 <__aeabi_dsub>
 8009d9e:	ec41 0b10 	vmov	d0, r0, r1
 8009da2:	b005      	add	sp, #20
 8009da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009da8:	4668      	mov	r0, sp
 8009daa:	f000 f9bd 	bl	800a128 <__ieee754_rem_pio2>
 8009dae:	f000 0003 	and.w	r0, r0, #3
 8009db2:	2801      	cmp	r0, #1
 8009db4:	d00b      	beq.n	8009dce <cos+0x5e>
 8009db6:	2802      	cmp	r0, #2
 8009db8:	d016      	beq.n	8009de8 <cos+0x78>
 8009dba:	b9e0      	cbnz	r0, 8009df6 <cos+0x86>
 8009dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dc0:	ed9d 0b00 	vldr	d0, [sp]
 8009dc4:	f000 f828 	bl	8009e18 <__kernel_cos>
 8009dc8:	ec51 0b10 	vmov	r0, r1, d0
 8009dcc:	e7e7      	b.n	8009d9e <cos+0x2e>
 8009dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dd2:	ed9d 0b00 	vldr	d0, [sp]
 8009dd6:	f000 f8e7 	bl	8009fa8 <__kernel_sin>
 8009dda:	ec53 2b10 	vmov	r2, r3, d0
 8009dde:	ee10 0a10 	vmov	r0, s0
 8009de2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009de6:	e7da      	b.n	8009d9e <cos+0x2e>
 8009de8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dec:	ed9d 0b00 	vldr	d0, [sp]
 8009df0:	f000 f812 	bl	8009e18 <__kernel_cos>
 8009df4:	e7f1      	b.n	8009dda <cos+0x6a>
 8009df6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dfa:	ed9d 0b00 	vldr	d0, [sp]
 8009dfe:	2001      	movs	r0, #1
 8009e00:	f000 f8d2 	bl	8009fa8 <__kernel_sin>
 8009e04:	e7e0      	b.n	8009dc8 <cos+0x58>
 8009e06:	bf00      	nop
	...
 8009e10:	3fe921fb 	.word	0x3fe921fb
 8009e14:	7fefffff 	.word	0x7fefffff

08009e18 <__kernel_cos>:
 8009e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	ec57 6b10 	vmov	r6, r7, d0
 8009e20:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009e24:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009e28:	ed8d 1b00 	vstr	d1, [sp]
 8009e2c:	da07      	bge.n	8009e3e <__kernel_cos+0x26>
 8009e2e:	ee10 0a10 	vmov	r0, s0
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fe4a 	bl	8000acc <__aeabi_d2iz>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	f000 8088 	beq.w	8009f4e <__kernel_cos+0x136>
 8009e3e:	4632      	mov	r2, r6
 8009e40:	463b      	mov	r3, r7
 8009e42:	4630      	mov	r0, r6
 8009e44:	4639      	mov	r1, r7
 8009e46:	f7f6 fba7 	bl	8000598 <__aeabi_dmul>
 8009e4a:	4b51      	ldr	r3, [pc, #324]	; (8009f90 <__kernel_cos+0x178>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	460d      	mov	r5, r1
 8009e52:	f7f6 fba1 	bl	8000598 <__aeabi_dmul>
 8009e56:	a340      	add	r3, pc, #256	; (adr r3, 8009f58 <__kernel_cos+0x140>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	468b      	mov	fp, r1
 8009e60:	4620      	mov	r0, r4
 8009e62:	4629      	mov	r1, r5
 8009e64:	f7f6 fb98 	bl	8000598 <__aeabi_dmul>
 8009e68:	a33d      	add	r3, pc, #244	; (adr r3, 8009f60 <__kernel_cos+0x148>)
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f7f6 f9dd 	bl	800022c <__adddf3>
 8009e72:	4622      	mov	r2, r4
 8009e74:	462b      	mov	r3, r5
 8009e76:	f7f6 fb8f 	bl	8000598 <__aeabi_dmul>
 8009e7a:	a33b      	add	r3, pc, #236	; (adr r3, 8009f68 <__kernel_cos+0x150>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 f9d2 	bl	8000228 <__aeabi_dsub>
 8009e84:	4622      	mov	r2, r4
 8009e86:	462b      	mov	r3, r5
 8009e88:	f7f6 fb86 	bl	8000598 <__aeabi_dmul>
 8009e8c:	a338      	add	r3, pc, #224	; (adr r3, 8009f70 <__kernel_cos+0x158>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f9cb 	bl	800022c <__adddf3>
 8009e96:	4622      	mov	r2, r4
 8009e98:	462b      	mov	r3, r5
 8009e9a:	f7f6 fb7d 	bl	8000598 <__aeabi_dmul>
 8009e9e:	a336      	add	r3, pc, #216	; (adr r3, 8009f78 <__kernel_cos+0x160>)
 8009ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea4:	f7f6 f9c0 	bl	8000228 <__aeabi_dsub>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	f7f6 fb74 	bl	8000598 <__aeabi_dmul>
 8009eb0:	a333      	add	r3, pc, #204	; (adr r3, 8009f80 <__kernel_cos+0x168>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 f9b9 	bl	800022c <__adddf3>
 8009eba:	4622      	mov	r2, r4
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	f7f6 fb6b 	bl	8000598 <__aeabi_dmul>
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	462b      	mov	r3, r5
 8009ec6:	f7f6 fb67 	bl	8000598 <__aeabi_dmul>
 8009eca:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ece:	4604      	mov	r4, r0
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fb5f 	bl	8000598 <__aeabi_dmul>
 8009eda:	460b      	mov	r3, r1
 8009edc:	4602      	mov	r2, r0
 8009ede:	4629      	mov	r1, r5
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f7f6 f9a1 	bl	8000228 <__aeabi_dsub>
 8009ee6:	4b2b      	ldr	r3, [pc, #172]	; (8009f94 <__kernel_cos+0x17c>)
 8009ee8:	4598      	cmp	r8, r3
 8009eea:	4606      	mov	r6, r0
 8009eec:	460f      	mov	r7, r1
 8009eee:	dc10      	bgt.n	8009f12 <__kernel_cos+0xfa>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4650      	mov	r0, sl
 8009ef6:	4659      	mov	r1, fp
 8009ef8:	f7f6 f996 	bl	8000228 <__aeabi_dsub>
 8009efc:	460b      	mov	r3, r1
 8009efe:	4926      	ldr	r1, [pc, #152]	; (8009f98 <__kernel_cos+0x180>)
 8009f00:	4602      	mov	r2, r0
 8009f02:	2000      	movs	r0, #0
 8009f04:	f7f6 f990 	bl	8000228 <__aeabi_dsub>
 8009f08:	ec41 0b10 	vmov	d0, r0, r1
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	4b22      	ldr	r3, [pc, #136]	; (8009f9c <__kernel_cos+0x184>)
 8009f14:	4920      	ldr	r1, [pc, #128]	; (8009f98 <__kernel_cos+0x180>)
 8009f16:	4598      	cmp	r8, r3
 8009f18:	bfcc      	ite	gt
 8009f1a:	4d21      	ldrgt	r5, [pc, #132]	; (8009fa0 <__kernel_cos+0x188>)
 8009f1c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009f20:	2400      	movs	r4, #0
 8009f22:	4622      	mov	r2, r4
 8009f24:	462b      	mov	r3, r5
 8009f26:	2000      	movs	r0, #0
 8009f28:	f7f6 f97e 	bl	8000228 <__aeabi_dsub>
 8009f2c:	4622      	mov	r2, r4
 8009f2e:	4680      	mov	r8, r0
 8009f30:	4689      	mov	r9, r1
 8009f32:	462b      	mov	r3, r5
 8009f34:	4650      	mov	r0, sl
 8009f36:	4659      	mov	r1, fp
 8009f38:	f7f6 f976 	bl	8000228 <__aeabi_dsub>
 8009f3c:	4632      	mov	r2, r6
 8009f3e:	463b      	mov	r3, r7
 8009f40:	f7f6 f972 	bl	8000228 <__aeabi_dsub>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4640      	mov	r0, r8
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	e7da      	b.n	8009f04 <__kernel_cos+0xec>
 8009f4e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009f88 <__kernel_cos+0x170>
 8009f52:	e7db      	b.n	8009f0c <__kernel_cos+0xf4>
 8009f54:	f3af 8000 	nop.w
 8009f58:	be8838d4 	.word	0xbe8838d4
 8009f5c:	bda8fae9 	.word	0xbda8fae9
 8009f60:	bdb4b1c4 	.word	0xbdb4b1c4
 8009f64:	3e21ee9e 	.word	0x3e21ee9e
 8009f68:	809c52ad 	.word	0x809c52ad
 8009f6c:	3e927e4f 	.word	0x3e927e4f
 8009f70:	19cb1590 	.word	0x19cb1590
 8009f74:	3efa01a0 	.word	0x3efa01a0
 8009f78:	16c15177 	.word	0x16c15177
 8009f7c:	3f56c16c 	.word	0x3f56c16c
 8009f80:	5555554c 	.word	0x5555554c
 8009f84:	3fa55555 	.word	0x3fa55555
 8009f88:	00000000 	.word	0x00000000
 8009f8c:	3ff00000 	.word	0x3ff00000
 8009f90:	3fe00000 	.word	0x3fe00000
 8009f94:	3fd33332 	.word	0x3fd33332
 8009f98:	3ff00000 	.word	0x3ff00000
 8009f9c:	3fe90000 	.word	0x3fe90000
 8009fa0:	3fd20000 	.word	0x3fd20000
 8009fa4:	00000000 	.word	0x00000000

08009fa8 <__kernel_sin>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	ed2d 8b04 	vpush	{d8-d9}
 8009fb0:	eeb0 8a41 	vmov.f32	s16, s2
 8009fb4:	eef0 8a61 	vmov.f32	s17, s3
 8009fb8:	ec55 4b10 	vmov	r4, r5, d0
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009fc2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009fc6:	9001      	str	r0, [sp, #4]
 8009fc8:	da06      	bge.n	8009fd8 <__kernel_sin+0x30>
 8009fca:	ee10 0a10 	vmov	r0, s0
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fd7c 	bl	8000acc <__aeabi_d2iz>
 8009fd4:	2800      	cmp	r0, #0
 8009fd6:	d051      	beq.n	800a07c <__kernel_sin+0xd4>
 8009fd8:	4622      	mov	r2, r4
 8009fda:	462b      	mov	r3, r5
 8009fdc:	4620      	mov	r0, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	f7f6 fada 	bl	8000598 <__aeabi_dmul>
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	468b      	mov	fp, r1
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 fad2 	bl	8000598 <__aeabi_dmul>
 8009ff4:	a341      	add	r3, pc, #260	; (adr r3, 800a0fc <__kernel_sin+0x154>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	4680      	mov	r8, r0
 8009ffc:	4689      	mov	r9, r1
 8009ffe:	4650      	mov	r0, sl
 800a000:	4659      	mov	r1, fp
 800a002:	f7f6 fac9 	bl	8000598 <__aeabi_dmul>
 800a006:	a33f      	add	r3, pc, #252	; (adr r3, 800a104 <__kernel_sin+0x15c>)
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 f90c 	bl	8000228 <__aeabi_dsub>
 800a010:	4652      	mov	r2, sl
 800a012:	465b      	mov	r3, fp
 800a014:	f7f6 fac0 	bl	8000598 <__aeabi_dmul>
 800a018:	a33c      	add	r3, pc, #240	; (adr r3, 800a10c <__kernel_sin+0x164>)
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f7f6 f905 	bl	800022c <__adddf3>
 800a022:	4652      	mov	r2, sl
 800a024:	465b      	mov	r3, fp
 800a026:	f7f6 fab7 	bl	8000598 <__aeabi_dmul>
 800a02a:	a33a      	add	r3, pc, #232	; (adr r3, 800a114 <__kernel_sin+0x16c>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f7f6 f8fa 	bl	8000228 <__aeabi_dsub>
 800a034:	4652      	mov	r2, sl
 800a036:	465b      	mov	r3, fp
 800a038:	f7f6 faae 	bl	8000598 <__aeabi_dmul>
 800a03c:	a337      	add	r3, pc, #220	; (adr r3, 800a11c <__kernel_sin+0x174>)
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	f7f6 f8f3 	bl	800022c <__adddf3>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	4606      	mov	r6, r0
 800a04a:	460f      	mov	r7, r1
 800a04c:	b9eb      	cbnz	r3, 800a08a <__kernel_sin+0xe2>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	f7f6 fa9f 	bl	8000598 <__aeabi_dmul>
 800a05a:	a325      	add	r3, pc, #148	; (adr r3, 800a0f0 <__kernel_sin+0x148>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 f8e2 	bl	8000228 <__aeabi_dsub>
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	f7f6 fa96 	bl	8000598 <__aeabi_dmul>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	4620      	mov	r0, r4
 800a072:	4629      	mov	r1, r5
 800a074:	f7f6 f8da 	bl	800022c <__adddf3>
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	ec45 4b10 	vmov	d0, r4, r5
 800a080:	b003      	add	sp, #12
 800a082:	ecbd 8b04 	vpop	{d8-d9}
 800a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08a:	4b1b      	ldr	r3, [pc, #108]	; (800a0f8 <__kernel_sin+0x150>)
 800a08c:	ec51 0b18 	vmov	r0, r1, d8
 800a090:	2200      	movs	r2, #0
 800a092:	f7f6 fa81 	bl	8000598 <__aeabi_dmul>
 800a096:	4632      	mov	r2, r6
 800a098:	ec41 0b19 	vmov	d9, r0, r1
 800a09c:	463b      	mov	r3, r7
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 fa79 	bl	8000598 <__aeabi_dmul>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	ec51 0b19 	vmov	r0, r1, d9
 800a0ae:	f7f6 f8bb 	bl	8000228 <__aeabi_dsub>
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	f7f6 fa6f 	bl	8000598 <__aeabi_dmul>
 800a0ba:	ec53 2b18 	vmov	r2, r3, d8
 800a0be:	f7f6 f8b3 	bl	8000228 <__aeabi_dsub>
 800a0c2:	a30b      	add	r3, pc, #44	; (adr r3, 800a0f0 <__kernel_sin+0x148>)
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	460f      	mov	r7, r1
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	f7f6 fa62 	bl	8000598 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 f8a6 	bl	800022c <__adddf3>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	f7f6 f89e 	bl	8000228 <__aeabi_dsub>
 800a0ec:	e7c4      	b.n	800a078 <__kernel_sin+0xd0>
 800a0ee:	bf00      	nop
 800a0f0:	55555549 	.word	0x55555549
 800a0f4:	3fc55555 	.word	0x3fc55555
 800a0f8:	3fe00000 	.word	0x3fe00000
 800a0fc:	5acfd57c 	.word	0x5acfd57c
 800a100:	3de5d93a 	.word	0x3de5d93a
 800a104:	8a2b9ceb 	.word	0x8a2b9ceb
 800a108:	3e5ae5e6 	.word	0x3e5ae5e6
 800a10c:	57b1fe7d 	.word	0x57b1fe7d
 800a110:	3ec71de3 	.word	0x3ec71de3
 800a114:	19c161d5 	.word	0x19c161d5
 800a118:	3f2a01a0 	.word	0x3f2a01a0
 800a11c:	1110f8a6 	.word	0x1110f8a6
 800a120:	3f811111 	.word	0x3f811111
 800a124:	00000000 	.word	0x00000000

0800a128 <__ieee754_rem_pio2>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	ed2d 8b02 	vpush	{d8}
 800a130:	ec55 4b10 	vmov	r4, r5, d0
 800a134:	4bca      	ldr	r3, [pc, #808]	; (800a460 <__ieee754_rem_pio2+0x338>)
 800a136:	b08b      	sub	sp, #44	; 0x2c
 800a138:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a13c:	4598      	cmp	r8, r3
 800a13e:	4682      	mov	sl, r0
 800a140:	9502      	str	r5, [sp, #8]
 800a142:	dc08      	bgt.n	800a156 <__ieee754_rem_pio2+0x2e>
 800a144:	2200      	movs	r2, #0
 800a146:	2300      	movs	r3, #0
 800a148:	ed80 0b00 	vstr	d0, [r0]
 800a14c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a150:	f04f 0b00 	mov.w	fp, #0
 800a154:	e028      	b.n	800a1a8 <__ieee754_rem_pio2+0x80>
 800a156:	4bc3      	ldr	r3, [pc, #780]	; (800a464 <__ieee754_rem_pio2+0x33c>)
 800a158:	4598      	cmp	r8, r3
 800a15a:	dc78      	bgt.n	800a24e <__ieee754_rem_pio2+0x126>
 800a15c:	9b02      	ldr	r3, [sp, #8]
 800a15e:	4ec2      	ldr	r6, [pc, #776]	; (800a468 <__ieee754_rem_pio2+0x340>)
 800a160:	2b00      	cmp	r3, #0
 800a162:	ee10 0a10 	vmov	r0, s0
 800a166:	a3b0      	add	r3, pc, #704	; (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16c:	4629      	mov	r1, r5
 800a16e:	dd39      	ble.n	800a1e4 <__ieee754_rem_pio2+0xbc>
 800a170:	f7f6 f85a 	bl	8000228 <__aeabi_dsub>
 800a174:	45b0      	cmp	r8, r6
 800a176:	4604      	mov	r4, r0
 800a178:	460d      	mov	r5, r1
 800a17a:	d01b      	beq.n	800a1b4 <__ieee754_rem_pio2+0x8c>
 800a17c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	f7f6 f851 	bl	8000228 <__aeabi_dsub>
 800a186:	4602      	mov	r2, r0
 800a188:	460b      	mov	r3, r1
 800a18a:	e9ca 2300 	strd	r2, r3, [sl]
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 f849 	bl	8000228 <__aeabi_dsub>
 800a196:	a3a6      	add	r3, pc, #664	; (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 f844 	bl	8000228 <__aeabi_dsub>
 800a1a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a1a4:	f04f 0b01 	mov.w	fp, #1
 800a1a8:	4658      	mov	r0, fp
 800a1aa:	b00b      	add	sp, #44	; 0x2c
 800a1ac:	ecbd 8b02 	vpop	{d8}
 800a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800a438 <__ieee754_rem_pio2+0x310>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 f835 	bl	8000228 <__aeabi_dsub>
 800a1be:	a3a0      	add	r3, pc, #640	; (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	460d      	mov	r5, r1
 800a1c8:	f7f6 f82e 	bl	8000228 <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	e9ca 2300 	strd	r2, r3, [sl]
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	4629      	mov	r1, r5
 800a1d8:	f7f6 f826 	bl	8000228 <__aeabi_dsub>
 800a1dc:	a398      	add	r3, pc, #608	; (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	e7db      	b.n	800a19c <__ieee754_rem_pio2+0x74>
 800a1e4:	f7f6 f822 	bl	800022c <__adddf3>
 800a1e8:	45b0      	cmp	r8, r6
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	460d      	mov	r5, r1
 800a1ee:	d016      	beq.n	800a21e <__ieee754_rem_pio2+0xf6>
 800a1f0:	a38f      	add	r3, pc, #572	; (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f6:	f7f6 f819 	bl	800022c <__adddf3>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	e9ca 2300 	strd	r2, r3, [sl]
 800a202:	4620      	mov	r0, r4
 800a204:	4629      	mov	r1, r5
 800a206:	f7f6 f80f 	bl	8000228 <__aeabi_dsub>
 800a20a:	a389      	add	r3, pc, #548	; (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f6 f80c 	bl	800022c <__adddf3>
 800a214:	f04f 3bff 	mov.w	fp, #4294967295
 800a218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a21c:	e7c4      	b.n	800a1a8 <__ieee754_rem_pio2+0x80>
 800a21e:	a386      	add	r3, pc, #536	; (adr r3, 800a438 <__ieee754_rem_pio2+0x310>)
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f802 	bl	800022c <__adddf3>
 800a228:	a385      	add	r3, pc, #532	; (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	4604      	mov	r4, r0
 800a230:	460d      	mov	r5, r1
 800a232:	f7f5 fffb 	bl	800022c <__adddf3>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	e9ca 2300 	strd	r2, r3, [sl]
 800a23e:	4620      	mov	r0, r4
 800a240:	4629      	mov	r1, r5
 800a242:	f7f5 fff1 	bl	8000228 <__aeabi_dsub>
 800a246:	a37e      	add	r3, pc, #504	; (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	e7e0      	b.n	800a210 <__ieee754_rem_pio2+0xe8>
 800a24e:	4b87      	ldr	r3, [pc, #540]	; (800a46c <__ieee754_rem_pio2+0x344>)
 800a250:	4598      	cmp	r8, r3
 800a252:	f300 80d8 	bgt.w	800a406 <__ieee754_rem_pio2+0x2de>
 800a256:	f000 f96d 	bl	800a534 <fabs>
 800a25a:	ec55 4b10 	vmov	r4, r5, d0
 800a25e:	ee10 0a10 	vmov	r0, s0
 800a262:	a379      	add	r3, pc, #484	; (adr r3, 800a448 <__ieee754_rem_pio2+0x320>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f995 	bl	8000598 <__aeabi_dmul>
 800a26e:	4b80      	ldr	r3, [pc, #512]	; (800a470 <__ieee754_rem_pio2+0x348>)
 800a270:	2200      	movs	r2, #0
 800a272:	f7f5 ffdb 	bl	800022c <__adddf3>
 800a276:	f7f6 fc29 	bl	8000acc <__aeabi_d2iz>
 800a27a:	4683      	mov	fp, r0
 800a27c:	f7f6 f922 	bl	80004c4 <__aeabi_i2d>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	ec43 2b18 	vmov	d8, r2, r3
 800a288:	a367      	add	r3, pc, #412	; (adr r3, 800a428 <__ieee754_rem_pio2+0x300>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f983 	bl	8000598 <__aeabi_dmul>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f5 ffc5 	bl	8000228 <__aeabi_dsub>
 800a29e:	a364      	add	r3, pc, #400	; (adr r3, 800a430 <__ieee754_rem_pio2+0x308>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	ec51 0b18 	vmov	r0, r1, d8
 800a2ac:	f7f6 f974 	bl	8000598 <__aeabi_dmul>
 800a2b0:	f1bb 0f1f 	cmp.w	fp, #31
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	dc0d      	bgt.n	800a2d6 <__ieee754_rem_pio2+0x1ae>
 800a2ba:	4b6e      	ldr	r3, [pc, #440]	; (800a474 <__ieee754_rem_pio2+0x34c>)
 800a2bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a2c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c4:	4543      	cmp	r3, r8
 800a2c6:	d006      	beq.n	800a2d6 <__ieee754_rem_pio2+0x1ae>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	4639      	mov	r1, r7
 800a2d0:	f7f5 ffaa 	bl	8000228 <__aeabi_dsub>
 800a2d4:	e00e      	b.n	800a2f4 <__ieee754_rem_pio2+0x1cc>
 800a2d6:	462b      	mov	r3, r5
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4630      	mov	r0, r6
 800a2dc:	4639      	mov	r1, r7
 800a2de:	f7f5 ffa3 	bl	8000228 <__aeabi_dsub>
 800a2e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a2e6:	9303      	str	r3, [sp, #12]
 800a2e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a2ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	dc02      	bgt.n	800a2fa <__ieee754_rem_pio2+0x1d2>
 800a2f4:	e9ca 0100 	strd	r0, r1, [sl]
 800a2f8:	e039      	b.n	800a36e <__ieee754_rem_pio2+0x246>
 800a2fa:	a34f      	add	r3, pc, #316	; (adr r3, 800a438 <__ieee754_rem_pio2+0x310>)
 800a2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a300:	ec51 0b18 	vmov	r0, r1, d8
 800a304:	f7f6 f948 	bl	8000598 <__aeabi_dmul>
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	4602      	mov	r2, r0
 800a30e:	460b      	mov	r3, r1
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f5 ff88 	bl	8000228 <__aeabi_dsub>
 800a318:	4602      	mov	r2, r0
 800a31a:	460b      	mov	r3, r1
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f5 ff80 	bl	8000228 <__aeabi_dsub>
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	f7f5 ff7c 	bl	8000228 <__aeabi_dsub>
 800a330:	a343      	add	r3, pc, #268	; (adr r3, 800a440 <__ieee754_rem_pio2+0x318>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	ec51 0b18 	vmov	r0, r1, d8
 800a33e:	f7f6 f92b 	bl	8000598 <__aeabi_dmul>
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	f7f5 ff6f 	bl	8000228 <__aeabi_dsub>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4604      	mov	r4, r0
 800a350:	460d      	mov	r5, r1
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f5 ff67 	bl	8000228 <__aeabi_dsub>
 800a35a:	9a03      	ldr	r2, [sp, #12]
 800a35c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b31      	cmp	r3, #49	; 0x31
 800a364:	dc24      	bgt.n	800a3b0 <__ieee754_rem_pio2+0x288>
 800a366:	e9ca 0100 	strd	r0, r1, [sl]
 800a36a:	4646      	mov	r6, r8
 800a36c:	464f      	mov	r7, r9
 800a36e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a372:	4630      	mov	r0, r6
 800a374:	4642      	mov	r2, r8
 800a376:	464b      	mov	r3, r9
 800a378:	4639      	mov	r1, r7
 800a37a:	f7f5 ff55 	bl	8000228 <__aeabi_dsub>
 800a37e:	462b      	mov	r3, r5
 800a380:	4622      	mov	r2, r4
 800a382:	f7f5 ff51 	bl	8000228 <__aeabi_dsub>
 800a386:	9b02      	ldr	r3, [sp, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a38e:	f6bf af0b 	bge.w	800a1a8 <__ieee754_rem_pio2+0x80>
 800a392:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a396:	f8ca 3004 	str.w	r3, [sl, #4]
 800a39a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a39e:	f8ca 8000 	str.w	r8, [sl]
 800a3a2:	f8ca 0008 	str.w	r0, [sl, #8]
 800a3a6:	f8ca 300c 	str.w	r3, [sl, #12]
 800a3aa:	f1cb 0b00 	rsb	fp, fp, #0
 800a3ae:	e6fb      	b.n	800a1a8 <__ieee754_rem_pio2+0x80>
 800a3b0:	a327      	add	r3, pc, #156	; (adr r3, 800a450 <__ieee754_rem_pio2+0x328>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	ec51 0b18 	vmov	r0, r1, d8
 800a3ba:	f7f6 f8ed 	bl	8000598 <__aeabi_dmul>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	f7f5 ff2d 	bl	8000228 <__aeabi_dsub>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	460f      	mov	r7, r1
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	4649      	mov	r1, r9
 800a3da:	f7f5 ff25 	bl	8000228 <__aeabi_dsub>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	462b      	mov	r3, r5
 800a3e2:	f7f5 ff21 	bl	8000228 <__aeabi_dsub>
 800a3e6:	a31c      	add	r3, pc, #112	; (adr r3, 800a458 <__ieee754_rem_pio2+0x330>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	460d      	mov	r5, r1
 800a3f0:	ec51 0b18 	vmov	r0, r1, d8
 800a3f4:	f7f6 f8d0 	bl	8000598 <__aeabi_dmul>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	f7f5 ff14 	bl	8000228 <__aeabi_dsub>
 800a400:	4604      	mov	r4, r0
 800a402:	460d      	mov	r5, r1
 800a404:	e760      	b.n	800a2c8 <__ieee754_rem_pio2+0x1a0>
 800a406:	4b1c      	ldr	r3, [pc, #112]	; (800a478 <__ieee754_rem_pio2+0x350>)
 800a408:	4598      	cmp	r8, r3
 800a40a:	dd37      	ble.n	800a47c <__ieee754_rem_pio2+0x354>
 800a40c:	ee10 2a10 	vmov	r2, s0
 800a410:	462b      	mov	r3, r5
 800a412:	4620      	mov	r0, r4
 800a414:	4629      	mov	r1, r5
 800a416:	f7f5 ff07 	bl	8000228 <__aeabi_dsub>
 800a41a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a41e:	e9ca 0100 	strd	r0, r1, [sl]
 800a422:	e695      	b.n	800a150 <__ieee754_rem_pio2+0x28>
 800a424:	f3af 8000 	nop.w
 800a428:	54400000 	.word	0x54400000
 800a42c:	3ff921fb 	.word	0x3ff921fb
 800a430:	1a626331 	.word	0x1a626331
 800a434:	3dd0b461 	.word	0x3dd0b461
 800a438:	1a600000 	.word	0x1a600000
 800a43c:	3dd0b461 	.word	0x3dd0b461
 800a440:	2e037073 	.word	0x2e037073
 800a444:	3ba3198a 	.word	0x3ba3198a
 800a448:	6dc9c883 	.word	0x6dc9c883
 800a44c:	3fe45f30 	.word	0x3fe45f30
 800a450:	2e000000 	.word	0x2e000000
 800a454:	3ba3198a 	.word	0x3ba3198a
 800a458:	252049c1 	.word	0x252049c1
 800a45c:	397b839a 	.word	0x397b839a
 800a460:	3fe921fb 	.word	0x3fe921fb
 800a464:	4002d97b 	.word	0x4002d97b
 800a468:	3ff921fb 	.word	0x3ff921fb
 800a46c:	413921fb 	.word	0x413921fb
 800a470:	3fe00000 	.word	0x3fe00000
 800a474:	0800aeb4 	.word	0x0800aeb4
 800a478:	7fefffff 	.word	0x7fefffff
 800a47c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800a480:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800a484:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800a488:	4620      	mov	r0, r4
 800a48a:	460d      	mov	r5, r1
 800a48c:	f7f6 fb1e 	bl	8000acc <__aeabi_d2iz>
 800a490:	f7f6 f818 	bl	80004c4 <__aeabi_i2d>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4620      	mov	r0, r4
 800a49a:	4629      	mov	r1, r5
 800a49c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4a0:	f7f5 fec2 	bl	8000228 <__aeabi_dsub>
 800a4a4:	4b21      	ldr	r3, [pc, #132]	; (800a52c <__ieee754_rem_pio2+0x404>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f7f6 f876 	bl	8000598 <__aeabi_dmul>
 800a4ac:	460d      	mov	r5, r1
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	f7f6 fb0c 	bl	8000acc <__aeabi_d2iz>
 800a4b4:	f7f6 f806 	bl	80004c4 <__aeabi_i2d>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a4c4:	f7f5 feb0 	bl	8000228 <__aeabi_dsub>
 800a4c8:	4b18      	ldr	r3, [pc, #96]	; (800a52c <__ieee754_rem_pio2+0x404>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f7f6 f864 	bl	8000598 <__aeabi_dmul>
 800a4d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a4d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a4d8:	2703      	movs	r7, #3
 800a4da:	2400      	movs	r4, #0
 800a4dc:	2500      	movs	r5, #0
 800a4de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800a4e2:	4622      	mov	r2, r4
 800a4e4:	462b      	mov	r3, r5
 800a4e6:	46b9      	mov	r9, r7
 800a4e8:	3f01      	subs	r7, #1
 800a4ea:	f7f6 fabd 	bl	8000a68 <__aeabi_dcmpeq>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d1f5      	bne.n	800a4de <__ieee754_rem_pio2+0x3b6>
 800a4f2:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <__ieee754_rem_pio2+0x408>)
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	464b      	mov	r3, r9
 800a4fe:	4651      	mov	r1, sl
 800a500:	a804      	add	r0, sp, #16
 800a502:	f000 f821 	bl	800a548 <__kernel_rem_pio2>
 800a506:	9b02      	ldr	r3, [sp, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	4683      	mov	fp, r0
 800a50c:	f6bf ae4c 	bge.w	800a1a8 <__ieee754_rem_pio2+0x80>
 800a510:	e9da 2100 	ldrd	r2, r1, [sl]
 800a514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a518:	e9ca 2300 	strd	r2, r3, [sl]
 800a51c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a520:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a524:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a528:	e73f      	b.n	800a3aa <__ieee754_rem_pio2+0x282>
 800a52a:	bf00      	nop
 800a52c:	41700000 	.word	0x41700000
 800a530:	0800af34 	.word	0x0800af34

0800a534 <fabs>:
 800a534:	ec51 0b10 	vmov	r0, r1, d0
 800a538:	ee10 2a10 	vmov	r2, s0
 800a53c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a540:	ec43 2b10 	vmov	d0, r2, r3
 800a544:	4770      	bx	lr
	...

0800a548 <__kernel_rem_pio2>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	ed2d 8b02 	vpush	{d8}
 800a550:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800a554:	f112 0f14 	cmn.w	r2, #20
 800a558:	9306      	str	r3, [sp, #24]
 800a55a:	9104      	str	r1, [sp, #16]
 800a55c:	4bc2      	ldr	r3, [pc, #776]	; (800a868 <__kernel_rem_pio2+0x320>)
 800a55e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800a560:	9009      	str	r0, [sp, #36]	; 0x24
 800a562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a56e:	bfa8      	it	ge
 800a570:	1ed4      	subge	r4, r2, #3
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	bfb2      	itee	lt
 800a576:	2400      	movlt	r4, #0
 800a578:	2318      	movge	r3, #24
 800a57a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a57e:	f06f 0317 	mvn.w	r3, #23
 800a582:	fb04 3303 	mla	r3, r4, r3, r3
 800a586:	eb03 0a02 	add.w	sl, r3, r2
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	9a05      	ldr	r2, [sp, #20]
 800a58e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800a858 <__kernel_rem_pio2+0x310>
 800a592:	eb03 0802 	add.w	r8, r3, r2
 800a596:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a598:	1aa7      	subs	r7, r4, r2
 800a59a:	ae20      	add	r6, sp, #128	; 0x80
 800a59c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a5a0:	2500      	movs	r5, #0
 800a5a2:	4545      	cmp	r5, r8
 800a5a4:	dd13      	ble.n	800a5ce <__kernel_rem_pio2+0x86>
 800a5a6:	9b06      	ldr	r3, [sp, #24]
 800a5a8:	aa20      	add	r2, sp, #128	; 0x80
 800a5aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a5ae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800a5b2:	f04f 0800 	mov.w	r8, #0
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	4598      	cmp	r8, r3
 800a5ba:	dc31      	bgt.n	800a620 <__kernel_rem_pio2+0xd8>
 800a5bc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800a858 <__kernel_rem_pio2+0x310>
 800a5c0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a5c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5c8:	462f      	mov	r7, r5
 800a5ca:	2600      	movs	r6, #0
 800a5cc:	e01b      	b.n	800a606 <__kernel_rem_pio2+0xbe>
 800a5ce:	42ef      	cmn	r7, r5
 800a5d0:	d407      	bmi.n	800a5e2 <__kernel_rem_pio2+0x9a>
 800a5d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a5d6:	f7f5 ff75 	bl	80004c4 <__aeabi_i2d>
 800a5da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a5de:	3501      	adds	r5, #1
 800a5e0:	e7df      	b.n	800a5a2 <__kernel_rem_pio2+0x5a>
 800a5e2:	ec51 0b18 	vmov	r0, r1, d8
 800a5e6:	e7f8      	b.n	800a5da <__kernel_rem_pio2+0x92>
 800a5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a5f0:	f7f5 ffd2 	bl	8000598 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fc:	f7f5 fe16 	bl	800022c <__adddf3>
 800a600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a604:	3601      	adds	r6, #1
 800a606:	9b05      	ldr	r3, [sp, #20]
 800a608:	429e      	cmp	r6, r3
 800a60a:	f1a7 0708 	sub.w	r7, r7, #8
 800a60e:	ddeb      	ble.n	800a5e8 <__kernel_rem_pio2+0xa0>
 800a610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a614:	f108 0801 	add.w	r8, r8, #1
 800a618:	ecab 7b02 	vstmia	fp!, {d7}
 800a61c:	3508      	adds	r5, #8
 800a61e:	e7ca      	b.n	800a5b6 <__kernel_rem_pio2+0x6e>
 800a620:	9b00      	ldr	r3, [sp, #0]
 800a622:	aa0c      	add	r2, sp, #48	; 0x30
 800a624:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a628:	930b      	str	r3, [sp, #44]	; 0x2c
 800a62a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800a62c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a630:	9c00      	ldr	r4, [sp, #0]
 800a632:	930a      	str	r3, [sp, #40]	; 0x28
 800a634:	00e3      	lsls	r3, r4, #3
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	ab98      	add	r3, sp, #608	; 0x260
 800a63a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a63e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a642:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800a646:	ab70      	add	r3, sp, #448	; 0x1c0
 800a648:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a64c:	46c3      	mov	fp, r8
 800a64e:	46a1      	mov	r9, r4
 800a650:	f1b9 0f00 	cmp.w	r9, #0
 800a654:	f1a5 0508 	sub.w	r5, r5, #8
 800a658:	dc77      	bgt.n	800a74a <__kernel_rem_pio2+0x202>
 800a65a:	ec47 6b10 	vmov	d0, r6, r7
 800a65e:	4650      	mov	r0, sl
 800a660:	f000 fac2 	bl	800abe8 <scalbn>
 800a664:	ec57 6b10 	vmov	r6, r7, d0
 800a668:	2200      	movs	r2, #0
 800a66a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a66e:	ee10 0a10 	vmov	r0, s0
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 ff90 	bl	8000598 <__aeabi_dmul>
 800a678:	ec41 0b10 	vmov	d0, r0, r1
 800a67c:	f000 fb34 	bl	800ace8 <floor>
 800a680:	4b7a      	ldr	r3, [pc, #488]	; (800a86c <__kernel_rem_pio2+0x324>)
 800a682:	ec51 0b10 	vmov	r0, r1, d0
 800a686:	2200      	movs	r2, #0
 800a688:	f7f5 ff86 	bl	8000598 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f7f5 fdc8 	bl	8000228 <__aeabi_dsub>
 800a698:	460f      	mov	r7, r1
 800a69a:	4606      	mov	r6, r0
 800a69c:	f7f6 fa16 	bl	8000acc <__aeabi_d2iz>
 800a6a0:	9002      	str	r0, [sp, #8]
 800a6a2:	f7f5 ff0f 	bl	80004c4 <__aeabi_i2d>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	f7f5 fdbb 	bl	8000228 <__aeabi_dsub>
 800a6b2:	f1ba 0f00 	cmp.w	sl, #0
 800a6b6:	4606      	mov	r6, r0
 800a6b8:	460f      	mov	r7, r1
 800a6ba:	dd6d      	ble.n	800a798 <__kernel_rem_pio2+0x250>
 800a6bc:	1e61      	subs	r1, r4, #1
 800a6be:	ab0c      	add	r3, sp, #48	; 0x30
 800a6c0:	9d02      	ldr	r5, [sp, #8]
 800a6c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a6c6:	f1ca 0018 	rsb	r0, sl, #24
 800a6ca:	fa43 f200 	asr.w	r2, r3, r0
 800a6ce:	4415      	add	r5, r2
 800a6d0:	4082      	lsls	r2, r0
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	aa0c      	add	r2, sp, #48	; 0x30
 800a6d6:	9502      	str	r5, [sp, #8]
 800a6d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6dc:	f1ca 0217 	rsb	r2, sl, #23
 800a6e0:	fa43 fb02 	asr.w	fp, r3, r2
 800a6e4:	f1bb 0f00 	cmp.w	fp, #0
 800a6e8:	dd65      	ble.n	800a7b6 <__kernel_rem_pio2+0x26e>
 800a6ea:	9b02      	ldr	r3, [sp, #8]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	9302      	str	r3, [sp, #8]
 800a6f2:	4615      	mov	r5, r2
 800a6f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a6f8:	4294      	cmp	r4, r2
 800a6fa:	f300 809f 	bgt.w	800a83c <__kernel_rem_pio2+0x2f4>
 800a6fe:	f1ba 0f00 	cmp.w	sl, #0
 800a702:	dd07      	ble.n	800a714 <__kernel_rem_pio2+0x1cc>
 800a704:	f1ba 0f01 	cmp.w	sl, #1
 800a708:	f000 80c1 	beq.w	800a88e <__kernel_rem_pio2+0x346>
 800a70c:	f1ba 0f02 	cmp.w	sl, #2
 800a710:	f000 80c7 	beq.w	800a8a2 <__kernel_rem_pio2+0x35a>
 800a714:	f1bb 0f02 	cmp.w	fp, #2
 800a718:	d14d      	bne.n	800a7b6 <__kernel_rem_pio2+0x26e>
 800a71a:	4632      	mov	r2, r6
 800a71c:	463b      	mov	r3, r7
 800a71e:	4954      	ldr	r1, [pc, #336]	; (800a870 <__kernel_rem_pio2+0x328>)
 800a720:	2000      	movs	r0, #0
 800a722:	f7f5 fd81 	bl	8000228 <__aeabi_dsub>
 800a726:	4606      	mov	r6, r0
 800a728:	460f      	mov	r7, r1
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	d043      	beq.n	800a7b6 <__kernel_rem_pio2+0x26e>
 800a72e:	4650      	mov	r0, sl
 800a730:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800a860 <__kernel_rem_pio2+0x318>
 800a734:	f000 fa58 	bl	800abe8 <scalbn>
 800a738:	4630      	mov	r0, r6
 800a73a:	4639      	mov	r1, r7
 800a73c:	ec53 2b10 	vmov	r2, r3, d0
 800a740:	f7f5 fd72 	bl	8000228 <__aeabi_dsub>
 800a744:	4606      	mov	r6, r0
 800a746:	460f      	mov	r7, r1
 800a748:	e035      	b.n	800a7b6 <__kernel_rem_pio2+0x26e>
 800a74a:	4b4a      	ldr	r3, [pc, #296]	; (800a874 <__kernel_rem_pio2+0x32c>)
 800a74c:	2200      	movs	r2, #0
 800a74e:	4630      	mov	r0, r6
 800a750:	4639      	mov	r1, r7
 800a752:	f7f5 ff21 	bl	8000598 <__aeabi_dmul>
 800a756:	f7f6 f9b9 	bl	8000acc <__aeabi_d2iz>
 800a75a:	f7f5 feb3 	bl	80004c4 <__aeabi_i2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	ec43 2b18 	vmov	d8, r2, r3
 800a766:	4b44      	ldr	r3, [pc, #272]	; (800a878 <__kernel_rem_pio2+0x330>)
 800a768:	2200      	movs	r2, #0
 800a76a:	f7f5 ff15 	bl	8000598 <__aeabi_dmul>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	f7f5 fd57 	bl	8000228 <__aeabi_dsub>
 800a77a:	f7f6 f9a7 	bl	8000acc <__aeabi_d2iz>
 800a77e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a782:	f84b 0b04 	str.w	r0, [fp], #4
 800a786:	ec51 0b18 	vmov	r0, r1, d8
 800a78a:	f7f5 fd4f 	bl	800022c <__adddf3>
 800a78e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a792:	4606      	mov	r6, r0
 800a794:	460f      	mov	r7, r1
 800a796:	e75b      	b.n	800a650 <__kernel_rem_pio2+0x108>
 800a798:	d106      	bne.n	800a7a8 <__kernel_rem_pio2+0x260>
 800a79a:	1e63      	subs	r3, r4, #1
 800a79c:	aa0c      	add	r2, sp, #48	; 0x30
 800a79e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800a7a6:	e79d      	b.n	800a6e4 <__kernel_rem_pio2+0x19c>
 800a7a8:	4b34      	ldr	r3, [pc, #208]	; (800a87c <__kernel_rem_pio2+0x334>)
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f7f6 f97a 	bl	8000aa4 <__aeabi_dcmpge>
 800a7b0:	2800      	cmp	r0, #0
 800a7b2:	d140      	bne.n	800a836 <__kernel_rem_pio2+0x2ee>
 800a7b4:	4683      	mov	fp, r0
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f6 f953 	bl	8000a68 <__aeabi_dcmpeq>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f000 80c1 	beq.w	800a94a <__kernel_rem_pio2+0x402>
 800a7c8:	1e65      	subs	r5, r4, #1
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	9900      	ldr	r1, [sp, #0]
 800a7d0:	428b      	cmp	r3, r1
 800a7d2:	da6d      	bge.n	800a8b0 <__kernel_rem_pio2+0x368>
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	f000 808a 	beq.w	800a8ee <__kernel_rem_pio2+0x3a6>
 800a7da:	ab0c      	add	r3, sp, #48	; 0x30
 800a7dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800a7e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f000 80ae 	beq.w	800a946 <__kernel_rem_pio2+0x3fe>
 800a7ea:	4650      	mov	r0, sl
 800a7ec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800a860 <__kernel_rem_pio2+0x318>
 800a7f0:	f000 f9fa 	bl	800abe8 <scalbn>
 800a7f4:	1c6b      	adds	r3, r5, #1
 800a7f6:	00da      	lsls	r2, r3, #3
 800a7f8:	9205      	str	r2, [sp, #20]
 800a7fa:	ec57 6b10 	vmov	r6, r7, d0
 800a7fe:	aa70      	add	r2, sp, #448	; 0x1c0
 800a800:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800a874 <__kernel_rem_pio2+0x32c>
 800a804:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800a808:	462c      	mov	r4, r5
 800a80a:	f04f 0800 	mov.w	r8, #0
 800a80e:	2c00      	cmp	r4, #0
 800a810:	f280 80d4 	bge.w	800a9bc <__kernel_rem_pio2+0x474>
 800a814:	462c      	mov	r4, r5
 800a816:	2c00      	cmp	r4, #0
 800a818:	f2c0 8102 	blt.w	800aa20 <__kernel_rem_pio2+0x4d8>
 800a81c:	4b18      	ldr	r3, [pc, #96]	; (800a880 <__kernel_rem_pio2+0x338>)
 800a81e:	461e      	mov	r6, r3
 800a820:	ab70      	add	r3, sp, #448	; 0x1c0
 800a822:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800a826:	1b2b      	subs	r3, r5, r4
 800a828:	f04f 0900 	mov.w	r9, #0
 800a82c:	f04f 0a00 	mov.w	sl, #0
 800a830:	2700      	movs	r7, #0
 800a832:	9306      	str	r3, [sp, #24]
 800a834:	e0e6      	b.n	800aa04 <__kernel_rem_pio2+0x4bc>
 800a836:	f04f 0b02 	mov.w	fp, #2
 800a83a:	e756      	b.n	800a6ea <__kernel_rem_pio2+0x1a2>
 800a83c:	f8d8 3000 	ldr.w	r3, [r8]
 800a840:	bb05      	cbnz	r5, 800a884 <__kernel_rem_pio2+0x33c>
 800a842:	b123      	cbz	r3, 800a84e <__kernel_rem_pio2+0x306>
 800a844:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a848:	f8c8 3000 	str.w	r3, [r8]
 800a84c:	2301      	movs	r3, #1
 800a84e:	3201      	adds	r2, #1
 800a850:	f108 0804 	add.w	r8, r8, #4
 800a854:	461d      	mov	r5, r3
 800a856:	e74f      	b.n	800a6f8 <__kernel_rem_pio2+0x1b0>
	...
 800a864:	3ff00000 	.word	0x3ff00000
 800a868:	0800b080 	.word	0x0800b080
 800a86c:	40200000 	.word	0x40200000
 800a870:	3ff00000 	.word	0x3ff00000
 800a874:	3e700000 	.word	0x3e700000
 800a878:	41700000 	.word	0x41700000
 800a87c:	3fe00000 	.word	0x3fe00000
 800a880:	0800b040 	.word	0x0800b040
 800a884:	1acb      	subs	r3, r1, r3
 800a886:	f8c8 3000 	str.w	r3, [r8]
 800a88a:	462b      	mov	r3, r5
 800a88c:	e7df      	b.n	800a84e <__kernel_rem_pio2+0x306>
 800a88e:	1e62      	subs	r2, r4, #1
 800a890:	ab0c      	add	r3, sp, #48	; 0x30
 800a892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a896:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a89a:	a90c      	add	r1, sp, #48	; 0x30
 800a89c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a8a0:	e738      	b.n	800a714 <__kernel_rem_pio2+0x1cc>
 800a8a2:	1e62      	subs	r2, r4, #1
 800a8a4:	ab0c      	add	r3, sp, #48	; 0x30
 800a8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8aa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a8ae:	e7f4      	b.n	800a89a <__kernel_rem_pio2+0x352>
 800a8b0:	a90c      	add	r1, sp, #48	; 0x30
 800a8b2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	e788      	b.n	800a7ce <__kernel_rem_pio2+0x286>
 800a8bc:	3301      	adds	r3, #1
 800a8be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a8c2:	2900      	cmp	r1, #0
 800a8c4:	d0fa      	beq.n	800a8bc <__kernel_rem_pio2+0x374>
 800a8c6:	9a08      	ldr	r2, [sp, #32]
 800a8c8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800a8cc:	446a      	add	r2, sp
 800a8ce:	3a98      	subs	r2, #152	; 0x98
 800a8d0:	9208      	str	r2, [sp, #32]
 800a8d2:	9a06      	ldr	r2, [sp, #24]
 800a8d4:	a920      	add	r1, sp, #128	; 0x80
 800a8d6:	18a2      	adds	r2, r4, r2
 800a8d8:	18e3      	adds	r3, r4, r3
 800a8da:	f104 0801 	add.w	r8, r4, #1
 800a8de:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a8e2:	9302      	str	r3, [sp, #8]
 800a8e4:	9b02      	ldr	r3, [sp, #8]
 800a8e6:	4543      	cmp	r3, r8
 800a8e8:	da04      	bge.n	800a8f4 <__kernel_rem_pio2+0x3ac>
 800a8ea:	461c      	mov	r4, r3
 800a8ec:	e6a2      	b.n	800a634 <__kernel_rem_pio2+0xec>
 800a8ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7e4      	b.n	800a8be <__kernel_rem_pio2+0x376>
 800a8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8f6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a8fa:	f7f5 fde3 	bl	80004c4 <__aeabi_i2d>
 800a8fe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a904:	46ab      	mov	fp, r5
 800a906:	461c      	mov	r4, r3
 800a908:	f04f 0900 	mov.w	r9, #0
 800a90c:	2600      	movs	r6, #0
 800a90e:	2700      	movs	r7, #0
 800a910:	9b05      	ldr	r3, [sp, #20]
 800a912:	4599      	cmp	r9, r3
 800a914:	dd06      	ble.n	800a924 <__kernel_rem_pio2+0x3dc>
 800a916:	9b08      	ldr	r3, [sp, #32]
 800a918:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a91c:	f108 0801 	add.w	r8, r8, #1
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	e7df      	b.n	800a8e4 <__kernel_rem_pio2+0x39c>
 800a924:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a928:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a92c:	f7f5 fe34 	bl	8000598 <__aeabi_dmul>
 800a930:	4602      	mov	r2, r0
 800a932:	460b      	mov	r3, r1
 800a934:	4630      	mov	r0, r6
 800a936:	4639      	mov	r1, r7
 800a938:	f7f5 fc78 	bl	800022c <__adddf3>
 800a93c:	f109 0901 	add.w	r9, r9, #1
 800a940:	4606      	mov	r6, r0
 800a942:	460f      	mov	r7, r1
 800a944:	e7e4      	b.n	800a910 <__kernel_rem_pio2+0x3c8>
 800a946:	3d01      	subs	r5, #1
 800a948:	e747      	b.n	800a7da <__kernel_rem_pio2+0x292>
 800a94a:	ec47 6b10 	vmov	d0, r6, r7
 800a94e:	f1ca 0000 	rsb	r0, sl, #0
 800a952:	f000 f949 	bl	800abe8 <scalbn>
 800a956:	ec57 6b10 	vmov	r6, r7, d0
 800a95a:	4ba0      	ldr	r3, [pc, #640]	; (800abdc <__kernel_rem_pio2+0x694>)
 800a95c:	ee10 0a10 	vmov	r0, s0
 800a960:	2200      	movs	r2, #0
 800a962:	4639      	mov	r1, r7
 800a964:	f7f6 f89e 	bl	8000aa4 <__aeabi_dcmpge>
 800a968:	b1f8      	cbz	r0, 800a9aa <__kernel_rem_pio2+0x462>
 800a96a:	4b9d      	ldr	r3, [pc, #628]	; (800abe0 <__kernel_rem_pio2+0x698>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fe11 	bl	8000598 <__aeabi_dmul>
 800a976:	f7f6 f8a9 	bl	8000acc <__aeabi_d2iz>
 800a97a:	4680      	mov	r8, r0
 800a97c:	f7f5 fda2 	bl	80004c4 <__aeabi_i2d>
 800a980:	4b96      	ldr	r3, [pc, #600]	; (800abdc <__kernel_rem_pio2+0x694>)
 800a982:	2200      	movs	r2, #0
 800a984:	f7f5 fe08 	bl	8000598 <__aeabi_dmul>
 800a988:	460b      	mov	r3, r1
 800a98a:	4602      	mov	r2, r0
 800a98c:	4639      	mov	r1, r7
 800a98e:	4630      	mov	r0, r6
 800a990:	f7f5 fc4a 	bl	8000228 <__aeabi_dsub>
 800a994:	f7f6 f89a 	bl	8000acc <__aeabi_d2iz>
 800a998:	1c65      	adds	r5, r4, #1
 800a99a:	ab0c      	add	r3, sp, #48	; 0x30
 800a99c:	f10a 0a18 	add.w	sl, sl, #24
 800a9a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9a4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a9a8:	e71f      	b.n	800a7ea <__kernel_rem_pio2+0x2a2>
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f6 f88d 	bl	8000acc <__aeabi_d2iz>
 800a9b2:	ab0c      	add	r3, sp, #48	; 0x30
 800a9b4:	4625      	mov	r5, r4
 800a9b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a9ba:	e716      	b.n	800a7ea <__kernel_rem_pio2+0x2a2>
 800a9bc:	ab0c      	add	r3, sp, #48	; 0x30
 800a9be:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a9c2:	f7f5 fd7f 	bl	80004c4 <__aeabi_i2d>
 800a9c6:	4632      	mov	r2, r6
 800a9c8:	463b      	mov	r3, r7
 800a9ca:	f7f5 fde5 	bl	8000598 <__aeabi_dmul>
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a9d4:	464b      	mov	r3, r9
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f5 fddd 	bl	8000598 <__aeabi_dmul>
 800a9de:	3c01      	subs	r4, #1
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	e713      	b.n	800a80e <__kernel_rem_pio2+0x2c6>
 800a9e6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800a9ea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800a9ee:	f7f5 fdd3 	bl	8000598 <__aeabi_dmul>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	4648      	mov	r0, r9
 800a9f8:	4651      	mov	r1, sl
 800a9fa:	f7f5 fc17 	bl	800022c <__adddf3>
 800a9fe:	3701      	adds	r7, #1
 800aa00:	4681      	mov	r9, r0
 800aa02:	468a      	mov	sl, r1
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	429f      	cmp	r7, r3
 800aa08:	dc02      	bgt.n	800aa10 <__kernel_rem_pio2+0x4c8>
 800aa0a:	9b06      	ldr	r3, [sp, #24]
 800aa0c:	429f      	cmp	r7, r3
 800aa0e:	ddea      	ble.n	800a9e6 <__kernel_rem_pio2+0x49e>
 800aa10:	9a06      	ldr	r2, [sp, #24]
 800aa12:	ab48      	add	r3, sp, #288	; 0x120
 800aa14:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800aa18:	e9c6 9a00 	strd	r9, sl, [r6]
 800aa1c:	3c01      	subs	r4, #1
 800aa1e:	e6fa      	b.n	800a816 <__kernel_rem_pio2+0x2ce>
 800aa20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aa22:	2b02      	cmp	r3, #2
 800aa24:	dc0b      	bgt.n	800aa3e <__kernel_rem_pio2+0x4f6>
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	dc39      	bgt.n	800aa9e <__kernel_rem_pio2+0x556>
 800aa2a:	d05d      	beq.n	800aae8 <__kernel_rem_pio2+0x5a0>
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	f003 0007 	and.w	r0, r3, #7
 800aa32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800aa36:	ecbd 8b02 	vpop	{d8}
 800aa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800aa40:	2b03      	cmp	r3, #3
 800aa42:	d1f3      	bne.n	800aa2c <__kernel_rem_pio2+0x4e4>
 800aa44:	9b05      	ldr	r3, [sp, #20]
 800aa46:	9500      	str	r5, [sp, #0]
 800aa48:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800aa4c:	eb0d 0403 	add.w	r4, sp, r3
 800aa50:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800aa54:	46a2      	mov	sl, r4
 800aa56:	9b00      	ldr	r3, [sp, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	f1aa 0a08 	sub.w	sl, sl, #8
 800aa5e:	dc69      	bgt.n	800ab34 <__kernel_rem_pio2+0x5ec>
 800aa60:	46aa      	mov	sl, r5
 800aa62:	f1ba 0f01 	cmp.w	sl, #1
 800aa66:	f1a4 0408 	sub.w	r4, r4, #8
 800aa6a:	f300 8083 	bgt.w	800ab74 <__kernel_rem_pio2+0x62c>
 800aa6e:	9c05      	ldr	r4, [sp, #20]
 800aa70:	ab48      	add	r3, sp, #288	; 0x120
 800aa72:	441c      	add	r4, r3
 800aa74:	2000      	movs	r0, #0
 800aa76:	2100      	movs	r1, #0
 800aa78:	2d01      	cmp	r5, #1
 800aa7a:	f300 809a 	bgt.w	800abb2 <__kernel_rem_pio2+0x66a>
 800aa7e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800aa82:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800aa86:	f1bb 0f00 	cmp.w	fp, #0
 800aa8a:	f040 8098 	bne.w	800abbe <__kernel_rem_pio2+0x676>
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	e9c3 7800 	strd	r7, r8, [r3]
 800aa94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800aa98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800aa9c:	e7c6      	b.n	800aa2c <__kernel_rem_pio2+0x4e4>
 800aa9e:	9e05      	ldr	r6, [sp, #20]
 800aaa0:	ab48      	add	r3, sp, #288	; 0x120
 800aaa2:	441e      	add	r6, r3
 800aaa4:	462c      	mov	r4, r5
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	da33      	bge.n	800ab16 <__kernel_rem_pio2+0x5ce>
 800aaae:	f1bb 0f00 	cmp.w	fp, #0
 800aab2:	d036      	beq.n	800ab22 <__kernel_rem_pio2+0x5da>
 800aab4:	4602      	mov	r2, r0
 800aab6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaba:	9c04      	ldr	r4, [sp, #16]
 800aabc:	e9c4 2300 	strd	r2, r3, [r4]
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800aac8:	f7f5 fbae 	bl	8000228 <__aeabi_dsub>
 800aacc:	ae4a      	add	r6, sp, #296	; 0x128
 800aace:	2401      	movs	r4, #1
 800aad0:	42a5      	cmp	r5, r4
 800aad2:	da29      	bge.n	800ab28 <__kernel_rem_pio2+0x5e0>
 800aad4:	f1bb 0f00 	cmp.w	fp, #0
 800aad8:	d002      	beq.n	800aae0 <__kernel_rem_pio2+0x598>
 800aada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aade:	4619      	mov	r1, r3
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aae6:	e7a1      	b.n	800aa2c <__kernel_rem_pio2+0x4e4>
 800aae8:	9c05      	ldr	r4, [sp, #20]
 800aaea:	ab48      	add	r3, sp, #288	; 0x120
 800aaec:	441c      	add	r4, r3
 800aaee:	2000      	movs	r0, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	da09      	bge.n	800ab0a <__kernel_rem_pio2+0x5c2>
 800aaf6:	f1bb 0f00 	cmp.w	fp, #0
 800aafa:	d002      	beq.n	800ab02 <__kernel_rem_pio2+0x5ba>
 800aafc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab00:	4619      	mov	r1, r3
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	e9c3 0100 	strd	r0, r1, [r3]
 800ab08:	e790      	b.n	800aa2c <__kernel_rem_pio2+0x4e4>
 800ab0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ab0e:	f7f5 fb8d 	bl	800022c <__adddf3>
 800ab12:	3d01      	subs	r5, #1
 800ab14:	e7ed      	b.n	800aaf2 <__kernel_rem_pio2+0x5aa>
 800ab16:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ab1a:	f7f5 fb87 	bl	800022c <__adddf3>
 800ab1e:	3c01      	subs	r4, #1
 800ab20:	e7c3      	b.n	800aaaa <__kernel_rem_pio2+0x562>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	e7c8      	b.n	800aaba <__kernel_rem_pio2+0x572>
 800ab28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ab2c:	f7f5 fb7e 	bl	800022c <__adddf3>
 800ab30:	3401      	adds	r4, #1
 800ab32:	e7cd      	b.n	800aad0 <__kernel_rem_pio2+0x588>
 800ab34:	e9da 8900 	ldrd	r8, r9, [sl]
 800ab38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	4632      	mov	r2, r6
 800ab44:	463b      	mov	r3, r7
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fb6f 	bl	800022c <__adddf3>
 800ab4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ab52:	4602      	mov	r2, r0
 800ab54:	460b      	mov	r3, r1
 800ab56:	4640      	mov	r0, r8
 800ab58:	4649      	mov	r1, r9
 800ab5a:	f7f5 fb65 	bl	8000228 <__aeabi_dsub>
 800ab5e:	4632      	mov	r2, r6
 800ab60:	463b      	mov	r3, r7
 800ab62:	f7f5 fb63 	bl	800022c <__adddf3>
 800ab66:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ab6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab6e:	ed8a 7b00 	vstr	d7, [sl]
 800ab72:	e770      	b.n	800aa56 <__kernel_rem_pio2+0x50e>
 800ab74:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ab78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	4632      	mov	r2, r6
 800ab80:	463b      	mov	r3, r7
 800ab82:	4649      	mov	r1, r9
 800ab84:	f7f5 fb52 	bl	800022c <__adddf3>
 800ab88:	e9cd 0100 	strd	r0, r1, [sp]
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	4640      	mov	r0, r8
 800ab92:	4649      	mov	r1, r9
 800ab94:	f7f5 fb48 	bl	8000228 <__aeabi_dsub>
 800ab98:	4632      	mov	r2, r6
 800ab9a:	463b      	mov	r3, r7
 800ab9c:	f7f5 fb46 	bl	800022c <__adddf3>
 800aba0:	ed9d 7b00 	vldr	d7, [sp]
 800aba4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aba8:	ed84 7b00 	vstr	d7, [r4]
 800abac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abb0:	e757      	b.n	800aa62 <__kernel_rem_pio2+0x51a>
 800abb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abb6:	f7f5 fb39 	bl	800022c <__adddf3>
 800abba:	3d01      	subs	r5, #1
 800abbc:	e75c      	b.n	800aa78 <__kernel_rem_pio2+0x530>
 800abbe:	9b04      	ldr	r3, [sp, #16]
 800abc0:	9a04      	ldr	r2, [sp, #16]
 800abc2:	601f      	str	r7, [r3, #0]
 800abc4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800abc8:	605c      	str	r4, [r3, #4]
 800abca:	609d      	str	r5, [r3, #8]
 800abcc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800abd0:	60d3      	str	r3, [r2, #12]
 800abd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd6:	6110      	str	r0, [r2, #16]
 800abd8:	6153      	str	r3, [r2, #20]
 800abda:	e727      	b.n	800aa2c <__kernel_rem_pio2+0x4e4>
 800abdc:	41700000 	.word	0x41700000
 800abe0:	3e700000 	.word	0x3e700000
 800abe4:	00000000 	.word	0x00000000

0800abe8 <scalbn>:
 800abe8:	b570      	push	{r4, r5, r6, lr}
 800abea:	ec55 4b10 	vmov	r4, r5, d0
 800abee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800abf2:	4606      	mov	r6, r0
 800abf4:	462b      	mov	r3, r5
 800abf6:	b999      	cbnz	r1, 800ac20 <scalbn+0x38>
 800abf8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800abfc:	4323      	orrs	r3, r4
 800abfe:	d03f      	beq.n	800ac80 <scalbn+0x98>
 800ac00:	4b35      	ldr	r3, [pc, #212]	; (800acd8 <scalbn+0xf0>)
 800ac02:	4629      	mov	r1, r5
 800ac04:	ee10 0a10 	vmov	r0, s0
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f7f5 fcc5 	bl	8000598 <__aeabi_dmul>
 800ac0e:	4b33      	ldr	r3, [pc, #204]	; (800acdc <scalbn+0xf4>)
 800ac10:	429e      	cmp	r6, r3
 800ac12:	4604      	mov	r4, r0
 800ac14:	460d      	mov	r5, r1
 800ac16:	da10      	bge.n	800ac3a <scalbn+0x52>
 800ac18:	a327      	add	r3, pc, #156	; (adr r3, 800acb8 <scalbn+0xd0>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	e01f      	b.n	800ac60 <scalbn+0x78>
 800ac20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ac24:	4291      	cmp	r1, r2
 800ac26:	d10c      	bne.n	800ac42 <scalbn+0x5a>
 800ac28:	ee10 2a10 	vmov	r2, s0
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	4629      	mov	r1, r5
 800ac30:	f7f5 fafc 	bl	800022c <__adddf3>
 800ac34:	4604      	mov	r4, r0
 800ac36:	460d      	mov	r5, r1
 800ac38:	e022      	b.n	800ac80 <scalbn+0x98>
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ac40:	3936      	subs	r1, #54	; 0x36
 800ac42:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ac46:	4296      	cmp	r6, r2
 800ac48:	dd0d      	ble.n	800ac66 <scalbn+0x7e>
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	a11c      	add	r1, pc, #112	; (adr r1, 800acc0 <scalbn+0xd8>)
 800ac4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac52:	da02      	bge.n	800ac5a <scalbn+0x72>
 800ac54:	a11c      	add	r1, pc, #112	; (adr r1, 800acc8 <scalbn+0xe0>)
 800ac56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac5a:	a319      	add	r3, pc, #100	; (adr r3, 800acc0 <scalbn+0xd8>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fc9a 	bl	8000598 <__aeabi_dmul>
 800ac64:	e7e6      	b.n	800ac34 <scalbn+0x4c>
 800ac66:	1872      	adds	r2, r6, r1
 800ac68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ac6c:	428a      	cmp	r2, r1
 800ac6e:	dcec      	bgt.n	800ac4a <scalbn+0x62>
 800ac70:	2a00      	cmp	r2, #0
 800ac72:	dd08      	ble.n	800ac86 <scalbn+0x9e>
 800ac74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ac80:	ec45 4b10 	vmov	d0, r4, r5
 800ac84:	bd70      	pop	{r4, r5, r6, pc}
 800ac86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ac8a:	da08      	bge.n	800ac9e <scalbn+0xb6>
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	a10a      	add	r1, pc, #40	; (adr r1, 800acb8 <scalbn+0xd0>)
 800ac90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac94:	dac0      	bge.n	800ac18 <scalbn+0x30>
 800ac96:	a10e      	add	r1, pc, #56	; (adr r1, 800acd0 <scalbn+0xe8>)
 800ac98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac9c:	e7bc      	b.n	800ac18 <scalbn+0x30>
 800ac9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aca2:	3236      	adds	r2, #54	; 0x36
 800aca4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aca8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800acac:	4620      	mov	r0, r4
 800acae:	4b0c      	ldr	r3, [pc, #48]	; (800ace0 <scalbn+0xf8>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	e7d5      	b.n	800ac60 <scalbn+0x78>
 800acb4:	f3af 8000 	nop.w
 800acb8:	c2f8f359 	.word	0xc2f8f359
 800acbc:	01a56e1f 	.word	0x01a56e1f
 800acc0:	8800759c 	.word	0x8800759c
 800acc4:	7e37e43c 	.word	0x7e37e43c
 800acc8:	8800759c 	.word	0x8800759c
 800accc:	fe37e43c 	.word	0xfe37e43c
 800acd0:	c2f8f359 	.word	0xc2f8f359
 800acd4:	81a56e1f 	.word	0x81a56e1f
 800acd8:	43500000 	.word	0x43500000
 800acdc:	ffff3cb0 	.word	0xffff3cb0
 800ace0:	3c900000 	.word	0x3c900000
 800ace4:	00000000 	.word	0x00000000

0800ace8 <floor>:
 800ace8:	ec51 0b10 	vmov	r0, r1, d0
 800acec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800acf8:	2e13      	cmp	r6, #19
 800acfa:	ee10 5a10 	vmov	r5, s0
 800acfe:	ee10 8a10 	vmov	r8, s0
 800ad02:	460c      	mov	r4, r1
 800ad04:	dc31      	bgt.n	800ad6a <floor+0x82>
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	da14      	bge.n	800ad34 <floor+0x4c>
 800ad0a:	a333      	add	r3, pc, #204	; (adr r3, 800add8 <floor+0xf0>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 fa8c 	bl	800022c <__adddf3>
 800ad14:	2200      	movs	r2, #0
 800ad16:	2300      	movs	r3, #0
 800ad18:	f7f5 fece 	bl	8000ab8 <__aeabi_dcmpgt>
 800ad1c:	b138      	cbz	r0, 800ad2e <floor+0x46>
 800ad1e:	2c00      	cmp	r4, #0
 800ad20:	da53      	bge.n	800adca <floor+0xe2>
 800ad22:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ad26:	4325      	orrs	r5, r4
 800ad28:	d052      	beq.n	800add0 <floor+0xe8>
 800ad2a:	4c2d      	ldr	r4, [pc, #180]	; (800ade0 <floor+0xf8>)
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	4621      	mov	r1, r4
 800ad30:	4628      	mov	r0, r5
 800ad32:	e024      	b.n	800ad7e <floor+0x96>
 800ad34:	4f2b      	ldr	r7, [pc, #172]	; (800ade4 <floor+0xfc>)
 800ad36:	4137      	asrs	r7, r6
 800ad38:	ea01 0307 	and.w	r3, r1, r7
 800ad3c:	4303      	orrs	r3, r0
 800ad3e:	d01e      	beq.n	800ad7e <floor+0x96>
 800ad40:	a325      	add	r3, pc, #148	; (adr r3, 800add8 <floor+0xf0>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f7f5 fa71 	bl	800022c <__adddf3>
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f7f5 feb3 	bl	8000ab8 <__aeabi_dcmpgt>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d0eb      	beq.n	800ad2e <floor+0x46>
 800ad56:	2c00      	cmp	r4, #0
 800ad58:	bfbe      	ittt	lt
 800ad5a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ad5e:	4133      	asrlt	r3, r6
 800ad60:	18e4      	addlt	r4, r4, r3
 800ad62:	ea24 0407 	bic.w	r4, r4, r7
 800ad66:	2500      	movs	r5, #0
 800ad68:	e7e1      	b.n	800ad2e <floor+0x46>
 800ad6a:	2e33      	cmp	r6, #51	; 0x33
 800ad6c:	dd0b      	ble.n	800ad86 <floor+0x9e>
 800ad6e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ad72:	d104      	bne.n	800ad7e <floor+0x96>
 800ad74:	ee10 2a10 	vmov	r2, s0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	f7f5 fa57 	bl	800022c <__adddf3>
 800ad7e:	ec41 0b10 	vmov	d0, r0, r1
 800ad82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad86:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ad8a:	f04f 37ff 	mov.w	r7, #4294967295
 800ad8e:	40df      	lsrs	r7, r3
 800ad90:	4238      	tst	r0, r7
 800ad92:	d0f4      	beq.n	800ad7e <floor+0x96>
 800ad94:	a310      	add	r3, pc, #64	; (adr r3, 800add8 <floor+0xf0>)
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	f7f5 fa47 	bl	800022c <__adddf3>
 800ad9e:	2200      	movs	r2, #0
 800ada0:	2300      	movs	r3, #0
 800ada2:	f7f5 fe89 	bl	8000ab8 <__aeabi_dcmpgt>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d0c1      	beq.n	800ad2e <floor+0x46>
 800adaa:	2c00      	cmp	r4, #0
 800adac:	da0a      	bge.n	800adc4 <floor+0xdc>
 800adae:	2e14      	cmp	r6, #20
 800adb0:	d101      	bne.n	800adb6 <floor+0xce>
 800adb2:	3401      	adds	r4, #1
 800adb4:	e006      	b.n	800adc4 <floor+0xdc>
 800adb6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800adba:	2301      	movs	r3, #1
 800adbc:	40b3      	lsls	r3, r6
 800adbe:	441d      	add	r5, r3
 800adc0:	45a8      	cmp	r8, r5
 800adc2:	d8f6      	bhi.n	800adb2 <floor+0xca>
 800adc4:	ea25 0507 	bic.w	r5, r5, r7
 800adc8:	e7b1      	b.n	800ad2e <floor+0x46>
 800adca:	2500      	movs	r5, #0
 800adcc:	462c      	mov	r4, r5
 800adce:	e7ae      	b.n	800ad2e <floor+0x46>
 800add0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800add4:	e7ab      	b.n	800ad2e <floor+0x46>
 800add6:	bf00      	nop
 800add8:	8800759c 	.word	0x8800759c
 800addc:	7e37e43c 	.word	0x7e37e43c
 800ade0:	bff00000 	.word	0xbff00000
 800ade4:	000fffff 	.word	0x000fffff

0800ade8 <_init>:
 800ade8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adea:	bf00      	nop
 800adec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adee:	bc08      	pop	{r3}
 800adf0:	469e      	mov	lr, r3
 800adf2:	4770      	bx	lr

0800adf4 <_fini>:
 800adf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adf6:	bf00      	nop
 800adf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfa:	bc08      	pop	{r3}
 800adfc:	469e      	mov	lr, r3
 800adfe:	4770      	bx	lr
