
BMTR_RTOS_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  080116a8  080116a8  000216a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b40  08011b40  000300d0  2**0
                  CONTENTS
  4 .ARM          00000008  08011b40  08011b40  00021b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b48  08011b48  000300d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b48  08011b48  00021b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b4c  08011b4c  00021b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08011b50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074c4  200000d0  08011c20  000300d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007594  08011c20  00037594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002370c  00000000  00000000  00030143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050af  00000000  00000000  0005384f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001dd8  00000000  00000000  00058900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001728  00000000  00000000  0005a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c07b  00000000  00000000  0005be00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f2f  00000000  00000000  00087e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001017bf  00000000  00000000  000b1daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ac4  00000000  00000000  001b356c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001bc030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011690 	.word	0x08011690

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08011690 	.word	0x08011690

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2iz>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d215      	bcs.n	8000bc2 <__aeabi_d2iz+0x36>
 8000b96:	d511      	bpl.n	8000bbc <__aeabi_d2iz+0x30>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d912      	bls.n	8000bc8 <__aeabi_d2iz+0x3c>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	4240      	negne	r0, r0
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d105      	bne.n	8000bd4 <__aeabi_d2iz+0x48>
 8000bc8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	bf08      	it	eq
 8000bce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2f>:
 8000bdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be4:	bf24      	itt	cs
 8000be6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bee:	d90d      	bls.n	8000c0c <__aeabi_d2f+0x30>
 8000bf0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bfc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c04:	bf08      	it	eq
 8000c06:	f020 0001 	biceq.w	r0, r0, #1
 8000c0a:	4770      	bx	lr
 8000c0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c10:	d121      	bne.n	8000c56 <__aeabi_d2f+0x7a>
 8000c12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c16:	bfbc      	itt	lt
 8000c18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	4770      	bxlt	lr
 8000c1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c26:	f1c2 0218 	rsb	r2, r2, #24
 8000c2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c32:	fa20 f002 	lsr.w	r0, r0, r2
 8000c36:	bf18      	it	ne
 8000c38:	f040 0001 	orrne.w	r0, r0, #1
 8000c3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c48:	ea40 000c 	orr.w	r0, r0, ip
 8000c4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c54:	e7cc      	b.n	8000bf0 <__aeabi_d2f+0x14>
 8000c56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5a:	d107      	bne.n	8000c6c <__aeabi_d2f+0x90>
 8000c5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c60:	bf1e      	ittt	ne
 8000c62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6a:	4770      	bxne	lr
 8000c6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <__aeabi_uldivmod>:
 8000c7c:	b953      	cbnz	r3, 8000c94 <__aeabi_uldivmod+0x18>
 8000c7e:	b94a      	cbnz	r2, 8000c94 <__aeabi_uldivmod+0x18>
 8000c80:	2900      	cmp	r1, #0
 8000c82:	bf08      	it	eq
 8000c84:	2800      	cmpeq	r0, #0
 8000c86:	bf1c      	itt	ne
 8000c88:	f04f 31ff 	movne.w	r1, #4294967295
 8000c8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c90:	f000 b970 	b.w	8000f74 <__aeabi_idiv0>
 8000c94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c9c:	f000 f806 	bl	8000cac <__udivmoddi4>
 8000ca0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr

08000cac <__udivmoddi4>:
 8000cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb0:	9e08      	ldr	r6, [sp, #32]
 8000cb2:	460d      	mov	r5, r1
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	460f      	mov	r7, r1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d14a      	bne.n	8000d52 <__udivmoddi4+0xa6>
 8000cbc:	428a      	cmp	r2, r1
 8000cbe:	4694      	mov	ip, r2
 8000cc0:	d965      	bls.n	8000d8e <__udivmoddi4+0xe2>
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	b143      	cbz	r3, 8000cda <__udivmoddi4+0x2e>
 8000cc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ccc:	f1c3 0220 	rsb	r2, r3, #32
 8000cd0:	409f      	lsls	r7, r3
 8000cd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	409c      	lsls	r4, r3
 8000cda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cde:	fa1f f58c 	uxth.w	r5, ip
 8000ce2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce6:	0c22      	lsrs	r2, r4, #16
 8000ce8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cf0:	fb01 f005 	mul.w	r0, r1, r5
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	d90a      	bls.n	8000d0e <__udivmoddi4+0x62>
 8000cf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d00:	f080 811c 	bcs.w	8000f3c <__udivmoddi4+0x290>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f240 8119 	bls.w	8000f3c <__udivmoddi4+0x290>
 8000d0a:	3902      	subs	r1, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a12      	subs	r2, r2, r0
 8000d10:	b2a4      	uxth	r4, r4
 8000d12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1e:	fb00 f505 	mul.w	r5, r0, r5
 8000d22:	42a5      	cmp	r5, r4
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x90>
 8000d26:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2e:	f080 8107 	bcs.w	8000f40 <__udivmoddi4+0x294>
 8000d32:	42a5      	cmp	r5, r4
 8000d34:	f240 8104 	bls.w	8000f40 <__udivmoddi4+0x294>
 8000d38:	4464      	add	r4, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d40:	1b64      	subs	r4, r4, r5
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11e      	cbz	r6, 8000d4e <__udivmoddi4+0xa2>
 8000d46:	40dc      	lsrs	r4, r3
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0xbc>
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	f000 80ed 	beq.w	8000f36 <__udivmoddi4+0x28a>
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000d62:	4608      	mov	r0, r1
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d68:	fab3 f183 	clz	r1, r3
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	d149      	bne.n	8000e04 <__udivmoddi4+0x158>
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	d302      	bcc.n	8000d7a <__udivmoddi4+0xce>
 8000d74:	4282      	cmp	r2, r0
 8000d76:	f200 80f8 	bhi.w	8000f6a <__udivmoddi4+0x2be>
 8000d7a:	1a84      	subs	r4, r0, r2
 8000d7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000d80:	2001      	movs	r0, #1
 8000d82:	4617      	mov	r7, r2
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d0e2      	beq.n	8000d4e <__udivmoddi4+0xa2>
 8000d88:	e9c6 4700 	strd	r4, r7, [r6]
 8000d8c:	e7df      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000d8e:	b902      	cbnz	r2, 8000d92 <__udivmoddi4+0xe6>
 8000d90:	deff      	udf	#255	; 0xff
 8000d92:	fab2 f382 	clz	r3, r2
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x210>
 8000d9c:	1a8a      	subs	r2, r1, r2
 8000d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	2101      	movs	r1, #1
 8000da8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dac:	fb07 2015 	mls	r0, r7, r5, r2
 8000db0:	0c22      	lsrs	r2, r4, #16
 8000db2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db6:	fb0e f005 	mul.w	r0, lr, r5
 8000dba:	4290      	cmp	r0, r2
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x124>
 8000dbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x122>
 8000dc8:	4290      	cmp	r0, r2
 8000dca:	f200 80cb 	bhi.w	8000f64 <__udivmoddi4+0x2b8>
 8000dce:	4645      	mov	r5, r8
 8000dd0:	1a12      	subs	r2, r2, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ddc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de0:	fb0e fe00 	mul.w	lr, lr, r0
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x14e>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x14c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f200 80bb 	bhi.w	8000f6e <__udivmoddi4+0x2c2>
 8000df8:	4610      	mov	r0, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e02:	e79f      	b.n	8000d44 <__udivmoddi4+0x98>
 8000e04:	f1c1 0720 	rsb	r7, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e12:	fa05 f401 	lsl.w	r4, r5, r1
 8000e16:	fa20 f307 	lsr.w	r3, r0, r7
 8000e1a:	40fd      	lsrs	r5, r7
 8000e1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e26:	fa1f fe8c 	uxth.w	lr, ip
 8000e2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e34:	fb08 f50e 	mul.w	r5, r8, lr
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000e42:	d90b      	bls.n	8000e5c <__udivmoddi4+0x1b0>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e4c:	f080 8088 	bcs.w	8000f60 <__udivmoddi4+0x2b4>
 8000e50:	42a5      	cmp	r5, r4
 8000e52:	f240 8085 	bls.w	8000f60 <__udivmoddi4+0x2b4>
 8000e56:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5a:	4464      	add	r4, ip
 8000e5c:	1b64      	subs	r4, r4, r5
 8000e5e:	b29d      	uxth	r5, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e70:	45a6      	cmp	lr, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1da>
 8000e74:	eb1c 0404 	adds.w	r4, ip, r4
 8000e78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e7c:	d26c      	bcs.n	8000f58 <__udivmoddi4+0x2ac>
 8000e7e:	45a6      	cmp	lr, r4
 8000e80:	d96a      	bls.n	8000f58 <__udivmoddi4+0x2ac>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	4464      	add	r4, ip
 8000e86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8e:	eba4 040e 	sub.w	r4, r4, lr
 8000e92:	42ac      	cmp	r4, r5
 8000e94:	46c8      	mov	r8, r9
 8000e96:	46ae      	mov	lr, r5
 8000e98:	d356      	bcc.n	8000f48 <__udivmoddi4+0x29c>
 8000e9a:	d053      	beq.n	8000f44 <__udivmoddi4+0x298>
 8000e9c:	b156      	cbz	r6, 8000eb4 <__udivmoddi4+0x208>
 8000e9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ea2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea6:	fa04 f707 	lsl.w	r7, r4, r7
 8000eaa:	40ca      	lsrs	r2, r1
 8000eac:	40cc      	lsrs	r4, r1
 8000eae:	4317      	orrs	r7, r2
 8000eb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebc:	f1c3 0120 	rsb	r1, r3, #32
 8000ec0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ecc:	409d      	lsls	r5, r3
 8000ece:	432a      	orrs	r2, r5
 8000ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed4:	fa1f fe8c 	uxth.w	lr, ip
 8000ed8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000edc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ee0:	0c11      	lsrs	r1, r2, #16
 8000ee2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee6:	fb00 f50e 	mul.w	r5, r0, lr
 8000eea:	428d      	cmp	r5, r1
 8000eec:	fa04 f403 	lsl.w	r4, r4, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x258>
 8000ef2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efa:	d22f      	bcs.n	8000f5c <__udivmoddi4+0x2b0>
 8000efc:	428d      	cmp	r5, r1
 8000efe:	d92d      	bls.n	8000f5c <__udivmoddi4+0x2b0>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	1b49      	subs	r1, r1, r5
 8000f06:	b292      	uxth	r2, r2
 8000f08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	fb05 f10e 	mul.w	r1, r5, lr
 8000f18:	4291      	cmp	r1, r2
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x282>
 8000f1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f24:	d216      	bcs.n	8000f54 <__udivmoddi4+0x2a8>
 8000f26:	4291      	cmp	r1, r2
 8000f28:	d914      	bls.n	8000f54 <__udivmoddi4+0x2a8>
 8000f2a:	3d02      	subs	r5, #2
 8000f2c:	4462      	add	r2, ip
 8000f2e:	1a52      	subs	r2, r2, r1
 8000f30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f34:	e738      	b.n	8000da8 <__udivmoddi4+0xfc>
 8000f36:	4631      	mov	r1, r6
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e708      	b.n	8000d4e <__udivmoddi4+0xa2>
 8000f3c:	4639      	mov	r1, r7
 8000f3e:	e6e6      	b.n	8000d0e <__udivmoddi4+0x62>
 8000f40:	4610      	mov	r0, r2
 8000f42:	e6fb      	b.n	8000d3c <__udivmoddi4+0x90>
 8000f44:	4548      	cmp	r0, r9
 8000f46:	d2a9      	bcs.n	8000e9c <__udivmoddi4+0x1f0>
 8000f48:	ebb9 0802 	subs.w	r8, r9, r2
 8000f4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f50:	3b01      	subs	r3, #1
 8000f52:	e7a3      	b.n	8000e9c <__udivmoddi4+0x1f0>
 8000f54:	4645      	mov	r5, r8
 8000f56:	e7ea      	b.n	8000f2e <__udivmoddi4+0x282>
 8000f58:	462b      	mov	r3, r5
 8000f5a:	e794      	b.n	8000e86 <__udivmoddi4+0x1da>
 8000f5c:	4640      	mov	r0, r8
 8000f5e:	e7d1      	b.n	8000f04 <__udivmoddi4+0x258>
 8000f60:	46d0      	mov	r8, sl
 8000f62:	e77b      	b.n	8000e5c <__udivmoddi4+0x1b0>
 8000f64:	3d02      	subs	r5, #2
 8000f66:	4462      	add	r2, ip
 8000f68:	e732      	b.n	8000dd0 <__udivmoddi4+0x124>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e70a      	b.n	8000d84 <__udivmoddi4+0xd8>
 8000f6e:	4464      	add	r4, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e742      	b.n	8000dfa <__udivmoddi4+0x14e>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Delay_us>:
 *
 */

#include "DFR_i2c.h"

void Delay_us(uint32_t delay) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	// Calculate the number of CPU cycles for the delay
	// change CLOCK preprocessor if the SCL is not compatible with the micro-controller
	uint32_t cycles = CLOCK* delay;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <Delay_us+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <Delay_us+0x44>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0e1a      	lsrs	r2, r3, #24
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	fb02 f303 	mul.w	r3, r2, r3
 8000f92:	60fb      	str	r3, [r7, #12]

	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000f94:	2300      	movs	r3, #0
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	e003      	b.n	8000fa2 <Delay_us+0x2a>
		__asm__ __volatile__("nop");
 8000f9a:	bf00      	nop
	for (volatile uint32_t i = 0; i < cycles; i++) {
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d8f7      	bhi.n	8000f9a <Delay_us+0x22>
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20000050 	.word	0x20000050
 8000fbc:	ee9bfab5 	.word	0xee9bfab5

08000fc0 <dfr_i2c_start>:

void dfr_i2c_start(DFRobot_GP8XXX_IIC *gp8xxx) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

	/* Generate I2C start condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6858      	ldr	r0, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	891b      	ldrh	r3, [r3, #8]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f005 f9da 	bl	800638c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68d8      	ldr	r0, [r3, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	8a1b      	ldrh	r3, [r3, #16]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f005 f9d2 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f7ff ffc5 	bl	8000f78 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	68d8      	ldr	r0, [r3, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	8a1b      	ldrh	r3, [r3, #16]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f005 f9c7 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 8000ffe:	2002      	movs	r0, #2
 8001000:	f7ff ffba 	bl	8000f78 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6858      	ldr	r0, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	f005 f9bc 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8001014:	2005      	movs	r0, #5
 8001016:	f7ff ffaf 	bl	8000f78 <Delay_us>

}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <dfr_i2c_stop>:

void dfr_i2c_stop(DFRobot_GP8XXX_IIC *gp8xxx) {
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]

	/* Generate I2C stop condition */
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_RESET);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68d8      	ldr	r0, [r3, #12]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	8a1b      	ldrh	r3, [r3, #16]
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	f005 f9a9 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff ff9c 	bl	8000f78 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6858      	ldr	r0, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	891b      	ldrh	r3, [r3, #8]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	f005 f99e 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8001050:	2005      	movs	r0, #5
 8001052:	f7ff ff91 	bl	8000f78 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68d8      	ldr	r0, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8a1b      	ldrh	r3, [r3, #16]
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	f005 f993 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_TOTAL);
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff ff86 	bl	8000f78 <Delay_us>

}
 800106c:	bf00      	nop
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <dfr_i2c_write_byte>:
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
	Delay_us(I2C_CYCLE_AFTER);

}

HAL_StatusTypeDef dfr_i2c_write_byte(DFRobot_GP8XXX_IIC *gp8xxx,uint8_t data) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	70fb      	strb	r3, [r7, #3]

	/* Write a byte to the I2C bus */
	for (int i = 0; i < 8; i++) {
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e028      	b.n	80010d8 <dfr_i2c_write_byte+0x64>
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68d8      	ldr	r0, [r3, #12]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	8a19      	ldrh	r1, [r3, #16]
				(data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800108e:	78fb      	ldrb	r3, [r7, #3]
 8001090:	09db      	lsrs	r3, r3, #7
 8001092:	b2db      	uxtb	r3, r3
		HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin,
 8001094:	461a      	mov	r2, r3
 8001096:	f005 f979 	bl	800638c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_BEFORE);
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff6c 	bl	8000f78 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6858      	ldr	r0, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	891b      	ldrh	r3, [r3, #8]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	f005 f96e 	bl	800638c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_TOTAL);
 80010b0:	2005      	movs	r0, #5
 80010b2:	f7ff ff61 	bl	8000f78 <Delay_us>
		HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6858      	ldr	r0, [r3, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	891b      	ldrh	r3, [r3, #8]
 80010be:	2200      	movs	r2, #0
 80010c0:	4619      	mov	r1, r3
 80010c2:	f005 f963 	bl	800638c <HAL_GPIO_WritePin>
		Delay_us(I2C_CYCLE_AFTER);
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff ff56 	bl	8000f78 <Delay_us>
		data <<= 1;
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < 8; i++) {
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b07      	cmp	r3, #7
 80010dc:	ddd3      	ble.n	8001086 <dfr_i2c_write_byte+0x12>
	}

	// Check for ACK from slave, expecting 0
	HAL_GPIO_WritePin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin, GPIO_PIN_SET);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68d8      	ldr	r0, [r3, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	8a1b      	ldrh	r3, [r3, #16]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	f005 f94f 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_BEFORE);
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff ff42 	bl	8000f78 <Delay_us>
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_SET);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	891b      	ldrh	r3, [r3, #8]
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	f005 f944 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 8001104:	2002      	movs	r0, #2
 8001106:	f7ff ff37 	bl	8000f78 <Delay_us>

	uint16_t errorTime = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	817b      	strh	r3, [r7, #10]
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 800110e:	e00d      	b.n	800112c <dfr_i2c_write_byte+0xb8>
		Delay_us(I2C_CYCLE_BEFORE);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ff31 	bl	8000f78 <Delay_us>
		errorTime++;
 8001116:	897b      	ldrh	r3, [r7, #10]
 8001118:	3301      	adds	r3, #1
 800111a:	817b      	strh	r3, [r7, #10]
		if (errorTime > 100) { // No ACK from slave, generate stop condition and return error
 800111c:	897b      	ldrh	r3, [r7, #10]
 800111e:	2b64      	cmp	r3, #100	; 0x64
 8001120:	d904      	bls.n	800112c <dfr_i2c_write_byte+0xb8>
			dfr_i2c_stop(gp8xxx);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ff7d 	bl	8001022 <dfr_i2c_stop>
			return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e016      	b.n	800115a <dfr_i2c_write_byte+0xe6>
	while (HAL_GPIO_ReadPin(gp8xxx->I2C_sda_port, gp8xxx->I2C_sda_pin) != GPIO_PIN_RESET) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	8a1b      	ldrh	r3, [r3, #16]
 8001134:	4619      	mov	r1, r3
 8001136:	4610      	mov	r0, r2
 8001138:	f005 f910 	bl	800635c <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1e6      	bne.n	8001110 <dfr_i2c_write_byte+0x9c>
		}
	}
	// ACK received as 0
	HAL_GPIO_WritePin(gp8xxx->I2C_scl_port, gp8xxx->I2C_scl_pin, GPIO_PIN_RESET);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6858      	ldr	r0, [r3, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	891b      	ldrh	r3, [r3, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	f005 f91d 	bl	800638c <HAL_GPIO_WritePin>
	Delay_us(I2C_CYCLE_AFTER);
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff ff10 	bl	8000f78 <Delay_us>
	return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <GP8XXX_IIC_begin>:

void GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, eDAC_Name_t dac_name,
		uint8_t Addr, GPIO_TypeDef *SCL_port, uint16_t SCL_pin,
		GPIO_TypeDef *SDA_port, uint16_t SDA_pin) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b0a0      	sub	sp, #128	; 0x80
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	72fb      	strb	r3, [r7, #11]
 8001172:	4613      	mov	r3, r2
 8001174:	72bb      	strb	r3, [r7, #10]

	 // Set I2C port and pin configurations

	gp8xxx->I2C_scl_port = SCL_port;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	605a      	str	r2, [r3, #4]
	gp8xxx->I2C_scl_pin = SCL_pin;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8001182:	811a      	strh	r2, [r3, #8]
	gp8xxx->I2C_sda_port = SDA_port;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800118a:	60da      	str	r2, [r3, #12]
	gp8xxx->I2C_sda_pin = SDA_pin;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8001192:	821a      	strh	r2, [r3, #16]

	/* Enable GPIO clock for SCL port */
	switch ((uint32_t) gp8xxx->I2C_scl_port) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <GP8XXX_IIC_begin+0x284>)
 800119a:	4293      	cmp	r3, r2
 800119c:	f000 80c8 	beq.w	8001330 <GP8XXX_IIC_begin+0x1cc>
 80011a0:	4a91      	ldr	r2, [pc, #580]	; (80013e8 <GP8XXX_IIC_begin+0x284>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	f200 80d1 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011a8:	4a90      	ldr	r2, [pc, #576]	; (80013ec <GP8XXX_IIC_begin+0x288>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	f000 80b3 	beq.w	8001316 <GP8XXX_IIC_begin+0x1b2>
 80011b0:	4a8e      	ldr	r2, [pc, #568]	; (80013ec <GP8XXX_IIC_begin+0x288>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	f200 80c9 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011b8:	4a8d      	ldr	r2, [pc, #564]	; (80013f0 <GP8XXX_IIC_begin+0x28c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	f000 809e 	beq.w	80012fc <GP8XXX_IIC_begin+0x198>
 80011c0:	4a8b      	ldr	r2, [pc, #556]	; (80013f0 <GP8XXX_IIC_begin+0x28c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	f200 80c1 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011c8:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <GP8XXX_IIC_begin+0x290>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	f000 8089 	beq.w	80012e2 <GP8XXX_IIC_begin+0x17e>
 80011d0:	4a88      	ldr	r2, [pc, #544]	; (80013f4 <GP8XXX_IIC_begin+0x290>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	f200 80b9 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011d8:	4a87      	ldr	r2, [pc, #540]	; (80013f8 <GP8XXX_IIC_begin+0x294>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d074      	beq.n	80012c8 <GP8XXX_IIC_begin+0x164>
 80011de:	4a86      	ldr	r2, [pc, #536]	; (80013f8 <GP8XXX_IIC_begin+0x294>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	f200 80b2 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011e6:	4a85      	ldr	r2, [pc, #532]	; (80013fc <GP8XXX_IIC_begin+0x298>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d060      	beq.n	80012ae <GP8XXX_IIC_begin+0x14a>
 80011ec:	4a83      	ldr	r2, [pc, #524]	; (80013fc <GP8XXX_IIC_begin+0x298>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f200 80ab 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 80011f4:	4a82      	ldr	r2, [pc, #520]	; (8001400 <GP8XXX_IIC_begin+0x29c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d04c      	beq.n	8001294 <GP8XXX_IIC_begin+0x130>
 80011fa:	4a81      	ldr	r2, [pc, #516]	; (8001400 <GP8XXX_IIC_begin+0x29c>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	f200 80a4 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 8001202:	4a80      	ldr	r2, [pc, #512]	; (8001404 <GP8XXX_IIC_begin+0x2a0>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d038      	beq.n	800127a <GP8XXX_IIC_begin+0x116>
 8001208:	4a7e      	ldr	r2, [pc, #504]	; (8001404 <GP8XXX_IIC_begin+0x2a0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f200 809d 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 8001210:	4a7d      	ldr	r2, [pc, #500]	; (8001408 <GP8XXX_IIC_begin+0x2a4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d024      	beq.n	8001260 <GP8XXX_IIC_begin+0xfc>
 8001216:	4a7c      	ldr	r2, [pc, #496]	; (8001408 <GP8XXX_IIC_begin+0x2a4>)
 8001218:	4293      	cmp	r3, r2
 800121a:	f200 8096 	bhi.w	800134a <GP8XXX_IIC_begin+0x1e6>
 800121e:	4a7b      	ldr	r2, [pc, #492]	; (800140c <GP8XXX_IIC_begin+0x2a8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d003      	beq.n	800122c <GP8XXX_IIC_begin+0xc8>
 8001224:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <GP8XXX_IIC_begin+0x2ac>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <GP8XXX_IIC_begin+0xe2>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 800122a:	e08e      	b.n	800134a <GP8XXX_IIC_begin+0x1e6>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b79      	ldr	r3, [pc, #484]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	4a78      	ldr	r2, [pc, #480]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6313      	str	r3, [r2, #48]	; 0x30
 8001238:	4b76      	ldr	r3, [pc, #472]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	66bb      	str	r3, [r7, #104]	; 0x68
 8001242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		break;
 8001244:	e082      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	4b73      	ldr	r3, [pc, #460]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a72      	ldr	r2, [pc, #456]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b70      	ldr	r3, [pc, #448]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	667b      	str	r3, [r7, #100]	; 0x64
 800125c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
		break;
 800125e:	e075      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b6c      	ldr	r3, [pc, #432]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	4a6b      	ldr	r2, [pc, #428]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6313      	str	r3, [r2, #48]	; 0x30
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	663b      	str	r3, [r7, #96]	; 0x60
 8001276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
		break;
 8001278:	e068      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a65      	ldr	r2, [pc, #404]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b63      	ldr	r3, [pc, #396]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		break;
 8001292:	e05b      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001294:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800129a:	f043 0310 	orr.w	r3, r3, #16
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80012aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		break;
 80012ac:	e04e      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80012ae:	4b59      	ldr	r3, [pc, #356]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a58      	ldr	r2, [pc, #352]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b56      	ldr	r3, [pc, #344]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0320 	and.w	r3, r3, #32
 80012c2:	657b      	str	r3, [r7, #84]	; 0x54
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
		break;
 80012c6:	e041      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80012c8:	4b52      	ldr	r3, [pc, #328]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a51      	ldr	r2, [pc, #324]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
 80012de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
		break;
 80012e0:	e034      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b49      	ldr	r3, [pc, #292]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		break;
 80012fa:	e027      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 80012fc:	4b45      	ldr	r3, [pc, #276]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 80012fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001300:	4a44      	ldr	r2, [pc, #272]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
 8001308:	4b42      	ldr	r3, [pc, #264]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001310:	64bb      	str	r3, [r7, #72]	; 0x48
 8001312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
		break;
 8001314:	e01a      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a3e      	ldr	r2, [pc, #248]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800131c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800132a:	647b      	str	r3, [r7, #68]	; 0x44
 800132c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
		break;
 800132e:	e00d      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a37      	ldr	r2, [pc, #220]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 8001336:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b35      	ldr	r3, [pc, #212]	; (8001414 <GP8XXX_IIC_begin+0x2b0>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
 8001346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
		break;
 8001348:	e000      	b.n	800134c <GP8XXX_IIC_begin+0x1e8>
		break;
 800134a:	bf00      	nop
	}

	/* Enable GPIO clock for SDA port */
	switch ((uint32_t) gp8xxx->I2C_sda_port) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <GP8XXX_IIC_begin+0x284>)
 8001352:	4293      	cmp	r3, r2
 8001354:	f000 80e2 	beq.w	800151c <GP8XXX_IIC_begin+0x3b8>
 8001358:	4a23      	ldr	r2, [pc, #140]	; (80013e8 <GP8XXX_IIC_begin+0x284>)
 800135a:	4293      	cmp	r3, r2
 800135c:	f200 80eb 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 8001360:	4a22      	ldr	r2, [pc, #136]	; (80013ec <GP8XXX_IIC_begin+0x288>)
 8001362:	4293      	cmp	r3, r2
 8001364:	f000 80cd 	beq.w	8001502 <GP8XXX_IIC_begin+0x39e>
 8001368:	4a20      	ldr	r2, [pc, #128]	; (80013ec <GP8XXX_IIC_begin+0x288>)
 800136a:	4293      	cmp	r3, r2
 800136c:	f200 80e3 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <GP8XXX_IIC_begin+0x28c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	f000 80b8 	beq.w	80014e8 <GP8XXX_IIC_begin+0x384>
 8001378:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <GP8XXX_IIC_begin+0x28c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	f200 80db 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 8001380:	4a1c      	ldr	r2, [pc, #112]	; (80013f4 <GP8XXX_IIC_begin+0x290>)
 8001382:	4293      	cmp	r3, r2
 8001384:	f000 80a3 	beq.w	80014ce <GP8XXX_IIC_begin+0x36a>
 8001388:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <GP8XXX_IIC_begin+0x290>)
 800138a:	4293      	cmp	r3, r2
 800138c:	f200 80d3 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 8001390:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <GP8XXX_IIC_begin+0x294>)
 8001392:	4293      	cmp	r3, r2
 8001394:	f000 808e 	beq.w	80014b4 <GP8XXX_IIC_begin+0x350>
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <GP8XXX_IIC_begin+0x294>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f200 80cb 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <GP8XXX_IIC_begin+0x298>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d079      	beq.n	800149a <GP8XXX_IIC_begin+0x336>
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <GP8XXX_IIC_begin+0x298>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	f200 80c4 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <GP8XXX_IIC_begin+0x29c>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d065      	beq.n	8001480 <GP8XXX_IIC_begin+0x31c>
 80013b4:	4a12      	ldr	r2, [pc, #72]	; (8001400 <GP8XXX_IIC_begin+0x29c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f200 80bd 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013bc:	4a11      	ldr	r2, [pc, #68]	; (8001404 <GP8XXX_IIC_begin+0x2a0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d051      	beq.n	8001466 <GP8XXX_IIC_begin+0x302>
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <GP8XXX_IIC_begin+0x2a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f200 80b6 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <GP8XXX_IIC_begin+0x2a4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d03d      	beq.n	800144c <GP8XXX_IIC_begin+0x2e8>
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <GP8XXX_IIC_begin+0x2a4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f200 80af 	bhi.w	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <GP8XXX_IIC_begin+0x2a8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01c      	beq.n	8001418 <GP8XXX_IIC_begin+0x2b4>
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <GP8XXX_IIC_begin+0x2ac>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d026      	beq.n	8001432 <GP8XXX_IIC_begin+0x2ce>
		break;
	case GPIOK_BASE:
		__HAL_RCC_GPIOK_CLK_ENABLE();
		break;
	default:
		break;
 80013e4:	e0a7      	b.n	8001536 <GP8XXX_IIC_begin+0x3d2>
 80013e6:	bf00      	nop
 80013e8:	40022800 	.word	0x40022800
 80013ec:	40022400 	.word	0x40022400
 80013f0:	40022000 	.word	0x40022000
 80013f4:	40021c00 	.word	0x40021c00
 80013f8:	40021800 	.word	0x40021800
 80013fc:	40021400 	.word	0x40021400
 8001400:	40021000 	.word	0x40021000
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40023800 	.word	0x40023800
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a79      	ldr	r2, [pc, #484]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
		break;
 8001430:	e082      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b74      	ldr	r3, [pc, #464]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a73      	ldr	r2, [pc, #460]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b71      	ldr	r3, [pc, #452]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	63bb      	str	r3, [r7, #56]	; 0x38
 8001448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
		break;
 800144a:	e075      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	4b6d      	ldr	r3, [pc, #436]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
 8001462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
		break;
 8001464:	e068      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	4b67      	ldr	r3, [pc, #412]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a66      	ldr	r2, [pc, #408]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b64      	ldr	r3, [pc, #400]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
 800147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
		break;
 800147e:	e05b      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001480:	4b60      	ldr	r3, [pc, #384]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	4a5f      	ldr	r2, [pc, #380]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001486:	f043 0310 	orr.w	r3, r3, #16
 800148a:	6313      	str	r3, [r2, #48]	; 0x30
 800148c:	4b5d      	ldr	r3, [pc, #372]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		break;
 8001498:	e04e      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a59      	ldr	r2, [pc, #356]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014a0:	f043 0320 	orr.w	r3, r3, #32
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b57      	ldr	r3, [pc, #348]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0320 	and.w	r3, r3, #32
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
		break;
 80014b2:	e041      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80014b4:	4b53      	ldr	r3, [pc, #332]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		break;
 80014cc:	e034      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b4a      	ldr	r3, [pc, #296]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e2:	623b      	str	r3, [r7, #32]
 80014e4:	6a3b      	ldr	r3, [r7, #32]
		break;
 80014e6:	e027      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOI_CLK_ENABLE();
 80014e8:	4b46      	ldr	r3, [pc, #280]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4a45      	ldr	r2, [pc, #276]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	6313      	str	r3, [r2, #48]	; 0x30
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	69fb      	ldr	r3, [r7, #28]
		break;
 8001500:	e01a      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOJ_CLK_ENABLE();
 8001502:	4b40      	ldr	r3, [pc, #256]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a3f      	ldr	r2, [pc, #252]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001516:	61bb      	str	r3, [r7, #24]
 8001518:	69bb      	ldr	r3, [r7, #24]
		break;
 800151a:	e00d      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		__HAL_RCC_GPIOK_CLK_ENABLE();
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a38      	ldr	r2, [pc, #224]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 8001522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <GP8XXX_IIC_begin+0x4a0>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	697b      	ldr	r3, [r7, #20]
		break;
 8001534:	e000      	b.n	8001538 <GP8XXX_IIC_begin+0x3d4>
		break;
 8001536:	bf00      	nop
	}

	// Configure GPIO pins for I2C
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001538:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = gp8xxx->I2C_scl_pin | gp8xxx->I2C_sda_pin;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	891a      	ldrh	r2, [r3, #8]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8a1b      	ldrh	r3, [r3, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	66fb      	str	r3, [r7, #108]	; 0x6c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001556:	2311      	movs	r3, #17
 8001558:	673b      	str	r3, [r7, #112]	; 0x70
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155a:	2301      	movs	r3, #1
 800155c:	677b      	str	r3, [r7, #116]	; 0x74
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	67bb      	str	r3, [r7, #120]	; 0x78
	HAL_GPIO_Init(gp8xxx->I2C_scl_port, &GPIO_InitStruct);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f004 fd49 	bl	8006004 <HAL_GPIO_Init>
	HAL_GPIO_Init(gp8xxx->I2C_sda_port, &GPIO_InitStruct);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fd41 	bl	8006004 <HAL_GPIO_Init>


	// Set DAC model, resolution, and device address
	gp8xxx->deviceAddr = Addr;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	7aba      	ldrb	r2, [r7, #10]
 8001586:	70da      	strb	r2, [r3, #3]
	gp8xxx->DAC_Name = dac_name;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	7afa      	ldrb	r2, [r7, #11]
 800158c:	709a      	strb	r2, [r3, #2]

	switch (gp8xxx->DAC_Name) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	789b      	ldrb	r3, [r3, #2]
 8001592:	2b06      	cmp	r3, #6
 8001594:	d82a      	bhi.n	80015ec <GP8XXX_IIC_begin+0x488>
 8001596:	a201      	add	r2, pc, #4	; (adr r2, 800159c <GP8XXX_IIC_begin+0x438>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	080015b9 	.word	0x080015b9
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015b9 	.word	0x080015b9
 80015a8:	080015d3 	.word	0x080015d3
 80015ac:	080015e3 	.word	0x080015e3
 80015b0:	080015c9 	.word	0x080015c9
 80015b4:	080015e3 	.word	0x080015e3
	case GP8211_identifier:
	case GP8211S_identifier:
	case GP8512_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015be:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2258      	movs	r2, #88	; 0x58
 80015c4:	70da      	strb	r2, [r3, #3]

		break;
 80015c6:	e019      	b.n	80015fc <GP8XXX_IIC_begin+0x498>
	case GP8413_identifier:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015ce:	801a      	strh	r2, [r3, #0]
		break;
 80015d0:	e014      	b.n	80015fc <GP8XXX_IIC_begin+0x498>

	case GP8302_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015d8:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2258      	movs	r2, #88	; 0x58
 80015de:	70da      	strb	r2, [r3, #3]
		break;
 80015e0:	e00c      	b.n	80015fc <GP8XXX_IIC_begin+0x498>

	case GP8503_identifier:
	case GP8403_identifier:
		gp8xxx->resolution = RESOLUTION_12_BIT;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80015e8:	801a      	strh	r2, [r3, #0]
		break;
 80015ea:	e007      	b.n	80015fc <GP8XXX_IIC_begin+0x498>

	default:
		gp8xxx->resolution = RESOLUTION_15_BIT;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015f2:	801a      	strh	r2, [r3, #0]
		gp8xxx->deviceAddr = DFGP8XXX_I2C_DEVICEADDR;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2258      	movs	r2, #88	; 0x58
 80015f8:	70da      	strb	r2, [r3, #3]
		break;
 80015fa:	bf00      	nop

	}

}
 80015fc:	bf00      	nop
 80015fe:	3780      	adds	r7, #128	; 0x80
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40023800 	.word	0x40023800

08001608 <GP8XXX_IIC_setDACOutRange>:

int GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]

// only for 8402, 8413, 8211s, 8211, 8101

	uint8_t data = 0x00;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]

	switch (range) {
 8001618:	78fb      	ldrb	r3, [r7, #3]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d007      	beq.n	800162e <GP8XXX_IIC_setDACOutRange+0x26>
 800161e:	2b02      	cmp	r3, #2
 8001620:	d102      	bne.n	8001628 <GP8XXX_IIC_setDACOutRange+0x20>

	case eOutputRange5V:
		break;

	case eOutputRange10V:
		data = 0x11;
 8001622:	2311      	movs	r3, #17
 8001624:	73fb      	strb	r3, [r7, #15]
		break;
 8001626:	e003      	b.n	8001630 <GP8XXX_IIC_setDACOutRange+0x28>

	default:
		data = 0x00;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
		break;
 800162c:	e000      	b.n	8001630 <GP8XXX_IIC_setDACOutRange+0x28>
		break;
 800162e:	bf00      	nop

	}

	// Generate start condition
	dfr_i2c_start(gp8xxx);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff fcc5 	bl	8000fc0 <dfr_i2c_start>

	// Send device address
	dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	78db      	ldrb	r3, [r3, #3]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	4619      	mov	r1, r3
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fd17 	bl	8001074 <dfr_i2c_write_byte>

	// Send register address
	dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG >> 1);
 8001646:	2101      	movs	r1, #1
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fd13 	bl	8001074 <dfr_i2c_write_byte>

	// Send voltage data
	dfr_i2c_write_byte(gp8xxx,data);
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fd0e 	bl	8001074 <dfr_i2c_write_byte>

	// Generate stop condition
	dfr_i2c_stop(gp8xxx);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fce2 	bl	8001022 <dfr_i2c_stop>

	return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <GP8XXX_IIC_setDACOutVoltage>:

int GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage,
		uint8_t channel) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]

	// Set initial state of I2C lines
	if (voltage > gp8xxx->resolution)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	887a      	ldrh	r2, [r7, #2]
 800167e:	429a      	cmp	r2, r3
 8001680:	d902      	bls.n	8001688 <GP8XXX_IIC_setDACOutVoltage+0x20>
		voltage = gp8xxx->resolution;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	807b      	strh	r3, [r7, #2]

	if (gp8xxx->resolution == RESOLUTION_12_BIT) {
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001690:	4293      	cmp	r3, r2
 8001692:	d103      	bne.n	800169c <GP8XXX_IIC_setDACOutVoltage+0x34>
		voltage = voltage << 4;
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	807b      	strh	r3, [r7, #2]
 800169a:	e008      	b.n	80016ae <GP8XXX_IIC_setDACOutVoltage+0x46>

	} else if (gp8xxx->resolution == RESOLUTION_15_BIT) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d102      	bne.n	80016ae <GP8XXX_IIC_setDACOutVoltage+0x46>
		voltage = voltage << 1;
 80016a8:	887b      	ldrh	r3, [r7, #2]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	807b      	strh	r3, [r7, #2]

	}

	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80016ae:	887b      	ldrh	r3, [r7, #2]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	733b      	strb	r3, [r7, #12]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	0a1b      	lsrs	r3, r3, #8
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	737b      	strb	r3, [r7, #13]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80016c2:	73bb      	strb	r3, [r7, #14]
			(uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8) };
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	b2db      	uxtb	r3, r3
	uint8_t buff[4] = { (uint8_t) (voltage & 0xff), (uint8_t) (voltage >> 8),
 80016cc:	73fb      	strb	r3, [r7, #15]

	if (channel == 0) {
 80016ce:	787b      	ldrb	r3, [r7, #1]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d11d      	bne.n	8001710 <GP8XXX_IIC_setDACOutVoltage+0xa8>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fc73 	bl	8000fc0 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	78db      	ldrb	r3, [r3, #3]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fcc5 	bl	8001074 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 80016ea:	2102      	movs	r1, #2
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fcc1 	bl	8001074 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 80016f2:	7b3b      	ldrb	r3, [r7, #12]
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff fcbc 	bl	8001074 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 80016fc:	7b7b      	ldrb	r3, [r7, #13]
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fcb7 	bl	8001074 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc8b 	bl	8001022 <dfr_i2c_stop>

		return HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	e04c      	b.n	80017aa <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 1) {
 8001710:	787b      	ldrb	r3, [r7, #1]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d11d      	bne.n	8001752 <GP8XXX_IIC_setDACOutVoltage+0xea>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fc52 	bl	8000fc0 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	78db      	ldrb	r3, [r3, #3]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	b2db      	uxtb	r3, r3
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fca4 	bl	8001074 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG << 1);
 800172c:	2104      	movs	r1, #4
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fca0 	bl	8001074 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	4619      	mov	r1, r3
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff fc9b 	bl	8001074 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 800173e:	7b7b      	ldrb	r3, [r7, #13]
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff fc96 	bl	8001074 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fc6a 	bl	8001022 <dfr_i2c_stop>

		return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e02b      	b.n	80017aa <GP8XXX_IIC_setDACOutVoltage+0x142>

	} else if (channel == 2) {
 8001752:	787b      	ldrb	r3, [r7, #1]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d127      	bne.n	80017a8 <GP8XXX_IIC_setDACOutVoltage+0x140>

		// Generate start condition
		dfr_i2c_start(gp8xxx);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fc31 	bl	8000fc0 <dfr_i2c_start>

		// Send device address
		dfr_i2c_write_byte(gp8xxx,gp8xxx->deviceAddr << 1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	78db      	ldrb	r3, [r3, #3]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff fc83 	bl	8001074 <dfr_i2c_write_byte>

		// Send register address
		dfr_i2c_write_byte(gp8xxx,GP8XXX_CONFIG_CURRENT_REG);
 800176e:	2102      	movs	r1, #2
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff fc7f 	bl	8001074 <dfr_i2c_write_byte>

		// Send voltage data
		dfr_i2c_write_byte(gp8xxx,buff[0]);
 8001776:	7b3b      	ldrb	r3, [r7, #12]
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fc7a 	bl	8001074 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[1]);
 8001780:	7b7b      	ldrb	r3, [r7, #13]
 8001782:	4619      	mov	r1, r3
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fc75 	bl	8001074 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[2]);
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	4619      	mov	r1, r3
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fc70 	bl	8001074 <dfr_i2c_write_byte>
		dfr_i2c_write_byte(gp8xxx,buff[3]);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	4619      	mov	r1, r3
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fc6b 	bl	8001074 <dfr_i2c_write_byte>

		// Generate stop condition
		dfr_i2c_stop(gp8xxx);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fc3f 	bl	8001022 <dfr_i2c_stop>
		return HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <GP8XXX_IIC_setDACOutVoltage+0x142>
	} else
		return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1

}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <set_dob>:
#include <dob.h>

void set_dob(dob_instance *dob, float k, float j, float g) {
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80017be:	edc7 0a01 	vstr	s1, [r7, #4]
 80017c2:	ed87 1a00 	vstr	s2, [r7]

	dob->Kt = k;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	601a      	str	r2, [r3, #0]
	dob->Jm = j;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]
	dob->G_dis = g;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	609a      	str	r2, [r3, #8]
	dob->temp = 0;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	60da      	str	r2, [r3, #12]

}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <update_dob>:

void update_dob(dob_instance *dob, float Ia_ref, float velocity) {
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80017f8:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * dob->Kt + dob->Jm * dob->G_dis * velocity;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	edd7 7a02 	vldr	s15, [r7, #8]
 8001806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	edd3 7a02 	vldr	s15, [r3, #8]
 8001816:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800181a:	edd7 7a01 	vldr	s15, [r7, #4]
 800181e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	edc7 7a05 	vstr	s15, [r7, #20]
	dob->temp = dob->temp + (T_in - dob->temp) * dob->G_dis * dt/1000.0; // /dt
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe feba 	bl	80005a8 <__aeabi_f2d>
 8001834:	4604      	mov	r4, r0
 8001836:	460d      	mov	r5, r1
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	edd3 7a03 	vldr	s15, [r3, #12]
 800183e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001842:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	edd3 7a02 	vldr	s15, [r3, #8]
 800184c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <update_dob+0xd0>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fea3 	bl	80005a8 <__aeabi_f2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <update_dob+0xd4>)
 8001868:	f7ff f820 	bl	80008ac <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fd3a 	bl	80002ec <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9ac 	bl	8000bdc <__aeabi_d2f>
 8001884:	4602      	mov	r2, r0
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	60da      	str	r2, [r3, #12]

	dob->T_dis = dob->temp - dob->Jm * dob->G_dis * velocity;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	edd3 6a01 	vldr	s13, [r3, #4]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	edd3 7a02 	vldr	s15, [r3, #8]
 800189c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80018a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000004 	.word	0x20000004
 80018c0:	408f4000 	.word	0x408f4000

080018c4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2101      	movs	r1, #1
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <SELECT+0x14>)
 80018ce:	f004 fd5d 	bl	800638c <HAL_GPIO_WritePin>
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40020400 	.word	0x40020400

080018dc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80018e0:	2201      	movs	r2, #1
 80018e2:	2101      	movs	r1, #1
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <DESELECT+0x14>)
 80018e6:	f004 fd51 	bl	800638c <HAL_GPIO_WritePin>
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020400 	.word	0x40020400

080018f4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY);
 80018fe:	bf00      	nop
 8001900:	4808      	ldr	r0, [pc, #32]	; (8001924 <SPI_TxByte+0x30>)
 8001902:	f007 f875 	bl	80089f0 <HAL_SPI_GetState>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d1f9      	bne.n	8001900 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi4, &data, 1, SPI_TIMEOUT);
 800190c:	1df9      	adds	r1, r7, #7
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	2201      	movs	r2, #1
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <SPI_TxByte+0x30>)
 8001916:	f006 fcea 	bl	80082ee <HAL_SPI_Transmit>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003e4 	.word	0x200003e4

08001928 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800192e:	23ff      	movs	r3, #255	; 0xff
 8001930:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi4) != HAL_SPI_STATE_READY));
 8001936:	bf00      	nop
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <SPI_RxByte+0x38>)
 800193a:	f007 f859 	bl	80089f0 <HAL_SPI_GetState>
 800193e:	4603      	mov	r3, r0
 8001940:	2b01      	cmp	r3, #1
 8001942:	d1f9      	bne.n	8001938 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi4, &dummy, &data, 1, SPI_TIMEOUT);
 8001944:	1dba      	adds	r2, r7, #6
 8001946:	1df9      	adds	r1, r7, #7
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2301      	movs	r3, #1
 8001950:	4803      	ldr	r0, [pc, #12]	; (8001960 <SPI_RxByte+0x38>)
 8001952:	f006 fe3a 	bl	80085ca <HAL_SPI_TransmitReceive>
  
  return data;
 8001956:	79bb      	ldrb	r3, [r7, #6]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	200003e4 	.word	0x200003e4

08001964 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800196c:	f7ff ffdc 	bl	8001928 <SPI_RxByte>
 8001970:	4603      	mov	r3, r0
 8001972:	461a      	mov	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	701a      	strb	r2, [r3, #0]
}
 8001978:	bf00      	nop
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <SD_ReadyWait+0x34>)
 8001988:	2232      	movs	r2, #50	; 0x32
 800198a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800198c:	f7ff ffcc 	bl	8001928 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8001990:	f7ff ffca 	bl	8001928 <SPI_RxByte>
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2bff      	cmp	r3, #255	; 0xff
 800199c:	d004      	beq.n	80019a8 <SD_ReadyWait+0x28>
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SD_ReadyWait+0x34>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f3      	bne.n	8001990 <SD_ReadyWait+0x10>
  
  return res;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20003676 	.word	0x20003676

080019b8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80019be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80019c2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80019c4:	f7ff ff8a 	bl	80018dc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e005      	b.n	80019da <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80019ce:	20ff      	movs	r0, #255	; 0xff
 80019d0:	f7ff ff90 	bl	80018f4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	3301      	adds	r3, #1
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b09      	cmp	r3, #9
 80019de:	ddf6      	ble.n	80019ce <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80019e0:	f7ff ff70 	bl	80018c4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80019f8:	2395      	movs	r3, #149	; 0x95
 80019fa:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e009      	b.n	8001a16 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001a02:	1d3a      	adds	r2, r7, #4
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff72 	bl	80018f4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3301      	adds	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	ddf2      	ble.n	8001a02 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001a1c:	e002      	b.n	8001a24 <SD_PowerOn+0x6c>
  {
    Count--;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3b01      	subs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001a24:	f7ff ff80 	bl	8001928 <SPI_RxByte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d002      	beq.n	8001a34 <SD_PowerOn+0x7c>
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f4      	bne.n	8001a1e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001a34:	f7ff ff52 	bl	80018dc <DESELECT>
  SPI_TxByte(0XFF);
 8001a38:	20ff      	movs	r0, #255	; 0xff
 8001a3a:	f7ff ff5b 	bl	80018f4 <SPI_TxByte>
  
  PowerFlag = 1;
 8001a3e:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <SD_PowerOn+0x94>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200000ed 	.word	0x200000ed

08001a50 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <SD_PowerOff+0x14>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	200000ed 	.word	0x200000ed

08001a68 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <SD_CheckPower+0x14>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200000ed 	.word	0x200000ed

08001a80 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001a8a:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <SD_RxDataBlock+0x68>)
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001a90:	f7ff ff4a 	bl	8001928 <SPI_RxByte>
 8001a94:	4603      	mov	r3, r0
 8001a96:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d104      	bne.n	8001aa8 <SD_RxDataBlock+0x28>
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <SD_RxDataBlock+0x68>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f3      	bne.n	8001a90 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	2bfe      	cmp	r3, #254	; 0xfe
 8001aac:	d001      	beq.n	8001ab2 <SD_RxDataBlock+0x32>
    return FALSE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e016      	b.n	8001ae0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	1c5a      	adds	r2, r3, #1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff53 	bl	8001964 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff4d 	bl	8001964 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	3b02      	subs	r3, #2
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1ed      	bne.n	8001ab2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001ad6:	f7ff ff27 	bl	8001928 <SPI_RxByte>
  SPI_RxByte();
 8001ada:	f7ff ff25 	bl	8001928 <SPI_RxByte>
  
  return TRUE;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20003675 	.word	0x20003675

08001aec <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001afc:	f7ff ff40 	bl	8001980 <SD_ReadyWait>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d001      	beq.n	8001b0a <SD_TxDataBlock+0x1e>
    return FALSE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	e040      	b.n	8001b8c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fef1 	bl	80018f4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	2bfd      	cmp	r3, #253	; 0xfd
 8001b16:	d031      	beq.n	8001b7c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fee5 	bl	80018f4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fede 	bl	80018f4 <SPI_TxByte>
    } while (--wc);
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	73bb      	strb	r3, [r7, #14]
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1eb      	bne.n	8001b1c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001b44:	f7ff fef0 	bl	8001928 <SPI_RxByte>
    SPI_RxByte();
 8001b48:	f7ff feee 	bl	8001928 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001b4c:	e00b      	b.n	8001b66 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001b4e:	f7ff feeb 	bl	8001928 <SPI_RxByte>
 8001b52:	4603      	mov	r3, r0
 8001b54:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d006      	beq.n	8001b6e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001b60:	7b7b      	ldrb	r3, [r7, #13]
 8001b62:	3301      	adds	r3, #1
 8001b64:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001b66:	7b7b      	ldrb	r3, [r7, #13]
 8001b68:	2b40      	cmp	r3, #64	; 0x40
 8001b6a:	d9f0      	bls.n	8001b4e <SD_TxDataBlock+0x62>
 8001b6c:	e000      	b.n	8001b70 <SD_TxDataBlock+0x84>
        break;
 8001b6e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001b70:	bf00      	nop
 8001b72:	f7ff fed9 	bl	8001928 <SPI_RxByte>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0fa      	beq.n	8001b72 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d101      	bne.n	8001b8a <SD_TxDataBlock+0x9e>
    return TRUE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001ba0:	f7ff feee 	bl	8001980 <SD_ReadyWait>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2bff      	cmp	r3, #255	; 0xff
 8001ba8:	d001      	beq.n	8001bae <SD_SendCmd+0x1a>
    return 0xFF;
 8001baa:	23ff      	movs	r3, #255	; 0xff
 8001bac:	e040      	b.n	8001c30 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe9f 	bl	80018f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	0e1b      	lsrs	r3, r3, #24
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe99 	bl	80018f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	0c1b      	lsrs	r3, r3, #16
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fe93 	bl	80018f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fe8d 	bl	80018f4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fe88 	bl	80018f4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001be4:	2300      	movs	r3, #0
 8001be6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	2b40      	cmp	r3, #64	; 0x40
 8001bec:	d101      	bne.n	8001bf2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001bee:	2395      	movs	r3, #149	; 0x95
 8001bf0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b48      	cmp	r3, #72	; 0x48
 8001bf6:	d101      	bne.n	8001bfc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001bf8:	2387      	movs	r3, #135	; 0x87
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fe78 	bl	80018f4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	2b4c      	cmp	r3, #76	; 0x4c
 8001c08:	d101      	bne.n	8001c0e <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001c0a:	f7ff fe8d 	bl	8001928 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001c0e:	230a      	movs	r3, #10
 8001c10:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001c12:	f7ff fe89 	bl	8001928 <SPI_RxByte>
 8001c16:	4603      	mov	r3, r0
 8001c18:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001c1a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da05      	bge.n	8001c2e <SD_SendCmd+0x9a>
 8001c22:	7bbb      	ldrb	r3, [r7, #14]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	73bb      	strb	r3, [r7, #14]
 8001c28:	7bbb      	ldrb	r3, [r7, #14]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f1      	bne.n	8001c12 <SD_SendCmd+0x7e>
  
  return res;
 8001c2e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d5      	b.n	8001df8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001c4c:	4b6c      	ldr	r3, [pc, #432]	; (8001e00 <SD_disk_initialize+0x1c8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <SD_disk_initialize+0x2a>
    return Stat;        
 8001c5a:	4b69      	ldr	r3, [pc, #420]	; (8001e00 <SD_disk_initialize+0x1c8>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	e0ca      	b.n	8001df8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001c62:	f7ff fea9 	bl	80019b8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001c66:	f7ff fe2d 	bl	80018c4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2040      	movs	r0, #64	; 0x40
 8001c72:	f7ff ff8f 	bl	8001b94 <SD_SendCmd>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	f040 80a5 	bne.w	8001dc8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001c7e:	4b61      	ldr	r3, [pc, #388]	; (8001e04 <SD_disk_initialize+0x1cc>)
 8001c80:	2264      	movs	r2, #100	; 0x64
 8001c82:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001c84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001c88:	2048      	movs	r0, #72	; 0x48
 8001c8a:	f7ff ff83 	bl	8001b94 <SD_SendCmd>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d158      	bne.n	8001d46 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]
 8001c98:	e00c      	b.n	8001cb4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001c9a:	7bfc      	ldrb	r4, [r7, #15]
 8001c9c:	f7ff fe44 	bl	8001928 <SPI_RxByte>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f104 0310 	add.w	r3, r4, #16
 8001ca8:	443b      	add	r3, r7
 8001caa:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d9ef      	bls.n	8001c9a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001cba:	7abb      	ldrb	r3, [r7, #10]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	f040 8083 	bne.w	8001dc8 <SD_disk_initialize+0x190>
 8001cc2:	7afb      	ldrb	r3, [r7, #11]
 8001cc4:	2baa      	cmp	r3, #170	; 0xaa
 8001cc6:	d17f      	bne.n	8001dc8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2077      	movs	r0, #119	; 0x77
 8001ccc:	f7ff ff62 	bl	8001b94 <SD_SendCmd>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d807      	bhi.n	8001ce6 <SD_disk_initialize+0xae>
 8001cd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cda:	2069      	movs	r0, #105	; 0x69
 8001cdc:	f7ff ff5a 	bl	8001b94 <SD_SendCmd>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <SD_disk_initialize+0x1cc>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1eb      	bne.n	8001cc8 <SD_disk_initialize+0x90>
 8001cf0:	e000      	b.n	8001cf4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001cf2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001cf4:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <SD_disk_initialize+0x1cc>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d064      	beq.n	8001dc8 <SD_disk_initialize+0x190>
 8001cfe:	2100      	movs	r1, #0
 8001d00:	207a      	movs	r0, #122	; 0x7a
 8001d02:	f7ff ff47 	bl	8001b94 <SD_SendCmd>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d15d      	bne.n	8001dc8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e00c      	b.n	8001d2c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001d12:	7bfc      	ldrb	r4, [r7, #15]
 8001d14:	f7ff fe08 	bl	8001928 <SPI_RxByte>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f104 0310 	add.w	r3, r4, #16
 8001d20:	443b      	add	r3, r7
 8001d22:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d9ef      	bls.n	8001d12 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001d32:	7a3b      	ldrb	r3, [r7, #8]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <SD_disk_initialize+0x108>
 8001d3c:	2306      	movs	r3, #6
 8001d3e:	e000      	b.n	8001d42 <SD_disk_initialize+0x10a>
 8001d40:	2302      	movs	r3, #2
 8001d42:	73bb      	strb	r3, [r7, #14]
 8001d44:	e040      	b.n	8001dc8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001d46:	2100      	movs	r1, #0
 8001d48:	2077      	movs	r0, #119	; 0x77
 8001d4a:	f7ff ff23 	bl	8001b94 <SD_SendCmd>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d808      	bhi.n	8001d66 <SD_disk_initialize+0x12e>
 8001d54:	2100      	movs	r1, #0
 8001d56:	2069      	movs	r0, #105	; 0x69
 8001d58:	f7ff ff1c 	bl	8001b94 <SD_SendCmd>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d801      	bhi.n	8001d66 <SD_disk_initialize+0x12e>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e000      	b.n	8001d68 <SD_disk_initialize+0x130>
 8001d66:	2301      	movs	r3, #1
 8001d68:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001d6a:	7bbb      	ldrb	r3, [r7, #14]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d10e      	bne.n	8001d8e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001d70:	2100      	movs	r1, #0
 8001d72:	2077      	movs	r0, #119	; 0x77
 8001d74:	f7ff ff0e 	bl	8001b94 <SD_SendCmd>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d80e      	bhi.n	8001d9c <SD_disk_initialize+0x164>
 8001d7e:	2100      	movs	r1, #0
 8001d80:	2069      	movs	r0, #105	; 0x69
 8001d82:	f7ff ff07 	bl	8001b94 <SD_SendCmd>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001d8c:	e00d      	b.n	8001daa <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2041      	movs	r0, #65	; 0x41
 8001d92:	f7ff feff 	bl	8001b94 <SD_SendCmd>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001d9c:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <SD_disk_initialize+0x1cc>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1e1      	bne.n	8001d6a <SD_disk_initialize+0x132>
 8001da6:	e000      	b.n	8001daa <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001da8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <SD_disk_initialize+0x1cc>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <SD_disk_initialize+0x18c>
 8001db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001db8:	2050      	movs	r0, #80	; 0x50
 8001dba:	f7ff feeb 	bl	8001b94 <SD_SendCmd>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	; (8001e08 <SD_disk_initialize+0x1d0>)
 8001dca:	7bbb      	ldrb	r3, [r7, #14]
 8001dcc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001dce:	f7ff fd85 	bl	80018dc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001dd2:	f7ff fda9 	bl	8001928 <SPI_RxByte>
  
  if (type) 
 8001dd6:	7bbb      	ldrb	r3, [r7, #14]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <SD_disk_initialize+0x1c8>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SD_disk_initialize+0x1c8>)
 8001dea:	701a      	strb	r2, [r3, #0]
 8001dec:	e001      	b.n	8001df2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001dee:	f7ff fe2f 	bl	8001a50 <SD_PowerOff>
  }
  
  return Stat;
 8001df2:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <SD_disk_initialize+0x1c8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	20003675 	.word	0x20003675
 8001e08:	200000ec 	.word	0x200000ec

08001e0c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e002      	b.n	8001e26 <SD_disk_status+0x1a>
  
  return Stat;
 8001e20:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SD_disk_status+0x28>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000000 	.word	0x20000000

08001e38 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <SD_disk_read+0x1c>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <SD_disk_read+0x20>
    return RES_PARERR;
 8001e54:	2304      	movs	r3, #4
 8001e56:	e051      	b.n	8001efc <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <SD_disk_read+0xcc>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e048      	b.n	8001efc <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <SD_disk_read+0xd0>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	025b      	lsls	r3, r3, #9
 8001e7a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001e7c:	f7ff fd22 	bl	80018c4 <SELECT>
  
  if (count == 1) 
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d111      	bne.n	8001eaa <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	2051      	movs	r0, #81	; 0x51
 8001e8a:	f7ff fe83 	bl	8001b94 <SD_SendCmd>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d129      	bne.n	8001ee8 <SD_disk_read+0xb0>
 8001e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f7ff fdf1 	bl	8001a80 <SD_RxDataBlock>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d021      	beq.n	8001ee8 <SD_disk_read+0xb0>
      count = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	e01e      	b.n	8001ee8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	2052      	movs	r0, #82	; 0x52
 8001eae:	f7ff fe71 	bl	8001b94 <SD_SendCmd>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d117      	bne.n	8001ee8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebc:	68b8      	ldr	r0, [r7, #8]
 8001ebe:	f7ff fddf 	bl	8001a80 <SD_RxDataBlock>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001ece:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ed      	bne.n	8001eb8 <SD_disk_read+0x80>
 8001edc:	e000      	b.n	8001ee0 <SD_disk_read+0xa8>
          break;
 8001ede:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	204c      	movs	r0, #76	; 0x4c
 8001ee4:	f7ff fe56 	bl	8001b94 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001ee8:	f7ff fcf8 	bl	80018dc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001eec:	f7ff fd1c 	bl	8001928 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bf14      	ite	ne
 8001ef6:	2301      	movne	r3, #1
 8001ef8:	2300      	moveq	r3, #0
 8001efa:	b2db      	uxtb	r3, r3
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	200000ec 	.word	0x200000ec

08001f0c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	603b      	str	r3, [r7, #0]
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d102      	bne.n	8001f28 <SD_disk_write+0x1c>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <SD_disk_write+0x20>
    return RES_PARERR;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	e06b      	b.n	8002004 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001f2c:	4b37      	ldr	r3, [pc, #220]	; (800200c <SD_disk_write+0x100>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e062      	b.n	8002004 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <SD_disk_write+0x100>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e059      	b.n	8002004 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001f50:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <SD_disk_write+0x104>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d102      	bne.n	8001f62 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	025b      	lsls	r3, r3, #9
 8001f60:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001f62:	f7ff fcaf 	bl	80018c4 <SELECT>
  
  if (count == 1) 
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d110      	bne.n	8001f8e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	2058      	movs	r0, #88	; 0x58
 8001f70:	f7ff fe10 	bl	8001b94 <SD_SendCmd>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d13a      	bne.n	8001ff0 <SD_disk_write+0xe4>
 8001f7a:	21fe      	movs	r1, #254	; 0xfe
 8001f7c:	68b8      	ldr	r0, [r7, #8]
 8001f7e:	f7ff fdb5 	bl	8001aec <SD_TxDataBlock>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d033      	beq.n	8001ff0 <SD_disk_write+0xe4>
      count = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	e030      	b.n	8001ff0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <SD_disk_write+0x104>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2077      	movs	r0, #119	; 0x77
 8001f9e:	f7ff fdf9 	bl	8001b94 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001fa2:	6839      	ldr	r1, [r7, #0]
 8001fa4:	2057      	movs	r0, #87	; 0x57
 8001fa6:	f7ff fdf5 	bl	8001b94 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	2059      	movs	r0, #89	; 0x59
 8001fae:	f7ff fdf1 	bl	8001b94 <SD_SendCmd>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11b      	bne.n	8001ff0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001fb8:	21fc      	movs	r1, #252	; 0xfc
 8001fba:	68b8      	ldr	r0, [r7, #8]
 8001fbc:	f7ff fd96 	bl	8001aec <SD_TxDataBlock>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001fcc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	603b      	str	r3, [r7, #0]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ee      	bne.n	8001fb8 <SD_disk_write+0xac>
 8001fda:	e000      	b.n	8001fde <SD_disk_write+0xd2>
          break;
 8001fdc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001fde:	21fd      	movs	r1, #253	; 0xfd
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fd83 	bl	8001aec <SD_TxDataBlock>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ff0:	f7ff fc74 	bl	80018dc <DESELECT>
  SPI_RxByte();
 8001ff4:	f7ff fc98 	bl	8001928 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	bf14      	ite	ne
 8001ffe:	2301      	movne	r3, #1
 8002000:	2300      	moveq	r3, #0
 8002002:	b2db      	uxtb	r3, r3
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000000 	.word	0x20000000
 8002010:	200000ec 	.word	0x200000ec

08002014 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b08b      	sub	sp, #44	; 0x2c
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	603a      	str	r2, [r7, #0]
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	460b      	mov	r3, r1
 8002022:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800202e:	2304      	movs	r3, #4
 8002030:	e11b      	b.n	800226a <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002038:	79bb      	ldrb	r3, [r7, #6]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d129      	bne.n	8002092 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b02      	cmp	r3, #2
 8002044:	d017      	beq.n	8002076 <SD_disk_ioctl+0x62>
 8002046:	2b02      	cmp	r3, #2
 8002048:	dc1f      	bgt.n	800208a <SD_disk_ioctl+0x76>
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <SD_disk_ioctl+0x40>
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00b      	beq.n	800206a <SD_disk_ioctl+0x56>
 8002052:	e01a      	b.n	800208a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002054:	f7ff fd08 	bl	8001a68 <SD_CheckPower>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800205e:	f7ff fcf7 	bl	8001a50 <SD_PowerOff>
      res = RES_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002068:	e0fd      	b.n	8002266 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800206a:	f7ff fca5 	bl	80019b8 <SD_PowerOn>
      res = RES_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002074:	e0f7      	b.n	8002266 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	1c5c      	adds	r4, r3, #1
 800207a:	f7ff fcf5 	bl	8001a68 <SD_CheckPower>
 800207e:	4603      	mov	r3, r0
 8002080:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002082:	2300      	movs	r3, #0
 8002084:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002088:	e0ed      	b.n	8002266 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800208a:	2304      	movs	r3, #4
 800208c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002090:	e0e9      	b.n	8002266 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <SD_disk_ioctl+0x260>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e0e2      	b.n	800226a <SD_disk_ioctl+0x256>
    
    SELECT();
 80020a4:	f7ff fc0e 	bl	80018c4 <SELECT>
    
    switch (ctrl) 
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	2b0d      	cmp	r3, #13
 80020ac:	f200 80cc 	bhi.w	8002248 <SD_disk_ioctl+0x234>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <SD_disk_ioctl+0xa4>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080021b3 	.word	0x080021b3
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	080021a3 	.word	0x080021a3
 80020c4:	08002249 	.word	0x08002249
 80020c8:	08002249 	.word	0x08002249
 80020cc:	08002249 	.word	0x08002249
 80020d0:	08002249 	.word	0x08002249
 80020d4:	08002249 	.word	0x08002249
 80020d8:	08002249 	.word	0x08002249
 80020dc:	08002249 	.word	0x08002249
 80020e0:	08002249 	.word	0x08002249
 80020e4:	080021c5 	.word	0x080021c5
 80020e8:	080021e9 	.word	0x080021e9
 80020ec:	0800220d 	.word	0x0800220d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 80020f0:	2100      	movs	r1, #0
 80020f2:	2049      	movs	r0, #73	; 0x49
 80020f4:	f7ff fd4e 	bl	8001b94 <SD_SendCmd>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80a8 	bne.w	8002250 <SD_disk_ioctl+0x23c>
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	2110      	movs	r1, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fcba 	bl	8001a80 <SD_RxDataBlock>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 809e 	beq.w	8002250 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002114:	7b3b      	ldrb	r3, [r7, #12]
 8002116:	099b      	lsrs	r3, r3, #6
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10e      	bne.n	800213c <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800211e:	7d7b      	ldrb	r3, [r7, #21]
 8002120:	b29a      	uxth	r2, r3
 8002122:	7d3b      	ldrb	r3, [r7, #20]
 8002124:	b29b      	uxth	r3, r3
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b29b      	uxth	r3, r3
 800212a:	4413      	add	r3, r2
 800212c:	b29b      	uxth	r3, r3
 800212e:	3301      	adds	r3, #1
 8002130:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002132:	8bfb      	ldrh	r3, [r7, #30]
 8002134:	029a      	lsls	r2, r3, #10
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	e02e      	b.n	800219a <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800213c:	7c7b      	ldrb	r3, [r7, #17]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	b2da      	uxtb	r2, r3
 8002144:	7dbb      	ldrb	r3, [r7, #22]
 8002146:	09db      	lsrs	r3, r3, #7
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4413      	add	r3, r2
 800214c:	b2da      	uxtb	r2, r3
 800214e:	7d7b      	ldrb	r3, [r7, #21]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0306 	and.w	r3, r3, #6
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b2db      	uxtb	r3, r3
 800215e:	3302      	adds	r3, #2
 8002160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002164:	7d3b      	ldrb	r3, [r7, #20]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	b2db      	uxtb	r3, r3
 800216a:	b29a      	uxth	r2, r3
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	b29b      	uxth	r3, r3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	b29b      	uxth	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	7cbb      	ldrb	r3, [r7, #18]
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	b29b      	uxth	r3, r3
 800217e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002182:	b29b      	uxth	r3, r3
 8002184:	4413      	add	r3, r2
 8002186:	b29b      	uxth	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800218c:	8bfa      	ldrh	r2, [r7, #30]
 800218e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002192:	3b09      	subs	r3, #9
 8002194:	409a      	lsls	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80021a0:	e056      	b.n	8002250 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021a8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021b0:	e055      	b.n	800225e <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80021b2:	f7ff fbe5 	bl	8001980 <SD_ReadyWait>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2bff      	cmp	r3, #255	; 0xff
 80021ba:	d14b      	bne.n	8002254 <SD_disk_ioctl+0x240>
        res = RES_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021c2:	e047      	b.n	8002254 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021c4:	2100      	movs	r1, #0
 80021c6:	2049      	movs	r0, #73	; 0x49
 80021c8:	f7ff fce4 	bl	8001b94 <SD_SendCmd>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d142      	bne.n	8002258 <SD_disk_ioctl+0x244>
 80021d2:	2110      	movs	r1, #16
 80021d4:	6a38      	ldr	r0, [r7, #32]
 80021d6:	f7ff fc53 	bl	8001a80 <SD_RxDataBlock>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d03b      	beq.n	8002258 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021e6:	e037      	b.n	8002258 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021e8:	2100      	movs	r1, #0
 80021ea:	204a      	movs	r0, #74	; 0x4a
 80021ec:	f7ff fcd2 	bl	8001b94 <SD_SendCmd>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d132      	bne.n	800225c <SD_disk_ioctl+0x248>
 80021f6:	2110      	movs	r1, #16
 80021f8:	6a38      	ldr	r0, [r7, #32]
 80021fa:	f7ff fc41 	bl	8001a80 <SD_RxDataBlock>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d02b      	beq.n	800225c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800220a:	e027      	b.n	800225c <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800220c:	2100      	movs	r1, #0
 800220e:	207a      	movs	r0, #122	; 0x7a
 8002210:	f7ff fcc0 	bl	8001b94 <SD_SendCmd>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002220:	e00b      	b.n	800223a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002222:	6a3c      	ldr	r4, [r7, #32]
 8002224:	1c63      	adds	r3, r4, #1
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	f7ff fb7e 	bl	8001928 <SPI_RxByte>
 800222c:	4603      	mov	r3, r0
 800222e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002234:	3301      	adds	r3, #1
 8002236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800223a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800223e:	2b03      	cmp	r3, #3
 8002240:	d9ef      	bls.n	8002222 <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002248:	2304      	movs	r3, #4
 800224a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800224e:	e006      	b.n	800225e <SD_disk_ioctl+0x24a>
      break;
 8002250:	bf00      	nop
 8002252:	e004      	b.n	800225e <SD_disk_ioctl+0x24a>
      break;
 8002254:	bf00      	nop
 8002256:	e002      	b.n	800225e <SD_disk_ioctl+0x24a>
      break;
 8002258:	bf00      	nop
 800225a:	e000      	b.n	800225e <SD_disk_ioctl+0x24a>
      break;
 800225c:	bf00      	nop
    }
    
    DESELECT();
 800225e:	f7ff fb3d 	bl	80018dc <DESELECT>
    SPI_RxByte();
 8002262:	f7ff fb61 	bl	8001928 <SPI_RxByte>
  }
  
  return res;
 8002266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800226a:	4618      	mov	r0, r3
 800226c:	372c      	adds	r7, #44	; 0x2c
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002288:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <vApplicationGetIdleTaskMemory+0x30>)
 800228e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200000f0 	.word	0x200000f0
 80022a8:	20000190 	.word	0x20000190

080022ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80022c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80022cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00b      	beq.n	80022ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80022d4:	e000      	b.n	80022d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80022d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80022d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f9      	beq.n	80022d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80022e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <send_uart>:
UINT br, bw; // file read and write count
/**********************************************/

/*********************** to send the data to the uart ****************************/

void send_uart(char *string) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

	uint8_t len = strlen(string);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7fd ff8d 	bl	8000224 <strlen>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // transmit in blocking mode
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	b29a      	uxth	r2, r3
 8002312:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4803      	ldr	r0, [pc, #12]	; (8002328 <send_uart+0x2c>)
 800231a:	f007 fa35 	bl	8009788 <HAL_UART_Transmit>

}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	200004e0 	.word	0x200004e0

0800232c <SDCARD_Task>:
void Bimanual_MotorCtrl_M2(void);

float findJ(bool i);
float findG(bool i);

void SDCARD_Task(void *argument) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

	xLastWakeTime_SDCARD = xTaskGetTickCount();
 8002334:	f00b fde4 	bl	800df00 <xTaskGetTickCount>
 8002338:	4603      	mov	r3, r0
 800233a:	4a56      	ldr	r2, [pc, #344]	; (8002494 <SDCARD_Task+0x168>)
 800233c:	6013      	str	r3, [r2, #0]

	while (1) {
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // red LED
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // blue LED

		if (motor1_pos > ThetaConuterDown && SD_DoneDown == 0) {
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <SDCARD_Task+0x16c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234a:	4b54      	ldr	r3, [pc, #336]	; (800249c <SDCARD_Task+0x170>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002358:	d528      	bpl.n	80023ac <SDCARD_Task+0x80>
 800235a:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <SDCARD_Task+0x174>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d124      	bne.n	80023ac <SDCARD_Task+0x80>

			PositionDown1[ThetaConuterDown] = motor1_pos;
 8002362:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <SDCARD_Task+0x16c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a4d      	ldr	r2, [pc, #308]	; (800249c <SDCARD_Task+0x170>)
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	494e      	ldr	r1, [pc, #312]	; (80024a4 <SDCARD_Task+0x178>)
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	601a      	str	r2, [r3, #0]
			PositionDown2[ThetaConuterDown] = motor2_pos;
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <SDCARD_Task+0x16c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <SDCARD_Task+0x17c>)
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	494c      	ldr	r1, [pc, #304]	; (80024ac <SDCARD_Task+0x180>)
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	601a      	str	r2, [r3, #0]
			TorqueDown1[ThetaConuterDown] = T_Rec1;
 8002382:	4b45      	ldr	r3, [pc, #276]	; (8002498 <SDCARD_Task+0x16c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a4a      	ldr	r2, [pc, #296]	; (80024b0 <SDCARD_Task+0x184>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	494a      	ldr	r1, [pc, #296]	; (80024b4 <SDCARD_Task+0x188>)
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	601a      	str	r2, [r3, #0]
			TorqueDown2[ThetaConuterDown] = T_Rec2;
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <SDCARD_Task+0x16c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a48      	ldr	r2, [pc, #288]	; (80024b8 <SDCARD_Task+0x18c>)
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	4948      	ldr	r1, [pc, #288]	; (80024bc <SDCARD_Task+0x190>)
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	601a      	str	r2, [r3, #0]

			ThetaConuterDown = ThetaConuterDown + 1;
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <SDCARD_Task+0x16c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a3b      	ldr	r2, [pc, #236]	; (8002498 <SDCARD_Task+0x16c>)
 80023aa:	6013      	str	r3, [r2, #0]
		}

		if (motor1_pos < ThetaConuterUp && SD_DoneDown == 1) {
 80023ac:	4b44      	ldr	r3, [pc, #272]	; (80024c0 <SDCARD_Task+0x194>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b8:	4b38      	ldr	r3, [pc, #224]	; (800249c <SDCARD_Task+0x170>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	dd28      	ble.n	800241a <SDCARD_Task+0xee>
 80023c8:	4b35      	ldr	r3, [pc, #212]	; (80024a0 <SDCARD_Task+0x174>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d124      	bne.n	800241a <SDCARD_Task+0xee>

			PositionUp1[ThetaConuterUp] = motor1_pos;
 80023d0:	4b3b      	ldr	r3, [pc, #236]	; (80024c0 <SDCARD_Task+0x194>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a31      	ldr	r2, [pc, #196]	; (800249c <SDCARD_Task+0x170>)
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	493a      	ldr	r1, [pc, #232]	; (80024c4 <SDCARD_Task+0x198>)
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	601a      	str	r2, [r3, #0]
			PositionUp2[ThetaConuterUp] = motor2_pos;
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <SDCARD_Task+0x194>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a30      	ldr	r2, [pc, #192]	; (80024a8 <SDCARD_Task+0x17c>)
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	4937      	ldr	r1, [pc, #220]	; (80024c8 <SDCARD_Task+0x19c>)
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	601a      	str	r2, [r3, #0]
			TorqueUp1[ThetaConuterUp] = T_Rec1;
 80023f0:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <SDCARD_Task+0x194>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2e      	ldr	r2, [pc, #184]	; (80024b0 <SDCARD_Task+0x184>)
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	4934      	ldr	r1, [pc, #208]	; (80024cc <SDCARD_Task+0x1a0>)
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	601a      	str	r2, [r3, #0]
			TorqueUp2[ThetaConuterUp] = T_Rec2;
 8002400:	4b2f      	ldr	r3, [pc, #188]	; (80024c0 <SDCARD_Task+0x194>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a2c      	ldr	r2, [pc, #176]	; (80024b8 <SDCARD_Task+0x18c>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4931      	ldr	r1, [pc, #196]	; (80024d0 <SDCARD_Task+0x1a4>)
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	601a      	str	r2, [r3, #0]

			ThetaConuterUp = ThetaConuterUp - 1;
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <SDCARD_Task+0x194>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3b01      	subs	r3, #1
 8002416:	4a2a      	ldr	r2, [pc, #168]	; (80024c0 <SDCARD_Task+0x194>)
 8002418:	6013      	str	r3, [r2, #0]

		 if (motor1_pos > 81) {
		 SD_DoneUp = 0;
		 }*/

		if (ThetaConuterDown == 81) {
 800241a:	4b1f      	ldr	r3, [pc, #124]	; (8002498 <SDCARD_Task+0x16c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b51      	cmp	r3, #81	; 0x51
 8002420:	d117      	bne.n	8002452 <SDCARD_Task+0x126>

			WriteToSD(PositionDown1, TorqueDown1, 82, "T1_Down.TXT");
 8002422:	4b2c      	ldr	r3, [pc, #176]	; (80024d4 <SDCARD_Task+0x1a8>)
 8002424:	2252      	movs	r2, #82	; 0x52
 8002426:	4923      	ldr	r1, [pc, #140]	; (80024b4 <SDCARD_Task+0x188>)
 8002428:	481e      	ldr	r0, [pc, #120]	; (80024a4 <SDCARD_Task+0x178>)
 800242a:	f000 fad7 	bl	80029dc <WriteToSD>
			WriteToSD(PositionDown2, TorqueDown2, 82, "T2_Down.TXT");
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <SDCARD_Task+0x1ac>)
 8002430:	2252      	movs	r2, #82	; 0x52
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <SDCARD_Task+0x190>)
 8002434:	481d      	ldr	r0, [pc, #116]	; (80024ac <SDCARD_Task+0x180>)
 8002436:	f000 fad1 	bl	80029dc <WriteToSD>
			SD_DoneDown = 1;
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <SDCARD_Task+0x174>)
 800243c:	2201      	movs	r2, #1
 800243e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // SD led
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002446:	4825      	ldr	r0, [pc, #148]	; (80024dc <SDCARD_Task+0x1b0>)
 8002448:	f003 ffa0 	bl	800638c <HAL_GPIO_WritePin>
			ThetaConuterDown = 0;
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SDCARD_Task+0x16c>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
		}

		if (ThetaConuterUp == 0) {
 8002452:	4b1b      	ldr	r3, [pc, #108]	; (80024c0 <SDCARD_Task+0x194>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d117      	bne.n	800248a <SDCARD_Task+0x15e>

			WriteToSD(PositionUp1, TorqueUp1, 82, "T1_Up.TXT");
 800245a:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <SDCARD_Task+0x1b4>)
 800245c:	2252      	movs	r2, #82	; 0x52
 800245e:	491b      	ldr	r1, [pc, #108]	; (80024cc <SDCARD_Task+0x1a0>)
 8002460:	4818      	ldr	r0, [pc, #96]	; (80024c4 <SDCARD_Task+0x198>)
 8002462:	f000 fabb 	bl	80029dc <WriteToSD>
			WriteToSD(PositionUp2, TorqueUp2, 82, "T2_Up.TXT");
 8002466:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <SDCARD_Task+0x1b8>)
 8002468:	2252      	movs	r2, #82	; 0x52
 800246a:	4919      	ldr	r1, [pc, #100]	; (80024d0 <SDCARD_Task+0x1a4>)
 800246c:	4816      	ldr	r0, [pc, #88]	; (80024c8 <SDCARD_Task+0x19c>)
 800246e:	f000 fab5 	bl	80029dc <WriteToSD>
			SD_DoneDown = 0;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <SDCARD_Task+0x174>)
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // SD led
 8002478:	2201      	movs	r2, #1
 800247a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800247e:	4817      	ldr	r0, [pc, #92]	; (80024dc <SDCARD_Task+0x1b0>)
 8002480:	f003 ff84 	bl	800638c <HAL_GPIO_WritePin>
			ThetaConuterUp = 81;
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <SDCARD_Task+0x194>)
 8002486:	2251      	movs	r2, #81	; 0x51
 8002488:	601a      	str	r2, [r3, #0]
		}
		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);

		vTaskDelay(100);
 800248a:	2064      	movs	r0, #100	; 0x64
 800248c:	f00b fbe8 	bl	800dc60 <vTaskDelay>
		if (motor1_pos > ThetaConuterDown && SD_DoneDown == 0) {
 8002490:	e755      	b.n	800233e <SDCARD_Task+0x12>
 8002492:	bf00      	nop
 8002494:	200035e8 	.word	0x200035e8
 8002498:	20000f0c 	.word	0x20000f0c
 800249c:	2000088c 	.word	0x2000088c
 80024a0:	20000f10 	.word	0x20000f10
 80024a4:	20000bec 	.word	0x20000bec
 80024a8:	20000890 	.word	0x20000890
 80024ac:	20000d7c 	.word	0x20000d7c
 80024b0:	2000089c 	.word	0x2000089c
 80024b4:	200008cc 	.word	0x200008cc
 80024b8:	200008b4 	.word	0x200008b4
 80024bc:	20000a5c 	.word	0x20000a5c
 80024c0:	20000010 	.word	0x20000010
 80024c4:	20001234 	.word	0x20001234
 80024c8:	200013c4 	.word	0x200013c4
 80024cc:	20000f14 	.word	0x20000f14
 80024d0:	200010a4 	.word	0x200010a4
 80024d4:	080116a8 	.word	0x080116a8
 80024d8:	080116b4 	.word	0x080116b4
 80024dc:	40021400 	.word	0x40021400
 80024e0:	080116c0 	.word	0x080116c0
 80024e4:	080116cc 	.word	0x080116cc

080024e8 <INITIALIZATION_Task>:

uint8_t delet[DATA_SIZE];
int xx = 0;
#define DATA_HEADER 0x01

void INITIALIZATION_Task(void *argument) {
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b0b0      	sub	sp, #192	; 0xc0
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	6078      	str	r0, [r7, #4]

	uint8_t data[] = "STM Ready";
 80024f0:	4aae      	ldr	r2, [pc, #696]	; (80027ac <INITIALIZATION_Task+0x2c4>)
 80024f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80024f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80024f8:	c303      	stmia	r3!, {r0, r1}
 80024fa:	801a      	strh	r2, [r3, #0]
	uint8_t I2cBuffer[DATA_SIZE];
	float dataToSend = 0;
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	static float xx = 0;

	while (1) {
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // red LED

		if (HAL_GPIO_ReadPin(Mode_Selection_3_GPIO_Port, Mode_Selection_3_Pin)
 8002504:	2180      	movs	r1, #128	; 0x80
 8002506:	48aa      	ldr	r0, [pc, #680]	; (80027b0 <INITIALIZATION_Task+0x2c8>)
 8002508:	f003 ff28 	bl	800635c <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <INITIALIZATION_Task+0x32>
				== GPIO_PIN_RESET) {

			Mode = 1;
 8002512:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <INITIALIZATION_Task+0x2cc>)
 8002514:	2201      	movs	r2, #1
 8002516:	801a      	strh	r2, [r3, #0]
 8002518:	e014      	b.n	8002544 <INITIALIZATION_Task+0x5c>

		} else if (HAL_GPIO_ReadPin(Mode_Selection_2_GPIO_Port,
 800251a:	2140      	movs	r1, #64	; 0x40
 800251c:	48a4      	ldr	r0, [pc, #656]	; (80027b0 <INITIALIZATION_Task+0x2c8>)
 800251e:	f003 ff1d 	bl	800635c <HAL_GPIO_ReadPin>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <INITIALIZATION_Task+0x48>
		Mode_Selection_2_Pin) == GPIO_PIN_RESET) {

			Mode = 2;
 8002528:	4ba2      	ldr	r3, [pc, #648]	; (80027b4 <INITIALIZATION_Task+0x2cc>)
 800252a:	2202      	movs	r2, #2
 800252c:	801a      	strh	r2, [r3, #0]
 800252e:	e009      	b.n	8002544 <INITIALIZATION_Task+0x5c>

		} else if (HAL_GPIO_ReadPin(Mode_Selection_1_GPIO_Port,
 8002530:	2120      	movs	r1, #32
 8002532:	489f      	ldr	r0, [pc, #636]	; (80027b0 <INITIALIZATION_Task+0x2c8>)
 8002534:	f003 ff12 	bl	800635c <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d102      	bne.n	8002544 <INITIALIZATION_Task+0x5c>
		Mode_Selection_1_Pin) == GPIO_PIN_SET) {

			Mode = 3;
 800253e:	4b9d      	ldr	r3, [pc, #628]	; (80027b4 <INITIALIZATION_Task+0x2cc>)
 8002540:	2203      	movs	r2, #3
 8002542:	801a      	strh	r2, [r3, #0]

		}

		if (HAL_GPIO_ReadPin(CHANGE_EXERCISE_GPIO_Port, CHANGE_EXERCISE_Pin)
 8002544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002548:	489b      	ldr	r0, [pc, #620]	; (80027b8 <INITIALIZATION_Task+0x2d0>)
 800254a:	f003 ff07 	bl	800635c <HAL_GPIO_ReadPin>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <INITIALIZATION_Task+0x7e>
				== GPIO_PIN_RESET) {

			IsRo = 0;
 8002554:	4b99      	ldr	r3, [pc, #612]	; (80027bc <INITIALIZATION_Task+0x2d4>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Error_Indication_2_GPIO_Port,
 800255a:	2201      	movs	r2, #1
 800255c:	2120      	movs	r1, #32
 800255e:	4898      	ldr	r0, [pc, #608]	; (80027c0 <INITIALIZATION_Task+0x2d8>)
 8002560:	f003 ff14 	bl	800638c <HAL_GPIO_WritePin>
 8002564:	e007      	b.n	8002576 <INITIALIZATION_Task+0x8e>
			Error_Indication_2_Pin, GPIO_PIN_SET);
		} else {
			IsRo = 1;
 8002566:	4b95      	ldr	r3, [pc, #596]	; (80027bc <INITIALIZATION_Task+0x2d4>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Error_Indication_2_GPIO_Port,
 800256c:	2200      	movs	r2, #0
 800256e:	2120      	movs	r1, #32
 8002570:	4893      	ldr	r0, [pc, #588]	; (80027c0 <INITIALIZATION_Task+0x2d8>)
 8002572:	f003 ff0b 	bl	800638c <HAL_GPIO_WritePin>
			Error_Indication_2_Pin, GPIO_PIN_RESET);

		}

		if (HAL_GPIO_ReadPin(MST_SLV_SHIFT_GPIO_Port, MST_SLV_SHIFT_Pin)
 8002576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800257a:	4892      	ldr	r0, [pc, #584]	; (80027c4 <INITIALIZATION_Task+0x2dc>)
 800257c:	f003 feee 	bl	800635c <HAL_GPIO_ReadPin>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <INITIALIZATION_Task+0xb0>
				== GPIO_PIN_RESET) {

			MST1 = 0;
 8002586:	4b90      	ldr	r3, [pc, #576]	; (80027c8 <INITIALIZATION_Task+0x2e0>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Error_Indication_1_GPIO_Port,
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	4889      	ldr	r0, [pc, #548]	; (80027b8 <INITIALIZATION_Task+0x2d0>)
 8002592:	f003 fefb 	bl	800638c <HAL_GPIO_WritePin>
 8002596:	e007      	b.n	80025a8 <INITIALIZATION_Task+0xc0>
			Error_Indication_1_Pin, GPIO_PIN_RESET);

		}

		else {
			MST1 = 1;
 8002598:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <INITIALIZATION_Task+0x2e0>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Error_Indication_1_GPIO_Port,
 800259e:	2201      	movs	r2, #1
 80025a0:	2104      	movs	r1, #4
 80025a2:	4885      	ldr	r0, [pc, #532]	; (80027b8 <INITIALIZATION_Task+0x2d0>)
 80025a4:	f003 fef2 	bl	800638c <HAL_GPIO_WritePin>
			Error_Indication_1_Pin, GPIO_PIN_SET);

		}

		if (HAL_GPIO_ReadPin(DATA_READY_GPIO_Port, DATA_READY_Pin)
 80025a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ac:	4880      	ldr	r0, [pc, #512]	; (80027b0 <INITIALIZATION_Task+0x2c8>)
 80025ae:	f003 fed5 	bl	800635c <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d16a      	bne.n	800268e <INITIALIZATION_Task+0x1a6>
				== GPIO_PIN_SET) {

			J1 = findJ(IsMale);
 80025b8:	4b84      	ldr	r3, [pc, #528]	; (80027cc <INITIALIZATION_Task+0x2e4>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fac3 	bl	8002b48 <findJ>
 80025c2:	eef0 7a40 	vmov.f32	s15, s0
 80025c6:	4b82      	ldr	r3, [pc, #520]	; (80027d0 <INITIALIZATION_Task+0x2e8>)
 80025c8:	edc3 7a00 	vstr	s15, [r3]
			G1 = findG(IsMale);
 80025cc:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <INITIALIZATION_Task+0x2e4>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fbdb 	bl	8002d8c <findG>
 80025d6:	eef0 7a40 	vmov.f32	s15, s0
 80025da:	4b7e      	ldr	r3, [pc, #504]	; (80027d4 <INITIALIZATION_Task+0x2ec>)
 80025dc:	edc3 7a00 	vstr	s15, [r3]

			set_dob(&dob1, k_T, J1, g_dis); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , g_dis = 50
 80025e0:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <INITIALIZATION_Task+0x2f0>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <INITIALIZATION_Task+0x2e8>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	4b7b      	ldr	r3, [pc, #492]	; (80027dc <INITIALIZATION_Task+0x2f4>)
 80025ee:	edd3 6a00 	vldr	s13, [r3]
 80025f2:	eeb0 1a66 	vmov.f32	s2, s13
 80025f6:	eef0 0a47 	vmov.f32	s1, s14
 80025fa:	eeb0 0a67 	vmov.f32	s0, s15
 80025fe:	4878      	ldr	r0, [pc, #480]	; (80027e0 <INITIALIZATION_Task+0x2f8>)
 8002600:	f7ff f8d7 	bl	80017b2 <set_dob>
			set_rtob(&rtob1, k_T, J1, g_dis, 0.0129, 0.0003);
 8002604:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <INITIALIZATION_Task+0x2f0>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	4b71      	ldr	r3, [pc, #452]	; (80027d0 <INITIALIZATION_Task+0x2e8>)
 800260c:	ed93 7a00 	vldr	s14, [r3]
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <INITIALIZATION_Task+0x2f4>)
 8002612:	edd3 6a00 	vldr	s13, [r3]
 8002616:	ed9f 2a73 	vldr	s4, [pc, #460]	; 80027e4 <INITIALIZATION_Task+0x2fc>
 800261a:	eddf 1a73 	vldr	s3, [pc, #460]	; 80027e8 <INITIALIZATION_Task+0x300>
 800261e:	eeb0 1a66 	vmov.f32	s2, s13
 8002622:	eef0 0a47 	vmov.f32	s1, s14
 8002626:	eeb0 0a67 	vmov.f32	s0, s15
 800262a:	4870      	ldr	r0, [pc, #448]	; (80027ec <INITIALIZATION_Task+0x304>)
 800262c:	f002 ff6e 	bl	800550c <set_rtob>

			set_dob(&dob2, k_T, J1, g_dis); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , g_dis = 50
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <INITIALIZATION_Task+0x2f0>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	4b66      	ldr	r3, [pc, #408]	; (80027d0 <INITIALIZATION_Task+0x2e8>)
 8002638:	ed93 7a00 	vldr	s14, [r3]
 800263c:	4b67      	ldr	r3, [pc, #412]	; (80027dc <INITIALIZATION_Task+0x2f4>)
 800263e:	edd3 6a00 	vldr	s13, [r3]
 8002642:	eeb0 1a66 	vmov.f32	s2, s13
 8002646:	eef0 0a47 	vmov.f32	s1, s14
 800264a:	eeb0 0a67 	vmov.f32	s0, s15
 800264e:	4868      	ldr	r0, [pc, #416]	; (80027f0 <INITIALIZATION_Task+0x308>)
 8002650:	f7ff f8af 	bl	80017b2 <set_dob>
			set_rtob(&rtob2, k_T, J1, g_dis, 0.0129, 0.0003);
 8002654:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <INITIALIZATION_Task+0x2f0>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	4b5d      	ldr	r3, [pc, #372]	; (80027d0 <INITIALIZATION_Task+0x2e8>)
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <INITIALIZATION_Task+0x2f4>)
 8002662:	edd3 6a00 	vldr	s13, [r3]
 8002666:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 80027e4 <INITIALIZATION_Task+0x2fc>
 800266a:	eddf 1a5f 	vldr	s3, [pc, #380]	; 80027e8 <INITIALIZATION_Task+0x300>
 800266e:	eeb0 1a66 	vmov.f32	s2, s13
 8002672:	eef0 0a47 	vmov.f32	s1, s14
 8002676:	eeb0 0a67 	vmov.f32	s0, s15
 800267a:	485e      	ldr	r0, [pc, #376]	; (80027f4 <INITIALIZATION_Task+0x30c>)
 800267c:	f002 ff46 	bl	800550c <set_rtob>

			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_SET); // SD led
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002686:	484f      	ldr	r0, [pc, #316]	; (80027c4 <INITIALIZATION_Task+0x2dc>)
 8002688:	f003 fe80 	bl	800638c <HAL_GPIO_WritePin>
 800268c:	e005      	b.n	800269a <INITIALIZATION_Task+0x1b2>

		} else {
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET); // SD led
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002694:	484b      	ldr	r0, [pc, #300]	; (80027c4 <INITIALIZATION_Task+0x2dc>)
 8002696:	f003 fe79 	bl	800638c <HAL_GPIO_WritePin>

		}

		HAL_I2C_Master_Transmit(&hi2c3, 0, (uint8_t*) &dataToSend,
 800269a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800269e:	2364      	movs	r3, #100	; 0x64
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2304      	movs	r3, #4
 80026a4:	2100      	movs	r1, #0
 80026a6:	4854      	ldr	r0, [pc, #336]	; (80027f8 <INITIALIZATION_Task+0x310>)
 80026a8:	f003 ff4c 	bl	8006544 <HAL_I2C_Master_Transmit>
				sizeof(float), 100);

		dataToSend = T_Rec2*26.0;
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <INITIALIZATION_Task+0x314>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80026b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		xx = xx + 1;
 80026be:	4b50      	ldr	r3, [pc, #320]	; (8002800 <INITIALIZATION_Task+0x318>)
 80026c0:	edd3 7a00 	vldr	s15, [r3]
 80026c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026cc:	4b4c      	ldr	r3, [pc, #304]	; (8002800 <INITIALIZATION_Task+0x318>)
 80026ce:	edc3 7a00 	vstr	s15, [r3]

		uint32_t currentTime = HAL_GetTick();
 80026d2:	f003 fba9 	bl	8005e28 <HAL_GetTick>
 80026d6:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (currentTime - lastIndicatorSendTime >= 1000) {
 80026da:	4b4a      	ldr	r3, [pc, #296]	; (8002804 <INITIALIZATION_Task+0x31c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026e8:	d31a      	bcc.n	8002720 <INITIALIZATION_Task+0x238>

			ind.MasterSide = MST1;
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <INITIALIZATION_Task+0x2e0>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	67bb      	str	r3, [r7, #120]	; 0x78
			ind.exerciseMode = IsRo;
 80026f0:	4b32      	ldr	r3, [pc, #200]	; (80027bc <INITIALIZATION_Task+0x2d4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	677b      	str	r3, [r7, #116]	; 0x74
			ind.repetitions = xx;
 80026f6:	4b42      	ldr	r3, [pc, #264]	; (8002800 <INITIALIZATION_Task+0x318>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002700:	ee17 3a90 	vmov	r3, s15
 8002704:	67fb      	str	r3, [r7, #124]	; 0x7c

			HAL_I2C_Master_Transmit(&hi2c3, 0, (uint8_t*) &ind,
 8002706:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800270a:	2364      	movs	r3, #100	; 0x64
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	230c      	movs	r3, #12
 8002710:	2100      	movs	r1, #0
 8002712:	4839      	ldr	r0, [pc, #228]	; (80027f8 <INITIALIZATION_Task+0x310>)
 8002714:	f003 ff16 	bl	8006544 <HAL_I2C_Master_Transmit>
					sizeof(struct indicators), 100);

			lastIndicatorSendTime = currentTime;
 8002718:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <INITIALIZATION_Task+0x31c>)
 800271a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800271e:	6013      	str	r3, [r2, #0]
		}

		//HAL_I2C_Master_Transmit(&hi2c3, 0, data, 32, 10);
		HAL_StatusTypeDef I2Cstatus = HAL_I2C_Master_Receive(&hi2c3, 0,
 8002720:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002724:	2364      	movs	r3, #100	; 0x64
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	2324      	movs	r3, #36	; 0x24
 800272a:	2100      	movs	r1, #0
 800272c:	4832      	ldr	r0, [pc, #200]	; (80027f8 <INITIALIZATION_Task+0x310>)
 800272e:	f003 fffd 	bl	800672c <HAL_I2C_Master_Receive>
 8002732:	4603      	mov	r3, r0
 8002734:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
				I2cBuffer,
				DATA_SIZE, 100);

		memcpy(&delet, I2cBuffer, DATA_SIZE); // just to confirm
 8002738:	4b33      	ldr	r3, [pc, #204]	; (8002808 <INITIALIZATION_Task+0x320>)
 800273a:	461d      	mov	r5, r3
 800273c:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002748:	6823      	ldr	r3, [r4, #0]
 800274a:	602b      	str	r3, [r5, #0]

		if (I2Cstatus == HAL_OK) {
 800274c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 80af 	bne.w	80028b4 <INITIALIZATION_Task+0x3cc>

			struct user_metrics received_metrics;
			memcpy(&received_metrics, I2cBuffer, sizeof(struct user_metrics));
 8002756:	f107 0184 	add.w	r1, r7, #132	; 0x84
 800275a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800275e:	221c      	movs	r2, #28
 8002760:	4618      	mov	r0, r3
 8002762:	f00c ff7b 	bl	800f65c <memcpy>

			struct settings received_settings;
			memcpy(&received_settings, I2cBuffer + sizeof(struct user_metrics),
 8002766:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800276a:	331c      	adds	r3, #28
 800276c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8002770:	2208      	movs	r2, #8
 8002772:	4619      	mov	r1, r3
 8002774:	f00c ff72 	bl	800f65c <memcpy>
					sizeof(struct settings));

			weight = received_metrics.Weight;
 8002778:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800277a:	4a24      	ldr	r2, [pc, #144]	; (800280c <INITIALIZATION_Task+0x324>)
 800277c:	6013      	str	r3, [r2, #0]
			height = received_metrics.Height;
 800277e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <INITIALIZATION_Task+0x328>)
 8002782:	6013      	str	r3, [r2, #0]

			strncpy(gen, received_metrics.Gender, sizeof(gen) - 1);
 8002784:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002788:	3308      	adds	r3, #8
 800278a:	2206      	movs	r2, #6
 800278c:	4619      	mov	r1, r3
 800278e:	4821      	ldr	r0, [pc, #132]	; (8002814 <INITIALIZATION_Task+0x32c>)
 8002790:	f00c fe89 	bl	800f4a6 <strncpy>

			if (strcmp(gen, "male") == 0) {
 8002794:	4920      	ldr	r1, [pc, #128]	; (8002818 <INITIALIZATION_Task+0x330>)
 8002796:	481f      	ldr	r0, [pc, #124]	; (8002814 <INITIALIZATION_Task+0x32c>)
 8002798:	f7fd fd3a 	bl	8000210 <strcmp>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d13c      	bne.n	800281c <INITIALIZATION_Task+0x334>
				IsMale = 1;
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <INITIALIZATION_Task+0x2e4>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e03b      	b.n	8002822 <INITIALIZATION_Task+0x33a>
 80027aa:	bf00      	nop
 80027ac:	080116e0 	.word	0x080116e0
 80027b0:	40020000 	.word	0x40020000
 80027b4:	20001568 	.word	0x20001568
 80027b8:	40020400 	.word	0x40020400
 80027bc:	2000156a 	.word	0x2000156a
 80027c0:	40020800 	.word	0x40020800
 80027c4:	40021400 	.word	0x40021400
 80027c8:	20000041 	.word	0x20000041
 80027cc:	2000156c 	.word	0x2000156c
 80027d0:	200035f4 	.word	0x200035f4
 80027d4:	200035f8 	.word	0x200035f8
 80027d8:	20000034 	.word	0x20000034
 80027dc:	2000004c 	.word	0x2000004c
 80027e0:	200007e8 	.word	0x200007e8
 80027e4:	399d4952 	.word	0x399d4952
 80027e8:	3c535a86 	.word	0x3c535a86
 80027ec:	20000810 	.word	0x20000810
 80027f0:	200007fc 	.word	0x200007fc
 80027f4:	2000082c 	.word	0x2000082c
 80027f8:	20000390 	.word	0x20000390
 80027fc:	200008b4 	.word	0x200008b4
 8002800:	20003620 	.word	0x20003620
 8002804:	20003624 	.word	0x20003624
 8002808:	200035fc 	.word	0x200035fc
 800280c:	20000048 	.word	0x20000048
 8002810:	20000044 	.word	0x20000044
 8002814:	200035ec 	.word	0x200035ec
 8002818:	080116d8 	.word	0x080116d8
			} else {
				IsMale = 0;
 800281c:	4b28      	ldr	r3, [pc, #160]	; (80028c0 <INITIALIZATION_Task+0x3d8>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
			//g_dis = received_settings.g_dis;

			struct data_to_send confirmation_data;
			struct user_metrics sending_metrics;
			struct settings sending_settings;
			sending_metrics.Weight = weight;
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <INITIALIZATION_Task+0x3dc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
			sending_metrics.Height = height;
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <INITIALIZATION_Task+0x3e0>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	63bb      	str	r3, [r7, #56]	; 0x38

			strncpy(sending_metrics.Gender, received_metrics.Gender,
 800282e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002832:	f103 0108 	add.w	r1, r3, #8
 8002836:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800283a:	3308      	adds	r3, #8
 800283c:	2213      	movs	r2, #19
 800283e:	4618      	mov	r0, r3
 8002840:	f00c fe31 	bl	800f4a6 <strncpy>
					sizeof(sending_metrics.Gender) - 1);
			sending_metrics.Gender[sizeof(sending_metrics.Gender) - 1] = '\0';
 8002844:	2300      	movs	r3, #0
 8002846:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			sending_settings.K = k_s;
 800284a:	4b20      	ldr	r3, [pc, #128]	; (80028cc <INITIALIZATION_Task+0x3e4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
			//sending_settings.g_dis = cutoffFrequency;
			sending_settings.g_dis = g_dis;
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <INITIALIZATION_Task+0x3e8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	633b      	str	r3, [r7, #48]	; 0x30

			confirmation_data.metrics = sending_metrics;
 8002856:	f107 0408 	add.w	r4, r7, #8
 800285a:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800285e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002862:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			confirmation_data.settings = sending_settings;
 800286a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800286e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002872:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002876:	e883 0003 	stmia.w	r3, {r0, r1}

			// Send confirmation data back to ESP32
			HAL_StatusTypeDef send_status = HAL_I2C_Master_Transmit(&hi2c3, 0,
 800287a:	f107 0208 	add.w	r2, r7, #8
 800287e:	2364      	movs	r3, #100	; 0x64
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2324      	movs	r3, #36	; 0x24
 8002884:	2100      	movs	r1, #0
 8002886:	4813      	ldr	r0, [pc, #76]	; (80028d4 <INITIALIZATION_Task+0x3ec>)
 8002888:	f003 fe5c 	bl	8006544 <HAL_I2C_Master_Transmit>
 800288c:	4603      	mov	r3, r0
 800288e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
					(uint8_t*) &confirmation_data, sizeof(struct data_to_send),
					100);

			if (send_status == HAL_OK) {
 8002892:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <INITIALIZATION_Task+0x3c0>
				// Data sent successfully
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); // Turn on LED to indicate success
 800289a:	2201      	movs	r2, #1
 800289c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028a0:	480d      	ldr	r0, [pc, #52]	; (80028d8 <INITIALIZATION_Task+0x3f0>)
 80028a2:	f003 fd73 	bl	800638c <HAL_GPIO_WritePin>
 80028a6:	e005      	b.n	80028b4 <INITIALIZATION_Task+0x3cc>
			} else {
				// Failed to send data
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // Turn off LED to indicate failure
 80028a8:	2200      	movs	r2, #0
 80028aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028ae:	480a      	ldr	r0, [pc, #40]	; (80028d8 <INITIALIZATION_Task+0x3f0>)
 80028b0:	f003 fd6c 	bl	800638c <HAL_GPIO_WritePin>
			}
		} else {
		}
		vTaskDelay(1000);
 80028b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028b8:	f00b f9d2 	bl	800dc60 <vTaskDelay>
	while (1) {
 80028bc:	e622      	b.n	8002504 <INITIALIZATION_Task+0x1c>
 80028be:	bf00      	nop
 80028c0:	2000156c 	.word	0x2000156c
 80028c4:	20000048 	.word	0x20000048
 80028c8:	20000044 	.word	0x20000044
 80028cc:	20000008 	.word	0x20000008
 80028d0:	2000004c 	.word	0x2000004c
 80028d4:	20000390 	.word	0x20000390
 80028d8:	40020400 	.word	0x40020400

080028dc <BM_Task>:
		//vTaskSuspend(INITIALIZATION_Task_Hnadler);
	}

}

void BM_Task(void *argument) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	xLastWakeTime_BM = xTaskGetTickCount();
 80028e4:	f00b fb0c 	bl	800df00 <xTaskGetTickCount>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4a31      	ldr	r2, [pc, #196]	; (80029b0 <BM_Task+0xd4>)
 80028ec:	6013      	str	r3, [r2, #0]
	while (1) {
		//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, 1);
		//HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
		//Bimanual_MotorCtrl_M2(); // nearly 150us

		if (Mode == 1) {
 80028ee:	4b31      	ldr	r3, [pc, #196]	; (80029b4 <BM_Task+0xd8>)
 80028f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d150      	bne.n	800299a <BM_Task+0xbe>
			if (MST1) {
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <BM_Task+0xdc>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d026      	beq.n	800294e <BM_Task+0x72>
				set_pid_gain(&pid_instance_M1, Kp_M, Ki_M, Kd_M); // set gains
 8002900:	4b2e      	ldr	r3, [pc, #184]	; (80029bc <BM_Task+0xe0>)
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	4b2e      	ldr	r3, [pc, #184]	; (80029c0 <BM_Task+0xe4>)
 8002908:	ed93 7a00 	vldr	s14, [r3]
 800290c:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <BM_Task+0xe8>)
 800290e:	edd3 6a00 	vldr	s13, [r3]
 8002912:	eeb0 1a66 	vmov.f32	s2, s13
 8002916:	eef0 0a47 	vmov.f32	s1, s14
 800291a:	eeb0 0a67 	vmov.f32	s0, s15
 800291e:	482a      	ldr	r0, [pc, #168]	; (80029c8 <BM_Task+0xec>)
 8002920:	f002 fc91 	bl	8005246 <set_pid_gain>
				set_pid_gain(&pid_instance_M2, Kp_S, Ki_S, Kd_S); // set gains
 8002924:	4b29      	ldr	r3, [pc, #164]	; (80029cc <BM_Task+0xf0>)
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <BM_Task+0xf4>)
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	4b28      	ldr	r3, [pc, #160]	; (80029d4 <BM_Task+0xf8>)
 8002932:	edd3 6a00 	vldr	s13, [r3]
 8002936:	eeb0 1a66 	vmov.f32	s2, s13
 800293a:	eef0 0a47 	vmov.f32	s1, s14
 800293e:	eeb0 0a67 	vmov.f32	s0, s15
 8002942:	4825      	ldr	r0, [pc, #148]	; (80029d8 <BM_Task+0xfc>)
 8002944:	f002 fc7f 	bl	8005246 <set_pid_gain>
				Bimanual_MotorCtrl_M1(); // nearly 150us
 8002948:	f000 ff56 	bl	80037f8 <Bimanual_MotorCtrl_M1>
 800294c:	e025      	b.n	800299a <BM_Task+0xbe>

			} else {
				set_pid_gain(&pid_instance_M1, Kp_S, Ki_S, Kd_S); // set gains
 800294e:	4b1f      	ldr	r3, [pc, #124]	; (80029cc <BM_Task+0xf0>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <BM_Task+0xf4>)
 8002956:	ed93 7a00 	vldr	s14, [r3]
 800295a:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <BM_Task+0xf8>)
 800295c:	edd3 6a00 	vldr	s13, [r3]
 8002960:	eeb0 1a66 	vmov.f32	s2, s13
 8002964:	eef0 0a47 	vmov.f32	s1, s14
 8002968:	eeb0 0a67 	vmov.f32	s0, s15
 800296c:	4816      	ldr	r0, [pc, #88]	; (80029c8 <BM_Task+0xec>)
 800296e:	f002 fc6a 	bl	8005246 <set_pid_gain>
				set_pid_gain(&pid_instance_M2, Kp_M, Ki_M, Kd_M); // set gains
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <BM_Task+0xe0>)
 8002974:	edd3 7a00 	vldr	s15, [r3]
 8002978:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <BM_Task+0xe4>)
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <BM_Task+0xe8>)
 8002980:	edd3 6a00 	vldr	s13, [r3]
 8002984:	eeb0 1a66 	vmov.f32	s2, s13
 8002988:	eef0 0a47 	vmov.f32	s1, s14
 800298c:	eeb0 0a67 	vmov.f32	s0, s15
 8002990:	4811      	ldr	r0, [pc, #68]	; (80029d8 <BM_Task+0xfc>)
 8002992:	f002 fc58 	bl	8005246 <set_pid_gain>
				Bimanual_MotorCtrl_M2(); // nearly 150us
 8002996:	f001 fb2f 	bl	8003ff8 <Bimanual_MotorCtrl_M2>

			}
		}

		if (Mode == 2) {
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <BM_Task+0xd8>)
 800299c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d101      	bne.n	80029a8 <BM_Task+0xcc>
			Profile_Record(); // nearly 150us
 80029a4:	f000 fcd0 	bl	8003348 <Profile_Record>
		}

		//vTaskDelayUntil(&xLastWakeTime_BM, xFrequency);
		//vTaskDelayUntil(&xLastWakeTime_BM, MS_TO_TICKS(5)); // 1 kHz
		vTaskDelay(5);
 80029a8:	2005      	movs	r0, #5
 80029aa:	f00b f959 	bl	800dc60 <vTaskDelay>
		if (Mode == 1) {
 80029ae:	e79e      	b.n	80028ee <BM_Task+0x12>
 80029b0:	200035e4 	.word	0x200035e4
 80029b4:	20001568 	.word	0x20001568
 80029b8:	20000041 	.word	0x20000041
 80029bc:	20000014 	.word	0x20000014
 80029c0:	20000018 	.word	0x20000018
 80029c4:	2000001c 	.word	0x2000001c
 80029c8:	20000610 	.word	0x20000610
 80029cc:	20000020 	.word	0x20000020
 80029d0:	20000024 	.word	0x20000024
 80029d4:	20000028 	.word	0x20000028
 80029d8:	20000628 	.word	0x20000628

080029dc <WriteToSD>:

	}

}

void WriteToSD(float DATA1[], float DATA2[], uint32_t size, char fileName[]) {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0a0      	sub	sp, #128	; 0x80
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
	if (f_open(&fil, fileName,
 80029ea:	2233      	movs	r2, #51	; 0x33
 80029ec:	6839      	ldr	r1, [r7, #0]
 80029ee:	481e      	ldr	r0, [pc, #120]	; (8002a68 <WriteToSD+0x8c>)
 80029f0:	f009 fa66 	bl	800bec0 <f_open>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d131      	bne.n	8002a5e <WriteToSD+0x82>
	FA_OPEN_ALWAYS | FA_READ | FA_WRITE | FA_OPEN_APPEND) == FR_OK) {
		char buffer[100];
		for (int i = 0; i < size; i++) {
 80029fa:	2300      	movs	r3, #0
 80029fc:	677b      	str	r3, [r7, #116]	; 0x74
 80029fe:	e027      	b.n	8002a50 <WriteToSD+0x74>
			// Format the string with floating-point values
			snprintf(buffer, sizeof(buffer), "%d, %d\n", (int) DATA1[i],
 8002a00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	edd3 7a00 	vldr	s15, [r3]
 8002a0c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int) (DATA2[i] * 1000));
 8002a10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4413      	add	r3, r2
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002a6c <WriteToSD+0x90>
 8002a20:	ee67 7a87 	vmul.f32	s15, s15, s14
			snprintf(buffer, sizeof(buffer), "%d, %d\n", (int) DATA1[i],
 8002a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a28:	ee17 3a90 	vmov	r3, s15
 8002a2c:	f107 0010 	add.w	r0, r7, #16
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	ee16 3a90 	vmov	r3, s13
 8002a36:	4a0e      	ldr	r2, [pc, #56]	; (8002a70 <WriteToSD+0x94>)
 8002a38:	2164      	movs	r1, #100	; 0x64
 8002a3a:	f00c fcb5 	bl	800f3a8 <sniprintf>
			// Write the string to the file
			f_puts(buffer, &fil);
 8002a3e:	f107 0310 	add.w	r3, r7, #16
 8002a42:	4909      	ldr	r1, [pc, #36]	; (8002a68 <WriteToSD+0x8c>)
 8002a44:	4618      	mov	r0, r3
 8002a46:	f009 ff00 	bl	800c84a <f_puts>
		for (int i = 0; i < size; i++) {
 8002a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	677b      	str	r3, [r7, #116]	; 0x74
 8002a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d8d3      	bhi.n	8002a00 <WriteToSD+0x24>
		}
		// Close the file
		f_close(&fil);
 8002a58:	4803      	ldr	r0, [pc, #12]	; (8002a68 <WriteToSD+0x8c>)
 8002a5a:	f009 fe50 	bl	800c6fe <f_close>
	}
}
 8002a5e:	bf00      	nop
 8002a60:	3778      	adds	r7, #120	; 0x78
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200025b0 	.word	0x200025b0
 8002a6c:	447a0000 	.word	0x447a0000
 8002a70:	080116ec 	.word	0x080116ec

08002a74 <_write>:

/********************* Custom write function for ITM interface ****************************/

int _write(int file, char *ptr, int len) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
	int i;
	for (i = 0; i < len; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e009      	b.n	8002a9a <_write+0x26>
		ITM_SendChar((*ptr++));
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fc0c 	bl	80022ac <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	dbf1      	blt.n	8002a86 <_write+0x12>
	}
	return len;
 8002aa2:	687b      	ldr	r3, [r7, #4]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_GPIO_EXTI_Callback>:
		buffer[i] = '\0';
}

/******************** Interrupt for user button to toggle the outputs **********************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	80fb      	strh	r3, [r7, #6]

	currentMillis = HAL_GetTick();
 8002ab6:	f003 f9b7 	bl	8005e28 <HAL_GetTick>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002abe:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_13 && (currentMillis - previousMillis > 150)) {
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	d116      	bne.n	8002af6 <HAL_GPIO_EXTI_Callback+0x4a>
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b96      	cmp	r3, #150	; 0x96
 8002ad4:	d90f      	bls.n	8002af6 <HAL_GPIO_EXTI_Callback+0x4a>

		// User Button was pressed
		previousMillis = currentMillis;
 8002ad6:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002adc:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7); // blue LED
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	4816      	ldr	r0, [pc, #88]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x90>)
 8002ae2:	f003 fc6c 	bl	80063be <HAL_GPIO_TogglePin>
		Enable ^= GPIO_PIN_SET; //Toggle the state
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	f083 0301 	eor.w	r3, r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8002af2:	701a      	strb	r2, [r3, #0]
		// External Button 2 was pressed PE14
		previousMillis = currentMillis;
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // M_Driver1_Enable
		Enable ^= GPIO_PIN_SET; //Toggle the state
	}
}
 8002af4:	e01a      	b.n	8002b2c <HAL_GPIO_EXTI_Callback+0x80>
	else if (GPIO_Pin == GPIO_PIN_14
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afc:	d116      	bne.n	8002b2c <HAL_GPIO_EXTI_Callback+0x80>
	&& (currentMillis - previousMillis > 150)) {
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b96      	cmp	r3, #150	; 0x96
 8002b0a:	d90f      	bls.n	8002b2c <HAL_GPIO_EXTI_Callback+0x80>
		previousMillis = currentMillis;
 8002b0c:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002b12:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8); // M_Driver1_Enable
 8002b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b18:	480a      	ldr	r0, [pc, #40]	; (8002b44 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b1a:	f003 fc50 	bl	80063be <HAL_GPIO_TogglePin>
		Enable ^= GPIO_PIN_SET; //Toggle the state
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8002b2a:	701a      	strb	r2, [r3, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20001564 	.word	0x20001564
 8002b38:	20001560 	.word	0x20001560
 8002b3c:	40020400 	.word	0x40020400
 8002b40:	20000040 	.word	0x20000040
 8002b44:	40021000 	.word	0x40021000

08002b48 <findJ>:

float findJ(bool i) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b087      	sub	sp, #28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
	float FAJ = weight * FAweight[i] * (height * FAlen[i] * FArog[i])
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	4a81      	ldr	r2, [pc, #516]	; (8002d5c <findJ+0x214>)
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4b80      	ldr	r3, [pc, #512]	; (8002d60 <findJ+0x218>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	4a7e      	ldr	r2, [pc, #504]	; (8002d64 <findJ+0x21c>)
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	edd3 6a00 	vldr	s13, [r3]
 8002b74:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <findJ+0x220>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	4a7a      	ldr	r2, [pc, #488]	; (8002d6c <findJ+0x224>)
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
			* (height * FAlen[i] * FArog[i]);
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	4a73      	ldr	r2, [pc, #460]	; (8002d64 <findJ+0x21c>)
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	edd3 6a00 	vldr	s13, [r3]
 8002b9e:	4b72      	ldr	r3, [pc, #456]	; (8002d68 <findJ+0x220>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4a70      	ldr	r2, [pc, #448]	; (8002d6c <findJ+0x224>)
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	edd3 7a00 	vldr	s15, [r3]
 8002bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float FAJ = weight * FAweight[i] * (height * FAlen[i] * FArog[i])
 8002bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbc:	edc7 7a05 	vstr	s15, [r7, #20]
	float HAJ1 = weight * HAweight[i] * (height * HAlen[i] * HArog[i])
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a6b      	ldr	r2, [pc, #428]	; (8002d70 <findJ+0x228>)
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	4b64      	ldr	r3, [pc, #400]	; (8002d60 <findJ+0x218>)
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	4a66      	ldr	r2, [pc, #408]	; (8002d74 <findJ+0x22c>)
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	edd3 6a00 	vldr	s13, [r3]
 8002be2:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <findJ+0x220>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	4a62      	ldr	r2, [pc, #392]	; (8002d78 <findJ+0x230>)
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
			* (height * HAlen[i] * HArog[i]);
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4a5c      	ldr	r2, [pc, #368]	; (8002d74 <findJ+0x22c>)
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	edd3 6a00 	vldr	s13, [r3]
 8002c0c:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <findJ+0x220>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <findJ+0x230>)
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float HAJ1 = weight * HAweight[i] * (height * HAlen[i] * HArog[i])
 8002c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2a:	edc7 7a04 	vstr	s15, [r7, #16]

	float HAJ = HAJ1
			+ (weight * HAweight[i])
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <findJ+0x228>)
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	ed93 7a00 	vldr	s14, [r3]
 8002c3a:	4b49      	ldr	r3, [pc, #292]	; (8002d60 <findJ+0x218>)
 8002c3c:	edd3 7a00 	vldr	s15, [r3]
 8002c40:	ee27 7a27 	vmul.f32	s14, s14, s15
					* ((height * (FAlen[i] + HAlen[i] * HAcog[i]))
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	4a47      	ldr	r2, [pc, #284]	; (8002d64 <findJ+0x21c>)
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	edd3 6a00 	vldr	s13, [r3]
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <findJ+0x22c>)
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	ed93 6a00 	vldr	s12, [r3]
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	4a47      	ldr	r2, [pc, #284]	; (8002d7c <findJ+0x234>)
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c70:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <findJ+0x220>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee66 6aa7 	vmul.f32	s13, s13, s15
							* (height * (FAlen[i] + HAlen[i] * HAcog[i]))
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	4a39      	ldr	r2, [pc, #228]	; (8002d64 <findJ+0x21c>)
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	ed93 6a00 	vldr	s12, [r3]
 8002c86:	79fb      	ldrb	r3, [r7, #7]
 8002c88:	4a3a      	ldr	r2, [pc, #232]	; (8002d74 <findJ+0x22c>)
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	edd3 5a00 	vldr	s11, [r3]
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	4a39      	ldr	r2, [pc, #228]	; (8002d7c <findJ+0x234>)
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002ca2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002ca6:	4b30      	ldr	r3, [pc, #192]	; (8002d68 <findJ+0x220>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002cb0:	ee66 6aa7 	vmul.f32	s13, s13, s15
							- (height * HAlen[i] * HAcog[i])
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <findJ+0x22c>)
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	ed93 6a00 	vldr	s12, [r3]
 8002cc0:	4b29      	ldr	r3, [pc, #164]	; (8002d68 <findJ+0x220>)
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	4a2b      	ldr	r2, [pc, #172]	; (8002d7c <findJ+0x234>)
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	ee26 6a27 	vmul.f32	s12, s12, s15
									* (height * HAlen[i] * HAcog[i]));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	4a25      	ldr	r2, [pc, #148]	; (8002d74 <findJ+0x22c>)
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	edd3 5a00 	vldr	s11, [r3]
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <findJ+0x220>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <findJ+0x234>)
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002d00:	ee66 7a27 	vmul.f32	s15, s12, s15
							- (height * HAlen[i] * HAcog[i])
 8002d04:	ee76 7ae7 	vsub.f32	s15, s13, s15
					* ((height * (FAlen[i] + HAlen[i] * HAcog[i]))
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
	float HAJ = HAJ1
 8002d0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d14:	edc7 7a03 	vstr	s15, [r7, #12]

	return (FAJ + HAJ + J_Ro) / (gear_ratio * gear_ratio) + J_M;
 8002d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <findJ+0x238>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <findJ+0x23c>)
 8002d30:	ed93 7a00 	vldr	s14, [r3]
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <findJ+0x23c>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <findJ+0x240>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	080117b4 	.word	0x080117b4
 8002d60:	20000048 	.word	0x20000048
 8002d64:	080117c4 	.word	0x080117c4
 8002d68:	20000044 	.word	0x20000044
 8002d6c:	080117d4 	.word	0x080117d4
 8002d70:	080117bc 	.word	0x080117bc
 8002d74:	080117cc 	.word	0x080117cc
 8002d78:	080117dc 	.word	0x080117dc
 8002d7c:	080117e4 	.word	0x080117e4
 8002d80:	20001574 	.word	0x20001574
 8002d84:	20000030 	.word	0x20000030
 8002d88:	20000038 	.word	0x20000038

08002d8c <findG>:

float findG(bool i) {	// pos = angle from horizontal
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	71fb      	strb	r3, [r7, #7]
	float w = FAweight[i] + HAweight[i];
 8002d96:	79fb      	ldrb	r3, [r7, #7]
 8002d98:	4a38      	ldr	r2, [pc, #224]	; (8002e7c <findG+0xf0>)
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	ed93 7a00 	vldr	s14, [r3]
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <findG+0xf4>)
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	edd3 7a00 	vldr	s15, [r3]
 8002dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db2:	edc7 7a05 	vstr	s15, [r7, #20]
	float TFA = FAweight[i] * FAlen[i] * HAcog[i];
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <findG+0xf0>)
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	ed93 7a00 	vldr	s14, [r3]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4a2f      	ldr	r2, [pc, #188]	; (8002e84 <findG+0xf8>)
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd2:	79fb      	ldrb	r3, [r7, #7]
 8002dd4:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <findG+0xfc>)
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	edd3 7a00 	vldr	s15, [r3]
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a04 	vstr	s15, [r7, #16]
	float THA = HAweight[i] * (HAlen[i] * HAcog[i] + FAlen[i]);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <findG+0xf4>)
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	ed93 7a00 	vldr	s14, [r3]
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4a25      	ldr	r2, [pc, #148]	; (8002e8c <findG+0x100>)
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	edd3 6a00 	vldr	s13, [r3]
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <findG+0xfc>)
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	edd3 7a00 	vldr	s15, [r3]
 8002e0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <findG+0xf8>)
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e22:	edc7 7a03 	vstr	s15, [r7, #12]

	return w * weight * g * (height * (TFA + THA) / w) + RoWeight * RoCOG;
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <findG+0x104>)
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002e94 <findG+0x108>
 8002e38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e3c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002e40:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e44:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <findG+0x10c>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002e52:	edd7 6a05 	vldr	s13, [r7, #20]
 8002e56:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e5e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8002e62:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002e9c <findG+0x110>
 8002e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	080117b4 	.word	0x080117b4
 8002e80:	080117bc 	.word	0x080117bc
 8002e84:	080117c4 	.word	0x080117c4
 8002e88:	080117e4 	.word	0x080117e4
 8002e8c:	080117cc 	.word	0x080117cc
 8002e90:	20000048 	.word	0x20000048
 8002e94:	411cf5c3 	.word	0x411cf5c3
 8002e98:	20000044 	.word	0x20000044
 8002e9c:	3ca3d70a 	.word	0x3ca3d70a

08002ea0 <torque_profile>:

float torque_profile(float position, bool IsRo, bool IsDown) {
 8002ea0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	ed87 0a01 	vstr	s0, [r7, #4]
 8002eac:	4603      	mov	r3, r0
 8002eae:	460a      	mov	r2, r1
 8002eb0:	70fb      	strb	r3, [r7, #3]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	70bb      	strb	r3, [r7, #2]
	if (IsRo) {
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80ce 	beq.w	800305a <torque_profile+0x1ba>
		if (!IsDown) {
 8002ebe:	78bb      	ldrb	r3, [r7, #2]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d063      	beq.n	8002f92 <torque_profile+0xf2>
			return -0.00006 * position * position * position
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fb6c 	bl	80005a8 <__aeabi_f2d>
 8002ed0:	a3cd      	add	r3, pc, #820	; (adr r3, 8003208 <torque_profile+0x368>)
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	f7fd fbbf 	bl	8000658 <__aeabi_dmul>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4614      	mov	r4, r2
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fd fb60 	bl	80005a8 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4620      	mov	r0, r4
 8002eee:	4629      	mov	r1, r5
 8002ef0:	f7fd fbb2 	bl	8000658 <__aeabi_dmul>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7fd fb53 	bl	80005a8 <__aeabi_f2d>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4620      	mov	r0, r4
 8002f08:	4629      	mov	r1, r5
 8002f0a:	f7fd fba5 	bl	8000658 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4614      	mov	r4, r2
 8002f14:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd fb46 	bl	80005a8 <__aeabi_f2d>
 8002f1c:	a3bc      	add	r3, pc, #752	; (adr r3, 8003210 <torque_profile+0x370>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb99 	bl	8000658 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7fd fb3a 	bl	80005a8 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	f7fd fb8c 	bl	8000658 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4620      	mov	r0, r4
 8002f46:	4629      	mov	r1, r5
 8002f48:	f7fd f9d0 	bl	80002ec <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4614      	mov	r4, r2
 8002f52:	461d      	mov	r5, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7fd fb27 	bl	80005a8 <__aeabi_f2d>
 8002f5a:	a3af      	add	r3, pc, #700	; (adr r3, 8003218 <torque_profile+0x378>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fb7a 	bl	8000658 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd f9be 	bl	80002ec <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	a3a9      	add	r3, pc, #676	; (adr r3, 8003220 <torque_profile+0x380>)
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f7fd f9b5 	bl	80002ec <__adddf3>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f7fd fe27 	bl	8000bdc <__aeabi_d2f>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	e130      	b.n	80031f4 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fb08 	bl	80005a8 <__aeabi_f2d>
 8002f98:	a3a3      	add	r3, pc, #652	; (adr r3, 8003228 <torque_profile+0x388>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fb5b 	bl	8000658 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4614      	mov	r4, r2
 8002fa8:	461d      	mov	r5, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fafc 	bl	80005a8 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	f7fd fb4e 	bl	8000658 <__aeabi_dmul>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4614      	mov	r4, r2
 8002fc2:	461d      	mov	r5, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f7fd faef 	bl	80005a8 <__aeabi_f2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4620      	mov	r0, r4
 8002fd0:	4629      	mov	r1, r5
 8002fd2:	f7fd fb41 	bl	8000658 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd fae2 	bl	80005a8 <__aeabi_f2d>
 8002fe4:	a392      	add	r3, pc, #584	; (adr r3, 8003230 <torque_profile+0x390>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fb35 	bl	8000658 <__aeabi_dmul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4690      	mov	r8, r2
 8002ff4:	4699      	mov	r9, r3
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fad6 	bl	80005a8 <__aeabi_f2d>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4640      	mov	r0, r8
 8003002:	4649      	mov	r1, r9
 8003004:	f7fd fb28 	bl	8000658 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f96c 	bl	80002ec <__adddf3>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4614      	mov	r4, r2
 800301a:	461d      	mov	r5, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fac3 	bl	80005a8 <__aeabi_f2d>
 8003022:	a385      	add	r3, pc, #532	; (adr r3, 8003238 <torque_profile+0x398>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd fb16 	bl	8000658 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4620      	mov	r0, r4
 8003032:	4629      	mov	r1, r5
 8003034:	f7fd f95a 	bl	80002ec <__adddf3>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4610      	mov	r0, r2
 800303e:	4619      	mov	r1, r3
 8003040:	a37f      	add	r3, pc, #508	; (adr r3, 8003240 <torque_profile+0x3a0>)
 8003042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003046:	f7fd f951 	bl	80002ec <__adddf3>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fdc3 	bl	8000bdc <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	e0cc      	b.n	80031f4 <torque_profile+0x354>
		}
	} else {
		if (!IsDown) {
 800305a:	78bb      	ldrb	r3, [r7, #2]
 800305c:	f083 0301 	eor.w	r3, r3, #1
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <torque_profile+0x28e>
			return -0.00006 * position * position * position
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd fa9e 	bl	80005a8 <__aeabi_f2d>
 800306c:	a366      	add	r3, pc, #408	; (adr r3, 8003208 <torque_profile+0x368>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd faf1 	bl	8000658 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4614      	mov	r4, r2
 800307c:	461d      	mov	r5, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fa92 	bl	80005a8 <__aeabi_f2d>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4620      	mov	r0, r4
 800308a:	4629      	mov	r1, r5
 800308c:	f7fd fae4 	bl	8000658 <__aeabi_dmul>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4614      	mov	r4, r2
 8003096:	461d      	mov	r5, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fa85 	bl	80005a8 <__aeabi_f2d>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4620      	mov	r0, r4
 80030a4:	4629      	mov	r1, r5
 80030a6:	f7fd fad7 	bl	8000658 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4614      	mov	r4, r2
 80030b0:	461d      	mov	r5, r3
					+ 0.0045 * position * position + 0.3899 * position + 65.208;
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fd fa78 	bl	80005a8 <__aeabi_f2d>
 80030b8:	a355      	add	r3, pc, #340	; (adr r3, 8003210 <torque_profile+0x370>)
 80030ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030be:	f7fd facb 	bl	8000658 <__aeabi_dmul>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4690      	mov	r8, r2
 80030c8:	4699      	mov	r9, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7fd fa6c 	bl	80005a8 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4640      	mov	r0, r8
 80030d6:	4649      	mov	r1, r9
 80030d8:	f7fd fabe 	bl	8000658 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4620      	mov	r0, r4
 80030e2:	4629      	mov	r1, r5
 80030e4:	f7fd f902 	bl	80002ec <__adddf3>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4614      	mov	r4, r2
 80030ee:	461d      	mov	r5, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fa59 	bl	80005a8 <__aeabi_f2d>
 80030f6:	a348      	add	r3, pc, #288	; (adr r3, 8003218 <torque_profile+0x378>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd faac 	bl	8000658 <__aeabi_dmul>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4620      	mov	r0, r4
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd f8f0 	bl	80002ec <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	a342      	add	r3, pc, #264	; (adr r3, 8003220 <torque_profile+0x380>)
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	f7fd f8e7 	bl	80002ec <__adddf3>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd59 	bl	8000bdc <__aeabi_d2f>
 800312a:	4603      	mov	r3, r0
 800312c:	e062      	b.n	80031f4 <torque_profile+0x354>
		} else {
			return 0.00002 * position * position * position
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fa3a 	bl	80005a8 <__aeabi_f2d>
 8003134:	a33c      	add	r3, pc, #240	; (adr r3, 8003228 <torque_profile+0x388>)
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f7fd fa8d 	bl	8000658 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4614      	mov	r4, r2
 8003144:	461d      	mov	r5, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fa2e 	bl	80005a8 <__aeabi_f2d>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4620      	mov	r0, r4
 8003152:	4629      	mov	r1, r5
 8003154:	f7fd fa80 	bl	8000658 <__aeabi_dmul>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7fd fa21 	bl	80005a8 <__aeabi_f2d>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd fa73 	bl	8000658 <__aeabi_dmul>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4614      	mov	r4, r2
 8003178:	461d      	mov	r5, r3
					+ 0.0161 * position * position + 1.708 * position + 68.921;
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fa14 	bl	80005a8 <__aeabi_f2d>
 8003180:	a32b      	add	r3, pc, #172	; (adr r3, 8003230 <torque_profile+0x390>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	f7fd fa67 	bl	8000658 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fa08 	bl	80005a8 <__aeabi_f2d>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4640      	mov	r0, r8
 800319e:	4649      	mov	r1, r9
 80031a0:	f7fd fa5a 	bl	8000658 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4620      	mov	r0, r4
 80031aa:	4629      	mov	r1, r5
 80031ac:	f7fd f89e 	bl	80002ec <__adddf3>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7fd f9f5 	bl	80005a8 <__aeabi_f2d>
 80031be:	a31e      	add	r3, pc, #120	; (adr r3, 8003238 <torque_profile+0x398>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fa48 	bl	8000658 <__aeabi_dmul>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4620      	mov	r0, r4
 80031ce:	4629      	mov	r1, r5
 80031d0:	f7fd f88c 	bl	80002ec <__adddf3>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4610      	mov	r0, r2
 80031da:	4619      	mov	r1, r3
 80031dc:	a318      	add	r3, pc, #96	; (adr r3, 8003240 <torque_profile+0x3a0>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd f883 	bl	80002ec <__adddf3>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4610      	mov	r0, r2
 80031ec:	4619      	mov	r1, r3
 80031ee:	f7fd fcf5 	bl	8000bdc <__aeabi_d2f>
 80031f2:	4603      	mov	r3, r0
		}
	}
}
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eeb0 0a67 	vmov.f32	s0, s15
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003204:	f3af 8000 	nop.w
 8003208:	4d551d69 	.word	0x4d551d69
 800320c:	bf0f7510 	.word	0xbf0f7510
 8003210:	8d4fdf3b 	.word	0x8d4fdf3b
 8003214:	3f726e97 	.word	0x3f726e97
 8003218:	212d7732 	.word	0x212d7732
 800321c:	3fd8f41f 	.word	0x3fd8f41f
 8003220:	df3b645a 	.word	0xdf3b645a
 8003224:	40504d4f 	.word	0x40504d4f
 8003228:	88e368f1 	.word	0x88e368f1
 800322c:	3ef4f8b5 	.word	0x3ef4f8b5
 8003230:	b5dcc63f 	.word	0xb5dcc63f
 8003234:	3f907c84 	.word	0x3f907c84
 8003238:	ced91687 	.word	0xced91687
 800323c:	3ffb53f7 	.word	0x3ffb53f7
 8003240:	a9fbe76d 	.word	0xa9fbe76d
 8003244:	40513af1 	.word	0x40513af1

08003248 <T_gravity>:

float T_gravity(float position, bool IsDown, float G, bool IsRo) {
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003252:	4603      	mov	r3, r0
 8003254:	edc7 0a01 	vstr	s1, [r7, #4]
 8003258:	460a      	mov	r2, r1
 800325a:	72fb      	strb	r3, [r7, #11]
 800325c:	4613      	mov	r3, r2
 800325e:	72bb      	strb	r3, [r7, #10]

//float k_angle = 1; // coefficient to determine the angle, this would be a cos function
	position = 90 - position;
 8003260:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003340 <T_gravity+0xf8>
 8003264:	edd7 7a03 	vldr	s15, [r7, #12]
 8003268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (IsRo) {
 8003270:	7abb      	ldrb	r3, [r7, #10]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <T_gravity+0x34>
		return 0;
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e059      	b.n	8003330 <T_gravity+0xe8>
	} else {
		if (IsDown) {
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <T_gravity+0x8c>
			return G * cos(position) * G;
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd f990 	bl	80005a8 <__aeabi_f2d>
 8003288:	4604      	mov	r4, r0
 800328a:	460d      	mov	r5, r1
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7fd f98b 	bl	80005a8 <__aeabi_f2d>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	ec43 2b10 	vmov	d0, r2, r3
 800329a:	f00d f9bd 	bl	8010618 <cos>
 800329e:	ec53 2b10 	vmov	r2, r3, d0
 80032a2:	4620      	mov	r0, r4
 80032a4:	4629      	mov	r1, r5
 80032a6:	f7fd f9d7 	bl	8000658 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4614      	mov	r4, r2
 80032b0:	461d      	mov	r5, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fd f978 	bl	80005a8 <__aeabi_f2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fd f9ca 	bl	8000658 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fd fc86 	bl	8000bdc <__aeabi_d2f>
 80032d0:	4603      	mov	r3, r0
 80032d2:	e02d      	b.n	8003330 <T_gravity+0xe8>
		} else {
			return -G * cos(position) * G;
 80032d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d8:	eef1 7a67 	vneg.f32	s15, s15
 80032dc:	ee17 3a90 	vmov	r3, s15
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd f961 	bl	80005a8 <__aeabi_f2d>
 80032e6:	4604      	mov	r4, r0
 80032e8:	460d      	mov	r5, r1
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7fd f95c 	bl	80005a8 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	ec43 2b10 	vmov	d0, r2, r3
 80032f8:	f00d f98e 	bl	8010618 <cos>
 80032fc:	ec53 2b10 	vmov	r2, r3, d0
 8003300:	4620      	mov	r0, r4
 8003302:	4629      	mov	r1, r5
 8003304:	f7fd f9a8 	bl	8000658 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4614      	mov	r4, r2
 800330e:	461d      	mov	r5, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd f949 	bl	80005a8 <__aeabi_f2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd f99b 	bl	8000658 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	f7fd fc57 	bl	8000bdc <__aeabi_d2f>
 800332e:	4603      	mov	r3, r0
		}

	}
}
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eeb0 0a67 	vmov.f32	s0, s15
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	bf00      	nop
 8003340:	42b40000 	.word	0x42b40000
 8003344:	00000000 	.word	0x00000000

08003348 <Profile_Record>:

void Profile_Record(void) {
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	af00      	add	r7, sp, #0

	update_encoder(&enc_instance_M1, &htim1); // update the encoder1
 800334c:	490a      	ldr	r1, [pc, #40]	; (8003378 <Profile_Record+0x30>)
 800334e:	480b      	ldr	r0, [pc, #44]	; (800337c <Profile_Record+0x34>)
 8003350:	f002 f832 	bl	80053b8 <update_encoder>
	update_encoder(&enc_instance_M2, &htim4);
 8003354:	490a      	ldr	r1, [pc, #40]	; (8003380 <Profile_Record+0x38>)
 8003356:	480b      	ldr	r0, [pc, #44]	; (8003384 <Profile_Record+0x3c>)
 8003358:	f002 f82e 	bl	80053b8 <update_encoder>

	if (motor1_vel > 0.5) {
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <Profile_Record+0x40>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dd0f      	ble.n	8003390 <Profile_Record+0x48>
		IsDown = 1;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <Profile_Record+0x44>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
 8003376:	e018      	b.n	80033aa <Profile_Record+0x62>
 8003378:	20000448 	.word	0x20000448
 800337c:	200005f0 	.word	0x200005f0
 8003380:	20000494 	.word	0x20000494
 8003384:	20000600 	.word	0x20000600
 8003388:	2000087c 	.word	0x2000087c
 800338c:	2000156b 	.word	0x2000156b
	} else if (motor1_vel < -0.5) {
 8003390:	4bc3      	ldr	r3, [pc, #780]	; (80036a0 <Profile_Record+0x358>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800339a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d502      	bpl.n	80033aa <Profile_Record+0x62>
		IsDown = 0;
 80033a4:	4bbf      	ldr	r3, [pc, #764]	; (80036a4 <Profile_Record+0x35c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
	}

	if (IsDown) {
 80033aa:	4bbe      	ldr	r3, [pc, #760]	; (80036a4 <Profile_Record+0x35c>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00f      	beq.n	80033d2 <Profile_Record+0x8a>

		motor1_vel = -motor1_vel;
 80033b2:	4bbb      	ldr	r3, [pc, #748]	; (80036a0 <Profile_Record+0x358>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	eef1 7a67 	vneg.f32	s15, s15
 80033bc:	4bb8      	ldr	r3, [pc, #736]	; (80036a0 <Profile_Record+0x358>)
 80033be:	edc3 7a00 	vstr	s15, [r3]
		motor2_vel = -motor2_vel;
 80033c2:	4bb9      	ldr	r3, [pc, #740]	; (80036a8 <Profile_Record+0x360>)
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	eef1 7a67 	vneg.f32	s15, s15
 80033cc:	4bb6      	ldr	r3, [pc, #728]	; (80036a8 <Profile_Record+0x360>)
 80033ce:	edc3 7a00 	vstr	s15, [r3]

	}

	motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 80033d2:	4bb6      	ldr	r3, [pc, #728]	; (80036ac <Profile_Record+0x364>)
 80033d4:	ed93 7a00 	vldr	s14, [r3]
 80033d8:	4bb5      	ldr	r3, [pc, #724]	; (80036b0 <Profile_Record+0x368>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	4baf      	ldr	r3, [pc, #700]	; (80036a0 <Profile_Record+0x358>)
 80033e4:	edc3 7a00 	vstr	s15, [r3]
	motor2_vel = -enc_instance_M2.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 80033e8:	4bb2      	ldr	r3, [pc, #712]	; (80036b4 <Profile_Record+0x36c>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	eeb1 7a67 	vneg.f32	s14, s15
 80033f2:	4baf      	ldr	r3, [pc, #700]	; (80036b0 <Profile_Record+0x368>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	4baa      	ldr	r3, [pc, #680]	; (80036a8 <Profile_Record+0x360>)
 80033fe:	edc3 7a00 	vstr	s15, [r3]

	if (motor1_vel < -0.5) {
 8003402:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <Profile_Record+0x358>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800340c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	d512      	bpl.n	800343c <Profile_Record+0xf4>
		Ia_ref1 += 0.1;
 8003416:	4ba8      	ldr	r3, [pc, #672]	; (80036b8 <Profile_Record+0x370>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f8c4 	bl	80005a8 <__aeabi_f2d>
 8003420:	a39d      	add	r3, pc, #628	; (adr r3, 8003698 <Profile_Record+0x350>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fc ff61 	bl	80002ec <__adddf3>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4610      	mov	r0, r2
 8003430:	4619      	mov	r1, r3
 8003432:	f7fd fbd3 	bl	8000bdc <__aeabi_d2f>
 8003436:	4603      	mov	r3, r0
 8003438:	4a9f      	ldr	r2, [pc, #636]	; (80036b8 <Profile_Record+0x370>)
 800343a:	6013      	str	r3, [r2, #0]
	}

	if (motor2_vel < -0.5) {
 800343c:	4b9a      	ldr	r3, [pc, #616]	; (80036a8 <Profile_Record+0x360>)
 800343e:	edd3 7a00 	vldr	s15, [r3]
 8003442:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003446:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d512      	bpl.n	8003476 <Profile_Record+0x12e>
		Ia_ref2 += 0.1;
 8003450:	4b9a      	ldr	r3, [pc, #616]	; (80036bc <Profile_Record+0x374>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f8a7 	bl	80005a8 <__aeabi_f2d>
 800345a:	a38f      	add	r3, pc, #572	; (adr r3, 8003698 <Profile_Record+0x350>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fc ff44 	bl	80002ec <__adddf3>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fbb6 	bl	8000bdc <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	4a92      	ldr	r2, [pc, #584]	; (80036bc <Profile_Record+0x374>)
 8003474:	6013      	str	r3, [r2, #0]
	}

	motor1_prevel = motor1_vel;
 8003476:	4b8a      	ldr	r3, [pc, #552]	; (80036a0 <Profile_Record+0x358>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a91      	ldr	r2, [pc, #580]	; (80036c0 <Profile_Record+0x378>)
 800347c:	6013      	str	r3, [r2, #0]
	motor2_prevel = motor2_vel;
 800347e:	4b8a      	ldr	r3, [pc, #552]	; (80036a8 <Profile_Record+0x360>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <Profile_Record+0x37c>)
 8003484:	6013      	str	r3, [r2, #0]

	motor1_pos = enc_instance_M1.position * Ticks_to_Deg; // from tick to degrees -> 360.0/(512.0*26.0)
 8003486:	4b89      	ldr	r3, [pc, #548]	; (80036ac <Profile_Record+0x364>)
 8003488:	ed93 7a01 	vldr	s14, [r3, #4]
 800348c:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <Profile_Record+0x380>)
 800348e:	edd3 7a00 	vldr	s15, [r3]
 8003492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <Profile_Record+0x384>)
 8003498:	edc3 7a00 	vstr	s15, [r3]
	motor2_pos = -enc_instance_M2.position * Ticks_to_Deg;
 800349c:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <Profile_Record+0x36c>)
 800349e:	edd3 7a01 	vldr	s15, [r3, #4]
 80034a2:	eeb1 7a67 	vneg.f32	s14, s15
 80034a6:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <Profile_Record+0x380>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b0:	4b87      	ldr	r3, [pc, #540]	; (80036d0 <Profile_Record+0x388>)
 80034b2:	edc3 7a00 	vstr	s15, [r3]

	T_Dis1 = dob1.T_dis;
 80034b6:	4b87      	ldr	r3, [pc, #540]	; (80036d4 <Profile_Record+0x38c>)
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	4a87      	ldr	r2, [pc, #540]	; (80036d8 <Profile_Record+0x390>)
 80034bc:	6013      	str	r3, [r2, #0]
	T_Rec1 = rtob1.T_ext;
 80034be:	4b87      	ldr	r3, [pc, #540]	; (80036dc <Profile_Record+0x394>)
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <Profile_Record+0x398>)
 80034c4:	6013      	str	r3, [r2, #0]

	T_Dis2 = dob2.T_dis;
 80034c6:	4b87      	ldr	r3, [pc, #540]	; (80036e4 <Profile_Record+0x39c>)
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <Profile_Record+0x3a0>)
 80034cc:	6013      	str	r3, [r2, #0]
	T_Rec2 = rtob2.T_ext;
 80034ce:	4b87      	ldr	r3, [pc, #540]	; (80036ec <Profile_Record+0x3a4>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4a87      	ldr	r2, [pc, #540]	; (80036f0 <Profile_Record+0x3a8>)
 80034d4:	6013      	str	r3, [r2, #0]

	if (fabs(Ia_ref1) > I_max) {
 80034d6:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <Profile_Record+0x370>)
 80034d8:	edd3 7a00 	vldr	s15, [r3]
 80034dc:	eeb0 7ae7 	vabs.f32	s14, s15
 80034e0:	4b84      	ldr	r3, [pc, #528]	; (80036f4 <Profile_Record+0x3ac>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ee:	dd2d      	ble.n	800354c <Profile_Record+0x204>
		Ia_ref1 = (Ia_ref1 / fabs(Ia_ref1)) * I_max;
 80034f0:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <Profile_Record+0x370>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f857 	bl	80005a8 <__aeabi_f2d>
 80034fa:	4604      	mov	r4, r0
 80034fc:	460d      	mov	r5, r1
 80034fe:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <Profile_Record+0x370>)
 8003500:	edd3 7a00 	vldr	s15, [r3]
 8003504:	eef0 7ae7 	vabs.f32	s15, s15
 8003508:	ee17 0a90 	vmov	r0, s15
 800350c:	f7fd f84c 	bl	80005a8 <__aeabi_f2d>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fd f9c8 	bl	80008ac <__aeabi_ddiv>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4614      	mov	r4, r2
 8003522:	461d      	mov	r5, r3
 8003524:	4b73      	ldr	r3, [pc, #460]	; (80036f4 <Profile_Record+0x3ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd f83d 	bl	80005a8 <__aeabi_f2d>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fd f88f 	bl	8000658 <__aeabi_dmul>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb4b 	bl	8000bdc <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a5b      	ldr	r2, [pc, #364]	; (80036b8 <Profile_Record+0x370>)
 800354a:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) > I_max) {
 800354c:	4b5b      	ldr	r3, [pc, #364]	; (80036bc <Profile_Record+0x374>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eeb0 7ae7 	vabs.f32	s14, s15
 8003556:	4b67      	ldr	r3, [pc, #412]	; (80036f4 <Profile_Record+0x3ac>)
 8003558:	edd3 7a00 	vldr	s15, [r3]
 800355c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003564:	dd2d      	ble.n	80035c2 <Profile_Record+0x27a>
		Ia_ref2 = (Ia_ref2 / fabs(Ia_ref2)) * I_max;
 8003566:	4b55      	ldr	r3, [pc, #340]	; (80036bc <Profile_Record+0x374>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fd f81c 	bl	80005a8 <__aeabi_f2d>
 8003570:	4604      	mov	r4, r0
 8003572:	460d      	mov	r5, r1
 8003574:	4b51      	ldr	r3, [pc, #324]	; (80036bc <Profile_Record+0x374>)
 8003576:	edd3 7a00 	vldr	s15, [r3]
 800357a:	eef0 7ae7 	vabs.f32	s15, s15
 800357e:	ee17 0a90 	vmov	r0, s15
 8003582:	f7fd f811 	bl	80005a8 <__aeabi_f2d>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
 800358e:	f7fd f98d 	bl	80008ac <__aeabi_ddiv>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4614      	mov	r4, r2
 8003598:	461d      	mov	r5, r3
 800359a:	4b56      	ldr	r3, [pc, #344]	; (80036f4 <Profile_Record+0x3ac>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd f802 	bl	80005a8 <__aeabi_f2d>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4620      	mov	r0, r4
 80035aa:	4629      	mov	r1, r5
 80035ac:	f7fd f854 	bl	8000658 <__aeabi_dmul>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4610      	mov	r0, r2
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7fd fb10 	bl	8000bdc <__aeabi_d2f>
 80035bc:	4603      	mov	r3, r0
 80035be:	4a3f      	ldr	r2, [pc, #252]	; (80036bc <Profile_Record+0x374>)
 80035c0:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) < 0) {
		Ia_ref2 = 0;
	}

	if (motor1_vel > -1.0) {
 80035c2:	4b37      	ldr	r3, [pc, #220]	; (80036a0 <Profile_Record+0x358>)
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80035cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d4:	dd03      	ble.n	80035de <Profile_Record+0x296>
		Ia_ref1 = 0;
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <Profile_Record+0x370>)
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
		//Ia_ref2 = 0;
	}

	update_dob(&dob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <Profile_Record+0x370>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	eef0 6ae7 	vabs.f32	s13, s15
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <Profile_Record+0x358>)
 80035ea:	ed93 7a00 	vldr	s14, [r3]
 80035ee:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <Profile_Record+0x3b0>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80035fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003600:	eef0 0a67 	vmov.f32	s1, s15
 8003604:	eeb0 0a66 	vmov.f32	s0, s13
 8003608:	4832      	ldr	r0, [pc, #200]	; (80036d4 <Profile_Record+0x38c>)
 800360a:	f7fe f8ef 	bl	80017ec <update_dob>
	update_rtob(&rtob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 800360e:	4b2a      	ldr	r3, [pc, #168]	; (80036b8 <Profile_Record+0x370>)
 8003610:	edd3 7a00 	vldr	s15, [r3]
 8003614:	eef0 6ae7 	vabs.f32	s13, s15
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <Profile_Record+0x358>)
 800361a:	ed93 7a00 	vldr	s14, [r3]
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <Profile_Record+0x3b0>)
 8003620:	edd3 7a00 	vldr	s15, [r3]
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800362c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	eeb0 0a66 	vmov.f32	s0, s13
 8003638:	4828      	ldr	r0, [pc, #160]	; (80036dc <Profile_Record+0x394>)
 800363a:	f001 ff8f 	bl	800555c <update_rtob>

	update_dob(&dob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 800363e:	4b1f      	ldr	r3, [pc, #124]	; (80036bc <Profile_Record+0x374>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	eef0 6ae7 	vabs.f32	s13, s15
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <Profile_Record+0x360>)
 800364a:	ed93 7a00 	vldr	s14, [r3]
 800364e:	4b2a      	ldr	r3, [pc, #168]	; (80036f8 <Profile_Record+0x3b0>)
 8003650:	edd3 7a00 	vldr	s15, [r3]
 8003654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003658:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800365c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003660:	eef0 0a67 	vmov.f32	s1, s15
 8003664:	eeb0 0a66 	vmov.f32	s0, s13
 8003668:	481e      	ldr	r0, [pc, #120]	; (80036e4 <Profile_Record+0x39c>)
 800366a:	f7fe f8bf 	bl	80017ec <update_dob>
	update_rtob(&rtob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <Profile_Record+0x374>)
 8003670:	edd3 7a00 	vldr	s15, [r3]
 8003674:	eef0 6ae7 	vabs.f32	s13, s15
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <Profile_Record+0x360>)
 800367a:	ed93 7a00 	vldr	s14, [r3]
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <Profile_Record+0x3b0>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800368c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003690:	eef0 0a67 	vmov.f32	s1, s15
 8003694:	e032      	b.n	80036fc <Profile_Record+0x3b4>
 8003696:	bf00      	nop
 8003698:	9999999a 	.word	0x9999999a
 800369c:	3fb99999 	.word	0x3fb99999
 80036a0:	2000087c 	.word	0x2000087c
 80036a4:	2000156b 	.word	0x2000156b
 80036a8:	20000880 	.word	0x20000880
 80036ac:	200005f0 	.word	0x200005f0
 80036b0:	20001554 	.word	0x20001554
 80036b4:	20000600 	.word	0x20000600
 80036b8:	20000894 	.word	0x20000894
 80036bc:	200008ac 	.word	0x200008ac
 80036c0:	20000884 	.word	0x20000884
 80036c4:	20000888 	.word	0x20000888
 80036c8:	2000155c 	.word	0x2000155c
 80036cc:	2000088c 	.word	0x2000088c
 80036d0:	20000890 	.word	0x20000890
 80036d4:	200007e8 	.word	0x200007e8
 80036d8:	20000898 	.word	0x20000898
 80036dc:	20000810 	.word	0x20000810
 80036e0:	2000089c 	.word	0x2000089c
 80036e4:	200007fc 	.word	0x200007fc
 80036e8:	200008b0 	.word	0x200008b0
 80036ec:	2000082c 	.word	0x2000082c
 80036f0:	200008b4 	.word	0x200008b4
 80036f4:	2000003c 	.word	0x2000003c
 80036f8:	20001558 	.word	0x20001558
 80036fc:	eeb0 0a66 	vmov.f32	s0, s13
 8003700:	4831      	ldr	r0, [pc, #196]	; (80037c8 <Profile_Record+0x480>)
 8003702:	f001 ff2b 	bl	800555c <update_rtob>

	if (IsDown) {
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <Profile_Record+0x484>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <Profile_Record+0x3dc>

		HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin, GPIO_PIN_SET);
 800370e:	2201      	movs	r2, #1
 8003710:	2110      	movs	r1, #16
 8003712:	482f      	ldr	r0, [pc, #188]	; (80037d0 <Profile_Record+0x488>)
 8003714:	f002 fe3a 	bl	800638c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 8003718:	2200      	movs	r2, #0
 800371a:	2104      	movs	r1, #4
 800371c:	482d      	ldr	r0, [pc, #180]	; (80037d4 <Profile_Record+0x48c>)
 800371e:	f002 fe35 	bl	800638c <HAL_GPIO_WritePin>
 8003722:	e009      	b.n	8003738 <Profile_Record+0x3f0>

	} else {

		HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin, GPIO_PIN_SET);
 8003724:	2201      	movs	r2, #1
 8003726:	2110      	movs	r1, #16
 8003728:	4829      	ldr	r0, [pc, #164]	; (80037d0 <Profile_Record+0x488>)
 800372a:	f002 fe2f 	bl	800638c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin, GPIO_PIN_RESET);
 800372e:	2200      	movs	r2, #0
 8003730:	2104      	movs	r1, #4
 8003732:	4828      	ldr	r0, [pc, #160]	; (80037d4 <Profile_Record+0x48c>)
 8003734:	f002 fe2a 	bl	800638c <HAL_GPIO_WritePin>
	}

	volt1 = fabs(Ia_ref1 * 32767 / I_max);
 8003738:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <Profile_Record+0x490>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80037dc <Profile_Record+0x494>
 8003742:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003746:	4b26      	ldr	r3, [pc, #152]	; (80037e0 <Profile_Record+0x498>)
 8003748:	ed93 7a00 	vldr	s14, [r3]
 800374c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003750:	eef0 7ae7 	vabs.f32	s15, s15
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <Profile_Record+0x49c>)
 8003756:	edc3 7a00 	vstr	s15, [r3]
	volt2 = fabs(Ia_ref2 * 32767 / I_max);
 800375a:	4b23      	ldr	r3, [pc, #140]	; (80037e8 <Profile_Record+0x4a0>)
 800375c:	edd3 7a00 	vldr	s15, [r3]
 8003760:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80037dc <Profile_Record+0x494>
 8003764:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <Profile_Record+0x498>)
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003772:	eef0 7ae7 	vabs.f32	s15, s15
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <Profile_Record+0x4a4>)
 8003778:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 800377c:	2201      	movs	r2, #1
 800377e:	2120      	movs	r1, #32
 8003780:	4813      	ldr	r0, [pc, #76]	; (80037d0 <Profile_Record+0x488>)
 8003782:	f002 fe03 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable
	HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER2_ENABLE_Pin,
 8003786:	2201      	movs	r2, #1
 8003788:	2108      	movs	r1, #8
 800378a:	4812      	ldr	r0, [pc, #72]	; (80037d4 <Profile_Record+0x48c>)
 800378c:	f002 fdfe 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable

	GP8XXX_IIC_setDACOutVoltage(&gp8211s_1, volt1, 0);
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <Profile_Record+0x49c>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379a:	ee17 3a90 	vmov	r3, s15
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	4619      	mov	r1, r3
 80037a4:	4812      	ldr	r0, [pc, #72]	; (80037f0 <Profile_Record+0x4a8>)
 80037a6:	f7fd ff5f 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_2, volt2, 0); // offset 72 points
 80037aa:	4b10      	ldr	r3, [pc, #64]	; (80037ec <Profile_Record+0x4a4>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b4:	ee17 3a90 	vmov	r3, s15
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	4619      	mov	r1, r3
 80037be:	480d      	ldr	r0, [pc, #52]	; (80037f4 <Profile_Record+0x4ac>)
 80037c0:	f7fd ff52 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>

}
 80037c4:	bf00      	nop
 80037c6:	bdb0      	pop	{r4, r5, r7, pc}
 80037c8:	2000082c 	.word	0x2000082c
 80037cc:	2000156b 	.word	0x2000156b
 80037d0:	40020400 	.word	0x40020400
 80037d4:	40020000 	.word	0x40020000
 80037d8:	20000894 	.word	0x20000894
 80037dc:	46fffe00 	.word	0x46fffe00
 80037e0:	2000003c 	.word	0x2000003c
 80037e4:	200008a8 	.word	0x200008a8
 80037e8:	200008ac 	.word	0x200008ac
 80037ec:	200008c0 	.word	0x200008c0
 80037f0:	20000848 	.word	0x20000848
 80037f4:	2000085c 	.word	0x2000085c

080037f8 <Bimanual_MotorCtrl_M1>:
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_1, volt1, 0);
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_2, volt2, 0); // offset 72 points

}

void Bimanual_MotorCtrl_M1(void) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	af00      	add	r7, sp, #0

	update_encoder(&enc_instance_M1, &htim1); // update the encoder1
 80037fc:	4991      	ldr	r1, [pc, #580]	; (8003a44 <Bimanual_MotorCtrl_M1+0x24c>)
 80037fe:	4892      	ldr	r0, [pc, #584]	; (8003a48 <Bimanual_MotorCtrl_M1+0x250>)
 8003800:	f001 fdda 	bl	80053b8 <update_encoder>
	update_encoder(&enc_instance_M2, &htim4);
 8003804:	4991      	ldr	r1, [pc, #580]	; (8003a4c <Bimanual_MotorCtrl_M1+0x254>)
 8003806:	4892      	ldr	r0, [pc, #584]	; (8003a50 <Bimanual_MotorCtrl_M1+0x258>)
 8003808:	f001 fdd6 	bl	80053b8 <update_encoder>

	motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 800380c:	4b8e      	ldr	r3, [pc, #568]	; (8003a48 <Bimanual_MotorCtrl_M1+0x250>)
 800380e:	ed93 7a00 	vldr	s14, [r3]
 8003812:	4b90      	ldr	r3, [pc, #576]	; (8003a54 <Bimanual_MotorCtrl_M1+0x25c>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381c:	4b8e      	ldr	r3, [pc, #568]	; (8003a58 <Bimanual_MotorCtrl_M1+0x260>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
	motor2_vel = -enc_instance_M2.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 8003822:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <Bimanual_MotorCtrl_M1+0x258>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	eeb1 7a67 	vneg.f32	s14, s15
 800382c:	4b89      	ldr	r3, [pc, #548]	; (8003a54 <Bimanual_MotorCtrl_M1+0x25c>)
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003836:	4b89      	ldr	r3, [pc, #548]	; (8003a5c <Bimanual_MotorCtrl_M1+0x264>)
 8003838:	edc3 7a00 	vstr	s15, [r3]

	//apply_average_filter(&filter_instance1, motor1_vel_u, &motor1_vel);
	//apply_average_filter(&filter_instance2, motor2_vel_u, &motor2_vel);

	if (motor1_vel > 0.5) {
 800383c:	4b86      	ldr	r3, [pc, #536]	; (8003a58 <Bimanual_MotorCtrl_M1+0x260>)
 800383e:	edd3 7a00 	vldr	s15, [r3]
 8003842:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	dd03      	ble.n	8003858 <Bimanual_MotorCtrl_M1+0x60>
		IsDown = 1;
 8003850:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e00c      	b.n	8003872 <Bimanual_MotorCtrl_M1+0x7a>
	} else if (motor1_vel < -0.5) {
 8003858:	4b7f      	ldr	r3, [pc, #508]	; (8003a58 <Bimanual_MotorCtrl_M1+0x260>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	d502      	bpl.n	8003872 <Bimanual_MotorCtrl_M1+0x7a>
		IsDown = 0;
 800386c:	4b7c      	ldr	r3, [pc, #496]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 800386e:	2200      	movs	r2, #0
 8003870:	701a      	strb	r2, [r3, #0]
	}

	if (IsDown) {
 8003872:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00f      	beq.n	800389a <Bimanual_MotorCtrl_M1+0xa2>

		motor1_vel = -motor1_vel;
 800387a:	4b77      	ldr	r3, [pc, #476]	; (8003a58 <Bimanual_MotorCtrl_M1+0x260>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eef1 7a67 	vneg.f32	s15, s15
 8003884:	4b74      	ldr	r3, [pc, #464]	; (8003a58 <Bimanual_MotorCtrl_M1+0x260>)
 8003886:	edc3 7a00 	vstr	s15, [r3]
		motor2_vel = -motor2_vel;
 800388a:	4b74      	ldr	r3, [pc, #464]	; (8003a5c <Bimanual_MotorCtrl_M1+0x264>)
 800388c:	edd3 7a00 	vldr	s15, [r3]
 8003890:	eef1 7a67 	vneg.f32	s15, s15
 8003894:	4b71      	ldr	r3, [pc, #452]	; (8003a5c <Bimanual_MotorCtrl_M1+0x264>)
 8003896:	edc3 7a00 	vstr	s15, [r3]

	}

	motor1_pos = enc_instance_M1.position * Ticks_to_Deg; // from tick to degrees -> 360.0/(512.0*26.0)
 800389a:	4b6b      	ldr	r3, [pc, #428]	; (8003a48 <Bimanual_MotorCtrl_M1+0x250>)
 800389c:	ed93 7a01 	vldr	s14, [r3, #4]
 80038a0:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <Bimanual_MotorCtrl_M1+0x26c>)
 80038a2:	edd3 7a00 	vldr	s15, [r3]
 80038a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038aa:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <Bimanual_MotorCtrl_M1+0x270>)
 80038ac:	edc3 7a00 	vstr	s15, [r3]
	motor2_pos = -enc_instance_M2.position * Ticks_to_Deg;
 80038b0:	4b67      	ldr	r3, [pc, #412]	; (8003a50 <Bimanual_MotorCtrl_M1+0x258>)
 80038b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80038b6:	eeb1 7a67 	vneg.f32	s14, s15
 80038ba:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <Bimanual_MotorCtrl_M1+0x26c>)
 80038bc:	edd3 7a00 	vldr	s15, [r3]
 80038c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c4:	4b69      	ldr	r3, [pc, #420]	; (8003a6c <Bimanual_MotorCtrl_M1+0x274>)
 80038c6:	edc3 7a00 	vstr	s15, [r3]

	//motor1_pos = 180 - motor1_pos;
	//motor2_pos = 180 - motor2_pos;

	T_Dis1 = dob1.T_dis;
 80038ca:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <Bimanual_MotorCtrl_M1+0x278>)
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	4a69      	ldr	r2, [pc, #420]	; (8003a74 <Bimanual_MotorCtrl_M1+0x27c>)
 80038d0:	6013      	str	r3, [r2, #0]
	T_Rec1_u = rtob1.T_ext;
 80038d2:	4b69      	ldr	r3, [pc, #420]	; (8003a78 <Bimanual_MotorCtrl_M1+0x280>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a69      	ldr	r2, [pc, #420]	; (8003a7c <Bimanual_MotorCtrl_M1+0x284>)
 80038d8:	6013      	str	r3, [r2, #0]

	T_Dis2 = dob2.T_dis;
 80038da:	4b69      	ldr	r3, [pc, #420]	; (8003a80 <Bimanual_MotorCtrl_M1+0x288>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4a69      	ldr	r2, [pc, #420]	; (8003a84 <Bimanual_MotorCtrl_M1+0x28c>)
 80038e0:	6013      	str	r3, [r2, #0]
	T_Rec2_u = rtob2.T_ext;
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <Bimanual_MotorCtrl_M1+0x290>)
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	4a69      	ldr	r2, [pc, #420]	; (8003a8c <Bimanual_MotorCtrl_M1+0x294>)
 80038e8:	6013      	str	r3, [r2, #0]

	apply_average_filter(&filter_instance1, T_Rec1_u, &T_Rec1);
 80038ea:	4b64      	ldr	r3, [pc, #400]	; (8003a7c <Bimanual_MotorCtrl_M1+0x284>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	4967      	ldr	r1, [pc, #412]	; (8003a90 <Bimanual_MotorCtrl_M1+0x298>)
 80038f2:	eeb0 0a67 	vmov.f32	s0, s15
 80038f6:	4867      	ldr	r0, [pc, #412]	; (8003a94 <Bimanual_MotorCtrl_M1+0x29c>)
 80038f8:	f001 fda2 	bl	8005440 <apply_average_filter>
	apply_average_filter(&filter_instance2, T_Rec2_u, &T_Rec2);
 80038fc:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <Bimanual_MotorCtrl_M1+0x294>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	4965      	ldr	r1, [pc, #404]	; (8003a98 <Bimanual_MotorCtrl_M1+0x2a0>)
 8003904:	eeb0 0a67 	vmov.f32	s0, s15
 8003908:	4864      	ldr	r0, [pc, #400]	; (8003a9c <Bimanual_MotorCtrl_M1+0x2a4>)
 800390a:	f001 fd99 	bl	8005440 <apply_average_filter>

	T_P1 = torque_profile(motor1_pos, IsRo, IsDown) / (26.0 * 80.0);
 800390e:	4b56      	ldr	r3, [pc, #344]	; (8003a68 <Bimanual_MotorCtrl_M1+0x270>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	4b62      	ldr	r3, [pc, #392]	; (8003aa0 <Bimanual_MotorCtrl_M1+0x2a8>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	4a51      	ldr	r2, [pc, #324]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	eeb0 0a67 	vmov.f32	s0, s15
 8003924:	f7ff fabc 	bl	8002ea0 <torque_profile>
 8003928:	ee10 3a10 	vmov	r3, s0
 800392c:	4618      	mov	r0, r3
 800392e:	f7fc fe3b 	bl	80005a8 <__aeabi_f2d>
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	4b5b      	ldr	r3, [pc, #364]	; (8003aa4 <Bimanual_MotorCtrl_M1+0x2ac>)
 8003938:	f7fc ffb8 	bl	80008ac <__aeabi_ddiv>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4610      	mov	r0, r2
 8003942:	4619      	mov	r1, r3
 8003944:	f7fd f94a 	bl	8000bdc <__aeabi_d2f>
 8003948:	4603      	mov	r3, r0
 800394a:	4a57      	ldr	r2, [pc, #348]	; (8003aa8 <Bimanual_MotorCtrl_M1+0x2b0>)
 800394c:	6013      	str	r3, [r2, #0]
	T_P2 = torque_profile(motor2_pos, IsRo, IsDown) / (26.0 * 80.0);
 800394e:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <Bimanual_MotorCtrl_M1+0x274>)
 8003950:	edd3 7a00 	vldr	s15, [r3]
 8003954:	4b52      	ldr	r3, [pc, #328]	; (8003aa0 <Bimanual_MotorCtrl_M1+0x2a8>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	4a41      	ldr	r2, [pc, #260]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 800395a:	7812      	ldrb	r2, [r2, #0]
 800395c:	4611      	mov	r1, r2
 800395e:	4618      	mov	r0, r3
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	f7ff fa9c 	bl	8002ea0 <torque_profile>
 8003968:	ee10 3a10 	vmov	r3, s0
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fe1b 	bl	80005a8 <__aeabi_f2d>
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <Bimanual_MotorCtrl_M1+0x2ac>)
 8003978:	f7fc ff98 	bl	80008ac <__aeabi_ddiv>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	4610      	mov	r0, r2
 8003982:	4619      	mov	r1, r3
 8003984:	f7fd f92a 	bl	8000bdc <__aeabi_d2f>
 8003988:	4603      	mov	r3, r0
 800398a:	4a48      	ldr	r2, [pc, #288]	; (8003aac <Bimanual_MotorCtrl_M1+0x2b4>)
 800398c:	6013      	str	r3, [r2, #0]

//T_P1 = 1;
//T_P2 = 1;

	T_G1 = T_gravity(motor1_pos, IsDown, G1, IsRo) / 26;
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <Bimanual_MotorCtrl_M1+0x270>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	4b32      	ldr	r3, [pc, #200]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <Bimanual_MotorCtrl_M1+0x2b8>)
 800399a:	ed92 7a00 	vldr	s14, [r2]
 800399e:	4a40      	ldr	r2, [pc, #256]	; (8003aa0 <Bimanual_MotorCtrl_M1+0x2a8>)
 80039a0:	7812      	ldrb	r2, [r2, #0]
 80039a2:	4611      	mov	r1, r2
 80039a4:	eef0 0a47 	vmov.f32	s1, s14
 80039a8:	4618      	mov	r0, r3
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	f7ff fc4b 	bl	8003248 <T_gravity>
 80039b2:	eeb0 7a40 	vmov.f32	s14, s0
 80039b6:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80039ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039be:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <Bimanual_MotorCtrl_M1+0x2bc>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	T_G2 = T_gravity(motor2_pos, IsDown, G1, IsRo) / 26;
 80039c4:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <Bimanual_MotorCtrl_M1+0x274>)
 80039c6:	edd3 7a00 	vldr	s15, [r3]
 80039ca:	4b25      	ldr	r3, [pc, #148]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <Bimanual_MotorCtrl_M1+0x2b8>)
 80039d0:	ed92 7a00 	vldr	s14, [r2]
 80039d4:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <Bimanual_MotorCtrl_M1+0x2a8>)
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	4611      	mov	r1, r2
 80039da:	eef0 0a47 	vmov.f32	s1, s14
 80039de:	4618      	mov	r0, r3
 80039e0:	eeb0 0a67 	vmov.f32	s0, s15
 80039e4:	f7ff fc30 	bl	8003248 <T_gravity>
 80039e8:	eeb0 7a40 	vmov.f32	s14, s0
 80039ec:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80039f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <Bimanual_MotorCtrl_M1+0x2c0>)
 80039f6:	edc3 7a00 	vstr	s15, [r3]

	T_G1 = 0;
 80039fa:	4b2e      	ldr	r3, [pc, #184]	; (8003ab4 <Bimanual_MotorCtrl_M1+0x2bc>)
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	601a      	str	r2, [r3, #0]
	T_G2 = 0;
 8003a02:	4b2d      	ldr	r3, [pc, #180]	; (8003ab8 <Bimanual_MotorCtrl_M1+0x2c0>)
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]

	if (IsDown) {
 8003a0a:	4b15      	ldr	r3, [pc, #84]	; (8003a60 <Bimanual_MotorCtrl_M1+0x268>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d056      	beq.n	8003ac0 <Bimanual_MotorCtrl_M1+0x2c8>
		k_s = -fabs(k_s);
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <Bimanual_MotorCtrl_M1+0x2c4>)
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	eef0 7ae7 	vabs.f32	s15, s15
 8003a1c:	ee17 0a90 	vmov	r0, s15
 8003a20:	f7fc fdc2 	bl	80005a8 <__aeabi_f2d>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fd f8d6 	bl	8000bdc <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef1 7a67 	vneg.f32	s15, s15
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <Bimanual_MotorCtrl_M1+0x2c4>)
 8003a3c:	edc3 7a00 	vstr	s15, [r3]
 8003a40:	e046      	b.n	8003ad0 <Bimanual_MotorCtrl_M1+0x2d8>
 8003a42:	bf00      	nop
 8003a44:	20000448 	.word	0x20000448
 8003a48:	200005f0 	.word	0x200005f0
 8003a4c:	20000494 	.word	0x20000494
 8003a50:	20000600 	.word	0x20000600
 8003a54:	20001554 	.word	0x20001554
 8003a58:	2000087c 	.word	0x2000087c
 8003a5c:	20000880 	.word	0x20000880
 8003a60:	2000156b 	.word	0x2000156b
 8003a64:	2000155c 	.word	0x2000155c
 8003a68:	2000088c 	.word	0x2000088c
 8003a6c:	20000890 	.word	0x20000890
 8003a70:	200007e8 	.word	0x200007e8
 8003a74:	20000898 	.word	0x20000898
 8003a78:	20000810 	.word	0x20000810
 8003a7c:	200008c4 	.word	0x200008c4
 8003a80:	200007fc 	.word	0x200007fc
 8003a84:	200008b0 	.word	0x200008b0
 8003a88:	2000082c 	.word	0x2000082c
 8003a8c:	200008c8 	.word	0x200008c8
 8003a90:	2000089c 	.word	0x2000089c
 8003a94:	20000640 	.word	0x20000640
 8003a98:	200008b4 	.word	0x200008b4
 8003a9c:	20000714 	.word	0x20000714
 8003aa0:	2000156a 	.word	0x2000156a
 8003aa4:	40a04000 	.word	0x40a04000
 8003aa8:	200008a0 	.word	0x200008a0
 8003aac:	200008b8 	.word	0x200008b8
 8003ab0:	200035f8 	.word	0x200035f8
 8003ab4:	200008a4 	.word	0x200008a4
 8003ab8:	200008bc 	.word	0x200008bc
 8003abc:	20000008 	.word	0x20000008
		//k_sd = +fabs(k_sd);
	} else {
		k_s = fabs(k_s);
 8003ac0:	4bcd      	ldr	r3, [pc, #820]	; (8003df8 <Bimanual_MotorCtrl_M1+0x600>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	eef0 7ae7 	vabs.f32	s15, s15
 8003aca:	4bcb      	ldr	r3, [pc, #812]	; (8003df8 <Bimanual_MotorCtrl_M1+0x600>)
 8003acc:	edc3 7a00 	vstr	s15, [r3]
		//k_sd = -fabs(k_sd);
	}

	apply_pid(&pid_instance_M1, (T_P1 + T_G1 - T_Rec1), dt);
 8003ad0:	4bca      	ldr	r3, [pc, #808]	; (8003dfc <Bimanual_MotorCtrl_M1+0x604>)
 8003ad2:	ed93 7a00 	vldr	s14, [r3]
 8003ad6:	4bca      	ldr	r3, [pc, #808]	; (8003e00 <Bimanual_MotorCtrl_M1+0x608>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
 8003adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae0:	4bc8      	ldr	r3, [pc, #800]	; (8003e04 <Bimanual_MotorCtrl_M1+0x60c>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aea:	4bc7      	ldr	r3, [pc, #796]	; (8003e08 <Bimanual_MotorCtrl_M1+0x610>)
 8003aec:	ed93 7a00 	vldr	s14, [r3]
 8003af0:	eef0 0a47 	vmov.f32	s1, s14
 8003af4:	eeb0 0a67 	vmov.f32	s0, s15
 8003af8:	48c4      	ldr	r0, [pc, #784]	; (8003e0c <Bimanual_MotorCtrl_M1+0x614>)
 8003afa:	f001 fbbd 	bl	8005278 <apply_pid>
	apply_pid(&pid_instance_M2,
			(T_P2 + T_G2 - T_Rec2 + k_s * (motor1_pos - motor2_pos)
 8003afe:	4bc4      	ldr	r3, [pc, #784]	; (8003e10 <Bimanual_MotorCtrl_M1+0x618>)
 8003b00:	ed93 7a00 	vldr	s14, [r3]
 8003b04:	4bc3      	ldr	r3, [pc, #780]	; (8003e14 <Bimanual_MotorCtrl_M1+0x61c>)
 8003b06:	edd3 7a00 	vldr	s15, [r3]
 8003b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b0e:	4bc2      	ldr	r3, [pc, #776]	; (8003e18 <Bimanual_MotorCtrl_M1+0x620>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b18:	4bc0      	ldr	r3, [pc, #768]	; (8003e1c <Bimanual_MotorCtrl_M1+0x624>)
 8003b1a:	edd3 6a00 	vldr	s13, [r3]
 8003b1e:	4bc0      	ldr	r3, [pc, #768]	; (8003e20 <Bimanual_MotorCtrl_M1+0x628>)
 8003b20:	edd3 7a00 	vldr	s15, [r3]
 8003b24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b28:	4bb3      	ldr	r3, [pc, #716]	; (8003df8 <Bimanual_MotorCtrl_M1+0x600>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b32:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ k_sd * (motor1_vel - motor2_vel)), dt);
 8003b36:	4bbb      	ldr	r3, [pc, #748]	; (8003e24 <Bimanual_MotorCtrl_M1+0x62c>)
 8003b38:	edd3 6a00 	vldr	s13, [r3]
 8003b3c:	4bba      	ldr	r3, [pc, #744]	; (8003e28 <Bimanual_MotorCtrl_M1+0x630>)
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b46:	4bb9      	ldr	r3, [pc, #740]	; (8003e2c <Bimanual_MotorCtrl_M1+0x634>)
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	apply_pid(&pid_instance_M2,
 8003b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b54:	4bac      	ldr	r3, [pc, #688]	; (8003e08 <Bimanual_MotorCtrl_M1+0x610>)
 8003b56:	ed93 7a00 	vldr	s14, [r3]
 8003b5a:	eef0 0a47 	vmov.f32	s1, s14
 8003b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b62:	48b3      	ldr	r0, [pc, #716]	; (8003e30 <Bimanual_MotorCtrl_M1+0x638>)
 8003b64:	f001 fb88 	bl	8005278 <apply_pid>

	Ia_ref1 = ((pid_instance_M1.output) * (0.25 / 5000.0) + T_Dis1) / k_T; // master
 8003b68:	4ba8      	ldr	r3, [pc, #672]	; (8003e0c <Bimanual_MotorCtrl_M1+0x614>)
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fd1b 	bl	80005a8 <__aeabi_f2d>
 8003b72:	a39f      	add	r3, pc, #636	; (adr r3, 8003df0 <Bimanual_MotorCtrl_M1+0x5f8>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fd6e 	bl	8000658 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4614      	mov	r4, r2
 8003b82:	461d      	mov	r5, r3
 8003b84:	4bab      	ldr	r3, [pc, #684]	; (8003e34 <Bimanual_MotorCtrl_M1+0x63c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fc fd0d 	bl	80005a8 <__aeabi_f2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fba9 	bl	80002ec <__adddf3>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	4ba5      	ldr	r3, [pc, #660]	; (8003e38 <Bimanual_MotorCtrl_M1+0x640>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fc fcfe 	bl	80005a8 <__aeabi_f2d>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fe7a 	bl	80008ac <__aeabi_ddiv>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7fd f80c 	bl	8000bdc <__aeabi_d2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a9d      	ldr	r2, [pc, #628]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003bc8:	6013      	str	r3, [r2, #0]
	Ia_ref2 = ((pid_instance_M2.output) * (0.25 / 5000.0) + T_Dis2) / k_T; // slave
 8003bca:	4b99      	ldr	r3, [pc, #612]	; (8003e30 <Bimanual_MotorCtrl_M1+0x638>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fc fcea 	bl	80005a8 <__aeabi_f2d>
 8003bd4:	a386      	add	r3, pc, #536	; (adr r3, 8003df0 <Bimanual_MotorCtrl_M1+0x5f8>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fd3d 	bl	8000658 <__aeabi_dmul>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4614      	mov	r4, r2
 8003be4:	461d      	mov	r5, r3
 8003be6:	4b96      	ldr	r3, [pc, #600]	; (8003e40 <Bimanual_MotorCtrl_M1+0x648>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fc fcdc 	bl	80005a8 <__aeabi_f2d>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	f7fc fb78 	bl	80002ec <__adddf3>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4614      	mov	r4, r2
 8003c02:	461d      	mov	r5, r3
 8003c04:	4b8c      	ldr	r3, [pc, #560]	; (8003e38 <Bimanual_MotorCtrl_M1+0x640>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fccd 	bl	80005a8 <__aeabi_f2d>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4620      	mov	r0, r4
 8003c14:	4629      	mov	r1, r5
 8003c16:	f7fc fe49 	bl	80008ac <__aeabi_ddiv>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4610      	mov	r0, r2
 8003c20:	4619      	mov	r1, r3
 8003c22:	f7fc ffdb 	bl	8000bdc <__aeabi_d2f>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a86      	ldr	r2, [pc, #536]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003c2a:	6013      	str	r3, [r2, #0]

	if (fabs(Ia_ref1) > I_max) {
 8003c2c:	4b83      	ldr	r3, [pc, #524]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	eeb0 7ae7 	vabs.f32	s14, s15
 8003c36:	4b84      	ldr	r3, [pc, #528]	; (8003e48 <Bimanual_MotorCtrl_M1+0x650>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c44:	dd2d      	ble.n	8003ca2 <Bimanual_MotorCtrl_M1+0x4aa>
		Ia_ref1 = (Ia_ref1 / fabs(Ia_ref1)) * I_max;
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fcac 	bl	80005a8 <__aeabi_f2d>
 8003c50:	4604      	mov	r4, r0
 8003c52:	460d      	mov	r5, r1
 8003c54:	4b79      	ldr	r3, [pc, #484]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003c5e:	ee17 0a90 	vmov	r0, s15
 8003c62:	f7fc fca1 	bl	80005a8 <__aeabi_f2d>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	f7fc fe1d 	bl	80008ac <__aeabi_ddiv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4614      	mov	r4, r2
 8003c78:	461d      	mov	r5, r3
 8003c7a:	4b73      	ldr	r3, [pc, #460]	; (8003e48 <Bimanual_MotorCtrl_M1+0x650>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc fc92 	bl	80005a8 <__aeabi_f2d>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f7fc fce4 	bl	8000658 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7fc ffa0 	bl	8000bdc <__aeabi_d2f>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a67      	ldr	r2, [pc, #412]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003ca0:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) > I_max) {
 8003ca2:	4b68      	ldr	r3, [pc, #416]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	eeb0 7ae7 	vabs.f32	s14, s15
 8003cac:	4b66      	ldr	r3, [pc, #408]	; (8003e48 <Bimanual_MotorCtrl_M1+0x650>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cba:	dd2d      	ble.n	8003d18 <Bimanual_MotorCtrl_M1+0x520>
		Ia_ref2 = (Ia_ref2 / fabs(Ia_ref2)) * I_max;
 8003cbc:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fc fc71 	bl	80005a8 <__aeabi_f2d>
 8003cc6:	4604      	mov	r4, r0
 8003cc8:	460d      	mov	r5, r1
 8003cca:	4b5e      	ldr	r3, [pc, #376]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cd4:	ee17 0a90 	vmov	r0, s15
 8003cd8:	f7fc fc66 	bl	80005a8 <__aeabi_f2d>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	4629      	mov	r1, r5
 8003ce4:	f7fc fde2 	bl	80008ac <__aeabi_ddiv>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4614      	mov	r4, r2
 8003cee:	461d      	mov	r5, r3
 8003cf0:	4b55      	ldr	r3, [pc, #340]	; (8003e48 <Bimanual_MotorCtrl_M1+0x650>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fc fc57 	bl	80005a8 <__aeabi_f2d>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4620      	mov	r0, r4
 8003d00:	4629      	mov	r1, r5
 8003d02:	f7fc fca9 	bl	8000658 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7fc ff65 	bl	8000bdc <__aeabi_d2f>
 8003d12:	4603      	mov	r3, r0
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003d16:	6013      	str	r3, [r2, #0]
	}

	if (motor1_vel > -0.5) {
 8003d18:	4b42      	ldr	r3, [pc, #264]	; (8003e24 <Bimanual_MotorCtrl_M1+0x62c>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003d22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2a:	dd03      	ble.n	8003d34 <Bimanual_MotorCtrl_M1+0x53c>
		Ia_ref1 = 0;
 8003d2c:	4b43      	ldr	r3, [pc, #268]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003d2e:	f04f 0200 	mov.w	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
		//Ia_ref2 = 0;
	}
	if (fabs(motor1_pos - motor2_pos) < 0.5) {
 8003d34:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <Bimanual_MotorCtrl_M1+0x624>)
 8003d36:	ed93 7a00 	vldr	s14, [r3]
 8003d3a:	4b39      	ldr	r3, [pc, #228]	; (8003e20 <Bimanual_MotorCtrl_M1+0x628>)
 8003d3c:	edd3 7a00 	vldr	s15, [r3]
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	eef0 7ae7 	vabs.f32	s15, s15
 8003d48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d54:	d503      	bpl.n	8003d5e <Bimanual_MotorCtrl_M1+0x566>

		Ia_ref2 = 0;
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
	} /*else {
	 HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER2_ENABLE_Pin,
	 GPIO_PIN_SET); // M_Driver1_Enable
	 }*/

	update_dob(&dob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	eef0 6ae7 	vabs.f32	s13, s15
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <Bimanual_MotorCtrl_M1+0x62c>)
 8003d6a:	ed93 7a00 	vldr	s14, [r3]
 8003d6e:	4b37      	ldr	r3, [pc, #220]	; (8003e4c <Bimanual_MotorCtrl_M1+0x654>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d78:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d80:	eef0 0a67 	vmov.f32	s1, s15
 8003d84:	eeb0 0a66 	vmov.f32	s0, s13
 8003d88:	4831      	ldr	r0, [pc, #196]	; (8003e50 <Bimanual_MotorCtrl_M1+0x658>)
 8003d8a:	f7fd fd2f 	bl	80017ec <update_dob>
	update_rtob(&rtob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <Bimanual_MotorCtrl_M1+0x644>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	eef0 6ae7 	vabs.f32	s13, s15
 8003d98:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <Bimanual_MotorCtrl_M1+0x62c>)
 8003d9a:	ed93 7a00 	vldr	s14, [r3]
 8003d9e:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <Bimanual_MotorCtrl_M1+0x654>)
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003db0:	eef0 0a67 	vmov.f32	s1, s15
 8003db4:	eeb0 0a66 	vmov.f32	s0, s13
 8003db8:	4826      	ldr	r0, [pc, #152]	; (8003e54 <Bimanual_MotorCtrl_M1+0x65c>)
 8003dba:	f001 fbcf 	bl	800555c <update_rtob>

	update_dob(&dob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <Bimanual_MotorCtrl_M1+0x64c>)
 8003dc0:	edd3 7a00 	vldr	s15, [r3]
 8003dc4:	eef0 6ae7 	vabs.f32	s13, s15
 8003dc8:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <Bimanual_MotorCtrl_M1+0x630>)
 8003dca:	ed93 7a00 	vldr	s14, [r3]
 8003dce:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <Bimanual_MotorCtrl_M1+0x654>)
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de0:	eef0 0a67 	vmov.f32	s1, s15
 8003de4:	eeb0 0a66 	vmov.f32	s0, s13
 8003de8:	481b      	ldr	r0, [pc, #108]	; (8003e58 <Bimanual_MotorCtrl_M1+0x660>)
 8003dea:	f7fd fcff 	bl	80017ec <update_dob>
 8003dee:	e035      	b.n	8003e5c <Bimanual_MotorCtrl_M1+0x664>
 8003df0:	eb1c432d 	.word	0xeb1c432d
 8003df4:	3f0a36e2 	.word	0x3f0a36e2
 8003df8:	20000008 	.word	0x20000008
 8003dfc:	200008a0 	.word	0x200008a0
 8003e00:	200008a4 	.word	0x200008a4
 8003e04:	2000089c 	.word	0x2000089c
 8003e08:	20000004 	.word	0x20000004
 8003e0c:	20000610 	.word	0x20000610
 8003e10:	200008b8 	.word	0x200008b8
 8003e14:	200008bc 	.word	0x200008bc
 8003e18:	200008b4 	.word	0x200008b4
 8003e1c:	2000088c 	.word	0x2000088c
 8003e20:	20000890 	.word	0x20000890
 8003e24:	2000087c 	.word	0x2000087c
 8003e28:	20000880 	.word	0x20000880
 8003e2c:	2000000c 	.word	0x2000000c
 8003e30:	20000628 	.word	0x20000628
 8003e34:	20000898 	.word	0x20000898
 8003e38:	20000034 	.word	0x20000034
 8003e3c:	20000894 	.word	0x20000894
 8003e40:	200008b0 	.word	0x200008b0
 8003e44:	200008ac 	.word	0x200008ac
 8003e48:	2000003c 	.word	0x2000003c
 8003e4c:	20001558 	.word	0x20001558
 8003e50:	200007e8 	.word	0x200007e8
 8003e54:	20000810 	.word	0x20000810
 8003e58:	200007fc 	.word	0x200007fc
	update_rtob(&rtob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 8003e5c:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <Bimanual_MotorCtrl_M1+0x7c8>)
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	eef0 6ae7 	vabs.f32	s13, s15
 8003e66:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <Bimanual_MotorCtrl_M1+0x7cc>)
 8003e68:	ed93 7a00 	vldr	s14, [r3]
 8003e6c:	4b56      	ldr	r3, [pc, #344]	; (8003fc8 <Bimanual_MotorCtrl_M1+0x7d0>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8003e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e7e:	eef0 0a67 	vmov.f32	s1, s15
 8003e82:	eeb0 0a66 	vmov.f32	s0, s13
 8003e86:	4851      	ldr	r0, [pc, #324]	; (8003fcc <Bimanual_MotorCtrl_M1+0x7d4>)
 8003e88:	f001 fb68 	bl	800555c <update_rtob>

	if (IsDown) {
 8003e8c:	4b50      	ldr	r3, [pc, #320]	; (8003fd0 <Bimanual_MotorCtrl_M1+0x7d8>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d026      	beq.n	8003ee2 <Bimanual_MotorCtrl_M1+0x6ea>
		if (Ia_ref1 < 0) {
 8003e94:	4b4f      	ldr	r3, [pc, #316]	; (8003fd4 <Bimanual_MotorCtrl_M1+0x7dc>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ea2:	d505      	bpl.n	8003eb0 <Bimanual_MotorCtrl_M1+0x6b8>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	2110      	movs	r1, #16
 8003ea8:	484b      	ldr	r0, [pc, #300]	; (8003fd8 <Bimanual_MotorCtrl_M1+0x7e0>)
 8003eaa:	f002 fa6f 	bl	800638c <HAL_GPIO_WritePin>
 8003eae:	e004      	b.n	8003eba <Bimanual_MotorCtrl_M1+0x6c2>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2110      	movs	r1, #16
 8003eb4:	4848      	ldr	r0, [pc, #288]	; (8003fd8 <Bimanual_MotorCtrl_M1+0x7e0>)
 8003eb6:	f002 fa69 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 < 0) {
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <Bimanual_MotorCtrl_M1+0x7c8>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec8:	d505      	bpl.n	8003ed6 <Bimanual_MotorCtrl_M1+0x6de>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2104      	movs	r1, #4
 8003ece:	4843      	ldr	r0, [pc, #268]	; (8003fdc <Bimanual_MotorCtrl_M1+0x7e4>)
 8003ed0:	f002 fa5c 	bl	800638c <HAL_GPIO_WritePin>
 8003ed4:	e02b      	b.n	8003f2e <Bimanual_MotorCtrl_M1+0x736>
					GPIO_PIN_RESET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2104      	movs	r1, #4
 8003eda:	4840      	ldr	r0, [pc, #256]	; (8003fdc <Bimanual_MotorCtrl_M1+0x7e4>)
 8003edc:	f002 fa56 	bl	800638c <HAL_GPIO_WritePin>
 8003ee0:	e025      	b.n	8003f2e <Bimanual_MotorCtrl_M1+0x736>
					GPIO_PIN_SET);
		}
	} else {
		if (Ia_ref1 > 0) {
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <Bimanual_MotorCtrl_M1+0x7dc>)
 8003ee4:	edd3 7a00 	vldr	s15, [r3]
 8003ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	dd05      	ble.n	8003efe <Bimanual_MotorCtrl_M1+0x706>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	2110      	movs	r1, #16
 8003ef6:	4838      	ldr	r0, [pc, #224]	; (8003fd8 <Bimanual_MotorCtrl_M1+0x7e0>)
 8003ef8:	f002 fa48 	bl	800638c <HAL_GPIO_WritePin>
 8003efc:	e004      	b.n	8003f08 <Bimanual_MotorCtrl_M1+0x710>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 8003efe:	2200      	movs	r2, #0
 8003f00:	2110      	movs	r1, #16
 8003f02:	4835      	ldr	r0, [pc, #212]	; (8003fd8 <Bimanual_MotorCtrl_M1+0x7e0>)
 8003f04:	f002 fa42 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 > 0) {
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <Bimanual_MotorCtrl_M1+0x7c8>)
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f16:	dd05      	ble.n	8003f24 <Bimanual_MotorCtrl_M1+0x72c>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2104      	movs	r1, #4
 8003f1c:	482f      	ldr	r0, [pc, #188]	; (8003fdc <Bimanual_MotorCtrl_M1+0x7e4>)
 8003f1e:	f002 fa35 	bl	800638c <HAL_GPIO_WritePin>
 8003f22:	e004      	b.n	8003f2e <Bimanual_MotorCtrl_M1+0x736>
					GPIO_PIN_RESET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8003f24:	2201      	movs	r2, #1
 8003f26:	2104      	movs	r1, #4
 8003f28:	482c      	ldr	r0, [pc, #176]	; (8003fdc <Bimanual_MotorCtrl_M1+0x7e4>)
 8003f2a:	f002 fa2f 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
		}
	}

	volt1 = fabs(Ia_ref1 * 32767 / I_max);
 8003f2e:	4b29      	ldr	r3, [pc, #164]	; (8003fd4 <Bimanual_MotorCtrl_M1+0x7dc>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8003fe0 <Bimanual_MotorCtrl_M1+0x7e8>
 8003f38:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f3c:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <Bimanual_MotorCtrl_M1+0x7ec>)
 8003f3e:	ed93 7a00 	vldr	s14, [r3]
 8003f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f46:	eef0 7ae7 	vabs.f32	s15, s15
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <Bimanual_MotorCtrl_M1+0x7f0>)
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
	volt2 = fabs(Ia_ref2 * 32767 / I_max);
 8003f50:	4b1b      	ldr	r3, [pc, #108]	; (8003fc0 <Bimanual_MotorCtrl_M1+0x7c8>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003fe0 <Bimanual_MotorCtrl_M1+0x7e8>
 8003f5a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <Bimanual_MotorCtrl_M1+0x7ec>)
 8003f60:	ed93 7a00 	vldr	s14, [r3]
 8003f64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f68:	eef0 7ae7 	vabs.f32	s15, s15
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <Bimanual_MotorCtrl_M1+0x7f4>)
 8003f6e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8003f72:	2201      	movs	r2, #1
 8003f74:	2120      	movs	r1, #32
 8003f76:	4818      	ldr	r0, [pc, #96]	; (8003fd8 <Bimanual_MotorCtrl_M1+0x7e0>)
 8003f78:	f002 fa08 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable
	HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER2_ENABLE_Pin,
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	2108      	movs	r1, #8
 8003f80:	4816      	ldr	r0, [pc, #88]	; (8003fdc <Bimanual_MotorCtrl_M1+0x7e4>)
 8003f82:	f002 fa03 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable

	GP8XXX_IIC_setDACOutVoltage(&gp8211s_1, volt1, 0);
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <Bimanual_MotorCtrl_M1+0x7f0>)
 8003f88:	edd3 7a00 	vldr	s15, [r3]
 8003f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f90:	ee17 3a90 	vmov	r3, s15
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4815      	ldr	r0, [pc, #84]	; (8003ff0 <Bimanual_MotorCtrl_M1+0x7f8>)
 8003f9c:	f7fd fb64 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_2, volt2, 0); // offset 72 points
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <Bimanual_MotorCtrl_M1+0x7f4>)
 8003fa2:	edd3 7a00 	vldr	s15, [r3]
 8003fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003faa:	ee17 3a90 	vmov	r3, s15
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	480f      	ldr	r0, [pc, #60]	; (8003ff4 <Bimanual_MotorCtrl_M1+0x7fc>)
 8003fb6:	f7fd fb57 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>

}
 8003fba:	bf00      	nop
 8003fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200008ac 	.word	0x200008ac
 8003fc4:	20000880 	.word	0x20000880
 8003fc8:	20001558 	.word	0x20001558
 8003fcc:	2000082c 	.word	0x2000082c
 8003fd0:	2000156b 	.word	0x2000156b
 8003fd4:	20000894 	.word	0x20000894
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	46fffe00 	.word	0x46fffe00
 8003fe4:	2000003c 	.word	0x2000003c
 8003fe8:	200008a8 	.word	0x200008a8
 8003fec:	200008c0 	.word	0x200008c0
 8003ff0:	20000848 	.word	0x20000848
 8003ff4:	2000085c 	.word	0x2000085c

08003ff8 <Bimanual_MotorCtrl_M2>:

void Bimanual_MotorCtrl_M2(void) {
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	af00      	add	r7, sp, #0

	update_encoder(&enc_instance_M1, &htim1); // update the encoder1
 8003ffc:	4991      	ldr	r1, [pc, #580]	; (8004244 <Bimanual_MotorCtrl_M2+0x24c>)
 8003ffe:	4892      	ldr	r0, [pc, #584]	; (8004248 <Bimanual_MotorCtrl_M2+0x250>)
 8004000:	f001 f9da 	bl	80053b8 <update_encoder>
	update_encoder(&enc_instance_M2, &htim4);
 8004004:	4991      	ldr	r1, [pc, #580]	; (800424c <Bimanual_MotorCtrl_M2+0x254>)
 8004006:	4892      	ldr	r0, [pc, #584]	; (8004250 <Bimanual_MotorCtrl_M2+0x258>)
 8004008:	f001 f9d6 	bl	80053b8 <update_encoder>

	motor1_vel = enc_instance_M1.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 800400c:	4b8e      	ldr	r3, [pc, #568]	; (8004248 <Bimanual_MotorCtrl_M2+0x250>)
 800400e:	ed93 7a00 	vldr	s14, [r3]
 8004012:	4b90      	ldr	r3, [pc, #576]	; (8004254 <Bimanual_MotorCtrl_M2+0x25c>)
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	4b8e      	ldr	r3, [pc, #568]	; (8004258 <Bimanual_MotorCtrl_M2+0x260>)
 800401e:	edc3 7a00 	vstr	s15, [r3]
	motor2_vel = -enc_instance_M2.velocity * RPM_k; // convert ticks per sec to RPM ----- RPM_k = 60/(PPR*gear_ratio)
 8004022:	4b8b      	ldr	r3, [pc, #556]	; (8004250 <Bimanual_MotorCtrl_M2+0x258>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	eeb1 7a67 	vneg.f32	s14, s15
 800402c:	4b89      	ldr	r3, [pc, #548]	; (8004254 <Bimanual_MotorCtrl_M2+0x25c>)
 800402e:	edd3 7a00 	vldr	s15, [r3]
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	4b89      	ldr	r3, [pc, #548]	; (800425c <Bimanual_MotorCtrl_M2+0x264>)
 8004038:	edc3 7a00 	vstr	s15, [r3]

	//apply_average_filter(&filter_instance1, motor1_vel_u, &motor1_vel);
	//apply_average_filter(&filter_instance2, motor2_vel_u, &motor2_vel);

	if (motor2_vel > 0.5) {
 800403c:	4b87      	ldr	r3, [pc, #540]	; (800425c <Bimanual_MotorCtrl_M2+0x264>)
 800403e:	edd3 7a00 	vldr	s15, [r3]
 8004042:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404e:	dd03      	ble.n	8004058 <Bimanual_MotorCtrl_M2+0x60>
		IsDown = 1;
 8004050:	4b83      	ldr	r3, [pc, #524]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e00c      	b.n	8004072 <Bimanual_MotorCtrl_M2+0x7a>
	} else if (motor2_vel < -0.5) {
 8004058:	4b80      	ldr	r3, [pc, #512]	; (800425c <Bimanual_MotorCtrl_M2+0x264>)
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004062:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406a:	d502      	bpl.n	8004072 <Bimanual_MotorCtrl_M2+0x7a>
		IsDown = 0;
 800406c:	4b7c      	ldr	r3, [pc, #496]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 800406e:	2200      	movs	r2, #0
 8004070:	701a      	strb	r2, [r3, #0]
	}

	if (IsDown) {
 8004072:	4b7b      	ldr	r3, [pc, #492]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00f      	beq.n	800409a <Bimanual_MotorCtrl_M2+0xa2>

		motor1_vel = -motor1_vel;
 800407a:	4b77      	ldr	r3, [pc, #476]	; (8004258 <Bimanual_MotorCtrl_M2+0x260>)
 800407c:	edd3 7a00 	vldr	s15, [r3]
 8004080:	eef1 7a67 	vneg.f32	s15, s15
 8004084:	4b74      	ldr	r3, [pc, #464]	; (8004258 <Bimanual_MotorCtrl_M2+0x260>)
 8004086:	edc3 7a00 	vstr	s15, [r3]
		motor2_vel = -motor2_vel;
 800408a:	4b74      	ldr	r3, [pc, #464]	; (800425c <Bimanual_MotorCtrl_M2+0x264>)
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eef1 7a67 	vneg.f32	s15, s15
 8004094:	4b71      	ldr	r3, [pc, #452]	; (800425c <Bimanual_MotorCtrl_M2+0x264>)
 8004096:	edc3 7a00 	vstr	s15, [r3]

	}

	motor1_pos = enc_instance_M1.position * Ticks_to_Deg; // from tick to degrees -> 360.0/(512.0*26.0)
 800409a:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <Bimanual_MotorCtrl_M2+0x250>)
 800409c:	ed93 7a01 	vldr	s14, [r3, #4]
 80040a0:	4b70      	ldr	r3, [pc, #448]	; (8004264 <Bimanual_MotorCtrl_M2+0x26c>)
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040aa:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <Bimanual_MotorCtrl_M2+0x270>)
 80040ac:	edc3 7a00 	vstr	s15, [r3]
	motor2_pos = -enc_instance_M2.position * Ticks_to_Deg;
 80040b0:	4b67      	ldr	r3, [pc, #412]	; (8004250 <Bimanual_MotorCtrl_M2+0x258>)
 80040b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b6:	eeb1 7a67 	vneg.f32	s14, s15
 80040ba:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <Bimanual_MotorCtrl_M2+0x26c>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c4:	4b69      	ldr	r3, [pc, #420]	; (800426c <Bimanual_MotorCtrl_M2+0x274>)
 80040c6:	edc3 7a00 	vstr	s15, [r3]

	//motor1_pos = 180 - motor1_pos;
	//motor2_pos = 180 - motor2_pos;

	T_Dis1 = dob1.T_dis;
 80040ca:	4b69      	ldr	r3, [pc, #420]	; (8004270 <Bimanual_MotorCtrl_M2+0x278>)
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	4a69      	ldr	r2, [pc, #420]	; (8004274 <Bimanual_MotorCtrl_M2+0x27c>)
 80040d0:	6013      	str	r3, [r2, #0]
	T_Rec1_u = rtob1.T_ext;
 80040d2:	4b69      	ldr	r3, [pc, #420]	; (8004278 <Bimanual_MotorCtrl_M2+0x280>)
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	4a69      	ldr	r2, [pc, #420]	; (800427c <Bimanual_MotorCtrl_M2+0x284>)
 80040d8:	6013      	str	r3, [r2, #0]

	T_Dis2 = dob2.T_dis;
 80040da:	4b69      	ldr	r3, [pc, #420]	; (8004280 <Bimanual_MotorCtrl_M2+0x288>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	4a69      	ldr	r2, [pc, #420]	; (8004284 <Bimanual_MotorCtrl_M2+0x28c>)
 80040e0:	6013      	str	r3, [r2, #0]
	T_Rec2_u = rtob2.T_ext;
 80040e2:	4b69      	ldr	r3, [pc, #420]	; (8004288 <Bimanual_MotorCtrl_M2+0x290>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	4a69      	ldr	r2, [pc, #420]	; (800428c <Bimanual_MotorCtrl_M2+0x294>)
 80040e8:	6013      	str	r3, [r2, #0]

	apply_average_filter(&filter_instance1, T_Rec1_u, &T_Rec1);
 80040ea:	4b64      	ldr	r3, [pc, #400]	; (800427c <Bimanual_MotorCtrl_M2+0x284>)
 80040ec:	edd3 7a00 	vldr	s15, [r3]
 80040f0:	4967      	ldr	r1, [pc, #412]	; (8004290 <Bimanual_MotorCtrl_M2+0x298>)
 80040f2:	eeb0 0a67 	vmov.f32	s0, s15
 80040f6:	4867      	ldr	r0, [pc, #412]	; (8004294 <Bimanual_MotorCtrl_M2+0x29c>)
 80040f8:	f001 f9a2 	bl	8005440 <apply_average_filter>
	apply_average_filter(&filter_instance2, T_Rec2_u, &T_Rec2);
 80040fc:	4b63      	ldr	r3, [pc, #396]	; (800428c <Bimanual_MotorCtrl_M2+0x294>)
 80040fe:	edd3 7a00 	vldr	s15, [r3]
 8004102:	4965      	ldr	r1, [pc, #404]	; (8004298 <Bimanual_MotorCtrl_M2+0x2a0>)
 8004104:	eeb0 0a67 	vmov.f32	s0, s15
 8004108:	4864      	ldr	r0, [pc, #400]	; (800429c <Bimanual_MotorCtrl_M2+0x2a4>)
 800410a:	f001 f999 	bl	8005440 <apply_average_filter>

	T_P1 = torque_profile(motor1_pos, IsRo, IsDown) / (26.0 * 80.0);
 800410e:	4b56      	ldr	r3, [pc, #344]	; (8004268 <Bimanual_MotorCtrl_M2+0x270>)
 8004110:	edd3 7a00 	vldr	s15, [r3]
 8004114:	4b62      	ldr	r3, [pc, #392]	; (80042a0 <Bimanual_MotorCtrl_M2+0x2a8>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	4a51      	ldr	r2, [pc, #324]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 800411a:	7812      	ldrb	r2, [r2, #0]
 800411c:	4611      	mov	r1, r2
 800411e:	4618      	mov	r0, r3
 8004120:	eeb0 0a67 	vmov.f32	s0, s15
 8004124:	f7fe febc 	bl	8002ea0 <torque_profile>
 8004128:	ee10 3a10 	vmov	r3, s0
 800412c:	4618      	mov	r0, r3
 800412e:	f7fc fa3b 	bl	80005a8 <__aeabi_f2d>
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	4b5b      	ldr	r3, [pc, #364]	; (80042a4 <Bimanual_MotorCtrl_M2+0x2ac>)
 8004138:	f7fc fbb8 	bl	80008ac <__aeabi_ddiv>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	f7fc fd4a 	bl	8000bdc <__aeabi_d2f>
 8004148:	4603      	mov	r3, r0
 800414a:	4a57      	ldr	r2, [pc, #348]	; (80042a8 <Bimanual_MotorCtrl_M2+0x2b0>)
 800414c:	6013      	str	r3, [r2, #0]
	T_P2 = torque_profile(motor2_pos, IsRo, IsDown) / (26.0 * 80.0);
 800414e:	4b47      	ldr	r3, [pc, #284]	; (800426c <Bimanual_MotorCtrl_M2+0x274>)
 8004150:	edd3 7a00 	vldr	s15, [r3]
 8004154:	4b52      	ldr	r3, [pc, #328]	; (80042a0 <Bimanual_MotorCtrl_M2+0x2a8>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4a41      	ldr	r2, [pc, #260]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 800415a:	7812      	ldrb	r2, [r2, #0]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	eeb0 0a67 	vmov.f32	s0, s15
 8004164:	f7fe fe9c 	bl	8002ea0 <torque_profile>
 8004168:	ee10 3a10 	vmov	r3, s0
 800416c:	4618      	mov	r0, r3
 800416e:	f7fc fa1b 	bl	80005a8 <__aeabi_f2d>
 8004172:	f04f 0200 	mov.w	r2, #0
 8004176:	4b4b      	ldr	r3, [pc, #300]	; (80042a4 <Bimanual_MotorCtrl_M2+0x2ac>)
 8004178:	f7fc fb98 	bl	80008ac <__aeabi_ddiv>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	f7fc fd2a 	bl	8000bdc <__aeabi_d2f>
 8004188:	4603      	mov	r3, r0
 800418a:	4a48      	ldr	r2, [pc, #288]	; (80042ac <Bimanual_MotorCtrl_M2+0x2b4>)
 800418c:	6013      	str	r3, [r2, #0]

//T_P1 = 1;
//T_P2 = 1;

	T_G1 = T_gravity(motor1_pos, IsDown, G1, IsRo) / 26;
 800418e:	4b36      	ldr	r3, [pc, #216]	; (8004268 <Bimanual_MotorCtrl_M2+0x270>)
 8004190:	edd3 7a00 	vldr	s15, [r3]
 8004194:	4b32      	ldr	r3, [pc, #200]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	4a45      	ldr	r2, [pc, #276]	; (80042b0 <Bimanual_MotorCtrl_M2+0x2b8>)
 800419a:	ed92 7a00 	vldr	s14, [r2]
 800419e:	4a40      	ldr	r2, [pc, #256]	; (80042a0 <Bimanual_MotorCtrl_M2+0x2a8>)
 80041a0:	7812      	ldrb	r2, [r2, #0]
 80041a2:	4611      	mov	r1, r2
 80041a4:	eef0 0a47 	vmov.f32	s1, s14
 80041a8:	4618      	mov	r0, r3
 80041aa:	eeb0 0a67 	vmov.f32	s0, s15
 80041ae:	f7ff f84b 	bl	8003248 <T_gravity>
 80041b2:	eeb0 7a40 	vmov.f32	s14, s0
 80041b6:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80041ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041be:	4b3d      	ldr	r3, [pc, #244]	; (80042b4 <Bimanual_MotorCtrl_M2+0x2bc>)
 80041c0:	edc3 7a00 	vstr	s15, [r3]
	T_G2 = T_gravity(motor2_pos, IsDown, G1, IsRo) / 26;
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <Bimanual_MotorCtrl_M2+0x274>)
 80041c6:	edd3 7a00 	vldr	s15, [r3]
 80041ca:	4b25      	ldr	r3, [pc, #148]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	4a38      	ldr	r2, [pc, #224]	; (80042b0 <Bimanual_MotorCtrl_M2+0x2b8>)
 80041d0:	ed92 7a00 	vldr	s14, [r2]
 80041d4:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <Bimanual_MotorCtrl_M2+0x2a8>)
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	4611      	mov	r1, r2
 80041da:	eef0 0a47 	vmov.f32	s1, s14
 80041de:	4618      	mov	r0, r3
 80041e0:	eeb0 0a67 	vmov.f32	s0, s15
 80041e4:	f7ff f830 	bl	8003248 <T_gravity>
 80041e8:	eeb0 7a40 	vmov.f32	s14, s0
 80041ec:	eef3 6a0a 	vmov.f32	s13, #58	; 0x41d00000  26.0
 80041f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f4:	4b30      	ldr	r3, [pc, #192]	; (80042b8 <Bimanual_MotorCtrl_M2+0x2c0>)
 80041f6:	edc3 7a00 	vstr	s15, [r3]

	T_G1 = 0;
 80041fa:	4b2e      	ldr	r3, [pc, #184]	; (80042b4 <Bimanual_MotorCtrl_M2+0x2bc>)
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
	T_G2 = 0;
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <Bimanual_MotorCtrl_M2+0x2c0>)
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

	if (IsDown) {
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <Bimanual_MotorCtrl_M2+0x268>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d056      	beq.n	80042c0 <Bimanual_MotorCtrl_M2+0x2c8>
		k_s = -fabs(k_s);
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <Bimanual_MotorCtrl_M2+0x2c4>)
 8004214:	edd3 7a00 	vldr	s15, [r3]
 8004218:	eef0 7ae7 	vabs.f32	s15, s15
 800421c:	ee17 0a90 	vmov	r0, s15
 8004220:	f7fc f9c2 	bl	80005a8 <__aeabi_f2d>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	f7fc fcd6 	bl	8000bdc <__aeabi_d2f>
 8004230:	4603      	mov	r3, r0
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef1 7a67 	vneg.f32	s15, s15
 800423a:	4b20      	ldr	r3, [pc, #128]	; (80042bc <Bimanual_MotorCtrl_M2+0x2c4>)
 800423c:	edc3 7a00 	vstr	s15, [r3]
 8004240:	e046      	b.n	80042d0 <Bimanual_MotorCtrl_M2+0x2d8>
 8004242:	bf00      	nop
 8004244:	20000448 	.word	0x20000448
 8004248:	200005f0 	.word	0x200005f0
 800424c:	20000494 	.word	0x20000494
 8004250:	20000600 	.word	0x20000600
 8004254:	20001554 	.word	0x20001554
 8004258:	2000087c 	.word	0x2000087c
 800425c:	20000880 	.word	0x20000880
 8004260:	2000156b 	.word	0x2000156b
 8004264:	2000155c 	.word	0x2000155c
 8004268:	2000088c 	.word	0x2000088c
 800426c:	20000890 	.word	0x20000890
 8004270:	200007e8 	.word	0x200007e8
 8004274:	20000898 	.word	0x20000898
 8004278:	20000810 	.word	0x20000810
 800427c:	200008c4 	.word	0x200008c4
 8004280:	200007fc 	.word	0x200007fc
 8004284:	200008b0 	.word	0x200008b0
 8004288:	2000082c 	.word	0x2000082c
 800428c:	200008c8 	.word	0x200008c8
 8004290:	2000089c 	.word	0x2000089c
 8004294:	20000640 	.word	0x20000640
 8004298:	200008b4 	.word	0x200008b4
 800429c:	20000714 	.word	0x20000714
 80042a0:	2000156a 	.word	0x2000156a
 80042a4:	40a04000 	.word	0x40a04000
 80042a8:	200008a0 	.word	0x200008a0
 80042ac:	200008b8 	.word	0x200008b8
 80042b0:	200035f8 	.word	0x200035f8
 80042b4:	200008a4 	.word	0x200008a4
 80042b8:	200008bc 	.word	0x200008bc
 80042bc:	20000008 	.word	0x20000008
		//k_sd = +fabs(k_sd);
	} else {
		k_s = fabs(k_s);
 80042c0:	4bcd      	ldr	r3, [pc, #820]	; (80045f8 <Bimanual_MotorCtrl_M2+0x600>)
 80042c2:	edd3 7a00 	vldr	s15, [r3]
 80042c6:	eef0 7ae7 	vabs.f32	s15, s15
 80042ca:	4bcb      	ldr	r3, [pc, #812]	; (80045f8 <Bimanual_MotorCtrl_M2+0x600>)
 80042cc:	edc3 7a00 	vstr	s15, [r3]
		//k_sd = -fabs(k_sd);
	}

	apply_pid(&pid_instance_M2, (T_P2 + T_G2 - T_Rec2), dt);
 80042d0:	4bca      	ldr	r3, [pc, #808]	; (80045fc <Bimanual_MotorCtrl_M2+0x604>)
 80042d2:	ed93 7a00 	vldr	s14, [r3]
 80042d6:	4bca      	ldr	r3, [pc, #808]	; (8004600 <Bimanual_MotorCtrl_M2+0x608>)
 80042d8:	edd3 7a00 	vldr	s15, [r3]
 80042dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042e0:	4bc8      	ldr	r3, [pc, #800]	; (8004604 <Bimanual_MotorCtrl_M2+0x60c>)
 80042e2:	edd3 7a00 	vldr	s15, [r3]
 80042e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ea:	4bc7      	ldr	r3, [pc, #796]	; (8004608 <Bimanual_MotorCtrl_M2+0x610>)
 80042ec:	ed93 7a00 	vldr	s14, [r3]
 80042f0:	eef0 0a47 	vmov.f32	s1, s14
 80042f4:	eeb0 0a67 	vmov.f32	s0, s15
 80042f8:	48c4      	ldr	r0, [pc, #784]	; (800460c <Bimanual_MotorCtrl_M2+0x614>)
 80042fa:	f000 ffbd 	bl	8005278 <apply_pid>
	apply_pid(&pid_instance_M1,
			(T_P1 + T_G1 - T_Rec1 + k_s * (motor2_pos - motor1_pos)
 80042fe:	4bc4      	ldr	r3, [pc, #784]	; (8004610 <Bimanual_MotorCtrl_M2+0x618>)
 8004300:	ed93 7a00 	vldr	s14, [r3]
 8004304:	4bc3      	ldr	r3, [pc, #780]	; (8004614 <Bimanual_MotorCtrl_M2+0x61c>)
 8004306:	edd3 7a00 	vldr	s15, [r3]
 800430a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800430e:	4bc2      	ldr	r3, [pc, #776]	; (8004618 <Bimanual_MotorCtrl_M2+0x620>)
 8004310:	edd3 7a00 	vldr	s15, [r3]
 8004314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004318:	4bc0      	ldr	r3, [pc, #768]	; (800461c <Bimanual_MotorCtrl_M2+0x624>)
 800431a:	edd3 6a00 	vldr	s13, [r3]
 800431e:	4bc0      	ldr	r3, [pc, #768]	; (8004620 <Bimanual_MotorCtrl_M2+0x628>)
 8004320:	edd3 7a00 	vldr	s15, [r3]
 8004324:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004328:	4bb3      	ldr	r3, [pc, #716]	; (80045f8 <Bimanual_MotorCtrl_M2+0x600>)
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004332:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ k_sd * (motor2_vel - motor1_vel)), dt);
 8004336:	4bbb      	ldr	r3, [pc, #748]	; (8004624 <Bimanual_MotorCtrl_M2+0x62c>)
 8004338:	edd3 6a00 	vldr	s13, [r3]
 800433c:	4bba      	ldr	r3, [pc, #744]	; (8004628 <Bimanual_MotorCtrl_M2+0x630>)
 800433e:	edd3 7a00 	vldr	s15, [r3]
 8004342:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004346:	4bb9      	ldr	r3, [pc, #740]	; (800462c <Bimanual_MotorCtrl_M2+0x634>)
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	apply_pid(&pid_instance_M1,
 8004350:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004354:	4bac      	ldr	r3, [pc, #688]	; (8004608 <Bimanual_MotorCtrl_M2+0x610>)
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	eef0 0a47 	vmov.f32	s1, s14
 800435e:	eeb0 0a67 	vmov.f32	s0, s15
 8004362:	48b3      	ldr	r0, [pc, #716]	; (8004630 <Bimanual_MotorCtrl_M2+0x638>)
 8004364:	f000 ff88 	bl	8005278 <apply_pid>

	Ia_ref1 = ((pid_instance_M1.output) * (0.25 / 5000.0) + T_Dis1) / k_T; // master
 8004368:	4bb1      	ldr	r3, [pc, #708]	; (8004630 <Bimanual_MotorCtrl_M2+0x638>)
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fc f91b 	bl	80005a8 <__aeabi_f2d>
 8004372:	a39f      	add	r3, pc, #636	; (adr r3, 80045f0 <Bimanual_MotorCtrl_M2+0x5f8>)
 8004374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004378:	f7fc f96e 	bl	8000658 <__aeabi_dmul>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4614      	mov	r4, r2
 8004382:	461d      	mov	r5, r3
 8004384:	4bab      	ldr	r3, [pc, #684]	; (8004634 <Bimanual_MotorCtrl_M2+0x63c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4618      	mov	r0, r3
 800438a:	f7fc f90d 	bl	80005a8 <__aeabi_f2d>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fb ffa9 	bl	80002ec <__adddf3>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4614      	mov	r4, r2
 80043a0:	461d      	mov	r5, r3
 80043a2:	4ba5      	ldr	r3, [pc, #660]	; (8004638 <Bimanual_MotorCtrl_M2+0x640>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fc f8fe 	bl	80005a8 <__aeabi_f2d>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4620      	mov	r0, r4
 80043b2:	4629      	mov	r1, r5
 80043b4:	f7fc fa7a 	bl	80008ac <__aeabi_ddiv>
 80043b8:	4602      	mov	r2, r0
 80043ba:	460b      	mov	r3, r1
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f7fc fc0c 	bl	8000bdc <__aeabi_d2f>
 80043c4:	4603      	mov	r3, r0
 80043c6:	4a9d      	ldr	r2, [pc, #628]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 80043c8:	6013      	str	r3, [r2, #0]
	Ia_ref2 = ((pid_instance_M2.output) * (0.25 / 5000.0) + T_Dis2) / k_T; // slave
 80043ca:	4b90      	ldr	r3, [pc, #576]	; (800460c <Bimanual_MotorCtrl_M2+0x614>)
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f8ea 	bl	80005a8 <__aeabi_f2d>
 80043d4:	a386      	add	r3, pc, #536	; (adr r3, 80045f0 <Bimanual_MotorCtrl_M2+0x5f8>)
 80043d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043da:	f7fc f93d 	bl	8000658 <__aeabi_dmul>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4614      	mov	r4, r2
 80043e4:	461d      	mov	r5, r3
 80043e6:	4b96      	ldr	r3, [pc, #600]	; (8004640 <Bimanual_MotorCtrl_M2+0x648>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc f8dc 	bl	80005a8 <__aeabi_f2d>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4620      	mov	r0, r4
 80043f6:	4629      	mov	r1, r5
 80043f8:	f7fb ff78 	bl	80002ec <__adddf3>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4614      	mov	r4, r2
 8004402:	461d      	mov	r5, r3
 8004404:	4b8c      	ldr	r3, [pc, #560]	; (8004638 <Bimanual_MotorCtrl_M2+0x640>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f8cd 	bl	80005a8 <__aeabi_f2d>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4620      	mov	r0, r4
 8004414:	4629      	mov	r1, r5
 8004416:	f7fc fa49 	bl	80008ac <__aeabi_ddiv>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	f7fc fbdb 	bl	8000bdc <__aeabi_d2f>
 8004426:	4603      	mov	r3, r0
 8004428:	4a86      	ldr	r2, [pc, #536]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 800442a:	6013      	str	r3, [r2, #0]

	if (fabs(Ia_ref1) > I_max) {
 800442c:	4b83      	ldr	r3, [pc, #524]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 800442e:	edd3 7a00 	vldr	s15, [r3]
 8004432:	eeb0 7ae7 	vabs.f32	s14, s15
 8004436:	4b84      	ldr	r3, [pc, #528]	; (8004648 <Bimanual_MotorCtrl_M2+0x650>)
 8004438:	edd3 7a00 	vldr	s15, [r3]
 800443c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004444:	dd2d      	ble.n	80044a2 <Bimanual_MotorCtrl_M2+0x4aa>
		Ia_ref1 = (Ia_ref1 / fabs(Ia_ref1)) * I_max;
 8004446:	4b7d      	ldr	r3, [pc, #500]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc f8ac 	bl	80005a8 <__aeabi_f2d>
 8004450:	4604      	mov	r4, r0
 8004452:	460d      	mov	r5, r1
 8004454:	4b79      	ldr	r3, [pc, #484]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 8004456:	edd3 7a00 	vldr	s15, [r3]
 800445a:	eef0 7ae7 	vabs.f32	s15, s15
 800445e:	ee17 0a90 	vmov	r0, s15
 8004462:	f7fc f8a1 	bl	80005a8 <__aeabi_f2d>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4620      	mov	r0, r4
 800446c:	4629      	mov	r1, r5
 800446e:	f7fc fa1d 	bl	80008ac <__aeabi_ddiv>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4614      	mov	r4, r2
 8004478:	461d      	mov	r5, r3
 800447a:	4b73      	ldr	r3, [pc, #460]	; (8004648 <Bimanual_MotorCtrl_M2+0x650>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc f892 	bl	80005a8 <__aeabi_f2d>
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4620      	mov	r0, r4
 800448a:	4629      	mov	r1, r5
 800448c:	f7fc f8e4 	bl	8000658 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f7fc fba0 	bl	8000bdc <__aeabi_d2f>
 800449c:	4603      	mov	r3, r0
 800449e:	4a67      	ldr	r2, [pc, #412]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 80044a0:	6013      	str	r3, [r2, #0]
	}
	if (fabs(Ia_ref2) > I_max) {
 80044a2:	4b68      	ldr	r3, [pc, #416]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 80044a4:	edd3 7a00 	vldr	s15, [r3]
 80044a8:	eeb0 7ae7 	vabs.f32	s14, s15
 80044ac:	4b66      	ldr	r3, [pc, #408]	; (8004648 <Bimanual_MotorCtrl_M2+0x650>)
 80044ae:	edd3 7a00 	vldr	s15, [r3]
 80044b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	dd2d      	ble.n	8004518 <Bimanual_MotorCtrl_M2+0x520>
		Ia_ref2 = (Ia_ref2 / fabs(Ia_ref2)) * I_max;
 80044bc:	4b61      	ldr	r3, [pc, #388]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fc f871 	bl	80005a8 <__aeabi_f2d>
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
 80044ca:	4b5e      	ldr	r3, [pc, #376]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 80044cc:	edd3 7a00 	vldr	s15, [r3]
 80044d0:	eef0 7ae7 	vabs.f32	s15, s15
 80044d4:	ee17 0a90 	vmov	r0, s15
 80044d8:	f7fc f866 	bl	80005a8 <__aeabi_f2d>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fc f9e2 	bl	80008ac <__aeabi_ddiv>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4614      	mov	r4, r2
 80044ee:	461d      	mov	r5, r3
 80044f0:	4b55      	ldr	r3, [pc, #340]	; (8004648 <Bimanual_MotorCtrl_M2+0x650>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7fc f857 	bl	80005a8 <__aeabi_f2d>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fc f8a9 	bl	8000658 <__aeabi_dmul>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4610      	mov	r0, r2
 800450c:	4619      	mov	r1, r3
 800450e:	f7fc fb65 	bl	8000bdc <__aeabi_d2f>
 8004512:	4603      	mov	r3, r0
 8004514:	4a4b      	ldr	r2, [pc, #300]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 8004516:	6013      	str	r3, [r2, #0]
	}

	if (motor2_vel > -0.5) {
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <Bimanual_MotorCtrl_M2+0x62c>)
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8004522:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452a:	dd03      	ble.n	8004534 <Bimanual_MotorCtrl_M2+0x53c>
		Ia_ref2 = 0;
 800452c:	4b45      	ldr	r3, [pc, #276]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
		//Ia_ref2 = 0;
	}

	if (fabs(motor1_pos - motor2_pos) < 0.5) {
 8004534:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <Bimanual_MotorCtrl_M2+0x628>)
 8004536:	ed93 7a00 	vldr	s14, [r3]
 800453a:	4b38      	ldr	r3, [pc, #224]	; (800461c <Bimanual_MotorCtrl_M2+0x624>)
 800453c:	edd3 7a00 	vldr	s15, [r3]
 8004540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004544:	eef0 7ae7 	vabs.f32	s15, s15
 8004548:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800454c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004554:	d503      	bpl.n	800455e <Bimanual_MotorCtrl_M2+0x566>

		Ia_ref1 = 0;
 8004556:	4b39      	ldr	r3, [pc, #228]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
	}

	update_dob(&dob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	eef0 6ae7 	vabs.f32	s13, s15
 8004568:	4b2f      	ldr	r3, [pc, #188]	; (8004628 <Bimanual_MotorCtrl_M2+0x630>)
 800456a:	ed93 7a00 	vldr	s14, [r3]
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <Bimanual_MotorCtrl_M2+0x654>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004578:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800457c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004580:	eef0 0a67 	vmov.f32	s1, s15
 8004584:	eeb0 0a66 	vmov.f32	s0, s13
 8004588:	4831      	ldr	r0, [pc, #196]	; (8004650 <Bimanual_MotorCtrl_M2+0x658>)
 800458a:	f7fd f92f 	bl	80017ec <update_dob>
	update_rtob(&rtob1, fabs(Ia_ref1), motor1_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 800458e:	4b2b      	ldr	r3, [pc, #172]	; (800463c <Bimanual_MotorCtrl_M2+0x644>)
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	eef0 6ae7 	vabs.f32	s13, s15
 8004598:	4b23      	ldr	r3, [pc, #140]	; (8004628 <Bimanual_MotorCtrl_M2+0x630>)
 800459a:	ed93 7a00 	vldr	s14, [r3]
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <Bimanual_MotorCtrl_M2+0x654>)
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b0:	eef0 0a67 	vmov.f32	s1, s15
 80045b4:	eeb0 0a66 	vmov.f32	s0, s13
 80045b8:	4826      	ldr	r0, [pc, #152]	; (8004654 <Bimanual_MotorCtrl_M2+0x65c>)
 80045ba:	f000 ffcf 	bl	800555c <update_rtob>

	update_dob(&dob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); //  &dob1,  Ia_ref,  velocity
 80045be:	4b21      	ldr	r3, [pc, #132]	; (8004644 <Bimanual_MotorCtrl_M2+0x64c>)
 80045c0:	edd3 7a00 	vldr	s15, [r3]
 80045c4:	eef0 6ae7 	vabs.f32	s13, s15
 80045c8:	4b16      	ldr	r3, [pc, #88]	; (8004624 <Bimanual_MotorCtrl_M2+0x62c>)
 80045ca:	ed93 7a00 	vldr	s14, [r3]
 80045ce:	4b1f      	ldr	r3, [pc, #124]	; (800464c <Bimanual_MotorCtrl_M2+0x654>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80045dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e0:	eef0 0a67 	vmov.f32	s1, s15
 80045e4:	eeb0 0a66 	vmov.f32	s0, s13
 80045e8:	481b      	ldr	r0, [pc, #108]	; (8004658 <Bimanual_MotorCtrl_M2+0x660>)
 80045ea:	f7fd f8ff 	bl	80017ec <update_dob>
 80045ee:	e035      	b.n	800465c <Bimanual_MotorCtrl_M2+0x664>
 80045f0:	eb1c432d 	.word	0xeb1c432d
 80045f4:	3f0a36e2 	.word	0x3f0a36e2
 80045f8:	20000008 	.word	0x20000008
 80045fc:	200008b8 	.word	0x200008b8
 8004600:	200008bc 	.word	0x200008bc
 8004604:	200008b4 	.word	0x200008b4
 8004608:	20000004 	.word	0x20000004
 800460c:	20000628 	.word	0x20000628
 8004610:	200008a0 	.word	0x200008a0
 8004614:	200008a4 	.word	0x200008a4
 8004618:	2000089c 	.word	0x2000089c
 800461c:	20000890 	.word	0x20000890
 8004620:	2000088c 	.word	0x2000088c
 8004624:	20000880 	.word	0x20000880
 8004628:	2000087c 	.word	0x2000087c
 800462c:	2000000c 	.word	0x2000000c
 8004630:	20000610 	.word	0x20000610
 8004634:	20000898 	.word	0x20000898
 8004638:	20000034 	.word	0x20000034
 800463c:	20000894 	.word	0x20000894
 8004640:	200008b0 	.word	0x200008b0
 8004644:	200008ac 	.word	0x200008ac
 8004648:	2000003c 	.word	0x2000003c
 800464c:	20001558 	.word	0x20001558
 8004650:	200007e8 	.word	0x200007e8
 8004654:	20000810 	.word	0x20000810
 8004658:	200007fc 	.word	0x200007fc
	update_rtob(&rtob2, fabs(Ia_ref2), motor2_vel * RPM_to_Rads_per_sec * 26.0); // &rtob1, Ia_ref, velocity
 800465c:	4b58      	ldr	r3, [pc, #352]	; (80047c0 <Bimanual_MotorCtrl_M2+0x7c8>)
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	eef0 6ae7 	vabs.f32	s13, s15
 8004666:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <Bimanual_MotorCtrl_M2+0x7cc>)
 8004668:	ed93 7a00 	vldr	s14, [r3]
 800466c:	4b56      	ldr	r3, [pc, #344]	; (80047c8 <Bimanual_MotorCtrl_M2+0x7d0>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004676:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800467a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800467e:	eef0 0a67 	vmov.f32	s1, s15
 8004682:	eeb0 0a66 	vmov.f32	s0, s13
 8004686:	4851      	ldr	r0, [pc, #324]	; (80047cc <Bimanual_MotorCtrl_M2+0x7d4>)
 8004688:	f000 ff68 	bl	800555c <update_rtob>

	if (IsDown) {
 800468c:	4b50      	ldr	r3, [pc, #320]	; (80047d0 <Bimanual_MotorCtrl_M2+0x7d8>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d026      	beq.n	80046e2 <Bimanual_MotorCtrl_M2+0x6ea>
		if (Ia_ref1 < 0) {
 8004694:	4b4f      	ldr	r3, [pc, #316]	; (80047d4 <Bimanual_MotorCtrl_M2+0x7dc>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800469e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046a2:	d505      	bpl.n	80046b0 <Bimanual_MotorCtrl_M2+0x6b8>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 80046a4:	2201      	movs	r2, #1
 80046a6:	2110      	movs	r1, #16
 80046a8:	484b      	ldr	r0, [pc, #300]	; (80047d8 <Bimanual_MotorCtrl_M2+0x7e0>)
 80046aa:	f001 fe6f 	bl	800638c <HAL_GPIO_WritePin>
 80046ae:	e004      	b.n	80046ba <Bimanual_MotorCtrl_M2+0x6c2>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 80046b0:	2200      	movs	r2, #0
 80046b2:	2110      	movs	r1, #16
 80046b4:	4848      	ldr	r0, [pc, #288]	; (80047d8 <Bimanual_MotorCtrl_M2+0x7e0>)
 80046b6:	f001 fe69 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 < 0) {
 80046ba:	4b41      	ldr	r3, [pc, #260]	; (80047c0 <Bimanual_MotorCtrl_M2+0x7c8>)
 80046bc:	edd3 7a00 	vldr	s15, [r3]
 80046c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	d505      	bpl.n	80046d6 <Bimanual_MotorCtrl_M2+0x6de>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 80046ca:	2200      	movs	r2, #0
 80046cc:	2104      	movs	r1, #4
 80046ce:	4843      	ldr	r0, [pc, #268]	; (80047dc <Bimanual_MotorCtrl_M2+0x7e4>)
 80046d0:	f001 fe5c 	bl	800638c <HAL_GPIO_WritePin>
 80046d4:	e02b      	b.n	800472e <Bimanual_MotorCtrl_M2+0x736>
					GPIO_PIN_RESET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 80046d6:	2201      	movs	r2, #1
 80046d8:	2104      	movs	r1, #4
 80046da:	4840      	ldr	r0, [pc, #256]	; (80047dc <Bimanual_MotorCtrl_M2+0x7e4>)
 80046dc:	f001 fe56 	bl	800638c <HAL_GPIO_WritePin>
 80046e0:	e025      	b.n	800472e <Bimanual_MotorCtrl_M2+0x736>
					GPIO_PIN_SET);
		}
	} else {
		if (Ia_ref1 > 0) {
 80046e2:	4b3c      	ldr	r3, [pc, #240]	; (80047d4 <Bimanual_MotorCtrl_M2+0x7dc>)
 80046e4:	edd3 7a00 	vldr	s15, [r3]
 80046e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f0:	dd05      	ble.n	80046fe <Bimanual_MotorCtrl_M2+0x706>
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 80046f2:	2201      	movs	r2, #1
 80046f4:	2110      	movs	r1, #16
 80046f6:	4838      	ldr	r0, [pc, #224]	; (80047d8 <Bimanual_MotorCtrl_M2+0x7e0>)
 80046f8:	f001 fe48 	bl	800638c <HAL_GPIO_WritePin>
 80046fc:	e004      	b.n	8004708 <Bimanual_MotorCtrl_M2+0x710>
					GPIO_PIN_SET);
		} else {
			HAL_GPIO_WritePin(MOTOR1_DIR_GPIO_Port, MOTOR1_DIR_Pin,
 80046fe:	2200      	movs	r2, #0
 8004700:	2110      	movs	r1, #16
 8004702:	4835      	ldr	r0, [pc, #212]	; (80047d8 <Bimanual_MotorCtrl_M2+0x7e0>)
 8004704:	f001 fe42 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_RESET);
		}

		if (Ia_ref2 > 0) {
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <Bimanual_MotorCtrl_M2+0x7c8>)
 800470a:	edd3 7a00 	vldr	s15, [r3]
 800470e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	dd05      	ble.n	8004724 <Bimanual_MotorCtrl_M2+0x72c>
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8004718:	2200      	movs	r2, #0
 800471a:	2104      	movs	r1, #4
 800471c:	482f      	ldr	r0, [pc, #188]	; (80047dc <Bimanual_MotorCtrl_M2+0x7e4>)
 800471e:	f001 fe35 	bl	800638c <HAL_GPIO_WritePin>
 8004722:	e004      	b.n	800472e <Bimanual_MotorCtrl_M2+0x736>
					GPIO_PIN_RESET);
		} else {
			HAL_GPIO_WritePin(MOTOR2_DIR_GPIO_Port, MOTOR2_DIR_Pin,
 8004724:	2201      	movs	r2, #1
 8004726:	2104      	movs	r1, #4
 8004728:	482c      	ldr	r0, [pc, #176]	; (80047dc <Bimanual_MotorCtrl_M2+0x7e4>)
 800472a:	f001 fe2f 	bl	800638c <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
		}
	}

	volt1 = fabs(Ia_ref1 * 32767 / I_max);
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <Bimanual_MotorCtrl_M2+0x7dc>)
 8004730:	edd3 7a00 	vldr	s15, [r3]
 8004734:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80047e0 <Bimanual_MotorCtrl_M2+0x7e8>
 8004738:	ee67 6a87 	vmul.f32	s13, s15, s14
 800473c:	4b29      	ldr	r3, [pc, #164]	; (80047e4 <Bimanual_MotorCtrl_M2+0x7ec>)
 800473e:	ed93 7a00 	vldr	s14, [r3]
 8004742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004746:	eef0 7ae7 	vabs.f32	s15, s15
 800474a:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <Bimanual_MotorCtrl_M2+0x7f0>)
 800474c:	edc3 7a00 	vstr	s15, [r3]
	volt2 = fabs(Ia_ref2 * 32767 / I_max);
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <Bimanual_MotorCtrl_M2+0x7c8>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80047e0 <Bimanual_MotorCtrl_M2+0x7e8>
 800475a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <Bimanual_MotorCtrl_M2+0x7ec>)
 8004760:	ed93 7a00 	vldr	s14, [r3]
 8004764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004768:	eef0 7ae7 	vabs.f32	s15, s15
 800476c:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <Bimanual_MotorCtrl_M2+0x7f4>)
 800476e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(M_DRIVER1_ENABLE_GPIO_Port, M_DRIVER1_ENABLE_Pin,
 8004772:	2201      	movs	r2, #1
 8004774:	2120      	movs	r1, #32
 8004776:	4818      	ldr	r0, [pc, #96]	; (80047d8 <Bimanual_MotorCtrl_M2+0x7e0>)
 8004778:	f001 fe08 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable
	HAL_GPIO_WritePin(M_DRIVER2_ENABLE_GPIO_Port, M_DRIVER2_ENABLE_Pin,
 800477c:	2201      	movs	r2, #1
 800477e:	2108      	movs	r1, #8
 8004780:	4816      	ldr	r0, [pc, #88]	; (80047dc <Bimanual_MotorCtrl_M2+0x7e4>)
 8004782:	f001 fe03 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_SET); // M_Driver1_Enable

	GP8XXX_IIC_setDACOutVoltage(&gp8211s_1, volt1, 0);
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <Bimanual_MotorCtrl_M2+0x7f0>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004790:	ee17 3a90 	vmov	r3, s15
 8004794:	b29b      	uxth	r3, r3
 8004796:	2200      	movs	r2, #0
 8004798:	4619      	mov	r1, r3
 800479a:	4815      	ldr	r0, [pc, #84]	; (80047f0 <Bimanual_MotorCtrl_M2+0x7f8>)
 800479c:	f7fc ff64 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>
	GP8XXX_IIC_setDACOutVoltage(&gp8211s_2, volt2, 0); // offset 72 points
 80047a0:	4b12      	ldr	r3, [pc, #72]	; (80047ec <Bimanual_MotorCtrl_M2+0x7f4>)
 80047a2:	edd3 7a00 	vldr	s15, [r3]
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 3a90 	vmov	r3, s15
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2200      	movs	r2, #0
 80047b2:	4619      	mov	r1, r3
 80047b4:	480f      	ldr	r0, [pc, #60]	; (80047f4 <Bimanual_MotorCtrl_M2+0x7fc>)
 80047b6:	f7fc ff57 	bl	8001668 <GP8XXX_IIC_setDACOutVoltage>

}
 80047ba:	bf00      	nop
 80047bc:	bdb0      	pop	{r4, r5, r7, pc}
 80047be:	bf00      	nop
 80047c0:	200008ac 	.word	0x200008ac
 80047c4:	20000880 	.word	0x20000880
 80047c8:	20001558 	.word	0x20001558
 80047cc:	2000082c 	.word	0x2000082c
 80047d0:	2000156b 	.word	0x2000156b
 80047d4:	20000894 	.word	0x20000894
 80047d8:	40020400 	.word	0x40020400
 80047dc:	40020000 	.word	0x40020000
 80047e0:	46fffe00 	.word	0x46fffe00
 80047e4:	2000003c 	.word	0x2000003c
 80047e8:	200008a8 	.word	0x200008a8
 80047ec:	200008c0 	.word	0x200008c0
 80047f0:	20000848 	.word	0x20000848
 80047f4:	2000085c 	.word	0x2000085c

080047f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80047fe:	f001 faf2 	bl	8005de6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004802:	f000 f9a7 	bl	8004b54 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004806:	f000 fb9f 	bl	8004f48 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800480a:	f000 fb6d 	bl	8004ee8 <MX_USART3_UART_Init>
	MX_TIM1_Init();
 800480e:	f000 fa8b 	bl	8004d28 <MX_TIM1_Init>
	MX_TIM4_Init();
 8004812:	f000 fae3 	bl	8004ddc <MX_TIM4_Init>
	MX_SPI4_Init();
 8004816:	f000 fa49 	bl	8004cac <MX_SPI4_Init>
	MX_FATFS_Init();
 800481a:	f005 fc3d 	bl	800a098 <MX_FATFS_Init>
	MX_I2C3_Init();
 800481e:	f000 fa05 	bl	8004c2c <MX_I2C3_Init>
	MX_USART2_UART_Init();
 8004822:	f000 fb31 	bl	8004e88 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	srand(HAL_GetTick());
 8004826:	f001 faff 	bl	8005e28 <HAL_GetTick>
 800482a:	4603      	mov	r3, r0
 800482c:	4618      	mov	r0, r3
 800482e:	f00a fcdd 	bl	800f1ec <srand>

	fresult = f_mount(&fs, "", 0);
 8004832:	2200      	movs	r2, #0
 8004834:	4992      	ldr	r1, [pc, #584]	; (8004a80 <main+0x288>)
 8004836:	4893      	ldr	r0, [pc, #588]	; (8004a84 <main+0x28c>)
 8004838:	f007 fade 	bl	800bdf8 <f_mount>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	4b91      	ldr	r3, [pc, #580]	; (8004a88 <main+0x290>)
 8004842:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8004844:	4b90      	ldr	r3, [pc, #576]	; (8004a88 <main+0x290>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <main+0x5c>
		send_uart("error in mounting SD Card...\n");
 800484c:	488f      	ldr	r0, [pc, #572]	; (8004a8c <main+0x294>)
 800484e:	f7fd fd55 	bl	80022fc <send_uart>
 8004852:	e002      	b.n	800485a <main+0x62>
	else
		send_uart("SD Card mounted successfully...\n");
 8004854:	488e      	ldr	r0, [pc, #568]	; (8004a90 <main+0x298>)
 8004856:	f7fd fd51 	bl	80022fc <send_uart>

	send_uart(".........................\n");
 800485a:	488e      	ldr	r0, [pc, #568]	; (8004a94 <main+0x29c>)
 800485c:	f7fd fd4e 	bl	80022fc <send_uart>

	xTaskCreate(BM_Task, "BM", 512, NULL, 5, &BM_Task_Hnadler);
 8004860:	4b8d      	ldr	r3, [pc, #564]	; (8004a98 <main+0x2a0>)
 8004862:	9301      	str	r3, [sp, #4]
 8004864:	2305      	movs	r3, #5
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	2300      	movs	r3, #0
 800486a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486e:	498b      	ldr	r1, [pc, #556]	; (8004a9c <main+0x2a4>)
 8004870:	488b      	ldr	r0, [pc, #556]	; (8004aa0 <main+0x2a8>)
 8004872:	f009 f8a6 	bl	800d9c2 <xTaskCreate>
	xTaskCreate(INITIALIZATION_Task, "INIT", 512, NULL, 2,
 8004876:	4b8b      	ldr	r3, [pc, #556]	; (8004aa4 <main+0x2ac>)
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2302      	movs	r3, #2
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004884:	4988      	ldr	r1, [pc, #544]	; (8004aa8 <main+0x2b0>)
 8004886:	4889      	ldr	r0, [pc, #548]	; (8004aac <main+0x2b4>)
 8004888:	f009 f89b 	bl	800d9c2 <xTaskCreate>
			&INITIALIZATION_Task_Hnadler);
	xTaskCreate(SDCARD_Task, "SD", 1024, NULL, 1, &SDCARD_Task_Hnadler);
 800488c:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <main+0x2b8>)
 800488e:	9301      	str	r3, [sp, #4]
 8004890:	2301      	movs	r3, #1
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800489a:	4986      	ldr	r1, [pc, #536]	; (8004ab4 <main+0x2bc>)
 800489c:	4886      	ldr	r0, [pc, #536]	; (8004ab8 <main+0x2c0>)
 800489e:	f009 f890 	bl	800d9c2 <xTaskCreate>

//xTaskCreate(pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask)

// Initialize ADC, encoder, PWM, and set initial parameters
	HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 80048a2:	213c      	movs	r1, #60	; 0x3c
 80048a4:	4885      	ldr	r0, [pc, #532]	; (8004abc <main+0x2c4>)
 80048a6:	f004 fbb9 	bl	800901c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80048aa:	213c      	movs	r1, #60	; 0x3c
 80048ac:	4884      	ldr	r0, [pc, #528]	; (8004ac0 <main+0x2c8>)
 80048ae:	f004 fbb5 	bl	800901c <HAL_TIM_Encoder_Start_IT>

	init_encoder(&enc_instance_M1);
 80048b2:	4884      	ldr	r0, [pc, #528]	; (8004ac4 <main+0x2cc>)
 80048b4:	f000 fd6a 	bl	800538c <init_encoder>
	init_encoder(&enc_instance_M2);
 80048b8:	4883      	ldr	r0, [pc, #524]	; (8004ac8 <main+0x2d0>)
 80048ba:	f000 fd67 	bl	800538c <init_encoder>

	set_pid_gain(&pid_instance_M1, Kp_M, Ki_M, Kd_M); // set gains
 80048be:	4b83      	ldr	r3, [pc, #524]	; (8004acc <main+0x2d4>)
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	4b82      	ldr	r3, [pc, #520]	; (8004ad0 <main+0x2d8>)
 80048c6:	ed93 7a00 	vldr	s14, [r3]
 80048ca:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <main+0x2dc>)
 80048cc:	edd3 6a00 	vldr	s13, [r3]
 80048d0:	eeb0 1a66 	vmov.f32	s2, s13
 80048d4:	eef0 0a47 	vmov.f32	s1, s14
 80048d8:	eeb0 0a67 	vmov.f32	s0, s15
 80048dc:	487e      	ldr	r0, [pc, #504]	; (8004ad8 <main+0x2e0>)
 80048de:	f000 fcb2 	bl	8005246 <set_pid_gain>
	set_pid_gain(&pid_instance_M2, Kp_S, Ki_S, Kd_S); // set gains
 80048e2:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <main+0x2e4>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	4b7d      	ldr	r3, [pc, #500]	; (8004ae0 <main+0x2e8>)
 80048ea:	ed93 7a00 	vldr	s14, [r3]
 80048ee:	4b7d      	ldr	r3, [pc, #500]	; (8004ae4 <main+0x2ec>)
 80048f0:	edd3 6a00 	vldr	s13, [r3]
 80048f4:	eeb0 1a66 	vmov.f32	s2, s13
 80048f8:	eef0 0a47 	vmov.f32	s1, s14
 80048fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004900:	4879      	ldr	r0, [pc, #484]	; (8004ae8 <main+0x2f0>)
 8004902:	f000 fca0 	bl	8005246 <set_pid_gain>

	J1 = findJ(IsMale);
 8004906:	4b79      	ldr	r3, [pc, #484]	; (8004aec <main+0x2f4>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f91c 	bl	8002b48 <findJ>
 8004910:	eef0 7a40 	vmov.f32	s15, s0
 8004914:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <main+0x2f8>)
 8004916:	edc3 7a00 	vstr	s15, [r3]
	J = 0.001;
 800491a:	4b76      	ldr	r3, [pc, #472]	; (8004af4 <main+0x2fc>)
 800491c:	4a76      	ldr	r2, [pc, #472]	; (8004af8 <main+0x300>)
 800491e:	601a      	str	r2, [r3, #0]
	G1 = findG(IsMale);
 8004920:	4b72      	ldr	r3, [pc, #456]	; (8004aec <main+0x2f4>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fa31 	bl	8002d8c <findG>
 800492a:	eef0 7a40 	vmov.f32	s15, s0
 800492e:	4b73      	ldr	r3, [pc, #460]	; (8004afc <main+0x304>)
 8004930:	edc3 7a00 	vstr	s15, [r3]

	set_dob(&dob1, k_T, J, g_dis); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , g_dis = 50
 8004934:	4b72      	ldr	r3, [pc, #456]	; (8004b00 <main+0x308>)
 8004936:	edd3 7a00 	vldr	s15, [r3]
 800493a:	4b6e      	ldr	r3, [pc, #440]	; (8004af4 <main+0x2fc>)
 800493c:	ed93 7a00 	vldr	s14, [r3]
 8004940:	4b70      	ldr	r3, [pc, #448]	; (8004b04 <main+0x30c>)
 8004942:	edd3 6a00 	vldr	s13, [r3]
 8004946:	eeb0 1a66 	vmov.f32	s2, s13
 800494a:	eef0 0a47 	vmov.f32	s1, s14
 800494e:	eeb0 0a67 	vmov.f32	s0, s15
 8004952:	486d      	ldr	r0, [pc, #436]	; (8004b08 <main+0x310>)
 8004954:	f7fc ff2d 	bl	80017b2 <set_dob>
	set_rtob(&rtob1, k_T, J, g_dis, 0.0129, 0.0003);
 8004958:	4b69      	ldr	r3, [pc, #420]	; (8004b00 <main+0x308>)
 800495a:	edd3 7a00 	vldr	s15, [r3]
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <main+0x2fc>)
 8004960:	ed93 7a00 	vldr	s14, [r3]
 8004964:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <main+0x30c>)
 8004966:	edd3 6a00 	vldr	s13, [r3]
 800496a:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8004b0c <main+0x314>
 800496e:	eddf 1a68 	vldr	s3, [pc, #416]	; 8004b10 <main+0x318>
 8004972:	eeb0 1a66 	vmov.f32	s2, s13
 8004976:	eef0 0a47 	vmov.f32	s1, s14
 800497a:	eeb0 0a67 	vmov.f32	s0, s15
 800497e:	4865      	ldr	r0, [pc, #404]	; (8004b14 <main+0x31c>)
 8004980:	f000 fdc4 	bl	800550c <set_rtob>

	set_dob(&dob2, k_T, J, g_dis); // k = 70.5mNm/A  ,  j = 3069.1 gcm2  , g_dis = 50
 8004984:	4b5e      	ldr	r3, [pc, #376]	; (8004b00 <main+0x308>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	4b5a      	ldr	r3, [pc, #360]	; (8004af4 <main+0x2fc>)
 800498c:	ed93 7a00 	vldr	s14, [r3]
 8004990:	4b5c      	ldr	r3, [pc, #368]	; (8004b04 <main+0x30c>)
 8004992:	edd3 6a00 	vldr	s13, [r3]
 8004996:	eeb0 1a66 	vmov.f32	s2, s13
 800499a:	eef0 0a47 	vmov.f32	s1, s14
 800499e:	eeb0 0a67 	vmov.f32	s0, s15
 80049a2:	485d      	ldr	r0, [pc, #372]	; (8004b18 <main+0x320>)
 80049a4:	f7fc ff05 	bl	80017b2 <set_dob>
	set_rtob(&rtob2, k_T, J, g_dis, 0.0129, 0.0003);
 80049a8:	4b55      	ldr	r3, [pc, #340]	; (8004b00 <main+0x308>)
 80049aa:	edd3 7a00 	vldr	s15, [r3]
 80049ae:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <main+0x2fc>)
 80049b0:	ed93 7a00 	vldr	s14, [r3]
 80049b4:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <main+0x30c>)
 80049b6:	edd3 6a00 	vldr	s13, [r3]
 80049ba:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8004b0c <main+0x314>
 80049be:	eddf 1a54 	vldr	s3, [pc, #336]	; 8004b10 <main+0x318>
 80049c2:	eeb0 1a66 	vmov.f32	s2, s13
 80049c6:	eef0 0a47 	vmov.f32	s1, s14
 80049ca:	eeb0 0a67 	vmov.f32	s0, s15
 80049ce:	4853      	ldr	r0, [pc, #332]	; (8004b1c <main+0x324>)
 80049d0:	f000 fd9c 	bl	800550c <set_rtob>

	RPM_k = (float) 60.0 / (PPR * gear_ratio); // to calculate RPM form ticks/s
 80049d4:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <main+0x328>)
 80049d6:	ed93 7a00 	vldr	s14, [r3]
 80049da:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <main+0x32c>)
 80049dc:	edd3 7a00 	vldr	s15, [r3]
 80049e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80049e4:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004b28 <main+0x330>
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	4b4f      	ldr	r3, [pc, #316]	; (8004b2c <main+0x334>)
 80049ee:	edc3 7a00 	vstr	s15, [r3]
	RPM_to_Rads_per_sec = 2.0 * 3.14 / 60.0; // to calculate rads per sec from rpm
 80049f2:	4b4f      	ldr	r3, [pc, #316]	; (8004b30 <main+0x338>)
 80049f4:	4a4f      	ldr	r2, [pc, #316]	; (8004b34 <main+0x33c>)
 80049f6:	601a      	str	r2, [r3, #0]
	Ticks_to_Deg = 360.0 / (512.0 * 26.0); // to calculate degrees form ticks
 80049f8:	4b4f      	ldr	r3, [pc, #316]	; (8004b38 <main+0x340>)
 80049fa:	4a50      	ldr	r2, [pc, #320]	; (8004b3c <main+0x344>)
 80049fc:	601a      	str	r2, [r3, #0]

	/*********************************DAC configuration *******************************************************/
	GP8XXX_IIC_begin(&gp8211s_1, GP8211S_identifier, 0x58, GPIOB,
 80049fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a02:	9302      	str	r3, [sp, #8]
 8004a04:	4b4e      	ldr	r3, [pc, #312]	; (8004b40 <main+0x348>)
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	2340      	movs	r3, #64	; 0x40
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4b4c      	ldr	r3, [pc, #304]	; (8004b40 <main+0x348>)
 8004a0e:	2258      	movs	r2, #88	; 0x58
 8004a10:	2101      	movs	r1, #1
 8004a12:	484c      	ldr	r0, [pc, #304]	; (8004b44 <main+0x34c>)
 8004a14:	f7fc fba6 	bl	8001164 <GP8XXX_IIC_begin>
	GPIO_PIN_6,
	GPIOB, GPIO_PIN_9);
	GP8XXX_IIC_begin(&gp8211s_2, GP8211S_identifier, 0x58, GPIOF,
 8004a18:	2302      	movs	r3, #2
 8004a1a:	9302      	str	r3, [sp, #8]
 8004a1c:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <main+0x350>)
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	2301      	movs	r3, #1
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <main+0x350>)
 8004a26:	2258      	movs	r2, #88	; 0x58
 8004a28:	2101      	movs	r1, #1
 8004a2a:	4848      	ldr	r0, [pc, #288]	; (8004b4c <main+0x354>)
 8004a2c:	f7fc fb9a 	bl	8001164 <GP8XXX_IIC_begin>
	GPIO_PIN_0,
	GPIOF, GPIO_PIN_1);

	GP8XXX_IIC_setDACOutRange(&gp8211s_1, eOutputRange10V); // 10V
 8004a30:	2102      	movs	r1, #2
 8004a32:	4844      	ldr	r0, [pc, #272]	; (8004b44 <main+0x34c>)
 8004a34:	f7fc fde8 	bl	8001608 <GP8XXX_IIC_setDACOutRange>
	GP8XXX_IIC_setDACOutRange(&gp8211s_2, eOutputRange10V); // 10V
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4844      	ldr	r0, [pc, #272]	; (8004b4c <main+0x354>)
 8004a3c:	f7fc fde4 	bl	8001608 <GP8XXX_IIC_setDACOutRange>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //BLUE LED
 8004a40:	2200      	movs	r2, #0
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	483e      	ldr	r0, [pc, #248]	; (8004b40 <main+0x348>)
 8004a46:	f001 fca1 	bl	800638c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET); //M_Driver1_Enable
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a50:	483f      	ldr	r0, [pc, #252]	; (8004b50 <main+0x358>)
 8004a52:	f001 fc9b 	bl	800638c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //RED LED
 8004a56:	2200      	movs	r2, #0
 8004a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a5c:	4838      	ldr	r0, [pc, #224]	; (8004b40 <main+0x348>)
 8004a5e:	f001 fc95 	bl	800638c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //GREEN LED
 8004a62:	2200      	movs	r2, #0
 8004a64:	2101      	movs	r1, #1
 8004a66:	4836      	ldr	r0, [pc, #216]	; (8004b40 <main+0x348>)
 8004a68:	f001 fc90 	bl	800638c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET); // SD led
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a72:	4835      	ldr	r0, [pc, #212]	; (8004b48 <main+0x350>)
 8004a74:	f001 fc8a 	bl	800638c <HAL_GPIO_WritePin>

	 Flash_Write_NUM(0x0800D100, val);
	 RxVal2 = Flash_Read_NUM(0x0800D100);*/
	/************************************************************************************/

	vTaskStartScheduler();
 8004a78:	f009 f928 	bl	800dccc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8004a7c:	e7fe      	b.n	8004a7c <main+0x284>
 8004a7e:	bf00      	nop
 8004a80:	080116f4 	.word	0x080116f4
 8004a84:	20001578 	.word	0x20001578
 8004a88:	200035e0 	.word	0x200035e0
 8004a8c:	080116f8 	.word	0x080116f8
 8004a90:	08011718 	.word	0x08011718
 8004a94:	0801173c 	.word	0x0801173c
 8004a98:	20000870 	.word	0x20000870
 8004a9c:	08011758 	.word	0x08011758
 8004aa0:	080028dd 	.word	0x080028dd
 8004aa4:	20000878 	.word	0x20000878
 8004aa8:	0801175c 	.word	0x0801175c
 8004aac:	080024e9 	.word	0x080024e9
 8004ab0:	20000874 	.word	0x20000874
 8004ab4:	08011764 	.word	0x08011764
 8004ab8:	0800232d 	.word	0x0800232d
 8004abc:	20000448 	.word	0x20000448
 8004ac0:	20000494 	.word	0x20000494
 8004ac4:	200005f0 	.word	0x200005f0
 8004ac8:	20000600 	.word	0x20000600
 8004acc:	20000014 	.word	0x20000014
 8004ad0:	20000018 	.word	0x20000018
 8004ad4:	2000001c 	.word	0x2000001c
 8004ad8:	20000610 	.word	0x20000610
 8004adc:	20000020 	.word	0x20000020
 8004ae0:	20000024 	.word	0x20000024
 8004ae4:	20000028 	.word	0x20000028
 8004ae8:	20000628 	.word	0x20000628
 8004aec:	2000156c 	.word	0x2000156c
 8004af0:	200035f4 	.word	0x200035f4
 8004af4:	20001570 	.word	0x20001570
 8004af8:	3a83126f 	.word	0x3a83126f
 8004afc:	200035f8 	.word	0x200035f8
 8004b00:	20000034 	.word	0x20000034
 8004b04:	2000004c 	.word	0x2000004c
 8004b08:	200007e8 	.word	0x200007e8
 8004b0c:	399d4952 	.word	0x399d4952
 8004b10:	3c535a86 	.word	0x3c535a86
 8004b14:	20000810 	.word	0x20000810
 8004b18:	200007fc 	.word	0x200007fc
 8004b1c:	2000082c 	.word	0x2000082c
 8004b20:	2000002c 	.word	0x2000002c
 8004b24:	20000030 	.word	0x20000030
 8004b28:	42700000 	.word	0x42700000
 8004b2c:	20001554 	.word	0x20001554
 8004b30:	20001558 	.word	0x20001558
 8004b34:	3dd65b7a 	.word	0x3dd65b7a
 8004b38:	2000155c 	.word	0x2000155c
 8004b3c:	3cdd89d9 	.word	0x3cdd89d9
 8004b40:	40020400 	.word	0x40020400
 8004b44:	20000848 	.word	0x20000848
 8004b48:	40021400 	.word	0x40021400
 8004b4c:	2000085c 	.word	0x2000085c
 8004b50:	40021000 	.word	0x40021000

08004b54 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b094      	sub	sp, #80	; 0x50
 8004b58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b5a:	f107 0320 	add.w	r3, r7, #32
 8004b5e:	2230      	movs	r2, #48	; 0x30
 8004b60:	2100      	movs	r1, #0
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00a fc97 	bl	800f496 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <SystemClock_Config+0xd0>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <SystemClock_Config+0xd0>)
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	; 0x40
 8004b84:	4b27      	ldr	r3, [pc, #156]	; (8004c24 <SystemClock_Config+0xd0>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <SystemClock_Config+0xd4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a24      	ldr	r2, [pc, #144]	; (8004c28 <SystemClock_Config+0xd4>)
 8004b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	4b22      	ldr	r3, [pc, #136]	; (8004c28 <SystemClock_Config+0xd4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb2:	2302      	movs	r3, #2
 8004bb4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8004bc0:	23d8      	movs	r3, #216	; 0xd8
 8004bc2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004bcc:	f107 0320 	add.w	r3, r7, #32
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f002 f9f5 	bl	8006fc0 <HAL_RCC_OscConfig>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <SystemClock_Config+0x8c>
		Error_Handler();
 8004bdc:	f000 fb2e 	bl	800523c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004be0:	f002 f99e 	bl	8006f20 <HAL_PWREx_EnableOverDrive>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <SystemClock_Config+0x9a>
		Error_Handler();
 8004bea:	f000 fb27 	bl	800523c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004bee:	230f      	movs	r3, #15
 8004bf0:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004bfe:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c04:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8004c06:	f107 030c 	add.w	r3, r7, #12
 8004c0a:	2107      	movs	r1, #7
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f002 fc7b 	bl	8007508 <HAL_RCC_ClockConfig>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d001      	beq.n	8004c1c <SystemClock_Config+0xc8>
		Error_Handler();
 8004c18:	f000 fb10 	bl	800523c <Error_Handler>
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	3750      	adds	r7, #80	; 0x50
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000

08004c2c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <MX_I2C3_Init+0x78>)
 8004c34:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c38:	4a1b      	ldr	r2, [pc, #108]	; (8004ca8 <MX_I2C3_Init+0x7c>)
 8004c3a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c42:	4b17      	ldr	r3, [pc, #92]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c54:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c60:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8004c66:	480e      	ldr	r0, [pc, #56]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c68:	f001 fbdc 	bl	8006424 <HAL_I2C_Init>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <MX_I2C3_Init+0x4a>
		Error_Handler();
 8004c72:	f000 fae3 	bl	800523c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8004c76:	2100      	movs	r1, #0
 8004c78:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c7a:	f002 f8b9 	bl	8006df0 <HAL_I2CEx_ConfigAnalogFilter>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8004c84:	f000 fada 	bl	800523c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <MX_I2C3_Init+0x74>)
 8004c8c:	f002 f8fb 	bl	8006e86 <HAL_I2CEx_ConfigDigitalFilter>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <MX_I2C3_Init+0x6e>
		Error_Handler();
 8004c96:	f000 fad1 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000390 	.word	0x20000390
 8004ca4:	40005c00 	.word	0x40005c00
 8004ca8:	20404768 	.word	0x20404768

08004cac <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cb2:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <MX_SPI4_Init+0x78>)
 8004cb4:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cbc:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004cbe:	4b18      	ldr	r3, [pc, #96]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004cc4:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cc6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004cca:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cde:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004ce0:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004ce2:	2228      	movs	r2, #40	; 0x28
 8004ce4:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004cfa:	2207      	movs	r2, #7
 8004cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004d06:	2208      	movs	r2, #8
 8004d08:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8004d0a:	4805      	ldr	r0, [pc, #20]	; (8004d20 <MX_SPI4_Init+0x74>)
 8004d0c:	f003 fa44 	bl	8008198 <HAL_SPI_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_SPI4_Init+0x6e>
		Error_Handler();
 8004d16:	f000 fa91 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8004d1a:	bf00      	nop
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	200003e4 	.word	0x200003e4
 8004d24:	40013400 	.word	0x40013400

08004d28 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08c      	sub	sp, #48	; 0x30
 8004d2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f00a fbad 	bl	800f496 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	605a      	str	r2, [r3, #4]
 8004d44:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d48:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <MX_TIM1_Init+0xb0>)
 8004d4a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8004d4c:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8004d58:	4b1e      	ldr	r3, [pc, #120]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d5e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d60:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8004d66:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004d72:	2303      	movs	r3, #3
 8004d74:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004d76:	2302      	movs	r3, #2
 8004d78:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004d86:	2302      	movs	r3, #2
 8004d88:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004d9e:	f004 f897 	bl	8008ed0 <HAL_TIM_Encoder_Init>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <MX_TIM1_Init+0x84>
		Error_Handler();
 8004da8:	f000 fa48 	bl	800523c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dac:	2300      	movs	r3, #0
 8004dae:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8004db8:	463b      	mov	r3, r7
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4805      	ldr	r0, [pc, #20]	; (8004dd4 <MX_TIM1_Init+0xac>)
 8004dbe:	f004 fbe9 	bl	8009594 <HAL_TIMEx_MasterConfigSynchronization>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_TIM1_Init+0xa4>
			!= HAL_OK) {
		Error_Handler();
 8004dc8:	f000 fa38 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8004dcc:	bf00      	nop
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000448 	.word	0x20000448
 8004dd8:	40010000 	.word	0x40010000

08004ddc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	; 0x30
 8004de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8004de2:	f107 030c 	add.w	r3, r7, #12
 8004de6:	2224      	movs	r2, #36	; 0x24
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f00a fb53 	bl	800f496 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004df0:	463b      	mov	r3, r7
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	605a      	str	r2, [r3, #4]
 8004df8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004dfc:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <MX_TIM4_Init+0xa8>)
 8004dfe:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8004e00:	4b1f      	ldr	r3, [pc, #124]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e06:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e12:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e14:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e1a:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004e20:	2303      	movs	r3, #3
 8004e22:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8004e24:	2302      	movs	r3, #2
 8004e26:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8004e34:	2302      	movs	r3, #2
 8004e36:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8004e44:	f107 030c 	add.w	r3, r7, #12
 8004e48:	4619      	mov	r1, r3
 8004e4a:	480d      	ldr	r0, [pc, #52]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e4c:	f004 f840 	bl	8008ed0 <HAL_TIM_Encoder_Init>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM4_Init+0x7e>
		Error_Handler();
 8004e56:	f000 f9f1 	bl	800523c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004e62:	463b      	mov	r3, r7
 8004e64:	4619      	mov	r1, r3
 8004e66:	4806      	ldr	r0, [pc, #24]	; (8004e80 <MX_TIM4_Init+0xa4>)
 8004e68:	f004 fb94 	bl	8009594 <HAL_TIMEx_MasterConfigSynchronization>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8004e72:	f000 f9e3 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8004e76:	bf00      	nop
 8004e78:	3730      	adds	r7, #48	; 0x30
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000494 	.word	0x20000494
 8004e84:	40000800 	.word	0x40000800

08004e88 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004e8e:	4a15      	ldr	r2, [pc, #84]	; (8004ee4 <MX_USART2_UART_Init+0x5c>)
 8004e90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004ea0:	4b0f      	ldr	r3, [pc, #60]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004ea6:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004eae:	220c      	movs	r2, #12
 8004eb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb8:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004eca:	4805      	ldr	r0, [pc, #20]	; (8004ee0 <MX_USART2_UART_Init+0x58>)
 8004ecc:	f004 fc0e 	bl	80096ec <HAL_UART_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8004ed6:	f000 f9b1 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200004e0 	.word	0x200004e0
 8004ee4:	40004400 	.word	0x40004400

08004ee8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004eec:	4b14      	ldr	r3, [pc, #80]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004eee:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <MX_USART3_UART_Init+0x5c>)
 8004ef0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004ef8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004f0c:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f0e:	220c      	movs	r2, #12
 8004f10:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f18:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004f2a:	4805      	ldr	r0, [pc, #20]	; (8004f40 <MX_USART3_UART_Init+0x58>)
 8004f2c:	f004 fbde 	bl	80096ec <HAL_UART_Init>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8004f36:	f000 f981 	bl	800523c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000568 	.word	0x20000568
 8004f44:	40004800 	.word	0x40004800

08004f48 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	605a      	str	r2, [r3, #4]
 8004f58:	609a      	str	r2, [r3, #8]
 8004f5a:	60da      	str	r2, [r3, #12]
 8004f5c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004f5e:	4ba7      	ldr	r3, [pc, #668]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	4aa6      	ldr	r2, [pc, #664]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f64:	f043 0310 	orr.w	r3, r3, #16
 8004f68:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6a:	4ba4      	ldr	r3, [pc, #656]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f003 0310 	and.w	r3, r3, #16
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004f76:	4ba1      	ldr	r3, [pc, #644]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4aa0      	ldr	r2, [pc, #640]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f7c:	f043 0304 	orr.w	r3, r3, #4
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b9e      	ldr	r3, [pc, #632]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0304 	and.w	r3, r3, #4
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004f8e:	4b9b      	ldr	r3, [pc, #620]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f92:	4a9a      	ldr	r2, [pc, #616]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f94:	f043 0320 	orr.w	r3, r3, #32
 8004f98:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9a:	4b98      	ldr	r3, [pc, #608]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9e:	f003 0320 	and.w	r3, r3, #32
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004fa6:	4b95      	ldr	r3, [pc, #596]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004faa:	4a94      	ldr	r2, [pc, #592]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb2:	4b92      	ldr	r3, [pc, #584]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004fbe:	4b8f      	ldr	r3, [pc, #572]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc2:	4a8e      	ldr	r2, [pc, #568]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fc4:	f043 0301 	orr.w	r3, r3, #1
 8004fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fca:	4b8c      	ldr	r3, [pc, #560]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd6:	4b89      	ldr	r3, [pc, #548]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a88      	ldr	r2, [pc, #544]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b86      	ldr	r3, [pc, #536]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004fee:	4b83      	ldr	r3, [pc, #524]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a82      	ldr	r2, [pc, #520]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004ff4:	f043 0308 	orr.w	r3, r3, #8
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b80      	ldr	r3, [pc, #512]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8005006:	4b7d      	ldr	r3, [pc, #500]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4a7c      	ldr	r2, [pc, #496]	; (80051fc <MX_GPIO_Init+0x2b4>)
 800500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005010:	6313      	str	r3, [r2, #48]	; 0x30
 8005012:	4b7a      	ldr	r3, [pc, #488]	; (80051fc <MX_GPIO_Init+0x2b4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF,
 800501e:	2200      	movs	r2, #0
 8005020:	f244 2108 	movw	r1, #16904	; 0x4208
 8005024:	4876      	ldr	r0, [pc, #472]	; (8005200 <MX_GPIO_Init+0x2b8>)
 8005026:	f001 f9b1 	bl	800638c <HAL_GPIO_WritePin>
	__Pin | SD_Indication_Pin | SD_Writing_Indicator_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, MOTOR2_DIREC_Pin | M_DRIVER2_ENABLE_Pin,
 800502a:	2200      	movs	r2, #0
 800502c:	210c      	movs	r1, #12
 800502e:	4875      	ldr	r0, [pc, #468]	; (8005204 <MX_GPIO_Init+0x2bc>)
 8005030:	f001 f9ac 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Error_Indication_2_GPIO_Port, Error_Indication_2_Pin,
 8005034:	2200      	movs	r2, #0
 8005036:	2120      	movs	r1, #32
 8005038:	4873      	ldr	r0, [pc, #460]	; (8005208 <MX_GPIO_Init+0x2c0>)
 800503a:	f001 f9a7 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800503e:	2200      	movs	r2, #0
 8005040:	f245 31b5 	movw	r1, #21429	; 0x53b5
 8005044:	4871      	ldr	r0, [pc, #452]	; (800520c <MX_GPIO_Init+0x2c4>)
 8005046:	f001 f9a1 	bl	800638c <HAL_GPIO_WritePin>
			SD_SC_LD1_Pin | Error_Indication_1_Pin | For_Testing_Pin | LD3_Pin
					| MOTOR1_DIREC_Pin | M_DRIVER1_ENABLE_Pin | LD2_Pin
					| GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin | GPIO_PIN_9,
 800504a:	2200      	movs	r2, #0
 800504c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005050:	486f      	ldr	r0, [pc, #444]	; (8005210 <MX_GPIO_Init+0x2c8>)
 8005052:	f001 f99b 	bl	800638c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(NodeMCU_CS_GPIO_Port, NodeMCU_CS_Pin, GPIO_PIN_SET);
 8005056:	2201      	movs	r2, #1
 8005058:	2101      	movs	r1, #1
 800505a:	486e      	ldr	r0, [pc, #440]	; (8005214 <MX_GPIO_Init+0x2cc>)
 800505c:	f001 f996 	bl	800638c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_BTN_Pin */
	GPIO_InitStruct.Pin = USER_BTN_Pin;
 8005060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005066:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8005070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005074:	4619      	mov	r1, r3
 8005076:	4864      	ldr	r0, [pc, #400]	; (8005208 <MX_GPIO_Init+0x2c0>)
 8005078:	f000 ffc4 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : __Pin SD_Indication_Pin SD_Writing_Indicator_Pin */
	GPIO_InitStruct.Pin = __Pin | SD_Indication_Pin | SD_Writing_Indicator_Pin;
 800507c:	f244 2308 	movw	r3, #16904	; 0x4208
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005082:	2301      	movs	r3, #1
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800508a:	2300      	movs	r3, #0
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800508e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005092:	4619      	mov	r1, r3
 8005094:	485a      	ldr	r0, [pc, #360]	; (8005200 <MX_GPIO_Init+0x2b8>)
 8005096:	f000 ffb5 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : MOTOR2_DIREC_Pin M_DRIVER2_ENABLE_Pin */
	GPIO_InitStruct.Pin = MOTOR2_DIREC_Pin | M_DRIVER2_ENABLE_Pin;
 800509a:	230c      	movs	r3, #12
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800509e:	2301      	movs	r3, #1
 80050a0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a6:	2300      	movs	r3, #0
 80050a8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ae:	4619      	mov	r1, r3
 80050b0:	4854      	ldr	r0, [pc, #336]	; (8005204 <MX_GPIO_Init+0x2bc>)
 80050b2:	f000 ffa7 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : Mode_Selection_1_Pin Mode_Selection_2_Pin Mode_Selection_3_Pin DATA_READY_Pin
	 Limit_SW1_Pin Limit_SW2_Pin */
	GPIO_InitStruct.Pin = Mode_Selection_1_Pin | Mode_Selection_2_Pin
 80050b6:	f44f 53d7 	mov.w	r3, #6880	; 0x1ae0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
			| Mode_Selection_3_Pin | DATA_READY_Pin | Limit_SW1_Pin
			| Limit_SW2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050bc:	2300      	movs	r3, #0
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c8:	4619      	mov	r1, r3
 80050ca:	484e      	ldr	r0, [pc, #312]	; (8005204 <MX_GPIO_Init+0x2bc>)
 80050cc:	f000 ff9a 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : Error_Indication_2_Pin */
	GPIO_InitStruct.Pin = Error_Indication_2_Pin;
 80050d0:	2320      	movs	r3, #32
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050d4:	2301      	movs	r3, #1
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050dc:	2300      	movs	r3, #0
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Error_Indication_2_GPIO_Port, &GPIO_InitStruct);
 80050e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050e4:	4619      	mov	r1, r3
 80050e6:	4848      	ldr	r0, [pc, #288]	; (8005208 <MX_GPIO_Init+0x2c0>)
 80050e8:	f000 ff8c 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_SC_LD1_Pin Error_Indication_1_Pin LD3_Pin MOTOR1_DIREC_Pin
	 M_DRIVER1_ENABLE_Pin LD2_Pin PB8 PB9 */
	GPIO_InitStruct.Pin = SD_SC_LD1_Pin | Error_Indication_1_Pin | LD3_Pin
 80050ec:	f244 33b5 	movw	r3, #17333	; 0x43b5
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
			| MOTOR1_DIREC_Pin | M_DRIVER1_ENABLE_Pin | LD2_Pin | GPIO_PIN_8
			| GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050f2:	2301      	movs	r3, #1
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050fa:	2300      	movs	r3, #0
 80050fc:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	4619      	mov	r1, r3
 8005104:	4841      	ldr	r0, [pc, #260]	; (800520c <MX_GPIO_Init+0x2c4>)
 8005106:	f000 ff7d 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : MST_SLV_SHIFT_Pin SD_WRITING_EN_SWITCH_PIN_Pin */
	GPIO_InitStruct.Pin = MST_SLV_SHIFT_Pin | SD_WRITING_EN_SWITCH_PIN_Pin;
 800510a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005110:	2300      	movs	r3, #0
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005114:	2301      	movs	r3, #1
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800511c:	4619      	mov	r1, r3
 800511e:	4838      	ldr	r0, [pc, #224]	; (8005200 <MX_GPIO_Init+0x2b8>)
 8005120:	f000 ff70 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : START_STOP_BTN_Pin */
	GPIO_InitStruct.Pin = START_STOP_BTN_Pin;
 8005124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800512a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800512e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005130:	2301      	movs	r3, #1
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(START_STOP_BTN_GPIO_Port, &GPIO_InitStruct);
 8005134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005138:	4619      	mov	r1, r3
 800513a:	4836      	ldr	r0, [pc, #216]	; (8005214 <MX_GPIO_Init+0x2cc>)
 800513c:	f000 ff62 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : CHANGE_EXERCISE_Pin */
	GPIO_InitStruct.Pin = CHANGE_EXERCISE_Pin;
 8005140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005144:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005146:	2300      	movs	r3, #0
 8005148:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800514a:	2301      	movs	r3, #1
 800514c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CHANGE_EXERCISE_GPIO_Port, &GPIO_InitStruct);
 800514e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005152:	4619      	mov	r1, r3
 8005154:	482d      	ldr	r0, [pc, #180]	; (800520c <MX_GPIO_Init+0x2c4>)
 8005156:	f000 ff55 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : For_Testing_Pin */
	GPIO_InitStruct.Pin = For_Testing_Pin;
 800515a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005160:	2301      	movs	r3, #1
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005164:	2302      	movs	r3, #2
 8005166:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005168:	2300      	movs	r3, #0
 800516a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(For_Testing_GPIO_Port, &GPIO_InitStruct);
 800516c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005170:	4619      	mov	r1, r3
 8005172:	4826      	ldr	r0, [pc, #152]	; (800520c <MX_GPIO_Init+0x2c4>)
 8005174:	f000 ff46 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_PowerSwitchOn_Pin PG9 */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin | GPIO_PIN_9;
 8005178:	f44f 7310 	mov.w	r3, #576	; 0x240
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800517e:	2301      	movs	r3, #1
 8005180:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005182:	2300      	movs	r3, #0
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005186:	2300      	movs	r3, #0
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800518a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800518e:	4619      	mov	r1, r3
 8005190:	481f      	ldr	r0, [pc, #124]	; (8005210 <MX_GPIO_Init+0x2c8>)
 8005192:	f000 ff37 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800519a:	2300      	movs	r3, #0
 800519c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80051a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051a6:	4619      	mov	r1, r3
 80051a8:	4819      	ldr	r0, [pc, #100]	; (8005210 <MX_GPIO_Init+0x2c8>)
 80051aa:	f000 ff2b 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pins : Limit_SW3_Pin Limit_SW4_Pin */
	GPIO_InitStruct.Pin = Limit_SW3_Pin | Limit_SW4_Pin;
 80051ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051c0:	4619      	mov	r1, r3
 80051c2:	4811      	ldr	r0, [pc, #68]	; (8005208 <MX_GPIO_Init+0x2c0>)
 80051c4:	f000 ff1e 	bl	8006004 <HAL_GPIO_Init>

	/*Configure GPIO pin : NodeMCU_CS_Pin */
	GPIO_InitStruct.Pin = NodeMCU_CS_Pin;
 80051c8:	2301      	movs	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051cc:	2301      	movs	r3, #1
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d4:	2300      	movs	r3, #0
 80051d6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(NodeMCU_CS_GPIO_Port, &GPIO_InitStruct);
 80051d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051dc:	4619      	mov	r1, r3
 80051de:	480d      	ldr	r0, [pc, #52]	; (8005214 <MX_GPIO_Init+0x2cc>)
 80051e0:	f000 ff10 	bl	8006004 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80051e4:	2200      	movs	r2, #0
 80051e6:	2105      	movs	r1, #5
 80051e8:	2028      	movs	r0, #40	; 0x28
 80051ea:	f000 fee1 	bl	8005fb0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80051ee:	2028      	movs	r0, #40	; 0x28
 80051f0:	f000 fefa 	bl	8005fe8 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80051f4:	bf00      	nop
 80051f6:	3738      	adds	r7, #56	; 0x38
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	40021400 	.word	0x40021400
 8005204:	40020000 	.word	0x40020000
 8005208:	40020800 	.word	0x40020800
 800520c:	40020400 	.word	0x40020400
 8005210:	40021800 	.word	0x40021800
 8005214:	40021000 	.word	0x40021000

08005218 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a04      	ldr	r2, [pc, #16]	; (8005238 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800522a:	f000 fde9 	bl	8005e00 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40001000 	.word	0x40001000

0800523c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800523c:	b480      	push	{r7}
 800523e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005240:	b672      	cpsid	i
}
 8005242:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005244:	e7fe      	b.n	8005244 <Error_Handler+0x8>

08005246 <set_pid_gain>:
#define INTEGRAL_GAIN_MAX 2000000
//#define PID_MAX 2047
#define PID_MAX 5000

// Set PID gains
void set_pid_gain(pid_instance_int16 *pid_instance, float p, float i, float d) {
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	ed87 0a02 	vstr	s0, [r7, #8]
 8005252:	edc7 0a01 	vstr	s1, [r7, #4]
 8005256:	ed87 1a00 	vstr	s2, [r7]
	pid_instance->p_gain = p;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	601a      	str	r2, [r3, #0]
	pid_instance->i_gain = i;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	605a      	str	r2, [r3, #4]
	pid_instance->d_gain = d;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	609a      	str	r2, [r3, #8]

}
 800526c:	bf00      	nop
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <apply_pid>:
	pid_instance->d_gain = 0;
	pid_instance->error_integral = 0;
}

void apply_pid(pid_instance_int16 *pid_instance, float input_error,
		float dt) {
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	ed87 0a02 	vstr	s0, [r7, #8]
 8005284:	edc7 0a01 	vstr	s1, [r7, #4]
	pid_instance->error_integral += input_error * dt;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	ed93 7a04 	vldr	s14, [r3, #16]
 800528e:	edd7 6a02 	vldr	s13, [r7, #8]
 8005292:	edd7 7a01 	vldr	s15, [r7, #4]
 8005296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800529a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	edc3 7a04 	vstr	s15, [r3, #16]

	// Limit integral gain
	if (pid_instance->error_integral > INTEGRAL_GAIN_MAX) {
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80052aa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800536c <apply_pid+0xf4>
 80052ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b6:	dd02      	ble.n	80052be <apply_pid+0x46>
		pid_instance->error_integral = INTEGRAL_GAIN_MAX;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a2d      	ldr	r2, [pc, #180]	; (8005370 <apply_pid+0xf8>)
 80052bc:	611a      	str	r2, [r3, #16]
	}

	if (pid_instance->error_integral < -INTEGRAL_GAIN_MAX) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80052c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005374 <apply_pid+0xfc>
 80052c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d0:	d502      	bpl.n	80052d8 <apply_pid+0x60>
		pid_instance->error_integral = -INTEGRAL_GAIN_MAX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4a28      	ldr	r2, [pc, #160]	; (8005378 <apply_pid+0x100>)
 80052d6:	611a      	str	r2, [r3, #16]
	}

	// Calculate PID output
	pid_instance->output = pid_instance->p_gain * input_error
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	ed93 7a00 	vldr	s14, [r3]
 80052de:	edd7 7a02 	vldr	s15, [r7, #8]
 80052e2:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ pid_instance->i_gain * (pid_instance->error_integral)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	edd3 7a04 	vldr	s15, [r3, #16]
 80052f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f6:	ee37 7a27 	vadd.f32	s14, s14, s15
	+ pid_instance->d_gain * (input_error - pid_instance->last_error)/dt;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	edd3 7a03 	vldr	s15, [r3, #12]
 8005306:	ed97 6a02 	vldr	s12, [r7, #8]
 800530a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800530e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8005312:	edd7 6a01 	vldr	s13, [r7, #4]
 8005316:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800531a:	ee77 7a27 	vadd.f32	s15, s14, s15
	pid_instance->output = pid_instance->p_gain * input_error
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	edc3 7a05 	vstr	s15, [r3, #20]

	// Limit PID output
	if (pid_instance->output >= PID_MAX) {
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	edd3 7a05 	vldr	s15, [r3, #20]
 800532a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800537c <apply_pid+0x104>
 800532e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	db02      	blt.n	800533e <apply_pid+0xc6>
		pid_instance->output = PID_MAX;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4a11      	ldr	r2, [pc, #68]	; (8005380 <apply_pid+0x108>)
 800533c:	615a      	str	r2, [r3, #20]
	}

	if (pid_instance->output <= -PID_MAX) {
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	edd3 7a05 	vldr	s15, [r3, #20]
 8005344:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005384 <apply_pid+0x10c>
 8005348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005350:	d802      	bhi.n	8005358 <apply_pid+0xe0>
		pid_instance->output = -PID_MAX;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <apply_pid+0x110>)
 8005356:	615a      	str	r2, [r3, #20]
	}
	pid_instance->last_error = input_error;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	60da      	str	r2, [r3, #12]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	49f42400 	.word	0x49f42400
 8005370:	49f42400 	.word	0x49f42400
 8005374:	c9f42400 	.word	0xc9f42400
 8005378:	c9f42400 	.word	0xc9f42400
 800537c:	459c4000 	.word	0x459c4000
 8005380:	459c4000 	.word	0x459c4000
 8005384:	c59c4000 	.word	0xc59c4000
 8005388:	c59c4000 	.word	0xc59c4000

0800538c <init_encoder>:
#include "motor_encoder.h"
#include "stdio.h"

// Initialize encoder parameters
void init_encoder(encoder_instance *encoder_value) {
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	encoder_value->velocity = 0;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
	encoder_value->position = 0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
	encoder_value->last_counter_value = 0;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <update_encoder>:

// Update encoder values based on timer and quadrature counting
void update_encoder(encoder_instance *encoder_value, TIM_HandleTypeDef *htim) {
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim); // Get quadrature count
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	60fb      	str	r3, [r7, #12]

	encoder_value->count = (int16_t) temp_counter;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	b21a      	sxth	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	819a      	strh	r2, [r3, #12]
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80053d8:	ee07 3a90 	vmov	s15, r3
 80053dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005434 <update_encoder+0x7c>
 80053e4:	ee67 6a87 	vmul.f32	s13, s15, s14
			/ (float) dt;
 80053e8:	4b13      	ldr	r3, [pc, #76]	; (8005438 <update_encoder+0x80>)
 80053ea:	ed93 7a00 	vldr	s14, [r3]
 80053ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
	encoder_value->velocity = (float) encoder_value->count * (float) 250.0 // ticks per sec (1000ms)  ,(250 = 1000/4)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	edc3 7a00 	vstr	s15, [r3]
	encoder_value->position += (float) encoder_value->count / (float) 4.0; //  Update position based on quadrature factor
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800540c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8005410:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8005414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	edc3 7a01 	vstr	s15, [r3, #4]
	__HAL_TIM_SET_COUNTER(htim, 0); // reset the counter
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	437a0000 	.word	0x437a0000
 8005438:	20000004 	.word	0x20000004
 800543c:	00000000 	.word	0x00000000

08005440 <apply_average_filter>:
		instance->buffer[i] = 0;
	}
}

void apply_average_filter(mov_aver_instance_int16 *instance, float input,
		float *out) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	ed87 0a02 	vstr	s0, [r7, #8]
 800544c:	6079      	str	r1, [r7, #4]

	instance->sum += input - instance->buffer[instance->counter];
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	edd3 7a00 	vldr	s15, [r3]
 8005464:	edd7 6a02 	vldr	s13, [r7, #8]
 8005468:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800546c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
	instance->buffer[instance->counter] = input;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	601a      	str	r2, [r3, #0]
	instance->counter++;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800548c:	3301      	adds	r3, #1
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	if (instance->counter == MOVING_AVERAGE_LENGTH) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 800549c:	2b32      	cmp	r3, #50	; 0x32
 800549e:	d103      	bne.n	80054a8 <apply_average_filter+0x68>
		instance->counter = 0;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	}
	instance->out = instance->sum / MOVING_AVERAGE_LENGTH;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 80054ae:	eddf 6a16 	vldr	s13, [pc, #88]	; 8005508 <apply_average_filter+0xc8>
 80054b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc
	if (fabs(instance->out) <0.005){
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80054c2:	eef0 7ae7 	vabs.f32	s15, s15
 80054c6:	ee17 0a90 	vmov	r0, s15
 80054ca:	f7fb f86d 	bl	80005a8 <__aeabi_f2d>
 80054ce:	a30c      	add	r3, pc, #48	; (adr r3, 8005500 <apply_average_filter+0xc0>)
 80054d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d4:	f7fb fb32 	bl	8000b3c <__aeabi_dcmplt>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <apply_average_filter+0xa8>
		instance->out =0;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	}
	*out = instance->out;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]

}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w
 8005500:	47ae147b 	.word	0x47ae147b
 8005504:	3f747ae1 	.word	0x3f747ae1
 8005508:	42480000 	.word	0x42480000

0800550c <set_rtob>:
#include <rtob.h>

void set_rtob(rtob_instance *rtob, float k, float j, float g, float f, float b) {
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	6178      	str	r0, [r7, #20]
 8005514:	ed87 0a04 	vstr	s0, [r7, #16]
 8005518:	edc7 0a03 	vstr	s1, [r7, #12]
 800551c:	ed87 1a02 	vstr	s2, [r7, #8]
 8005520:	edc7 1a01 	vstr	s3, [r7, #4]
 8005524:	ed87 2a00 	vstr	s4, [r7]

	rtob->Kt = k;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	601a      	str	r2, [r3, #0]
	rtob->Jm = j;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	605a      	str	r2, [r3, #4]
	rtob->G_ext = g;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	609a      	str	r2, [r3, #8]
	rtob->temp = 0;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f04f 0200 	mov.w	r2, #0
 8005540:	60da      	str	r2, [r3, #12]
	rtob->F = f;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	615a      	str	r2, [r3, #20]
	rtob->B = b;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	619a      	str	r2, [r3, #24]

}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
	...

0800555c <update_rtob>:

void update_rtob(rtob_instance *rtob, float Ia_ref, float velocity) {
 800555c:	b5b0      	push	{r4, r5, r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	ed87 0a02 	vstr	s0, [r7, #8]
 8005568:	edc7 0a01 	vstr	s1, [r7, #4]

	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_ext * velocity - rtob->F
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	ed93 7a00 	vldr	s14, [r3]
 8005572:	edd7 7a02 	vldr	s15, [r7, #8]
 8005576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	edd3 7a02 	vldr	s15, [r3, #8]
 8005586:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800558a:	edd7 7a01 	vldr	s15, [r7, #4]
 800558e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	edd3 7a05 	vldr	s15, [r3, #20]
 800559c:	ee37 7a67 	vsub.f32	s14, s14, s15
			- rtob->B * velocity;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	edd3 6a06 	vldr	s13, [r3, #24]
 80055a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80055aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float T_in = Ia_ref * rtob->Kt + rtob->Jm * rtob->G_ext * velocity - rtob->F
 80055ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055b2:	edc7 7a05 	vstr	s15, [r7, #20]
	rtob->temp = rtob->temp + (T_in - rtob->temp) * rtob->G_ext * dt/1000.0; // /dt
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fa fff4 	bl	80005a8 <__aeabi_f2d>
 80055c0:	4604      	mov	r4, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80055ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80055ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80055d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <update_rtob+0xec>)
 80055de:	edd3 7a00 	vldr	s15, [r3]
 80055e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e6:	ee17 0a90 	vmov	r0, s15
 80055ea:	f7fa ffdd 	bl	80005a8 <__aeabi_f2d>
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	4b16      	ldr	r3, [pc, #88]	; (800564c <update_rtob+0xf0>)
 80055f4:	f7fb f95a 	bl	80008ac <__aeabi_ddiv>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fa fe74 	bl	80002ec <__adddf3>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4610      	mov	r0, r2
 800560a:	4619      	mov	r1, r3
 800560c:	f7fb fae6 	bl	8000bdc <__aeabi_d2f>
 8005610:	4602      	mov	r2, r0
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	60da      	str	r2, [r3, #12]

	rtob->T_ext = rtob->temp - rtob->Jm * rtob->G_ext * velocity;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	ed93 7a03 	vldr	s14, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	edd3 6a01 	vldr	s13, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	edd3 7a02 	vldr	s15, [r3, #8]
 8005628:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800562c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	edc3 7a04 	vstr	s15, [r3, #16]

}
 800563e:	bf00      	nop
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bdb0      	pop	{r4, r5, r7, pc}
 8005646:	bf00      	nop
 8005648:	20000004 	.word	0x20000004
 800564c:	408f4000 	.word	0x408f4000

08005650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005656:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_MspInit+0x4c>)
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	4a10      	ldr	r2, [pc, #64]	; (800569c <HAL_MspInit+0x4c>)
 800565c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005660:	6413      	str	r3, [r2, #64]	; 0x40
 8005662:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_MspInit+0x4c>)
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_MspInit+0x4c>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	4a0a      	ldr	r2, [pc, #40]	; (800569c <HAL_MspInit+0x4c>)
 8005674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005678:	6453      	str	r3, [r2, #68]	; 0x44
 800567a:	4b08      	ldr	r3, [pc, #32]	; (800569c <HAL_MspInit+0x4c>)
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	210f      	movs	r1, #15
 800568a:	f06f 0001 	mvn.w	r0, #1
 800568e:	f000 fc8f 	bl	8005fb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800

080056a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0ac      	sub	sp, #176	; 0xb0
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	60da      	str	r2, [r3, #12]
 80056b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80056b8:	f107 0318 	add.w	r3, r7, #24
 80056bc:	2284      	movs	r2, #132	; 0x84
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f009 fee8 	bl	800f496 <memset>
  if(hi2c->Instance==I2C3)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a33      	ldr	r2, [pc, #204]	; (8005798 <HAL_I2C_MspInit+0xf8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d15f      	bne.n	8005790 <HAL_I2C_MspInit+0xf0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80056d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80056d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056dc:	f107 0318 	add.w	r3, r7, #24
 80056e0:	4618      	mov	r0, r3
 80056e2:	f002 f969 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80056ec:	f7ff fda6 	bl	800523c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <HAL_I2C_MspInit+0xfc>)
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	4a29      	ldr	r2, [pc, #164]	; (800579c <HAL_I2C_MspInit+0xfc>)
 80056f6:	f043 0304 	orr.w	r3, r3, #4
 80056fa:	6313      	str	r3, [r2, #48]	; 0x30
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_I2C_MspInit+0xfc>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005708:	4b24      	ldr	r3, [pc, #144]	; (800579c <HAL_I2C_MspInit+0xfc>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	4a23      	ldr	r2, [pc, #140]	; (800579c <HAL_I2C_MspInit+0xfc>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	6313      	str	r3, [r2, #48]	; 0x30
 8005714:	4b21      	ldr	r3, [pc, #132]	; (800579c <HAL_I2C_MspInit+0xfc>)
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005728:	2312      	movs	r3, #18
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005734:	2303      	movs	r3, #3
 8005736:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800573a:	2304      	movs	r3, #4
 800573c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005740:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005744:	4619      	mov	r1, r3
 8005746:	4816      	ldr	r0, [pc, #88]	; (80057a0 <HAL_I2C_MspInit+0x100>)
 8005748:	f000 fc5c 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800574c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005750:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005754:	2312      	movs	r3, #18
 8005756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575a:	2300      	movs	r3, #0
 800575c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005760:	2303      	movs	r3, #3
 8005762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005766:	2304      	movs	r3, #4
 8005768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800576c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005770:	4619      	mov	r1, r3
 8005772:	480c      	ldr	r0, [pc, #48]	; (80057a4 <HAL_I2C_MspInit+0x104>)
 8005774:	f000 fc46 	bl	8006004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <HAL_I2C_MspInit+0xfc>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	4a07      	ldr	r2, [pc, #28]	; (800579c <HAL_I2C_MspInit+0xfc>)
 800577e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005782:	6413      	str	r3, [r2, #64]	; 0x40
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_I2C_MspInit+0xfc>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005790:	bf00      	nop
 8005792:	37b0      	adds	r7, #176	; 0xb0
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40005c00 	.word	0x40005c00
 800579c:	40023800 	.word	0x40023800
 80057a0:	40020800 	.word	0x40020800
 80057a4:	40020000 	.word	0x40020000

080057a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b08a      	sub	sp, #40	; 0x28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	605a      	str	r2, [r3, #4]
 80057ba:	609a      	str	r2, [r3, #8]
 80057bc:	60da      	str	r2, [r3, #12]
 80057be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <HAL_SPI_MspInit+0x7c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d127      	bne.n	800581a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80057ca:	4b17      	ldr	r3, [pc, #92]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057d4:	6453      	str	r3, [r2, #68]	; 0x44
 80057d6:	4b14      	ldr	r3, [pc, #80]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80057e2:	4b11      	ldr	r3, [pc, #68]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057e8:	f043 0310 	orr.w	r3, r3, #16
 80057ec:	6313      	str	r3, [r2, #48]	; 0x30
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <HAL_SPI_MspInit+0x80>)
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80057fa:	2364      	movs	r3, #100	; 0x64
 80057fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fe:	2302      	movs	r3, #2
 8005800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005802:	2300      	movs	r3, #0
 8005804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005806:	2303      	movs	r3, #3
 8005808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800580a:	2305      	movs	r3, #5
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800580e:	f107 0314 	add.w	r3, r7, #20
 8005812:	4619      	mov	r1, r3
 8005814:	4805      	ldr	r0, [pc, #20]	; (800582c <HAL_SPI_MspInit+0x84>)
 8005816:	f000 fbf5 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800581a:	bf00      	nop
 800581c:	3728      	adds	r7, #40	; 0x28
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	40013400 	.word	0x40013400
 8005828:	40023800 	.word	0x40023800
 800582c:	40021000 	.word	0x40021000

08005830 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08c      	sub	sp, #48	; 0x30
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005838:	f107 031c 	add.w	r3, r7, #28
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	60da      	str	r2, [r3, #12]
 8005846:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_TIM_Encoder_MspInit+0xdc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d129      	bne.n	80058a6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005852:	4b2f      	ldr	r3, [pc, #188]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	4a2e      	ldr	r2, [pc, #184]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6453      	str	r3, [r2, #68]	; 0x44
 800585e:	4b2c      	ldr	r3, [pc, #176]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800586a:	4b29      	ldr	r3, [pc, #164]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	4a28      	ldr	r2, [pc, #160]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005870:	f043 0310 	orr.w	r3, r3, #16
 8005874:	6313      	str	r3, [r2, #48]	; 0x30
 8005876:	4b26      	ldr	r3, [pc, #152]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587a:	f003 0310 	and.w	r3, r3, #16
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder1_ch1_Pin|Encoder1_ch2_Pin;
 8005882:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005888:	2302      	movs	r3, #2
 800588a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800588c:	2302      	movs	r3, #2
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005890:	2300      	movs	r3, #0
 8005892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005894:	2301      	movs	r3, #1
 8005896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005898:	f107 031c 	add.w	r3, r7, #28
 800589c:	4619      	mov	r1, r3
 800589e:	481d      	ldr	r0, [pc, #116]	; (8005914 <HAL_TIM_Encoder_MspInit+0xe4>)
 80058a0:	f000 fbb0 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80058a4:	e02d      	b.n	8005902 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_TIM_Encoder_MspInit+0xe8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d128      	bne.n	8005902 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058b0:	4b17      	ldr	r3, [pc, #92]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	4a16      	ldr	r2, [pc, #88]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	6413      	str	r3, [r2, #64]	; 0x40
 80058bc:	4b14      	ldr	r3, [pc, #80]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058c8:	4b11      	ldr	r3, [pc, #68]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4a10      	ldr	r2, [pc, #64]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058ce:	f043 0308 	orr.w	r3, r3, #8
 80058d2:	6313      	str	r3, [r2, #48]	; 0x30
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <HAL_TIM_Encoder_MspInit+0xe0>)
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder2_ch1_Pin|Encoder2_ch2_Pin;
 80058e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80058e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058e6:	2302      	movs	r3, #2
 80058e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80058ea:	2302      	movs	r3, #2
 80058ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ee:	2300      	movs	r3, #0
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80058f2:	2302      	movs	r3, #2
 80058f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058f6:	f107 031c 	add.w	r3, r7, #28
 80058fa:	4619      	mov	r1, r3
 80058fc:	4807      	ldr	r0, [pc, #28]	; (800591c <HAL_TIM_Encoder_MspInit+0xec>)
 80058fe:	f000 fb81 	bl	8006004 <HAL_GPIO_Init>
}
 8005902:	bf00      	nop
 8005904:	3730      	adds	r7, #48	; 0x30
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40023800 	.word	0x40023800
 8005914:	40021000 	.word	0x40021000
 8005918:	40000800 	.word	0x40000800
 800591c:	40020c00 	.word	0x40020c00

08005920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b0ac      	sub	sp, #176	; 0xb0
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005928:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	60da      	str	r2, [r3, #12]
 8005936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005938:	f107 0318 	add.w	r3, r7, #24
 800593c:	2284      	movs	r2, #132	; 0x84
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f009 fda8 	bl	800f496 <memset>
  if(huart->Instance==USART2)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a42      	ldr	r2, [pc, #264]	; (8005a54 <HAL_UART_MspInit+0x134>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d13b      	bne.n	80059c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005950:	2380      	movs	r3, #128	; 0x80
 8005952:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005954:	2300      	movs	r3, #0
 8005956:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005958:	f107 0318 	add.w	r3, r7, #24
 800595c:	4618      	mov	r0, r3
 800595e:	f002 f82b 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005968:	f7ff fc68 	bl	800523c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800596c:	4b3a      	ldr	r3, [pc, #232]	; (8005a58 <HAL_UART_MspInit+0x138>)
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	4a39      	ldr	r2, [pc, #228]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005976:	6413      	str	r3, [r2, #64]	; 0x40
 8005978:	4b37      	ldr	r3, [pc, #220]	; (8005a58 <HAL_UART_MspInit+0x138>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005984:	4b34      	ldr	r3, [pc, #208]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	4a33      	ldr	r2, [pc, #204]	; (8005a58 <HAL_UART_MspInit+0x138>)
 800598a:	f043 0308 	orr.w	r3, r3, #8
 800598e:	6313      	str	r3, [r2, #48]	; 0x30
 8005990:	4b31      	ldr	r3, [pc, #196]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f003 0308 	and.w	r3, r3, #8
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800599c:	2360      	movs	r3, #96	; 0x60
 800599e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a2:	2302      	movs	r3, #2
 80059a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059ae:	2303      	movs	r3, #3
 80059b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059b4:	2307      	movs	r3, #7
 80059b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80059be:	4619      	mov	r1, r3
 80059c0:	4826      	ldr	r0, [pc, #152]	; (8005a5c <HAL_UART_MspInit+0x13c>)
 80059c2:	f000 fb1f 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059c6:	e041      	b.n	8005a4c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <HAL_UART_MspInit+0x140>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d13c      	bne.n	8005a4c <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80059d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80059d8:	2300      	movs	r3, #0
 80059da:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059dc:	f107 0318 	add.w	r3, r7, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 ffe9 	bl	80079b8 <HAL_RCCEx_PeriphCLKConfig>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80059ec:	f7ff fc26 	bl	800523c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059f0:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <HAL_UART_MspInit+0x138>)
 80059f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f4:	4a18      	ldr	r2, [pc, #96]	; (8005a58 <HAL_UART_MspInit+0x138>)
 80059f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059fa:	6413      	str	r3, [r2, #64]	; 0x40
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_UART_MspInit+0x138>)
 80059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005a0e:	f043 0308 	orr.w	r3, r3, #8
 8005a12:	6313      	str	r3, [r2, #48]	; 0x30
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_UART_MspInit+0x138>)
 8005a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005a20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a34:	2303      	movs	r3, #3
 8005a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a3a:	2307      	movs	r3, #7
 8005a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005a44:	4619      	mov	r1, r3
 8005a46:	4805      	ldr	r0, [pc, #20]	; (8005a5c <HAL_UART_MspInit+0x13c>)
 8005a48:	f000 fadc 	bl	8006004 <HAL_GPIO_Init>
}
 8005a4c:	bf00      	nop
 8005a4e:	37b0      	adds	r7, #176	; 0xb0
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40004400 	.word	0x40004400
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	40004800 	.word	0x40004800

08005a64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005a74:	4b33      	ldr	r3, [pc, #204]	; (8005b44 <HAL_InitTick+0xe0>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	4a32      	ldr	r2, [pc, #200]	; (8005b44 <HAL_InitTick+0xe0>)
 8005a7a:	f043 0310 	orr.w	r3, r3, #16
 8005a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005a80:	4b30      	ldr	r3, [pc, #192]	; (8005b44 <HAL_InitTick+0xe0>)
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a8c:	f107 0210 	add.w	r2, r7, #16
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 ff5c 	bl	8007954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d103      	bne.n	8005aae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005aa6:	f001 ff2d 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8005aaa:	6378      	str	r0, [r7, #52]	; 0x34
 8005aac:	e004      	b.n	8005ab8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005aae:	f001 ff29 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	4a23      	ldr	r2, [pc, #140]	; (8005b48 <HAL_InitTick+0xe4>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	0c9b      	lsrs	r3, r3, #18
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <HAL_InitTick+0xe8>)
 8005ac8:	4a21      	ldr	r2, [pc, #132]	; (8005b50 <HAL_InitTick+0xec>)
 8005aca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005acc:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <HAL_InitTick+0xe8>)
 8005ace:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005ad2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_InitTick+0xe8>)
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005ada:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <HAL_InitTick+0xe8>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	; (8005b4c <HAL_InitTick+0xe8>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ae6:	4b19      	ldr	r3, [pc, #100]	; (8005b4c <HAL_InitTick+0xe8>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005aec:	4817      	ldr	r0, [pc, #92]	; (8005b4c <HAL_InitTick+0xe8>)
 8005aee:	f003 f915 	bl	8008d1c <HAL_TIM_Base_Init>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005af8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d11b      	bne.n	8005b38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005b00:	4812      	ldr	r0, [pc, #72]	; (8005b4c <HAL_InitTick+0xe8>)
 8005b02:	f003 f96d 	bl	8008de0 <HAL_TIM_Base_Start_IT>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d111      	bne.n	8005b38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005b14:	2036      	movs	r0, #54	; 0x36
 8005b16:	f000 fa67 	bl	8005fe8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0f      	cmp	r3, #15
 8005b1e:	d808      	bhi.n	8005b32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005b20:	2200      	movs	r2, #0
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	2036      	movs	r0, #54	; 0x36
 8005b26:	f000 fa43 	bl	8005fb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b2a:	4a0a      	ldr	r2, [pc, #40]	; (8005b54 <HAL_InitTick+0xf0>)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	e002      	b.n	8005b38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005b38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3738      	adds	r7, #56	; 0x38
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	431bde83 	.word	0x431bde83
 8005b4c:	20003628 	.word	0x20003628
 8005b50:	40001000 	.word	0x40001000
 8005b54:	20000054 	.word	0x20000054

08005b58 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */

volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void) {
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0

	if (Timer1 > 0)
 8005b5c:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <SDTimer_Handler+0x40>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <SDTimer_Handler+0x1c>
		Timer1--;
 8005b66:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <SDTimer_Handler+0x40>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	4b09      	ldr	r3, [pc, #36]	; (8005b98 <SDTimer_Handler+0x40>)
 8005b72:	701a      	strb	r2, [r3, #0]

	if (Timer2 > 0)
 8005b74:	4b09      	ldr	r3, [pc, #36]	; (8005b9c <SDTimer_Handler+0x44>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <SDTimer_Handler+0x34>
		Timer2--;
 8005b7e:	4b07      	ldr	r3, [pc, #28]	; (8005b9c <SDTimer_Handler+0x44>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <SDTimer_Handler+0x44>)
 8005b8a:	701a      	strb	r2, [r3, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20003675 	.word	0x20003675
 8005b9c:	20003676 	.word	0x20003676

08005ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8005ba4:	e7fe      	b.n	8005ba4 <NMI_Handler+0x4>

08005ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005baa:	e7fe      	b.n	8005baa <HardFault_Handler+0x4>

08005bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bb0:	e7fe      	b.n	8005bb0 <MemManage_Handler+0x4>

08005bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bb6:	e7fe      	b.n	8005bb6 <BusFault_Handler+0x4>

08005bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bbc:	e7fe      	b.n	8005bbc <UsageFault_Handler+0x4>

08005bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8005bd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005bd4:	f000 fc0e 	bl	80063f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(START_STOP_BTN_Pin);
 8005bd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005bdc:	f000 fc0a 	bl	80063f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005be0:	bf00      	nop
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	FatFsCnt++;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <TIM6_DAC_IRQHandler+0x30>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	4b08      	ldr	r3, [pc, #32]	; (8005c14 <TIM6_DAC_IRQHandler+0x30>)
 8005bf4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8005bf6:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <TIM6_DAC_IRQHandler+0x30>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d904      	bls.n	8005c0a <TIM6_DAC_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8005c00:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <TIM6_DAC_IRQHandler+0x30>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8005c06:	f7ff ffa7 	bl	8005b58 <SDTimer_Handler>
	}

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005c0a:	4803      	ldr	r0, [pc, #12]	; (8005c18 <TIM6_DAC_IRQHandler+0x34>)
 8005c0c:	f003 fab4 	bl	8009178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005c10:	bf00      	nop
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	20003674 	.word	0x20003674
 8005c18:	20003628 	.word	0x20003628

08005c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
  return 1;
 8005c20:	2301      	movs	r3, #1
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <_kill>:

int _kill(int pid, int sig)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005c36:	f009 fce5 	bl	800f604 <__errno>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2216      	movs	r2, #22
 8005c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8005c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <_exit>:

void _exit (int status)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005c54:	f04f 31ff 	mov.w	r1, #4294967295
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ffe7 	bl	8005c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8005c5e:	e7fe      	b.n	8005c5e <_exit+0x12>

08005c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e00a      	b.n	8005c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005c72:	f3af 8000 	nop.w
 8005c76:	4601      	mov	r1, r0
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	60ba      	str	r2, [r7, #8]
 8005c7e:	b2ca      	uxtb	r2, r1
 8005c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	3301      	adds	r3, #1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	dbf0      	blt.n	8005c72 <_read+0x12>
  }

  return len;
 8005c90:	687b      	ldr	r3, [r7, #4]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_close>:
  }
  return len;
}

int _close(int file)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <_isatty>:

int _isatty(int file)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005cda:	2301      	movs	r3, #1
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <_sbrk+0x5c>)
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <_sbrk+0x60>)
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <_sbrk+0x64>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005d20:	4b11      	ldr	r3, [pc, #68]	; (8005d68 <_sbrk+0x64>)
 8005d22:	4a12      	ldr	r2, [pc, #72]	; (8005d6c <_sbrk+0x68>)
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005d26:	4b10      	ldr	r3, [pc, #64]	; (8005d68 <_sbrk+0x64>)
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d207      	bcs.n	8005d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005d34:	f009 fc66 	bl	800f604 <__errno>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	220c      	movs	r2, #12
 8005d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	e009      	b.n	8005d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005d44:	4b08      	ldr	r3, [pc, #32]	; (8005d68 <_sbrk+0x64>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <_sbrk+0x64>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	4a05      	ldr	r2, [pc, #20]	; (8005d68 <_sbrk+0x64>)
 8005d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d56:	68fb      	ldr	r3, [r7, #12]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20050000 	.word	0x20050000
 8005d64:	00000400 	.word	0x00000400
 8005d68:	20003678 	.word	0x20003678
 8005d6c:	20007598 	.word	0x20007598

08005d70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <SystemInit+0x20>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <SystemInit+0x20>)
 8005d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	e000ed00 	.word	0xe000ed00

08005d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005dcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005d98:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005d9a:	490e      	ldr	r1, [pc, #56]	; (8005dd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005d9c:	4a0e      	ldr	r2, [pc, #56]	; (8005dd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005da0:	e002      	b.n	8005da8 <LoopCopyDataInit>

08005da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005da6:	3304      	adds	r3, #4

08005da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dac:	d3f9      	bcc.n	8005da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dae:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005db0:	4c0b      	ldr	r4, [pc, #44]	; (8005de0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005db4:	e001      	b.n	8005dba <LoopFillZerobss>

08005db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005db8:	3204      	adds	r2, #4

08005dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dbc:	d3fb      	bcc.n	8005db6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005dbe:	f7ff ffd7 	bl	8005d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005dc2:	f009 fc25 	bl	800f610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005dc6:	f7fe fd17 	bl	80047f8 <main>
  bx  lr    
 8005dca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005dcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dd4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005dd8:	08011b50 	.word	0x08011b50
  ldr r2, =_sbss
 8005ddc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8005de0:	20007594 	.word	0x20007594

08005de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005de4:	e7fe      	b.n	8005de4 <ADC_IRQHandler>

08005de6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dea:	2003      	movs	r0, #3
 8005dec:	f000 f8d5 	bl	8005f9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005df0:	200f      	movs	r0, #15
 8005df2:	f7ff fe37 	bl	8005a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005df6:	f7ff fc2b 	bl	8005650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <HAL_IncTick+0x20>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	4b06      	ldr	r3, [pc, #24]	; (8005e24 <HAL_IncTick+0x24>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4413      	add	r3, r2
 8005e10:	4a04      	ldr	r2, [pc, #16]	; (8005e24 <HAL_IncTick+0x24>)
 8005e12:	6013      	str	r3, [r2, #0]
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	20000058 	.word	0x20000058
 8005e24:	2000367c 	.word	0x2000367c

08005e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e2c:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <HAL_GetTick+0x14>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	2000367c 	.word	0x2000367c

08005e40 <__NVIC_SetPriorityGrouping>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <__NVIC_SetPriorityGrouping+0x40>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <__NVIC_SetPriorityGrouping+0x44>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e6e:	4a04      	ldr	r2, [pc, #16]	; (8005e80 <__NVIC_SetPriorityGrouping+0x40>)
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	60d3      	str	r3, [r2, #12]
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	e000ed00 	.word	0xe000ed00
 8005e84:	05fa0000 	.word	0x05fa0000

08005e88 <__NVIC_GetPriorityGrouping>:
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e8c:	4b04      	ldr	r3, [pc, #16]	; (8005ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	0a1b      	lsrs	r3, r3, #8
 8005e92:	f003 0307 	and.w	r3, r3, #7
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	e000ed00 	.word	0xe000ed00

08005ea4 <__NVIC_EnableIRQ>:
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	db0b      	blt.n	8005ece <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	f003 021f 	and.w	r2, r3, #31
 8005ebc:	4907      	ldr	r1, [pc, #28]	; (8005edc <__NVIC_EnableIRQ+0x38>)
 8005ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	e000e100 	.word	0xe000e100

08005ee0 <__NVIC_SetPriority>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	6039      	str	r1, [r7, #0]
 8005eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	db0a      	blt.n	8005f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	490c      	ldr	r1, [pc, #48]	; (8005f2c <__NVIC_SetPriority+0x4c>)
 8005efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	440b      	add	r3, r1
 8005f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f08:	e00a      	b.n	8005f20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4908      	ldr	r1, [pc, #32]	; (8005f30 <__NVIC_SetPriority+0x50>)
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	3b04      	subs	r3, #4
 8005f18:	0112      	lsls	r2, r2, #4
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	761a      	strb	r2, [r3, #24]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	e000e100 	.word	0xe000e100
 8005f30:	e000ed00 	.word	0xe000ed00

08005f34 <NVIC_EncodePriority>:
{
 8005f34:	b480      	push	{r7}
 8005f36:	b089      	sub	sp, #36	; 0x24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f1c3 0307 	rsb	r3, r3, #7
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	bf28      	it	cs
 8005f52:	2304      	movcs	r3, #4
 8005f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3304      	adds	r3, #4
 8005f5a:	2b06      	cmp	r3, #6
 8005f5c:	d902      	bls.n	8005f64 <NVIC_EncodePriority+0x30>
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	3b03      	subs	r3, #3
 8005f62:	e000      	b.n	8005f66 <NVIC_EncodePriority+0x32>
 8005f64:	2300      	movs	r3, #0
 8005f66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f68:	f04f 32ff 	mov.w	r2, #4294967295
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43da      	mvns	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	401a      	ands	r2, r3
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	43d9      	mvns	r1, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f8c:	4313      	orrs	r3, r2
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3724      	adds	r7, #36	; 0x24
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ff4c 	bl	8005e40 <__NVIC_SetPriorityGrouping>
}
 8005fa8:	bf00      	nop
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
 8005fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005fc2:	f7ff ff61 	bl	8005e88 <__NVIC_GetPriorityGrouping>
 8005fc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	6978      	ldr	r0, [r7, #20]
 8005fce:	f7ff ffb1 	bl	8005f34 <NVIC_EncodePriority>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ff80 	bl	8005ee0 <__NVIC_SetPriority>
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff ff54 	bl	8005ea4 <__NVIC_EnableIRQ>
}
 8005ffc:	bf00      	nop
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006012:	2300      	movs	r3, #0
 8006014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006016:	2300      	movs	r3, #0
 8006018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800601a:	2300      	movs	r3, #0
 800601c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800601e:	2300      	movs	r3, #0
 8006020:	61fb      	str	r3, [r7, #28]
 8006022:	e175      	b.n	8006310 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006024:	2201      	movs	r2, #1
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	429a      	cmp	r2, r3
 800603e:	f040 8164 	bne.w	800630a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f003 0303 	and.w	r3, r3, #3
 800604a:	2b01      	cmp	r3, #1
 800604c:	d005      	beq.n	800605a <HAL_GPIO_Init+0x56>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d130      	bne.n	80060bc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	2203      	movs	r2, #3
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	68da      	ldr	r2, [r3, #12]
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fa02 f303 	lsl.w	r3, r2, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4313      	orrs	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006090:	2201      	movs	r2, #1
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	43db      	mvns	r3, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 0201 	and.w	r2, r3, #1
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0303 	and.w	r3, r3, #3
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d017      	beq.n	80060f8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	2203      	movs	r2, #3
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	2b02      	cmp	r3, #2
 8006102:	d123      	bne.n	800614c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	08da      	lsrs	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3208      	adds	r2, #8
 800610c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	f003 0307 	and.w	r3, r3, #7
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	220f      	movs	r2, #15
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0307 	and.w	r3, r3, #7
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	08da      	lsrs	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3208      	adds	r2, #8
 8006146:	69b9      	ldr	r1, [r7, #24]
 8006148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	005b      	lsls	r3, r3, #1
 8006156:	2203      	movs	r2, #3
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	43db      	mvns	r3, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4013      	ands	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f003 0203 	and.w	r2, r3, #3
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80be 	beq.w	800630a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800618e:	4b66      	ldr	r3, [pc, #408]	; (8006328 <HAL_GPIO_Init+0x324>)
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	4a65      	ldr	r2, [pc, #404]	; (8006328 <HAL_GPIO_Init+0x324>)
 8006194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006198:	6453      	str	r3, [r2, #68]	; 0x44
 800619a:	4b63      	ldr	r3, [pc, #396]	; (8006328 <HAL_GPIO_Init+0x324>)
 800619c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061a6:	4a61      	ldr	r2, [pc, #388]	; (800632c <HAL_GPIO_Init+0x328>)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	089b      	lsrs	r3, r3, #2
 80061ac:	3302      	adds	r3, #2
 80061ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	220f      	movs	r2, #15
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a58      	ldr	r2, [pc, #352]	; (8006330 <HAL_GPIO_Init+0x32c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d037      	beq.n	8006242 <HAL_GPIO_Init+0x23e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a57      	ldr	r2, [pc, #348]	; (8006334 <HAL_GPIO_Init+0x330>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d031      	beq.n	800623e <HAL_GPIO_Init+0x23a>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a56      	ldr	r2, [pc, #344]	; (8006338 <HAL_GPIO_Init+0x334>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d02b      	beq.n	800623a <HAL_GPIO_Init+0x236>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a55      	ldr	r2, [pc, #340]	; (800633c <HAL_GPIO_Init+0x338>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d025      	beq.n	8006236 <HAL_GPIO_Init+0x232>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <HAL_GPIO_Init+0x33c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01f      	beq.n	8006232 <HAL_GPIO_Init+0x22e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a53      	ldr	r2, [pc, #332]	; (8006344 <HAL_GPIO_Init+0x340>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d019      	beq.n	800622e <HAL_GPIO_Init+0x22a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a52      	ldr	r2, [pc, #328]	; (8006348 <HAL_GPIO_Init+0x344>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <HAL_GPIO_Init+0x226>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a51      	ldr	r2, [pc, #324]	; (800634c <HAL_GPIO_Init+0x348>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00d      	beq.n	8006226 <HAL_GPIO_Init+0x222>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a50      	ldr	r2, [pc, #320]	; (8006350 <HAL_GPIO_Init+0x34c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d007      	beq.n	8006222 <HAL_GPIO_Init+0x21e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a4f      	ldr	r2, [pc, #316]	; (8006354 <HAL_GPIO_Init+0x350>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d101      	bne.n	800621e <HAL_GPIO_Init+0x21a>
 800621a:	2309      	movs	r3, #9
 800621c:	e012      	b.n	8006244 <HAL_GPIO_Init+0x240>
 800621e:	230a      	movs	r3, #10
 8006220:	e010      	b.n	8006244 <HAL_GPIO_Init+0x240>
 8006222:	2308      	movs	r3, #8
 8006224:	e00e      	b.n	8006244 <HAL_GPIO_Init+0x240>
 8006226:	2307      	movs	r3, #7
 8006228:	e00c      	b.n	8006244 <HAL_GPIO_Init+0x240>
 800622a:	2306      	movs	r3, #6
 800622c:	e00a      	b.n	8006244 <HAL_GPIO_Init+0x240>
 800622e:	2305      	movs	r3, #5
 8006230:	e008      	b.n	8006244 <HAL_GPIO_Init+0x240>
 8006232:	2304      	movs	r3, #4
 8006234:	e006      	b.n	8006244 <HAL_GPIO_Init+0x240>
 8006236:	2303      	movs	r3, #3
 8006238:	e004      	b.n	8006244 <HAL_GPIO_Init+0x240>
 800623a:	2302      	movs	r3, #2
 800623c:	e002      	b.n	8006244 <HAL_GPIO_Init+0x240>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <HAL_GPIO_Init+0x240>
 8006242:	2300      	movs	r3, #0
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	f002 0203 	and.w	r2, r2, #3
 800624a:	0092      	lsls	r2, r2, #2
 800624c:	4093      	lsls	r3, r2
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006254:	4935      	ldr	r1, [pc, #212]	; (800632c <HAL_GPIO_Init+0x328>)
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	3302      	adds	r3, #2
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006262:	4b3d      	ldr	r3, [pc, #244]	; (8006358 <HAL_GPIO_Init+0x354>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	43db      	mvns	r3, r3
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	4013      	ands	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006286:	4a34      	ldr	r2, [pc, #208]	; (8006358 <HAL_GPIO_Init+0x354>)
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800628c:	4b32      	ldr	r3, [pc, #200]	; (8006358 <HAL_GPIO_Init+0x354>)
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	43db      	mvns	r3, r3
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4013      	ands	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d003      	beq.n	80062b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062b0:	4a29      	ldr	r2, [pc, #164]	; (8006358 <HAL_GPIO_Init+0x354>)
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062b6:	4b28      	ldr	r3, [pc, #160]	; (8006358 <HAL_GPIO_Init+0x354>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062da:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <HAL_GPIO_Init+0x354>)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062e0:	4b1d      	ldr	r3, [pc, #116]	; (8006358 <HAL_GPIO_Init+0x354>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006304:	4a14      	ldr	r2, [pc, #80]	; (8006358 <HAL_GPIO_Init+0x354>)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	3301      	adds	r3, #1
 800630e:	61fb      	str	r3, [r7, #28]
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	2b0f      	cmp	r3, #15
 8006314:	f67f ae86 	bls.w	8006024 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3724      	adds	r7, #36	; 0x24
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40023800 	.word	0x40023800
 800632c:	40013800 	.word	0x40013800
 8006330:	40020000 	.word	0x40020000
 8006334:	40020400 	.word	0x40020400
 8006338:	40020800 	.word	0x40020800
 800633c:	40020c00 	.word	0x40020c00
 8006340:	40021000 	.word	0x40021000
 8006344:	40021400 	.word	0x40021400
 8006348:	40021800 	.word	0x40021800
 800634c:	40021c00 	.word	0x40021c00
 8006350:	40022000 	.word	0x40022000
 8006354:	40022400 	.word	0x40022400
 8006358:	40013c00 	.word	0x40013c00

0800635c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	460b      	mov	r3, r1
 8006366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	887b      	ldrh	r3, [r7, #2]
 800636e:	4013      	ands	r3, r2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
 8006378:	e001      	b.n	800637e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	807b      	strh	r3, [r7, #2]
 8006398:	4613      	mov	r3, r2
 800639a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800639c:	787b      	ldrb	r3, [r7, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063a2:	887a      	ldrh	r2, [r7, #2]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063a8:	e003      	b.n	80063b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063aa:	887b      	ldrh	r3, [r7, #2]
 80063ac:	041a      	lsls	r2, r3, #16
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	619a      	str	r2, [r3, #24]
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063be:	b480      	push	{r7}
 80063c0:	b085      	sub	sp, #20
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063d0:	887a      	ldrh	r2, [r7, #2]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4013      	ands	r3, r2
 80063d6:	041a      	lsls	r2, r3, #16
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	43d9      	mvns	r1, r3
 80063dc:	887b      	ldrh	r3, [r7, #2]
 80063de:	400b      	ands	r3, r1
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	619a      	str	r2, [r3, #24]
}
 80063e6:	bf00      	nop
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	88fb      	ldrh	r3, [r7, #6]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800640a:	4a05      	ldr	r2, [pc, #20]	; (8006420 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800640c:	88fb      	ldrh	r3, [r7, #6]
 800640e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fc fb4a 	bl	8002aac <HAL_GPIO_EXTI_Callback>
  }
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	40013c00 	.word	0x40013c00

08006424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d101      	bne.n	8006436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e07f      	b.n	8006536 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff f928 	bl	80056a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2224      	movs	r2, #36	; 0x24
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006474:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006484:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e006      	b.n	80064ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d104      	bne.n	80064be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6859      	ldr	r1, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <HAL_I2C_Init+0x11c>)
 80064ca:	430b      	orrs	r3, r1
 80064cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68da      	ldr	r2, [r3, #12]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691a      	ldr	r2, [r3, #16]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1a      	ldr	r2, [r3, #32]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	02008000 	.word	0x02008000

08006544 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	607a      	str	r2, [r7, #4]
 800654e:	461a      	mov	r2, r3
 8006550:	460b      	mov	r3, r1
 8006552:	817b      	strh	r3, [r7, #10]
 8006554:	4613      	mov	r3, r2
 8006556:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b20      	cmp	r3, #32
 8006562:	f040 80da 	bne.w	800671a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_I2C_Master_Transmit+0x30>
 8006570:	2302      	movs	r3, #2
 8006572:	e0d3      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800657c:	f7ff fc54 	bl	8005e28 <HAL_GetTick>
 8006580:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	2319      	movs	r3, #25
 8006588:	2201      	movs	r2, #1
 800658a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f000 f9e6 	bl	8006960 <I2C_WaitOnFlagUntilTimeout>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e0be      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2221      	movs	r2, #33	; 0x21
 80065a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2210      	movs	r2, #16
 80065aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	893a      	ldrh	r2, [r7, #8]
 80065be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	2bff      	cmp	r3, #255	; 0xff
 80065ce:	d90e      	bls.n	80065ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	22ff      	movs	r2, #255	; 0xff
 80065d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	8979      	ldrh	r1, [r7, #10]
 80065de:	4b51      	ldr	r3, [pc, #324]	; (8006724 <HAL_I2C_Master_Transmit+0x1e0>)
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fbd0 	bl	8006d8c <I2C_TransferConfig>
 80065ec:	e06c      	b.n	80066c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	8979      	ldrh	r1, [r7, #10]
 8006600:	4b48      	ldr	r3, [pc, #288]	; (8006724 <HAL_I2C_Master_Transmit+0x1e0>)
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fbbf 	bl	8006d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800660e:	e05b      	b.n	80066c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	6a39      	ldr	r1, [r7, #32]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f9e3 	bl	80069e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e07b      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	781a      	ldrb	r2, [r3, #0]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	1c5a      	adds	r2, r3, #1
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664c:	3b01      	subs	r3, #1
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d034      	beq.n	80066c8 <HAL_I2C_Master_Transmit+0x184>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d130      	bne.n	80066c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	2200      	movs	r2, #0
 800666e:	2180      	movs	r1, #128	; 0x80
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f975 	bl	8006960 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e04d      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006684:	b29b      	uxth	r3, r3
 8006686:	2bff      	cmp	r3, #255	; 0xff
 8006688:	d90e      	bls.n	80066a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	22ff      	movs	r2, #255	; 0xff
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006694:	b2da      	uxtb	r2, r3
 8006696:	8979      	ldrh	r1, [r7, #10]
 8006698:	2300      	movs	r3, #0
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 fb73 	bl	8006d8c <I2C_TransferConfig>
 80066a6:	e00f      	b.n	80066c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	8979      	ldrh	r1, [r7, #10]
 80066ba:	2300      	movs	r3, #0
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 fb62 	bl	8006d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d19e      	bne.n	8006610 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	6a39      	ldr	r1, [r7, #32]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f9c2 	bl	8006a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e01a      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2220      	movs	r2, #32
 80066ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <HAL_I2C_Master_Transmit+0x1e4>)
 80066fa:	400b      	ands	r3, r1
 80066fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2220      	movs	r2, #32
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e000      	b.n	800671c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800671a:	2302      	movs	r3, #2
  }
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	80002000 	.word	0x80002000
 8006728:	fe00e800 	.word	0xfe00e800

0800672c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	461a      	mov	r2, r3
 8006738:	460b      	mov	r3, r1
 800673a:	817b      	strh	r3, [r7, #10]
 800673c:	4613      	mov	r3, r2
 800673e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b20      	cmp	r3, #32
 800674a:	f040 80db 	bne.w	8006904 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_I2C_Master_Receive+0x30>
 8006758:	2302      	movs	r3, #2
 800675a:	e0d4      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006764:	f7ff fb60 	bl	8005e28 <HAL_GetTick>
 8006768:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	2319      	movs	r3, #25
 8006770:	2201      	movs	r2, #1
 8006772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f8f2 	bl	8006960 <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e0bf      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2222      	movs	r2, #34	; 0x22
 800678a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2210      	movs	r2, #16
 8006792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	893a      	ldrh	r2, [r7, #8]
 80067a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2bff      	cmp	r3, #255	; 0xff
 80067b6:	d90e      	bls.n	80067d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	22ff      	movs	r2, #255	; 0xff
 80067bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	8979      	ldrh	r1, [r7, #10]
 80067c6:	4b52      	ldr	r3, [pc, #328]	; (8006910 <HAL_I2C_Master_Receive+0x1e4>)
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fadc 	bl	8006d8c <I2C_TransferConfig>
 80067d4:	e06d      	b.n	80068b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	8979      	ldrh	r1, [r7, #10]
 80067e8:	4b49      	ldr	r3, [pc, #292]	; (8006910 <HAL_I2C_Master_Receive+0x1e4>)
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 facb 	bl	8006d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80067f6:	e05c      	b.n	80068b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	6a39      	ldr	r1, [r7, #32]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f96b 	bl	8006ad8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e07c      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006834:	b29b      	uxth	r3, r3
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d034      	beq.n	80068b2 <HAL_I2C_Master_Receive+0x186>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800684c:	2b00      	cmp	r3, #0
 800684e:	d130      	bne.n	80068b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	2200      	movs	r2, #0
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f000 f880 	bl	8006960 <I2C_WaitOnFlagUntilTimeout>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e04d      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686e:	b29b      	uxth	r3, r3
 8006870:	2bff      	cmp	r3, #255	; 0xff
 8006872:	d90e      	bls.n	8006892 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	b2da      	uxtb	r2, r3
 8006880:	8979      	ldrh	r1, [r7, #10]
 8006882:	2300      	movs	r3, #0
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f000 fa7e 	bl	8006d8c <I2C_TransferConfig>
 8006890:	e00f      	b.n	80068b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006896:	b29a      	uxth	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	8979      	ldrh	r1, [r7, #10]
 80068a4:	2300      	movs	r3, #0
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa6d 	bl	8006d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d19d      	bne.n	80067f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	6a39      	ldr	r1, [r7, #32]
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f8cd 	bl	8006a60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e01a      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2220      	movs	r2, #32
 80068d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6859      	ldr	r1, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <HAL_I2C_Master_Receive+0x1e8>)
 80068e4:	400b      	ands	r3, r1
 80068e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006900:	2300      	movs	r3, #0
 8006902:	e000      	b.n	8006906 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
  }
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	80002400 	.word	0x80002400
 8006914:	fe00e800 	.word	0xfe00e800

08006918 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d103      	bne.n	8006936 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2200      	movs	r2, #0
 8006934:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	d007      	beq.n	8006954 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0201 	orr.w	r2, r2, #1
 8006952:	619a      	str	r2, [r3, #24]
  }
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	603b      	str	r3, [r7, #0]
 800696c:	4613      	mov	r3, r2
 800696e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006970:	e022      	b.n	80069b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006978:	d01e      	beq.n	80069b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697a:	f7ff fa55 	bl	8005e28 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	683a      	ldr	r2, [r7, #0]
 8006986:	429a      	cmp	r2, r3
 8006988:	d302      	bcc.n	8006990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d113      	bne.n	80069b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	f043 0220 	orr.w	r2, r3, #32
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e00f      	b.n	80069d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4013      	ands	r3, r2
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	bf0c      	ite	eq
 80069c8:	2301      	moveq	r3, #1
 80069ca:	2300      	movne	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	461a      	mov	r2, r3
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d0cd      	beq.n	8006972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069ec:	e02c      	b.n	8006a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 f8ea 	bl	8006bcc <I2C_IsErrorOccurred>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e02a      	b.n	8006a58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d01e      	beq.n	8006a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7ff fa0d 	bl	8005e28 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d113      	bne.n	8006a48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e007      	b.n	8006a58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d1cb      	bne.n	80069ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a6c:	e028      	b.n	8006ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8aa 	bl	8006bcc <I2C_IsErrorOccurred>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e026      	b.n	8006ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a82:	f7ff f9d1 	bl	8005e28 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d113      	bne.n	8006ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9c:	f043 0220 	orr.w	r2, r3, #32
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2220      	movs	r2, #32
 8006aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e007      	b.n	8006ad0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d1cf      	bne.n	8006a6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ae4:	e064      	b.n	8006bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 f86e 	bl	8006bcc <I2C_IsErrorOccurred>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e062      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	f003 0320 	and.w	r3, r3, #32
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d138      	bne.n	8006b7a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	f003 0304 	and.w	r3, r3, #4
 8006b12:	2b04      	cmp	r3, #4
 8006b14:	d105      	bne.n	8006b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e04e      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d107      	bne.n	8006b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2210      	movs	r2, #16
 8006b36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
 8006b3e:	e002      	b.n	8006b46 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6859      	ldr	r1, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	4b1b      	ldr	r3, [pc, #108]	; (8006bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006b5a:	400b      	ands	r3, r1
 8006b5c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2220      	movs	r2, #32
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e022      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b7a:	f7ff f955 	bl	8005e28 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d302      	bcc.n	8006b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b94:	f043 0220 	orr.w	r2, r3, #32
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2220      	movs	r2, #32
 8006ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e007      	b.n	8006bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d193      	bne.n	8006ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	fe00e800 	.word	0xfe00e800

08006bcc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08a      	sub	sp, #40	; 0x28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	f003 0310 	and.w	r3, r3, #16
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d068      	beq.n	8006cca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2210      	movs	r2, #16
 8006bfe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c00:	e049      	b.n	8006c96 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d045      	beq.n	8006c96 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c0a:	f7ff f90d 	bl	8005e28 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d302      	bcc.n	8006c20 <I2C_IsErrorOccurred+0x54>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d13a      	bne.n	8006c96 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c32:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c42:	d121      	bne.n	8006c88 <I2C_IsErrorOccurred+0xbc>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4a:	d01d      	beq.n	8006c88 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c4c:	7cfb      	ldrb	r3, [r7, #19]
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d01a      	beq.n	8006c88 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c60:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c62:	f7ff f8e1 	bl	8005e28 <HAL_GetTick>
 8006c66:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c68:	e00e      	b.n	8006c88 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c6a:	f7ff f8dd 	bl	8005e28 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b19      	cmp	r3, #25
 8006c76:	d907      	bls.n	8006c88 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	f043 0320 	orr.w	r3, r3, #32
 8006c7e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006c86:	e006      	b.n	8006c96 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	f003 0320 	and.w	r3, r3, #32
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d1e9      	bne.n	8006c6a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d003      	beq.n	8006cac <I2C_IsErrorOccurred+0xe0>
 8006ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0aa      	beq.n	8006c02 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d103      	bne.n	8006cbc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	f043 0304 	orr.w	r3, r3, #4
 8006cc2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	f043 0308 	orr.w	r3, r3, #8
 8006d04:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	f043 0302 	orr.w	r3, r3, #2
 8006d26:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006d38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01c      	beq.n	8006d7a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff fde9 	bl	8006918 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6859      	ldr	r1, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <I2C_IsErrorOccurred+0x1bc>)
 8006d52:	400b      	ands	r3, r1
 8006d54:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3728      	adds	r7, #40	; 0x28
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	fe00e800 	.word	0xfe00e800

08006d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b087      	sub	sp, #28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	607b      	str	r3, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	817b      	strh	r3, [r7, #10]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006da4:	7a7b      	ldrb	r3, [r7, #9]
 8006da6:	041b      	lsls	r3, r3, #16
 8006da8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	0d5b      	lsrs	r3, r3, #21
 8006dc6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006dca:	4b08      	ldr	r3, [pc, #32]	; (8006dec <I2C_TransferConfig+0x60>)
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	43db      	mvns	r3, r3
 8006dd0:	ea02 0103 	and.w	r1, r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	03ff63ff 	.word	0x03ff63ff

08006df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b20      	cmp	r3, #32
 8006e04:	d138      	bne.n	8006e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d101      	bne.n	8006e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e10:	2302      	movs	r3, #2
 8006e12:	e032      	b.n	8006e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2224      	movs	r2, #36	; 0x24
 8006e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0201 	bic.w	r2, r2, #1
 8006e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0201 	orr.w	r2, r2, #1
 8006e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2220      	movs	r2, #32
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e78:	2302      	movs	r3, #2
  }
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b085      	sub	sp, #20
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d139      	bne.n	8006f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d101      	bne.n	8006eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	e033      	b.n	8006f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2224      	movs	r2, #36	; 0x24
 8006eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0201 	bic.w	r2, r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f2a:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f34:	6413      	str	r3, [r2, #64]	; 0x40
 8006f36:	4b20      	ldr	r3, [pc, #128]	; (8006fb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f42:	4b1e      	ldr	r3, [pc, #120]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f4e:	f7fe ff6b 	bl	8005e28 <HAL_GetTick>
 8006f52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f54:	e009      	b.n	8006f6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f56:	f7fe ff67 	bl	8005e28 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f64:	d901      	bls.n	8006f6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e022      	b.n	8006fb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f76:	d1ee      	bne.n	8006f56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006f78:	4b10      	ldr	r3, [pc, #64]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a0f      	ldr	r2, [pc, #60]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f84:	f7fe ff50 	bl	8005e28 <HAL_GetTick>
 8006f88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006f8a:	e009      	b.n	8006fa0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f8c:	f7fe ff4c 	bl	8005e28 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f9a:	d901      	bls.n	8006fa0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e007      	b.n	8006fb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d1ee      	bne.n	8006f8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	40007000 	.word	0x40007000

08006fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e291      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	f000 8087 	beq.w	80070f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006fe4:	4b96      	ldr	r3, [pc, #600]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 030c 	and.w	r3, r3, #12
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d00c      	beq.n	800700a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ff0:	4b93      	ldr	r3, [pc, #588]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 030c 	and.w	r3, r3, #12
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d112      	bne.n	8007022 <HAL_RCC_OscConfig+0x62>
 8006ffc:	4b90      	ldr	r3, [pc, #576]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007008:	d10b      	bne.n	8007022 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800700a:	4b8d      	ldr	r3, [pc, #564]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d06c      	beq.n	80070f0 <HAL_RCC_OscConfig+0x130>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d168      	bne.n	80070f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e26b      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800702a:	d106      	bne.n	800703a <HAL_RCC_OscConfig+0x7a>
 800702c:	4b84      	ldr	r3, [pc, #528]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a83      	ldr	r2, [pc, #524]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	e02e      	b.n	8007098 <HAL_RCC_OscConfig+0xd8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10c      	bne.n	800705c <HAL_RCC_OscConfig+0x9c>
 8007042:	4b7f      	ldr	r3, [pc, #508]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a7e      	ldr	r2, [pc, #504]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	4b7c      	ldr	r3, [pc, #496]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a7b      	ldr	r2, [pc, #492]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xd8>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0xc0>
 8007066:	4b76      	ldr	r3, [pc, #472]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a75      	ldr	r2, [pc, #468]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b73      	ldr	r3, [pc, #460]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a72      	ldr	r2, [pc, #456]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xd8>
 8007080:	4b6f      	ldr	r3, [pc, #444]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a6e      	ldr	r2, [pc, #440]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b6c      	ldr	r3, [pc, #432]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a6b      	ldr	r2, [pc, #428]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fe fec2 	bl	8005e28 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070a8:	f7fe febe 	bl	8005e28 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e21f      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ba:	4b61      	ldr	r3, [pc, #388]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xe8>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c8:	f7fe feae 	bl	8005e28 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070d0:	f7fe feaa 	bl	8005e28 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e20b      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e2:	4b57      	ldr	r3, [pc, #348]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0x110>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d069      	beq.n	80071d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070fe:	4b50      	ldr	r3, [pc, #320]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710a:	4b4d      	ldr	r3, [pc, #308]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
 8007112:	2b08      	cmp	r3, #8
 8007114:	d11c      	bne.n	8007150 <HAL_RCC_OscConfig+0x190>
 8007116:	4b4a      	ldr	r3, [pc, #296]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	4b47      	ldr	r3, [pc, #284]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_RCC_OscConfig+0x17a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e1df      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713a:	4b41      	ldr	r3, [pc, #260]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	493d      	ldr	r1, [pc, #244]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800714a:	4313      	orrs	r3, r2
 800714c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714e:	e040      	b.n	80071d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d023      	beq.n	80071a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007158:	4b39      	ldr	r3, [pc, #228]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a38      	ldr	r2, [pc, #224]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007164:	f7fe fe60 	bl	8005e28 <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800716c:	f7fe fe5c 	bl	8005e28 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e1bd      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800717e:	4b30      	ldr	r3, [pc, #192]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800718a:	4b2d      	ldr	r3, [pc, #180]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	4929      	ldr	r1, [pc, #164]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800719a:	4313      	orrs	r3, r2
 800719c:	600b      	str	r3, [r1, #0]
 800719e:	e018      	b.n	80071d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071a0:	4b27      	ldr	r3, [pc, #156]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a26      	ldr	r2, [pc, #152]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80071a6:	f023 0301 	bic.w	r3, r3, #1
 80071aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fe fe3c 	bl	8005e28 <HAL_GetTick>
 80071b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b4:	f7fe fe38 	bl	8005e28 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e199      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071c6:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1f0      	bne.n	80071b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0308 	and.w	r3, r3, #8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d038      	beq.n	8007250 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d019      	beq.n	800721a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071e6:	4b16      	ldr	r3, [pc, #88]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ea:	4a15      	ldr	r2, [pc, #84]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 80071ec:	f043 0301 	orr.w	r3, r3, #1
 80071f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f2:	f7fe fe19 	bl	8005e28 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071fa:	f7fe fe15 	bl	8005e28 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e176      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800720c:	4b0c      	ldr	r3, [pc, #48]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800720e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCC_OscConfig+0x23a>
 8007218:	e01a      	b.n	8007250 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800721a:	4b09      	ldr	r3, [pc, #36]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 800721c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721e:	4a08      	ldr	r2, [pc, #32]	; (8007240 <HAL_RCC_OscConfig+0x280>)
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007226:	f7fe fdff 	bl	8005e28 <HAL_GetTick>
 800722a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800722c:	e00a      	b.n	8007244 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800722e:	f7fe fdfb 	bl	8005e28 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d903      	bls.n	8007244 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e15c      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
 8007240:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007244:	4b91      	ldr	r3, [pc, #580]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1ee      	bne.n	800722e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0304 	and.w	r3, r3, #4
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80a4 	beq.w	80073a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800725e:	4b8b      	ldr	r3, [pc, #556]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10d      	bne.n	8007286 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800726a:	4b88      	ldr	r3, [pc, #544]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800726c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726e:	4a87      	ldr	r2, [pc, #540]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007274:	6413      	str	r3, [r2, #64]	; 0x40
 8007276:	4b85      	ldr	r3, [pc, #532]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800727e:	60bb      	str	r3, [r7, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007286:	4b82      	ldr	r3, [pc, #520]	; (8007490 <HAL_RCC_OscConfig+0x4d0>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d118      	bne.n	80072c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007292:	4b7f      	ldr	r3, [pc, #508]	; (8007490 <HAL_RCC_OscConfig+0x4d0>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a7e      	ldr	r2, [pc, #504]	; (8007490 <HAL_RCC_OscConfig+0x4d0>)
 8007298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800729c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800729e:	f7fe fdc3 	bl	8005e28 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a6:	f7fe fdbf 	bl	8005e28 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b64      	cmp	r3, #100	; 0x64
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e120      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072b8:	4b75      	ldr	r3, [pc, #468]	; (8007490 <HAL_RCC_OscConfig+0x4d0>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d106      	bne.n	80072da <HAL_RCC_OscConfig+0x31a>
 80072cc:	4b6f      	ldr	r3, [pc, #444]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d0:	4a6e      	ldr	r2, [pc, #440]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	; 0x70
 80072d8:	e02d      	b.n	8007336 <HAL_RCC_OscConfig+0x376>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10c      	bne.n	80072fc <HAL_RCC_OscConfig+0x33c>
 80072e2:	4b6a      	ldr	r3, [pc, #424]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	4a69      	ldr	r2, [pc, #420]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072e8:	f023 0301 	bic.w	r3, r3, #1
 80072ec:	6713      	str	r3, [r2, #112]	; 0x70
 80072ee:	4b67      	ldr	r3, [pc, #412]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	4a66      	ldr	r2, [pc, #408]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	6713      	str	r3, [r2, #112]	; 0x70
 80072fa:	e01c      	b.n	8007336 <HAL_RCC_OscConfig+0x376>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b05      	cmp	r3, #5
 8007302:	d10c      	bne.n	800731e <HAL_RCC_OscConfig+0x35e>
 8007304:	4b61      	ldr	r3, [pc, #388]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007308:	4a60      	ldr	r2, [pc, #384]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800730a:	f043 0304 	orr.w	r3, r3, #4
 800730e:	6713      	str	r3, [r2, #112]	; 0x70
 8007310:	4b5e      	ldr	r3, [pc, #376]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a5d      	ldr	r2, [pc, #372]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
 800731c:	e00b      	b.n	8007336 <HAL_RCC_OscConfig+0x376>
 800731e:	4b5b      	ldr	r3, [pc, #364]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007322:	4a5a      	ldr	r2, [pc, #360]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	6713      	str	r3, [r2, #112]	; 0x70
 800732a:	4b58      	ldr	r3, [pc, #352]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800732c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732e:	4a57      	ldr	r2, [pc, #348]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007330:	f023 0304 	bic.w	r3, r3, #4
 8007334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d015      	beq.n	800736a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800733e:	f7fe fd73 	bl	8005e28 <HAL_GetTick>
 8007342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007344:	e00a      	b.n	800735c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007346:	f7fe fd6f 	bl	8005e28 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	f241 3288 	movw	r2, #5000	; 0x1388
 8007354:	4293      	cmp	r3, r2
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e0ce      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800735c:	4b4b      	ldr	r3, [pc, #300]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0ee      	beq.n	8007346 <HAL_RCC_OscConfig+0x386>
 8007368:	e014      	b.n	8007394 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800736a:	f7fe fd5d 	bl	8005e28 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007370:	e00a      	b.n	8007388 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fe fd59 	bl	8005e28 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007380:	4293      	cmp	r3, r2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e0b8      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007388:	4b40      	ldr	r3, [pc, #256]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ee      	bne.n	8007372 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d105      	bne.n	80073a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800739a:	4b3c      	ldr	r3, [pc, #240]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	4a3b      	ldr	r2, [pc, #236]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80073a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80a4 	beq.w	80074f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073b0:	4b36      	ldr	r3, [pc, #216]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 030c 	and.w	r3, r3, #12
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	d06b      	beq.n	8007494 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d149      	bne.n	8007458 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073c4:	4b31      	ldr	r3, [pc, #196]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a30      	ldr	r2, [pc, #192]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80073ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d0:	f7fe fd2a 	bl	8005e28 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073d8:	f7fe fd26 	bl	8005e28 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e087      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ea:	4b28      	ldr	r3, [pc, #160]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1f0      	bne.n	80073d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69da      	ldr	r2, [r3, #28]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	019b      	lsls	r3, r3, #6
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740c:	085b      	lsrs	r3, r3, #1
 800740e:	3b01      	subs	r3, #1
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007418:	061b      	lsls	r3, r3, #24
 800741a:	4313      	orrs	r3, r2
 800741c:	4a1b      	ldr	r2, [pc, #108]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800741e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007422:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007424:	4b19      	ldr	r3, [pc, #100]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a18      	ldr	r2, [pc, #96]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800742a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800742e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007430:	f7fe fcfa 	bl	8005e28 <HAL_GetTick>
 8007434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007436:	e008      	b.n	800744a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007438:	f7fe fcf6 	bl	8005e28 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e057      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800744a:	4b10      	ldr	r3, [pc, #64]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0f0      	beq.n	8007438 <HAL_RCC_OscConfig+0x478>
 8007456:	e04f      	b.n	80074f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007458:	4b0c      	ldr	r3, [pc, #48]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a0b      	ldr	r2, [pc, #44]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 800745e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fe fce0 	bl	8005e28 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800746c:	f7fe fcdc 	bl	8005e28 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e03d      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747e:	4b03      	ldr	r3, [pc, #12]	; (800748c <HAL_RCC_OscConfig+0x4cc>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1f0      	bne.n	800746c <HAL_RCC_OscConfig+0x4ac>
 800748a:	e035      	b.n	80074f8 <HAL_RCC_OscConfig+0x538>
 800748c:	40023800 	.word	0x40023800
 8007490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007494:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <HAL_RCC_OscConfig+0x544>)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d028      	beq.n	80074f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d121      	bne.n	80074f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d11a      	bne.n	80074f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80074c4:	4013      	ands	r3, r2
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d111      	bne.n	80074f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074da:	085b      	lsrs	r3, r3, #1
 80074dc:	3b01      	subs	r3, #1
 80074de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d107      	bne.n	80074f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d001      	beq.n	80074f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3718      	adds	r7, #24
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40023800 	.word	0x40023800

08007508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d101      	bne.n	8007520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e0d0      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007520:	4b6a      	ldr	r3, [pc, #424]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d910      	bls.n	8007550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800752e:	4b67      	ldr	r3, [pc, #412]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f023 020f 	bic.w	r2, r3, #15
 8007536:	4965      	ldr	r1, [pc, #404]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	4313      	orrs	r3, r2
 800753c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800753e:	4b63      	ldr	r3, [pc, #396]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 030f 	and.w	r3, r3, #15
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0b8      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b00      	cmp	r3, #0
 800755a:	d020      	beq.n	800759e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d005      	beq.n	8007574 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007568:	4b59      	ldr	r3, [pc, #356]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4a58      	ldr	r2, [pc, #352]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800756e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007572:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007580:	4b53      	ldr	r3, [pc, #332]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	4a52      	ldr	r2, [pc, #328]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007586:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800758a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800758c:	4b50      	ldr	r3, [pc, #320]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	494d      	ldr	r1, [pc, #308]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800759a:	4313      	orrs	r3, r2
 800759c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d040      	beq.n	800762c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d107      	bne.n	80075c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b2:	4b47      	ldr	r3, [pc, #284]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d115      	bne.n	80075ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e07f      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d107      	bne.n	80075da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075ca:	4b41      	ldr	r3, [pc, #260]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d109      	bne.n	80075ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e073      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075da:	4b3d      	ldr	r3, [pc, #244]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e06b      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075ea:	4b39      	ldr	r3, [pc, #228]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 0203 	bic.w	r2, r3, #3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	4936      	ldr	r1, [pc, #216]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075fc:	f7fe fc14 	bl	8005e28 <HAL_GetTick>
 8007600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007602:	e00a      	b.n	800761a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007604:	f7fe fc10 	bl	8005e28 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e053      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800761a:	4b2d      	ldr	r3, [pc, #180]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 020c 	and.w	r2, r3, #12
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	429a      	cmp	r2, r3
 800762a:	d1eb      	bne.n	8007604 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800762c:	4b27      	ldr	r3, [pc, #156]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 030f 	and.w	r3, r3, #15
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d210      	bcs.n	800765c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f023 020f 	bic.w	r2, r3, #15
 8007642:	4922      	ldr	r1, [pc, #136]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	4313      	orrs	r3, r2
 8007648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_RCC_ClockConfig+0x1c4>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d001      	beq.n	800765c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e032      	b.n	80076c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d008      	beq.n	800767a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007668:	4b19      	ldr	r3, [pc, #100]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4916      	ldr	r1, [pc, #88]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007676:	4313      	orrs	r3, r2
 8007678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0308 	and.w	r3, r3, #8
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	490e      	ldr	r1, [pc, #56]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007696:	4313      	orrs	r3, r2
 8007698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800769a:	f000 f821 	bl	80076e0 <HAL_RCC_GetSysClockFreq>
 800769e:	4602      	mov	r2, r0
 80076a0:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <HAL_RCC_ClockConfig+0x1c8>)
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	091b      	lsrs	r3, r3, #4
 80076a6:	f003 030f 	and.w	r3, r3, #15
 80076aa:	490a      	ldr	r1, [pc, #40]	; (80076d4 <HAL_RCC_ClockConfig+0x1cc>)
 80076ac:	5ccb      	ldrb	r3, [r1, r3]
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	4a09      	ldr	r2, [pc, #36]	; (80076d8 <HAL_RCC_ClockConfig+0x1d0>)
 80076b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076b6:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_RCC_ClockConfig+0x1d4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe f9d2 	bl	8005a64 <HAL_InitTick>

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023c00 	.word	0x40023c00
 80076d0:	40023800 	.word	0x40023800
 80076d4:	080117ec 	.word	0x080117ec
 80076d8:	20000050 	.word	0x20000050
 80076dc:	20000054 	.word	0x20000054

080076e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076e4:	b094      	sub	sp, #80	; 0x50
 80076e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	647b      	str	r3, [r7, #68]	; 0x44
 80076ec:	2300      	movs	r3, #0
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f0:	2300      	movs	r3, #0
 80076f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076f8:	4b79      	ldr	r3, [pc, #484]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 030c 	and.w	r3, r3, #12
 8007700:	2b08      	cmp	r3, #8
 8007702:	d00d      	beq.n	8007720 <HAL_RCC_GetSysClockFreq+0x40>
 8007704:	2b08      	cmp	r3, #8
 8007706:	f200 80e1 	bhi.w	80078cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <HAL_RCC_GetSysClockFreq+0x34>
 800770e:	2b04      	cmp	r3, #4
 8007710:	d003      	beq.n	800771a <HAL_RCC_GetSysClockFreq+0x3a>
 8007712:	e0db      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007714:	4b73      	ldr	r3, [pc, #460]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007716:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007718:	e0db      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800771a:	4b73      	ldr	r3, [pc, #460]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800771c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800771e:	e0d8      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007720:	4b6f      	ldr	r3, [pc, #444]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007728:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800772a:	4b6d      	ldr	r3, [pc, #436]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d063      	beq.n	80077fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007736:	4b6a      	ldr	r3, [pc, #424]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	099b      	lsrs	r3, r3, #6
 800773c:	2200      	movs	r2, #0
 800773e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007740:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007748:	633b      	str	r3, [r7, #48]	; 0x30
 800774a:	2300      	movs	r3, #0
 800774c:	637b      	str	r3, [r7, #52]	; 0x34
 800774e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	f04f 0000 	mov.w	r0, #0
 800775a:	f04f 0100 	mov.w	r1, #0
 800775e:	0159      	lsls	r1, r3, #5
 8007760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007764:	0150      	lsls	r0, r2, #5
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4621      	mov	r1, r4
 800776c:	1a51      	subs	r1, r2, r1
 800776e:	6139      	str	r1, [r7, #16]
 8007770:	4629      	mov	r1, r5
 8007772:	eb63 0301 	sbc.w	r3, r3, r1
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007784:	4659      	mov	r1, fp
 8007786:	018b      	lsls	r3, r1, #6
 8007788:	4651      	mov	r1, sl
 800778a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800778e:	4651      	mov	r1, sl
 8007790:	018a      	lsls	r2, r1, #6
 8007792:	4651      	mov	r1, sl
 8007794:	ebb2 0801 	subs.w	r8, r2, r1
 8007798:	4659      	mov	r1, fp
 800779a:	eb63 0901 	sbc.w	r9, r3, r1
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077b2:	4690      	mov	r8, r2
 80077b4:	4699      	mov	r9, r3
 80077b6:	4623      	mov	r3, r4
 80077b8:	eb18 0303 	adds.w	r3, r8, r3
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	462b      	mov	r3, r5
 80077c0:	eb49 0303 	adc.w	r3, r9, r3
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	f04f 0200 	mov.w	r2, #0
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80077d2:	4629      	mov	r1, r5
 80077d4:	024b      	lsls	r3, r1, #9
 80077d6:	4621      	mov	r1, r4
 80077d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80077dc:	4621      	mov	r1, r4
 80077de:	024a      	lsls	r2, r1, #9
 80077e0:	4610      	mov	r0, r2
 80077e2:	4619      	mov	r1, r3
 80077e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077e6:	2200      	movs	r2, #0
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077f0:	f7f9 fa44 	bl	8000c7c <__aeabi_uldivmod>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	4613      	mov	r3, r2
 80077fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077fc:	e058      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077fe:	4b38      	ldr	r3, [pc, #224]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	099b      	lsrs	r3, r3, #6
 8007804:	2200      	movs	r2, #0
 8007806:	4618      	mov	r0, r3
 8007808:	4611      	mov	r1, r2
 800780a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800780e:	623b      	str	r3, [r7, #32]
 8007810:	2300      	movs	r3, #0
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
 8007814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007818:	4642      	mov	r2, r8
 800781a:	464b      	mov	r3, r9
 800781c:	f04f 0000 	mov.w	r0, #0
 8007820:	f04f 0100 	mov.w	r1, #0
 8007824:	0159      	lsls	r1, r3, #5
 8007826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800782a:	0150      	lsls	r0, r2, #5
 800782c:	4602      	mov	r2, r0
 800782e:	460b      	mov	r3, r1
 8007830:	4641      	mov	r1, r8
 8007832:	ebb2 0a01 	subs.w	sl, r2, r1
 8007836:	4649      	mov	r1, r9
 8007838:	eb63 0b01 	sbc.w	fp, r3, r1
 800783c:	f04f 0200 	mov.w	r2, #0
 8007840:	f04f 0300 	mov.w	r3, #0
 8007844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800784c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007850:	ebb2 040a 	subs.w	r4, r2, sl
 8007854:	eb63 050b 	sbc.w	r5, r3, fp
 8007858:	f04f 0200 	mov.w	r2, #0
 800785c:	f04f 0300 	mov.w	r3, #0
 8007860:	00eb      	lsls	r3, r5, #3
 8007862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007866:	00e2      	lsls	r2, r4, #3
 8007868:	4614      	mov	r4, r2
 800786a:	461d      	mov	r5, r3
 800786c:	4643      	mov	r3, r8
 800786e:	18e3      	adds	r3, r4, r3
 8007870:	603b      	str	r3, [r7, #0]
 8007872:	464b      	mov	r3, r9
 8007874:	eb45 0303 	adc.w	r3, r5, r3
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007886:	4629      	mov	r1, r5
 8007888:	028b      	lsls	r3, r1, #10
 800788a:	4621      	mov	r1, r4
 800788c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007890:	4621      	mov	r1, r4
 8007892:	028a      	lsls	r2, r1, #10
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789a:	2200      	movs	r2, #0
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	61fa      	str	r2, [r7, #28]
 80078a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078a4:	f7f9 f9ea 	bl	8000c7c <__aeabi_uldivmod>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4613      	mov	r3, r2
 80078ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078b0:	4b0b      	ldr	r3, [pc, #44]	; (80078e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	3301      	adds	r3, #1
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80078c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078ca:	e002      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80078ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3750      	adds	r7, #80	; 0x50
 80078d8:	46bd      	mov	sp, r7
 80078da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078de:	bf00      	nop
 80078e0:	40023800 	.word	0x40023800
 80078e4:	00f42400 	.word	0x00f42400
 80078e8:	007a1200 	.word	0x007a1200

080078ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000050 	.word	0x20000050

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007908:	f7ff fff0 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b05      	ldr	r3, [pc, #20]	; (8007924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0a9b      	lsrs	r3, r3, #10
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4903      	ldr	r1, [pc, #12]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	080117fc 	.word	0x080117fc

0800792c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007930:	f7ff ffdc 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0b5b      	lsrs	r3, r3, #13
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4903      	ldr	r1, [pc, #12]	; (8007950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40023800 	.word	0x40023800
 8007950:	080117fc 	.word	0x080117fc

08007954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220f      	movs	r2, #15
 8007962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007964:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0203 	and.w	r2, r3, #3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007970:	4b0f      	ldr	r3, [pc, #60]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800797c:	4b0c      	ldr	r3, [pc, #48]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_RCC_GetClockConfig+0x5c>)
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007996:	4b07      	ldr	r3, [pc, #28]	; (80079b4 <HAL_RCC_GetClockConfig+0x60>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 020f 	and.w	r2, r3, #15
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	601a      	str	r2, [r3, #0]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800
 80079b4:	40023c00 	.word	0x40023c00

080079b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b088      	sub	sp, #32
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079e0:	4b69      	ldr	r3, [pc, #420]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	4a68      	ldr	r2, [pc, #416]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079ea:	6093      	str	r3, [r2, #8]
 80079ec:	4b66      	ldr	r3, [pc, #408]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	689a      	ldr	r2, [r3, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f4:	4964      	ldr	r1, [pc, #400]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a02:	2301      	movs	r3, #1
 8007a04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d017      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a12:	4b5d      	ldr	r3, [pc, #372]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a20:	4959      	ldr	r1, [pc, #356]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a30:	d101      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a4e:	4b4e      	ldr	r3, [pc, #312]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	494a      	ldr	r1, [pc, #296]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6c:	d101      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 808b 	beq.w	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a9c:	4b3a      	ldr	r3, [pc, #232]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa0:	4a39      	ldr	r2, [pc, #228]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa8:	4b37      	ldr	r3, [pc, #220]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ab4:	4b35      	ldr	r3, [pc, #212]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a34      	ldr	r2, [pc, #208]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007aba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac0:	f7fe f9b2 	bl	8005e28 <HAL_GetTick>
 8007ac4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ac6:	e008      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac8:	f7fe f9ae 	bl	8005e28 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	2b64      	cmp	r3, #100	; 0x64
 8007ad4:	d901      	bls.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e357      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ada:	4b2c      	ldr	r3, [pc, #176]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0f0      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ae6:	4b28      	ldr	r3, [pc, #160]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d035      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d02e      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b04:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b12:	4a1d      	ldr	r2, [pc, #116]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	4a1a      	ldr	r2, [pc, #104]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b26:	4a18      	ldr	r2, [pc, #96]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b2c:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d114      	bne.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fe f976 	bl	8005e28 <HAL_GetTick>
 8007b3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b3e:	e00a      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b40:	f7fe f972 	bl	8005e28 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d901      	bls.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	e319      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0ee      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b6e:	d111      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b70:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b7c:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b7e:	400b      	ands	r3, r1
 8007b80:	4901      	ldr	r1, [pc, #4]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	608b      	str	r3, [r1, #8]
 8007b86:	e00b      	b.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	40007000 	.word	0x40007000
 8007b90:	0ffffcff 	.word	0x0ffffcff
 8007b94:	4baa      	ldr	r3, [pc, #680]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	4aa9      	ldr	r2, [pc, #676]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b9e:	6093      	str	r3, [r2, #8]
 8007ba0:	4ba7      	ldr	r3, [pc, #668]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bac:	49a4      	ldr	r1, [pc, #656]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0310 	and.w	r3, r3, #16
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d010      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bbe:	4ba0      	ldr	r3, [pc, #640]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc4:	4a9e      	ldr	r2, [pc, #632]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007bce:	4b9c      	ldr	r3, [pc, #624]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd8:	4999      	ldr	r1, [pc, #612]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00a      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bec:	4b94      	ldr	r3, [pc, #592]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bfa:	4991      	ldr	r1, [pc, #580]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c0e:	4b8c      	ldr	r3, [pc, #560]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c1c:	4988      	ldr	r1, [pc, #544]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00a      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c30:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3e:	4980      	ldr	r1, [pc, #512]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c52:	4b7b      	ldr	r3, [pc, #492]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c60:	4977      	ldr	r1, [pc, #476]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d00a      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c74:	4b72      	ldr	r3, [pc, #456]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	f023 0203 	bic.w	r2, r3, #3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	496f      	ldr	r1, [pc, #444]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c96:	4b6a      	ldr	r3, [pc, #424]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	f023 020c 	bic.w	r2, r3, #12
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ca4:	4966      	ldr	r1, [pc, #408]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00a      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cb8:	4b61      	ldr	r3, [pc, #388]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc6:	495e      	ldr	r1, [pc, #376]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cda:	4b59      	ldr	r3, [pc, #356]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce8:	4955      	ldr	r1, [pc, #340]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d00a      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cfc:	4b50      	ldr	r3, [pc, #320]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	494d      	ldr	r1, [pc, #308]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d00a      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d1e:	4b48      	ldr	r3, [pc, #288]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d2c:	4944      	ldr	r1, [pc, #272]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d40:	4b3f      	ldr	r3, [pc, #252]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4e:	493c      	ldr	r1, [pc, #240]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d62:	4b37      	ldr	r3, [pc, #220]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d70:	4933      	ldr	r1, [pc, #204]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d84:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d92:	492b      	ldr	r1, [pc, #172]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d94:	4313      	orrs	r3, r2
 8007d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007da6:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db4:	4922      	ldr	r1, [pc, #136]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc4:	d101      	bne.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df4:	4912      	ldr	r1, [pc, #72]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e08:	4b0d      	ldr	r3, [pc, #52]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e18:	4909      	ldr	r1, [pc, #36]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d006      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 80d9 	beq.w	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e34:	4b02      	ldr	r3, [pc, #8]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a01      	ldr	r2, [pc, #4]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e3e:	e001      	b.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e40:	40023800 	.word	0x40023800
 8007e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e46:	f7fd ffef 	bl	8005e28 <HAL_GetTick>
 8007e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e4c:	e008      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e4e:	f7fd ffeb 	bl	8005e28 <HAL_GetTick>
 8007e52:	4602      	mov	r2, r0
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	2b64      	cmp	r3, #100	; 0x64
 8007e5a:	d901      	bls.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e194      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e60:	4b6c      	ldr	r3, [pc, #432]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1f0      	bne.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d021      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d11d      	bne.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e80:	4b64      	ldr	r3, [pc, #400]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e8e:	4b61      	ldr	r3, [pc, #388]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e94:	0e1b      	lsrs	r3, r3, #24
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	019a      	lsls	r2, r3, #6
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	041b      	lsls	r3, r3, #16
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	061b      	lsls	r3, r3, #24
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	071b      	lsls	r3, r3, #28
 8007eb4:	4957      	ldr	r1, [pc, #348]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d004      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed0:	d00a      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02e      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee6:	d129      	bne.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ee8:	4b4a      	ldr	r3, [pc, #296]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eee:	0c1b      	lsrs	r3, r3, #16
 8007ef0:	f003 0303 	and.w	r3, r3, #3
 8007ef4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ef6:	4b47      	ldr	r3, [pc, #284]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efc:	0f1b      	lsrs	r3, r3, #28
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	019a      	lsls	r2, r3, #6
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	061b      	lsls	r3, r3, #24
 8007f16:	431a      	orrs	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	071b      	lsls	r3, r3, #28
 8007f1c:	493d      	ldr	r1, [pc, #244]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f24:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2a:	f023 021f 	bic.w	r2, r3, #31
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	3b01      	subs	r3, #1
 8007f34:	4937      	ldr	r1, [pc, #220]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d01d      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f48:	4b32      	ldr	r3, [pc, #200]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f4e:	0e1b      	lsrs	r3, r3, #24
 8007f50:	f003 030f 	and.w	r3, r3, #15
 8007f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f56:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5c:	0f1b      	lsrs	r3, r3, #28
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	019a      	lsls	r2, r3, #6
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	041b      	lsls	r3, r3, #16
 8007f70:	431a      	orrs	r2, r3
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	061b      	lsls	r3, r3, #24
 8007f76:	431a      	orrs	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	071b      	lsls	r3, r3, #28
 8007f7c:	4925      	ldr	r1, [pc, #148]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d011      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	019a      	lsls	r2, r3, #6
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	061b      	lsls	r3, r3, #24
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	071b      	lsls	r3, r3, #28
 8007fac:	4919      	ldr	r1, [pc, #100]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fb4:	4b17      	ldr	r3, [pc, #92]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a16      	ldr	r2, [pc, #88]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc0:	f7fd ff32 	bl	8005e28 <HAL_GetTick>
 8007fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fc6:	e008      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fc8:	f7fd ff2e 	bl	8005e28 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b64      	cmp	r3, #100	; 0x64
 8007fd4:	d901      	bls.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e0d7      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fda:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	f040 80cd 	bne.w	8008188 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a08      	ldr	r2, [pc, #32]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ffa:	f7fd ff15 	bl	8005e28 <HAL_GetTick>
 8007ffe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008000:	e00a      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008002:	f7fd ff11 	bl	8005e28 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b64      	cmp	r3, #100	; 0x64
 800800e:	d903      	bls.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e0ba      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008014:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008018:	4b5e      	ldr	r3, [pc, #376]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008024:	d0ed      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d009      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008042:	2b00      	cmp	r3, #0
 8008044:	d02e      	beq.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d12a      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800804e:	4b51      	ldr	r3, [pc, #324]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008054:	0c1b      	lsrs	r3, r3, #16
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800805c:	4b4d      	ldr	r3, [pc, #308]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800805e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008062:	0f1b      	lsrs	r3, r3, #28
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	019a      	lsls	r2, r3, #6
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	431a      	orrs	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	061b      	lsls	r3, r3, #24
 800807c:	431a      	orrs	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	071b      	lsls	r3, r3, #28
 8008082:	4944      	ldr	r1, [pc, #272]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008084:	4313      	orrs	r3, r2
 8008086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800808a:	4b42      	ldr	r3, [pc, #264]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800808c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008090:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	3b01      	subs	r3, #1
 800809a:	021b      	lsls	r3, r3, #8
 800809c:	493d      	ldr	r1, [pc, #244]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d022      	beq.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080b8:	d11d      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080ba:	4b36      	ldr	r3, [pc, #216]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c0:	0e1b      	lsrs	r3, r3, #24
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080c8:	4b32      	ldr	r3, [pc, #200]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	f003 0307 	and.w	r3, r3, #7
 80080d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	019a      	lsls	r2, r3, #6
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	431a      	orrs	r2, r3
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	061b      	lsls	r3, r3, #24
 80080e8:	431a      	orrs	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	071b      	lsls	r3, r3, #28
 80080ee:	4929      	ldr	r1, [pc, #164]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d028      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008102:	4b24      	ldr	r3, [pc, #144]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008108:	0e1b      	lsrs	r3, r3, #24
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008110:	4b20      	ldr	r3, [pc, #128]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	0c1b      	lsrs	r3, r3, #16
 8008118:	f003 0303 	and.w	r3, r3, #3
 800811c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	019a      	lsls	r2, r3, #6
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	041b      	lsls	r3, r3, #16
 8008128:	431a      	orrs	r2, r3
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	071b      	lsls	r3, r3, #28
 8008136:	4917      	ldr	r1, [pc, #92]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008138:	4313      	orrs	r3, r2
 800813a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800813e:	4b15      	ldr	r3, [pc, #84]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4911      	ldr	r1, [pc, #68]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a0e      	ldr	r2, [pc, #56]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008160:	f7fd fe62 	bl	8005e28 <HAL_GetTick>
 8008164:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008166:	e008      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008168:	f7fd fe5e 	bl	8005e28 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b64      	cmp	r3, #100	; 0x64
 8008174:	d901      	bls.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e007      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008186:	d1ef      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3720      	adds	r7, #32
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	40023800 	.word	0x40023800

08008198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e09d      	b.n	80082e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d108      	bne.n	80081c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ba:	d009      	beq.n	80081d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	61da      	str	r2, [r3, #28]
 80081c2:	e005      	b.n	80081d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f7fd fadc 	bl	80057a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008206:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008210:	d902      	bls.n	8008218 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	e002      	b.n	800821e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800821c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008226:	d007      	beq.n	8008238 <HAL_SPI_Init+0xa0>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008230:	d002      	beq.n	8008238 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008248:	431a      	orrs	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0302 	and.w	r3, r3, #2
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827a:	ea42 0103 	orr.w	r1, r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	0c1b      	lsrs	r3, r3, #16
 8008294:	f003 0204 	and.w	r2, r3, #4
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082a6:	f003 0308 	and.w	r3, r3, #8
 80082aa:	431a      	orrs	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80082b4:	ea42 0103 	orr.w	r1, r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80082d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b088      	sub	sp, #32
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	4613      	mov	r3, r2
 80082fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008308:	2b01      	cmp	r3, #1
 800830a:	d101      	bne.n	8008310 <HAL_SPI_Transmit+0x22>
 800830c:	2302      	movs	r3, #2
 800830e:	e158      	b.n	80085c2 <HAL_SPI_Transmit+0x2d4>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008318:	f7fd fd86 	bl	8005e28 <HAL_GetTick>
 800831c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b01      	cmp	r3, #1
 800832c:	d002      	beq.n	8008334 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800832e:	2302      	movs	r3, #2
 8008330:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008332:	e13d      	b.n	80085b0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d002      	beq.n	8008340 <HAL_SPI_Transmit+0x52>
 800833a:	88fb      	ldrh	r3, [r7, #6]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008344:	e134      	b.n	80085b0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2203      	movs	r2, #3
 800834a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	88fa      	ldrh	r2, [r7, #6]
 800835e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	88fa      	ldrh	r2, [r7, #6]
 8008364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008390:	d10f      	bne.n	80083b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083bc:	2b40      	cmp	r3, #64	; 0x40
 80083be:	d007      	beq.n	80083d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083d8:	d94b      	bls.n	8008472 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_SPI_Transmit+0xfa>
 80083e2:	8afb      	ldrh	r3, [r7, #22]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d13e      	bne.n	8008466 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ec:	881a      	ldrh	r2, [r3, #0]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	1c9a      	adds	r2, r3, #2
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008402:	b29b      	uxth	r3, r3
 8008404:	3b01      	subs	r3, #1
 8008406:	b29a      	uxth	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800840c:	e02b      	b.n	8008466 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d112      	bne.n	8008442 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	881a      	ldrh	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008440:	e011      	b.n	8008466 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008442:	f7fd fcf1 	bl	8005e28 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d803      	bhi.n	800845a <HAL_SPI_Transmit+0x16c>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d102      	bne.n	8008460 <HAL_SPI_Transmit+0x172>
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008464:	e0a4      	b.n	80085b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ce      	bne.n	800840e <HAL_SPI_Transmit+0x120>
 8008470:	e07c      	b.n	800856c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_SPI_Transmit+0x192>
 800847a:	8afb      	ldrh	r3, [r7, #22]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d170      	bne.n	8008562 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008484:	b29b      	uxth	r3, r3
 8008486:	2b01      	cmp	r3, #1
 8008488:	d912      	bls.n	80084b0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	1c9a      	adds	r2, r3, #2
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b02      	subs	r3, #2
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084ae:	e058      	b.n	8008562 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	7812      	ldrb	r2, [r2, #0]
 80084bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	3b01      	subs	r3, #1
 80084d0:	b29a      	uxth	r2, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80084d6:	e044      	b.n	8008562 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d12b      	bne.n	800853e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d912      	bls.n	8008516 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	1c9a      	adds	r2, r3, #2
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b02      	subs	r3, #2
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008514:	e025      	b.n	8008562 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	330c      	adds	r3, #12
 8008520:	7812      	ldrb	r2, [r2, #0]
 8008522:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008532:	b29b      	uxth	r3, r3
 8008534:	3b01      	subs	r3, #1
 8008536:	b29a      	uxth	r2, r3
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800853c:	e011      	b.n	8008562 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800853e:	f7fd fc73 	bl	8005e28 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d803      	bhi.n	8008556 <HAL_SPI_Transmit+0x268>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008554:	d102      	bne.n	800855c <HAL_SPI_Transmit+0x26e>
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d102      	bne.n	8008562 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800855c:	2303      	movs	r3, #3
 800855e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008560:	e026      	b.n	80085b0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008566:	b29b      	uxth	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1b5      	bne.n	80084d8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f000 fb69 	bl	8008c48 <SPI_EndRxTxTransaction>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10a      	bne.n	80085a0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800858a:	2300      	movs	r3, #0
 800858c:	613b      	str	r3, [r7, #16]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	77fb      	strb	r3, [r7, #31]
 80085ac:	e000      	b.n	80085b0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80085ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80085c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b08a      	sub	sp, #40	; 0x28
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	60f8      	str	r0, [r7, #12]
 80085d2:	60b9      	str	r1, [r7, #8]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80085d8:	2301      	movs	r3, #1
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_SPI_TransmitReceive+0x26>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e1fb      	b.n	80089e8 <HAL_SPI_TransmitReceive+0x41e>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085f8:	f7fd fc16 	bl	8005e28 <HAL_GetTick>
 80085fc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008604:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800860c:	887b      	ldrh	r3, [r7, #2]
 800860e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008610:	887b      	ldrh	r3, [r7, #2]
 8008612:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008614:	7efb      	ldrb	r3, [r7, #27]
 8008616:	2b01      	cmp	r3, #1
 8008618:	d00e      	beq.n	8008638 <HAL_SPI_TransmitReceive+0x6e>
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008620:	d106      	bne.n	8008630 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <HAL_SPI_TransmitReceive+0x66>
 800862a:	7efb      	ldrb	r3, [r7, #27]
 800862c:	2b04      	cmp	r3, #4
 800862e:	d003      	beq.n	8008638 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008630:	2302      	movs	r3, #2
 8008632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008636:	e1cd      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_SPI_TransmitReceive+0x80>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d002      	beq.n	800864a <HAL_SPI_TransmitReceive+0x80>
 8008644:	887b      	ldrh	r3, [r7, #2]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008650:	e1c0      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b04      	cmp	r3, #4
 800865c:	d003      	beq.n	8008666 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2205      	movs	r2, #5
 8008662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	887a      	ldrh	r2, [r7, #2]
 8008676:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	887a      	ldrh	r2, [r7, #2]
 800867e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	887a      	ldrh	r2, [r7, #2]
 800868c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	887a      	ldrh	r2, [r7, #2]
 8008692:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086a8:	d802      	bhi.n	80086b0 <HAL_SPI_TransmitReceive+0xe6>
 80086aa:	8a3b      	ldrh	r3, [r7, #16]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d908      	bls.n	80086c2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80086be:	605a      	str	r2, [r3, #4]
 80086c0:	e007      	b.n	80086d2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80086d0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d007      	beq.n	80086f0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80086f8:	d97c      	bls.n	80087f4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <HAL_SPI_TransmitReceive+0x13e>
 8008702:	8a7b      	ldrh	r3, [r7, #18]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d169      	bne.n	80087dc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	881a      	ldrh	r2, [r3, #0]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	1c9a      	adds	r2, r3, #2
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b01      	subs	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800872c:	e056      	b.n	80087dc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0302 	and.w	r3, r3, #2
 8008738:	2b02      	cmp	r3, #2
 800873a:	d11b      	bne.n	8008774 <HAL_SPI_TransmitReceive+0x1aa>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d016      	beq.n	8008774 <HAL_SPI_TransmitReceive+0x1aa>
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	2b01      	cmp	r3, #1
 800874a:	d113      	bne.n	8008774 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008750:	881a      	ldrh	r2, [r3, #0]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875c:	1c9a      	adds	r2, r3, #2
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008766:	b29b      	uxth	r3, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b01      	cmp	r3, #1
 8008780:	d11c      	bne.n	80087bc <HAL_SPI_TransmitReceive+0x1f2>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008788:	b29b      	uxth	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d016      	beq.n	80087bc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68da      	ldr	r2, [r3, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	b292      	uxth	r2, r2
 800879a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	1c9a      	adds	r2, r3, #2
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b01      	subs	r3, #1
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087b8:	2301      	movs	r3, #1
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087bc:	f7fd fb34 	bl	8005e28 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d807      	bhi.n	80087dc <HAL_SPI_TransmitReceive+0x212>
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d2:	d003      	beq.n	80087dc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80087da:	e0fb      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1a3      	bne.n	800872e <HAL_SPI_TransmitReceive+0x164>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d19d      	bne.n	800872e <HAL_SPI_TransmitReceive+0x164>
 80087f2:	e0df      	b.n	80089b4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_SPI_TransmitReceive+0x23a>
 80087fc:	8a7b      	ldrh	r3, [r7, #18]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	f040 80cb 	bne.w	800899a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d912      	bls.n	8008834 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	1c9a      	adds	r2, r3, #2
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b02      	subs	r3, #2
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008832:	e0b2      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	330c      	adds	r3, #12
 800883e:	7812      	ldrb	r2, [r2, #0]
 8008840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	b29a      	uxth	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800885a:	e09e      	b.n	800899a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b02      	cmp	r3, #2
 8008868:	d134      	bne.n	80088d4 <HAL_SPI_TransmitReceive+0x30a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886e:	b29b      	uxth	r3, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d02f      	beq.n	80088d4 <HAL_SPI_TransmitReceive+0x30a>
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	2b01      	cmp	r3, #1
 8008878:	d12c      	bne.n	80088d4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800887e:	b29b      	uxth	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	d912      	bls.n	80088aa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	881a      	ldrh	r2, [r3, #0]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	1c9a      	adds	r2, r3, #2
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800889e:	b29b      	uxth	r3, r3
 80088a0:	3b02      	subs	r3, #2
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80088a8:	e012      	b.n	80088d0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	330c      	adds	r3, #12
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d148      	bne.n	8008974 <HAL_SPI_TransmitReceive+0x3aa>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d042      	beq.n	8008974 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d923      	bls.n	8008942 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	b292      	uxth	r2, r2
 8008906:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890c:	1c9a      	adds	r2, r3, #2
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008918:	b29b      	uxth	r3, r3
 800891a:	3b02      	subs	r3, #2
 800891c:	b29a      	uxth	r2, r3
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800892a:	b29b      	uxth	r3, r3
 800892c:	2b01      	cmp	r3, #1
 800892e:	d81f      	bhi.n	8008970 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	e016      	b.n	8008970 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f103 020c 	add.w	r2, r3, #12
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	7812      	ldrb	r2, [r2, #0]
 8008950:	b2d2      	uxtb	r2, r2
 8008952:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	1c5a      	adds	r2, r3, #1
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008970:	2301      	movs	r3, #1
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008974:	f7fd fa58 	bl	8005e28 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008980:	429a      	cmp	r2, r3
 8008982:	d803      	bhi.n	800898c <HAL_SPI_TransmitReceive+0x3c2>
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	d102      	bne.n	8008992 <HAL_SPI_TransmitReceive+0x3c8>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008998:	e01c      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800899e:	b29b      	uxth	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af5b 	bne.w	800885c <HAL_SPI_TransmitReceive+0x292>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f47f af54 	bne.w	800885c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f945 	bl	8008c48 <SPI_EndRxTxTransaction>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	661a      	str	r2, [r3, #96]	; 0x60
 80089d0:	e000      	b.n	80089d4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80089d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80089e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3728      	adds	r7, #40	; 0x28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089fe:	b2db      	uxtb	r3, r3
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	603b      	str	r3, [r7, #0]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008a1c:	f7fd fa04 	bl	8005e28 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	1a9b      	subs	r3, r3, r2
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	4413      	add	r3, r2
 8008a2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008a2c:	f7fd f9fc 	bl	8005e28 <HAL_GetTick>
 8008a30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008a32:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	015b      	lsls	r3, r3, #5
 8008a38:	0d1b      	lsrs	r3, r3, #20
 8008a3a:	69fa      	ldr	r2, [r7, #28]
 8008a3c:	fb02 f303 	mul.w	r3, r2, r3
 8008a40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a42:	e054      	b.n	8008aee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d050      	beq.n	8008aee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008a4c:	f7fd f9ec 	bl	8005e28 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d902      	bls.n	8008a62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d13d      	bne.n	8008ade <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008a70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a7a:	d111      	bne.n	8008aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a84:	d004      	beq.n	8008a90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a8e:	d107      	bne.n	8008aa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aa8:	d10f      	bne.n	8008aca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ab8:	601a      	str	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ac8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e017      	b.n	8008b0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4013      	ands	r3, r2
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	bf0c      	ite	eq
 8008afe:	2301      	moveq	r3, #1
 8008b00:	2300      	movne	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	461a      	mov	r2, r3
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d19b      	bne.n	8008a44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3720      	adds	r7, #32
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000050 	.word	0x20000050

08008b1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008b2e:	f7fd f97b 	bl	8005e28 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008b3e:	f7fd f973 	bl	8005e28 <HAL_GetTick>
 8008b42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008b4c:	4b3d      	ldr	r3, [pc, #244]	; (8008c44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	4613      	mov	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	00da      	lsls	r2, r3, #3
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	0d1b      	lsrs	r3, r3, #20
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5e:	fb02 f303 	mul.w	r3, r2, r3
 8008b62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008b64:	e060      	b.n	8008c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b6c:	d107      	bne.n	8008b7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d050      	beq.n	8008c28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008b86:	f7fd f94f 	bl	8005e28 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d902      	bls.n	8008b9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d13d      	bne.n	8008c18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008baa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bb4:	d111      	bne.n	8008bda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bbe:	d004      	beq.n	8008bca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bc8:	d107      	bne.n	8008bda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be2:	d10f      	bne.n	8008c04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e010      	b.n	8008c3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d101      	bne.n	8008c22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	4013      	ands	r3, r2
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d196      	bne.n	8008b66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	20000050 	.word	0x20000050

08008c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f7ff ff5b 	bl	8008b1c <SPI_WaitFifoStateUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c70:	f043 0220 	orr.w	r2, r3, #32
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e046      	b.n	8008d0a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008c7c:	4b25      	ldr	r3, [pc, #148]	; (8008d14 <SPI_EndRxTxTransaction+0xcc>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a25      	ldr	r2, [pc, #148]	; (8008d18 <SPI_EndRxTxTransaction+0xd0>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	0d5b      	lsrs	r3, r3, #21
 8008c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c9a:	d112      	bne.n	8008cc2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2180      	movs	r1, #128	; 0x80
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f7ff feb0 	bl	8008a0c <SPI_WaitFlagStateUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d016      	beq.n	8008ce0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cb6:	f043 0220 	orr.w	r2, r3, #32
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e023      	b.n	8008d0a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cd8:	2b80      	cmp	r3, #128	; 0x80
 8008cda:	d0f2      	beq.n	8008cc2 <SPI_EndRxTxTransaction+0x7a>
 8008cdc:	e000      	b.n	8008ce0 <SPI_EndRxTxTransaction+0x98>
        break;
 8008cde:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008cec:	68f8      	ldr	r0, [r7, #12]
 8008cee:	f7ff ff15 	bl	8008b1c <SPI_WaitFifoStateUntilTimeout>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d007      	beq.n	8008d08 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfc:	f043 0220 	orr.w	r2, r3, #32
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e000      	b.n	8008d0a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000050 	.word	0x20000050
 8008d18:	165e9f81 	.word	0x165e9f81

08008d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e049      	b.n	8008dc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f841 	bl	8008dca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f000 fb54 	bl	8009408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d001      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e054      	b.n	8008ea2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a26      	ldr	r2, [pc, #152]	; (8008eb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d022      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e22:	d01d      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a22      	ldr	r2, [pc, #136]	; (8008eb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d018      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d013      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	; (8008ebc <HAL_TIM_Base_Start_IT+0xdc>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00e      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d009      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d004      	beq.n	8008e60 <HAL_TIM_Base_Start_IT+0x80>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a1b      	ldr	r2, [pc, #108]	; (8008ec8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d115      	bne.n	8008e8c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	4b19      	ldr	r3, [pc, #100]	; (8008ecc <HAL_TIM_Base_Start_IT+0xec>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b06      	cmp	r3, #6
 8008e70:	d015      	beq.n	8008e9e <HAL_TIM_Base_Start_IT+0xbe>
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e78:	d011      	beq.n	8008e9e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0201 	orr.w	r2, r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8a:	e008      	b.n	8008e9e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0201 	orr.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	e000      	b.n	8008ea0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e9e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40010000 	.word	0x40010000
 8008eb4:	40000400 	.word	0x40000400
 8008eb8:	40000800 	.word	0x40000800
 8008ebc:	40000c00 	.word	0x40000c00
 8008ec0:	40010400 	.word	0x40010400
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40001800 	.word	0x40001800
 8008ecc:	00010007 	.word	0x00010007

08008ed0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e08f      	b.n	8009004 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d106      	bne.n	8008efe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7fc fc99 	bl	8005830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6899      	ldr	r1, [r3, #8]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	4b3e      	ldr	r3, [pc, #248]	; (800900c <HAL_TIM_Encoder_Init+0x13c>)
 8008f12:	400b      	ands	r3, r1
 8008f14:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4610      	mov	r0, r2
 8008f22:	f000 fa71 	bl	8009408 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6a1b      	ldr	r3, [r3, #32]
 8008f3c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	4b31      	ldr	r3, [pc, #196]	; (8009010 <HAL_TIM_Encoder_Init+0x140>)
 8008f4c:	4013      	ands	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	021b      	lsls	r3, r3, #8
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	4b2b      	ldr	r3, [pc, #172]	; (8009014 <HAL_TIM_Encoder_Init+0x144>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4b2a      	ldr	r3, [pc, #168]	; (8009018 <HAL_TIM_Encoder_Init+0x148>)
 8008f6e:	4013      	ands	r3, r2
 8008f70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	68da      	ldr	r2, [r3, #12]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	021b      	lsls	r3, r3, #8
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	011a      	lsls	r2, r3, #4
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	031b      	lsls	r3, r3, #12
 8008f90:	4313      	orrs	r3, r2
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008fa6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	fffebff8 	.word	0xfffebff8
 8009010:	fffffcfc 	.word	0xfffffcfc
 8009014:	fffff3f3 	.word	0xfffff3f3
 8009018:	ffff0f0f 	.word	0xffff0f0f

0800901c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800902c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009034:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800903c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009044:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d110      	bne.n	800906e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d102      	bne.n	8009058 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009052:	7b7b      	ldrb	r3, [r7, #13]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d001      	beq.n	800905c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e089      	b.n	8009170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	e031      	b.n	80090d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b04      	cmp	r3, #4
 8009072:	d110      	bne.n	8009096 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009074:	7bbb      	ldrb	r3, [r7, #14]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d102      	bne.n	8009080 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800907a:	7b3b      	ldrb	r3, [r7, #12]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d001      	beq.n	8009084 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e075      	b.n	8009170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009094:	e01d      	b.n	80090d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d108      	bne.n	80090ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d105      	bne.n	80090ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090a2:	7b7b      	ldrb	r3, [r7, #13]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d102      	bne.n	80090ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090a8:	7b3b      	ldrb	r3, [r7, #12]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d001      	beq.n	80090b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e05e      	b.n	8009170 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2202      	movs	r2, #2
 80090b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d010      	beq.n	8009100 <HAL_TIM_Encoder_Start_IT+0xe4>
 80090de:	e01f      	b.n	8009120 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2201      	movs	r2, #1
 80090e6:	2100      	movs	r1, #0
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fa2d 	bl	8009548 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68da      	ldr	r2, [r3, #12]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0202 	orr.w	r2, r2, #2
 80090fc:	60da      	str	r2, [r3, #12]
      break;
 80090fe:	e02e      	b.n	800915e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2201      	movs	r2, #1
 8009106:	2104      	movs	r1, #4
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fa1d 	bl	8009548 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 0204 	orr.w	r2, r2, #4
 800911c:	60da      	str	r2, [r3, #12]
      break;
 800911e:	e01e      	b.n	800915e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2201      	movs	r2, #1
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fa0d 	bl	8009548 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2201      	movs	r2, #1
 8009134:	2104      	movs	r1, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fa06 	bl	8009548 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0202 	orr.w	r2, r2, #2
 800914a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68da      	ldr	r2, [r3, #12]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f042 0204 	orr.w	r2, r2, #4
 800915a:	60da      	str	r2, [r3, #12]
      break;
 800915c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0201 	orr.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b02      	cmp	r3, #2
 800918c:	d122      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f003 0302 	and.w	r3, r3, #2
 8009198:	2b02      	cmp	r3, #2
 800919a:	d11b      	bne.n	80091d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f06f 0202 	mvn.w	r2, #2
 80091a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f905 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80091c0:	e005      	b.n	80091ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f8f7 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f908 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d122      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0304 	and.w	r3, r3, #4
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	d11b      	bne.n	8009228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0204 	mvn.w	r2, #4
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8db 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f8cd 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f8de 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b08      	cmp	r3, #8
 8009234:	d122      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	f003 0308 	and.w	r3, r3, #8
 8009240:	2b08      	cmp	r3, #8
 8009242:	d11b      	bne.n	800927c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f06f 0208 	mvn.w	r2, #8
 800924c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2204      	movs	r2, #4
 8009252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f003 0303 	and.w	r3, r3, #3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d003      	beq.n	800926a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f8b1 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 8009268:	e005      	b.n	8009276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f8a3 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8b4 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	f003 0310 	and.w	r3, r3, #16
 8009286:	2b10      	cmp	r3, #16
 8009288:	d122      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b10      	cmp	r3, #16
 8009296:	d11b      	bne.n	80092d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f06f 0210 	mvn.w	r2, #16
 80092a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2208      	movs	r2, #8
 80092a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f887 	bl	80093ca <HAL_TIM_IC_CaptureCallback>
 80092bc:	e005      	b.n	80092ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f879 	bl	80093b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f88a 	bl	80093de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d10e      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d107      	bne.n	80092fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f06f 0201 	mvn.w	r2, #1
 80092f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7fb ff8e 	bl	8005218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009306:	2b80      	cmp	r3, #128	; 0x80
 8009308:	d10e      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009314:	2b80      	cmp	r3, #128	; 0x80
 8009316:	d107      	bne.n	8009328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f9ce 	bl	80096c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009336:	d10e      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b80      	cmp	r3, #128	; 0x80
 8009344:	d107      	bne.n	8009356 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f9c1 	bl	80096d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d10e      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d107      	bne.n	8009382 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f838 	bl	80093f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	f003 0320 	and.w	r3, r3, #32
 800938c:	2b20      	cmp	r3, #32
 800938e:	d10e      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	f003 0320 	and.w	r3, r3, #32
 800939a:	2b20      	cmp	r3, #32
 800939c:	d107      	bne.n	80093ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f06f 0220 	mvn.w	r2, #32
 80093a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f981 	bl	80096b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093d2:	bf00      	nop
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093e6:	bf00      	nop
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b083      	sub	sp, #12
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093fa:	bf00      	nop
 80093fc:	370c      	adds	r7, #12
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
	...

08009408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a40      	ldr	r2, [pc, #256]	; (800951c <TIM_Base_SetConfig+0x114>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d013      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d00f      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a3d      	ldr	r2, [pc, #244]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d00b      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a3c      	ldr	r2, [pc, #240]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d007      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a3b      	ldr	r2, [pc, #236]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_Base_SetConfig+0x40>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a3a      	ldr	r2, [pc, #232]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d108      	bne.n	800945a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800944e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4313      	orrs	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a2f      	ldr	r2, [pc, #188]	; (800951c <TIM_Base_SetConfig+0x114>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d02b      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009468:	d027      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2c      	ldr	r2, [pc, #176]	; (8009520 <TIM_Base_SetConfig+0x118>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d023      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2b      	ldr	r2, [pc, #172]	; (8009524 <TIM_Base_SetConfig+0x11c>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d01f      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a2a      	ldr	r2, [pc, #168]	; (8009528 <TIM_Base_SetConfig+0x120>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d01b      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a29      	ldr	r2, [pc, #164]	; (800952c <TIM_Base_SetConfig+0x124>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d017      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a28      	ldr	r2, [pc, #160]	; (8009530 <TIM_Base_SetConfig+0x128>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d013      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a27      	ldr	r2, [pc, #156]	; (8009534 <TIM_Base_SetConfig+0x12c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d00f      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	4a26      	ldr	r2, [pc, #152]	; (8009538 <TIM_Base_SetConfig+0x130>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d00b      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	4a25      	ldr	r2, [pc, #148]	; (800953c <TIM_Base_SetConfig+0x134>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d007      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4a24      	ldr	r2, [pc, #144]	; (8009540 <TIM_Base_SetConfig+0x138>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d003      	beq.n	80094ba <TIM_Base_SetConfig+0xb2>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	4a23      	ldr	r2, [pc, #140]	; (8009544 <TIM_Base_SetConfig+0x13c>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d108      	bne.n	80094cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689a      	ldr	r2, [r3, #8]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a0a      	ldr	r2, [pc, #40]	; (800951c <TIM_Base_SetConfig+0x114>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0xf8>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a0c      	ldr	r2, [pc, #48]	; (800952c <TIM_Base_SetConfig+0x124>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]
}
 800950e:	bf00      	nop
 8009510:	3714      	adds	r7, #20
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40010000 	.word	0x40010000
 8009520:	40000400 	.word	0x40000400
 8009524:	40000800 	.word	0x40000800
 8009528:	40000c00 	.word	0x40000c00
 800952c:	40010400 	.word	0x40010400
 8009530:	40014000 	.word	0x40014000
 8009534:	40014400 	.word	0x40014400
 8009538:	40014800 	.word	0x40014800
 800953c:	40001800 	.word	0x40001800
 8009540:	40001c00 	.word	0x40001c00
 8009544:	40002000 	.word	0x40002000

08009548 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	f003 031f 	and.w	r3, r3, #31
 800955a:	2201      	movs	r2, #1
 800955c:	fa02 f303 	lsl.w	r3, r2, r3
 8009560:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6a1a      	ldr	r2, [r3, #32]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	43db      	mvns	r3, r3
 800956a:	401a      	ands	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6a1a      	ldr	r2, [r3, #32]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f003 031f 	and.w	r3, r3, #31
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	fa01 f303 	lsl.w	r3, r1, r3
 8009580:	431a      	orrs	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	621a      	str	r2, [r3, #32]
}
 8009586:	bf00      	nop
 8009588:	371c      	adds	r7, #28
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
	...

08009594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e06d      	b.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a30      	ldr	r2, [pc, #192]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a2f      	ldr	r2, [pc, #188]	; (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d108      	bne.n	80095f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a20      	ldr	r2, [pc, #128]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d022      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961e:	d01d      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1d      	ldr	r2, [pc, #116]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d018      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a1c      	ldr	r2, [pc, #112]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d013      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1a      	ldr	r2, [pc, #104]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00e      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a15      	ldr	r2, [pc, #84]	; (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d009      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a16      	ldr	r2, [pc, #88]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d004      	beq.n	800965c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a15      	ldr	r2, [pc, #84]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d10c      	bne.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	4313      	orrs	r3, r2
 800966c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	40010000 	.word	0x40010000
 8009698:	40010400 	.word	0x40010400
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40001800 	.word	0x40001800

080096b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e040      	b.n	8009780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fc f906 	bl	8005920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	; 0x24
 8009718:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f8b0 	bl	8009890 <UART_SetConfig>
 8009730:	4603      	mov	r3, r0
 8009732:	2b01      	cmp	r3, #1
 8009734:	d101      	bne.n	800973a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e022      	b.n	8009780 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b00      	cmp	r3, #0
 8009740:	d002      	beq.n	8009748 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fb08 	bl	8009d58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fb8f 	bl	8009e9c <UART_CheckIdleState>
 800977e:	4603      	mov	r3, r0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08a      	sub	sp, #40	; 0x28
 800978c:	af02      	add	r7, sp, #8
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	603b      	str	r3, [r7, #0]
 8009794:	4613      	mov	r3, r2
 8009796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800979c:	2b20      	cmp	r3, #32
 800979e:	d171      	bne.n	8009884 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <HAL_UART_Transmit+0x24>
 80097a6:	88fb      	ldrh	r3, [r7, #6]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e06a      	b.n	8009886 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2221      	movs	r2, #33	; 0x21
 80097bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097be:	f7fc fb33 	bl	8005e28 <HAL_GetTick>
 80097c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	88fa      	ldrh	r2, [r7, #6]
 80097d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097dc:	d108      	bne.n	80097f0 <HAL_UART_Transmit+0x68>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d104      	bne.n	80097f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	61bb      	str	r3, [r7, #24]
 80097ee:	e003      	b.n	80097f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097f8:	e02c      	b.n	8009854 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2200      	movs	r2, #0
 8009802:	2180      	movs	r1, #128	; 0x80
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 fb80 	bl	8009f0a <UART_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e038      	b.n	8009886 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	461a      	mov	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009828:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	3302      	adds	r3, #2
 800982e:	61bb      	str	r3, [r7, #24]
 8009830:	e007      	b.n	8009842 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	781a      	ldrb	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	3301      	adds	r3, #1
 8009840:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009848:	b29b      	uxth	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	b29a      	uxth	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1cc      	bne.n	80097fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2200      	movs	r2, #0
 8009868:	2140      	movs	r1, #64	; 0x40
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fb4d 	bl	8009f0a <UART_WaitOnFlagUntilTimeout>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d001      	beq.n	800987a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009876:	2303      	movs	r3, #3
 8009878:	e005      	b.n	8009886 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2220      	movs	r2, #32
 800987e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	e000      	b.n	8009886 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009884:	2302      	movs	r3, #2
  }
}
 8009886:	4618      	mov	r0, r3
 8009888:	3720      	adds	r7, #32
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
	...

08009890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689a      	ldr	r2, [r3, #8]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	695b      	ldr	r3, [r3, #20]
 80098aa:	431a      	orrs	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	69db      	ldr	r3, [r3, #28]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4ba6      	ldr	r3, [pc, #664]	; (8009b54 <UART_SetConfig+0x2c4>)
 80098bc:	4013      	ands	r3, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	6979      	ldr	r1, [r7, #20]
 80098c4:	430b      	orrs	r3, r1
 80098c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68da      	ldr	r2, [r3, #12]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a1b      	ldr	r3, [r3, #32]
 80098e8:	697a      	ldr	r2, [r7, #20]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	430a      	orrs	r2, r1
 8009900:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a94      	ldr	r2, [pc, #592]	; (8009b58 <UART_SetConfig+0x2c8>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d120      	bne.n	800994e <UART_SetConfig+0xbe>
 800990c:	4b93      	ldr	r3, [pc, #588]	; (8009b5c <UART_SetConfig+0x2cc>)
 800990e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	2b03      	cmp	r3, #3
 8009918:	d816      	bhi.n	8009948 <UART_SetConfig+0xb8>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <UART_SetConfig+0x90>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009931 	.word	0x08009931
 8009924:	0800993d 	.word	0x0800993d
 8009928:	08009937 	.word	0x08009937
 800992c:	08009943 	.word	0x08009943
 8009930:	2301      	movs	r3, #1
 8009932:	77fb      	strb	r3, [r7, #31]
 8009934:	e150      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009936:	2302      	movs	r3, #2
 8009938:	77fb      	strb	r3, [r7, #31]
 800993a:	e14d      	b.n	8009bd8 <UART_SetConfig+0x348>
 800993c:	2304      	movs	r3, #4
 800993e:	77fb      	strb	r3, [r7, #31]
 8009940:	e14a      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009942:	2308      	movs	r3, #8
 8009944:	77fb      	strb	r3, [r7, #31]
 8009946:	e147      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009948:	2310      	movs	r3, #16
 800994a:	77fb      	strb	r3, [r7, #31]
 800994c:	e144      	b.n	8009bd8 <UART_SetConfig+0x348>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a83      	ldr	r2, [pc, #524]	; (8009b60 <UART_SetConfig+0x2d0>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d132      	bne.n	80099be <UART_SetConfig+0x12e>
 8009958:	4b80      	ldr	r3, [pc, #512]	; (8009b5c <UART_SetConfig+0x2cc>)
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	f003 030c 	and.w	r3, r3, #12
 8009962:	2b0c      	cmp	r3, #12
 8009964:	d828      	bhi.n	80099b8 <UART_SetConfig+0x128>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <UART_SetConfig+0xdc>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	080099a1 	.word	0x080099a1
 8009970:	080099b9 	.word	0x080099b9
 8009974:	080099b9 	.word	0x080099b9
 8009978:	080099b9 	.word	0x080099b9
 800997c:	080099ad 	.word	0x080099ad
 8009980:	080099b9 	.word	0x080099b9
 8009984:	080099b9 	.word	0x080099b9
 8009988:	080099b9 	.word	0x080099b9
 800998c:	080099a7 	.word	0x080099a7
 8009990:	080099b9 	.word	0x080099b9
 8009994:	080099b9 	.word	0x080099b9
 8009998:	080099b9 	.word	0x080099b9
 800999c:	080099b3 	.word	0x080099b3
 80099a0:	2300      	movs	r3, #0
 80099a2:	77fb      	strb	r3, [r7, #31]
 80099a4:	e118      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099a6:	2302      	movs	r3, #2
 80099a8:	77fb      	strb	r3, [r7, #31]
 80099aa:	e115      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099ac:	2304      	movs	r3, #4
 80099ae:	77fb      	strb	r3, [r7, #31]
 80099b0:	e112      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099b2:	2308      	movs	r3, #8
 80099b4:	77fb      	strb	r3, [r7, #31]
 80099b6:	e10f      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099b8:	2310      	movs	r3, #16
 80099ba:	77fb      	strb	r3, [r7, #31]
 80099bc:	e10c      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a68      	ldr	r2, [pc, #416]	; (8009b64 <UART_SetConfig+0x2d4>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d120      	bne.n	8009a0a <UART_SetConfig+0x17a>
 80099c8:	4b64      	ldr	r3, [pc, #400]	; (8009b5c <UART_SetConfig+0x2cc>)
 80099ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099d2:	2b30      	cmp	r3, #48	; 0x30
 80099d4:	d013      	beq.n	80099fe <UART_SetConfig+0x16e>
 80099d6:	2b30      	cmp	r3, #48	; 0x30
 80099d8:	d814      	bhi.n	8009a04 <UART_SetConfig+0x174>
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d009      	beq.n	80099f2 <UART_SetConfig+0x162>
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d810      	bhi.n	8009a04 <UART_SetConfig+0x174>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <UART_SetConfig+0x15c>
 80099e6:	2b10      	cmp	r3, #16
 80099e8:	d006      	beq.n	80099f8 <UART_SetConfig+0x168>
 80099ea:	e00b      	b.n	8009a04 <UART_SetConfig+0x174>
 80099ec:	2300      	movs	r3, #0
 80099ee:	77fb      	strb	r3, [r7, #31]
 80099f0:	e0f2      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099f2:	2302      	movs	r3, #2
 80099f4:	77fb      	strb	r3, [r7, #31]
 80099f6:	e0ef      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099f8:	2304      	movs	r3, #4
 80099fa:	77fb      	strb	r3, [r7, #31]
 80099fc:	e0ec      	b.n	8009bd8 <UART_SetConfig+0x348>
 80099fe:	2308      	movs	r3, #8
 8009a00:	77fb      	strb	r3, [r7, #31]
 8009a02:	e0e9      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a04:	2310      	movs	r3, #16
 8009a06:	77fb      	strb	r3, [r7, #31]
 8009a08:	e0e6      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a56      	ldr	r2, [pc, #344]	; (8009b68 <UART_SetConfig+0x2d8>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d120      	bne.n	8009a56 <UART_SetConfig+0x1c6>
 8009a14:	4b51      	ldr	r3, [pc, #324]	; (8009b5c <UART_SetConfig+0x2cc>)
 8009a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a1e:	2bc0      	cmp	r3, #192	; 0xc0
 8009a20:	d013      	beq.n	8009a4a <UART_SetConfig+0x1ba>
 8009a22:	2bc0      	cmp	r3, #192	; 0xc0
 8009a24:	d814      	bhi.n	8009a50 <UART_SetConfig+0x1c0>
 8009a26:	2b80      	cmp	r3, #128	; 0x80
 8009a28:	d009      	beq.n	8009a3e <UART_SetConfig+0x1ae>
 8009a2a:	2b80      	cmp	r3, #128	; 0x80
 8009a2c:	d810      	bhi.n	8009a50 <UART_SetConfig+0x1c0>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d002      	beq.n	8009a38 <UART_SetConfig+0x1a8>
 8009a32:	2b40      	cmp	r3, #64	; 0x40
 8009a34:	d006      	beq.n	8009a44 <UART_SetConfig+0x1b4>
 8009a36:	e00b      	b.n	8009a50 <UART_SetConfig+0x1c0>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e0cc      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a3e:	2302      	movs	r3, #2
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e0c9      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a44:	2304      	movs	r3, #4
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e0c6      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a4a:	2308      	movs	r3, #8
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e0c3      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a50:	2310      	movs	r3, #16
 8009a52:	77fb      	strb	r3, [r7, #31]
 8009a54:	e0c0      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a44      	ldr	r2, [pc, #272]	; (8009b6c <UART_SetConfig+0x2dc>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d125      	bne.n	8009aac <UART_SetConfig+0x21c>
 8009a60:	4b3e      	ldr	r3, [pc, #248]	; (8009b5c <UART_SetConfig+0x2cc>)
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a6e:	d017      	beq.n	8009aa0 <UART_SetConfig+0x210>
 8009a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a74:	d817      	bhi.n	8009aa6 <UART_SetConfig+0x216>
 8009a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7a:	d00b      	beq.n	8009a94 <UART_SetConfig+0x204>
 8009a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a80:	d811      	bhi.n	8009aa6 <UART_SetConfig+0x216>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <UART_SetConfig+0x1fe>
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8a:	d006      	beq.n	8009a9a <UART_SetConfig+0x20a>
 8009a8c:	e00b      	b.n	8009aa6 <UART_SetConfig+0x216>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	77fb      	strb	r3, [r7, #31]
 8009a92:	e0a1      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a94:	2302      	movs	r3, #2
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e09e      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009a9a:	2304      	movs	r3, #4
 8009a9c:	77fb      	strb	r3, [r7, #31]
 8009a9e:	e09b      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009aa0:	2308      	movs	r3, #8
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e098      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009aa6:	2310      	movs	r3, #16
 8009aa8:	77fb      	strb	r3, [r7, #31]
 8009aaa:	e095      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a2f      	ldr	r2, [pc, #188]	; (8009b70 <UART_SetConfig+0x2e0>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d125      	bne.n	8009b02 <UART_SetConfig+0x272>
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <UART_SetConfig+0x2cc>)
 8009ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009abc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ac4:	d017      	beq.n	8009af6 <UART_SetConfig+0x266>
 8009ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009aca:	d817      	bhi.n	8009afc <UART_SetConfig+0x26c>
 8009acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad0:	d00b      	beq.n	8009aea <UART_SetConfig+0x25a>
 8009ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ad6:	d811      	bhi.n	8009afc <UART_SetConfig+0x26c>
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d003      	beq.n	8009ae4 <UART_SetConfig+0x254>
 8009adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ae0:	d006      	beq.n	8009af0 <UART_SetConfig+0x260>
 8009ae2:	e00b      	b.n	8009afc <UART_SetConfig+0x26c>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e076      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009aea:	2302      	movs	r3, #2
 8009aec:	77fb      	strb	r3, [r7, #31]
 8009aee:	e073      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009af0:	2304      	movs	r3, #4
 8009af2:	77fb      	strb	r3, [r7, #31]
 8009af4:	e070      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009af6:	2308      	movs	r3, #8
 8009af8:	77fb      	strb	r3, [r7, #31]
 8009afa:	e06d      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009afc:	2310      	movs	r3, #16
 8009afe:	77fb      	strb	r3, [r7, #31]
 8009b00:	e06a      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a1b      	ldr	r2, [pc, #108]	; (8009b74 <UART_SetConfig+0x2e4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d138      	bne.n	8009b7e <UART_SetConfig+0x2ee>
 8009b0c:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <UART_SetConfig+0x2cc>)
 8009b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009b16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b1a:	d017      	beq.n	8009b4c <UART_SetConfig+0x2bc>
 8009b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b20:	d82a      	bhi.n	8009b78 <UART_SetConfig+0x2e8>
 8009b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b26:	d00b      	beq.n	8009b40 <UART_SetConfig+0x2b0>
 8009b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b2c:	d824      	bhi.n	8009b78 <UART_SetConfig+0x2e8>
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <UART_SetConfig+0x2aa>
 8009b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b36:	d006      	beq.n	8009b46 <UART_SetConfig+0x2b6>
 8009b38:	e01e      	b.n	8009b78 <UART_SetConfig+0x2e8>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e04b      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b40:	2302      	movs	r3, #2
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e048      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b46:	2304      	movs	r3, #4
 8009b48:	77fb      	strb	r3, [r7, #31]
 8009b4a:	e045      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e042      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b52:	bf00      	nop
 8009b54:	efff69f3 	.word	0xefff69f3
 8009b58:	40011000 	.word	0x40011000
 8009b5c:	40023800 	.word	0x40023800
 8009b60:	40004400 	.word	0x40004400
 8009b64:	40004800 	.word	0x40004800
 8009b68:	40004c00 	.word	0x40004c00
 8009b6c:	40005000 	.word	0x40005000
 8009b70:	40011400 	.word	0x40011400
 8009b74:	40007800 	.word	0x40007800
 8009b78:	2310      	movs	r3, #16
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e02c      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a72      	ldr	r2, [pc, #456]	; (8009d4c <UART_SetConfig+0x4bc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d125      	bne.n	8009bd4 <UART_SetConfig+0x344>
 8009b88:	4b71      	ldr	r3, [pc, #452]	; (8009d50 <UART_SetConfig+0x4c0>)
 8009b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b92:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b96:	d017      	beq.n	8009bc8 <UART_SetConfig+0x338>
 8009b98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b9c:	d817      	bhi.n	8009bce <UART_SetConfig+0x33e>
 8009b9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba2:	d00b      	beq.n	8009bbc <UART_SetConfig+0x32c>
 8009ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ba8:	d811      	bhi.n	8009bce <UART_SetConfig+0x33e>
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <UART_SetConfig+0x326>
 8009bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bb2:	d006      	beq.n	8009bc2 <UART_SetConfig+0x332>
 8009bb4:	e00b      	b.n	8009bce <UART_SetConfig+0x33e>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	77fb      	strb	r3, [r7, #31]
 8009bba:	e00d      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	77fb      	strb	r3, [r7, #31]
 8009bc0:	e00a      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009bc2:	2304      	movs	r3, #4
 8009bc4:	77fb      	strb	r3, [r7, #31]
 8009bc6:	e007      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	77fb      	strb	r3, [r7, #31]
 8009bcc:	e004      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009bce:	2310      	movs	r3, #16
 8009bd0:	77fb      	strb	r3, [r7, #31]
 8009bd2:	e001      	b.n	8009bd8 <UART_SetConfig+0x348>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009be0:	d15b      	bne.n	8009c9a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009be2:	7ffb      	ldrb	r3, [r7, #31]
 8009be4:	2b08      	cmp	r3, #8
 8009be6:	d828      	bhi.n	8009c3a <UART_SetConfig+0x3aa>
 8009be8:	a201      	add	r2, pc, #4	; (adr r2, 8009bf0 <UART_SetConfig+0x360>)
 8009bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009c15 	.word	0x08009c15
 8009bf4:	08009c1d 	.word	0x08009c1d
 8009bf8:	08009c25 	.word	0x08009c25
 8009bfc:	08009c3b 	.word	0x08009c3b
 8009c00:	08009c2b 	.word	0x08009c2b
 8009c04:	08009c3b 	.word	0x08009c3b
 8009c08:	08009c3b 	.word	0x08009c3b
 8009c0c:	08009c3b 	.word	0x08009c3b
 8009c10:	08009c33 	.word	0x08009c33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c14:	f7fd fe76 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8009c18:	61b8      	str	r0, [r7, #24]
        break;
 8009c1a:	e013      	b.n	8009c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c1c:	f7fd fe86 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009c20:	61b8      	str	r0, [r7, #24]
        break;
 8009c22:	e00f      	b.n	8009c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c24:	4b4b      	ldr	r3, [pc, #300]	; (8009d54 <UART_SetConfig+0x4c4>)
 8009c26:	61bb      	str	r3, [r7, #24]
        break;
 8009c28:	e00c      	b.n	8009c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c2a:	f7fd fd59 	bl	80076e0 <HAL_RCC_GetSysClockFreq>
 8009c2e:	61b8      	str	r0, [r7, #24]
        break;
 8009c30:	e008      	b.n	8009c44 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c36:	61bb      	str	r3, [r7, #24]
        break;
 8009c38:	e004      	b.n	8009c44 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	77bb      	strb	r3, [r7, #30]
        break;
 8009c42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d074      	beq.n	8009d34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	005a      	lsls	r2, r3, #1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	085b      	lsrs	r3, r3, #1
 8009c54:	441a      	add	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b0f      	cmp	r3, #15
 8009c64:	d916      	bls.n	8009c94 <UART_SetConfig+0x404>
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c6c:	d212      	bcs.n	8009c94 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f023 030f 	bic.w	r3, r3, #15
 8009c76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	f003 0307 	and.w	r3, r3, #7
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	89fb      	ldrh	r3, [r7, #14]
 8009c86:	4313      	orrs	r3, r2
 8009c88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	89fa      	ldrh	r2, [r7, #14]
 8009c90:	60da      	str	r2, [r3, #12]
 8009c92:	e04f      	b.n	8009d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	77bb      	strb	r3, [r7, #30]
 8009c98:	e04c      	b.n	8009d34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c9a:	7ffb      	ldrb	r3, [r7, #31]
 8009c9c:	2b08      	cmp	r3, #8
 8009c9e:	d828      	bhi.n	8009cf2 <UART_SetConfig+0x462>
 8009ca0:	a201      	add	r2, pc, #4	; (adr r2, 8009ca8 <UART_SetConfig+0x418>)
 8009ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca6:	bf00      	nop
 8009ca8:	08009ccd 	.word	0x08009ccd
 8009cac:	08009cd5 	.word	0x08009cd5
 8009cb0:	08009cdd 	.word	0x08009cdd
 8009cb4:	08009cf3 	.word	0x08009cf3
 8009cb8:	08009ce3 	.word	0x08009ce3
 8009cbc:	08009cf3 	.word	0x08009cf3
 8009cc0:	08009cf3 	.word	0x08009cf3
 8009cc4:	08009cf3 	.word	0x08009cf3
 8009cc8:	08009ceb 	.word	0x08009ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ccc:	f7fd fe1a 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8009cd0:	61b8      	str	r0, [r7, #24]
        break;
 8009cd2:	e013      	b.n	8009cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cd4:	f7fd fe2a 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009cd8:	61b8      	str	r0, [r7, #24]
        break;
 8009cda:	e00f      	b.n	8009cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009cdc:	4b1d      	ldr	r3, [pc, #116]	; (8009d54 <UART_SetConfig+0x4c4>)
 8009cde:	61bb      	str	r3, [r7, #24]
        break;
 8009ce0:	e00c      	b.n	8009cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ce2:	f7fd fcfd 	bl	80076e0 <HAL_RCC_GetSysClockFreq>
 8009ce6:	61b8      	str	r0, [r7, #24]
        break;
 8009ce8:	e008      	b.n	8009cfc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cee:	61bb      	str	r3, [r7, #24]
        break;
 8009cf0:	e004      	b.n	8009cfc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	77bb      	strb	r3, [r7, #30]
        break;
 8009cfa:	bf00      	nop
    }

    if (pclk != 0U)
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d018      	beq.n	8009d34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	085a      	lsrs	r2, r3, #1
 8009d08:	69bb      	ldr	r3, [r7, #24]
 8009d0a:	441a      	add	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b0f      	cmp	r3, #15
 8009d1a:	d909      	bls.n	8009d30 <UART_SetConfig+0x4a0>
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d22:	d205      	bcs.n	8009d30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	60da      	str	r2, [r3, #12]
 8009d2e:	e001      	b.n	8009d34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009d40:	7fbb      	ldrb	r3, [r7, #30]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3720      	adds	r7, #32
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	40007c00 	.word	0x40007c00
 8009d50:	40023800 	.word	0x40023800
 8009d54:	00f42400 	.word	0x00f42400

08009d58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00a      	beq.n	8009d82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	f003 0302 	and.w	r3, r3, #2
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00a      	beq.n	8009da4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	f003 0304 	and.w	r3, r3, #4
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00a      	beq.n	8009dc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dca:	f003 0308 	and.w	r3, r3, #8
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	430a      	orrs	r2, r1
 8009de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	f003 0310 	and.w	r3, r3, #16
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00a      	beq.n	8009e0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	430a      	orrs	r2, r1
 8009e08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00a      	beq.n	8009e2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d01a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e56:	d10a      	bne.n	8009e6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009eac:	f7fb ffbc 	bl	8005e28 <HAL_GetTick>
 8009eb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d10e      	bne.n	8009ede <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ec0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f81b 	bl	8009f0a <UART_WaitOnFlagUntilTimeout>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e011      	b.n	8009f02 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2220      	movs	r2, #32
 8009ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b09c      	sub	sp, #112	; 0x70
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	60f8      	str	r0, [r7, #12]
 8009f12:	60b9      	str	r1, [r7, #8]
 8009f14:	603b      	str	r3, [r7, #0]
 8009f16:	4613      	mov	r3, r2
 8009f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f1a:	e0a7      	b.n	800a06c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	f000 80a3 	beq.w	800a06c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f26:	f7fb ff7f 	bl	8005e28 <HAL_GetTick>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d302      	bcc.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x32>
 8009f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d13f      	bne.n	8009fbc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009f50:	667b      	str	r3, [r7, #100]	; 0x64
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009f62:	e841 2300 	strex	r3, r2, [r1]
 8009f66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1e6      	bne.n	8009f3c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3308      	adds	r3, #8
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f78:	e853 3f00 	ldrex	r3, [r3]
 8009f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f80:	f023 0301 	bic.w	r3, r3, #1
 8009f84:	663b      	str	r3, [r7, #96]	; 0x60
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009f8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009f90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f96:	e841 2300 	strex	r3, r2, [r1]
 8009f9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d1e5      	bne.n	8009f6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2220      	movs	r2, #32
 8009fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e068      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f003 0304 	and.w	r3, r3, #4
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d050      	beq.n	800a06c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	69db      	ldr	r3, [r3, #28]
 8009fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fd8:	d148      	bne.n	800a06c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fe2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a002:	637b      	str	r3, [r7, #52]	; 0x34
 800a004:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e6      	bne.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	613b      	str	r3, [r7, #16]
   return(result);
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a036:	623a      	str	r2, [r7, #32]
 800a038:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	69f9      	ldr	r1, [r7, #28]
 800a03c:	6a3a      	ldr	r2, [r7, #32]
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	61bb      	str	r3, [r7, #24]
   return(result);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2220      	movs	r2, #32
 800a04e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2220      	movs	r2, #32
 800a054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a068:	2303      	movs	r3, #3
 800a06a:	e010      	b.n	800a08e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	69da      	ldr	r2, [r3, #28]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	4013      	ands	r3, r2
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	429a      	cmp	r2, r3
 800a07a:	bf0c      	ite	eq
 800a07c:	2301      	moveq	r3, #1
 800a07e:	2300      	movne	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	461a      	mov	r2, r3
 800a084:	79fb      	ldrb	r3, [r7, #7]
 800a086:	429a      	cmp	r2, r3
 800a088:	f43f af48 	beq.w	8009f1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3770      	adds	r7, #112	; 0x70
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a09c:	4904      	ldr	r1, [pc, #16]	; (800a0b0 <MX_FATFS_Init+0x18>)
 800a09e:	4805      	ldr	r0, [pc, #20]	; (800a0b4 <MX_FATFS_Init+0x1c>)
 800a0a0:	f002 fc44 	bl	800c92c <FATFS_LinkDriver>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <MX_FATFS_Init+0x20>)
 800a0aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0ac:	bf00      	nop
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20003684 	.word	0x20003684
 800a0b4:	2000005c 	.word	0x2000005c
 800a0b8:	20003680 	.word	0x20003680

0800a0bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a0c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a0d6:	79fb      	ldrb	r3, [r7, #7]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7f7 fdad 	bl	8001c38 <SD_disk_initialize>
 800a0de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f7 fe89 	bl	8001e0c <SD_disk_status>
 800a0fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
 800a10e:	603b      	str	r3, [r7, #0]
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv, buff,sector,count);
 800a114:	7bf8      	ldrb	r0, [r7, #15]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	68b9      	ldr	r1, [r7, #8]
 800a11c:	f7f7 fe8c 	bl	8001e38 <SD_disk_read>
 800a120:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
 800a136:	4603      	mov	r3, r0
 800a138:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a13a:	7bf8      	ldrb	r0, [r7, #15]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	f7f7 fee3 	bl	8001f0c <SD_disk_write>
 800a146:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	603a      	str	r2, [r7, #0]
 800a15a:	71fb      	strb	r3, [r7, #7]
 800a15c:	460b      	mov	r3, r1
 800a15e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd , buff);
 800a160:	79b9      	ldrb	r1, [r7, #6]
 800a162:	79fb      	ldrb	r3, [r7, #7]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f7f7 ff54 	bl	8002014 <SD_disk_ioctl>
 800a16c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	4603      	mov	r3, r0
 800a180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a182:	79fb      	ldrb	r3, [r7, #7]
 800a184:	4a08      	ldr	r2, [pc, #32]	; (800a1a8 <disk_status+0x30>)
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4413      	add	r3, r2
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	79fa      	ldrb	r2, [r7, #7]
 800a190:	4905      	ldr	r1, [pc, #20]	; (800a1a8 <disk_status+0x30>)
 800a192:	440a      	add	r2, r1
 800a194:	7a12      	ldrb	r2, [r2, #8]
 800a196:	4610      	mov	r0, r2
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3710      	adds	r7, #16
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	200036b0 	.word	0x200036b0

0800a1ac <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a1ba:	79fb      	ldrb	r3, [r7, #7]
 800a1bc:	4a0d      	ldr	r2, [pc, #52]	; (800a1f4 <disk_initialize+0x48>)
 800a1be:	5cd3      	ldrb	r3, [r2, r3]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d111      	bne.n	800a1e8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	4a0b      	ldr	r2, [pc, #44]	; (800a1f4 <disk_initialize+0x48>)
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <disk_initialize+0x48>)
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	79fa      	ldrb	r2, [r7, #7]
 800a1da:	4906      	ldr	r1, [pc, #24]	; (800a1f4 <disk_initialize+0x48>)
 800a1dc:	440a      	add	r2, r1
 800a1de:	7a12      	ldrb	r2, [r2, #8]
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4798      	blx	r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	200036b0 	.word	0x200036b0

0800a1f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a1f8:	b590      	push	{r4, r7, lr}
 800a1fa:	b087      	sub	sp, #28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	4603      	mov	r3, r0
 800a206:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a208:	7bfb      	ldrb	r3, [r7, #15]
 800a20a:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <disk_read+0x3c>)
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	689c      	ldr	r4, [r3, #8]
 800a214:	7bfb      	ldrb	r3, [r7, #15]
 800a216:	4a07      	ldr	r2, [pc, #28]	; (800a234 <disk_read+0x3c>)
 800a218:	4413      	add	r3, r2
 800a21a:	7a18      	ldrb	r0, [r3, #8]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	47a0      	blx	r4
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]
  return res;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	371c      	adds	r7, #28
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd90      	pop	{r4, r7, pc}
 800a232:	bf00      	nop
 800a234:	200036b0 	.word	0x200036b0

0800a238 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a238:	b590      	push	{r4, r7, lr}
 800a23a:	b087      	sub	sp, #28
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
 800a242:	603b      	str	r3, [r7, #0]
 800a244:	4603      	mov	r3, r0
 800a246:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <disk_write+0x3c>)
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	68dc      	ldr	r4, [r3, #12]
 800a254:	7bfb      	ldrb	r3, [r7, #15]
 800a256:	4a07      	ldr	r2, [pc, #28]	; (800a274 <disk_write+0x3c>)
 800a258:	4413      	add	r3, r2
 800a25a:	7a18      	ldrb	r0, [r3, #8]
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	68b9      	ldr	r1, [r7, #8]
 800a262:	47a0      	blx	r4
 800a264:	4603      	mov	r3, r0
 800a266:	75fb      	strb	r3, [r7, #23]
  return res;
 800a268:	7dfb      	ldrb	r3, [r7, #23]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	371c      	adds	r7, #28
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd90      	pop	{r4, r7, pc}
 800a272:	bf00      	nop
 800a274:	200036b0 	.word	0x200036b0

0800a278 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	603a      	str	r2, [r7, #0]
 800a282:	71fb      	strb	r3, [r7, #7]
 800a284:	460b      	mov	r3, r1
 800a286:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <disk_ioctl+0x38>)
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	79fa      	ldrb	r2, [r7, #7]
 800a296:	4906      	ldr	r1, [pc, #24]	; (800a2b0 <disk_ioctl+0x38>)
 800a298:	440a      	add	r2, r1
 800a29a:	7a10      	ldrb	r0, [r2, #8]
 800a29c:	79b9      	ldrb	r1, [r7, #6]
 800a29e:	683a      	ldr	r2, [r7, #0]
 800a2a0:	4798      	blx	r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
  return res;
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	200036b0 	.word	0x200036b0

0800a2b4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a2c4:	89fb      	ldrh	r3, [r7, #14]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	b21a      	sxth	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	b21b      	sxth	r3, r3
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b21b      	sxth	r3, r3
 800a2d4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a2d6:	89fb      	ldrh	r3, [r7, #14]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3714      	adds	r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3303      	adds	r3, #3
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	021b      	lsls	r3, r3, #8
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	3202      	adds	r2, #2
 800a2fc:	7812      	ldrb	r2, [r2, #0]
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	021b      	lsls	r3, r3, #8
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	3201      	adds	r2, #1
 800a30a:	7812      	ldrb	r2, [r2, #0]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	021b      	lsls	r3, r3, #8
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	7812      	ldrb	r2, [r2, #0]
 800a318:	4313      	orrs	r3, r2
 800a31a:	60fb      	str	r3, [r7, #12]
	return rv;
 800a31c:	68fb      	ldr	r3, [r7, #12]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	460b      	mov	r3, r1
 800a334:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	607a      	str	r2, [r7, #4]
 800a33c:	887a      	ldrh	r2, [r7, #2]
 800a33e:	b2d2      	uxtb	r2, r2
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	887b      	ldrh	r3, [r7, #2]
 800a344:	0a1b      	lsrs	r3, r3, #8
 800a346:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	607a      	str	r2, [r7, #4]
 800a34e:	887a      	ldrh	r2, [r7, #2]
 800a350:	b2d2      	uxtb	r2, r2
 800a352:	701a      	strb	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	607a      	str	r2, [r7, #4]
 800a370:	683a      	ldr	r2, [r7, #0]
 800a372:	b2d2      	uxtb	r2, r2
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	0a1b      	lsrs	r3, r3, #8
 800a37a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	607a      	str	r2, [r7, #4]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	701a      	strb	r2, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	607a      	str	r2, [r7, #4]
 800a394:	683a      	ldr	r2, [r7, #0]
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	0a1b      	lsrs	r3, r3, #8
 800a39e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	1c5a      	adds	r2, r3, #1
 800a3a4:	607a      	str	r2, [r7, #4]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	b2d2      	uxtb	r2, r2
 800a3aa:	701a      	strb	r2, [r3, #0]
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d00d      	beq.n	800a3ee <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a3d2:	693a      	ldr	r2, [r7, #16]
 800a3d4:	1c53      	adds	r3, r2, #1
 800a3d6:	613b      	str	r3, [r7, #16]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	1c59      	adds	r1, r3, #1
 800a3dc:	6179      	str	r1, [r7, #20]
 800a3de:	7812      	ldrb	r2, [r2, #0]
 800a3e0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	3b01      	subs	r3, #1
 800a3e6:	607b      	str	r3, [r7, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1f1      	bne.n	800a3d2 <mem_cpy+0x1a>
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a3fa:	b480      	push	{r7}
 800a3fc:	b087      	sub	sp, #28
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	617a      	str	r2, [r7, #20]
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	3b01      	subs	r3, #1
 800a41a:	607b      	str	r3, [r7, #4]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1f3      	bne.n	800a40a <mem_set+0x10>
}
 800a422:	bf00      	nop
 800a424:	bf00      	nop
 800a426:	371c      	adds	r7, #28
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a430:	b480      	push	{r7}
 800a432:	b089      	sub	sp, #36	; 0x24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	61fa      	str	r2, [r7, #28]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	1c5a      	adds	r2, r3, #1
 800a456:	61ba      	str	r2, [r7, #24]
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	1acb      	subs	r3, r1, r3
 800a45c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3b01      	subs	r3, #1
 800a462:	607b      	str	r3, [r7, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d002      	beq.n	800a470 <mem_cmp+0x40>
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0eb      	beq.n	800a448 <mem_cmp+0x18>

	return r;
 800a470:	697b      	ldr	r3, [r7, #20]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3724      	adds	r7, #36	; 0x24
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a488:	e002      	b.n	800a490 <chk_chr+0x12>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3301      	adds	r3, #1
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d005      	beq.n	800a4a4 <chk_chr+0x26>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	461a      	mov	r2, r3
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d1f2      	bne.n	800a48a <chk_chr+0xc>
	return *str;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	781b      	ldrb	r3, [r3, #0]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d009      	beq.n	800a4d6 <lock_fs+0x22>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f002 fa6b 	bl	800c9a2 <ff_req_grant>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <lock_fs+0x22>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <lock_fs+0x24>
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00d      	beq.n	800a50e <unlock_fs+0x2e>
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	2b0c      	cmp	r3, #12
 800a4f6:	d00a      	beq.n	800a50e <unlock_fs+0x2e>
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	2b0b      	cmp	r3, #11
 800a4fc:	d007      	beq.n	800a50e <unlock_fs+0x2e>
 800a4fe:	78fb      	ldrb	r3, [r7, #3]
 800a500:	2b0f      	cmp	r3, #15
 800a502:	d004      	beq.n	800a50e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 fa5f 	bl	800c9cc <ff_rel_grant>
	}
}
 800a50e:	bf00      	nop
 800a510:	3708      	adds	r7, #8
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a522:	2300      	movs	r3, #0
 800a524:	60bb      	str	r3, [r7, #8]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	e029      	b.n	800a580 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a52c:	4a27      	ldr	r2, [pc, #156]	; (800a5cc <chk_lock+0xb4>)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	011b      	lsls	r3, r3, #4
 800a532:	4413      	add	r3, r2
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d01d      	beq.n	800a576 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a53a:	4a24      	ldr	r2, [pc, #144]	; (800a5cc <chk_lock+0xb4>)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	011b      	lsls	r3, r3, #4
 800a540:	4413      	add	r3, r2
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d116      	bne.n	800a57a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a54c:	4a1f      	ldr	r2, [pc, #124]	; (800a5cc <chk_lock+0xb4>)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	011b      	lsls	r3, r3, #4
 800a552:	4413      	add	r3, r2
 800a554:	3304      	adds	r3, #4
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d10c      	bne.n	800a57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a560:	4a1a      	ldr	r2, [pc, #104]	; (800a5cc <chk_lock+0xb4>)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	011b      	lsls	r3, r3, #4
 800a566:	4413      	add	r3, r2
 800a568:	3308      	adds	r3, #8
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a570:	429a      	cmp	r2, r3
 800a572:	d102      	bne.n	800a57a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a574:	e007      	b.n	800a586 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a576:	2301      	movs	r3, #1
 800a578:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d9d2      	bls.n	800a52c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d109      	bne.n	800a5a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <chk_lock+0x80>
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	2b02      	cmp	r3, #2
 800a596:	d101      	bne.n	800a59c <chk_lock+0x84>
 800a598:	2300      	movs	r3, #0
 800a59a:	e010      	b.n	800a5be <chk_lock+0xa6>
 800a59c:	2312      	movs	r3, #18
 800a59e:	e00e      	b.n	800a5be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d108      	bne.n	800a5b8 <chk_lock+0xa0>
 800a5a6:	4a09      	ldr	r2, [pc, #36]	; (800a5cc <chk_lock+0xb4>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	4413      	add	r3, r2
 800a5ae:	330c      	adds	r3, #12
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b6:	d101      	bne.n	800a5bc <chk_lock+0xa4>
 800a5b8:	2310      	movs	r3, #16
 800a5ba:	e000      	b.n	800a5be <chk_lock+0xa6>
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	20003690 	.word	0x20003690

0800a5d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	607b      	str	r3, [r7, #4]
 800a5da:	e002      	b.n	800a5e2 <enq_lock+0x12>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	607b      	str	r3, [r7, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d806      	bhi.n	800a5f6 <enq_lock+0x26>
 800a5e8:	4a09      	ldr	r2, [pc, #36]	; (800a610 <enq_lock+0x40>)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	011b      	lsls	r3, r3, #4
 800a5ee:	4413      	add	r3, r2
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1f2      	bne.n	800a5dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	bf14      	ite	ne
 800a5fc:	2301      	movne	r3, #1
 800a5fe:	2300      	moveq	r3, #0
 800a600:	b2db      	uxtb	r3, r3
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	20003690 	.word	0x20003690

0800a614 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a61e:	2300      	movs	r3, #0
 800a620:	60fb      	str	r3, [r7, #12]
 800a622:	e01f      	b.n	800a664 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a624:	4a41      	ldr	r2, [pc, #260]	; (800a72c <inc_lock+0x118>)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	011b      	lsls	r3, r3, #4
 800a62a:	4413      	add	r3, r2
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d113      	bne.n	800a65e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a636:	4a3d      	ldr	r2, [pc, #244]	; (800a72c <inc_lock+0x118>)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	4413      	add	r3, r2
 800a63e:	3304      	adds	r3, #4
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a646:	429a      	cmp	r2, r3
 800a648:	d109      	bne.n	800a65e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a64a:	4a38      	ldr	r2, [pc, #224]	; (800a72c <inc_lock+0x118>)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	4413      	add	r3, r2
 800a652:	3308      	adds	r3, #8
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d006      	beq.n	800a66c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	3301      	adds	r3, #1
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2b01      	cmp	r3, #1
 800a668:	d9dc      	bls.n	800a624 <inc_lock+0x10>
 800a66a:	e000      	b.n	800a66e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a66c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d132      	bne.n	800a6da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]
 800a678:	e002      	b.n	800a680 <inc_lock+0x6c>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	3301      	adds	r3, #1
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d806      	bhi.n	800a694 <inc_lock+0x80>
 800a686:	4a29      	ldr	r2, [pc, #164]	; (800a72c <inc_lock+0x118>)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	011b      	lsls	r3, r3, #4
 800a68c:	4413      	add	r3, r2
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1f2      	bne.n	800a67a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d101      	bne.n	800a69e <inc_lock+0x8a>
 800a69a:	2300      	movs	r3, #0
 800a69c:	e040      	b.n	800a720 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	4922      	ldr	r1, [pc, #136]	; (800a72c <inc_lock+0x118>)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	440b      	add	r3, r1
 800a6aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	491e      	ldr	r1, [pc, #120]	; (800a72c <inc_lock+0x118>)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	440b      	add	r3, r1
 800a6b8:	3304      	adds	r3, #4
 800a6ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	695a      	ldr	r2, [r3, #20]
 800a6c0:	491a      	ldr	r1, [pc, #104]	; (800a72c <inc_lock+0x118>)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	011b      	lsls	r3, r3, #4
 800a6c6:	440b      	add	r3, r1
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a6cc:	4a17      	ldr	r2, [pc, #92]	; (800a72c <inc_lock+0x118>)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	4413      	add	r3, r2
 800a6d4:	330c      	adds	r3, #12
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <inc_lock+0xe0>
 800a6e0:	4a12      	ldr	r2, [pc, #72]	; (800a72c <inc_lock+0x118>)
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	4413      	add	r3, r2
 800a6e8:	330c      	adds	r3, #12
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <inc_lock+0xe0>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	e015      	b.n	800a720 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d108      	bne.n	800a70c <inc_lock+0xf8>
 800a6fa:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <inc_lock+0x118>)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	4413      	add	r3, r2
 800a702:	330c      	adds	r3, #12
 800a704:	881b      	ldrh	r3, [r3, #0]
 800a706:	3301      	adds	r3, #1
 800a708:	b29a      	uxth	r2, r3
 800a70a:	e001      	b.n	800a710 <inc_lock+0xfc>
 800a70c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a710:	4906      	ldr	r1, [pc, #24]	; (800a72c <inc_lock+0x118>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	011b      	lsls	r3, r3, #4
 800a716:	440b      	add	r3, r1
 800a718:	330c      	adds	r3, #12
 800a71a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3301      	adds	r3, #1
}
 800a720:	4618      	mov	r0, r3
 800a722:	3714      	adds	r7, #20
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	20003690 	.word	0x20003690

0800a730 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	607b      	str	r3, [r7, #4]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d825      	bhi.n	800a790 <dec_lock+0x60>
		n = Files[i].ctr;
 800a744:	4a17      	ldr	r2, [pc, #92]	; (800a7a4 <dec_lock+0x74>)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	011b      	lsls	r3, r3, #4
 800a74a:	4413      	add	r3, r2
 800a74c:	330c      	adds	r3, #12
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a752:	89fb      	ldrh	r3, [r7, #14]
 800a754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a758:	d101      	bne.n	800a75e <dec_lock+0x2e>
 800a75a:	2300      	movs	r3, #0
 800a75c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a75e:	89fb      	ldrh	r3, [r7, #14]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <dec_lock+0x3a>
 800a764:	89fb      	ldrh	r3, [r7, #14]
 800a766:	3b01      	subs	r3, #1
 800a768:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a76a:	4a0e      	ldr	r2, [pc, #56]	; (800a7a4 <dec_lock+0x74>)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4413      	add	r3, r2
 800a772:	330c      	adds	r3, #12
 800a774:	89fa      	ldrh	r2, [r7, #14]
 800a776:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a778:	89fb      	ldrh	r3, [r7, #14]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d105      	bne.n	800a78a <dec_lock+0x5a>
 800a77e:	4a09      	ldr	r2, [pc, #36]	; (800a7a4 <dec_lock+0x74>)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	4413      	add	r3, r2
 800a786:	2200      	movs	r2, #0
 800a788:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	737b      	strb	r3, [r7, #13]
 800a78e:	e001      	b.n	800a794 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a790:	2302      	movs	r3, #2
 800a792:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a794:	7b7b      	ldrb	r3, [r7, #13]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20003690 	.word	0x20003690

0800a7a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e010      	b.n	800a7d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a7b6:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <clear_lock+0x44>)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	4413      	add	r3, r2
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d105      	bne.n	800a7d2 <clear_lock+0x2a>
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <clear_lock+0x44>)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	4413      	add	r3, r2
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d9eb      	bls.n	800a7b6 <clear_lock+0xe>
	}
}
 800a7de:	bf00      	nop
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20003690 	.word	0x20003690

0800a7f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	78db      	ldrb	r3, [r3, #3]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d034      	beq.n	800a86e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a808:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	7858      	ldrb	r0, [r3, #1]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a814:	2301      	movs	r3, #1
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	f7ff fd0e 	bl	800a238 <disk_write>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a822:	2301      	movs	r3, #1
 800a824:	73fb      	strb	r3, [r7, #15]
 800a826:	e022      	b.n	800a86e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	1ad2      	subs	r2, r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6a1b      	ldr	r3, [r3, #32]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d217      	bcs.n	800a86e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	789b      	ldrb	r3, [r3, #2]
 800a842:	613b      	str	r3, [r7, #16]
 800a844:	e010      	b.n	800a868 <sync_window+0x78>
					wsect += fs->fsize;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6a1b      	ldr	r3, [r3, #32]
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	4413      	add	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	7858      	ldrb	r0, [r3, #1]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a85a:	2301      	movs	r3, #1
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	f7ff fceb 	bl	800a238 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	3b01      	subs	r3, #1
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d8eb      	bhi.n	800a846 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a882:	2300      	movs	r3, #0
 800a884:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d01b      	beq.n	800a8c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f7ff ffad 	bl	800a7f0 <sync_window>
 800a896:	4603      	mov	r3, r0
 800a898:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d113      	bne.n	800a8c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	7858      	ldrb	r0, [r3, #1]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	f7ff fca3 	bl	800a1f8 <disk_read>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d004      	beq.n	800a8c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7ff ff87 	bl	800a7f0 <sync_window>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d159      	bne.n	800a9a0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d149      	bne.n	800a988 <sync_fs+0xb4>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	791b      	ldrb	r3, [r3, #4]
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d145      	bne.n	800a988 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	899b      	ldrh	r3, [r3, #12]
 800a906:	461a      	mov	r2, r3
 800a908:	2100      	movs	r1, #0
 800a90a:	f7ff fd76 	bl	800a3fa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3338      	adds	r3, #56	; 0x38
 800a912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a916:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff fd05 	bl	800a32a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	3338      	adds	r3, #56	; 0x38
 800a924:	4921      	ldr	r1, [pc, #132]	; (800a9ac <sync_fs+0xd8>)
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fd1a 	bl	800a360 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3338      	adds	r3, #56	; 0x38
 800a930:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a934:	491e      	ldr	r1, [pc, #120]	; (800a9b0 <sync_fs+0xdc>)
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fd12 	bl	800a360 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	3338      	adds	r3, #56	; 0x38
 800a940:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	4619      	mov	r1, r3
 800a94a:	4610      	mov	r0, r2
 800a94c:	f7ff fd08 	bl	800a360 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3338      	adds	r3, #56	; 0x38
 800a954:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7ff fcfe 	bl	800a360 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	7858      	ldrb	r0, [r3, #1]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a97c:	2301      	movs	r3, #1
 800a97e:	f7ff fc5b 	bl	800a238 <disk_write>
			fs->fsi_flag = 0;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2200      	movs	r2, #0
 800a98e:	2100      	movs	r1, #0
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fc71 	bl	800a278 <disk_ioctl>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <sync_fs+0xcc>
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	41615252 	.word	0x41615252
 800a9b0:	61417272 	.word	0x61417272

0800a9b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	3b02      	subs	r3, #2
 800a9c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	3b02      	subs	r3, #2
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d301      	bcc.n	800a9d4 <clust2sect+0x20>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	e008      	b.n	800a9e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	895b      	ldrh	r3, [r3, #10]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	fb03 f202 	mul.w	r2, r3, r2
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e4:	4413      	add	r3, r2
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr

0800a9f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b086      	sub	sp, #24
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d904      	bls.n	800aa12 <get_fat+0x20>
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d302      	bcc.n	800aa18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800aa12:	2301      	movs	r3, #1
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	e0bb      	b.n	800ab90 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	f000 8083 	beq.w	800ab2e <get_fat+0x13c>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	f300 80a7 	bgt.w	800ab7c <get_fat+0x18a>
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d002      	beq.n	800aa38 <get_fat+0x46>
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	d056      	beq.n	800aae4 <get_fat+0xf2>
 800aa36:	e0a1      	b.n	800ab7c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	085b      	lsrs	r3, r3, #1
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	899b      	ldrh	r3, [r3, #12]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa56:	4413      	add	r3, r2
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f7ff ff0c 	bl	800a878 <move_window>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f040 808d 	bne.w	800ab82 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	60fa      	str	r2, [r7, #12]
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	8992      	ldrh	r2, [r2, #12]
 800aa72:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa76:	fb01 f202 	mul.w	r2, r1, r2
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aa84:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	899b      	ldrh	r3, [r3, #12]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa96:	4413      	add	r3, r2
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f7ff feec 	bl	800a878 <move_window>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d16f      	bne.n	800ab86 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	899b      	ldrh	r3, [r3, #12]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	fbb3 f1f2 	udiv	r1, r3, r2
 800aab2:	fb01 f202 	mul.w	r2, r1, r2
 800aab6:	1a9b      	subs	r3, r3, r2
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4413      	add	r3, r2
 800aabc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aac0:	021b      	lsls	r3, r3, #8
 800aac2:	461a      	mov	r2, r3
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d002      	beq.n	800aada <get_fat+0xe8>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	091b      	lsrs	r3, r3, #4
 800aad8:	e002      	b.n	800aae0 <get_fat+0xee>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aae0:	617b      	str	r3, [r7, #20]
			break;
 800aae2:	e055      	b.n	800ab90 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	899b      	ldrh	r3, [r3, #12]
 800aaec:	085b      	lsrs	r3, r3, #1
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800aaf8:	4413      	add	r3, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	6938      	ldr	r0, [r7, #16]
 800aafe:	f7ff febb 	bl	800a878 <move_window>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d140      	bne.n	800ab8a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	8992      	ldrh	r2, [r2, #12]
 800ab16:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab1a:	fb00 f202 	mul.w	r2, r0, r2
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	440b      	add	r3, r1
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fbc6 	bl	800a2b4 <ld_word>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	617b      	str	r3, [r7, #20]
			break;
 800ab2c:	e030      	b.n	800ab90 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	899b      	ldrh	r3, [r3, #12]
 800ab36:	089b      	lsrs	r3, r3, #2
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab42:	4413      	add	r3, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f7ff fe96 	bl	800a878 <move_window>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d11d      	bne.n	800ab8e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	8992      	ldrh	r2, [r2, #12]
 800ab60:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab64:	fb00 f202 	mul.w	r2, r0, r2
 800ab68:	1a9b      	subs	r3, r3, r2
 800ab6a:	440b      	add	r3, r1
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f7ff fbb9 	bl	800a2e4 <ld_dword>
 800ab72:	4603      	mov	r3, r0
 800ab74:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ab78:	617b      	str	r3, [r7, #20]
			break;
 800ab7a:	e009      	b.n	800ab90 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	617b      	str	r3, [r7, #20]
 800ab80:	e006      	b.n	800ab90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab82:	bf00      	nop
 800ab84:	e004      	b.n	800ab90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab86:	bf00      	nop
 800ab88:	e002      	b.n	800ab90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab8a:	bf00      	nop
 800ab8c:	e000      	b.n	800ab90 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ab8e:	bf00      	nop
		}
	}

	return val;
 800ab90:	697b      	ldr	r3, [r7, #20]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3718      	adds	r7, #24
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ab9a:	b590      	push	{r4, r7, lr}
 800ab9c:	b089      	sub	sp, #36	; 0x24
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aba6:	2302      	movs	r3, #2
 800aba8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b01      	cmp	r3, #1
 800abae:	f240 8109 	bls.w	800adc4 <put_fat+0x22a>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	68ba      	ldr	r2, [r7, #8]
 800abb8:	429a      	cmp	r2, r3
 800abba:	f080 8103 	bcs.w	800adc4 <put_fat+0x22a>
		switch (fs->fs_type) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b03      	cmp	r3, #3
 800abc4:	f000 80b6 	beq.w	800ad34 <put_fat+0x19a>
 800abc8:	2b03      	cmp	r3, #3
 800abca:	f300 80fb 	bgt.w	800adc4 <put_fat+0x22a>
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d003      	beq.n	800abda <put_fat+0x40>
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	f000 8083 	beq.w	800acde <put_fat+0x144>
 800abd8:	e0f4      	b.n	800adc4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	61bb      	str	r3, [r7, #24]
 800abde:	69bb      	ldr	r3, [r7, #24]
 800abe0:	085b      	lsrs	r3, r3, #1
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	4413      	add	r3, r2
 800abe6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	899b      	ldrh	r3, [r3, #12]
 800abf0:	4619      	mov	r1, r3
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800abf8:	4413      	add	r3, r2
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7ff fe3b 	bl	800a878 <move_window>
 800ac02:	4603      	mov	r3, r0
 800ac04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac06:	7ffb      	ldrb	r3, [r7, #31]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f040 80d4 	bne.w	800adb6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	1c5a      	adds	r2, r3, #1
 800ac18:	61ba      	str	r2, [r7, #24]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	8992      	ldrh	r2, [r2, #12]
 800ac1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac22:	fb00 f202 	mul.w	r2, r0, r2
 800ac26:	1a9b      	subs	r3, r3, r2
 800ac28:	440b      	add	r3, r1
 800ac2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00d      	beq.n	800ac52 <put_fat+0xb8>
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25b      	sxtb	r3, r3
 800ac3c:	f003 030f 	and.w	r3, r3, #15
 800ac40:	b25a      	sxtb	r2, r3
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	b25b      	sxtb	r3, r3
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	e001      	b.n	800ac56 <put_fat+0xbc>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	899b      	ldrh	r3, [r3, #12]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac70:	4413      	add	r3, r2
 800ac72:	4619      	mov	r1, r3
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f7ff fdff 	bl	800a878 <move_window>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac7e:	7ffb      	ldrb	r3, [r7, #31]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 809a 	bne.w	800adba <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	899b      	ldrh	r3, [r3, #12]
 800ac90:	461a      	mov	r2, r3
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac98:	fb00 f202 	mul.w	r2, r0, r2
 800ac9c:	1a9b      	subs	r3, r3, r2
 800ac9e:	440b      	add	r3, r1
 800aca0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <put_fat+0x11a>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	091b      	lsrs	r3, r3, #4
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	e00e      	b.n	800acd2 <put_fat+0x138>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	781b      	ldrb	r3, [r3, #0]
 800acb8:	b25b      	sxtb	r3, r3
 800acba:	f023 030f 	bic.w	r3, r3, #15
 800acbe:	b25a      	sxtb	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	0a1b      	lsrs	r3, r3, #8
 800acc4:	b25b      	sxtb	r3, r3
 800acc6:	f003 030f 	and.w	r3, r3, #15
 800acca:	b25b      	sxtb	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b25b      	sxtb	r3, r3
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	697a      	ldr	r2, [r7, #20]
 800acd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2201      	movs	r2, #1
 800acda:	70da      	strb	r2, [r3, #3]
			break;
 800acdc:	e072      	b.n	800adc4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	899b      	ldrh	r3, [r3, #12]
 800ace6:	085b      	lsrs	r3, r3, #1
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4619      	mov	r1, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	fbb3 f3f1 	udiv	r3, r3, r1
 800acf2:	4413      	add	r3, r2
 800acf4:	4619      	mov	r1, r3
 800acf6:	68f8      	ldr	r0, [r7, #12]
 800acf8:	f7ff fdbe 	bl	800a878 <move_window>
 800acfc:	4603      	mov	r3, r0
 800acfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad00:	7ffb      	ldrb	r3, [r7, #31]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d15b      	bne.n	800adbe <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	8992      	ldrh	r2, [r2, #12]
 800ad14:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad18:	fb00 f202 	mul.w	r2, r0, r2
 800ad1c:	1a9b      	subs	r3, r3, r2
 800ad1e:	440b      	add	r3, r1
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	b292      	uxth	r2, r2
 800ad24:	4611      	mov	r1, r2
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff faff 	bl	800a32a <st_word>
			fs->wflag = 1;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	70da      	strb	r2, [r3, #3]
			break;
 800ad32:	e047      	b.n	800adc4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	899b      	ldrh	r3, [r3, #12]
 800ad3c:	089b      	lsrs	r3, r3, #2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	4619      	mov	r1, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad48:	4413      	add	r3, r2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f7ff fd93 	bl	800a878 <move_window>
 800ad52:	4603      	mov	r3, r0
 800ad54:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad56:	7ffb      	ldrb	r3, [r7, #31]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d132      	bne.n	800adc2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	8992      	ldrh	r2, [r2, #12]
 800ad70:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad74:	fb00 f202 	mul.w	r2, r0, r2
 800ad78:	1a9b      	subs	r3, r3, r2
 800ad7a:	440b      	add	r3, r1
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7ff fab1 	bl	800a2e4 <ld_dword>
 800ad82:	4603      	mov	r3, r0
 800ad84:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ad88:	4323      	orrs	r3, r4
 800ad8a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	8992      	ldrh	r2, [r2, #12]
 800ad9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad9e:	fb00 f202 	mul.w	r2, r0, r2
 800ada2:	1a9b      	subs	r3, r3, r2
 800ada4:	440b      	add	r3, r1
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fad9 	bl	800a360 <st_dword>
			fs->wflag = 1;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2201      	movs	r2, #1
 800adb2:	70da      	strb	r2, [r3, #3]
			break;
 800adb4:	e006      	b.n	800adc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adb6:	bf00      	nop
 800adb8:	e004      	b.n	800adc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adba:	bf00      	nop
 800adbc:	e002      	b.n	800adc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adbe:	bf00      	nop
 800adc0:	e000      	b.n	800adc4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800adc2:	bf00      	nop
		}
	}
	return res;
 800adc4:	7ffb      	ldrb	r3, [r7, #31]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3724      	adds	r7, #36	; 0x24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd90      	pop	{r4, r7, pc}

0800adce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b088      	sub	sp, #32
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d904      	bls.n	800adf4 <remove_chain+0x26>
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d301      	bcc.n	800adf8 <remove_chain+0x2a>
 800adf4:	2302      	movs	r3, #2
 800adf6:	e04b      	b.n	800ae90 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00c      	beq.n	800ae18 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	69b8      	ldr	r0, [r7, #24]
 800ae06:	f7ff fec8 	bl	800ab9a <put_fat>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae0e:	7ffb      	ldrb	r3, [r7, #31]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <remove_chain+0x4a>
 800ae14:	7ffb      	ldrb	r3, [r7, #31]
 800ae16:	e03b      	b.n	800ae90 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	68f8      	ldr	r0, [r7, #12]
 800ae1c:	f7ff fde9 	bl	800a9f2 <get_fat>
 800ae20:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d031      	beq.n	800ae8c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d101      	bne.n	800ae32 <remove_chain+0x64>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	e02e      	b.n	800ae90 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d101      	bne.n	800ae3e <remove_chain+0x70>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e028      	b.n	800ae90 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae3e:	2200      	movs	r2, #0
 800ae40:	68b9      	ldr	r1, [r7, #8]
 800ae42:	69b8      	ldr	r0, [r7, #24]
 800ae44:	f7ff fea9 	bl	800ab9a <put_fat>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae4c:	7ffb      	ldrb	r3, [r7, #31]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <remove_chain+0x88>
 800ae52:	7ffb      	ldrb	r3, [r7, #31]
 800ae54:	e01c      	b.n	800ae90 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	699a      	ldr	r2, [r3, #24]
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	3b02      	subs	r3, #2
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d20b      	bcs.n	800ae7c <remove_chain+0xae>
			fs->free_clst++;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	1c5a      	adds	r2, r3, #1
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	791b      	ldrb	r3, [r3, #4]
 800ae72:	f043 0301 	orr.w	r3, r3, #1
 800ae76:	b2da      	uxtb	r2, r3
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d3c6      	bcc.n	800ae18 <remove_chain+0x4a>
 800ae8a:	e000      	b.n	800ae8e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ae8c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ae8e:	2300      	movs	r3, #0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d10d      	bne.n	800aeca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d004      	beq.n	800aec4 <create_chain+0x2c>
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d31b      	bcc.n	800aefc <create_chain+0x64>
 800aec4:	2301      	movs	r3, #1
 800aec6:	61bb      	str	r3, [r7, #24]
 800aec8:	e018      	b.n	800aefc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fd90 	bl	800a9f2 <get_fat>
 800aed2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d801      	bhi.n	800aede <create_chain+0x46>
 800aeda:	2301      	movs	r3, #1
 800aedc:	e070      	b.n	800afc0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee4:	d101      	bne.n	800aeea <create_chain+0x52>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	e06a      	b.n	800afc0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d201      	bcs.n	800aef8 <create_chain+0x60>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	e063      	b.n	800afc0 <create_chain+0x128>
		scl = clst;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	3301      	adds	r3, #1
 800af04:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	69db      	ldr	r3, [r3, #28]
 800af0a:	69fa      	ldr	r2, [r7, #28]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d307      	bcc.n	800af20 <create_chain+0x88>
				ncl = 2;
 800af10:	2302      	movs	r3, #2
 800af12:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800af14:	69fa      	ldr	r2, [r7, #28]
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d901      	bls.n	800af20 <create_chain+0x88>
 800af1c:	2300      	movs	r3, #0
 800af1e:	e04f      	b.n	800afc0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800af20:	69f9      	ldr	r1, [r7, #28]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7ff fd65 	bl	800a9f2 <get_fat>
 800af28:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d00e      	beq.n	800af4e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d003      	beq.n	800af3e <create_chain+0xa6>
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3c:	d101      	bne.n	800af42 <create_chain+0xaa>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	e03e      	b.n	800afc0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	429a      	cmp	r2, r3
 800af48:	d1da      	bne.n	800af00 <create_chain+0x68>
 800af4a:	2300      	movs	r3, #0
 800af4c:	e038      	b.n	800afc0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800af4e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af50:	f04f 32ff 	mov.w	r2, #4294967295
 800af54:	69f9      	ldr	r1, [r7, #28]
 800af56:	6938      	ldr	r0, [r7, #16]
 800af58:	f7ff fe1f 	bl	800ab9a <put_fat>
 800af5c:	4603      	mov	r3, r0
 800af5e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <create_chain+0xe2>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d006      	beq.n	800af7a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6938      	ldr	r0, [r7, #16]
 800af72:	f7ff fe12 	bl	800ab9a <put_fat>
 800af76:	4603      	mov	r3, r0
 800af78:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af7a:	7dfb      	ldrb	r3, [r7, #23]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d116      	bne.n	800afae <create_chain+0x116>
		fs->last_clst = ncl;
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	69fa      	ldr	r2, [r7, #28]
 800af84:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	699a      	ldr	r2, [r3, #24]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	3b02      	subs	r3, #2
 800af90:	429a      	cmp	r2, r3
 800af92:	d804      	bhi.n	800af9e <create_chain+0x106>
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	1e5a      	subs	r2, r3, #1
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	791b      	ldrb	r3, [r3, #4]
 800afa2:	f043 0301 	orr.w	r3, r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	711a      	strb	r2, [r3, #4]
 800afac:	e007      	b.n	800afbe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800afae:	7dfb      	ldrb	r3, [r7, #23]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d102      	bne.n	800afba <create_chain+0x122>
 800afb4:	f04f 33ff 	mov.w	r3, #4294967295
 800afb8:	e000      	b.n	800afbc <create_chain+0x124>
 800afba:	2301      	movs	r3, #1
 800afbc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800afbe:	69fb      	ldr	r3, [r7, #28]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800afc8:	b480      	push	{r7}
 800afca:	b087      	sub	sp, #28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	3304      	adds	r3, #4
 800afde:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	899b      	ldrh	r3, [r3, #12]
 800afe4:	461a      	mov	r2, r3
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	8952      	ldrh	r2, [r2, #10]
 800aff0:	fbb3 f3f2 	udiv	r3, r3, r2
 800aff4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	1d1a      	adds	r2, r3, #4
 800affa:	613a      	str	r2, [r7, #16]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <clmt_clust+0x42>
 800b006:	2300      	movs	r3, #0
 800b008:	e010      	b.n	800b02c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d307      	bcc.n	800b022 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	617b      	str	r3, [r7, #20]
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	3304      	adds	r3, #4
 800b01e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b020:	e7e9      	b.n	800aff6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b022:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	4413      	add	r3, r2
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b04e:	d204      	bcs.n	800b05a <dir_sdi+0x22>
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	f003 031f 	and.w	r3, r3, #31
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <dir_sdi+0x26>
		return FR_INT_ERR;
 800b05a:	2302      	movs	r3, #2
 800b05c:	e071      	b.n	800b142 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	683a      	ldr	r2, [r7, #0]
 800b062:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <dir_sdi+0x46>
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	2b02      	cmp	r3, #2
 800b076:	d902      	bls.n	800b07e <dir_sdi+0x46>
		clst = fs->dirbase;
 800b078:	693b      	ldr	r3, [r7, #16]
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10c      	bne.n	800b09e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	8912      	ldrh	r2, [r2, #8]
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d301      	bcc.n	800b094 <dir_sdi+0x5c>
 800b090:	2302      	movs	r3, #2
 800b092:	e056      	b.n	800b142 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	61da      	str	r2, [r3, #28]
 800b09c:	e02d      	b.n	800b0fa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	895b      	ldrh	r3, [r3, #10]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	899b      	ldrh	r3, [r3, #12]
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0ae:	e019      	b.n	800b0e4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6979      	ldr	r1, [r7, #20]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7ff fc9c 	bl	800a9f2 <get_fat>
 800b0ba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c2:	d101      	bne.n	800b0c8 <dir_sdi+0x90>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e03c      	b.n	800b142 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d904      	bls.n	800b0d8 <dir_sdi+0xa0>
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	697a      	ldr	r2, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d301      	bcc.n	800b0dc <dir_sdi+0xa4>
 800b0d8:	2302      	movs	r3, #2
 800b0da:	e032      	b.n	800b142 <dir_sdi+0x10a>
			ofs -= csz;
 800b0dc:	683a      	ldr	r2, [r7, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d2e1      	bcs.n	800b0b0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b0ec:	6979      	ldr	r1, [r7, #20]
 800b0ee:	6938      	ldr	r0, [r7, #16]
 800b0f0:	f7ff fc60 	bl	800a9b4 <clust2sect>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <dir_sdi+0xd4>
 800b108:	2302      	movs	r3, #2
 800b10a:	e01a      	b.n	800b142 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69da      	ldr	r2, [r3, #28]
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	899b      	ldrh	r3, [r3, #12]
 800b114:	4619      	mov	r1, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	fbb3 f3f1 	udiv	r3, r3, r1
 800b11c:	441a      	add	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	899b      	ldrh	r3, [r3, #12]
 800b12c:	461a      	mov	r2, r3
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	fbb3 f0f2 	udiv	r0, r3, r2
 800b134:	fb00 f202 	mul.w	r2, r0, r2
 800b138:	1a9b      	subs	r3, r3, r2
 800b13a:	18ca      	adds	r2, r1, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b086      	sub	sp, #24
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	3320      	adds	r3, #32
 800b160:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d003      	beq.n	800b172 <dir_next+0x28>
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b170:	d301      	bcc.n	800b176 <dir_next+0x2c>
 800b172:	2304      	movs	r3, #4
 800b174:	e0bb      	b.n	800b2ee <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	899b      	ldrh	r3, [r3, #12]
 800b17a:	461a      	mov	r2, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b182:	fb01 f202 	mul.w	r2, r1, r2
 800b186:	1a9b      	subs	r3, r3, r2
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f040 809d 	bne.w	800b2c8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	69db      	ldr	r3, [r3, #28]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10b      	bne.n	800b1b8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	095b      	lsrs	r3, r3, #5
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	8912      	ldrh	r2, [r2, #8]
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	f0c0 808d 	bcc.w	800b2c8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	61da      	str	r2, [r3, #28]
 800b1b4:	2304      	movs	r3, #4
 800b1b6:	e09a      	b.n	800b2ee <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	899b      	ldrh	r3, [r3, #12]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c4:	68fa      	ldr	r2, [r7, #12]
 800b1c6:	8952      	ldrh	r2, [r2, #10]
 800b1c8:	3a01      	subs	r2, #1
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d17b      	bne.n	800b2c8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4610      	mov	r0, r2
 800b1da:	f7ff fc0a 	bl	800a9f2 <get_fat>
 800b1de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	d801      	bhi.n	800b1ea <dir_next+0xa0>
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e081      	b.n	800b2ee <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f0:	d101      	bne.n	800b1f6 <dir_next+0xac>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e07b      	b.n	800b2ee <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d359      	bcc.n	800b2b4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d104      	bne.n	800b210 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2200      	movs	r2, #0
 800b20a:	61da      	str	r2, [r3, #28]
 800b20c:	2304      	movs	r3, #4
 800b20e:	e06e      	b.n	800b2ee <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	4619      	mov	r1, r3
 800b218:	4610      	mov	r0, r2
 800b21a:	f7ff fe3d 	bl	800ae98 <create_chain>
 800b21e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d101      	bne.n	800b22a <dir_next+0xe0>
 800b226:	2307      	movs	r3, #7
 800b228:	e061      	b.n	800b2ee <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d101      	bne.n	800b234 <dir_next+0xea>
 800b230:	2302      	movs	r3, #2
 800b232:	e05c      	b.n	800b2ee <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23a:	d101      	bne.n	800b240 <dir_next+0xf6>
 800b23c:	2301      	movs	r3, #1
 800b23e:	e056      	b.n	800b2ee <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f7ff fad5 	bl	800a7f0 <sync_window>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <dir_next+0x106>
 800b24c:	2301      	movs	r3, #1
 800b24e:	e04e      	b.n	800b2ee <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	899b      	ldrh	r3, [r3, #12]
 800b25a:	461a      	mov	r2, r3
 800b25c:	2100      	movs	r1, #0
 800b25e:	f7ff f8cc 	bl	800a3fa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b262:	2300      	movs	r3, #0
 800b264:	613b      	str	r3, [r7, #16]
 800b266:	6979      	ldr	r1, [r7, #20]
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fba3 	bl	800a9b4 <clust2sect>
 800b26e:	4602      	mov	r2, r0
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	635a      	str	r2, [r3, #52]	; 0x34
 800b274:	e012      	b.n	800b29c <dir_next+0x152>
						fs->wflag = 1;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2201      	movs	r2, #1
 800b27a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff fab7 	bl	800a7f0 <sync_window>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <dir_next+0x142>
 800b288:	2301      	movs	r3, #1
 800b28a:	e030      	b.n	800b2ee <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3301      	adds	r3, #1
 800b290:	613b      	str	r3, [r7, #16]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	635a      	str	r2, [r3, #52]	; 0x34
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	895b      	ldrh	r3, [r3, #10]
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d3e6      	bcc.n	800b276 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7ff fb79 	bl	800a9b4 <clust2sect>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	899b      	ldrh	r3, [r3, #12]
 800b2d8:	461a      	mov	r2, r3
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2e0:	fb00 f202 	mul.w	r2, r0, r2
 800b2e4:	1a9b      	subs	r3, r3, r2
 800b2e6:	18ca      	adds	r2, r1, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b086      	sub	sp, #24
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b306:	2100      	movs	r1, #0
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7ff fe95 	bl	800b038 <dir_sdi>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d12b      	bne.n	800b370 <dir_alloc+0x7a>
		n = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	69db      	ldr	r3, [r3, #28]
 800b320:	4619      	mov	r1, r3
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f7ff faa8 	bl	800a878 <move_window>
 800b328:	4603      	mov	r3, r0
 800b32a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b32c:	7dfb      	ldrb	r3, [r7, #23]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d11d      	bne.n	800b36e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	781b      	ldrb	r3, [r3, #0]
 800b338:	2be5      	cmp	r3, #229	; 0xe5
 800b33a:	d004      	beq.n	800b346 <dir_alloc+0x50>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d107      	bne.n	800b356 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	3301      	adds	r3, #1
 800b34a:	613b      	str	r3, [r7, #16]
 800b34c:	693a      	ldr	r2, [r7, #16]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	429a      	cmp	r2, r3
 800b352:	d102      	bne.n	800b35a <dir_alloc+0x64>
 800b354:	e00c      	b.n	800b370 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b356:	2300      	movs	r3, #0
 800b358:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b35a:	2101      	movs	r1, #1
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff fef4 	bl	800b14a <dir_next>
 800b362:	4603      	mov	r3, r0
 800b364:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b366:	7dfb      	ldrb	r3, [r7, #23]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d0d7      	beq.n	800b31c <dir_alloc+0x26>
 800b36c:	e000      	b.n	800b370 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b36e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b370:	7dfb      	ldrb	r3, [r7, #23]
 800b372:	2b04      	cmp	r3, #4
 800b374:	d101      	bne.n	800b37a <dir_alloc+0x84>
 800b376:	2307      	movs	r3, #7
 800b378:	75fb      	strb	r3, [r7, #23]
	return res;
 800b37a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b37c:	4618      	mov	r0, r3
 800b37e:	3718      	adds	r7, #24
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}

0800b384 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	331a      	adds	r3, #26
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe ff8e 	bl	800a2b4 <ld_word>
 800b398:	4603      	mov	r3, r0
 800b39a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	2b03      	cmp	r3, #3
 800b3a2:	d109      	bne.n	800b3b8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	3314      	adds	r3, #20
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe ff83 	bl	800a2b4 <ld_word>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	041b      	lsls	r3, r3, #16
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	331a      	adds	r3, #26
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	b292      	uxth	r2, r2
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7fe ffa6 	bl	800a32a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d109      	bne.n	800b3fa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f103 0214 	add.w	r2, r3, #20
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	f7fe ff98 	bl	800a32a <st_word>
	}
}
 800b3fa:	bf00      	nop
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b410:	2100      	movs	r1, #0
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff fe10 	bl	800b038 <dir_sdi>
 800b418:	4603      	mov	r3, r0
 800b41a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <dir_find+0x24>
 800b422:	7dfb      	ldrb	r3, [r7, #23]
 800b424:	e03e      	b.n	800b4a4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	4619      	mov	r1, r3
 800b42c:	6938      	ldr	r0, [r7, #16]
 800b42e:	f7ff fa23 	bl	800a878 <move_window>
 800b432:	4603      	mov	r3, r0
 800b434:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d12f      	bne.n	800b49c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b444:	7bfb      	ldrb	r3, [r7, #15]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d102      	bne.n	800b450 <dir_find+0x4e>
 800b44a:	2304      	movs	r3, #4
 800b44c:	75fb      	strb	r3, [r7, #23]
 800b44e:	e028      	b.n	800b4a2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	330b      	adds	r3, #11
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	330b      	adds	r3, #11
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	f003 0308 	and.w	r3, r3, #8
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <dir_find+0x86>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a18      	ldr	r0, [r3, #32]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3324      	adds	r3, #36	; 0x24
 800b47a:	220b      	movs	r2, #11
 800b47c:	4619      	mov	r1, r3
 800b47e:	f7fe ffd7 	bl	800a430 <mem_cmp>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00b      	beq.n	800b4a0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b488:	2100      	movs	r1, #0
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff fe5d 	bl	800b14a <dir_next>
 800b490:	4603      	mov	r3, r0
 800b492:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0c5      	beq.n	800b426 <dir_find+0x24>
 800b49a:	e002      	b.n	800b4a2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b49c:	bf00      	nop
 800b49e:	e000      	b.n	800b4a2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b4a0:	bf00      	nop

	return res;
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b4ba:	2101      	movs	r1, #1
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ff1a 	bl	800b2f6 <dir_alloc>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b4c6:	7bfb      	ldrb	r3, [r7, #15]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d11c      	bne.n	800b506 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	68b8      	ldr	r0, [r7, #8]
 800b4d4:	f7ff f9d0 	bl	800a878 <move_window>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d111      	bne.n	800b506 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	2220      	movs	r2, #32
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe ff85 	bl	800a3fa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a18      	ldr	r0, [r3, #32]
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	3324      	adds	r3, #36	; 0x24
 800b4f8:	220b      	movs	r2, #11
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	f7fe ff5c 	bl	800a3b8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2201      	movs	r2, #1
 800b504:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b506:	7bfb      	ldrb	r3, [r7, #15]
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	3324      	adds	r3, #36	; 0x24
 800b524:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b526:	220b      	movs	r2, #11
 800b528:	2120      	movs	r1, #32
 800b52a:	68b8      	ldr	r0, [r7, #8]
 800b52c:	f7fe ff65 	bl	800a3fa <mem_set>
	si = i = 0; ni = 8;
 800b530:	2300      	movs	r3, #0
 800b532:	613b      	str	r3, [r7, #16]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	61fb      	str	r3, [r7, #28]
 800b538:	2308      	movs	r3, #8
 800b53a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	61fa      	str	r2, [r7, #28]
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b54a:	7efb      	ldrb	r3, [r7, #27]
 800b54c:	2b20      	cmp	r3, #32
 800b54e:	d94e      	bls.n	800b5ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b550:	7efb      	ldrb	r3, [r7, #27]
 800b552:	2b2f      	cmp	r3, #47	; 0x2f
 800b554:	d006      	beq.n	800b564 <create_name+0x54>
 800b556:	7efb      	ldrb	r3, [r7, #27]
 800b558:	2b5c      	cmp	r3, #92	; 0x5c
 800b55a:	d110      	bne.n	800b57e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b55c:	e002      	b.n	800b564 <create_name+0x54>
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	3301      	adds	r3, #1
 800b562:	61fb      	str	r3, [r7, #28]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	4413      	add	r3, r2
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b2f      	cmp	r3, #47	; 0x2f
 800b56e:	d0f6      	beq.n	800b55e <create_name+0x4e>
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2b5c      	cmp	r3, #92	; 0x5c
 800b57a:	d0f0      	beq.n	800b55e <create_name+0x4e>
			break;
 800b57c:	e038      	b.n	800b5f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b57e:	7efb      	ldrb	r3, [r7, #27]
 800b580:	2b2e      	cmp	r3, #46	; 0x2e
 800b582:	d003      	beq.n	800b58c <create_name+0x7c>
 800b584:	693a      	ldr	r2, [r7, #16]
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d30c      	bcc.n	800b5a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	2b0b      	cmp	r3, #11
 800b590:	d002      	beq.n	800b598 <create_name+0x88>
 800b592:	7efb      	ldrb	r3, [r7, #27]
 800b594:	2b2e      	cmp	r3, #46	; 0x2e
 800b596:	d001      	beq.n	800b59c <create_name+0x8c>
 800b598:	2306      	movs	r3, #6
 800b59a:	e044      	b.n	800b626 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b59c:	2308      	movs	r3, #8
 800b59e:	613b      	str	r3, [r7, #16]
 800b5a0:	230b      	movs	r3, #11
 800b5a2:	617b      	str	r3, [r7, #20]
			continue;
 800b5a4:	e022      	b.n	800b5ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b5a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	da04      	bge.n	800b5b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b5ae:	7efb      	ldrb	r3, [r7, #27]
 800b5b0:	3b80      	subs	r3, #128	; 0x80
 800b5b2:	4a1f      	ldr	r2, [pc, #124]	; (800b630 <create_name+0x120>)
 800b5b4:	5cd3      	ldrb	r3, [r2, r3]
 800b5b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b5b8:	7efb      	ldrb	r3, [r7, #27]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	481d      	ldr	r0, [pc, #116]	; (800b634 <create_name+0x124>)
 800b5be:	f7fe ff5e 	bl	800a47e <chk_chr>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <create_name+0xbc>
 800b5c8:	2306      	movs	r3, #6
 800b5ca:	e02c      	b.n	800b626 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b5cc:	7efb      	ldrb	r3, [r7, #27]
 800b5ce:	2b60      	cmp	r3, #96	; 0x60
 800b5d0:	d905      	bls.n	800b5de <create_name+0xce>
 800b5d2:	7efb      	ldrb	r3, [r7, #27]
 800b5d4:	2b7a      	cmp	r3, #122	; 0x7a
 800b5d6:	d802      	bhi.n	800b5de <create_name+0xce>
 800b5d8:	7efb      	ldrb	r3, [r7, #27]
 800b5da:	3b20      	subs	r3, #32
 800b5dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	613a      	str	r2, [r7, #16]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	7efa      	ldrb	r2, [r7, #27]
 800b5ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b5ec:	e7a6      	b.n	800b53c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b5ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	441a      	add	r2, r3
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <create_name+0xf4>
 800b600:	2306      	movs	r3, #6
 800b602:	e010      	b.n	800b626 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2be5      	cmp	r3, #229	; 0xe5
 800b60a:	d102      	bne.n	800b612 <create_name+0x102>
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2205      	movs	r2, #5
 800b610:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b612:	7efb      	ldrb	r3, [r7, #27]
 800b614:	2b20      	cmp	r3, #32
 800b616:	d801      	bhi.n	800b61c <create_name+0x10c>
 800b618:	2204      	movs	r2, #4
 800b61a:	e000      	b.n	800b61e <create_name+0x10e>
 800b61c:	2200      	movs	r2, #0
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	330b      	adds	r3, #11
 800b622:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b624:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b626:	4618      	mov	r0, r3
 800b628:	3720      	adds	r7, #32
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	08011804 	.word	0x08011804
 800b634:	08011768 	.word	0x08011768

0800b638 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b64c:	e002      	b.n	800b654 <follow_path+0x1c>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	3301      	adds	r3, #1
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	781b      	ldrb	r3, [r3, #0]
 800b658:	2b2f      	cmp	r3, #47	; 0x2f
 800b65a:	d0f8      	beq.n	800b64e <follow_path+0x16>
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2b5c      	cmp	r3, #92	; 0x5c
 800b662:	d0f4      	beq.n	800b64e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2200      	movs	r2, #0
 800b668:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b1f      	cmp	r3, #31
 800b670:	d80a      	bhi.n	800b688 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2280      	movs	r2, #128	; 0x80
 800b676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b67a:	2100      	movs	r1, #0
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff fcdb 	bl	800b038 <dir_sdi>
 800b682:	4603      	mov	r3, r0
 800b684:	75fb      	strb	r3, [r7, #23]
 800b686:	e048      	b.n	800b71a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b688:	463b      	mov	r3, r7
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7ff ff3f 	bl	800b510 <create_name>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b696:	7dfb      	ldrb	r3, [r7, #23]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d139      	bne.n	800b710 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff feb0 	bl	800b402 <dir_find>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b6ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b6ae:	7dfb      	ldrb	r3, [r7, #23]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00a      	beq.n	800b6ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
 800b6b6:	2b04      	cmp	r3, #4
 800b6b8:	d12c      	bne.n	800b714 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b6ba:	7afb      	ldrb	r3, [r7, #11]
 800b6bc:	f003 0304 	and.w	r3, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d127      	bne.n	800b714 <follow_path+0xdc>
 800b6c4:	2305      	movs	r3, #5
 800b6c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b6c8:	e024      	b.n	800b714 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	f003 0304 	and.w	r3, r3, #4
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d121      	bne.n	800b718 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	799b      	ldrb	r3, [r3, #6]
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d102      	bne.n	800b6e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b6e0:	2305      	movs	r3, #5
 800b6e2:	75fb      	strb	r3, [r7, #23]
 800b6e4:	e019      	b.n	800b71a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	695b      	ldr	r3, [r3, #20]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	8992      	ldrh	r2, [r2, #12]
 800b6f4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b6f8:	fb00 f202 	mul.w	r2, r0, r2
 800b6fc:	1a9b      	subs	r3, r3, r2
 800b6fe:	440b      	add	r3, r1
 800b700:	4619      	mov	r1, r3
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff fe3e 	bl	800b384 <ld_clust>
 800b708:	4602      	mov	r2, r0
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b70e:	e7bb      	b.n	800b688 <follow_path+0x50>
			if (res != FR_OK) break;
 800b710:	bf00      	nop
 800b712:	e002      	b.n	800b71a <follow_path+0xe2>
				break;
 800b714:	bf00      	nop
 800b716:	e000      	b.n	800b71a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b718:	bf00      	nop
			}
		}
	}

	return res;
 800b71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3718      	adds	r7, #24
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b72c:	f04f 33ff 	mov.w	r3, #4294967295
 800b730:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d031      	beq.n	800b79e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	617b      	str	r3, [r7, #20]
 800b740:	e002      	b.n	800b748 <get_ldnumber+0x24>
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	3301      	adds	r3, #1
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d903      	bls.n	800b758 <get_ldnumber+0x34>
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	2b3a      	cmp	r3, #58	; 0x3a
 800b756:	d1f4      	bne.n	800b742 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	2b3a      	cmp	r3, #58	; 0x3a
 800b75e:	d11c      	bne.n	800b79a <get_ldnumber+0x76>
			tp = *path;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	60fa      	str	r2, [r7, #12]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	3b30      	subs	r3, #48	; 0x30
 800b770:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b09      	cmp	r3, #9
 800b776:	d80e      	bhi.n	800b796 <get_ldnumber+0x72>
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d10a      	bne.n	800b796 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d107      	bne.n	800b796 <get_ldnumber+0x72>
					vol = (int)i;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	3301      	adds	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	e002      	b.n	800b7a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b79a:	2300      	movs	r3, #0
 800b79c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b79e:	693b      	ldr	r3, [r7, #16]
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	371c      	adds	r7, #28
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr

0800b7ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	70da      	strb	r2, [r3, #3]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f7ff f856 	bl	800a878 <move_window>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d001      	beq.n	800b7d6 <check_fs+0x2a>
 800b7d2:	2304      	movs	r3, #4
 800b7d4:	e038      	b.n	800b848 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	3338      	adds	r3, #56	; 0x38
 800b7da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fd68 	bl	800a2b4 <ld_word>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d001      	beq.n	800b7f4 <check_fs+0x48>
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	e029      	b.n	800b848 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b7fa:	2be9      	cmp	r3, #233	; 0xe9
 800b7fc:	d009      	beq.n	800b812 <check_fs+0x66>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b804:	2beb      	cmp	r3, #235	; 0xeb
 800b806:	d11e      	bne.n	800b846 <check_fs+0x9a>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b80e:	2b90      	cmp	r3, #144	; 0x90
 800b810:	d119      	bne.n	800b846 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	3338      	adds	r3, #56	; 0x38
 800b816:	3336      	adds	r3, #54	; 0x36
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fd63 	bl	800a2e4 <ld_dword>
 800b81e:	4603      	mov	r3, r0
 800b820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b824:	4a0a      	ldr	r2, [pc, #40]	; (800b850 <check_fs+0xa4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d101      	bne.n	800b82e <check_fs+0x82>
 800b82a:	2300      	movs	r3, #0
 800b82c:	e00c      	b.n	800b848 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3338      	adds	r3, #56	; 0x38
 800b832:	3352      	adds	r3, #82	; 0x52
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fd55 	bl	800a2e4 <ld_dword>
 800b83a:	4603      	mov	r3, r0
 800b83c:	4a05      	ldr	r2, [pc, #20]	; (800b854 <check_fs+0xa8>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d101      	bne.n	800b846 <check_fs+0x9a>
 800b842:	2300      	movs	r3, #0
 800b844:	e000      	b.n	800b848 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b846:	2302      	movs	r3, #2
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	00544146 	.word	0x00544146
 800b854:	33544146 	.word	0x33544146

0800b858 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b096      	sub	sp, #88	; 0x58
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f7ff ff59 	bl	800b724 <get_ldnumber>
 800b872:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b876:	2b00      	cmp	r3, #0
 800b878:	da01      	bge.n	800b87e <find_volume+0x26>
 800b87a:	230b      	movs	r3, #11
 800b87c:	e26a      	b.n	800bd54 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b87e:	4aa3      	ldr	r2, [pc, #652]	; (800bb0c <find_volume+0x2b4>)
 800b880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b886:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <find_volume+0x3a>
 800b88e:	230c      	movs	r3, #12
 800b890:	e260      	b.n	800bd54 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800b892:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b894:	f7fe fe0e 	bl	800a4b4 <lock_fs>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <find_volume+0x4a>
 800b89e:	230f      	movs	r3, #15
 800b8a0:	e258      	b.n	800bd54 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b8a8:	79fb      	ldrb	r3, [r7, #7]
 800b8aa:	f023 0301 	bic.w	r3, r3, #1
 800b8ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d01a      	beq.n	800b8ee <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe fc5b 	bl	800a178 <disk_status>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b8c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8cc:	f003 0301 	and.w	r3, r3, #1
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10c      	bne.n	800b8ee <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <find_volume+0x92>
 800b8da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b8de:	f003 0304 	and.w	r3, r3, #4
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d001      	beq.n	800b8ea <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b8e6:	230a      	movs	r3, #10
 800b8e8:	e234      	b.n	800bd54 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	e232      	b.n	800bd54 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f6:	b2da      	uxtb	r2, r3
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b8fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fe:	785b      	ldrb	r3, [r3, #1]
 800b900:	4618      	mov	r0, r3
 800b902:	f7fe fc53 	bl	800a1ac <disk_initialize>
 800b906:	4603      	mov	r3, r0
 800b908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b90c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b918:	2303      	movs	r3, #3
 800b91a:	e21b      	b.n	800bd54 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d007      	beq.n	800b932 <find_volume+0xda>
 800b922:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b926:	f003 0304 	and.w	r3, r3, #4
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b92e:	230a      	movs	r3, #10
 800b930:	e210      	b.n	800bd54 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	7858      	ldrb	r0, [r3, #1]
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	330c      	adds	r3, #12
 800b93a:	461a      	mov	r2, r3
 800b93c:	2102      	movs	r1, #2
 800b93e:	f7fe fc9b 	bl	800a278 <disk_ioctl>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <find_volume+0xf4>
 800b948:	2301      	movs	r3, #1
 800b94a:	e203      	b.n	800bd54 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	899b      	ldrh	r3, [r3, #12]
 800b950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b954:	d80d      	bhi.n	800b972 <find_volume+0x11a>
 800b956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b958:	899b      	ldrh	r3, [r3, #12]
 800b95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b95e:	d308      	bcc.n	800b972 <find_volume+0x11a>
 800b960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b962:	899b      	ldrh	r3, [r3, #12]
 800b964:	461a      	mov	r2, r3
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	899b      	ldrh	r3, [r3, #12]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	4013      	ands	r3, r2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <find_volume+0x11e>
 800b972:	2301      	movs	r3, #1
 800b974:	e1ee      	b.n	800bd54 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b97a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b97c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b97e:	f7ff ff15 	bl	800b7ac <check_fs>
 800b982:	4603      	mov	r3, r0
 800b984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d149      	bne.n	800ba24 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b990:	2300      	movs	r3, #0
 800b992:	643b      	str	r3, [r7, #64]	; 0x40
 800b994:	e01e      	b.n	800b9d4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b998:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b99c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b9a4:	4413      	add	r3, r2
 800b9a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9aa:	3304      	adds	r3, #4
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d006      	beq.n	800b9c0 <find_volume+0x168>
 800b9b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b4:	3308      	adds	r3, #8
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fc94 	bl	800a2e4 <ld_dword>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	e000      	b.n	800b9c2 <find_volume+0x16a>
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	3358      	adds	r3, #88	; 0x58
 800b9c8:	443b      	add	r3, r7
 800b9ca:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	643b      	str	r3, [r7, #64]	; 0x40
 800b9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d9dd      	bls.n	800b996 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b9da:	2300      	movs	r3, #0
 800b9dc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <find_volume+0x192>
 800b9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	3358      	adds	r3, #88	; 0x58
 800b9f0:	443b      	add	r3, r7
 800b9f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b9f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b9f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d005      	beq.n	800ba0a <find_volume+0x1b2>
 800b9fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ba00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba02:	f7ff fed3 	bl	800b7ac <check_fs>
 800ba06:	4603      	mov	r3, r0
 800ba08:	e000      	b.n	800ba0c <find_volume+0x1b4>
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ba10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d905      	bls.n	800ba24 <find_volume+0x1cc>
 800ba18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	643b      	str	r3, [r7, #64]	; 0x40
 800ba1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba20:	2b03      	cmp	r3, #3
 800ba22:	d9e2      	bls.n	800b9ea <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ba24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d101      	bne.n	800ba30 <find_volume+0x1d8>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e191      	b.n	800bd54 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ba30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d901      	bls.n	800ba3c <find_volume+0x1e4>
 800ba38:	230d      	movs	r3, #13
 800ba3a:	e18b      	b.n	800bd54 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3e:	3338      	adds	r3, #56	; 0x38
 800ba40:	330b      	adds	r3, #11
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7fe fc36 	bl	800a2b4 <ld_word>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	899b      	ldrh	r3, [r3, #12]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d001      	beq.n	800ba58 <find_volume+0x200>
 800ba54:	230d      	movs	r3, #13
 800ba56:	e17d      	b.n	800bd54 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5a:	3338      	adds	r3, #56	; 0x38
 800ba5c:	3316      	adds	r3, #22
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fe fc28 	bl	800a2b4 <ld_word>
 800ba64:	4603      	mov	r3, r0
 800ba66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ba68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <find_volume+0x224>
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	3338      	adds	r3, #56	; 0x38
 800ba72:	3324      	adds	r3, #36	; 0x24
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fc35 	bl	800a2e4 <ld_dword>
 800ba7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba80:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ba88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8e:	789b      	ldrb	r3, [r3, #2]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d005      	beq.n	800baa0 <find_volume+0x248>
 800ba94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba96:	789b      	ldrb	r3, [r3, #2]
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d001      	beq.n	800baa0 <find_volume+0x248>
 800ba9c:	230d      	movs	r3, #13
 800ba9e:	e159      	b.n	800bd54 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	789b      	ldrb	r3, [r3, #2]
 800baa4:	461a      	mov	r2, r3
 800baa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa8:	fb02 f303 	mul.w	r3, r2, r3
 800baac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	895b      	ldrh	r3, [r3, #10]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d008      	beq.n	800bad4 <find_volume+0x27c>
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	895b      	ldrh	r3, [r3, #10]
 800bac6:	461a      	mov	r2, r3
 800bac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baca:	895b      	ldrh	r3, [r3, #10]
 800bacc:	3b01      	subs	r3, #1
 800bace:	4013      	ands	r3, r2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <find_volume+0x280>
 800bad4:	230d      	movs	r3, #13
 800bad6:	e13d      	b.n	800bd54 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bada:	3338      	adds	r3, #56	; 0x38
 800badc:	3311      	adds	r3, #17
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fe fbe8 	bl	800a2b4 <ld_word>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	891b      	ldrh	r3, [r3, #8]
 800baf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800baf2:	8992      	ldrh	r2, [r2, #12]
 800baf4:	0952      	lsrs	r2, r2, #5
 800baf6:	b292      	uxth	r2, r2
 800baf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800bafc:	fb01 f202 	mul.w	r2, r1, r2
 800bb00:	1a9b      	subs	r3, r3, r2
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <find_volume+0x2b8>
 800bb08:	230d      	movs	r3, #13
 800bb0a:	e123      	b.n	800bd54 <find_volume+0x4fc>
 800bb0c:	20003688 	.word	0x20003688

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	3338      	adds	r3, #56	; 0x38
 800bb14:	3313      	adds	r3, #19
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe fbcc 	bl	800a2b4 <ld_word>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bb20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d106      	bne.n	800bb34 <find_volume+0x2dc>
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	3338      	adds	r3, #56	; 0x38
 800bb2a:	3320      	adds	r3, #32
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fbd9 	bl	800a2e4 <ld_dword>
 800bb32:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	3338      	adds	r3, #56	; 0x38
 800bb38:	330e      	adds	r3, #14
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fe fbba 	bl	800a2b4 <ld_word>
 800bb40:	4603      	mov	r3, r0
 800bb42:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bb44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <find_volume+0x2f6>
 800bb4a:	230d      	movs	r3, #13
 800bb4c:	e102      	b.n	800bd54 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bb4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bb50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb52:	4413      	add	r3, r2
 800bb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb56:	8911      	ldrh	r1, [r2, #8]
 800bb58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb5a:	8992      	ldrh	r2, [r2, #12]
 800bb5c:	0952      	lsrs	r2, r2, #5
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	fbb1 f2f2 	udiv	r2, r1, r2
 800bb64:	b292      	uxth	r2, r2
 800bb66:	4413      	add	r3, r2
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bb6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d201      	bcs.n	800bb76 <find_volume+0x31e>
 800bb72:	230d      	movs	r3, #13
 800bb74:	e0ee      	b.n	800bd54 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bb76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb7e:	8952      	ldrh	r2, [r2, #10]
 800bb80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <find_volume+0x338>
 800bb8c:	230d      	movs	r3, #13
 800bb8e:	e0e1      	b.n	800bd54 <find_volume+0x4fc>
		fmt = FS_FAT32;
 800bb90:	2303      	movs	r3, #3
 800bb92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d802      	bhi.n	800bba6 <find_volume+0x34e>
 800bba0:	2302      	movs	r3, #2
 800bba2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d802      	bhi.n	800bbb6 <find_volume+0x35e>
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb8:	1c9a      	adds	r2, r3, #2
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbc2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bbc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bbc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbc8:	441a      	add	r2, r3
 800bbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbcc:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800bbce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	441a      	add	r2, r3
 800bbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd6:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800bbd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d11e      	bne.n	800bc1e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe2:	3338      	adds	r3, #56	; 0x38
 800bbe4:	332a      	adds	r3, #42	; 0x2a
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe fb64 	bl	800a2b4 <ld_word>
 800bbec:	4603      	mov	r3, r0
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <find_volume+0x39e>
 800bbf2:	230d      	movs	r3, #13
 800bbf4:	e0ae      	b.n	800bd54 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf8:	891b      	ldrh	r3, [r3, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <find_volume+0x3aa>
 800bbfe:	230d      	movs	r3, #13
 800bc00:	e0a8      	b.n	800bd54 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc04:	3338      	adds	r3, #56	; 0x38
 800bc06:	332c      	adds	r3, #44	; 0x2c
 800bc08:	4618      	mov	r0, r3
 800bc0a:	f7fe fb6b 	bl	800a2e4 <ld_dword>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc12:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc16:	69db      	ldr	r3, [r3, #28]
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc1c:	e01f      	b.n	800bc5e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	891b      	ldrh	r3, [r3, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <find_volume+0x3d2>
 800bc26:	230d      	movs	r3, #13
 800bc28:	e094      	b.n	800bd54 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc30:	441a      	add	r2, r3
 800bc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc34:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc3a:	2b02      	cmp	r3, #2
 800bc3c:	d103      	bne.n	800bc46 <find_volume+0x3ee>
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	e00a      	b.n	800bc5c <find_volume+0x404>
 800bc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc48:	69da      	ldr	r2, [r3, #28]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	4413      	add	r3, r2
 800bc50:	085a      	lsrs	r2, r3, #1
 800bc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bc5c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc60:	6a1a      	ldr	r2, [r3, #32]
 800bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc64:	899b      	ldrh	r3, [r3, #12]
 800bc66:	4619      	mov	r1, r3
 800bc68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc6a:	440b      	add	r3, r1
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc70:	8989      	ldrh	r1, [r1, #12]
 800bc72:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d201      	bcs.n	800bc7e <find_volume+0x426>
 800bc7a:	230d      	movs	r3, #13
 800bc7c:	e06a      	b.n	800bd54 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc80:	f04f 32ff 	mov.w	r2, #4294967295
 800bc84:	619a      	str	r2, [r3, #24]
 800bc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc88:	699a      	ldr	r2, [r3, #24]
 800bc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc8c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc90:	2280      	movs	r2, #128	; 0x80
 800bc92:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d149      	bne.n	800bd30 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bc9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9e:	3338      	adds	r3, #56	; 0x38
 800bca0:	3330      	adds	r3, #48	; 0x30
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe fb06 	bl	800a2b4 <ld_word>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d140      	bne.n	800bd30 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcb6:	f7fe fddf 	bl	800a878 <move_window>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d137      	bne.n	800bd30 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc8:	3338      	adds	r3, #56	; 0x38
 800bcca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe faf0 	bl	800a2b4 <ld_word>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d127      	bne.n	800bd30 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce2:	3338      	adds	r3, #56	; 0x38
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fe fafd 	bl	800a2e4 <ld_dword>
 800bcea:	4603      	mov	r3, r0
 800bcec:	4a1b      	ldr	r2, [pc, #108]	; (800bd5c <find_volume+0x504>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d11e      	bne.n	800bd30 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf4:	3338      	adds	r3, #56	; 0x38
 800bcf6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe faf2 	bl	800a2e4 <ld_dword>
 800bd00:	4603      	mov	r3, r0
 800bd02:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <find_volume+0x508>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d113      	bne.n	800bd30 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0a:	3338      	adds	r3, #56	; 0x38
 800bd0c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fe fae7 	bl	800a2e4 <ld_dword>
 800bd16:	4602      	mov	r2, r0
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1e:	3338      	adds	r3, #56	; 0x38
 800bd20:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7fe fadd 	bl	800a2e4 <ld_dword>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd32:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bd36:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bd38:	4b0a      	ldr	r3, [pc, #40]	; (800bd64 <find_volume+0x50c>)
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	4b08      	ldr	r3, [pc, #32]	; (800bd64 <find_volume+0x50c>)
 800bd42:	801a      	strh	r2, [r3, #0]
 800bd44:	4b07      	ldr	r3, [pc, #28]	; (800bd64 <find_volume+0x50c>)
 800bd46:	881a      	ldrh	r2, [r3, #0]
 800bd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bd4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd4e:	f7fe fd2b 	bl	800a7a8 <clear_lock>
#endif
	return FR_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3758      	adds	r7, #88	; 0x58
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}
 800bd5c:	41615252 	.word	0x41615252
 800bd60:	61417272 	.word	0x61417272
 800bd64:	2000368c 	.word	0x2000368c

0800bd68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bd72:	2309      	movs	r3, #9
 800bd74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d02e      	beq.n	800bdda <validate+0x72>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d02a      	beq.n	800bdda <validate+0x72>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d025      	beq.n	800bdda <validate+0x72>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	889a      	ldrh	r2, [r3, #4]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	88db      	ldrh	r3, [r3, #6]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d11e      	bne.n	800bdda <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fb87 	bl	800a4b4 <lock_fs>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d014      	beq.n	800bdd6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f7fe f9e0 	bl	800a178 <disk_status>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d102      	bne.n	800bdc8 <validate+0x60>
				res = FR_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73fb      	strb	r3, [r7, #15]
 800bdc6:	e008      	b.n	800bdda <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2100      	movs	r1, #0
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fb86 	bl	800a4e0 <unlock_fs>
 800bdd4:	e001      	b.n	800bdda <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800bdd6:	230f      	movs	r3, #15
 800bdd8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <validate+0x7e>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	e000      	b.n	800bde8 <validate+0x80>
 800bde6:	2300      	movs	r3, #0
 800bde8:	683a      	ldr	r2, [r7, #0]
 800bdea:	6013      	str	r3, [r2, #0]
	return res;
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3710      	adds	r7, #16
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b088      	sub	sp, #32
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800be0a:	f107 0310 	add.w	r3, r7, #16
 800be0e:	4618      	mov	r0, r3
 800be10:	f7ff fc88 	bl	800b724 <get_ldnumber>
 800be14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	da01      	bge.n	800be20 <f_mount+0x28>
 800be1c:	230b      	movs	r3, #11
 800be1e:	e048      	b.n	800beb2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800be20:	4a26      	ldr	r2, [pc, #152]	; (800bebc <f_mount+0xc4>)
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00f      	beq.n	800be50 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800be30:	69b8      	ldr	r0, [r7, #24]
 800be32:	f7fe fcb9 	bl	800a7a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	691b      	ldr	r3, [r3, #16]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 fda5 	bl	800c98a <ff_del_syncobj>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <f_mount+0x52>
 800be46:	2302      	movs	r3, #2
 800be48:	e033      	b.n	800beb2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2200      	movs	r2, #0
 800be4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00f      	beq.n	800be76 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	b2da      	uxtb	r2, r3
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3310      	adds	r3, #16
 800be64:	4619      	mov	r1, r3
 800be66:	4610      	mov	r0, r2
 800be68:	f000 fd6f 	bl	800c94a <ff_cre_syncobj>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d101      	bne.n	800be76 <f_mount+0x7e>
 800be72:	2302      	movs	r3, #2
 800be74:	e01d      	b.n	800beb2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4910      	ldr	r1, [pc, #64]	; (800bebc <f_mount+0xc4>)
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d002      	beq.n	800be8c <f_mount+0x94>
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d001      	beq.n	800be90 <f_mount+0x98>
 800be8c:	2300      	movs	r3, #0
 800be8e:	e010      	b.n	800beb2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800be90:	f107 010c 	add.w	r1, r7, #12
 800be94:	f107 0308 	add.w	r3, r7, #8
 800be98:	2200      	movs	r2, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff fcdc 	bl	800b858 <find_volume>
 800bea0:	4603      	mov	r3, r0
 800bea2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	7dfa      	ldrb	r2, [r7, #23]
 800bea8:	4611      	mov	r1, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe fb18 	bl	800a4e0 <unlock_fs>
 800beb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3720      	adds	r7, #32
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20003688 	.word	0x20003688

0800bec0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b098      	sub	sp, #96	; 0x60
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	4613      	mov	r3, r2
 800becc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <f_open+0x18>
 800bed4:	2309      	movs	r3, #9
 800bed6:	e1c2      	b.n	800c25e <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bed8:	79fb      	ldrb	r3, [r7, #7]
 800beda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bede:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bee0:	79fa      	ldrb	r2, [r7, #7]
 800bee2:	f107 0110 	add.w	r1, r7, #16
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fcb4 	bl	800b858 <find_volume>
 800bef0:	4603      	mov	r3, r0
 800bef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800befa:	2b00      	cmp	r3, #0
 800befc:	f040 819f 	bne.w	800c23e <f_open+0x37e>
		dj.obj.fs = fs;
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	f107 0314 	add.w	r3, r7, #20
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff fb93 	bl	800b638 <follow_path>
 800bf12:	4603      	mov	r3, r0
 800bf14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bf18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d11a      	bne.n	800bf56 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bf20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bf24:	b25b      	sxtb	r3, r3
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	da03      	bge.n	800bf32 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bf2a:	2306      	movs	r3, #6
 800bf2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf30:	e011      	b.n	800bf56 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bf32:	79fb      	ldrb	r3, [r7, #7]
 800bf34:	f023 0301 	bic.w	r3, r3, #1
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	bf14      	ite	ne
 800bf3c:	2301      	movne	r3, #1
 800bf3e:	2300      	moveq	r3, #0
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	f107 0314 	add.w	r3, r7, #20
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe fae4 	bl	800a518 <chk_lock>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	f003 031c 	and.w	r3, r3, #28
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d07f      	beq.n	800c060 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bf60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d017      	beq.n	800bf98 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bf68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf6c:	2b04      	cmp	r3, #4
 800bf6e:	d10e      	bne.n	800bf8e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bf70:	f7fe fb2e 	bl	800a5d0 <enq_lock>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d006      	beq.n	800bf88 <f_open+0xc8>
 800bf7a:	f107 0314 	add.w	r3, r7, #20
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fa94 	bl	800b4ac <dir_register>
 800bf84:	4603      	mov	r3, r0
 800bf86:	e000      	b.n	800bf8a <f_open+0xca>
 800bf88:	2312      	movs	r3, #18
 800bf8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	f043 0308 	orr.w	r3, r3, #8
 800bf94:	71fb      	strb	r3, [r7, #7]
 800bf96:	e010      	b.n	800bfba <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bf98:	7ebb      	ldrb	r3, [r7, #26]
 800bf9a:	f003 0311 	and.w	r3, r3, #17
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d003      	beq.n	800bfaa <f_open+0xea>
					res = FR_DENIED;
 800bfa2:	2307      	movs	r3, #7
 800bfa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bfa8:	e007      	b.n	800bfba <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bfaa:	79fb      	ldrb	r3, [r7, #7]
 800bfac:	f003 0304 	and.w	r3, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <f_open+0xfa>
 800bfb4:	2308      	movs	r3, #8
 800bfb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bfba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d168      	bne.n	800c094 <f_open+0x1d4>
 800bfc2:	79fb      	ldrb	r3, [r7, #7]
 800bfc4:	f003 0308 	and.w	r3, r3, #8
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d063      	beq.n	800c094 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bfcc:	f7fe f876 	bl	800a0bc <get_fattime>
 800bfd0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd4:	330e      	adds	r3, #14
 800bfd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe f9c1 	bl	800a360 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bfde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe0:	3316      	adds	r3, #22
 800bfe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe f9bb 	bl	800a360 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bfea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfec:	330b      	adds	r3, #11
 800bfee:	2220      	movs	r2, #32
 800bff0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff6:	4611      	mov	r1, r2
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff f9c3 	bl	800b384 <ld_clust>
 800bffe:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c004:	2200      	movs	r2, #0
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff f9db 	bl	800b3c2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c00c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00e:	331c      	adds	r3, #28
 800c010:	2100      	movs	r1, #0
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe f9a4 	bl	800a360 <st_dword>
					fs->wflag = 1;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	2201      	movs	r2, #1
 800c01c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c01e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c020:	2b00      	cmp	r3, #0
 800c022:	d037      	beq.n	800c094 <f_open+0x1d4>
						dw = fs->winsect;
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c028:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c02a:	f107 0314 	add.w	r3, r7, #20
 800c02e:	2200      	movs	r2, #0
 800c030:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fecb 	bl	800adce <remove_chain>
 800c038:	4603      	mov	r3, r0
 800c03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c03e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c042:	2b00      	cmp	r3, #0
 800c044:	d126      	bne.n	800c094 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fc14 	bl	800a878 <move_window>
 800c050:	4603      	mov	r3, r0
 800c052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c05a:	3a01      	subs	r2, #1
 800c05c:	615a      	str	r2, [r3, #20]
 800c05e:	e019      	b.n	800c094 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d115      	bne.n	800c094 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c068:	7ebb      	ldrb	r3, [r7, #26]
 800c06a:	f003 0310 	and.w	r3, r3, #16
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d003      	beq.n	800c07a <f_open+0x1ba>
					res = FR_NO_FILE;
 800c072:	2304      	movs	r3, #4
 800c074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c078:	e00c      	b.n	800c094 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	f003 0302 	and.w	r3, r3, #2
 800c080:	2b00      	cmp	r3, #0
 800c082:	d007      	beq.n	800c094 <f_open+0x1d4>
 800c084:	7ebb      	ldrb	r3, [r7, #26]
 800c086:	f003 0301 	and.w	r3, r3, #1
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <f_open+0x1d4>
						res = FR_DENIED;
 800c08e:	2307      	movs	r3, #7
 800c090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c094:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d128      	bne.n	800c0ee <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c09c:	79fb      	ldrb	r3, [r7, #7]
 800c09e:	f003 0308 	and.w	r3, r3, #8
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d003      	beq.n	800c0ae <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ac:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c0b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c0bc:	79fb      	ldrb	r3, [r7, #7]
 800c0be:	f023 0301 	bic.w	r3, r3, #1
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bf14      	ite	ne
 800c0c6:	2301      	movne	r3, #1
 800c0c8:	2300      	moveq	r3, #0
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	f107 0314 	add.w	r3, r7, #20
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f7fe fa9d 	bl	800a614 <inc_lock>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <f_open+0x22e>
 800c0e8:	2302      	movs	r3, #2
 800c0ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c0ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f040 80a3 	bne.w	800c23e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0fc:	4611      	mov	r1, r2
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7ff f940 	bl	800b384 <ld_clust>
 800c104:	4602      	mov	r2, r0
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c10c:	331c      	adds	r3, #28
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe f8e8 	bl	800a2e4 <ld_dword>
 800c114:	4602      	mov	r2, r0
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c120:	693a      	ldr	r2, [r7, #16]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	88da      	ldrh	r2, [r3, #6]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	79fa      	ldrb	r2, [r7, #7]
 800c132:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	3330      	adds	r3, #48	; 0x30
 800c14a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c14e:	2100      	movs	r1, #0
 800c150:	4618      	mov	r0, r3
 800c152:	f7fe f952 	bl	800a3fa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c156:	79fb      	ldrb	r3, [r7, #7]
 800c158:	f003 0320 	and.w	r3, r3, #32
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d06e      	beq.n	800c23e <f_open+0x37e>
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d06a      	beq.n	800c23e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	68da      	ldr	r2, [r3, #12]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	895b      	ldrh	r3, [r3, #10]
 800c174:	461a      	mov	r2, r3
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	899b      	ldrh	r3, [r3, #12]
 800c17a:	fb02 f303 	mul.w	r3, r2, r3
 800c17e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	657b      	str	r3, [r7, #84]	; 0x54
 800c18c:	e016      	b.n	800c1bc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fc2d 	bl	800a9f2 <get_fat>
 800c198:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c19a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d802      	bhi.n	800c1a6 <f_open+0x2e6>
 800c1a0:	2302      	movs	r3, #2
 800c1a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c1a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ac:	d102      	bne.n	800c1b4 <f_open+0x2f4>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c1b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b8:	1ad3      	subs	r3, r2, r3
 800c1ba:	657b      	str	r3, [r7, #84]	; 0x54
 800c1bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d103      	bne.n	800c1cc <f_open+0x30c>
 800c1c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d8e0      	bhi.n	800c18e <f_open+0x2ce>
				}
				fp->clust = clst;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c1d0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c1d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d131      	bne.n	800c23e <f_open+0x37e>
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	899b      	ldrh	r3, [r3, #12]
 800c1de:	461a      	mov	r2, r3
 800c1e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c1e6:	fb01 f202 	mul.w	r2, r1, r2
 800c1ea:	1a9b      	subs	r3, r3, r2
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d026      	beq.n	800c23e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fe fbdd 	bl	800a9b4 <clust2sect>
 800c1fa:	6478      	str	r0, [r7, #68]	; 0x44
 800c1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d103      	bne.n	800c20a <f_open+0x34a>
						res = FR_INT_ERR;
 800c202:	2302      	movs	r3, #2
 800c204:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c208:	e019      	b.n	800c23e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	899b      	ldrh	r3, [r3, #12]
 800c20e:	461a      	mov	r2, r3
 800c210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c212:	fbb3 f2f2 	udiv	r2, r3, r2
 800c216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c218:	441a      	add	r2, r3
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	7858      	ldrb	r0, [r3, #1]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	6a1a      	ldr	r2, [r3, #32]
 800c22c:	2301      	movs	r3, #1
 800c22e:	f7fd ffe3 	bl	800a1f8 <disk_read>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d002      	beq.n	800c23e <f_open+0x37e>
 800c238:	2301      	movs	r3, #1
 800c23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c23e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <f_open+0x38c>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f7fe f943 	bl	800a4e0 <unlock_fs>
 800c25a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3760      	adds	r7, #96	; 0x60
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b08c      	sub	sp, #48	; 0x30
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	60f8      	str	r0, [r7, #12]
 800c26e:	60b9      	str	r1, [r7, #8]
 800c270:	607a      	str	r2, [r7, #4]
 800c272:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	2200      	movs	r2, #0
 800c27c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f107 0210 	add.w	r2, r7, #16
 800c284:	4611      	mov	r1, r2
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fd6e 	bl	800bd68 <validate>
 800c28c:	4603      	mov	r3, r0
 800c28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c296:	2b00      	cmp	r3, #0
 800c298:	d107      	bne.n	800c2aa <f_write+0x44>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	7d5b      	ldrb	r3, [r3, #21]
 800c29e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c2a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d009      	beq.n	800c2be <f_write+0x58>
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7fe f914 	bl	800a4e0 <unlock_fs>
 800c2b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c2bc:	e192      	b.n	800c5e4 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	7d1b      	ldrb	r3, [r3, #20]
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <f_write+0x72>
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2107      	movs	r1, #7
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe f906 	bl	800a4e0 <unlock_fs>
 800c2d4:	2307      	movs	r3, #7
 800c2d6:	e185      	b.n	800c5e4 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	699a      	ldr	r2, [r3, #24]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	441a      	add	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	f080 816a 	bcs.w	800c5be <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	43db      	mvns	r3, r3
 800c2f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c2f2:	e164      	b.n	800c5be <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	699b      	ldr	r3, [r3, #24]
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	8992      	ldrh	r2, [r2, #12]
 800c2fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c300:	fb01 f202 	mul.w	r2, r1, r2
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	2b00      	cmp	r3, #0
 800c308:	f040 810f 	bne.w	800c52a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	8992      	ldrh	r2, [r2, #12]
 800c314:	fbb3 f3f2 	udiv	r3, r3, r2
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	8952      	ldrh	r2, [r2, #10]
 800c31c:	3a01      	subs	r2, #1
 800c31e:	4013      	ands	r3, r2
 800c320:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d14d      	bne.n	800c3c4 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10c      	bne.n	800c34a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d11a      	bne.n	800c372 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2100      	movs	r1, #0
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe fda9 	bl	800ae98 <create_chain>
 800c346:	62b8      	str	r0, [r7, #40]	; 0x28
 800c348:	e013      	b.n	800c372 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d007      	beq.n	800c362 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	699b      	ldr	r3, [r3, #24]
 800c356:	4619      	mov	r1, r3
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f7fe fe35 	bl	800afc8 <clmt_clust>
 800c35e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c360:	e007      	b.n	800c372 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c362:	68fa      	ldr	r2, [r7, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	69db      	ldr	r3, [r3, #28]
 800c368:	4619      	mov	r1, r3
 800c36a:	4610      	mov	r0, r2
 800c36c:	f7fe fd94 	bl	800ae98 <create_chain>
 800c370:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c374:	2b00      	cmp	r3, #0
 800c376:	f000 8127 	beq.w	800c5c8 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d109      	bne.n	800c394 <f_write+0x12e>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2202      	movs	r2, #2
 800c384:	755a      	strb	r2, [r3, #21]
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	2102      	movs	r1, #2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fe f8a8 	bl	800a4e0 <unlock_fs>
 800c390:	2302      	movs	r3, #2
 800c392:	e127      	b.n	800c5e4 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39a:	d109      	bne.n	800c3b0 <f_write+0x14a>
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	755a      	strb	r2, [r3, #21]
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	2101      	movs	r1, #1
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe f89a 	bl	800a4e0 <unlock_fs>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e119      	b.n	800c5e4 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3b4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d102      	bne.n	800c3c4 <f_write+0x15e>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3c2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	7d1b      	ldrb	r3, [r3, #20]
 800c3c8:	b25b      	sxtb	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	da1d      	bge.n	800c40a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	7858      	ldrb	r0, [r3, #1]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a1a      	ldr	r2, [r3, #32]
 800c3dc:	2301      	movs	r3, #1
 800c3de:	f7fd ff2b 	bl	800a238 <disk_write>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d009      	beq.n	800c3fc <f_write+0x196>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	755a      	strb	r2, [r3, #21]
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	2101      	movs	r1, #1
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe f874 	bl	800a4e0 <unlock_fs>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e0f3      	b.n	800c5e4 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	7d1b      	ldrb	r3, [r3, #20]
 800c400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c404:	b2da      	uxtb	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	69db      	ldr	r3, [r3, #28]
 800c410:	4619      	mov	r1, r3
 800c412:	4610      	mov	r0, r2
 800c414:	f7fe face 	bl	800a9b4 <clust2sect>
 800c418:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d109      	bne.n	800c434 <f_write+0x1ce>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2202      	movs	r2, #2
 800c424:	755a      	strb	r2, [r3, #21]
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	2102      	movs	r1, #2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe f858 	bl	800a4e0 <unlock_fs>
 800c430:	2302      	movs	r3, #2
 800c432:	e0d7      	b.n	800c5e4 <f_write+0x37e>
			sect += csect;
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	4413      	add	r3, r2
 800c43a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	899b      	ldrh	r3, [r3, #12]
 800c440:	461a      	mov	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	fbb3 f3f2 	udiv	r3, r3, r2
 800c448:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d048      	beq.n	800c4e2 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	4413      	add	r3, r2
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	8952      	ldrh	r2, [r2, #10]
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d905      	bls.n	800c46a <f_write+0x204>
					cc = fs->csize - csect;
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	895b      	ldrh	r3, [r3, #10]
 800c462:	461a      	mov	r2, r3
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	1ad3      	subs	r3, r2, r3
 800c468:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	7858      	ldrb	r0, [r3, #1]
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	69f9      	ldr	r1, [r7, #28]
 800c474:	f7fd fee0 	bl	800a238 <disk_write>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d009      	beq.n	800c492 <f_write+0x22c>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2201      	movs	r2, #1
 800c482:	755a      	strb	r2, [r3, #21]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2101      	movs	r1, #1
 800c488:	4618      	mov	r0, r3
 800c48a:	f7fe f829 	bl	800a4e0 <unlock_fs>
 800c48e:	2301      	movs	r3, #1
 800c490:	e0a8      	b.n	800c5e4 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6a1a      	ldr	r2, [r3, #32]
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	6a3a      	ldr	r2, [r7, #32]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d918      	bls.n	800c4d2 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6a1a      	ldr	r2, [r3, #32]
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	693a      	ldr	r2, [r7, #16]
 800c4b0:	8992      	ldrh	r2, [r2, #12]
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
 800c4b6:	69fa      	ldr	r2, [r7, #28]
 800c4b8:	18d1      	adds	r1, r2, r3
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	899b      	ldrh	r3, [r3, #12]
 800c4be:	461a      	mov	r2, r3
 800c4c0:	f7fd ff7a 	bl	800a3b8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	7d1b      	ldrb	r3, [r3, #20]
 800c4c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	899b      	ldrh	r3, [r3, #12]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	fb02 f303 	mul.w	r3, r2, r3
 800c4de:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c4e0:	e050      	b.n	800c584 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d01b      	beq.n	800c524 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	699a      	ldr	r2, [r3, #24]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d215      	bcs.n	800c524 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c4f8:	693b      	ldr	r3, [r7, #16]
 800c4fa:	7858      	ldrb	r0, [r3, #1]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c502:	2301      	movs	r3, #1
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	f7fd fe77 	bl	800a1f8 <disk_read>
 800c50a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d009      	beq.n	800c524 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2201      	movs	r2, #1
 800c514:	755a      	strb	r2, [r3, #21]
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	2101      	movs	r1, #1
 800c51a:	4618      	mov	r0, r3
 800c51c:	f7fd ffe0 	bl	800a4e0 <unlock_fs>
 800c520:	2301      	movs	r3, #1
 800c522:	e05f      	b.n	800c5e4 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	899b      	ldrh	r3, [r3, #12]
 800c52e:	4618      	mov	r0, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	699b      	ldr	r3, [r3, #24]
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	8992      	ldrh	r2, [r2, #12]
 800c538:	fbb3 f1f2 	udiv	r1, r3, r2
 800c53c:	fb01 f202 	mul.w	r2, r1, r2
 800c540:	1a9b      	subs	r3, r3, r2
 800c542:	1ac3      	subs	r3, r0, r3
 800c544:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d901      	bls.n	800c552 <f_write+0x2ec>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	8992      	ldrh	r2, [r2, #12]
 800c560:	fbb3 f0f2 	udiv	r0, r3, r2
 800c564:	fb00 f202 	mul.w	r2, r0, r2
 800c568:	1a9b      	subs	r3, r3, r2
 800c56a:	440b      	add	r3, r1
 800c56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56e:	69f9      	ldr	r1, [r7, #28]
 800c570:	4618      	mov	r0, r3
 800c572:	f7fd ff21 	bl	800a3b8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	7d1b      	ldrb	r3, [r3, #20]
 800c57a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c584:	69fa      	ldr	r2, [r7, #28]
 800c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c588:	4413      	add	r3, r2
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	699a      	ldr	r2, [r3, #24]
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	441a      	add	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	619a      	str	r2, [r3, #24]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	68da      	ldr	r2, [r3, #12]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	699b      	ldr	r3, [r3, #24]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	bf38      	it	cc
 800c5a4:	461a      	movcc	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	60da      	str	r2, [r3, #12]
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b0:	441a      	add	r2, r3
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	601a      	str	r2, [r3, #0]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f47f ae97 	bne.w	800c2f4 <f_write+0x8e>
 800c5c6:	e000      	b.n	800c5ca <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c5c8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	7d1b      	ldrb	r3, [r3, #20]
 800c5ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	2100      	movs	r1, #0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fd ff7f 	bl	800a4e0 <unlock_fs>
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3730      	adds	r7, #48	; 0x30
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f107 0208 	add.w	r2, r7, #8
 800c5fa:	4611      	mov	r1, r2
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7ff fbb3 	bl	800bd68 <validate>
 800c602:	4603      	mov	r3, r0
 800c604:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c606:	7dfb      	ldrb	r3, [r7, #23]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d16d      	bne.n	800c6e8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c614:	2b00      	cmp	r3, #0
 800c616:	d067      	beq.n	800c6e8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7d1b      	ldrb	r3, [r3, #20]
 800c61c:	b25b      	sxtb	r3, r3
 800c61e:	2b00      	cmp	r3, #0
 800c620:	da1a      	bge.n	800c658 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	7858      	ldrb	r0, [r3, #1]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a1a      	ldr	r2, [r3, #32]
 800c630:	2301      	movs	r3, #1
 800c632:	f7fd fe01 	bl	800a238 <disk_write>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d006      	beq.n	800c64a <f_sync+0x5e>
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2101      	movs	r1, #1
 800c640:	4618      	mov	r0, r3
 800c642:	f7fd ff4d 	bl	800a4e0 <unlock_fs>
 800c646:	2301      	movs	r3, #1
 800c648:	e055      	b.n	800c6f6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	7d1b      	ldrb	r3, [r3, #20]
 800c64e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c652:	b2da      	uxtb	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c658:	f7fd fd30 	bl	800a0bc <get_fattime>
 800c65c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c664:	4619      	mov	r1, r3
 800c666:	4610      	mov	r0, r2
 800c668:	f7fe f906 	bl	800a878 <move_window>
 800c66c:	4603      	mov	r3, r0
 800c66e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c670:	7dfb      	ldrb	r3, [r7, #23]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d138      	bne.n	800c6e8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c67a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	330b      	adds	r3, #11
 800c680:	781a      	ldrb	r2, [r3, #0]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	330b      	adds	r3, #11
 800c686:	f042 0220 	orr.w	r2, r2, #32
 800c68a:	b2d2      	uxtb	r2, r2
 800c68c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	689b      	ldr	r3, [r3, #8]
 800c696:	461a      	mov	r2, r3
 800c698:	68f9      	ldr	r1, [r7, #12]
 800c69a:	f7fe fe92 	bl	800b3c2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f103 021c 	add.w	r2, r3, #28
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	4610      	mov	r0, r2
 800c6ac:	f7fd fe58 	bl	800a360 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3316      	adds	r3, #22
 800c6b4:	6939      	ldr	r1, [r7, #16]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7fd fe52 	bl	800a360 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	3312      	adds	r3, #18
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fd fe31 	bl	800a32a <st_word>
					fs->wflag = 1;
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe f8ff 	bl	800a8d4 <sync_fs>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	7d1b      	ldrb	r3, [r3, #20]
 800c6de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	7dfa      	ldrb	r2, [r7, #23]
 800c6ec:	4611      	mov	r1, r2
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f7fd fef6 	bl	800a4e0 <unlock_fs>
 800c6f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff ff70 	bl	800c5ec <f_sync>
 800c70c:	4603      	mov	r3, r0
 800c70e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d11d      	bne.n	800c752 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f107 0208 	add.w	r2, r7, #8
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fb22 	bl	800bd68 <validate>
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c728:	7bfb      	ldrb	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d111      	bne.n	800c752 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
 800c732:	4618      	mov	r0, r3
 800c734:	f7fd fffc 	bl	800a730 <dec_lock>
 800c738:	4603      	mov	r3, r0
 800c73a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d102      	bne.n	800c748 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2100      	movs	r1, #0
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fd fec7 	bl	800a4e0 <unlock_fs>
#endif
		}
	}
	return res;
 800c752:	7bfb      	ldrb	r3, [r7, #15]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	460b      	mov	r3, r1
 800c766:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800c768:	78fb      	ldrb	r3, [r7, #3]
 800c76a:	2b0a      	cmp	r3, #10
 800c76c:	d103      	bne.n	800c776 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800c76e:	210d      	movs	r1, #13
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f7ff fff3 	bl	800c75c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	db25      	blt.n	800c7ce <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	1c5a      	adds	r2, r3, #1
 800c786:	60fa      	str	r2, [r7, #12]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	4413      	add	r3, r2
 800c78c:	78fa      	ldrb	r2, [r7, #3]
 800c78e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b3c      	cmp	r3, #60	; 0x3c
 800c794:	dd12      	ble.n	800c7bc <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f103 010c 	add.w	r1, r3, #12
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	f107 0308 	add.w	r3, r7, #8
 800c7a6:	f7ff fd5e 	bl	800c266 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d101      	bne.n	800c7b6 <putc_bfd+0x5a>
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	e001      	b.n	800c7ba <putc_bfd+0x5e>
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	68fa      	ldr	r2, [r7, #12]
 800c7c0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	1c5a      	adds	r2, r3, #1
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	609a      	str	r2, [r3, #8]
 800c7cc:	e000      	b.n	800c7d0 <putc_bfd+0x74>
	if (i < 0) return;
 800c7ce:	bf00      	nop
}
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	db16      	blt.n	800c814 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6818      	ldr	r0, [r3, #0]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f103 010c 	add.w	r1, r3, #12
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	f107 030c 	add.w	r3, r7, #12
 800c7fa:	f7ff fd34 	bl	800c266 <f_write>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d107      	bne.n	800c814 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	4293      	cmp	r3, r2
 800c80c:	d102      	bne.n	800c814 <putc_flush+0x3e>
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	e001      	b.n	800c818 <putc_flush+0x42>
	return EOF;
 800c814:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	605a      	str	r2, [r3, #4]
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	609a      	str	r2, [r3, #8]
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b096      	sub	sp, #88	; 0x58
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800c854:	f107 030c 	add.w	r3, r7, #12
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff ffe0 	bl	800c820 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800c860:	e009      	b.n	800c876 <f_puts+0x2c>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	781a      	ldrb	r2, [r3, #0]
 800c86a:	f107 030c 	add.w	r3, r7, #12
 800c86e:	4611      	mov	r1, r2
 800c870:	4618      	mov	r0, r3
 800c872:	f7ff ff73 	bl	800c75c <putc_bfd>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d1f1      	bne.n	800c862 <f_puts+0x18>
	return putc_flush(&pb);
 800c87e:	f107 030c 	add.w	r3, r7, #12
 800c882:	4618      	mov	r0, r3
 800c884:	f7ff ffa7 	bl	800c7d6 <putc_flush>
 800c888:	4603      	mov	r3, r0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3758      	adds	r7, #88	; 0x58
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
	...

0800c894 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c894:	b480      	push	{r7}
 800c896:	b087      	sub	sp, #28
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c8aa:	4b1f      	ldr	r3, [pc, #124]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8ac:	7a5b      	ldrb	r3, [r3, #9]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d131      	bne.n	800c918 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c8b4:	4b1c      	ldr	r3, [pc, #112]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8b6:	7a5b      	ldrb	r3, [r3, #9]
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4b1a      	ldr	r3, [pc, #104]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8be:	2100      	movs	r1, #0
 800c8c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c8c2:	4b19      	ldr	r3, [pc, #100]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8c4:	7a5b      	ldrb	r3, [r3, #9]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	4a17      	ldr	r2, [pc, #92]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	4413      	add	r3, r2
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c8d2:	4b15      	ldr	r3, [pc, #84]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8d4:	7a5b      	ldrb	r3, [r3, #9]
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	461a      	mov	r2, r3
 800c8da:	4b13      	ldr	r3, [pc, #76]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8dc:	4413      	add	r3, r2
 800c8de:	79fa      	ldrb	r2, [r7, #7]
 800c8e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c8e2:	4b11      	ldr	r3, [pc, #68]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8e4:	7a5b      	ldrb	r3, [r3, #9]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	1c5a      	adds	r2, r3, #1
 800c8ea:	b2d1      	uxtb	r1, r2
 800c8ec:	4a0e      	ldr	r2, [pc, #56]	; (800c928 <FATFS_LinkDriverEx+0x94>)
 800c8ee:	7251      	strb	r1, [r2, #9]
 800c8f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c8f2:	7dbb      	ldrb	r3, [r7, #22]
 800c8f4:	3330      	adds	r3, #48	; 0x30
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	3301      	adds	r3, #1
 800c900:	223a      	movs	r2, #58	; 0x3a
 800c902:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	3302      	adds	r3, #2
 800c908:	222f      	movs	r2, #47	; 0x2f
 800c90a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	3303      	adds	r3, #3
 800c910:	2200      	movs	r2, #0
 800c912:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c918:	7dfb      	ldrb	r3, [r7, #23]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	371c      	adds	r7, #28
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	200036b0 	.word	0x200036b0

0800c92c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c936:	2200      	movs	r2, #0
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f7ff ffaa 	bl	800c894 <FATFS_LinkDriverEx>
 800c940:	4603      	mov	r3, r0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b086      	sub	sp, #24
 800c94e:	af00      	add	r7, sp, #0
 800c950:	4603      	mov	r3, r0
 800c952:	6039      	str	r1, [r7, #0]
 800c954:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800c956:	2300      	movs	r3, #0
 800c958:	60fb      	str	r3, [r7, #12]
 800c95a:	2300      	movs	r3, #0
 800c95c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c95e:	f107 030c 	add.w	r3, r7, #12
 800c962:	2101      	movs	r1, #1
 800c964:	4618      	mov	r0, r3
 800c966:	f000 f84e 	bl	800ca06 <osSemaphoreCreate>
 800c96a:	4602      	mov	r2, r0
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	bf14      	ite	ne
 800c978:	2301      	movne	r3, #1
 800c97a:	2300      	moveq	r3, #0
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	617b      	str	r3, [r7, #20]

    return ret;
 800c980:	697b      	ldr	r3, [r7, #20]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3718      	adds	r7, #24
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b082      	sub	sp, #8
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f8ee 	bl	800cb74 <osSemaphoreDelete>
#endif
    return 1;
 800c998:	2301      	movs	r3, #1
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3708      	adds	r7, #8
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800c9ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 f85a 	bl	800ca6c <osSemaphoreWait>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 f897 	bl	800cb08 <osSemaphoreRelease>
#endif
}
 800c9da:	bf00      	nop
 800c9dc:	3708      	adds	r7, #8
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}

0800c9e2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b083      	sub	sp, #12
 800c9e6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9e8:	f3ef 8305 	mrs	r3, IPSR
 800c9ec:	607b      	str	r3, [r7, #4]
  return(result);
 800c9ee:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	bf14      	ite	ne
 800c9f4:	2301      	movne	r3, #1
 800c9f6:	2300      	moveq	r3, #0
 800c9f8:	b2db      	uxtb	r3, r3
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b086      	sub	sp, #24
 800ca0a:	af02      	add	r7, sp, #8
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00f      	beq.n	800ca38 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d10a      	bne.n	800ca34 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2203      	movs	r2, #3
 800ca24:	9200      	str	r2, [sp, #0]
 800ca26:	2200      	movs	r2, #0
 800ca28:	2100      	movs	r1, #0
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	f000 f9d4 	bl	800cdd8 <xQueueGenericCreateStatic>
 800ca30:	4603      	mov	r3, r0
 800ca32:	e016      	b.n	800ca62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ca34:	2300      	movs	r3, #0
 800ca36:	e014      	b.n	800ca62 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d110      	bne.n	800ca60 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ca3e:	2203      	movs	r2, #3
 800ca40:	2100      	movs	r1, #0
 800ca42:	2001      	movs	r0, #1
 800ca44:	f000 fa4a 	bl	800cedc <xQueueGenericCreate>
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d005      	beq.n	800ca5c <osSemaphoreCreate+0x56>
 800ca50:	2300      	movs	r3, #0
 800ca52:	2200      	movs	r2, #0
 800ca54:	2100      	movs	r1, #0
 800ca56:	68f8      	ldr	r0, [r7, #12]
 800ca58:	f000 faa2 	bl	800cfa0 <xQueueGenericSend>
      return sema;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	e000      	b.n	800ca62 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ca60:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
	...

0800ca6c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ca76:	2300      	movs	r3, #0
 800ca78:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d101      	bne.n	800ca84 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ca80:	2380      	movs	r3, #128	; 0x80
 800ca82:	e03a      	b.n	800cafa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8e:	d103      	bne.n	800ca98 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ca90:	f04f 33ff 	mov.w	r3, #4294967295
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	e009      	b.n	800caac <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d006      	beq.n	800caac <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <osSemaphoreWait+0x40>
      ticks = 1;
 800caa8:	2301      	movs	r3, #1
 800caaa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800caac:	f7ff ff99 	bl	800c9e2 <inHandlerMode>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d017      	beq.n	800cae6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cab6:	f107 0308 	add.w	r3, r7, #8
 800caba:	461a      	mov	r2, r3
 800cabc:	2100      	movs	r1, #0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fd1e 	bl	800d500 <xQueueReceiveFromISR>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d001      	beq.n	800cace <osSemaphoreWait+0x62>
      return osErrorOS;
 800caca:	23ff      	movs	r3, #255	; 0xff
 800cacc:	e015      	b.n	800cafa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d011      	beq.n	800caf8 <osSemaphoreWait+0x8c>
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <osSemaphoreWait+0x98>)
 800cad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	f3bf 8f4f 	dsb	sy
 800cae0:	f3bf 8f6f 	isb	sy
 800cae4:	e008      	b.n	800caf8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800cae6:	68f9      	ldr	r1, [r7, #12]
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 fbf5 	bl	800d2d8 <xQueueSemaphoreTake>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d001      	beq.n	800caf8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800caf4:	23ff      	movs	r3, #255	; 0xff
 800caf6:	e000      	b.n	800cafa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	e000ed04 	.word	0xe000ed04

0800cb08 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800cb14:	2300      	movs	r3, #0
 800cb16:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800cb18:	f7ff ff63 	bl	800c9e2 <inHandlerMode>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d016      	beq.n	800cb50 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fb3f 	bl	800d1ac <xQueueGiveFromISR>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d001      	beq.n	800cb38 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800cb34:	23ff      	movs	r3, #255	; 0xff
 800cb36:	e017      	b.n	800cb68 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d013      	beq.n	800cb66 <osSemaphoreRelease+0x5e>
 800cb3e:	4b0c      	ldr	r3, [pc, #48]	; (800cb70 <osSemaphoreRelease+0x68>)
 800cb40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	f3bf 8f6f 	isb	sy
 800cb4e:	e00a      	b.n	800cb66 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800cb50:	2300      	movs	r3, #0
 800cb52:	2200      	movs	r2, #0
 800cb54:	2100      	movs	r1, #0
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa22 	bl	800cfa0 <xQueueGenericSend>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d001      	beq.n	800cb66 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800cb62:	23ff      	movs	r3, #255	; 0xff
 800cb64:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800cb66:	68fb      	ldr	r3, [r7, #12]
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3710      	adds	r7, #16
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}
 800cb70:	e000ed04 	.word	0xe000ed04

0800cb74 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cb7c:	f7ff ff31 	bl	800c9e2 <inHandlerMode>
 800cb80:	4603      	mov	r3, r0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d001      	beq.n	800cb8a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800cb86:	2382      	movs	r3, #130	; 0x82
 800cb88:	e003      	b.n	800cb92 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fd3e 	bl	800d60c <vQueueDelete>

  return osOK; 
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3708      	adds	r7, #8
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b083      	sub	sp, #12
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f103 0208 	add.w	r2, r3, #8
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f103 0208 	add.w	r2, r3, #8
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f103 0208 	add.w	r2, r3, #8
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cbce:	bf00      	nop
 800cbd0:	370c      	adds	r7, #12
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr

0800cbda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cbda:	b480      	push	{r7}
 800cbdc:	b083      	sub	sp, #12
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cbe8:	bf00      	nop
 800cbea:	370c      	adds	r7, #12
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	689a      	ldr	r2, [r3, #8]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	601a      	str	r2, [r3, #0]
}
 800cc30:	bf00      	nop
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
 800cc44:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc52:	d103      	bne.n	800cc5c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	60fb      	str	r3, [r7, #12]
 800cc5a:	e00c      	b.n	800cc76 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	60fb      	str	r3, [r7, #12]
 800cc62:	e002      	b.n	800cc6a <vListInsert+0x2e>
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	60fb      	str	r3, [r7, #12]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68ba      	ldr	r2, [r7, #8]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d2f6      	bcs.n	800cc64 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685a      	ldr	r2, [r3, #4]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	683a      	ldr	r2, [r7, #0]
 800cc84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	1c5a      	adds	r2, r3, #1
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	601a      	str	r2, [r3, #0]
}
 800cca2:	bf00      	nop
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr

0800ccae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ccae:	b480      	push	{r7}
 800ccb0:	b085      	sub	sp, #20
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	6892      	ldr	r2, [r2, #8]
 800ccc4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	6852      	ldr	r2, [r2, #4]
 800ccce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	687a      	ldr	r2, [r7, #4]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d103      	bne.n	800cce2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	689a      	ldr	r2, [r3, #8]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	1e5a      	subs	r2, r3, #1
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
	...

0800cd04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10c      	bne.n	800cd32 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1c:	b672      	cpsid	i
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	b662      	cpsie	i
 800cd2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cd2e:	bf00      	nop
 800cd30:	e7fe      	b.n	800cd30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800cd32:	f001 ff4b 	bl	800ebcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd42:	fb01 f303 	mul.w	r3, r1, r3
 800cd46:	441a      	add	r2, r3
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd62:	3b01      	subs	r3, #1
 800cd64:	68f9      	ldr	r1, [r7, #12]
 800cd66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cd68:	fb01 f303 	mul.w	r3, r1, r3
 800cd6c:	441a      	add	r2, r3
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	22ff      	movs	r2, #255	; 0xff
 800cd76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	22ff      	movs	r2, #255	; 0xff
 800cd7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d114      	bne.n	800cdb2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	691b      	ldr	r3, [r3, #16]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01a      	beq.n	800cdc6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	3310      	adds	r3, #16
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 fa07 	bl	800e1a8 <xTaskRemoveFromEventList>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d012      	beq.n	800cdc6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cda0:	4b0c      	ldr	r3, [pc, #48]	; (800cdd4 <xQueueGenericReset+0xd0>)
 800cda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	e009      	b.n	800cdc6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	3310      	adds	r3, #16
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff feef 	bl	800cb9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3324      	adds	r3, #36	; 0x24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff feea 	bl	800cb9a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cdc6:	f001 ff35 	bl	800ec34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cdca:	2301      	movs	r3, #1
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	e000ed04 	.word	0xe000ed04

0800cdd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08e      	sub	sp, #56	; 0x38
 800cddc:	af02      	add	r7, sp, #8
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10c      	bne.n	800ce06 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf0:	b672      	cpsid	i
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	b662      	cpsie	i
 800ce00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ce02:	bf00      	nop
 800ce04:	e7fe      	b.n	800ce04 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10c      	bne.n	800ce26 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ce0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce10:	b672      	cpsid	i
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	b662      	cpsie	i
 800ce20:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce22:	bf00      	nop
 800ce24:	e7fe      	b.n	800ce24 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <xQueueGenericCreateStatic+0x5a>
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <xQueueGenericCreateStatic+0x5e>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <xQueueGenericCreateStatic+0x60>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10c      	bne.n	800ce56 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	b672      	cpsid	i
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	b662      	cpsie	i
 800ce50:	623b      	str	r3, [r7, #32]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d102      	bne.n	800ce62 <xQueueGenericCreateStatic+0x8a>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <xQueueGenericCreateStatic+0x8e>
 800ce62:	2301      	movs	r3, #1
 800ce64:	e000      	b.n	800ce68 <xQueueGenericCreateStatic+0x90>
 800ce66:	2300      	movs	r3, #0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10c      	bne.n	800ce86 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	b672      	cpsid	i
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	b662      	cpsie	i
 800ce80:	61fb      	str	r3, [r7, #28]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce86:	2348      	movs	r3, #72	; 0x48
 800ce88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b48      	cmp	r3, #72	; 0x48
 800ce8e:	d00c      	beq.n	800ceaa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ce90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce94:	b672      	cpsid	i
 800ce96:	f383 8811 	msr	BASEPRI, r3
 800ce9a:	f3bf 8f6f 	isb	sy
 800ce9e:	f3bf 8f4f 	dsb	sy
 800cea2:	b662      	cpsie	i
 800cea4:	61bb      	str	r3, [r7, #24]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ceaa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00d      	beq.n	800ced2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	2201      	movs	r2, #1
 800ceba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cebe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	4613      	mov	r3, r2
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	68b9      	ldr	r1, [r7, #8]
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	f000 f847 	bl	800cf60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ced2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3730      	adds	r7, #48	; 0x30
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b08a      	sub	sp, #40	; 0x28
 800cee0:	af02      	add	r7, sp, #8
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10c      	bne.n	800cf0a <xQueueGenericCreate+0x2e>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	b672      	cpsid	i
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	b662      	cpsie	i
 800cf04:	613b      	str	r3, [r7, #16]
}
 800cf06:	bf00      	nop
 800cf08:	e7fe      	b.n	800cf08 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d102      	bne.n	800cf16 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e004      	b.n	800cf20 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	3348      	adds	r3, #72	; 0x48
 800cf24:	4618      	mov	r0, r3
 800cf26:	f001 ff7d 	bl	800ee24 <pvPortMalloc>
 800cf2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d011      	beq.n	800cf56 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	3348      	adds	r3, #72	; 0x48
 800cf3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf44:	79fa      	ldrb	r2, [r7, #7]
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	68b9      	ldr	r1, [r7, #8]
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f805 	bl	800cf60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cf56:	69bb      	ldr	r3, [r7, #24]
	}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3720      	adds	r7, #32
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	607a      	str	r2, [r7, #4]
 800cf6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d103      	bne.n	800cf7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf74:	69bb      	ldr	r3, [r7, #24]
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	601a      	str	r2, [r3, #0]
 800cf7a:	e002      	b.n	800cf82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf8e:	2101      	movs	r1, #1
 800cf90:	69b8      	ldr	r0, [r7, #24]
 800cf92:	f7ff feb7 	bl	800cd04 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf96:	bf00      	nop
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b08e      	sub	sp, #56	; 0x38
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60f8      	str	r0, [r7, #12]
 800cfa8:	60b9      	str	r1, [r7, #8]
 800cfaa:	607a      	str	r2, [r7, #4]
 800cfac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10c      	bne.n	800cfd6 <xQueueGenericSend+0x36>
	__asm volatile
 800cfbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc0:	b672      	cpsid	i
 800cfc2:	f383 8811 	msr	BASEPRI, r3
 800cfc6:	f3bf 8f6f 	isb	sy
 800cfca:	f3bf 8f4f 	dsb	sy
 800cfce:	b662      	cpsie	i
 800cfd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d103      	bne.n	800cfe4 <xQueueGenericSend+0x44>
 800cfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <xQueueGenericSend+0x48>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e000      	b.n	800cfea <xQueueGenericSend+0x4a>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d10c      	bne.n	800d008 <xQueueGenericSend+0x68>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	b672      	cpsid	i
 800cff4:	f383 8811 	msr	BASEPRI, r3
 800cff8:	f3bf 8f6f 	isb	sy
 800cffc:	f3bf 8f4f 	dsb	sy
 800d000:	b662      	cpsie	i
 800d002:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d004:	bf00      	nop
 800d006:	e7fe      	b.n	800d006 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d103      	bne.n	800d016 <xQueueGenericSend+0x76>
 800d00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d012:	2b01      	cmp	r3, #1
 800d014:	d101      	bne.n	800d01a <xQueueGenericSend+0x7a>
 800d016:	2301      	movs	r3, #1
 800d018:	e000      	b.n	800d01c <xQueueGenericSend+0x7c>
 800d01a:	2300      	movs	r3, #0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10c      	bne.n	800d03a <xQueueGenericSend+0x9a>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	b672      	cpsid	i
 800d026:	f383 8811 	msr	BASEPRI, r3
 800d02a:	f3bf 8f6f 	isb	sy
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	b662      	cpsie	i
 800d034:	623b      	str	r3, [r7, #32]
}
 800d036:	bf00      	nop
 800d038:	e7fe      	b.n	800d038 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d03a:	f001 fa7d 	bl	800e538 <xTaskGetSchedulerState>
 800d03e:	4603      	mov	r3, r0
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <xQueueGenericSend+0xaa>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d101      	bne.n	800d04e <xQueueGenericSend+0xae>
 800d04a:	2301      	movs	r3, #1
 800d04c:	e000      	b.n	800d050 <xQueueGenericSend+0xb0>
 800d04e:	2300      	movs	r3, #0
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10c      	bne.n	800d06e <xQueueGenericSend+0xce>
	__asm volatile
 800d054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d058:	b672      	cpsid	i
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	b662      	cpsie	i
 800d068:	61fb      	str	r3, [r7, #28]
}
 800d06a:	bf00      	nop
 800d06c:	e7fe      	b.n	800d06c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d06e:	f001 fdad 	bl	800ebcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d302      	bcc.n	800d084 <xQueueGenericSend+0xe4>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b02      	cmp	r3, #2
 800d082:	d129      	bne.n	800d0d8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	68b9      	ldr	r1, [r7, #8]
 800d088:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d08a:	f000 fafc 	bl	800d686 <prvCopyDataToQueue>
 800d08e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	2b00      	cmp	r3, #0
 800d096:	d010      	beq.n	800d0ba <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09a:	3324      	adds	r3, #36	; 0x24
 800d09c:	4618      	mov	r0, r3
 800d09e:	f001 f883 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d013      	beq.n	800d0d0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d0a8:	4b3f      	ldr	r3, [pc, #252]	; (800d1a8 <xQueueGenericSend+0x208>)
 800d0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	f3bf 8f4f 	dsb	sy
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	e00a      	b.n	800d0d0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d007      	beq.n	800d0d0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d0c0:	4b39      	ldr	r3, [pc, #228]	; (800d1a8 <xQueueGenericSend+0x208>)
 800d0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c6:	601a      	str	r2, [r3, #0]
 800d0c8:	f3bf 8f4f 	dsb	sy
 800d0cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d0d0:	f001 fdb0 	bl	800ec34 <vPortExitCritical>
				return pdPASS;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e063      	b.n	800d1a0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d103      	bne.n	800d0e6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0de:	f001 fda9 	bl	800ec34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e05c      	b.n	800d1a0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d106      	bne.n	800d0fa <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ec:	f107 0314 	add.w	r3, r7, #20
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f001 f8bd 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0fa:	f001 fd9b 	bl	800ec34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0fe:	f000 fe53 	bl	800dda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d102:	f001 fd63 	bl	800ebcc <vPortEnterCritical>
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d10c:	b25b      	sxtb	r3, r3
 800d10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d112:	d103      	bne.n	800d11c <xQueueGenericSend+0x17c>
 800d114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d122:	b25b      	sxtb	r3, r3
 800d124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d128:	d103      	bne.n	800d132 <xQueueGenericSend+0x192>
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d132:	f001 fd7f 	bl	800ec34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d136:	1d3a      	adds	r2, r7, #4
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4611      	mov	r1, r2
 800d13e:	4618      	mov	r0, r3
 800d140:	f001 f8ac 	bl	800e29c <xTaskCheckForTimeOut>
 800d144:	4603      	mov	r3, r0
 800d146:	2b00      	cmp	r3, #0
 800d148:	d124      	bne.n	800d194 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d14a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d14c:	f000 fb93 	bl	800d876 <prvIsQueueFull>
 800d150:	4603      	mov	r3, r0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d018      	beq.n	800d188 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	3310      	adds	r3, #16
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fffc 	bl	800e15c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d166:	f000 fb1e 	bl	800d7a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d16a:	f000 fe2b 	bl	800ddc4 <xTaskResumeAll>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	f47f af7c 	bne.w	800d06e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d176:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <xQueueGenericSend+0x208>)
 800d178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d17c:	601a      	str	r2, [r3, #0]
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	e772      	b.n	800d06e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d18a:	f000 fb0c 	bl	800d7a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d18e:	f000 fe19 	bl	800ddc4 <xTaskResumeAll>
 800d192:	e76c      	b.n	800d06e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d196:	f000 fb06 	bl	800d7a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d19a:	f000 fe13 	bl	800ddc4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d19e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3738      	adds	r7, #56	; 0x38
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	e000ed04 	.word	0xe000ed04

0800d1ac <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b08e      	sub	sp, #56	; 0x38
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10c      	bne.n	800d1da <xQueueGiveFromISR+0x2e>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	b672      	cpsid	i
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	b662      	cpsie	i
 800d1d4:	623b      	str	r3, [r7, #32]
}
 800d1d6:	bf00      	nop
 800d1d8:	e7fe      	b.n	800d1d8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00c      	beq.n	800d1fc <xQueueGiveFromISR+0x50>
	__asm volatile
 800d1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1e6:	b672      	cpsid	i
 800d1e8:	f383 8811 	msr	BASEPRI, r3
 800d1ec:	f3bf 8f6f 	isb	sy
 800d1f0:	f3bf 8f4f 	dsb	sy
 800d1f4:	b662      	cpsie	i
 800d1f6:	61fb      	str	r3, [r7, #28]
}
 800d1f8:	bf00      	nop
 800d1fa:	e7fe      	b.n	800d1fa <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d103      	bne.n	800d20c <xQueueGiveFromISR+0x60>
 800d204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <xQueueGiveFromISR+0x64>
 800d20c:	2301      	movs	r3, #1
 800d20e:	e000      	b.n	800d212 <xQueueGiveFromISR+0x66>
 800d210:	2300      	movs	r3, #0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10c      	bne.n	800d230 <xQueueGiveFromISR+0x84>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21a:	b672      	cpsid	i
 800d21c:	f383 8811 	msr	BASEPRI, r3
 800d220:	f3bf 8f6f 	isb	sy
 800d224:	f3bf 8f4f 	dsb	sy
 800d228:	b662      	cpsie	i
 800d22a:	61bb      	str	r3, [r7, #24]
}
 800d22c:	bf00      	nop
 800d22e:	e7fe      	b.n	800d22e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d230:	f001 fdb4 	bl	800ed9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d234:	f3ef 8211 	mrs	r2, BASEPRI
 800d238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23c:	b672      	cpsid	i
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	b662      	cpsie	i
 800d24c:	617a      	str	r2, [r7, #20]
 800d24e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d250:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d252:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d258:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d260:	429a      	cmp	r2, r3
 800d262:	d22b      	bcs.n	800d2bc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d270:	1c5a      	adds	r2, r3, #1
 800d272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d274:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d27e:	d112      	bne.n	800d2a6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d284:	2b00      	cmp	r3, #0
 800d286:	d016      	beq.n	800d2b6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28a:	3324      	adds	r3, #36	; 0x24
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 ff8b 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d00e      	beq.n	800d2b6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00b      	beq.n	800d2b6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	e007      	b.n	800d2b6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	b25a      	sxtb	r2, r3
 800d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	637b      	str	r3, [r7, #52]	; 0x34
 800d2ba:	e001      	b.n	800d2c0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	637b      	str	r3, [r7, #52]	; 0x34
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d2ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3738      	adds	r7, #56	; 0x38
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
	...

0800d2d8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b08e      	sub	sp, #56	; 0x38
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10c      	bne.n	800d30e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	b672      	cpsid	i
 800d2fa:	f383 8811 	msr	BASEPRI, r3
 800d2fe:	f3bf 8f6f 	isb	sy
 800d302:	f3bf 8f4f 	dsb	sy
 800d306:	b662      	cpsie	i
 800d308:	623b      	str	r3, [r7, #32]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d312:	2b00      	cmp	r3, #0
 800d314:	d00c      	beq.n	800d330 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d31a:	b672      	cpsid	i
 800d31c:	f383 8811 	msr	BASEPRI, r3
 800d320:	f3bf 8f6f 	isb	sy
 800d324:	f3bf 8f4f 	dsb	sy
 800d328:	b662      	cpsie	i
 800d32a:	61fb      	str	r3, [r7, #28]
}
 800d32c:	bf00      	nop
 800d32e:	e7fe      	b.n	800d32e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d330:	f001 f902 	bl	800e538 <xTaskGetSchedulerState>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <xQueueSemaphoreTake+0x68>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <xQueueSemaphoreTake+0x6c>
 800d340:	2301      	movs	r3, #1
 800d342:	e000      	b.n	800d346 <xQueueSemaphoreTake+0x6e>
 800d344:	2300      	movs	r3, #0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10c      	bne.n	800d364 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34e:	b672      	cpsid	i
 800d350:	f383 8811 	msr	BASEPRI, r3
 800d354:	f3bf 8f6f 	isb	sy
 800d358:	f3bf 8f4f 	dsb	sy
 800d35c:	b662      	cpsie	i
 800d35e:	61bb      	str	r3, [r7, #24]
}
 800d360:	bf00      	nop
 800d362:	e7fe      	b.n	800d362 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d364:	f001 fc32 	bl	800ebcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d370:	2b00      	cmp	r3, #0
 800d372:	d024      	beq.n	800d3be <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	1e5a      	subs	r2, r3, #1
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d104      	bne.n	800d38e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d384:	f001 fa9e 	bl	800e8c4 <pvTaskIncrementMutexHeldCount>
 800d388:	4602      	mov	r2, r0
 800d38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d38c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00f      	beq.n	800d3b6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d398:	3310      	adds	r3, #16
 800d39a:	4618      	mov	r0, r3
 800d39c:	f000 ff04 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d007      	beq.n	800d3b6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d3a6:	4b55      	ldr	r3, [pc, #340]	; (800d4fc <xQueueSemaphoreTake+0x224>)
 800d3a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3ac:	601a      	str	r2, [r3, #0]
 800d3ae:	f3bf 8f4f 	dsb	sy
 800d3b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d3b6:	f001 fc3d 	bl	800ec34 <vPortExitCritical>
				return pdPASS;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e099      	b.n	800d4f2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d113      	bne.n	800d3ec <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00c      	beq.n	800d3e4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ce:	b672      	cpsid	i
 800d3d0:	f383 8811 	msr	BASEPRI, r3
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	f3bf 8f4f 	dsb	sy
 800d3dc:	b662      	cpsie	i
 800d3de:	617b      	str	r3, [r7, #20]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d3e4:	f001 fc26 	bl	800ec34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	e082      	b.n	800d4f2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d3ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3f2:	f107 030c 	add.w	r3, r7, #12
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 ff3a 	bl	800e270 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d400:	f001 fc18 	bl	800ec34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d404:	f000 fcd0 	bl	800dda8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d408:	f001 fbe0 	bl	800ebcc <vPortEnterCritical>
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d412:	b25b      	sxtb	r3, r3
 800d414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d418:	d103      	bne.n	800d422 <xQueueSemaphoreTake+0x14a>
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d42e:	d103      	bne.n	800d438 <xQueueSemaphoreTake+0x160>
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	2200      	movs	r2, #0
 800d434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d438:	f001 fbfc 	bl	800ec34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d43c:	463a      	mov	r2, r7
 800d43e:	f107 030c 	add.w	r3, r7, #12
 800d442:	4611      	mov	r1, r2
 800d444:	4618      	mov	r0, r3
 800d446:	f000 ff29 	bl	800e29c <xTaskCheckForTimeOut>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d132      	bne.n	800d4b6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d452:	f000 f9fa 	bl	800d84a <prvIsQueueEmpty>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d026      	beq.n	800d4aa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d109      	bne.n	800d478 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d464:	f001 fbb2 	bl	800ebcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f001 f881 	bl	800e574 <xTaskPriorityInherit>
 800d472:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d474:	f001 fbde 	bl	800ec34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d47a:	3324      	adds	r3, #36	; 0x24
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	4611      	mov	r1, r2
 800d480:	4618      	mov	r0, r3
 800d482:	f000 fe6b 	bl	800e15c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d488:	f000 f98d 	bl	800d7a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d48c:	f000 fc9a 	bl	800ddc4 <xTaskResumeAll>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	f47f af66 	bne.w	800d364 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d498:	4b18      	ldr	r3, [pc, #96]	; (800d4fc <xQueueSemaphoreTake+0x224>)
 800d49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	e75c      	b.n	800d364 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d4aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ac:	f000 f97b 	bl	800d7a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d4b0:	f000 fc88 	bl	800ddc4 <xTaskResumeAll>
 800d4b4:	e756      	b.n	800d364 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4b8:	f000 f975 	bl	800d7a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d4bc:	f000 fc82 	bl	800ddc4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d4c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4c2:	f000 f9c2 	bl	800d84a <prvIsQueueEmpty>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	f43f af4b 	beq.w	800d364 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00d      	beq.n	800d4f0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d4d4:	f001 fb7a 	bl	800ebcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d4d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4da:	f000 f8bc 	bl	800d656 <prvGetDisinheritPriorityAfterTimeout>
 800d4de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	f001 f94e 	bl	800e788 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d4ec:	f001 fba2 	bl	800ec34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d4f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3738      	adds	r7, #56	; 0x38
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	e000ed04 	.word	0xe000ed04

0800d500 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b08e      	sub	sp, #56	; 0x38
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10c      	bne.n	800d530 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	b672      	cpsid	i
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	b662      	cpsie	i
 800d52a:	623b      	str	r3, [r7, #32]
}
 800d52c:	bf00      	nop
 800d52e:	e7fe      	b.n	800d52e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d103      	bne.n	800d53e <xQueueReceiveFromISR+0x3e>
 800d536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <xQueueReceiveFromISR+0x42>
 800d53e:	2301      	movs	r3, #1
 800d540:	e000      	b.n	800d544 <xQueueReceiveFromISR+0x44>
 800d542:	2300      	movs	r3, #0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d10c      	bne.n	800d562 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800d548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54c:	b672      	cpsid	i
 800d54e:	f383 8811 	msr	BASEPRI, r3
 800d552:	f3bf 8f6f 	isb	sy
 800d556:	f3bf 8f4f 	dsb	sy
 800d55a:	b662      	cpsie	i
 800d55c:	61fb      	str	r3, [r7, #28]
}
 800d55e:	bf00      	nop
 800d560:	e7fe      	b.n	800d560 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d562:	f001 fc1b 	bl	800ed9c <vPortValidateInterruptPriority>
	__asm volatile
 800d566:	f3ef 8211 	mrs	r2, BASEPRI
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	b672      	cpsid	i
 800d570:	f383 8811 	msr	BASEPRI, r3
 800d574:	f3bf 8f6f 	isb	sy
 800d578:	f3bf 8f4f 	dsb	sy
 800d57c:	b662      	cpsie	i
 800d57e:	61ba      	str	r2, [r7, #24]
 800d580:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d582:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d584:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d58a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d02f      	beq.n	800d5f2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d5a0:	f000 f8db 	bl	800d75a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a6:	1e5a      	subs	r2, r3, #1
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d5ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d5b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b4:	d112      	bne.n	800d5dc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d016      	beq.n	800d5ec <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	3310      	adds	r3, #16
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 fdf0 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00e      	beq.n	800d5ec <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00b      	beq.n	800d5ec <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	601a      	str	r2, [r3, #0]
 800d5da:	e007      	b.n	800d5ec <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d5dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	b25a      	sxtb	r2, r3
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f0:	e001      	b.n	800d5f6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	f383 8811 	msr	BASEPRI, r3
}
 800d600:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d604:	4618      	mov	r0, r3
 800d606:	3738      	adds	r7, #56	; 0x38
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10c      	bne.n	800d638 <vQueueDelete+0x2c>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	b672      	cpsid	i
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	b662      	cpsie	i
 800d632:	60bb      	str	r3, [r7, #8]
}
 800d634:	bf00      	nop
 800d636:	e7fe      	b.n	800d636 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 f935 	bl	800d8a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d644:	2b00      	cmp	r3, #0
 800d646:	d102      	bne.n	800d64e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800d648:	68f8      	ldr	r0, [r7, #12]
 800d64a:	f001 fcb5 	bl	800efb8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}

0800d656 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d656:	b480      	push	{r7}
 800d658:	b085      	sub	sp, #20
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d662:	2b00      	cmp	r3, #0
 800d664:	d006      	beq.n	800d674 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	f1c3 0307 	rsb	r3, r3, #7
 800d670:	60fb      	str	r3, [r7, #12]
 800d672:	e001      	b.n	800d678 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d678:	68fb      	ldr	r3, [r7, #12]
	}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3714      	adds	r7, #20
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b086      	sub	sp, #24
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	60f8      	str	r0, [r7, #12]
 800d68e:	60b9      	str	r1, [r7, #8]
 800d690:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10d      	bne.n	800d6c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d14d      	bne.n	800d748 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	689b      	ldr	r3, [r3, #8]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 ffdf 	bl	800e674 <xTaskPriorityDisinherit>
 800d6b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	609a      	str	r2, [r3, #8]
 800d6be:	e043      	b.n	800d748 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d119      	bne.n	800d6fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6858      	ldr	r0, [r3, #4]
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ce:	461a      	mov	r2, r3
 800d6d0:	68b9      	ldr	r1, [r7, #8]
 800d6d2:	f001 ffc3 	bl	800f65c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6de:	441a      	add	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	685a      	ldr	r2, [r3, #4]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d32b      	bcc.n	800d748 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	605a      	str	r2, [r3, #4]
 800d6f8:	e026      	b.n	800d748 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	68d8      	ldr	r0, [r3, #12]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d702:	461a      	mov	r2, r3
 800d704:	68b9      	ldr	r1, [r7, #8]
 800d706:	f001 ffa9 	bl	800f65c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d712:	425b      	negs	r3, r3
 800d714:	441a      	add	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d207      	bcs.n	800d736 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	689a      	ldr	r2, [r3, #8]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72e:	425b      	negs	r3, r3
 800d730:	441a      	add	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b02      	cmp	r3, #2
 800d73a:	d105      	bne.n	800d748 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	3b01      	subs	r3, #1
 800d746:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d750:	697b      	ldr	r3, [r7, #20]
}
 800d752:	4618      	mov	r0, r3
 800d754:	3718      	adds	r7, #24
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b082      	sub	sp, #8
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d018      	beq.n	800d79e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	68da      	ldr	r2, [r3, #12]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d774:	441a      	add	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	68da      	ldr	r2, [r3, #12]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	689b      	ldr	r3, [r3, #8]
 800d782:	429a      	cmp	r2, r3
 800d784:	d303      	bcc.n	800d78e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	68d9      	ldr	r1, [r3, #12]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d796:	461a      	mov	r2, r3
 800d798:	6838      	ldr	r0, [r7, #0]
 800d79a:	f001 ff5f 	bl	800f65c <memcpy>
	}
}
 800d79e:	bf00      	nop
 800d7a0:	3708      	adds	r7, #8
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d7ae:	f001 fa0d 	bl	800ebcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7ba:	e011      	b.n	800d7e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d012      	beq.n	800d7ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3324      	adds	r3, #36	; 0x24
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 fced 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d001      	beq.n	800d7d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d7d4:	f000 fdc8 	bl	800e368 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d7e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	dce9      	bgt.n	800d7bc <prvUnlockQueue+0x16>
 800d7e8:	e000      	b.n	800d7ec <prvUnlockQueue+0x46>
					break;
 800d7ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	22ff      	movs	r2, #255	; 0xff
 800d7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d7f4:	f001 fa1e 	bl	800ec34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d7f8:	f001 f9e8 	bl	800ebcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d802:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d804:	e011      	b.n	800d82a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d012      	beq.n	800d834 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3310      	adds	r3, #16
 800d812:	4618      	mov	r0, r3
 800d814:	f000 fcc8 	bl	800e1a8 <xTaskRemoveFromEventList>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d81e:	f000 fda3 	bl	800e368 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	3b01      	subs	r3, #1
 800d826:	b2db      	uxtb	r3, r3
 800d828:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d82a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	dce9      	bgt.n	800d806 <prvUnlockQueue+0x60>
 800d832:	e000      	b.n	800d836 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d834:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	22ff      	movs	r2, #255	; 0xff
 800d83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d83e:	f001 f9f9 	bl	800ec34 <vPortExitCritical>
}
 800d842:	bf00      	nop
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d852:	f001 f9bb 	bl	800ebcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d102      	bne.n	800d864 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d85e:	2301      	movs	r3, #1
 800d860:	60fb      	str	r3, [r7, #12]
 800d862:	e001      	b.n	800d868 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d864:	2300      	movs	r3, #0
 800d866:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d868:	f001 f9e4 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800d86c:	68fb      	ldr	r3, [r7, #12]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3710      	adds	r7, #16
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b084      	sub	sp, #16
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d87e:	f001 f9a5 	bl	800ebcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d102      	bne.n	800d894 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d88e:	2301      	movs	r3, #1
 800d890:	60fb      	str	r3, [r7, #12]
 800d892:	e001      	b.n	800d898 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d894:	2300      	movs	r3, #0
 800d896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d898:	f001 f9cc 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800d89c:	68fb      	ldr	r3, [r7, #12]
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b085      	sub	sp, #20
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	60fb      	str	r3, [r7, #12]
 800d8b4:	e016      	b.n	800d8e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d8b6:	4a10      	ldr	r2, [pc, #64]	; (800d8f8 <vQueueUnregisterQueue+0x50>)
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	4413      	add	r3, r2
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d10b      	bne.n	800d8de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d8c6:	4a0c      	ldr	r2, [pc, #48]	; (800d8f8 <vQueueUnregisterQueue+0x50>)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d8d0:	4a09      	ldr	r2, [pc, #36]	; (800d8f8 <vQueueUnregisterQueue+0x50>)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	00db      	lsls	r3, r3, #3
 800d8d6:	4413      	add	r3, r2
 800d8d8:	2200      	movs	r2, #0
 800d8da:	605a      	str	r2, [r3, #4]
				break;
 800d8dc:	e006      	b.n	800d8ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b07      	cmp	r3, #7
 800d8e8:	d9e5      	bls.n	800d8b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d8ea:	bf00      	nop
 800d8ec:	bf00      	nop
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr
 800d8f8:	200036bc 	.word	0x200036bc

0800d8fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b08e      	sub	sp, #56	; 0x38
 800d900:	af04      	add	r7, sp, #16
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
 800d908:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10c      	bne.n	800d92a <xTaskCreateStatic+0x2e>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	b672      	cpsid	i
 800d916:	f383 8811 	msr	BASEPRI, r3
 800d91a:	f3bf 8f6f 	isb	sy
 800d91e:	f3bf 8f4f 	dsb	sy
 800d922:	b662      	cpsie	i
 800d924:	623b      	str	r3, [r7, #32]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10c      	bne.n	800d94a <xTaskCreateStatic+0x4e>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	b672      	cpsid	i
 800d936:	f383 8811 	msr	BASEPRI, r3
 800d93a:	f3bf 8f6f 	isb	sy
 800d93e:	f3bf 8f4f 	dsb	sy
 800d942:	b662      	cpsie	i
 800d944:	61fb      	str	r3, [r7, #28]
}
 800d946:	bf00      	nop
 800d948:	e7fe      	b.n	800d948 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d94a:	23a0      	movs	r3, #160	; 0xa0
 800d94c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	2ba0      	cmp	r3, #160	; 0xa0
 800d952:	d00c      	beq.n	800d96e <xTaskCreateStatic+0x72>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d958:	b672      	cpsid	i
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	b662      	cpsie	i
 800d968:	61bb      	str	r3, [r7, #24]
}
 800d96a:	bf00      	nop
 800d96c:	e7fe      	b.n	800d96c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d96e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d972:	2b00      	cmp	r3, #0
 800d974:	d01e      	beq.n	800d9b4 <xTaskCreateStatic+0xb8>
 800d976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d01b      	beq.n	800d9b4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d97e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d984:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d988:	2202      	movs	r2, #2
 800d98a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d98e:	2300      	movs	r3, #0
 800d990:	9303      	str	r3, [sp, #12]
 800d992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	f107 0314 	add.w	r3, r7, #20
 800d99a:	9301      	str	r3, [sp, #4]
 800d99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d99e:	9300      	str	r3, [sp, #0]
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	68b9      	ldr	r1, [r7, #8]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	f000 f850 	bl	800da4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ae:	f000 f8ed 	bl	800db8c <prvAddNewTaskToReadyList>
 800d9b2:	e001      	b.n	800d9b8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d9b8:	697b      	ldr	r3, [r7, #20]
	}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3728      	adds	r7, #40	; 0x28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}

0800d9c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d9c2:	b580      	push	{r7, lr}
 800d9c4:	b08c      	sub	sp, #48	; 0x30
 800d9c6:	af04      	add	r7, sp, #16
 800d9c8:	60f8      	str	r0, [r7, #12]
 800d9ca:	60b9      	str	r1, [r7, #8]
 800d9cc:	603b      	str	r3, [r7, #0]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d9d2:	88fb      	ldrh	r3, [r7, #6]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f001 fa24 	bl	800ee24 <pvPortMalloc>
 800d9dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00e      	beq.n	800da02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d9e4:	20a0      	movs	r0, #160	; 0xa0
 800d9e6:	f001 fa1d 	bl	800ee24 <pvPortMalloc>
 800d9ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d003      	beq.n	800d9fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	631a      	str	r2, [r3, #48]	; 0x30
 800d9f8:	e005      	b.n	800da06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d9fa:	6978      	ldr	r0, [r7, #20]
 800d9fc:	f001 fadc 	bl	800efb8 <vPortFree>
 800da00:	e001      	b.n	800da06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800da02:	2300      	movs	r3, #0
 800da04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d017      	beq.n	800da3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	2200      	movs	r2, #0
 800da10:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800da14:	88fa      	ldrh	r2, [r7, #6]
 800da16:	2300      	movs	r3, #0
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	9302      	str	r3, [sp, #8]
 800da1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da20:	9301      	str	r3, [sp, #4]
 800da22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	68b9      	ldr	r1, [r7, #8]
 800da2a:	68f8      	ldr	r0, [r7, #12]
 800da2c:	f000 f80e 	bl	800da4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da30:	69f8      	ldr	r0, [r7, #28]
 800da32:	f000 f8ab 	bl	800db8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800da36:	2301      	movs	r3, #1
 800da38:	61bb      	str	r3, [r7, #24]
 800da3a:	e002      	b.n	800da42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800da3c:	f04f 33ff 	mov.w	r3, #4294967295
 800da40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800da42:	69bb      	ldr	r3, [r7, #24]
	}
 800da44:	4618      	mov	r0, r3
 800da46:	3720      	adds	r7, #32
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b088      	sub	sp, #32
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
 800da58:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da5e:	6879      	ldr	r1, [r7, #4]
 800da60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800da64:	440b      	add	r3, r1
 800da66:	009b      	lsls	r3, r3, #2
 800da68:	4413      	add	r3, r2
 800da6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da6c:	69bb      	ldr	r3, [r7, #24]
 800da6e:	f023 0307 	bic.w	r3, r3, #7
 800da72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	f003 0307 	and.w	r3, r3, #7
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d00c      	beq.n	800da98 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800da7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da82:	b672      	cpsid	i
 800da84:	f383 8811 	msr	BASEPRI, r3
 800da88:	f3bf 8f6f 	isb	sy
 800da8c:	f3bf 8f4f 	dsb	sy
 800da90:	b662      	cpsie	i
 800da92:	617b      	str	r3, [r7, #20]
}
 800da94:	bf00      	nop
 800da96:	e7fe      	b.n	800da96 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d01f      	beq.n	800dade <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da9e:	2300      	movs	r3, #0
 800daa0:	61fb      	str	r3, [r7, #28]
 800daa2:	e012      	b.n	800daca <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	4413      	add	r3, r2
 800daaa:	7819      	ldrb	r1, [r3, #0]
 800daac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	4413      	add	r3, r2
 800dab2:	3334      	adds	r3, #52	; 0x34
 800dab4:	460a      	mov	r2, r1
 800dab6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dab8:	68ba      	ldr	r2, [r7, #8]
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	4413      	add	r3, r2
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d006      	beq.n	800dad2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dac4:	69fb      	ldr	r3, [r7, #28]
 800dac6:	3301      	adds	r3, #1
 800dac8:	61fb      	str	r3, [r7, #28]
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	2b0f      	cmp	r3, #15
 800dace:	d9e9      	bls.n	800daa4 <prvInitialiseNewTask+0x58>
 800dad0:	e000      	b.n	800dad4 <prvInitialiseNewTask+0x88>
			{
				break;
 800dad2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dadc:	e003      	b.n	800dae6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	2b06      	cmp	r3, #6
 800daea:	d901      	bls.n	800daf0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800daec:	2306      	movs	r3, #6
 800daee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800daf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800daf4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dafa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dafe:	2200      	movs	r2, #0
 800db00:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800db02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db04:	3304      	adds	r3, #4
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff f867 	bl	800cbda <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800db0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0e:	3318      	adds	r3, #24
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff f862 	bl	800cbda <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800db16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db1a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	f1c3 0207 	rsb	r2, r3, #7
 800db22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db24:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db2a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	2200      	movs	r2, #0
 800db30:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800db34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db36:	2200      	movs	r2, #0
 800db38:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800db3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3e:	334c      	adds	r3, #76	; 0x4c
 800db40:	224c      	movs	r2, #76	; 0x4c
 800db42:	2100      	movs	r1, #0
 800db44:	4618      	mov	r0, r3
 800db46:	f001 fca6 	bl	800f496 <memset>
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	4a0c      	ldr	r2, [pc, #48]	; (800db80 <prvInitialiseNewTask+0x134>)
 800db4e:	651a      	str	r2, [r3, #80]	; 0x50
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	4a0c      	ldr	r2, [pc, #48]	; (800db84 <prvInitialiseNewTask+0x138>)
 800db54:	655a      	str	r2, [r3, #84]	; 0x54
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	4a0b      	ldr	r2, [pc, #44]	; (800db88 <prvInitialiseNewTask+0x13c>)
 800db5a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	68f9      	ldr	r1, [r7, #12]
 800db60:	69b8      	ldr	r0, [r7, #24]
 800db62:	f000 ff29 	bl	800e9b8 <pxPortInitialiseStack>
 800db66:	4602      	mov	r2, r0
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d002      	beq.n	800db78 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db78:	bf00      	nop
 800db7a:	3720      	adds	r7, #32
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	20007448 	.word	0x20007448
 800db84:	200074b0 	.word	0x200074b0
 800db88:	20007518 	.word	0x20007518

0800db8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db94:	f001 f81a 	bl	800ebcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db98:	4b2a      	ldr	r3, [pc, #168]	; (800dc44 <prvAddNewTaskToReadyList+0xb8>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	3301      	adds	r3, #1
 800db9e:	4a29      	ldr	r2, [pc, #164]	; (800dc44 <prvAddNewTaskToReadyList+0xb8>)
 800dba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dba2:	4b29      	ldr	r3, [pc, #164]	; (800dc48 <prvAddNewTaskToReadyList+0xbc>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d109      	bne.n	800dbbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dbaa:	4a27      	ldr	r2, [pc, #156]	; (800dc48 <prvAddNewTaskToReadyList+0xbc>)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dbb0:	4b24      	ldr	r3, [pc, #144]	; (800dc44 <prvAddNewTaskToReadyList+0xb8>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d110      	bne.n	800dbda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dbb8:	f000 fbfa 	bl	800e3b0 <prvInitialiseTaskLists>
 800dbbc:	e00d      	b.n	800dbda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dbbe:	4b23      	ldr	r3, [pc, #140]	; (800dc4c <prvAddNewTaskToReadyList+0xc0>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d109      	bne.n	800dbda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dbc6:	4b20      	ldr	r3, [pc, #128]	; (800dc48 <prvAddNewTaskToReadyList+0xbc>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d802      	bhi.n	800dbda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dbd4:	4a1c      	ldr	r2, [pc, #112]	; (800dc48 <prvAddNewTaskToReadyList+0xbc>)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dbda:	4b1d      	ldr	r3, [pc, #116]	; (800dc50 <prvAddNewTaskToReadyList+0xc4>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	4a1b      	ldr	r2, [pc, #108]	; (800dc50 <prvAddNewTaskToReadyList+0xc4>)
 800dbe2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	2201      	movs	r2, #1
 800dbea:	409a      	lsls	r2, r3
 800dbec:	4b19      	ldr	r3, [pc, #100]	; (800dc54 <prvAddNewTaskToReadyList+0xc8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	4a18      	ldr	r2, [pc, #96]	; (800dc54 <prvAddNewTaskToReadyList+0xc8>)
 800dbf4:	6013      	str	r3, [r2, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	4a15      	ldr	r2, [pc, #84]	; (800dc58 <prvAddNewTaskToReadyList+0xcc>)
 800dc04:	441a      	add	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4610      	mov	r0, r2
 800dc0e:	f7fe fff1 	bl	800cbf4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dc12:	f001 f80f 	bl	800ec34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dc16:	4b0d      	ldr	r3, [pc, #52]	; (800dc4c <prvAddNewTaskToReadyList+0xc0>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00e      	beq.n	800dc3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dc1e:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <prvAddNewTaskToReadyList+0xbc>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d207      	bcs.n	800dc3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dc2c:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <prvAddNewTaskToReadyList+0xd0>)
 800dc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc32:	601a      	str	r2, [r3, #0]
 800dc34:	f3bf 8f4f 	dsb	sy
 800dc38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	200037fc 	.word	0x200037fc
 800dc48:	200036fc 	.word	0x200036fc
 800dc4c:	20003808 	.word	0x20003808
 800dc50:	20003818 	.word	0x20003818
 800dc54:	20003804 	.word	0x20003804
 800dc58:	20003700 	.word	0x20003700
 800dc5c:	e000ed04 	.word	0xe000ed04

0800dc60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d019      	beq.n	800dca6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc72:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <vTaskDelay+0x64>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00c      	beq.n	800dc94 <vTaskDelay+0x34>
	__asm volatile
 800dc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7e:	b672      	cpsid	i
 800dc80:	f383 8811 	msr	BASEPRI, r3
 800dc84:	f3bf 8f6f 	isb	sy
 800dc88:	f3bf 8f4f 	dsb	sy
 800dc8c:	b662      	cpsie	i
 800dc8e:	60bb      	str	r3, [r7, #8]
}
 800dc90:	bf00      	nop
 800dc92:	e7fe      	b.n	800dc92 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dc94:	f000 f888 	bl	800dda8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc98:	2100      	movs	r1, #0
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 fe26 	bl	800e8ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dca0:	f000 f890 	bl	800ddc4 <xTaskResumeAll>
 800dca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d107      	bne.n	800dcbc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dcac:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <vTaskDelay+0x68>)
 800dcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcb2:	601a      	str	r2, [r3, #0]
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dcbc:	bf00      	nop
 800dcbe:	3710      	adds	r7, #16
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	20003824 	.word	0x20003824
 800dcc8:	e000ed04 	.word	0xe000ed04

0800dccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b08a      	sub	sp, #40	; 0x28
 800dcd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dcda:	463a      	mov	r2, r7
 800dcdc:	1d39      	adds	r1, r7, #4
 800dcde:	f107 0308 	add.w	r3, r7, #8
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7f4 fac8 	bl	8002278 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	68ba      	ldr	r2, [r7, #8]
 800dcee:	9202      	str	r2, [sp, #8]
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	460a      	mov	r2, r1
 800dcfa:	4923      	ldr	r1, [pc, #140]	; (800dd88 <vTaskStartScheduler+0xbc>)
 800dcfc:	4823      	ldr	r0, [pc, #140]	; (800dd8c <vTaskStartScheduler+0xc0>)
 800dcfe:	f7ff fdfd 	bl	800d8fc <xTaskCreateStatic>
 800dd02:	4603      	mov	r3, r0
 800dd04:	4a22      	ldr	r2, [pc, #136]	; (800dd90 <vTaskStartScheduler+0xc4>)
 800dd06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dd08:	4b21      	ldr	r3, [pc, #132]	; (800dd90 <vTaskStartScheduler+0xc4>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dd10:	2301      	movs	r3, #1
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	e001      	b.n	800dd1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	2b01      	cmp	r3, #1
 800dd1e:	d11d      	bne.n	800dd5c <vTaskStartScheduler+0x90>
	__asm volatile
 800dd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f383 8811 	msr	BASEPRI, r3
 800dd2a:	f3bf 8f6f 	isb	sy
 800dd2e:	f3bf 8f4f 	dsb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	613b      	str	r3, [r7, #16]
}
 800dd36:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd38:	4b16      	ldr	r3, [pc, #88]	; (800dd94 <vTaskStartScheduler+0xc8>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	334c      	adds	r3, #76	; 0x4c
 800dd3e:	4a16      	ldr	r2, [pc, #88]	; (800dd98 <vTaskStartScheduler+0xcc>)
 800dd40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dd42:	4b16      	ldr	r3, [pc, #88]	; (800dd9c <vTaskStartScheduler+0xd0>)
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dd4a:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <vTaskStartScheduler+0xd4>)
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dd50:	4b14      	ldr	r3, [pc, #80]	; (800dda4 <vTaskStartScheduler+0xd8>)
 800dd52:	2200      	movs	r2, #0
 800dd54:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd56:	f000 febb 	bl	800ead0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd5a:	e010      	b.n	800dd7e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd62:	d10c      	bne.n	800dd7e <vTaskStartScheduler+0xb2>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	b672      	cpsid	i
 800dd6a:	f383 8811 	msr	BASEPRI, r3
 800dd6e:	f3bf 8f6f 	isb	sy
 800dd72:	f3bf 8f4f 	dsb	sy
 800dd76:	b662      	cpsie	i
 800dd78:	60fb      	str	r3, [r7, #12]
}
 800dd7a:	bf00      	nop
 800dd7c:	e7fe      	b.n	800dd7c <vTaskStartScheduler+0xb0>
}
 800dd7e:	bf00      	nop
 800dd80:	3718      	adds	r7, #24
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	080117ac 	.word	0x080117ac
 800dd8c:	0800e381 	.word	0x0800e381
 800dd90:	20003820 	.word	0x20003820
 800dd94:	200036fc 	.word	0x200036fc
 800dd98:	200000cc 	.word	0x200000cc
 800dd9c:	2000381c 	.word	0x2000381c
 800dda0:	20003808 	.word	0x20003808
 800dda4:	20003800 	.word	0x20003800

0800dda8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ddac:	4b04      	ldr	r3, [pc, #16]	; (800ddc0 <vTaskSuspendAll+0x18>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	4a03      	ldr	r2, [pc, #12]	; (800ddc0 <vTaskSuspendAll+0x18>)
 800ddb4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ddb6:	bf00      	nop
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	20003824 	.word	0x20003824

0800ddc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b084      	sub	sp, #16
 800ddc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ddd2:	4b42      	ldr	r3, [pc, #264]	; (800dedc <xTaskResumeAll+0x118>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d10c      	bne.n	800ddf4 <xTaskResumeAll+0x30>
	__asm volatile
 800ddda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddde:	b672      	cpsid	i
 800dde0:	f383 8811 	msr	BASEPRI, r3
 800dde4:	f3bf 8f6f 	isb	sy
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	b662      	cpsie	i
 800ddee:	603b      	str	r3, [r7, #0]
}
 800ddf0:	bf00      	nop
 800ddf2:	e7fe      	b.n	800ddf2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ddf4:	f000 feea 	bl	800ebcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ddf8:	4b38      	ldr	r3, [pc, #224]	; (800dedc <xTaskResumeAll+0x118>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	4a37      	ldr	r2, [pc, #220]	; (800dedc <xTaskResumeAll+0x118>)
 800de00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de02:	4b36      	ldr	r3, [pc, #216]	; (800dedc <xTaskResumeAll+0x118>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d161      	bne.n	800dece <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800de0a:	4b35      	ldr	r3, [pc, #212]	; (800dee0 <xTaskResumeAll+0x11c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d05d      	beq.n	800dece <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de12:	e02e      	b.n	800de72 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de14:	4b33      	ldr	r3, [pc, #204]	; (800dee4 <xTaskResumeAll+0x120>)
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	68db      	ldr	r3, [r3, #12]
 800de1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	3318      	adds	r3, #24
 800de20:	4618      	mov	r0, r3
 800de22:	f7fe ff44 	bl	800ccae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3304      	adds	r3, #4
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7fe ff3f 	bl	800ccae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de34:	2201      	movs	r2, #1
 800de36:	409a      	lsls	r2, r3
 800de38:	4b2b      	ldr	r3, [pc, #172]	; (800dee8 <xTaskResumeAll+0x124>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	4a2a      	ldr	r2, [pc, #168]	; (800dee8 <xTaskResumeAll+0x124>)
 800de40:	6013      	str	r3, [r2, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de46:	4613      	mov	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4a27      	ldr	r2, [pc, #156]	; (800deec <xTaskResumeAll+0x128>)
 800de50:	441a      	add	r2, r3
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3304      	adds	r3, #4
 800de56:	4619      	mov	r1, r3
 800de58:	4610      	mov	r0, r2
 800de5a:	f7fe fecb 	bl	800cbf4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de62:	4b23      	ldr	r3, [pc, #140]	; (800def0 <xTaskResumeAll+0x12c>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	429a      	cmp	r2, r3
 800de6a:	d302      	bcc.n	800de72 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800de6c:	4b21      	ldr	r3, [pc, #132]	; (800def4 <xTaskResumeAll+0x130>)
 800de6e:	2201      	movs	r2, #1
 800de70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de72:	4b1c      	ldr	r3, [pc, #112]	; (800dee4 <xTaskResumeAll+0x120>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1cc      	bne.n	800de14 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d001      	beq.n	800de84 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de80:	f000 fb3a 	bl	800e4f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800de84:	4b1c      	ldr	r3, [pc, #112]	; (800def8 <xTaskResumeAll+0x134>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d010      	beq.n	800deb2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de90:	f000 f846 	bl	800df20 <xTaskIncrementTick>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800de9a:	4b16      	ldr	r3, [pc, #88]	; (800def4 <xTaskResumeAll+0x130>)
 800de9c:	2201      	movs	r2, #1
 800de9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1f1      	bne.n	800de90 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800deac:	4b12      	ldr	r3, [pc, #72]	; (800def8 <xTaskResumeAll+0x134>)
 800deae:	2200      	movs	r2, #0
 800deb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800deb2:	4b10      	ldr	r3, [pc, #64]	; (800def4 <xTaskResumeAll+0x130>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d009      	beq.n	800dece <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800deba:	2301      	movs	r3, #1
 800debc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800debe:	4b0f      	ldr	r3, [pc, #60]	; (800defc <xTaskResumeAll+0x138>)
 800dec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dec4:	601a      	str	r2, [r3, #0]
 800dec6:	f3bf 8f4f 	dsb	sy
 800deca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dece:	f000 feb1 	bl	800ec34 <vPortExitCritical>

	return xAlreadyYielded;
 800ded2:	68bb      	ldr	r3, [r7, #8]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20003824 	.word	0x20003824
 800dee0:	200037fc 	.word	0x200037fc
 800dee4:	200037bc 	.word	0x200037bc
 800dee8:	20003804 	.word	0x20003804
 800deec:	20003700 	.word	0x20003700
 800def0:	200036fc 	.word	0x200036fc
 800def4:	20003810 	.word	0x20003810
 800def8:	2000380c 	.word	0x2000380c
 800defc:	e000ed04 	.word	0xe000ed04

0800df00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800df06:	4b05      	ldr	r3, [pc, #20]	; (800df1c <xTaskGetTickCount+0x1c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800df0c:	687b      	ldr	r3, [r7, #4]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	370c      	adds	r7, #12
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20003800 	.word	0x20003800

0800df20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b086      	sub	sp, #24
 800df24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800df26:	2300      	movs	r3, #0
 800df28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df2a:	4b4f      	ldr	r3, [pc, #316]	; (800e068 <xTaskIncrementTick+0x148>)
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f040 808a 	bne.w	800e048 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df34:	4b4d      	ldr	r3, [pc, #308]	; (800e06c <xTaskIncrementTick+0x14c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	3301      	adds	r3, #1
 800df3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df3c:	4a4b      	ldr	r2, [pc, #300]	; (800e06c <xTaskIncrementTick+0x14c>)
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d122      	bne.n	800df8e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800df48:	4b49      	ldr	r3, [pc, #292]	; (800e070 <xTaskIncrementTick+0x150>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00c      	beq.n	800df6c <xTaskIncrementTick+0x4c>
	__asm volatile
 800df52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df56:	b672      	cpsid	i
 800df58:	f383 8811 	msr	BASEPRI, r3
 800df5c:	f3bf 8f6f 	isb	sy
 800df60:	f3bf 8f4f 	dsb	sy
 800df64:	b662      	cpsie	i
 800df66:	603b      	str	r3, [r7, #0]
}
 800df68:	bf00      	nop
 800df6a:	e7fe      	b.n	800df6a <xTaskIncrementTick+0x4a>
 800df6c:	4b40      	ldr	r3, [pc, #256]	; (800e070 <xTaskIncrementTick+0x150>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	60fb      	str	r3, [r7, #12]
 800df72:	4b40      	ldr	r3, [pc, #256]	; (800e074 <xTaskIncrementTick+0x154>)
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a3e      	ldr	r2, [pc, #248]	; (800e070 <xTaskIncrementTick+0x150>)
 800df78:	6013      	str	r3, [r2, #0]
 800df7a:	4a3e      	ldr	r2, [pc, #248]	; (800e074 <xTaskIncrementTick+0x154>)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6013      	str	r3, [r2, #0]
 800df80:	4b3d      	ldr	r3, [pc, #244]	; (800e078 <xTaskIncrementTick+0x158>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3301      	adds	r3, #1
 800df86:	4a3c      	ldr	r2, [pc, #240]	; (800e078 <xTaskIncrementTick+0x158>)
 800df88:	6013      	str	r3, [r2, #0]
 800df8a:	f000 fab5 	bl	800e4f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df8e:	4b3b      	ldr	r3, [pc, #236]	; (800e07c <xTaskIncrementTick+0x15c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	693a      	ldr	r2, [r7, #16]
 800df94:	429a      	cmp	r2, r3
 800df96:	d348      	bcc.n	800e02a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df98:	4b35      	ldr	r3, [pc, #212]	; (800e070 <xTaskIncrementTick+0x150>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d104      	bne.n	800dfac <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa2:	4b36      	ldr	r3, [pc, #216]	; (800e07c <xTaskIncrementTick+0x15c>)
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800dfa8:	601a      	str	r2, [r3, #0]
					break;
 800dfaa:	e03e      	b.n	800e02a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfac:	4b30      	ldr	r3, [pc, #192]	; (800e070 <xTaskIncrementTick+0x150>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	68db      	ldr	r3, [r3, #12]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	685b      	ldr	r3, [r3, #4]
 800dfba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dfbc:	693a      	ldr	r2, [r7, #16]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d203      	bcs.n	800dfcc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dfc4:	4a2d      	ldr	r2, [pc, #180]	; (800e07c <xTaskIncrementTick+0x15c>)
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dfca:	e02e      	b.n	800e02a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fe6c 	bl	800ccae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d004      	beq.n	800dfe8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	3318      	adds	r3, #24
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fe fe63 	bl	800ccae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfec:	2201      	movs	r2, #1
 800dfee:	409a      	lsls	r2, r3
 800dff0:	4b23      	ldr	r3, [pc, #140]	; (800e080 <xTaskIncrementTick+0x160>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	4a22      	ldr	r2, [pc, #136]	; (800e080 <xTaskIncrementTick+0x160>)
 800dff8:	6013      	str	r3, [r2, #0]
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffe:	4613      	mov	r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	4413      	add	r3, r2
 800e004:	009b      	lsls	r3, r3, #2
 800e006:	4a1f      	ldr	r2, [pc, #124]	; (800e084 <xTaskIncrementTick+0x164>)
 800e008:	441a      	add	r2, r3
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	3304      	adds	r3, #4
 800e00e:	4619      	mov	r1, r3
 800e010:	4610      	mov	r0, r2
 800e012:	f7fe fdef 	bl	800cbf4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01a:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <xTaskIncrementTick+0x168>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	429a      	cmp	r2, r3
 800e022:	d3b9      	bcc.n	800df98 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800e024:	2301      	movs	r3, #1
 800e026:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e028:	e7b6      	b.n	800df98 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e02a:	4b17      	ldr	r3, [pc, #92]	; (800e088 <xTaskIncrementTick+0x168>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	4914      	ldr	r1, [pc, #80]	; (800e084 <xTaskIncrementTick+0x164>)
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	440b      	add	r3, r1
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d907      	bls.n	800e052 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800e042:	2301      	movs	r3, #1
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	e004      	b.n	800e052 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e048:	4b10      	ldr	r3, [pc, #64]	; (800e08c <xTaskIncrementTick+0x16c>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	3301      	adds	r3, #1
 800e04e:	4a0f      	ldr	r2, [pc, #60]	; (800e08c <xTaskIncrementTick+0x16c>)
 800e050:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e052:	4b0f      	ldr	r3, [pc, #60]	; (800e090 <xTaskIncrementTick+0x170>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d001      	beq.n	800e05e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800e05a:	2301      	movs	r3, #1
 800e05c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e05e:	697b      	ldr	r3, [r7, #20]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	20003824 	.word	0x20003824
 800e06c:	20003800 	.word	0x20003800
 800e070:	200037b4 	.word	0x200037b4
 800e074:	200037b8 	.word	0x200037b8
 800e078:	20003814 	.word	0x20003814
 800e07c:	2000381c 	.word	0x2000381c
 800e080:	20003804 	.word	0x20003804
 800e084:	20003700 	.word	0x20003700
 800e088:	200036fc 	.word	0x200036fc
 800e08c:	2000380c 	.word	0x2000380c
 800e090:	20003810 	.word	0x20003810

0800e094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e09a:	4b2a      	ldr	r3, [pc, #168]	; (800e144 <vTaskSwitchContext+0xb0>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d003      	beq.n	800e0aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e0a2:	4b29      	ldr	r3, [pc, #164]	; (800e148 <vTaskSwitchContext+0xb4>)
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e0a8:	e046      	b.n	800e138 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e0aa:	4b27      	ldr	r3, [pc, #156]	; (800e148 <vTaskSwitchContext+0xb4>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0b0:	4b26      	ldr	r3, [pc, #152]	; (800e14c <vTaskSwitchContext+0xb8>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	fab3 f383 	clz	r3, r3
 800e0bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e0be:	7afb      	ldrb	r3, [r7, #11]
 800e0c0:	f1c3 031f 	rsb	r3, r3, #31
 800e0c4:	617b      	str	r3, [r7, #20]
 800e0c6:	4922      	ldr	r1, [pc, #136]	; (800e150 <vTaskSwitchContext+0xbc>)
 800e0c8:	697a      	ldr	r2, [r7, #20]
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	009b      	lsls	r3, r3, #2
 800e0d2:	440b      	add	r3, r1
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d10c      	bne.n	800e0f4 <vTaskSwitchContext+0x60>
	__asm volatile
 800e0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0de:	b672      	cpsid	i
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	b662      	cpsie	i
 800e0ee:	607b      	str	r3, [r7, #4]
}
 800e0f0:	bf00      	nop
 800e0f2:	e7fe      	b.n	800e0f2 <vTaskSwitchContext+0x5e>
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4613      	mov	r3, r2
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	4413      	add	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4a14      	ldr	r2, [pc, #80]	; (800e150 <vTaskSwitchContext+0xbc>)
 800e100:	4413      	add	r3, r2
 800e102:	613b      	str	r3, [r7, #16]
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	685a      	ldr	r2, [r3, #4]
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	605a      	str	r2, [r3, #4]
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	685a      	ldr	r2, [r3, #4]
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	3308      	adds	r3, #8
 800e116:	429a      	cmp	r2, r3
 800e118:	d104      	bne.n	800e124 <vTaskSwitchContext+0x90>
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	685a      	ldr	r2, [r3, #4]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	605a      	str	r2, [r3, #4]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	4a0a      	ldr	r2, [pc, #40]	; (800e154 <vTaskSwitchContext+0xc0>)
 800e12c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e12e:	4b09      	ldr	r3, [pc, #36]	; (800e154 <vTaskSwitchContext+0xc0>)
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	334c      	adds	r3, #76	; 0x4c
 800e134:	4a08      	ldr	r2, [pc, #32]	; (800e158 <vTaskSwitchContext+0xc4>)
 800e136:	6013      	str	r3, [r2, #0]
}
 800e138:	bf00      	nop
 800e13a:	371c      	adds	r7, #28
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	20003824 	.word	0x20003824
 800e148:	20003810 	.word	0x20003810
 800e14c:	20003804 	.word	0x20003804
 800e150:	20003700 	.word	0x20003700
 800e154:	200036fc 	.word	0x200036fc
 800e158:	200000cc 	.word	0x200000cc

0800e15c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d10c      	bne.n	800e186 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e170:	b672      	cpsid	i
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	b662      	cpsie	i
 800e180:	60fb      	str	r3, [r7, #12]
}
 800e182:	bf00      	nop
 800e184:	e7fe      	b.n	800e184 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e186:	4b07      	ldr	r3, [pc, #28]	; (800e1a4 <vTaskPlaceOnEventList+0x48>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3318      	adds	r3, #24
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7fe fd54 	bl	800cc3c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e194:	2101      	movs	r1, #1
 800e196:	6838      	ldr	r0, [r7, #0]
 800e198:	f000 fba8 	bl	800e8ec <prvAddCurrentTaskToDelayedList>
}
 800e19c:	bf00      	nop
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	200036fc 	.word	0x200036fc

0800e1a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10c      	bne.n	800e1d8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	b672      	cpsid	i
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	b662      	cpsie	i
 800e1d2:	60fb      	str	r3, [r7, #12]
}
 800e1d4:	bf00      	nop
 800e1d6:	e7fe      	b.n	800e1d6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	3318      	adds	r3, #24
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fe fd66 	bl	800ccae <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1e2:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <xTaskRemoveFromEventList+0xb0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d11c      	bne.n	800e224 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fd5d 	bl	800ccae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	409a      	lsls	r2, r3
 800e1fc:	4b17      	ldr	r3, [pc, #92]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4313      	orrs	r3, r2
 800e202:	4a16      	ldr	r2, [pc, #88]	; (800e25c <xTaskRemoveFromEventList+0xb4>)
 800e204:	6013      	str	r3, [r2, #0]
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20a:	4613      	mov	r3, r2
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	4413      	add	r3, r2
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4a13      	ldr	r2, [pc, #76]	; (800e260 <xTaskRemoveFromEventList+0xb8>)
 800e214:	441a      	add	r2, r3
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	3304      	adds	r3, #4
 800e21a:	4619      	mov	r1, r3
 800e21c:	4610      	mov	r0, r2
 800e21e:	f7fe fce9 	bl	800cbf4 <vListInsertEnd>
 800e222:	e005      	b.n	800e230 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	3318      	adds	r3, #24
 800e228:	4619      	mov	r1, r3
 800e22a:	480e      	ldr	r0, [pc, #56]	; (800e264 <xTaskRemoveFromEventList+0xbc>)
 800e22c:	f7fe fce2 	bl	800cbf4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e234:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <xTaskRemoveFromEventList+0xc0>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d905      	bls.n	800e24a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e23e:	2301      	movs	r3, #1
 800e240:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e242:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <xTaskRemoveFromEventList+0xc4>)
 800e244:	2201      	movs	r2, #1
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	e001      	b.n	800e24e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e24a:	2300      	movs	r3, #0
 800e24c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e24e:	697b      	ldr	r3, [r7, #20]
}
 800e250:	4618      	mov	r0, r3
 800e252:	3718      	adds	r7, #24
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	20003824 	.word	0x20003824
 800e25c:	20003804 	.word	0x20003804
 800e260:	20003700 	.word	0x20003700
 800e264:	200037bc 	.word	0x200037bc
 800e268:	200036fc 	.word	0x200036fc
 800e26c:	20003810 	.word	0x20003810

0800e270 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e278:	4b06      	ldr	r3, [pc, #24]	; (800e294 <vTaskInternalSetTimeOutState+0x24>)
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e280:	4b05      	ldr	r3, [pc, #20]	; (800e298 <vTaskInternalSetTimeOutState+0x28>)
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	605a      	str	r2, [r3, #4]
}
 800e288:	bf00      	nop
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	20003814 	.word	0x20003814
 800e298:	20003800 	.word	0x20003800

0800e29c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b088      	sub	sp, #32
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10c      	bne.n	800e2c6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b0:	b672      	cpsid	i
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	b662      	cpsie	i
 800e2c0:	613b      	str	r3, [r7, #16]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10c      	bne.n	800e2e6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	b672      	cpsid	i
 800e2d2:	f383 8811 	msr	BASEPRI, r3
 800e2d6:	f3bf 8f6f 	isb	sy
 800e2da:	f3bf 8f4f 	dsb	sy
 800e2de:	b662      	cpsie	i
 800e2e0:	60fb      	str	r3, [r7, #12]
}
 800e2e2:	bf00      	nop
 800e2e4:	e7fe      	b.n	800e2e4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e2e6:	f000 fc71 	bl	800ebcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e2ea:	4b1d      	ldr	r3, [pc, #116]	; (800e360 <xTaskCheckForTimeOut+0xc4>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	69ba      	ldr	r2, [r7, #24]
 800e2f6:	1ad3      	subs	r3, r2, r3
 800e2f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e302:	d102      	bne.n	800e30a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e304:	2300      	movs	r3, #0
 800e306:	61fb      	str	r3, [r7, #28]
 800e308:	e023      	b.n	800e352 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	4b15      	ldr	r3, [pc, #84]	; (800e364 <xTaskCheckForTimeOut+0xc8>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d007      	beq.n	800e326 <xTaskCheckForTimeOut+0x8a>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	69ba      	ldr	r2, [r7, #24]
 800e31c:	429a      	cmp	r2, r3
 800e31e:	d302      	bcc.n	800e326 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e320:	2301      	movs	r3, #1
 800e322:	61fb      	str	r3, [r7, #28]
 800e324:	e015      	b.n	800e352 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d20b      	bcs.n	800e348 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	1ad2      	subs	r2, r2, r3
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff ff97 	bl	800e270 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e342:	2300      	movs	r3, #0
 800e344:	61fb      	str	r3, [r7, #28]
 800e346:	e004      	b.n	800e352 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	2200      	movs	r2, #0
 800e34c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e34e:	2301      	movs	r3, #1
 800e350:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e352:	f000 fc6f 	bl	800ec34 <vPortExitCritical>

	return xReturn;
 800e356:	69fb      	ldr	r3, [r7, #28]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3720      	adds	r7, #32
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	20003800 	.word	0x20003800
 800e364:	20003814 	.word	0x20003814

0800e368 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e368:	b480      	push	{r7}
 800e36a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e36c:	4b03      	ldr	r3, [pc, #12]	; (800e37c <vTaskMissedYield+0x14>)
 800e36e:	2201      	movs	r2, #1
 800e370:	601a      	str	r2, [r3, #0]
}
 800e372:	bf00      	nop
 800e374:	46bd      	mov	sp, r7
 800e376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37a:	4770      	bx	lr
 800e37c:	20003810 	.word	0x20003810

0800e380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e388:	f000 f852 	bl	800e430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e38c:	4b06      	ldr	r3, [pc, #24]	; (800e3a8 <prvIdleTask+0x28>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d9f9      	bls.n	800e388 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e394:	4b05      	ldr	r3, [pc, #20]	; (800e3ac <prvIdleTask+0x2c>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3a4:	e7f0      	b.n	800e388 <prvIdleTask+0x8>
 800e3a6:	bf00      	nop
 800e3a8:	20003700 	.word	0x20003700
 800e3ac:	e000ed04 	.word	0xe000ed04

0800e3b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	607b      	str	r3, [r7, #4]
 800e3ba:	e00c      	b.n	800e3d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	4413      	add	r3, r2
 800e3c4:	009b      	lsls	r3, r3, #2
 800e3c6:	4a12      	ldr	r2, [pc, #72]	; (800e410 <prvInitialiseTaskLists+0x60>)
 800e3c8:	4413      	add	r3, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fbe5 	bl	800cb9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	607b      	str	r3, [r7, #4]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2b06      	cmp	r3, #6
 800e3da:	d9ef      	bls.n	800e3bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3dc:	480d      	ldr	r0, [pc, #52]	; (800e414 <prvInitialiseTaskLists+0x64>)
 800e3de:	f7fe fbdc 	bl	800cb9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3e2:	480d      	ldr	r0, [pc, #52]	; (800e418 <prvInitialiseTaskLists+0x68>)
 800e3e4:	f7fe fbd9 	bl	800cb9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e3e8:	480c      	ldr	r0, [pc, #48]	; (800e41c <prvInitialiseTaskLists+0x6c>)
 800e3ea:	f7fe fbd6 	bl	800cb9a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e3ee:	480c      	ldr	r0, [pc, #48]	; (800e420 <prvInitialiseTaskLists+0x70>)
 800e3f0:	f7fe fbd3 	bl	800cb9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3f4:	480b      	ldr	r0, [pc, #44]	; (800e424 <prvInitialiseTaskLists+0x74>)
 800e3f6:	f7fe fbd0 	bl	800cb9a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3fa:	4b0b      	ldr	r3, [pc, #44]	; (800e428 <prvInitialiseTaskLists+0x78>)
 800e3fc:	4a05      	ldr	r2, [pc, #20]	; (800e414 <prvInitialiseTaskLists+0x64>)
 800e3fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e400:	4b0a      	ldr	r3, [pc, #40]	; (800e42c <prvInitialiseTaskLists+0x7c>)
 800e402:	4a05      	ldr	r2, [pc, #20]	; (800e418 <prvInitialiseTaskLists+0x68>)
 800e404:	601a      	str	r2, [r3, #0]
}
 800e406:	bf00      	nop
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	20003700 	.word	0x20003700
 800e414:	2000378c 	.word	0x2000378c
 800e418:	200037a0 	.word	0x200037a0
 800e41c:	200037bc 	.word	0x200037bc
 800e420:	200037d0 	.word	0x200037d0
 800e424:	200037e8 	.word	0x200037e8
 800e428:	200037b4 	.word	0x200037b4
 800e42c:	200037b8 	.word	0x200037b8

0800e430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e436:	e019      	b.n	800e46c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e438:	f000 fbc8 	bl	800ebcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e43c:	4b10      	ldr	r3, [pc, #64]	; (800e480 <prvCheckTasksWaitingTermination+0x50>)
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	3304      	adds	r3, #4
 800e448:	4618      	mov	r0, r3
 800e44a:	f7fe fc30 	bl	800ccae <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e44e:	4b0d      	ldr	r3, [pc, #52]	; (800e484 <prvCheckTasksWaitingTermination+0x54>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	3b01      	subs	r3, #1
 800e454:	4a0b      	ldr	r2, [pc, #44]	; (800e484 <prvCheckTasksWaitingTermination+0x54>)
 800e456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e458:	4b0b      	ldr	r3, [pc, #44]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	4a0a      	ldr	r2, [pc, #40]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e462:	f000 fbe7 	bl	800ec34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f810 	bl	800e48c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e46c:	4b06      	ldr	r3, [pc, #24]	; (800e488 <prvCheckTasksWaitingTermination+0x58>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1e1      	bne.n	800e438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop
 800e478:	3708      	adds	r7, #8
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	200037d0 	.word	0x200037d0
 800e484:	200037fc 	.word	0x200037fc
 800e488:	200037e4 	.word	0x200037e4

0800e48c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	334c      	adds	r3, #76	; 0x4c
 800e498:	4618      	mov	r0, r3
 800e49a:	f001 f827 	bl	800f4ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d108      	bne.n	800e4ba <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f000 fd83 	bl	800efb8 <vPortFree>
				vPortFree( pxTCB );
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fd80 	bl	800efb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4b8:	e01a      	b.n	800e4f0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d103      	bne.n	800e4cc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fd77 	bl	800efb8 <vPortFree>
	}
 800e4ca:	e011      	b.n	800e4f0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d00c      	beq.n	800e4f0 <prvDeleteTCB+0x64>
	__asm volatile
 800e4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4da:	b672      	cpsid	i
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	b662      	cpsie	i
 800e4ea:	60fb      	str	r3, [r7, #12]
}
 800e4ec:	bf00      	nop
 800e4ee:	e7fe      	b.n	800e4ee <prvDeleteTCB+0x62>
	}
 800e4f0:	bf00      	nop
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4fe:	4b0c      	ldr	r3, [pc, #48]	; (800e530 <prvResetNextTaskUnblockTime+0x38>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e508:	4b0a      	ldr	r3, [pc, #40]	; (800e534 <prvResetNextTaskUnblockTime+0x3c>)
 800e50a:	f04f 32ff 	mov.w	r2, #4294967295
 800e50e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e510:	e008      	b.n	800e524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e512:	4b07      	ldr	r3, [pc, #28]	; (800e530 <prvResetNextTaskUnblockTime+0x38>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	4a04      	ldr	r2, [pc, #16]	; (800e534 <prvResetNextTaskUnblockTime+0x3c>)
 800e522:	6013      	str	r3, [r2, #0]
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr
 800e530:	200037b4 	.word	0x200037b4
 800e534:	2000381c 	.word	0x2000381c

0800e538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e53e:	4b0b      	ldr	r3, [pc, #44]	; (800e56c <xTaskGetSchedulerState+0x34>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d102      	bne.n	800e54c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e546:	2301      	movs	r3, #1
 800e548:	607b      	str	r3, [r7, #4]
 800e54a:	e008      	b.n	800e55e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e54c:	4b08      	ldr	r3, [pc, #32]	; (800e570 <xTaskGetSchedulerState+0x38>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e554:	2302      	movs	r3, #2
 800e556:	607b      	str	r3, [r7, #4]
 800e558:	e001      	b.n	800e55e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e55a:	2300      	movs	r3, #0
 800e55c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e55e:	687b      	ldr	r3, [r7, #4]
	}
 800e560:	4618      	mov	r0, r3
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	20003808 	.word	0x20003808
 800e570:	20003824 	.word	0x20003824

0800e574 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e580:	2300      	movs	r3, #0
 800e582:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d069      	beq.n	800e65e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e58e:	4b36      	ldr	r3, [pc, #216]	; (800e668 <xTaskPriorityInherit+0xf4>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e594:	429a      	cmp	r2, r3
 800e596:	d259      	bcs.n	800e64c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	699b      	ldr	r3, [r3, #24]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	db06      	blt.n	800e5ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5a0:	4b31      	ldr	r3, [pc, #196]	; (800e668 <xTaskPriorityInherit+0xf4>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a6:	f1c3 0207 	rsb	r2, r3, #7
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6959      	ldr	r1, [r3, #20]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	4413      	add	r3, r2
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	4a2b      	ldr	r2, [pc, #172]	; (800e66c <xTaskPriorityInherit+0xf8>)
 800e5c0:	4413      	add	r3, r2
 800e5c2:	4299      	cmp	r1, r3
 800e5c4:	d13a      	bne.n	800e63c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe fb6f 	bl	800ccae <uxListRemove>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d115      	bne.n	800e602 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5da:	4924      	ldr	r1, [pc, #144]	; (800e66c <xTaskPriorityInherit+0xf8>)
 800e5dc:	4613      	mov	r3, r2
 800e5de:	009b      	lsls	r3, r3, #2
 800e5e0:	4413      	add	r3, r2
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	440b      	add	r3, r1
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10a      	bne.n	800e602 <xTaskPriorityInherit+0x8e>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5f6:	43da      	mvns	r2, r3
 800e5f8:	4b1d      	ldr	r3, [pc, #116]	; (800e670 <xTaskPriorityInherit+0xfc>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4013      	ands	r3, r2
 800e5fe:	4a1c      	ldr	r2, [pc, #112]	; (800e670 <xTaskPriorityInherit+0xfc>)
 800e600:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e602:	4b19      	ldr	r3, [pc, #100]	; (800e668 <xTaskPriorityInherit+0xf4>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	2201      	movs	r2, #1
 800e612:	409a      	lsls	r2, r3
 800e614:	4b16      	ldr	r3, [pc, #88]	; (800e670 <xTaskPriorityInherit+0xfc>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4313      	orrs	r3, r2
 800e61a:	4a15      	ldr	r2, [pc, #84]	; (800e670 <xTaskPriorityInherit+0xfc>)
 800e61c:	6013      	str	r3, [r2, #0]
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e622:	4613      	mov	r3, r2
 800e624:	009b      	lsls	r3, r3, #2
 800e626:	4413      	add	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4a10      	ldr	r2, [pc, #64]	; (800e66c <xTaskPriorityInherit+0xf8>)
 800e62c:	441a      	add	r2, r3
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3304      	adds	r3, #4
 800e632:	4619      	mov	r1, r3
 800e634:	4610      	mov	r0, r2
 800e636:	f7fe fadd 	bl	800cbf4 <vListInsertEnd>
 800e63a:	e004      	b.n	800e646 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e63c:	4b0a      	ldr	r3, [pc, #40]	; (800e668 <xTaskPriorityInherit+0xf4>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e646:	2301      	movs	r3, #1
 800e648:	60fb      	str	r3, [r7, #12]
 800e64a:	e008      	b.n	800e65e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e650:	4b05      	ldr	r3, [pc, #20]	; (800e668 <xTaskPriorityInherit+0xf4>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e656:	429a      	cmp	r2, r3
 800e658:	d201      	bcs.n	800e65e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e65a:	2301      	movs	r3, #1
 800e65c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e65e:	68fb      	ldr	r3, [r7, #12]
	}
 800e660:	4618      	mov	r0, r3
 800e662:	3710      	adds	r7, #16
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	200036fc 	.word	0x200036fc
 800e66c:	20003700 	.word	0x20003700
 800e670:	20003804 	.word	0x20003804

0800e674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e674:	b580      	push	{r7, lr}
 800e676:	b086      	sub	sp, #24
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e680:	2300      	movs	r3, #0
 800e682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d072      	beq.n	800e770 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e68a:	4b3c      	ldr	r3, [pc, #240]	; (800e77c <xTaskPriorityDisinherit+0x108>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	693a      	ldr	r2, [r7, #16]
 800e690:	429a      	cmp	r2, r3
 800e692:	d00c      	beq.n	800e6ae <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e698:	b672      	cpsid	i
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	b662      	cpsie	i
 800e6a8:	60fb      	str	r3, [r7, #12]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d10c      	bne.n	800e6d0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ba:	b672      	cpsid	i
 800e6bc:	f383 8811 	msr	BASEPRI, r3
 800e6c0:	f3bf 8f6f 	isb	sy
 800e6c4:	f3bf 8f4f 	dsb	sy
 800e6c8:	b662      	cpsie	i
 800e6ca:	60bb      	str	r3, [r7, #8]
}
 800e6cc:	bf00      	nop
 800e6ce:	e7fe      	b.n	800e6ce <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6d4:	1e5a      	subs	r2, r3, #1
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6de:	693b      	ldr	r3, [r7, #16]
 800e6e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d044      	beq.n	800e770 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d140      	bne.n	800e770 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	3304      	adds	r3, #4
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7fe fadb 	bl	800ccae <uxListRemove>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d115      	bne.n	800e72a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e702:	491f      	ldr	r1, [pc, #124]	; (800e780 <xTaskPriorityDisinherit+0x10c>)
 800e704:	4613      	mov	r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4413      	add	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	440b      	add	r3, r1
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10a      	bne.n	800e72a <xTaskPriorityDisinherit+0xb6>
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e718:	2201      	movs	r2, #1
 800e71a:	fa02 f303 	lsl.w	r3, r2, r3
 800e71e:	43da      	mvns	r2, r3
 800e720:	4b18      	ldr	r3, [pc, #96]	; (800e784 <xTaskPriorityDisinherit+0x110>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4013      	ands	r3, r2
 800e726:	4a17      	ldr	r2, [pc, #92]	; (800e784 <xTaskPriorityDisinherit+0x110>)
 800e728:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e736:	f1c3 0207 	rsb	r2, r3, #7
 800e73a:	693b      	ldr	r3, [r7, #16]
 800e73c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e742:	2201      	movs	r2, #1
 800e744:	409a      	lsls	r2, r3
 800e746:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <xTaskPriorityDisinherit+0x110>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4313      	orrs	r3, r2
 800e74c:	4a0d      	ldr	r2, [pc, #52]	; (800e784 <xTaskPriorityDisinherit+0x110>)
 800e74e:	6013      	str	r3, [r2, #0]
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e754:	4613      	mov	r3, r2
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4413      	add	r3, r2
 800e75a:	009b      	lsls	r3, r3, #2
 800e75c:	4a08      	ldr	r2, [pc, #32]	; (800e780 <xTaskPriorityDisinherit+0x10c>)
 800e75e:	441a      	add	r2, r3
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	3304      	adds	r3, #4
 800e764:	4619      	mov	r1, r3
 800e766:	4610      	mov	r0, r2
 800e768:	f7fe fa44 	bl	800cbf4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e76c:	2301      	movs	r3, #1
 800e76e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e770:	697b      	ldr	r3, [r7, #20]
	}
 800e772:	4618      	mov	r0, r3
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}
 800e77a:	bf00      	nop
 800e77c:	200036fc 	.word	0x200036fc
 800e780:	20003700 	.word	0x20003700
 800e784:	20003804 	.word	0x20003804

0800e788 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b088      	sub	sp, #32
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e796:	2301      	movs	r3, #1
 800e798:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f000 8087 	beq.w	800e8b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10c      	bne.n	800e7c4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	b672      	cpsid	i
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	b662      	cpsie	i
 800e7be:	60fb      	str	r3, [r7, #12]
}
 800e7c0:	bf00      	nop
 800e7c2:	e7fe      	b.n	800e7c2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d902      	bls.n	800e7d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	61fb      	str	r3, [r7, #28]
 800e7d2:	e002      	b.n	800e7da <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e7da:	69bb      	ldr	r3, [r7, #24]
 800e7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7de:	69fa      	ldr	r2, [r7, #28]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d065      	beq.n	800e8b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7e8:	697a      	ldr	r2, [r7, #20]
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d160      	bne.n	800e8b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e7ee:	4b32      	ldr	r3, [pc, #200]	; (800e8b8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	69ba      	ldr	r2, [r7, #24]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d10c      	bne.n	800e812 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fc:	b672      	cpsid	i
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	b662      	cpsie	i
 800e80c:	60bb      	str	r3, [r7, #8]
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e816:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e818:	69bb      	ldr	r3, [r7, #24]
 800e81a:	69fa      	ldr	r2, [r7, #28]
 800e81c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	699b      	ldr	r3, [r3, #24]
 800e822:	2b00      	cmp	r3, #0
 800e824:	db04      	blt.n	800e830 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	f1c3 0207 	rsb	r2, r3, #7
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	6959      	ldr	r1, [r3, #20]
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	4613      	mov	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	4413      	add	r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	4a1f      	ldr	r2, [pc, #124]	; (800e8bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e840:	4413      	add	r3, r2
 800e842:	4299      	cmp	r1, r3
 800e844:	d134      	bne.n	800e8b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	3304      	adds	r3, #4
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7fe fa2f 	bl	800ccae <uxListRemove>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d115      	bne.n	800e882 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e85a:	4918      	ldr	r1, [pc, #96]	; (800e8bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e85c:	4613      	mov	r3, r2
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4413      	add	r3, r2
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	440b      	add	r3, r1
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e870:	2201      	movs	r2, #1
 800e872:	fa02 f303 	lsl.w	r3, r2, r3
 800e876:	43da      	mvns	r2, r3
 800e878:	4b11      	ldr	r3, [pc, #68]	; (800e8c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4013      	ands	r3, r2
 800e87e:	4a10      	ldr	r2, [pc, #64]	; (800e8c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e880:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e886:	2201      	movs	r2, #1
 800e888:	409a      	lsls	r2, r3
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4313      	orrs	r3, r2
 800e890:	4a0b      	ldr	r2, [pc, #44]	; (800e8c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e898:	4613      	mov	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4a06      	ldr	r2, [pc, #24]	; (800e8bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e8a2:	441a      	add	r2, r3
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	4619      	mov	r1, r3
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	f7fe f9a2 	bl	800cbf4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e8b0:	bf00      	nop
 800e8b2:	3720      	adds	r7, #32
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	200036fc 	.word	0x200036fc
 800e8bc:	20003700 	.word	0x20003700
 800e8c0:	20003804 	.word	0x20003804

0800e8c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e8c4:	b480      	push	{r7}
 800e8c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e8c8:	4b07      	ldr	r3, [pc, #28]	; (800e8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d004      	beq.n	800e8da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e8d0:	4b05      	ldr	r3, [pc, #20]	; (800e8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e8d6:	3201      	adds	r2, #1
 800e8d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e8da:	4b03      	ldr	r3, [pc, #12]	; (800e8e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
	}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr
 800e8e8:	200036fc 	.word	0x200036fc

0800e8ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8f6:	4b29      	ldr	r3, [pc, #164]	; (800e99c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8fc:	4b28      	ldr	r3, [pc, #160]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3304      	adds	r3, #4
 800e902:	4618      	mov	r0, r3
 800e904:	f7fe f9d3 	bl	800ccae <uxListRemove>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10b      	bne.n	800e926 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e90e:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e914:	2201      	movs	r2, #1
 800e916:	fa02 f303 	lsl.w	r3, r2, r3
 800e91a:	43da      	mvns	r2, r3
 800e91c:	4b21      	ldr	r3, [pc, #132]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4013      	ands	r3, r2
 800e922:	4a20      	ldr	r2, [pc, #128]	; (800e9a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e924:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e92c:	d10a      	bne.n	800e944 <prvAddCurrentTaskToDelayedList+0x58>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d007      	beq.n	800e944 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e934:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	3304      	adds	r3, #4
 800e93a:	4619      	mov	r1, r3
 800e93c:	481a      	ldr	r0, [pc, #104]	; (800e9a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e93e:	f7fe f959 	bl	800cbf4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e942:	e026      	b.n	800e992 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e944:	68fa      	ldr	r2, [r7, #12]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4413      	add	r3, r2
 800e94a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e94c:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e954:	68ba      	ldr	r2, [r7, #8]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d209      	bcs.n	800e970 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e95c:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	3304      	adds	r3, #4
 800e966:	4619      	mov	r1, r3
 800e968:	4610      	mov	r0, r2
 800e96a:	f7fe f967 	bl	800cc3c <vListInsert>
}
 800e96e:	e010      	b.n	800e992 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e970:	4b0f      	ldr	r3, [pc, #60]	; (800e9b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3304      	adds	r3, #4
 800e97a:	4619      	mov	r1, r3
 800e97c:	4610      	mov	r0, r2
 800e97e:	f7fe f95d 	bl	800cc3c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e982:	4b0c      	ldr	r3, [pc, #48]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d202      	bcs.n	800e992 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e98c:	4a09      	ldr	r2, [pc, #36]	; (800e9b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	6013      	str	r3, [r2, #0]
}
 800e992:	bf00      	nop
 800e994:	3710      	adds	r7, #16
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop
 800e99c:	20003800 	.word	0x20003800
 800e9a0:	200036fc 	.word	0x200036fc
 800e9a4:	20003804 	.word	0x20003804
 800e9a8:	200037e8 	.word	0x200037e8
 800e9ac:	200037b8 	.word	0x200037b8
 800e9b0:	200037b4 	.word	0x200037b4
 800e9b4:	2000381c 	.word	0x2000381c

0800e9b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3b04      	subs	r3, #4
 800e9c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	3b04      	subs	r3, #4
 800e9d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f023 0201 	bic.w	r2, r3, #1
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3b04      	subs	r3, #4
 800e9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9e8:	4a0c      	ldr	r2, [pc, #48]	; (800ea1c <pxPortInitialiseStack+0x64>)
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3b14      	subs	r3, #20
 800e9f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3b04      	subs	r3, #4
 800e9fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f06f 0202 	mvn.w	r2, #2
 800ea06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	3b20      	subs	r3, #32
 800ea0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr
 800ea1c:	0800ea21 	.word	0x0800ea21

0800ea20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea2a:	4b14      	ldr	r3, [pc, #80]	; (800ea7c <prvTaskExitError+0x5c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea32:	d00c      	beq.n	800ea4e <prvTaskExitError+0x2e>
	__asm volatile
 800ea34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea38:	b672      	cpsid	i
 800ea3a:	f383 8811 	msr	BASEPRI, r3
 800ea3e:	f3bf 8f6f 	isb	sy
 800ea42:	f3bf 8f4f 	dsb	sy
 800ea46:	b662      	cpsie	i
 800ea48:	60fb      	str	r3, [r7, #12]
}
 800ea4a:	bf00      	nop
 800ea4c:	e7fe      	b.n	800ea4c <prvTaskExitError+0x2c>
	__asm volatile
 800ea4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea52:	b672      	cpsid	i
 800ea54:	f383 8811 	msr	BASEPRI, r3
 800ea58:	f3bf 8f6f 	isb	sy
 800ea5c:	f3bf 8f4f 	dsb	sy
 800ea60:	b662      	cpsie	i
 800ea62:	60bb      	str	r3, [r7, #8]
}
 800ea64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea66:	bf00      	nop
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d0fc      	beq.n	800ea68 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea6e:	bf00      	nop
 800ea70:	bf00      	nop
 800ea72:	3714      	adds	r7, #20
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr
 800ea7c:	20000070 	.word	0x20000070

0800ea80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <pxCurrentTCBConst2>)
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	6808      	ldr	r0, [r1, #0]
 800ea86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8a:	f380 8809 	msr	PSP, r0
 800ea8e:	f3bf 8f6f 	isb	sy
 800ea92:	f04f 0000 	mov.w	r0, #0
 800ea96:	f380 8811 	msr	BASEPRI, r0
 800ea9a:	4770      	bx	lr
 800ea9c:	f3af 8000 	nop.w

0800eaa0 <pxCurrentTCBConst2>:
 800eaa0:	200036fc 	.word	0x200036fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop

0800eaa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eaa8:	4808      	ldr	r0, [pc, #32]	; (800eacc <prvPortStartFirstTask+0x24>)
 800eaaa:	6800      	ldr	r0, [r0, #0]
 800eaac:	6800      	ldr	r0, [r0, #0]
 800eaae:	f380 8808 	msr	MSP, r0
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8814 	msr	CONTROL, r0
 800eaba:	b662      	cpsie	i
 800eabc:	b661      	cpsie	f
 800eabe:	f3bf 8f4f 	dsb	sy
 800eac2:	f3bf 8f6f 	isb	sy
 800eac6:	df00      	svc	0
 800eac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaca:	bf00      	nop
 800eacc:	e000ed08 	.word	0xe000ed08

0800ead0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ead6:	4b37      	ldr	r3, [pc, #220]	; (800ebb4 <xPortStartScheduler+0xe4>)
 800ead8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	22ff      	movs	r2, #255	; 0xff
 800eae6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eaf8:	b2da      	uxtb	r2, r3
 800eafa:	4b2f      	ldr	r3, [pc, #188]	; (800ebb8 <xPortStartScheduler+0xe8>)
 800eafc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eafe:	4b2f      	ldr	r3, [pc, #188]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb00:	2207      	movs	r2, #7
 800eb02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb04:	e009      	b.n	800eb1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800eb06:	4b2d      	ldr	r3, [pc, #180]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	4a2b      	ldr	r2, [pc, #172]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	b2db      	uxtb	r3, r3
 800eb14:	005b      	lsls	r3, r3, #1
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb1a:	78fb      	ldrb	r3, [r7, #3]
 800eb1c:	b2db      	uxtb	r3, r3
 800eb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb22:	2b80      	cmp	r3, #128	; 0x80
 800eb24:	d0ef      	beq.n	800eb06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb26:	4b25      	ldr	r3, [pc, #148]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f1c3 0307 	rsb	r3, r3, #7
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d00c      	beq.n	800eb4c <xPortStartScheduler+0x7c>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb36:	b672      	cpsid	i
 800eb38:	f383 8811 	msr	BASEPRI, r3
 800eb3c:	f3bf 8f6f 	isb	sy
 800eb40:	f3bf 8f4f 	dsb	sy
 800eb44:	b662      	cpsie	i
 800eb46:	60bb      	str	r3, [r7, #8]
}
 800eb48:	bf00      	nop
 800eb4a:	e7fe      	b.n	800eb4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb4c:	4b1b      	ldr	r3, [pc, #108]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	021b      	lsls	r3, r3, #8
 800eb52:	4a1a      	ldr	r2, [pc, #104]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eb56:	4b19      	ldr	r3, [pc, #100]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eb5e:	4a17      	ldr	r2, [pc, #92]	; (800ebbc <xPortStartScheduler+0xec>)
 800eb60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	b2da      	uxtb	r2, r3
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eb6a:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4a14      	ldr	r2, [pc, #80]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eb76:	4b12      	ldr	r3, [pc, #72]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	4a11      	ldr	r2, [pc, #68]	; (800ebc0 <xPortStartScheduler+0xf0>)
 800eb7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eb80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eb82:	f000 f8dd 	bl	800ed40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eb86:	4b0f      	ldr	r3, [pc, #60]	; (800ebc4 <xPortStartScheduler+0xf4>)
 800eb88:	2200      	movs	r2, #0
 800eb8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eb8c:	f000 f8fc 	bl	800ed88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800eb90:	4b0d      	ldr	r3, [pc, #52]	; (800ebc8 <xPortStartScheduler+0xf8>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4a0c      	ldr	r2, [pc, #48]	; (800ebc8 <xPortStartScheduler+0xf8>)
 800eb96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eb9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eb9c:	f7ff ff84 	bl	800eaa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eba0:	f7ff fa78 	bl	800e094 <vTaskSwitchContext>
	prvTaskExitError();
 800eba4:	f7ff ff3c 	bl	800ea20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	e000e400 	.word	0xe000e400
 800ebb8:	20003828 	.word	0x20003828
 800ebbc:	2000382c 	.word	0x2000382c
 800ebc0:	e000ed20 	.word	0xe000ed20
 800ebc4:	20000070 	.word	0x20000070
 800ebc8:	e000ef34 	.word	0xe000ef34

0800ebcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
	__asm volatile
 800ebd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd6:	b672      	cpsid	i
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	b662      	cpsie	i
 800ebe6:	607b      	str	r3, [r7, #4]
}
 800ebe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ebea:	4b10      	ldr	r3, [pc, #64]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	4a0e      	ldr	r2, [pc, #56]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ebf4:	4b0d      	ldr	r3, [pc, #52]	; (800ec2c <vPortEnterCritical+0x60>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	d111      	bne.n	800ec20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	; (800ec30 <vPortEnterCritical+0x64>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	b2db      	uxtb	r3, r3
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d00c      	beq.n	800ec20 <vPortEnterCritical+0x54>
	__asm volatile
 800ec06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec0a:	b672      	cpsid	i
 800ec0c:	f383 8811 	msr	BASEPRI, r3
 800ec10:	f3bf 8f6f 	isb	sy
 800ec14:	f3bf 8f4f 	dsb	sy
 800ec18:	b662      	cpsie	i
 800ec1a:	603b      	str	r3, [r7, #0]
}
 800ec1c:	bf00      	nop
 800ec1e:	e7fe      	b.n	800ec1e <vPortEnterCritical+0x52>
	}
}
 800ec20:	bf00      	nop
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	20000070 	.word	0x20000070
 800ec30:	e000ed04 	.word	0xe000ed04

0800ec34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec3a:	4b13      	ldr	r3, [pc, #76]	; (800ec88 <vPortExitCritical+0x54>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d10c      	bne.n	800ec5c <vPortExitCritical+0x28>
	__asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	b672      	cpsid	i
 800ec48:	f383 8811 	msr	BASEPRI, r3
 800ec4c:	f3bf 8f6f 	isb	sy
 800ec50:	f3bf 8f4f 	dsb	sy
 800ec54:	b662      	cpsie	i
 800ec56:	607b      	str	r3, [r7, #4]
}
 800ec58:	bf00      	nop
 800ec5a:	e7fe      	b.n	800ec5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ec5c:	4b0a      	ldr	r3, [pc, #40]	; (800ec88 <vPortExitCritical+0x54>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	4a09      	ldr	r2, [pc, #36]	; (800ec88 <vPortExitCritical+0x54>)
 800ec64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ec66:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <vPortExitCritical+0x54>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d105      	bne.n	800ec7a <vPortExitCritical+0x46>
 800ec6e:	2300      	movs	r3, #0
 800ec70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec72:	683b      	ldr	r3, [r7, #0]
 800ec74:	f383 8811 	msr	BASEPRI, r3
}
 800ec78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr
 800ec86:	bf00      	nop
 800ec88:	20000070 	.word	0x20000070
 800ec8c:	00000000 	.word	0x00000000

0800ec90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ec90:	f3ef 8009 	mrs	r0, PSP
 800ec94:	f3bf 8f6f 	isb	sy
 800ec98:	4b15      	ldr	r3, [pc, #84]	; (800ecf0 <pxCurrentTCBConst>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	f01e 0f10 	tst.w	lr, #16
 800eca0:	bf08      	it	eq
 800eca2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eca6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecaa:	6010      	str	r0, [r2, #0]
 800ecac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ecb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ecb4:	b672      	cpsid	i
 800ecb6:	f380 8811 	msr	BASEPRI, r0
 800ecba:	f3bf 8f4f 	dsb	sy
 800ecbe:	f3bf 8f6f 	isb	sy
 800ecc2:	b662      	cpsie	i
 800ecc4:	f7ff f9e6 	bl	800e094 <vTaskSwitchContext>
 800ecc8:	f04f 0000 	mov.w	r0, #0
 800eccc:	f380 8811 	msr	BASEPRI, r0
 800ecd0:	bc09      	pop	{r0, r3}
 800ecd2:	6819      	ldr	r1, [r3, #0]
 800ecd4:	6808      	ldr	r0, [r1, #0]
 800ecd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecda:	f01e 0f10 	tst.w	lr, #16
 800ecde:	bf08      	it	eq
 800ece0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ece4:	f380 8809 	msr	PSP, r0
 800ece8:	f3bf 8f6f 	isb	sy
 800ecec:	4770      	bx	lr
 800ecee:	bf00      	nop

0800ecf0 <pxCurrentTCBConst>:
 800ecf0:	200036fc 	.word	0x200036fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ecf4:	bf00      	nop
 800ecf6:	bf00      	nop

0800ecf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
	__asm volatile
 800ecfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed02:	b672      	cpsid	i
 800ed04:	f383 8811 	msr	BASEPRI, r3
 800ed08:	f3bf 8f6f 	isb	sy
 800ed0c:	f3bf 8f4f 	dsb	sy
 800ed10:	b662      	cpsie	i
 800ed12:	607b      	str	r3, [r7, #4]
}
 800ed14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed16:	f7ff f903 	bl	800df20 <xTaskIncrementTick>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed20:	4b06      	ldr	r3, [pc, #24]	; (800ed3c <SysTick_Handler+0x44>)
 800ed22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed26:	601a      	str	r2, [r3, #0]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	f383 8811 	msr	BASEPRI, r3
}
 800ed32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	e000ed04 	.word	0xe000ed04

0800ed40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed40:	b480      	push	{r7}
 800ed42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed44:	4b0b      	ldr	r3, [pc, #44]	; (800ed74 <vPortSetupTimerInterrupt+0x34>)
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed4a:	4b0b      	ldr	r3, [pc, #44]	; (800ed78 <vPortSetupTimerInterrupt+0x38>)
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed50:	4b0a      	ldr	r3, [pc, #40]	; (800ed7c <vPortSetupTimerInterrupt+0x3c>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a0a      	ldr	r2, [pc, #40]	; (800ed80 <vPortSetupTimerInterrupt+0x40>)
 800ed56:	fba2 2303 	umull	r2, r3, r2, r3
 800ed5a:	099b      	lsrs	r3, r3, #6
 800ed5c:	4a09      	ldr	r2, [pc, #36]	; (800ed84 <vPortSetupTimerInterrupt+0x44>)
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ed62:	4b04      	ldr	r3, [pc, #16]	; (800ed74 <vPortSetupTimerInterrupt+0x34>)
 800ed64:	2207      	movs	r2, #7
 800ed66:	601a      	str	r2, [r3, #0]
}
 800ed68:	bf00      	nop
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	e000e010 	.word	0xe000e010
 800ed78:	e000e018 	.word	0xe000e018
 800ed7c:	20000050 	.word	0x20000050
 800ed80:	10624dd3 	.word	0x10624dd3
 800ed84:	e000e014 	.word	0xe000e014

0800ed88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ed88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ed98 <vPortEnableVFP+0x10>
 800ed8c:	6801      	ldr	r1, [r0, #0]
 800ed8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ed92:	6001      	str	r1, [r0, #0]
 800ed94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ed96:	bf00      	nop
 800ed98:	e000ed88 	.word	0xe000ed88

0800ed9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b085      	sub	sp, #20
 800eda0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800eda2:	f3ef 8305 	mrs	r3, IPSR
 800eda6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b0f      	cmp	r3, #15
 800edac:	d916      	bls.n	800eddc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edae:	4a19      	ldr	r2, [pc, #100]	; (800ee14 <vPortValidateInterruptPriority+0x78>)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800edb8:	4b17      	ldr	r3, [pc, #92]	; (800ee18 <vPortValidateInterruptPriority+0x7c>)
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	7afa      	ldrb	r2, [r7, #11]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d20c      	bcs.n	800eddc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	607b      	str	r3, [r7, #4]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eddc:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <vPortValidateInterruptPriority+0x80>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ede4:	4b0e      	ldr	r3, [pc, #56]	; (800ee20 <vPortValidateInterruptPriority+0x84>)
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d90c      	bls.n	800ee06 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	b672      	cpsid	i
 800edf2:	f383 8811 	msr	BASEPRI, r3
 800edf6:	f3bf 8f6f 	isb	sy
 800edfa:	f3bf 8f4f 	dsb	sy
 800edfe:	b662      	cpsie	i
 800ee00:	603b      	str	r3, [r7, #0]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <vPortValidateInterruptPriority+0x68>
	}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	e000e3f0 	.word	0xe000e3f0
 800ee18:	20003828 	.word	0x20003828
 800ee1c:	e000ed0c 	.word	0xe000ed0c
 800ee20:	2000382c 	.word	0x2000382c

0800ee24 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08a      	sub	sp, #40	; 0x28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee30:	f7fe ffba 	bl	800dda8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee34:	4b5b      	ldr	r3, [pc, #364]	; (800efa4 <pvPortMalloc+0x180>)
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d101      	bne.n	800ee40 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee3c:	f000 f91a 	bl	800f074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee40:	4b59      	ldr	r3, [pc, #356]	; (800efa8 <pvPortMalloc+0x184>)
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4013      	ands	r3, r2
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	f040 8092 	bne.w	800ef72 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d01f      	beq.n	800ee94 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ee54:	2208      	movs	r2, #8
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4413      	add	r3, r2
 800ee5a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f003 0307 	and.w	r3, r3, #7
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d016      	beq.n	800ee94 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f023 0307 	bic.w	r3, r3, #7
 800ee6c:	3308      	adds	r3, #8
 800ee6e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f003 0307 	and.w	r3, r3, #7
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00c      	beq.n	800ee94 <pvPortMalloc+0x70>
	__asm volatile
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	b672      	cpsid	i
 800ee80:	f383 8811 	msr	BASEPRI, r3
 800ee84:	f3bf 8f6f 	isb	sy
 800ee88:	f3bf 8f4f 	dsb	sy
 800ee8c:	b662      	cpsie	i
 800ee8e:	617b      	str	r3, [r7, #20]
}
 800ee90:	bf00      	nop
 800ee92:	e7fe      	b.n	800ee92 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d06b      	beq.n	800ef72 <pvPortMalloc+0x14e>
 800ee9a:	4b44      	ldr	r3, [pc, #272]	; (800efac <pvPortMalloc+0x188>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d866      	bhi.n	800ef72 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eea4:	4b42      	ldr	r3, [pc, #264]	; (800efb0 <pvPortMalloc+0x18c>)
 800eea6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eea8:	4b41      	ldr	r3, [pc, #260]	; (800efb0 <pvPortMalloc+0x18c>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeae:	e004      	b.n	800eeba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d903      	bls.n	800eecc <pvPortMalloc+0xa8>
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d1f1      	bne.n	800eeb0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eecc:	4b35      	ldr	r3, [pc, #212]	; (800efa4 <pvPortMalloc+0x180>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d04d      	beq.n	800ef72 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eed6:	6a3b      	ldr	r3, [r7, #32]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	2208      	movs	r2, #8
 800eedc:	4413      	add	r3, r2
 800eede:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeea:	685a      	ldr	r2, [r3, #4]
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	1ad2      	subs	r2, r2, r3
 800eef0:	2308      	movs	r3, #8
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d921      	bls.n	800ef3c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4413      	add	r3, r2
 800eefe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	f003 0307 	and.w	r3, r3, #7
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00c      	beq.n	800ef24 <pvPortMalloc+0x100>
	__asm volatile
 800ef0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef0e:	b672      	cpsid	i
 800ef10:	f383 8811 	msr	BASEPRI, r3
 800ef14:	f3bf 8f6f 	isb	sy
 800ef18:	f3bf 8f4f 	dsb	sy
 800ef1c:	b662      	cpsie	i
 800ef1e:	613b      	str	r3, [r7, #16]
}
 800ef20:	bf00      	nop
 800ef22:	e7fe      	b.n	800ef22 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef26:	685a      	ldr	r2, [r3, #4]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	69bb      	ldr	r3, [r7, #24]
 800ef2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	687a      	ldr	r2, [r7, #4]
 800ef34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef36:	69b8      	ldr	r0, [r7, #24]
 800ef38:	f000 f8fe 	bl	800f138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef3c:	4b1b      	ldr	r3, [pc, #108]	; (800efac <pvPortMalloc+0x188>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	4a19      	ldr	r2, [pc, #100]	; (800efac <pvPortMalloc+0x188>)
 800ef48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef4a:	4b18      	ldr	r3, [pc, #96]	; (800efac <pvPortMalloc+0x188>)
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	4b19      	ldr	r3, [pc, #100]	; (800efb4 <pvPortMalloc+0x190>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d203      	bcs.n	800ef5e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef56:	4b15      	ldr	r3, [pc, #84]	; (800efac <pvPortMalloc+0x188>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a16      	ldr	r2, [pc, #88]	; (800efb4 <pvPortMalloc+0x190>)
 800ef5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef60:	685a      	ldr	r2, [r3, #4]
 800ef62:	4b11      	ldr	r3, [pc, #68]	; (800efa8 <pvPortMalloc+0x184>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	431a      	orrs	r2, r3
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	2200      	movs	r2, #0
 800ef70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef72:	f7fe ff27 	bl	800ddc4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	f003 0307 	and.w	r3, r3, #7
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00c      	beq.n	800ef9a <pvPortMalloc+0x176>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	b672      	cpsid	i
 800ef86:	f383 8811 	msr	BASEPRI, r3
 800ef8a:	f3bf 8f6f 	isb	sy
 800ef8e:	f3bf 8f4f 	dsb	sy
 800ef92:	b662      	cpsie	i
 800ef94:	60fb      	str	r3, [r7, #12]
}
 800ef96:	bf00      	nop
 800ef98:	e7fe      	b.n	800ef98 <pvPortMalloc+0x174>
	return pvReturn;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3728      	adds	r7, #40	; 0x28
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	20007438 	.word	0x20007438
 800efa8:	20007444 	.word	0x20007444
 800efac:	2000743c 	.word	0x2000743c
 800efb0:	20007430 	.word	0x20007430
 800efb4:	20007440 	.word	0x20007440

0800efb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b086      	sub	sp, #24
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d04c      	beq.n	800f064 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efca:	2308      	movs	r3, #8
 800efcc:	425b      	negs	r3, r3
 800efce:	697a      	ldr	r2, [r7, #20]
 800efd0:	4413      	add	r3, r2
 800efd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	4b23      	ldr	r3, [pc, #140]	; (800f06c <vPortFree+0xb4>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4013      	ands	r3, r2
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d10c      	bne.n	800f000 <vPortFree+0x48>
	__asm volatile
 800efe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efea:	b672      	cpsid	i
 800efec:	f383 8811 	msr	BASEPRI, r3
 800eff0:	f3bf 8f6f 	isb	sy
 800eff4:	f3bf 8f4f 	dsb	sy
 800eff8:	b662      	cpsie	i
 800effa:	60fb      	str	r3, [r7, #12]
}
 800effc:	bf00      	nop
 800effe:	e7fe      	b.n	800effe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00c      	beq.n	800f022 <vPortFree+0x6a>
	__asm volatile
 800f008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00c:	b672      	cpsid	i
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	b662      	cpsie	i
 800f01c:	60bb      	str	r3, [r7, #8]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	685a      	ldr	r2, [r3, #4]
 800f026:	4b11      	ldr	r3, [pc, #68]	; (800f06c <vPortFree+0xb4>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4013      	ands	r3, r2
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d019      	beq.n	800f064 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d115      	bne.n	800f064 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	4b0b      	ldr	r3, [pc, #44]	; (800f06c <vPortFree+0xb4>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	43db      	mvns	r3, r3
 800f042:	401a      	ands	r2, r3
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f048:	f7fe feae 	bl	800dda8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <vPortFree+0xb8>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4413      	add	r3, r2
 800f056:	4a06      	ldr	r2, [pc, #24]	; (800f070 <vPortFree+0xb8>)
 800f058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f05a:	6938      	ldr	r0, [r7, #16]
 800f05c:	f000 f86c 	bl	800f138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f060:	f7fe feb0 	bl	800ddc4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f064:	bf00      	nop
 800f066:	3718      	adds	r7, #24
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	20007444 	.word	0x20007444
 800f070:	2000743c 	.word	0x2000743c

0800f074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f07a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f07e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f080:	4b27      	ldr	r3, [pc, #156]	; (800f120 <prvHeapInit+0xac>)
 800f082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f003 0307 	and.w	r3, r3, #7
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00c      	beq.n	800f0a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3307      	adds	r3, #7
 800f092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f023 0307 	bic.w	r3, r3, #7
 800f09a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f09c:	68ba      	ldr	r2, [r7, #8]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	4a1f      	ldr	r2, [pc, #124]	; (800f120 <prvHeapInit+0xac>)
 800f0a4:	4413      	add	r3, r2
 800f0a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0ac:	4a1d      	ldr	r2, [pc, #116]	; (800f124 <prvHeapInit+0xb0>)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f0b2:	4b1c      	ldr	r3, [pc, #112]	; (800f124 <prvHeapInit+0xb0>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	4413      	add	r3, r2
 800f0be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0c0:	2208      	movs	r2, #8
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f023 0307 	bic.w	r3, r3, #7
 800f0ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	4a15      	ldr	r2, [pc, #84]	; (800f128 <prvHeapInit+0xb4>)
 800f0d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0d6:	4b14      	ldr	r3, [pc, #80]	; (800f128 <prvHeapInit+0xb4>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0de:	4b12      	ldr	r3, [pc, #72]	; (800f128 <prvHeapInit+0xb4>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	68fa      	ldr	r2, [r7, #12]
 800f0ee:	1ad2      	subs	r2, r2, r3
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0f4:	4b0c      	ldr	r3, [pc, #48]	; (800f128 <prvHeapInit+0xb4>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	4a0a      	ldr	r2, [pc, #40]	; (800f12c <prvHeapInit+0xb8>)
 800f102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	4a09      	ldr	r2, [pc, #36]	; (800f130 <prvHeapInit+0xbc>)
 800f10a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f10c:	4b09      	ldr	r3, [pc, #36]	; (800f134 <prvHeapInit+0xc0>)
 800f10e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f112:	601a      	str	r2, [r3, #0]
}
 800f114:	bf00      	nop
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	4770      	bx	lr
 800f120:	20003830 	.word	0x20003830
 800f124:	20007430 	.word	0x20007430
 800f128:	20007438 	.word	0x20007438
 800f12c:	20007440 	.word	0x20007440
 800f130:	2000743c 	.word	0x2000743c
 800f134:	20007444 	.word	0x20007444

0800f138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f140:	4b28      	ldr	r3, [pc, #160]	; (800f1e4 <prvInsertBlockIntoFreeList+0xac>)
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e002      	b.n	800f14c <prvInsertBlockIntoFreeList+0x14>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	687a      	ldr	r2, [r7, #4]
 800f152:	429a      	cmp	r2, r3
 800f154:	d8f7      	bhi.n	800f146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	4413      	add	r3, r2
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	429a      	cmp	r2, r3
 800f166:	d108      	bne.n	800f17a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	685a      	ldr	r2, [r3, #4]
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	441a      	add	r2, r3
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	441a      	add	r2, r3
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d118      	bne.n	800f1c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	4b15      	ldr	r3, [pc, #84]	; (800f1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	429a      	cmp	r2, r3
 800f198:	d00d      	beq.n	800f1b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685a      	ldr	r2, [r3, #4]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	685b      	ldr	r3, [r3, #4]
 800f1a4:	441a      	add	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	601a      	str	r2, [r3, #0]
 800f1b4:	e008      	b.n	800f1c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f1b6:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f1b8:	681a      	ldr	r2, [r3, #0]
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	e003      	b.n	800f1c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1c8:	68fa      	ldr	r2, [r7, #12]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d002      	beq.n	800f1d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1d6:	bf00      	nop
 800f1d8:	3714      	adds	r7, #20
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e0:	4770      	bx	lr
 800f1e2:	bf00      	nop
 800f1e4:	20007430 	.word	0x20007430
 800f1e8:	20007438 	.word	0x20007438

0800f1ec <srand>:
 800f1ec:	b538      	push	{r3, r4, r5, lr}
 800f1ee:	4b10      	ldr	r3, [pc, #64]	; (800f230 <srand+0x44>)
 800f1f0:	681d      	ldr	r5, [r3, #0]
 800f1f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	b9b3      	cbnz	r3, 800f226 <srand+0x3a>
 800f1f8:	2018      	movs	r0, #24
 800f1fa:	f000 faa7 	bl	800f74c <malloc>
 800f1fe:	4602      	mov	r2, r0
 800f200:	6328      	str	r0, [r5, #48]	; 0x30
 800f202:	b920      	cbnz	r0, 800f20e <srand+0x22>
 800f204:	4b0b      	ldr	r3, [pc, #44]	; (800f234 <srand+0x48>)
 800f206:	480c      	ldr	r0, [pc, #48]	; (800f238 <srand+0x4c>)
 800f208:	2146      	movs	r1, #70	; 0x46
 800f20a:	f000 fa35 	bl	800f678 <__assert_func>
 800f20e:	490b      	ldr	r1, [pc, #44]	; (800f23c <srand+0x50>)
 800f210:	4b0b      	ldr	r3, [pc, #44]	; (800f240 <srand+0x54>)
 800f212:	e9c0 1300 	strd	r1, r3, [r0]
 800f216:	4b0b      	ldr	r3, [pc, #44]	; (800f244 <srand+0x58>)
 800f218:	6083      	str	r3, [r0, #8]
 800f21a:	230b      	movs	r3, #11
 800f21c:	8183      	strh	r3, [r0, #12]
 800f21e:	2100      	movs	r1, #0
 800f220:	2001      	movs	r0, #1
 800f222:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f226:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f228:	2200      	movs	r2, #0
 800f22a:	611c      	str	r4, [r3, #16]
 800f22c:	615a      	str	r2, [r3, #20]
 800f22e:	bd38      	pop	{r3, r4, r5, pc}
 800f230:	200000cc 	.word	0x200000cc
 800f234:	08011884 	.word	0x08011884
 800f238:	0801189b 	.word	0x0801189b
 800f23c:	abcd330e 	.word	0xabcd330e
 800f240:	e66d1234 	.word	0xe66d1234
 800f244:	0005deec 	.word	0x0005deec

0800f248 <std>:
 800f248:	2300      	movs	r3, #0
 800f24a:	b510      	push	{r4, lr}
 800f24c:	4604      	mov	r4, r0
 800f24e:	e9c0 3300 	strd	r3, r3, [r0]
 800f252:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f256:	6083      	str	r3, [r0, #8]
 800f258:	8181      	strh	r1, [r0, #12]
 800f25a:	6643      	str	r3, [r0, #100]	; 0x64
 800f25c:	81c2      	strh	r2, [r0, #14]
 800f25e:	6183      	str	r3, [r0, #24]
 800f260:	4619      	mov	r1, r3
 800f262:	2208      	movs	r2, #8
 800f264:	305c      	adds	r0, #92	; 0x5c
 800f266:	f000 f916 	bl	800f496 <memset>
 800f26a:	4b05      	ldr	r3, [pc, #20]	; (800f280 <std+0x38>)
 800f26c:	6263      	str	r3, [r4, #36]	; 0x24
 800f26e:	4b05      	ldr	r3, [pc, #20]	; (800f284 <std+0x3c>)
 800f270:	62a3      	str	r3, [r4, #40]	; 0x28
 800f272:	4b05      	ldr	r3, [pc, #20]	; (800f288 <std+0x40>)
 800f274:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f276:	4b05      	ldr	r3, [pc, #20]	; (800f28c <std+0x44>)
 800f278:	6224      	str	r4, [r4, #32]
 800f27a:	6323      	str	r3, [r4, #48]	; 0x30
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop
 800f280:	0800f411 	.word	0x0800f411
 800f284:	0800f433 	.word	0x0800f433
 800f288:	0800f46b 	.word	0x0800f46b
 800f28c:	0800f48f 	.word	0x0800f48f

0800f290 <stdio_exit_handler>:
 800f290:	4a02      	ldr	r2, [pc, #8]	; (800f29c <stdio_exit_handler+0xc>)
 800f292:	4903      	ldr	r1, [pc, #12]	; (800f2a0 <stdio_exit_handler+0x10>)
 800f294:	4803      	ldr	r0, [pc, #12]	; (800f2a4 <stdio_exit_handler+0x14>)
 800f296:	f000 b869 	b.w	800f36c <_fwalk_sglue>
 800f29a:	bf00      	nop
 800f29c:	20000074 	.word	0x20000074
 800f2a0:	0800ff91 	.word	0x0800ff91
 800f2a4:	20000080 	.word	0x20000080

0800f2a8 <cleanup_stdio>:
 800f2a8:	6841      	ldr	r1, [r0, #4]
 800f2aa:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <cleanup_stdio+0x34>)
 800f2ac:	4299      	cmp	r1, r3
 800f2ae:	b510      	push	{r4, lr}
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	d001      	beq.n	800f2b8 <cleanup_stdio+0x10>
 800f2b4:	f000 fe6c 	bl	800ff90 <_fflush_r>
 800f2b8:	68a1      	ldr	r1, [r4, #8]
 800f2ba:	4b09      	ldr	r3, [pc, #36]	; (800f2e0 <cleanup_stdio+0x38>)
 800f2bc:	4299      	cmp	r1, r3
 800f2be:	d002      	beq.n	800f2c6 <cleanup_stdio+0x1e>
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 fe65 	bl	800ff90 <_fflush_r>
 800f2c6:	68e1      	ldr	r1, [r4, #12]
 800f2c8:	4b06      	ldr	r3, [pc, #24]	; (800f2e4 <cleanup_stdio+0x3c>)
 800f2ca:	4299      	cmp	r1, r3
 800f2cc:	d004      	beq.n	800f2d8 <cleanup_stdio+0x30>
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d4:	f000 be5c 	b.w	800ff90 <_fflush_r>
 800f2d8:	bd10      	pop	{r4, pc}
 800f2da:	bf00      	nop
 800f2dc:	20007448 	.word	0x20007448
 800f2e0:	200074b0 	.word	0x200074b0
 800f2e4:	20007518 	.word	0x20007518

0800f2e8 <global_stdio_init.part.0>:
 800f2e8:	b510      	push	{r4, lr}
 800f2ea:	4b0b      	ldr	r3, [pc, #44]	; (800f318 <global_stdio_init.part.0+0x30>)
 800f2ec:	4c0b      	ldr	r4, [pc, #44]	; (800f31c <global_stdio_init.part.0+0x34>)
 800f2ee:	4a0c      	ldr	r2, [pc, #48]	; (800f320 <global_stdio_init.part.0+0x38>)
 800f2f0:	601a      	str	r2, [r3, #0]
 800f2f2:	4620      	mov	r0, r4
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	2104      	movs	r1, #4
 800f2f8:	f7ff ffa6 	bl	800f248 <std>
 800f2fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f300:	2201      	movs	r2, #1
 800f302:	2109      	movs	r1, #9
 800f304:	f7ff ffa0 	bl	800f248 <std>
 800f308:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f30c:	2202      	movs	r2, #2
 800f30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f312:	2112      	movs	r1, #18
 800f314:	f7ff bf98 	b.w	800f248 <std>
 800f318:	20007580 	.word	0x20007580
 800f31c:	20007448 	.word	0x20007448
 800f320:	0800f291 	.word	0x0800f291

0800f324 <__sfp_lock_acquire>:
 800f324:	4801      	ldr	r0, [pc, #4]	; (800f32c <__sfp_lock_acquire+0x8>)
 800f326:	f000 b997 	b.w	800f658 <__retarget_lock_acquire_recursive>
 800f32a:	bf00      	nop
 800f32c:	20007589 	.word	0x20007589

0800f330 <__sfp_lock_release>:
 800f330:	4801      	ldr	r0, [pc, #4]	; (800f338 <__sfp_lock_release+0x8>)
 800f332:	f000 b992 	b.w	800f65a <__retarget_lock_release_recursive>
 800f336:	bf00      	nop
 800f338:	20007589 	.word	0x20007589

0800f33c <__sinit>:
 800f33c:	b510      	push	{r4, lr}
 800f33e:	4604      	mov	r4, r0
 800f340:	f7ff fff0 	bl	800f324 <__sfp_lock_acquire>
 800f344:	6a23      	ldr	r3, [r4, #32]
 800f346:	b11b      	cbz	r3, 800f350 <__sinit+0x14>
 800f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f34c:	f7ff bff0 	b.w	800f330 <__sfp_lock_release>
 800f350:	4b04      	ldr	r3, [pc, #16]	; (800f364 <__sinit+0x28>)
 800f352:	6223      	str	r3, [r4, #32]
 800f354:	4b04      	ldr	r3, [pc, #16]	; (800f368 <__sinit+0x2c>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1f5      	bne.n	800f348 <__sinit+0xc>
 800f35c:	f7ff ffc4 	bl	800f2e8 <global_stdio_init.part.0>
 800f360:	e7f2      	b.n	800f348 <__sinit+0xc>
 800f362:	bf00      	nop
 800f364:	0800f2a9 	.word	0x0800f2a9
 800f368:	20007580 	.word	0x20007580

0800f36c <_fwalk_sglue>:
 800f36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f370:	4607      	mov	r7, r0
 800f372:	4688      	mov	r8, r1
 800f374:	4614      	mov	r4, r2
 800f376:	2600      	movs	r6, #0
 800f378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f37c:	f1b9 0901 	subs.w	r9, r9, #1
 800f380:	d505      	bpl.n	800f38e <_fwalk_sglue+0x22>
 800f382:	6824      	ldr	r4, [r4, #0]
 800f384:	2c00      	cmp	r4, #0
 800f386:	d1f7      	bne.n	800f378 <_fwalk_sglue+0xc>
 800f388:	4630      	mov	r0, r6
 800f38a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f38e:	89ab      	ldrh	r3, [r5, #12]
 800f390:	2b01      	cmp	r3, #1
 800f392:	d907      	bls.n	800f3a4 <_fwalk_sglue+0x38>
 800f394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f398:	3301      	adds	r3, #1
 800f39a:	d003      	beq.n	800f3a4 <_fwalk_sglue+0x38>
 800f39c:	4629      	mov	r1, r5
 800f39e:	4638      	mov	r0, r7
 800f3a0:	47c0      	blx	r8
 800f3a2:	4306      	orrs	r6, r0
 800f3a4:	3568      	adds	r5, #104	; 0x68
 800f3a6:	e7e9      	b.n	800f37c <_fwalk_sglue+0x10>

0800f3a8 <sniprintf>:
 800f3a8:	b40c      	push	{r2, r3}
 800f3aa:	b530      	push	{r4, r5, lr}
 800f3ac:	4b17      	ldr	r3, [pc, #92]	; (800f40c <sniprintf+0x64>)
 800f3ae:	1e0c      	subs	r4, r1, #0
 800f3b0:	681d      	ldr	r5, [r3, #0]
 800f3b2:	b09d      	sub	sp, #116	; 0x74
 800f3b4:	da08      	bge.n	800f3c8 <sniprintf+0x20>
 800f3b6:	238b      	movs	r3, #139	; 0x8b
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f3be:	b01d      	add	sp, #116	; 0x74
 800f3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3c4:	b002      	add	sp, #8
 800f3c6:	4770      	bx	lr
 800f3c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f3cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f3d0:	bf14      	ite	ne
 800f3d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f3d6:	4623      	moveq	r3, r4
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	9307      	str	r3, [sp, #28]
 800f3dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f3e0:	9002      	str	r0, [sp, #8]
 800f3e2:	9006      	str	r0, [sp, #24]
 800f3e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f3e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f3ea:	ab21      	add	r3, sp, #132	; 0x84
 800f3ec:	a902      	add	r1, sp, #8
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	9301      	str	r3, [sp, #4]
 800f3f2:	f000 fab9 	bl	800f968 <_svfiprintf_r>
 800f3f6:	1c43      	adds	r3, r0, #1
 800f3f8:	bfbc      	itt	lt
 800f3fa:	238b      	movlt	r3, #139	; 0x8b
 800f3fc:	602b      	strlt	r3, [r5, #0]
 800f3fe:	2c00      	cmp	r4, #0
 800f400:	d0dd      	beq.n	800f3be <sniprintf+0x16>
 800f402:	9b02      	ldr	r3, [sp, #8]
 800f404:	2200      	movs	r2, #0
 800f406:	701a      	strb	r2, [r3, #0]
 800f408:	e7d9      	b.n	800f3be <sniprintf+0x16>
 800f40a:	bf00      	nop
 800f40c:	200000cc 	.word	0x200000cc

0800f410 <__sread>:
 800f410:	b510      	push	{r4, lr}
 800f412:	460c      	mov	r4, r1
 800f414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f418:	f000 f8d0 	bl	800f5bc <_read_r>
 800f41c:	2800      	cmp	r0, #0
 800f41e:	bfab      	itete	ge
 800f420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f422:	89a3      	ldrhlt	r3, [r4, #12]
 800f424:	181b      	addge	r3, r3, r0
 800f426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f42a:	bfac      	ite	ge
 800f42c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f42e:	81a3      	strhlt	r3, [r4, #12]
 800f430:	bd10      	pop	{r4, pc}

0800f432 <__swrite>:
 800f432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f436:	461f      	mov	r7, r3
 800f438:	898b      	ldrh	r3, [r1, #12]
 800f43a:	05db      	lsls	r3, r3, #23
 800f43c:	4605      	mov	r5, r0
 800f43e:	460c      	mov	r4, r1
 800f440:	4616      	mov	r6, r2
 800f442:	d505      	bpl.n	800f450 <__swrite+0x1e>
 800f444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f448:	2302      	movs	r3, #2
 800f44a:	2200      	movs	r2, #0
 800f44c:	f000 f8a4 	bl	800f598 <_lseek_r>
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f45a:	81a3      	strh	r3, [r4, #12]
 800f45c:	4632      	mov	r2, r6
 800f45e:	463b      	mov	r3, r7
 800f460:	4628      	mov	r0, r5
 800f462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f466:	f000 b8bb 	b.w	800f5e0 <_write_r>

0800f46a <__sseek>:
 800f46a:	b510      	push	{r4, lr}
 800f46c:	460c      	mov	r4, r1
 800f46e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f472:	f000 f891 	bl	800f598 <_lseek_r>
 800f476:	1c43      	adds	r3, r0, #1
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	bf15      	itete	ne
 800f47c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f47e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f486:	81a3      	strheq	r3, [r4, #12]
 800f488:	bf18      	it	ne
 800f48a:	81a3      	strhne	r3, [r4, #12]
 800f48c:	bd10      	pop	{r4, pc}

0800f48e <__sclose>:
 800f48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f492:	f000 b81b 	b.w	800f4cc <_close_r>

0800f496 <memset>:
 800f496:	4402      	add	r2, r0
 800f498:	4603      	mov	r3, r0
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d100      	bne.n	800f4a0 <memset+0xa>
 800f49e:	4770      	bx	lr
 800f4a0:	f803 1b01 	strb.w	r1, [r3], #1
 800f4a4:	e7f9      	b.n	800f49a <memset+0x4>

0800f4a6 <strncpy>:
 800f4a6:	b510      	push	{r4, lr}
 800f4a8:	3901      	subs	r1, #1
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	b132      	cbz	r2, 800f4bc <strncpy+0x16>
 800f4ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f4b2:	f803 4b01 	strb.w	r4, [r3], #1
 800f4b6:	3a01      	subs	r2, #1
 800f4b8:	2c00      	cmp	r4, #0
 800f4ba:	d1f7      	bne.n	800f4ac <strncpy+0x6>
 800f4bc:	441a      	add	r2, r3
 800f4be:	2100      	movs	r1, #0
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d100      	bne.n	800f4c6 <strncpy+0x20>
 800f4c4:	bd10      	pop	{r4, pc}
 800f4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800f4ca:	e7f9      	b.n	800f4c0 <strncpy+0x1a>

0800f4cc <_close_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	4d06      	ldr	r5, [pc, #24]	; (800f4e8 <_close_r+0x1c>)
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	4608      	mov	r0, r1
 800f4d6:	602b      	str	r3, [r5, #0]
 800f4d8:	f7f6 fbdf 	bl	8005c9a <_close>
 800f4dc:	1c43      	adds	r3, r0, #1
 800f4de:	d102      	bne.n	800f4e6 <_close_r+0x1a>
 800f4e0:	682b      	ldr	r3, [r5, #0]
 800f4e2:	b103      	cbz	r3, 800f4e6 <_close_r+0x1a>
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	bd38      	pop	{r3, r4, r5, pc}
 800f4e8:	20007584 	.word	0x20007584

0800f4ec <_reclaim_reent>:
 800f4ec:	4b29      	ldr	r3, [pc, #164]	; (800f594 <_reclaim_reent+0xa8>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4283      	cmp	r3, r0
 800f4f2:	b570      	push	{r4, r5, r6, lr}
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	d04b      	beq.n	800f590 <_reclaim_reent+0xa4>
 800f4f8:	69c3      	ldr	r3, [r0, #28]
 800f4fa:	b143      	cbz	r3, 800f50e <_reclaim_reent+0x22>
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d144      	bne.n	800f58c <_reclaim_reent+0xa0>
 800f502:	69e3      	ldr	r3, [r4, #28]
 800f504:	6819      	ldr	r1, [r3, #0]
 800f506:	b111      	cbz	r1, 800f50e <_reclaim_reent+0x22>
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 f8d3 	bl	800f6b4 <_free_r>
 800f50e:	6961      	ldr	r1, [r4, #20]
 800f510:	b111      	cbz	r1, 800f518 <_reclaim_reent+0x2c>
 800f512:	4620      	mov	r0, r4
 800f514:	f000 f8ce 	bl	800f6b4 <_free_r>
 800f518:	69e1      	ldr	r1, [r4, #28]
 800f51a:	b111      	cbz	r1, 800f522 <_reclaim_reent+0x36>
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 f8c9 	bl	800f6b4 <_free_r>
 800f522:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f524:	b111      	cbz	r1, 800f52c <_reclaim_reent+0x40>
 800f526:	4620      	mov	r0, r4
 800f528:	f000 f8c4 	bl	800f6b4 <_free_r>
 800f52c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f52e:	b111      	cbz	r1, 800f536 <_reclaim_reent+0x4a>
 800f530:	4620      	mov	r0, r4
 800f532:	f000 f8bf 	bl	800f6b4 <_free_r>
 800f536:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f538:	b111      	cbz	r1, 800f540 <_reclaim_reent+0x54>
 800f53a:	4620      	mov	r0, r4
 800f53c:	f000 f8ba 	bl	800f6b4 <_free_r>
 800f540:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f542:	b111      	cbz	r1, 800f54a <_reclaim_reent+0x5e>
 800f544:	4620      	mov	r0, r4
 800f546:	f000 f8b5 	bl	800f6b4 <_free_r>
 800f54a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f54c:	b111      	cbz	r1, 800f554 <_reclaim_reent+0x68>
 800f54e:	4620      	mov	r0, r4
 800f550:	f000 f8b0 	bl	800f6b4 <_free_r>
 800f554:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f556:	b111      	cbz	r1, 800f55e <_reclaim_reent+0x72>
 800f558:	4620      	mov	r0, r4
 800f55a:	f000 f8ab 	bl	800f6b4 <_free_r>
 800f55e:	6a23      	ldr	r3, [r4, #32]
 800f560:	b1b3      	cbz	r3, 800f590 <_reclaim_reent+0xa4>
 800f562:	4620      	mov	r0, r4
 800f564:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f568:	4718      	bx	r3
 800f56a:	5949      	ldr	r1, [r1, r5]
 800f56c:	b941      	cbnz	r1, 800f580 <_reclaim_reent+0x94>
 800f56e:	3504      	adds	r5, #4
 800f570:	69e3      	ldr	r3, [r4, #28]
 800f572:	2d80      	cmp	r5, #128	; 0x80
 800f574:	68d9      	ldr	r1, [r3, #12]
 800f576:	d1f8      	bne.n	800f56a <_reclaim_reent+0x7e>
 800f578:	4620      	mov	r0, r4
 800f57a:	f000 f89b 	bl	800f6b4 <_free_r>
 800f57e:	e7c0      	b.n	800f502 <_reclaim_reent+0x16>
 800f580:	680e      	ldr	r6, [r1, #0]
 800f582:	4620      	mov	r0, r4
 800f584:	f000 f896 	bl	800f6b4 <_free_r>
 800f588:	4631      	mov	r1, r6
 800f58a:	e7ef      	b.n	800f56c <_reclaim_reent+0x80>
 800f58c:	2500      	movs	r5, #0
 800f58e:	e7ef      	b.n	800f570 <_reclaim_reent+0x84>
 800f590:	bd70      	pop	{r4, r5, r6, pc}
 800f592:	bf00      	nop
 800f594:	200000cc 	.word	0x200000cc

0800f598 <_lseek_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4d07      	ldr	r5, [pc, #28]	; (800f5b8 <_lseek_r+0x20>)
 800f59c:	4604      	mov	r4, r0
 800f59e:	4608      	mov	r0, r1
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	602a      	str	r2, [r5, #0]
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	f7f6 fb9e 	bl	8005ce8 <_lseek>
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	d102      	bne.n	800f5b6 <_lseek_r+0x1e>
 800f5b0:	682b      	ldr	r3, [r5, #0]
 800f5b2:	b103      	cbz	r3, 800f5b6 <_lseek_r+0x1e>
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	bd38      	pop	{r3, r4, r5, pc}
 800f5b8:	20007584 	.word	0x20007584

0800f5bc <_read_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4d07      	ldr	r5, [pc, #28]	; (800f5dc <_read_r+0x20>)
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	4608      	mov	r0, r1
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	602a      	str	r2, [r5, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	f7f6 fb48 	bl	8005c60 <_read>
 800f5d0:	1c43      	adds	r3, r0, #1
 800f5d2:	d102      	bne.n	800f5da <_read_r+0x1e>
 800f5d4:	682b      	ldr	r3, [r5, #0]
 800f5d6:	b103      	cbz	r3, 800f5da <_read_r+0x1e>
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	bd38      	pop	{r3, r4, r5, pc}
 800f5dc:	20007584 	.word	0x20007584

0800f5e0 <_write_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	4d07      	ldr	r5, [pc, #28]	; (800f600 <_write_r+0x20>)
 800f5e4:	4604      	mov	r4, r0
 800f5e6:	4608      	mov	r0, r1
 800f5e8:	4611      	mov	r1, r2
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	602a      	str	r2, [r5, #0]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	f7f3 fa40 	bl	8002a74 <_write>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d102      	bne.n	800f5fe <_write_r+0x1e>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	b103      	cbz	r3, 800f5fe <_write_r+0x1e>
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	20007584 	.word	0x20007584

0800f604 <__errno>:
 800f604:	4b01      	ldr	r3, [pc, #4]	; (800f60c <__errno+0x8>)
 800f606:	6818      	ldr	r0, [r3, #0]
 800f608:	4770      	bx	lr
 800f60a:	bf00      	nop
 800f60c:	200000cc 	.word	0x200000cc

0800f610 <__libc_init_array>:
 800f610:	b570      	push	{r4, r5, r6, lr}
 800f612:	4d0d      	ldr	r5, [pc, #52]	; (800f648 <__libc_init_array+0x38>)
 800f614:	4c0d      	ldr	r4, [pc, #52]	; (800f64c <__libc_init_array+0x3c>)
 800f616:	1b64      	subs	r4, r4, r5
 800f618:	10a4      	asrs	r4, r4, #2
 800f61a:	2600      	movs	r6, #0
 800f61c:	42a6      	cmp	r6, r4
 800f61e:	d109      	bne.n	800f634 <__libc_init_array+0x24>
 800f620:	4d0b      	ldr	r5, [pc, #44]	; (800f650 <__libc_init_array+0x40>)
 800f622:	4c0c      	ldr	r4, [pc, #48]	; (800f654 <__libc_init_array+0x44>)
 800f624:	f002 f834 	bl	8011690 <_init>
 800f628:	1b64      	subs	r4, r4, r5
 800f62a:	10a4      	asrs	r4, r4, #2
 800f62c:	2600      	movs	r6, #0
 800f62e:	42a6      	cmp	r6, r4
 800f630:	d105      	bne.n	800f63e <__libc_init_array+0x2e>
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	f855 3b04 	ldr.w	r3, [r5], #4
 800f638:	4798      	blx	r3
 800f63a:	3601      	adds	r6, #1
 800f63c:	e7ee      	b.n	800f61c <__libc_init_array+0xc>
 800f63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f642:	4798      	blx	r3
 800f644:	3601      	adds	r6, #1
 800f646:	e7f2      	b.n	800f62e <__libc_init_array+0x1e>
 800f648:	08011b48 	.word	0x08011b48
 800f64c:	08011b48 	.word	0x08011b48
 800f650:	08011b48 	.word	0x08011b48
 800f654:	08011b4c 	.word	0x08011b4c

0800f658 <__retarget_lock_acquire_recursive>:
 800f658:	4770      	bx	lr

0800f65a <__retarget_lock_release_recursive>:
 800f65a:	4770      	bx	lr

0800f65c <memcpy>:
 800f65c:	440a      	add	r2, r1
 800f65e:	4291      	cmp	r1, r2
 800f660:	f100 33ff 	add.w	r3, r0, #4294967295
 800f664:	d100      	bne.n	800f668 <memcpy+0xc>
 800f666:	4770      	bx	lr
 800f668:	b510      	push	{r4, lr}
 800f66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f672:	4291      	cmp	r1, r2
 800f674:	d1f9      	bne.n	800f66a <memcpy+0xe>
 800f676:	bd10      	pop	{r4, pc}

0800f678 <__assert_func>:
 800f678:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f67a:	4614      	mov	r4, r2
 800f67c:	461a      	mov	r2, r3
 800f67e:	4b09      	ldr	r3, [pc, #36]	; (800f6a4 <__assert_func+0x2c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4605      	mov	r5, r0
 800f684:	68d8      	ldr	r0, [r3, #12]
 800f686:	b14c      	cbz	r4, 800f69c <__assert_func+0x24>
 800f688:	4b07      	ldr	r3, [pc, #28]	; (800f6a8 <__assert_func+0x30>)
 800f68a:	9100      	str	r1, [sp, #0]
 800f68c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f690:	4906      	ldr	r1, [pc, #24]	; (800f6ac <__assert_func+0x34>)
 800f692:	462b      	mov	r3, r5
 800f694:	f000 fca4 	bl	800ffe0 <fiprintf>
 800f698:	f000 fcde 	bl	8010058 <abort>
 800f69c:	4b04      	ldr	r3, [pc, #16]	; (800f6b0 <__assert_func+0x38>)
 800f69e:	461c      	mov	r4, r3
 800f6a0:	e7f3      	b.n	800f68a <__assert_func+0x12>
 800f6a2:	bf00      	nop
 800f6a4:	200000cc 	.word	0x200000cc
 800f6a8:	080118f3 	.word	0x080118f3
 800f6ac:	08011900 	.word	0x08011900
 800f6b0:	0801192e 	.word	0x0801192e

0800f6b4 <_free_r>:
 800f6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f6b6:	2900      	cmp	r1, #0
 800f6b8:	d044      	beq.n	800f744 <_free_r+0x90>
 800f6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6be:	9001      	str	r0, [sp, #4]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	f1a1 0404 	sub.w	r4, r1, #4
 800f6c6:	bfb8      	it	lt
 800f6c8:	18e4      	addlt	r4, r4, r3
 800f6ca:	f000 f8e7 	bl	800f89c <__malloc_lock>
 800f6ce:	4a1e      	ldr	r2, [pc, #120]	; (800f748 <_free_r+0x94>)
 800f6d0:	9801      	ldr	r0, [sp, #4]
 800f6d2:	6813      	ldr	r3, [r2, #0]
 800f6d4:	b933      	cbnz	r3, 800f6e4 <_free_r+0x30>
 800f6d6:	6063      	str	r3, [r4, #4]
 800f6d8:	6014      	str	r4, [r2, #0]
 800f6da:	b003      	add	sp, #12
 800f6dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6e0:	f000 b8e2 	b.w	800f8a8 <__malloc_unlock>
 800f6e4:	42a3      	cmp	r3, r4
 800f6e6:	d908      	bls.n	800f6fa <_free_r+0x46>
 800f6e8:	6825      	ldr	r5, [r4, #0]
 800f6ea:	1961      	adds	r1, r4, r5
 800f6ec:	428b      	cmp	r3, r1
 800f6ee:	bf01      	itttt	eq
 800f6f0:	6819      	ldreq	r1, [r3, #0]
 800f6f2:	685b      	ldreq	r3, [r3, #4]
 800f6f4:	1949      	addeq	r1, r1, r5
 800f6f6:	6021      	streq	r1, [r4, #0]
 800f6f8:	e7ed      	b.n	800f6d6 <_free_r+0x22>
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	b10b      	cbz	r3, 800f704 <_free_r+0x50>
 800f700:	42a3      	cmp	r3, r4
 800f702:	d9fa      	bls.n	800f6fa <_free_r+0x46>
 800f704:	6811      	ldr	r1, [r2, #0]
 800f706:	1855      	adds	r5, r2, r1
 800f708:	42a5      	cmp	r5, r4
 800f70a:	d10b      	bne.n	800f724 <_free_r+0x70>
 800f70c:	6824      	ldr	r4, [r4, #0]
 800f70e:	4421      	add	r1, r4
 800f710:	1854      	adds	r4, r2, r1
 800f712:	42a3      	cmp	r3, r4
 800f714:	6011      	str	r1, [r2, #0]
 800f716:	d1e0      	bne.n	800f6da <_free_r+0x26>
 800f718:	681c      	ldr	r4, [r3, #0]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	6053      	str	r3, [r2, #4]
 800f71e:	440c      	add	r4, r1
 800f720:	6014      	str	r4, [r2, #0]
 800f722:	e7da      	b.n	800f6da <_free_r+0x26>
 800f724:	d902      	bls.n	800f72c <_free_r+0x78>
 800f726:	230c      	movs	r3, #12
 800f728:	6003      	str	r3, [r0, #0]
 800f72a:	e7d6      	b.n	800f6da <_free_r+0x26>
 800f72c:	6825      	ldr	r5, [r4, #0]
 800f72e:	1961      	adds	r1, r4, r5
 800f730:	428b      	cmp	r3, r1
 800f732:	bf04      	itt	eq
 800f734:	6819      	ldreq	r1, [r3, #0]
 800f736:	685b      	ldreq	r3, [r3, #4]
 800f738:	6063      	str	r3, [r4, #4]
 800f73a:	bf04      	itt	eq
 800f73c:	1949      	addeq	r1, r1, r5
 800f73e:	6021      	streq	r1, [r4, #0]
 800f740:	6054      	str	r4, [r2, #4]
 800f742:	e7ca      	b.n	800f6da <_free_r+0x26>
 800f744:	b003      	add	sp, #12
 800f746:	bd30      	pop	{r4, r5, pc}
 800f748:	2000758c 	.word	0x2000758c

0800f74c <malloc>:
 800f74c:	4b02      	ldr	r3, [pc, #8]	; (800f758 <malloc+0xc>)
 800f74e:	4601      	mov	r1, r0
 800f750:	6818      	ldr	r0, [r3, #0]
 800f752:	f000 b823 	b.w	800f79c <_malloc_r>
 800f756:	bf00      	nop
 800f758:	200000cc 	.word	0x200000cc

0800f75c <sbrk_aligned>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	4e0e      	ldr	r6, [pc, #56]	; (800f798 <sbrk_aligned+0x3c>)
 800f760:	460c      	mov	r4, r1
 800f762:	6831      	ldr	r1, [r6, #0]
 800f764:	4605      	mov	r5, r0
 800f766:	b911      	cbnz	r1, 800f76e <sbrk_aligned+0x12>
 800f768:	f000 fc66 	bl	8010038 <_sbrk_r>
 800f76c:	6030      	str	r0, [r6, #0]
 800f76e:	4621      	mov	r1, r4
 800f770:	4628      	mov	r0, r5
 800f772:	f000 fc61 	bl	8010038 <_sbrk_r>
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	d00a      	beq.n	800f790 <sbrk_aligned+0x34>
 800f77a:	1cc4      	adds	r4, r0, #3
 800f77c:	f024 0403 	bic.w	r4, r4, #3
 800f780:	42a0      	cmp	r0, r4
 800f782:	d007      	beq.n	800f794 <sbrk_aligned+0x38>
 800f784:	1a21      	subs	r1, r4, r0
 800f786:	4628      	mov	r0, r5
 800f788:	f000 fc56 	bl	8010038 <_sbrk_r>
 800f78c:	3001      	adds	r0, #1
 800f78e:	d101      	bne.n	800f794 <sbrk_aligned+0x38>
 800f790:	f04f 34ff 	mov.w	r4, #4294967295
 800f794:	4620      	mov	r0, r4
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	20007590 	.word	0x20007590

0800f79c <_malloc_r>:
 800f79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7a0:	1ccd      	adds	r5, r1, #3
 800f7a2:	f025 0503 	bic.w	r5, r5, #3
 800f7a6:	3508      	adds	r5, #8
 800f7a8:	2d0c      	cmp	r5, #12
 800f7aa:	bf38      	it	cc
 800f7ac:	250c      	movcc	r5, #12
 800f7ae:	2d00      	cmp	r5, #0
 800f7b0:	4607      	mov	r7, r0
 800f7b2:	db01      	blt.n	800f7b8 <_malloc_r+0x1c>
 800f7b4:	42a9      	cmp	r1, r5
 800f7b6:	d905      	bls.n	800f7c4 <_malloc_r+0x28>
 800f7b8:	230c      	movs	r3, #12
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	2600      	movs	r6, #0
 800f7be:	4630      	mov	r0, r6
 800f7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f898 <_malloc_r+0xfc>
 800f7c8:	f000 f868 	bl	800f89c <__malloc_lock>
 800f7cc:	f8d8 3000 	ldr.w	r3, [r8]
 800f7d0:	461c      	mov	r4, r3
 800f7d2:	bb5c      	cbnz	r4, 800f82c <_malloc_r+0x90>
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4638      	mov	r0, r7
 800f7d8:	f7ff ffc0 	bl	800f75c <sbrk_aligned>
 800f7dc:	1c43      	adds	r3, r0, #1
 800f7de:	4604      	mov	r4, r0
 800f7e0:	d155      	bne.n	800f88e <_malloc_r+0xf2>
 800f7e2:	f8d8 4000 	ldr.w	r4, [r8]
 800f7e6:	4626      	mov	r6, r4
 800f7e8:	2e00      	cmp	r6, #0
 800f7ea:	d145      	bne.n	800f878 <_malloc_r+0xdc>
 800f7ec:	2c00      	cmp	r4, #0
 800f7ee:	d048      	beq.n	800f882 <_malloc_r+0xe6>
 800f7f0:	6823      	ldr	r3, [r4, #0]
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	eb04 0903 	add.w	r9, r4, r3
 800f7fa:	f000 fc1d 	bl	8010038 <_sbrk_r>
 800f7fe:	4581      	cmp	r9, r0
 800f800:	d13f      	bne.n	800f882 <_malloc_r+0xe6>
 800f802:	6821      	ldr	r1, [r4, #0]
 800f804:	1a6d      	subs	r5, r5, r1
 800f806:	4629      	mov	r1, r5
 800f808:	4638      	mov	r0, r7
 800f80a:	f7ff ffa7 	bl	800f75c <sbrk_aligned>
 800f80e:	3001      	adds	r0, #1
 800f810:	d037      	beq.n	800f882 <_malloc_r+0xe6>
 800f812:	6823      	ldr	r3, [r4, #0]
 800f814:	442b      	add	r3, r5
 800f816:	6023      	str	r3, [r4, #0]
 800f818:	f8d8 3000 	ldr.w	r3, [r8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d038      	beq.n	800f892 <_malloc_r+0xf6>
 800f820:	685a      	ldr	r2, [r3, #4]
 800f822:	42a2      	cmp	r2, r4
 800f824:	d12b      	bne.n	800f87e <_malloc_r+0xe2>
 800f826:	2200      	movs	r2, #0
 800f828:	605a      	str	r2, [r3, #4]
 800f82a:	e00f      	b.n	800f84c <_malloc_r+0xb0>
 800f82c:	6822      	ldr	r2, [r4, #0]
 800f82e:	1b52      	subs	r2, r2, r5
 800f830:	d41f      	bmi.n	800f872 <_malloc_r+0xd6>
 800f832:	2a0b      	cmp	r2, #11
 800f834:	d917      	bls.n	800f866 <_malloc_r+0xca>
 800f836:	1961      	adds	r1, r4, r5
 800f838:	42a3      	cmp	r3, r4
 800f83a:	6025      	str	r5, [r4, #0]
 800f83c:	bf18      	it	ne
 800f83e:	6059      	strne	r1, [r3, #4]
 800f840:	6863      	ldr	r3, [r4, #4]
 800f842:	bf08      	it	eq
 800f844:	f8c8 1000 	streq.w	r1, [r8]
 800f848:	5162      	str	r2, [r4, r5]
 800f84a:	604b      	str	r3, [r1, #4]
 800f84c:	4638      	mov	r0, r7
 800f84e:	f104 060b 	add.w	r6, r4, #11
 800f852:	f000 f829 	bl	800f8a8 <__malloc_unlock>
 800f856:	f026 0607 	bic.w	r6, r6, #7
 800f85a:	1d23      	adds	r3, r4, #4
 800f85c:	1af2      	subs	r2, r6, r3
 800f85e:	d0ae      	beq.n	800f7be <_malloc_r+0x22>
 800f860:	1b9b      	subs	r3, r3, r6
 800f862:	50a3      	str	r3, [r4, r2]
 800f864:	e7ab      	b.n	800f7be <_malloc_r+0x22>
 800f866:	42a3      	cmp	r3, r4
 800f868:	6862      	ldr	r2, [r4, #4]
 800f86a:	d1dd      	bne.n	800f828 <_malloc_r+0x8c>
 800f86c:	f8c8 2000 	str.w	r2, [r8]
 800f870:	e7ec      	b.n	800f84c <_malloc_r+0xb0>
 800f872:	4623      	mov	r3, r4
 800f874:	6864      	ldr	r4, [r4, #4]
 800f876:	e7ac      	b.n	800f7d2 <_malloc_r+0x36>
 800f878:	4634      	mov	r4, r6
 800f87a:	6876      	ldr	r6, [r6, #4]
 800f87c:	e7b4      	b.n	800f7e8 <_malloc_r+0x4c>
 800f87e:	4613      	mov	r3, r2
 800f880:	e7cc      	b.n	800f81c <_malloc_r+0x80>
 800f882:	230c      	movs	r3, #12
 800f884:	603b      	str	r3, [r7, #0]
 800f886:	4638      	mov	r0, r7
 800f888:	f000 f80e 	bl	800f8a8 <__malloc_unlock>
 800f88c:	e797      	b.n	800f7be <_malloc_r+0x22>
 800f88e:	6025      	str	r5, [r4, #0]
 800f890:	e7dc      	b.n	800f84c <_malloc_r+0xb0>
 800f892:	605b      	str	r3, [r3, #4]
 800f894:	deff      	udf	#255	; 0xff
 800f896:	bf00      	nop
 800f898:	2000758c 	.word	0x2000758c

0800f89c <__malloc_lock>:
 800f89c:	4801      	ldr	r0, [pc, #4]	; (800f8a4 <__malloc_lock+0x8>)
 800f89e:	f7ff bedb 	b.w	800f658 <__retarget_lock_acquire_recursive>
 800f8a2:	bf00      	nop
 800f8a4:	20007588 	.word	0x20007588

0800f8a8 <__malloc_unlock>:
 800f8a8:	4801      	ldr	r0, [pc, #4]	; (800f8b0 <__malloc_unlock+0x8>)
 800f8aa:	f7ff bed6 	b.w	800f65a <__retarget_lock_release_recursive>
 800f8ae:	bf00      	nop
 800f8b0:	20007588 	.word	0x20007588

0800f8b4 <__ssputs_r>:
 800f8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b8:	688e      	ldr	r6, [r1, #8]
 800f8ba:	461f      	mov	r7, r3
 800f8bc:	42be      	cmp	r6, r7
 800f8be:	680b      	ldr	r3, [r1, #0]
 800f8c0:	4682      	mov	sl, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	4690      	mov	r8, r2
 800f8c6:	d82c      	bhi.n	800f922 <__ssputs_r+0x6e>
 800f8c8:	898a      	ldrh	r2, [r1, #12]
 800f8ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f8ce:	d026      	beq.n	800f91e <__ssputs_r+0x6a>
 800f8d0:	6965      	ldr	r5, [r4, #20]
 800f8d2:	6909      	ldr	r1, [r1, #16]
 800f8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f8d8:	eba3 0901 	sub.w	r9, r3, r1
 800f8dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f8e0:	1c7b      	adds	r3, r7, #1
 800f8e2:	444b      	add	r3, r9
 800f8e4:	106d      	asrs	r5, r5, #1
 800f8e6:	429d      	cmp	r5, r3
 800f8e8:	bf38      	it	cc
 800f8ea:	461d      	movcc	r5, r3
 800f8ec:	0553      	lsls	r3, r2, #21
 800f8ee:	d527      	bpl.n	800f940 <__ssputs_r+0x8c>
 800f8f0:	4629      	mov	r1, r5
 800f8f2:	f7ff ff53 	bl	800f79c <_malloc_r>
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	b360      	cbz	r0, 800f954 <__ssputs_r+0xa0>
 800f8fa:	6921      	ldr	r1, [r4, #16]
 800f8fc:	464a      	mov	r2, r9
 800f8fe:	f7ff fead 	bl	800f65c <memcpy>
 800f902:	89a3      	ldrh	r3, [r4, #12]
 800f904:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f90c:	81a3      	strh	r3, [r4, #12]
 800f90e:	6126      	str	r6, [r4, #16]
 800f910:	6165      	str	r5, [r4, #20]
 800f912:	444e      	add	r6, r9
 800f914:	eba5 0509 	sub.w	r5, r5, r9
 800f918:	6026      	str	r6, [r4, #0]
 800f91a:	60a5      	str	r5, [r4, #8]
 800f91c:	463e      	mov	r6, r7
 800f91e:	42be      	cmp	r6, r7
 800f920:	d900      	bls.n	800f924 <__ssputs_r+0x70>
 800f922:	463e      	mov	r6, r7
 800f924:	6820      	ldr	r0, [r4, #0]
 800f926:	4632      	mov	r2, r6
 800f928:	4641      	mov	r1, r8
 800f92a:	f000 fb6b 	bl	8010004 <memmove>
 800f92e:	68a3      	ldr	r3, [r4, #8]
 800f930:	1b9b      	subs	r3, r3, r6
 800f932:	60a3      	str	r3, [r4, #8]
 800f934:	6823      	ldr	r3, [r4, #0]
 800f936:	4433      	add	r3, r6
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	2000      	movs	r0, #0
 800f93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f940:	462a      	mov	r2, r5
 800f942:	f000 fb90 	bl	8010066 <_realloc_r>
 800f946:	4606      	mov	r6, r0
 800f948:	2800      	cmp	r0, #0
 800f94a:	d1e0      	bne.n	800f90e <__ssputs_r+0x5a>
 800f94c:	6921      	ldr	r1, [r4, #16]
 800f94e:	4650      	mov	r0, sl
 800f950:	f7ff feb0 	bl	800f6b4 <_free_r>
 800f954:	230c      	movs	r3, #12
 800f956:	f8ca 3000 	str.w	r3, [sl]
 800f95a:	89a3      	ldrh	r3, [r4, #12]
 800f95c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f960:	81a3      	strh	r3, [r4, #12]
 800f962:	f04f 30ff 	mov.w	r0, #4294967295
 800f966:	e7e9      	b.n	800f93c <__ssputs_r+0x88>

0800f968 <_svfiprintf_r>:
 800f968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f96c:	4698      	mov	r8, r3
 800f96e:	898b      	ldrh	r3, [r1, #12]
 800f970:	061b      	lsls	r3, r3, #24
 800f972:	b09d      	sub	sp, #116	; 0x74
 800f974:	4607      	mov	r7, r0
 800f976:	460d      	mov	r5, r1
 800f978:	4614      	mov	r4, r2
 800f97a:	d50e      	bpl.n	800f99a <_svfiprintf_r+0x32>
 800f97c:	690b      	ldr	r3, [r1, #16]
 800f97e:	b963      	cbnz	r3, 800f99a <_svfiprintf_r+0x32>
 800f980:	2140      	movs	r1, #64	; 0x40
 800f982:	f7ff ff0b 	bl	800f79c <_malloc_r>
 800f986:	6028      	str	r0, [r5, #0]
 800f988:	6128      	str	r0, [r5, #16]
 800f98a:	b920      	cbnz	r0, 800f996 <_svfiprintf_r+0x2e>
 800f98c:	230c      	movs	r3, #12
 800f98e:	603b      	str	r3, [r7, #0]
 800f990:	f04f 30ff 	mov.w	r0, #4294967295
 800f994:	e0d0      	b.n	800fb38 <_svfiprintf_r+0x1d0>
 800f996:	2340      	movs	r3, #64	; 0x40
 800f998:	616b      	str	r3, [r5, #20]
 800f99a:	2300      	movs	r3, #0
 800f99c:	9309      	str	r3, [sp, #36]	; 0x24
 800f99e:	2320      	movs	r3, #32
 800f9a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9a8:	2330      	movs	r3, #48	; 0x30
 800f9aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb50 <_svfiprintf_r+0x1e8>
 800f9ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9b2:	f04f 0901 	mov.w	r9, #1
 800f9b6:	4623      	mov	r3, r4
 800f9b8:	469a      	mov	sl, r3
 800f9ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9be:	b10a      	cbz	r2, 800f9c4 <_svfiprintf_r+0x5c>
 800f9c0:	2a25      	cmp	r2, #37	; 0x25
 800f9c2:	d1f9      	bne.n	800f9b8 <_svfiprintf_r+0x50>
 800f9c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f9c8:	d00b      	beq.n	800f9e2 <_svfiprintf_r+0x7a>
 800f9ca:	465b      	mov	r3, fp
 800f9cc:	4622      	mov	r2, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f7ff ff6f 	bl	800f8b4 <__ssputs_r>
 800f9d6:	3001      	adds	r0, #1
 800f9d8:	f000 80a9 	beq.w	800fb2e <_svfiprintf_r+0x1c6>
 800f9dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9de:	445a      	add	r2, fp
 800f9e0:	9209      	str	r2, [sp, #36]	; 0x24
 800f9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 80a1 	beq.w	800fb2e <_svfiprintf_r+0x1c6>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f9f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9f6:	f10a 0a01 	add.w	sl, sl, #1
 800f9fa:	9304      	str	r3, [sp, #16]
 800f9fc:	9307      	str	r3, [sp, #28]
 800f9fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa02:	931a      	str	r3, [sp, #104]	; 0x68
 800fa04:	4654      	mov	r4, sl
 800fa06:	2205      	movs	r2, #5
 800fa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa0c:	4850      	ldr	r0, [pc, #320]	; (800fb50 <_svfiprintf_r+0x1e8>)
 800fa0e:	f7f0 fc17 	bl	8000240 <memchr>
 800fa12:	9a04      	ldr	r2, [sp, #16]
 800fa14:	b9d8      	cbnz	r0, 800fa4e <_svfiprintf_r+0xe6>
 800fa16:	06d0      	lsls	r0, r2, #27
 800fa18:	bf44      	itt	mi
 800fa1a:	2320      	movmi	r3, #32
 800fa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa20:	0711      	lsls	r1, r2, #28
 800fa22:	bf44      	itt	mi
 800fa24:	232b      	movmi	r3, #43	; 0x2b
 800fa26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2e:	2b2a      	cmp	r3, #42	; 0x2a
 800fa30:	d015      	beq.n	800fa5e <_svfiprintf_r+0xf6>
 800fa32:	9a07      	ldr	r2, [sp, #28]
 800fa34:	4654      	mov	r4, sl
 800fa36:	2000      	movs	r0, #0
 800fa38:	f04f 0c0a 	mov.w	ip, #10
 800fa3c:	4621      	mov	r1, r4
 800fa3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa42:	3b30      	subs	r3, #48	; 0x30
 800fa44:	2b09      	cmp	r3, #9
 800fa46:	d94d      	bls.n	800fae4 <_svfiprintf_r+0x17c>
 800fa48:	b1b0      	cbz	r0, 800fa78 <_svfiprintf_r+0x110>
 800fa4a:	9207      	str	r2, [sp, #28]
 800fa4c:	e014      	b.n	800fa78 <_svfiprintf_r+0x110>
 800fa4e:	eba0 0308 	sub.w	r3, r0, r8
 800fa52:	fa09 f303 	lsl.w	r3, r9, r3
 800fa56:	4313      	orrs	r3, r2
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	46a2      	mov	sl, r4
 800fa5c:	e7d2      	b.n	800fa04 <_svfiprintf_r+0x9c>
 800fa5e:	9b03      	ldr	r3, [sp, #12]
 800fa60:	1d19      	adds	r1, r3, #4
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	9103      	str	r1, [sp, #12]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	bfbb      	ittet	lt
 800fa6a:	425b      	neglt	r3, r3
 800fa6c:	f042 0202 	orrlt.w	r2, r2, #2
 800fa70:	9307      	strge	r3, [sp, #28]
 800fa72:	9307      	strlt	r3, [sp, #28]
 800fa74:	bfb8      	it	lt
 800fa76:	9204      	strlt	r2, [sp, #16]
 800fa78:	7823      	ldrb	r3, [r4, #0]
 800fa7a:	2b2e      	cmp	r3, #46	; 0x2e
 800fa7c:	d10c      	bne.n	800fa98 <_svfiprintf_r+0x130>
 800fa7e:	7863      	ldrb	r3, [r4, #1]
 800fa80:	2b2a      	cmp	r3, #42	; 0x2a
 800fa82:	d134      	bne.n	800faee <_svfiprintf_r+0x186>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	1d1a      	adds	r2, r3, #4
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	9203      	str	r2, [sp, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bfb8      	it	lt
 800fa90:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa94:	3402      	adds	r4, #2
 800fa96:	9305      	str	r3, [sp, #20]
 800fa98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fb60 <_svfiprintf_r+0x1f8>
 800fa9c:	7821      	ldrb	r1, [r4, #0]
 800fa9e:	2203      	movs	r2, #3
 800faa0:	4650      	mov	r0, sl
 800faa2:	f7f0 fbcd 	bl	8000240 <memchr>
 800faa6:	b138      	cbz	r0, 800fab8 <_svfiprintf_r+0x150>
 800faa8:	9b04      	ldr	r3, [sp, #16]
 800faaa:	eba0 000a 	sub.w	r0, r0, sl
 800faae:	2240      	movs	r2, #64	; 0x40
 800fab0:	4082      	lsls	r2, r0
 800fab2:	4313      	orrs	r3, r2
 800fab4:	3401      	adds	r4, #1
 800fab6:	9304      	str	r3, [sp, #16]
 800fab8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fabc:	4825      	ldr	r0, [pc, #148]	; (800fb54 <_svfiprintf_r+0x1ec>)
 800fabe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fac2:	2206      	movs	r2, #6
 800fac4:	f7f0 fbbc 	bl	8000240 <memchr>
 800fac8:	2800      	cmp	r0, #0
 800faca:	d038      	beq.n	800fb3e <_svfiprintf_r+0x1d6>
 800facc:	4b22      	ldr	r3, [pc, #136]	; (800fb58 <_svfiprintf_r+0x1f0>)
 800face:	bb1b      	cbnz	r3, 800fb18 <_svfiprintf_r+0x1b0>
 800fad0:	9b03      	ldr	r3, [sp, #12]
 800fad2:	3307      	adds	r3, #7
 800fad4:	f023 0307 	bic.w	r3, r3, #7
 800fad8:	3308      	adds	r3, #8
 800fada:	9303      	str	r3, [sp, #12]
 800fadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fade:	4433      	add	r3, r6
 800fae0:	9309      	str	r3, [sp, #36]	; 0x24
 800fae2:	e768      	b.n	800f9b6 <_svfiprintf_r+0x4e>
 800fae4:	fb0c 3202 	mla	r2, ip, r2, r3
 800fae8:	460c      	mov	r4, r1
 800faea:	2001      	movs	r0, #1
 800faec:	e7a6      	b.n	800fa3c <_svfiprintf_r+0xd4>
 800faee:	2300      	movs	r3, #0
 800faf0:	3401      	adds	r4, #1
 800faf2:	9305      	str	r3, [sp, #20]
 800faf4:	4619      	mov	r1, r3
 800faf6:	f04f 0c0a 	mov.w	ip, #10
 800fafa:	4620      	mov	r0, r4
 800fafc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb00:	3a30      	subs	r2, #48	; 0x30
 800fb02:	2a09      	cmp	r2, #9
 800fb04:	d903      	bls.n	800fb0e <_svfiprintf_r+0x1a6>
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d0c6      	beq.n	800fa98 <_svfiprintf_r+0x130>
 800fb0a:	9105      	str	r1, [sp, #20]
 800fb0c:	e7c4      	b.n	800fa98 <_svfiprintf_r+0x130>
 800fb0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb12:	4604      	mov	r4, r0
 800fb14:	2301      	movs	r3, #1
 800fb16:	e7f0      	b.n	800fafa <_svfiprintf_r+0x192>
 800fb18:	ab03      	add	r3, sp, #12
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	462a      	mov	r2, r5
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	; (800fb5c <_svfiprintf_r+0x1f4>)
 800fb20:	a904      	add	r1, sp, #16
 800fb22:	4638      	mov	r0, r7
 800fb24:	f3af 8000 	nop.w
 800fb28:	1c42      	adds	r2, r0, #1
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	d1d6      	bne.n	800fadc <_svfiprintf_r+0x174>
 800fb2e:	89ab      	ldrh	r3, [r5, #12]
 800fb30:	065b      	lsls	r3, r3, #25
 800fb32:	f53f af2d 	bmi.w	800f990 <_svfiprintf_r+0x28>
 800fb36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb38:	b01d      	add	sp, #116	; 0x74
 800fb3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3e:	ab03      	add	r3, sp, #12
 800fb40:	9300      	str	r3, [sp, #0]
 800fb42:	462a      	mov	r2, r5
 800fb44:	4b05      	ldr	r3, [pc, #20]	; (800fb5c <_svfiprintf_r+0x1f4>)
 800fb46:	a904      	add	r1, sp, #16
 800fb48:	4638      	mov	r0, r7
 800fb4a:	f000 f879 	bl	800fc40 <_printf_i>
 800fb4e:	e7eb      	b.n	800fb28 <_svfiprintf_r+0x1c0>
 800fb50:	0801192f 	.word	0x0801192f
 800fb54:	08011939 	.word	0x08011939
 800fb58:	00000000 	.word	0x00000000
 800fb5c:	0800f8b5 	.word	0x0800f8b5
 800fb60:	08011935 	.word	0x08011935

0800fb64 <_printf_common>:
 800fb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	4616      	mov	r6, r2
 800fb6a:	4699      	mov	r9, r3
 800fb6c:	688a      	ldr	r2, [r1, #8]
 800fb6e:	690b      	ldr	r3, [r1, #16]
 800fb70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb74:	4293      	cmp	r3, r2
 800fb76:	bfb8      	it	lt
 800fb78:	4613      	movlt	r3, r2
 800fb7a:	6033      	str	r3, [r6, #0]
 800fb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb80:	4607      	mov	r7, r0
 800fb82:	460c      	mov	r4, r1
 800fb84:	b10a      	cbz	r2, 800fb8a <_printf_common+0x26>
 800fb86:	3301      	adds	r3, #1
 800fb88:	6033      	str	r3, [r6, #0]
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	0699      	lsls	r1, r3, #26
 800fb8e:	bf42      	ittt	mi
 800fb90:	6833      	ldrmi	r3, [r6, #0]
 800fb92:	3302      	addmi	r3, #2
 800fb94:	6033      	strmi	r3, [r6, #0]
 800fb96:	6825      	ldr	r5, [r4, #0]
 800fb98:	f015 0506 	ands.w	r5, r5, #6
 800fb9c:	d106      	bne.n	800fbac <_printf_common+0x48>
 800fb9e:	f104 0a19 	add.w	sl, r4, #25
 800fba2:	68e3      	ldr	r3, [r4, #12]
 800fba4:	6832      	ldr	r2, [r6, #0]
 800fba6:	1a9b      	subs	r3, r3, r2
 800fba8:	42ab      	cmp	r3, r5
 800fbaa:	dc26      	bgt.n	800fbfa <_printf_common+0x96>
 800fbac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fbb0:	1e13      	subs	r3, r2, #0
 800fbb2:	6822      	ldr	r2, [r4, #0]
 800fbb4:	bf18      	it	ne
 800fbb6:	2301      	movne	r3, #1
 800fbb8:	0692      	lsls	r2, r2, #26
 800fbba:	d42b      	bmi.n	800fc14 <_printf_common+0xb0>
 800fbbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbc0:	4649      	mov	r1, r9
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	47c0      	blx	r8
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	d01e      	beq.n	800fc08 <_printf_common+0xa4>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	6922      	ldr	r2, [r4, #16]
 800fbce:	f003 0306 	and.w	r3, r3, #6
 800fbd2:	2b04      	cmp	r3, #4
 800fbd4:	bf02      	ittt	eq
 800fbd6:	68e5      	ldreq	r5, [r4, #12]
 800fbd8:	6833      	ldreq	r3, [r6, #0]
 800fbda:	1aed      	subeq	r5, r5, r3
 800fbdc:	68a3      	ldr	r3, [r4, #8]
 800fbde:	bf0c      	ite	eq
 800fbe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fbe4:	2500      	movne	r5, #0
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bfc4      	itt	gt
 800fbea:	1a9b      	subgt	r3, r3, r2
 800fbec:	18ed      	addgt	r5, r5, r3
 800fbee:	2600      	movs	r6, #0
 800fbf0:	341a      	adds	r4, #26
 800fbf2:	42b5      	cmp	r5, r6
 800fbf4:	d11a      	bne.n	800fc2c <_printf_common+0xc8>
 800fbf6:	2000      	movs	r0, #0
 800fbf8:	e008      	b.n	800fc0c <_printf_common+0xa8>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	4652      	mov	r2, sl
 800fbfe:	4649      	mov	r1, r9
 800fc00:	4638      	mov	r0, r7
 800fc02:	47c0      	blx	r8
 800fc04:	3001      	adds	r0, #1
 800fc06:	d103      	bne.n	800fc10 <_printf_common+0xac>
 800fc08:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc10:	3501      	adds	r5, #1
 800fc12:	e7c6      	b.n	800fba2 <_printf_common+0x3e>
 800fc14:	18e1      	adds	r1, r4, r3
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	2030      	movs	r0, #48	; 0x30
 800fc1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fc1e:	4422      	add	r2, r4
 800fc20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fc24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fc28:	3302      	adds	r3, #2
 800fc2a:	e7c7      	b.n	800fbbc <_printf_common+0x58>
 800fc2c:	2301      	movs	r3, #1
 800fc2e:	4622      	mov	r2, r4
 800fc30:	4649      	mov	r1, r9
 800fc32:	4638      	mov	r0, r7
 800fc34:	47c0      	blx	r8
 800fc36:	3001      	adds	r0, #1
 800fc38:	d0e6      	beq.n	800fc08 <_printf_common+0xa4>
 800fc3a:	3601      	adds	r6, #1
 800fc3c:	e7d9      	b.n	800fbf2 <_printf_common+0x8e>
	...

0800fc40 <_printf_i>:
 800fc40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc44:	7e0f      	ldrb	r7, [r1, #24]
 800fc46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fc48:	2f78      	cmp	r7, #120	; 0x78
 800fc4a:	4691      	mov	r9, r2
 800fc4c:	4680      	mov	r8, r0
 800fc4e:	460c      	mov	r4, r1
 800fc50:	469a      	mov	sl, r3
 800fc52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc56:	d807      	bhi.n	800fc68 <_printf_i+0x28>
 800fc58:	2f62      	cmp	r7, #98	; 0x62
 800fc5a:	d80a      	bhi.n	800fc72 <_printf_i+0x32>
 800fc5c:	2f00      	cmp	r7, #0
 800fc5e:	f000 80d4 	beq.w	800fe0a <_printf_i+0x1ca>
 800fc62:	2f58      	cmp	r7, #88	; 0x58
 800fc64:	f000 80c0 	beq.w	800fde8 <_printf_i+0x1a8>
 800fc68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc70:	e03a      	b.n	800fce8 <_printf_i+0xa8>
 800fc72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc76:	2b15      	cmp	r3, #21
 800fc78:	d8f6      	bhi.n	800fc68 <_printf_i+0x28>
 800fc7a:	a101      	add	r1, pc, #4	; (adr r1, 800fc80 <_printf_i+0x40>)
 800fc7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc80:	0800fcd9 	.word	0x0800fcd9
 800fc84:	0800fced 	.word	0x0800fced
 800fc88:	0800fc69 	.word	0x0800fc69
 800fc8c:	0800fc69 	.word	0x0800fc69
 800fc90:	0800fc69 	.word	0x0800fc69
 800fc94:	0800fc69 	.word	0x0800fc69
 800fc98:	0800fced 	.word	0x0800fced
 800fc9c:	0800fc69 	.word	0x0800fc69
 800fca0:	0800fc69 	.word	0x0800fc69
 800fca4:	0800fc69 	.word	0x0800fc69
 800fca8:	0800fc69 	.word	0x0800fc69
 800fcac:	0800fdf1 	.word	0x0800fdf1
 800fcb0:	0800fd19 	.word	0x0800fd19
 800fcb4:	0800fdab 	.word	0x0800fdab
 800fcb8:	0800fc69 	.word	0x0800fc69
 800fcbc:	0800fc69 	.word	0x0800fc69
 800fcc0:	0800fe13 	.word	0x0800fe13
 800fcc4:	0800fc69 	.word	0x0800fc69
 800fcc8:	0800fd19 	.word	0x0800fd19
 800fccc:	0800fc69 	.word	0x0800fc69
 800fcd0:	0800fc69 	.word	0x0800fc69
 800fcd4:	0800fdb3 	.word	0x0800fdb3
 800fcd8:	682b      	ldr	r3, [r5, #0]
 800fcda:	1d1a      	adds	r2, r3, #4
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	602a      	str	r2, [r5, #0]
 800fce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fce8:	2301      	movs	r3, #1
 800fcea:	e09f      	b.n	800fe2c <_printf_i+0x1ec>
 800fcec:	6820      	ldr	r0, [r4, #0]
 800fcee:	682b      	ldr	r3, [r5, #0]
 800fcf0:	0607      	lsls	r7, r0, #24
 800fcf2:	f103 0104 	add.w	r1, r3, #4
 800fcf6:	6029      	str	r1, [r5, #0]
 800fcf8:	d501      	bpl.n	800fcfe <_printf_i+0xbe>
 800fcfa:	681e      	ldr	r6, [r3, #0]
 800fcfc:	e003      	b.n	800fd06 <_printf_i+0xc6>
 800fcfe:	0646      	lsls	r6, r0, #25
 800fd00:	d5fb      	bpl.n	800fcfa <_printf_i+0xba>
 800fd02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fd06:	2e00      	cmp	r6, #0
 800fd08:	da03      	bge.n	800fd12 <_printf_i+0xd2>
 800fd0a:	232d      	movs	r3, #45	; 0x2d
 800fd0c:	4276      	negs	r6, r6
 800fd0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd12:	485a      	ldr	r0, [pc, #360]	; (800fe7c <_printf_i+0x23c>)
 800fd14:	230a      	movs	r3, #10
 800fd16:	e012      	b.n	800fd3e <_printf_i+0xfe>
 800fd18:	682b      	ldr	r3, [r5, #0]
 800fd1a:	6820      	ldr	r0, [r4, #0]
 800fd1c:	1d19      	adds	r1, r3, #4
 800fd1e:	6029      	str	r1, [r5, #0]
 800fd20:	0605      	lsls	r5, r0, #24
 800fd22:	d501      	bpl.n	800fd28 <_printf_i+0xe8>
 800fd24:	681e      	ldr	r6, [r3, #0]
 800fd26:	e002      	b.n	800fd2e <_printf_i+0xee>
 800fd28:	0641      	lsls	r1, r0, #25
 800fd2a:	d5fb      	bpl.n	800fd24 <_printf_i+0xe4>
 800fd2c:	881e      	ldrh	r6, [r3, #0]
 800fd2e:	4853      	ldr	r0, [pc, #332]	; (800fe7c <_printf_i+0x23c>)
 800fd30:	2f6f      	cmp	r7, #111	; 0x6f
 800fd32:	bf0c      	ite	eq
 800fd34:	2308      	moveq	r3, #8
 800fd36:	230a      	movne	r3, #10
 800fd38:	2100      	movs	r1, #0
 800fd3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fd3e:	6865      	ldr	r5, [r4, #4]
 800fd40:	60a5      	str	r5, [r4, #8]
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	bfa2      	ittt	ge
 800fd46:	6821      	ldrge	r1, [r4, #0]
 800fd48:	f021 0104 	bicge.w	r1, r1, #4
 800fd4c:	6021      	strge	r1, [r4, #0]
 800fd4e:	b90e      	cbnz	r6, 800fd54 <_printf_i+0x114>
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	d04b      	beq.n	800fdec <_printf_i+0x1ac>
 800fd54:	4615      	mov	r5, r2
 800fd56:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd5a:	fb03 6711 	mls	r7, r3, r1, r6
 800fd5e:	5dc7      	ldrb	r7, [r0, r7]
 800fd60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd64:	4637      	mov	r7, r6
 800fd66:	42bb      	cmp	r3, r7
 800fd68:	460e      	mov	r6, r1
 800fd6a:	d9f4      	bls.n	800fd56 <_printf_i+0x116>
 800fd6c:	2b08      	cmp	r3, #8
 800fd6e:	d10b      	bne.n	800fd88 <_printf_i+0x148>
 800fd70:	6823      	ldr	r3, [r4, #0]
 800fd72:	07de      	lsls	r6, r3, #31
 800fd74:	d508      	bpl.n	800fd88 <_printf_i+0x148>
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	6861      	ldr	r1, [r4, #4]
 800fd7a:	4299      	cmp	r1, r3
 800fd7c:	bfde      	ittt	le
 800fd7e:	2330      	movle	r3, #48	; 0x30
 800fd80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd84:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fd88:	1b52      	subs	r2, r2, r5
 800fd8a:	6122      	str	r2, [r4, #16]
 800fd8c:	f8cd a000 	str.w	sl, [sp]
 800fd90:	464b      	mov	r3, r9
 800fd92:	aa03      	add	r2, sp, #12
 800fd94:	4621      	mov	r1, r4
 800fd96:	4640      	mov	r0, r8
 800fd98:	f7ff fee4 	bl	800fb64 <_printf_common>
 800fd9c:	3001      	adds	r0, #1
 800fd9e:	d14a      	bne.n	800fe36 <_printf_i+0x1f6>
 800fda0:	f04f 30ff 	mov.w	r0, #4294967295
 800fda4:	b004      	add	sp, #16
 800fda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	f043 0320 	orr.w	r3, r3, #32
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	4833      	ldr	r0, [pc, #204]	; (800fe80 <_printf_i+0x240>)
 800fdb4:	2778      	movs	r7, #120	; 0x78
 800fdb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	6829      	ldr	r1, [r5, #0]
 800fdbe:	061f      	lsls	r7, r3, #24
 800fdc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fdc4:	d402      	bmi.n	800fdcc <_printf_i+0x18c>
 800fdc6:	065f      	lsls	r7, r3, #25
 800fdc8:	bf48      	it	mi
 800fdca:	b2b6      	uxthmi	r6, r6
 800fdcc:	07df      	lsls	r7, r3, #31
 800fdce:	bf48      	it	mi
 800fdd0:	f043 0320 	orrmi.w	r3, r3, #32
 800fdd4:	6029      	str	r1, [r5, #0]
 800fdd6:	bf48      	it	mi
 800fdd8:	6023      	strmi	r3, [r4, #0]
 800fdda:	b91e      	cbnz	r6, 800fde4 <_printf_i+0x1a4>
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	f023 0320 	bic.w	r3, r3, #32
 800fde2:	6023      	str	r3, [r4, #0]
 800fde4:	2310      	movs	r3, #16
 800fde6:	e7a7      	b.n	800fd38 <_printf_i+0xf8>
 800fde8:	4824      	ldr	r0, [pc, #144]	; (800fe7c <_printf_i+0x23c>)
 800fdea:	e7e4      	b.n	800fdb6 <_printf_i+0x176>
 800fdec:	4615      	mov	r5, r2
 800fdee:	e7bd      	b.n	800fd6c <_printf_i+0x12c>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	6826      	ldr	r6, [r4, #0]
 800fdf4:	6961      	ldr	r1, [r4, #20]
 800fdf6:	1d18      	adds	r0, r3, #4
 800fdf8:	6028      	str	r0, [r5, #0]
 800fdfa:	0635      	lsls	r5, r6, #24
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	d501      	bpl.n	800fe04 <_printf_i+0x1c4>
 800fe00:	6019      	str	r1, [r3, #0]
 800fe02:	e002      	b.n	800fe0a <_printf_i+0x1ca>
 800fe04:	0670      	lsls	r0, r6, #25
 800fe06:	d5fb      	bpl.n	800fe00 <_printf_i+0x1c0>
 800fe08:	8019      	strh	r1, [r3, #0]
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	6123      	str	r3, [r4, #16]
 800fe0e:	4615      	mov	r5, r2
 800fe10:	e7bc      	b.n	800fd8c <_printf_i+0x14c>
 800fe12:	682b      	ldr	r3, [r5, #0]
 800fe14:	1d1a      	adds	r2, r3, #4
 800fe16:	602a      	str	r2, [r5, #0]
 800fe18:	681d      	ldr	r5, [r3, #0]
 800fe1a:	6862      	ldr	r2, [r4, #4]
 800fe1c:	2100      	movs	r1, #0
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f7f0 fa0e 	bl	8000240 <memchr>
 800fe24:	b108      	cbz	r0, 800fe2a <_printf_i+0x1ea>
 800fe26:	1b40      	subs	r0, r0, r5
 800fe28:	6060      	str	r0, [r4, #4]
 800fe2a:	6863      	ldr	r3, [r4, #4]
 800fe2c:	6123      	str	r3, [r4, #16]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fe34:	e7aa      	b.n	800fd8c <_printf_i+0x14c>
 800fe36:	6923      	ldr	r3, [r4, #16]
 800fe38:	462a      	mov	r2, r5
 800fe3a:	4649      	mov	r1, r9
 800fe3c:	4640      	mov	r0, r8
 800fe3e:	47d0      	blx	sl
 800fe40:	3001      	adds	r0, #1
 800fe42:	d0ad      	beq.n	800fda0 <_printf_i+0x160>
 800fe44:	6823      	ldr	r3, [r4, #0]
 800fe46:	079b      	lsls	r3, r3, #30
 800fe48:	d413      	bmi.n	800fe72 <_printf_i+0x232>
 800fe4a:	68e0      	ldr	r0, [r4, #12]
 800fe4c:	9b03      	ldr	r3, [sp, #12]
 800fe4e:	4298      	cmp	r0, r3
 800fe50:	bfb8      	it	lt
 800fe52:	4618      	movlt	r0, r3
 800fe54:	e7a6      	b.n	800fda4 <_printf_i+0x164>
 800fe56:	2301      	movs	r3, #1
 800fe58:	4632      	mov	r2, r6
 800fe5a:	4649      	mov	r1, r9
 800fe5c:	4640      	mov	r0, r8
 800fe5e:	47d0      	blx	sl
 800fe60:	3001      	adds	r0, #1
 800fe62:	d09d      	beq.n	800fda0 <_printf_i+0x160>
 800fe64:	3501      	adds	r5, #1
 800fe66:	68e3      	ldr	r3, [r4, #12]
 800fe68:	9903      	ldr	r1, [sp, #12]
 800fe6a:	1a5b      	subs	r3, r3, r1
 800fe6c:	42ab      	cmp	r3, r5
 800fe6e:	dcf2      	bgt.n	800fe56 <_printf_i+0x216>
 800fe70:	e7eb      	b.n	800fe4a <_printf_i+0x20a>
 800fe72:	2500      	movs	r5, #0
 800fe74:	f104 0619 	add.w	r6, r4, #25
 800fe78:	e7f5      	b.n	800fe66 <_printf_i+0x226>
 800fe7a:	bf00      	nop
 800fe7c:	08011940 	.word	0x08011940
 800fe80:	08011951 	.word	0x08011951

0800fe84 <__sflush_r>:
 800fe84:	898a      	ldrh	r2, [r1, #12]
 800fe86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	0710      	lsls	r0, r2, #28
 800fe8e:	460c      	mov	r4, r1
 800fe90:	d458      	bmi.n	800ff44 <__sflush_r+0xc0>
 800fe92:	684b      	ldr	r3, [r1, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	dc05      	bgt.n	800fea4 <__sflush_r+0x20>
 800fe98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	dc02      	bgt.n	800fea4 <__sflush_r+0x20>
 800fe9e:	2000      	movs	r0, #0
 800fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fea6:	2e00      	cmp	r6, #0
 800fea8:	d0f9      	beq.n	800fe9e <__sflush_r+0x1a>
 800feaa:	2300      	movs	r3, #0
 800feac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800feb0:	682f      	ldr	r7, [r5, #0]
 800feb2:	6a21      	ldr	r1, [r4, #32]
 800feb4:	602b      	str	r3, [r5, #0]
 800feb6:	d032      	beq.n	800ff1e <__sflush_r+0x9a>
 800feb8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800feba:	89a3      	ldrh	r3, [r4, #12]
 800febc:	075a      	lsls	r2, r3, #29
 800febe:	d505      	bpl.n	800fecc <__sflush_r+0x48>
 800fec0:	6863      	ldr	r3, [r4, #4]
 800fec2:	1ac0      	subs	r0, r0, r3
 800fec4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fec6:	b10b      	cbz	r3, 800fecc <__sflush_r+0x48>
 800fec8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800feca:	1ac0      	subs	r0, r0, r3
 800fecc:	2300      	movs	r3, #0
 800fece:	4602      	mov	r2, r0
 800fed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fed2:	6a21      	ldr	r1, [r4, #32]
 800fed4:	4628      	mov	r0, r5
 800fed6:	47b0      	blx	r6
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	d106      	bne.n	800feec <__sflush_r+0x68>
 800fede:	6829      	ldr	r1, [r5, #0]
 800fee0:	291d      	cmp	r1, #29
 800fee2:	d82b      	bhi.n	800ff3c <__sflush_r+0xb8>
 800fee4:	4a29      	ldr	r2, [pc, #164]	; (800ff8c <__sflush_r+0x108>)
 800fee6:	410a      	asrs	r2, r1
 800fee8:	07d6      	lsls	r6, r2, #31
 800feea:	d427      	bmi.n	800ff3c <__sflush_r+0xb8>
 800feec:	2200      	movs	r2, #0
 800feee:	6062      	str	r2, [r4, #4]
 800fef0:	04d9      	lsls	r1, r3, #19
 800fef2:	6922      	ldr	r2, [r4, #16]
 800fef4:	6022      	str	r2, [r4, #0]
 800fef6:	d504      	bpl.n	800ff02 <__sflush_r+0x7e>
 800fef8:	1c42      	adds	r2, r0, #1
 800fefa:	d101      	bne.n	800ff00 <__sflush_r+0x7c>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	b903      	cbnz	r3, 800ff02 <__sflush_r+0x7e>
 800ff00:	6560      	str	r0, [r4, #84]	; 0x54
 800ff02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff04:	602f      	str	r7, [r5, #0]
 800ff06:	2900      	cmp	r1, #0
 800ff08:	d0c9      	beq.n	800fe9e <__sflush_r+0x1a>
 800ff0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff0e:	4299      	cmp	r1, r3
 800ff10:	d002      	beq.n	800ff18 <__sflush_r+0x94>
 800ff12:	4628      	mov	r0, r5
 800ff14:	f7ff fbce 	bl	800f6b4 <_free_r>
 800ff18:	2000      	movs	r0, #0
 800ff1a:	6360      	str	r0, [r4, #52]	; 0x34
 800ff1c:	e7c0      	b.n	800fea0 <__sflush_r+0x1c>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	4628      	mov	r0, r5
 800ff22:	47b0      	blx	r6
 800ff24:	1c41      	adds	r1, r0, #1
 800ff26:	d1c8      	bne.n	800feba <__sflush_r+0x36>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d0c5      	beq.n	800feba <__sflush_r+0x36>
 800ff2e:	2b1d      	cmp	r3, #29
 800ff30:	d001      	beq.n	800ff36 <__sflush_r+0xb2>
 800ff32:	2b16      	cmp	r3, #22
 800ff34:	d101      	bne.n	800ff3a <__sflush_r+0xb6>
 800ff36:	602f      	str	r7, [r5, #0]
 800ff38:	e7b1      	b.n	800fe9e <__sflush_r+0x1a>
 800ff3a:	89a3      	ldrh	r3, [r4, #12]
 800ff3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff40:	81a3      	strh	r3, [r4, #12]
 800ff42:	e7ad      	b.n	800fea0 <__sflush_r+0x1c>
 800ff44:	690f      	ldr	r7, [r1, #16]
 800ff46:	2f00      	cmp	r7, #0
 800ff48:	d0a9      	beq.n	800fe9e <__sflush_r+0x1a>
 800ff4a:	0793      	lsls	r3, r2, #30
 800ff4c:	680e      	ldr	r6, [r1, #0]
 800ff4e:	bf08      	it	eq
 800ff50:	694b      	ldreq	r3, [r1, #20]
 800ff52:	600f      	str	r7, [r1, #0]
 800ff54:	bf18      	it	ne
 800ff56:	2300      	movne	r3, #0
 800ff58:	eba6 0807 	sub.w	r8, r6, r7
 800ff5c:	608b      	str	r3, [r1, #8]
 800ff5e:	f1b8 0f00 	cmp.w	r8, #0
 800ff62:	dd9c      	ble.n	800fe9e <__sflush_r+0x1a>
 800ff64:	6a21      	ldr	r1, [r4, #32]
 800ff66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ff68:	4643      	mov	r3, r8
 800ff6a:	463a      	mov	r2, r7
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	47b0      	blx	r6
 800ff70:	2800      	cmp	r0, #0
 800ff72:	dc06      	bgt.n	800ff82 <__sflush_r+0xfe>
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff7a:	81a3      	strh	r3, [r4, #12]
 800ff7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff80:	e78e      	b.n	800fea0 <__sflush_r+0x1c>
 800ff82:	4407      	add	r7, r0
 800ff84:	eba8 0800 	sub.w	r8, r8, r0
 800ff88:	e7e9      	b.n	800ff5e <__sflush_r+0xda>
 800ff8a:	bf00      	nop
 800ff8c:	dfbffffe 	.word	0xdfbffffe

0800ff90 <_fflush_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	690b      	ldr	r3, [r1, #16]
 800ff94:	4605      	mov	r5, r0
 800ff96:	460c      	mov	r4, r1
 800ff98:	b913      	cbnz	r3, 800ffa0 <_fflush_r+0x10>
 800ff9a:	2500      	movs	r5, #0
 800ff9c:	4628      	mov	r0, r5
 800ff9e:	bd38      	pop	{r3, r4, r5, pc}
 800ffa0:	b118      	cbz	r0, 800ffaa <_fflush_r+0x1a>
 800ffa2:	6a03      	ldr	r3, [r0, #32]
 800ffa4:	b90b      	cbnz	r3, 800ffaa <_fflush_r+0x1a>
 800ffa6:	f7ff f9c9 	bl	800f33c <__sinit>
 800ffaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d0f3      	beq.n	800ff9a <_fflush_r+0xa>
 800ffb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ffb4:	07d0      	lsls	r0, r2, #31
 800ffb6:	d404      	bmi.n	800ffc2 <_fflush_r+0x32>
 800ffb8:	0599      	lsls	r1, r3, #22
 800ffba:	d402      	bmi.n	800ffc2 <_fflush_r+0x32>
 800ffbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffbe:	f7ff fb4b 	bl	800f658 <__retarget_lock_acquire_recursive>
 800ffc2:	4628      	mov	r0, r5
 800ffc4:	4621      	mov	r1, r4
 800ffc6:	f7ff ff5d 	bl	800fe84 <__sflush_r>
 800ffca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ffcc:	07da      	lsls	r2, r3, #31
 800ffce:	4605      	mov	r5, r0
 800ffd0:	d4e4      	bmi.n	800ff9c <_fflush_r+0xc>
 800ffd2:	89a3      	ldrh	r3, [r4, #12]
 800ffd4:	059b      	lsls	r3, r3, #22
 800ffd6:	d4e1      	bmi.n	800ff9c <_fflush_r+0xc>
 800ffd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ffda:	f7ff fb3e 	bl	800f65a <__retarget_lock_release_recursive>
 800ffde:	e7dd      	b.n	800ff9c <_fflush_r+0xc>

0800ffe0 <fiprintf>:
 800ffe0:	b40e      	push	{r1, r2, r3}
 800ffe2:	b503      	push	{r0, r1, lr}
 800ffe4:	4601      	mov	r1, r0
 800ffe6:	ab03      	add	r3, sp, #12
 800ffe8:	4805      	ldr	r0, [pc, #20]	; (8010000 <fiprintf+0x20>)
 800ffea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffee:	6800      	ldr	r0, [r0, #0]
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	f000 f891 	bl	8010118 <_vfiprintf_r>
 800fff6:	b002      	add	sp, #8
 800fff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fffc:	b003      	add	sp, #12
 800fffe:	4770      	bx	lr
 8010000:	200000cc 	.word	0x200000cc

08010004 <memmove>:
 8010004:	4288      	cmp	r0, r1
 8010006:	b510      	push	{r4, lr}
 8010008:	eb01 0402 	add.w	r4, r1, r2
 801000c:	d902      	bls.n	8010014 <memmove+0x10>
 801000e:	4284      	cmp	r4, r0
 8010010:	4623      	mov	r3, r4
 8010012:	d807      	bhi.n	8010024 <memmove+0x20>
 8010014:	1e43      	subs	r3, r0, #1
 8010016:	42a1      	cmp	r1, r4
 8010018:	d008      	beq.n	801002c <memmove+0x28>
 801001a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801001e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010022:	e7f8      	b.n	8010016 <memmove+0x12>
 8010024:	4402      	add	r2, r0
 8010026:	4601      	mov	r1, r0
 8010028:	428a      	cmp	r2, r1
 801002a:	d100      	bne.n	801002e <memmove+0x2a>
 801002c:	bd10      	pop	{r4, pc}
 801002e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010036:	e7f7      	b.n	8010028 <memmove+0x24>

08010038 <_sbrk_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4d06      	ldr	r5, [pc, #24]	; (8010054 <_sbrk_r+0x1c>)
 801003c:	2300      	movs	r3, #0
 801003e:	4604      	mov	r4, r0
 8010040:	4608      	mov	r0, r1
 8010042:	602b      	str	r3, [r5, #0]
 8010044:	f7f5 fe5e 	bl	8005d04 <_sbrk>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_sbrk_r+0x1a>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_sbrk_r+0x1a>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	20007584 	.word	0x20007584

08010058 <abort>:
 8010058:	b508      	push	{r3, lr}
 801005a:	2006      	movs	r0, #6
 801005c:	f000 fa34 	bl	80104c8 <raise>
 8010060:	2001      	movs	r0, #1
 8010062:	f7f5 fdf3 	bl	8005c4c <_exit>

08010066 <_realloc_r>:
 8010066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801006a:	4680      	mov	r8, r0
 801006c:	4614      	mov	r4, r2
 801006e:	460e      	mov	r6, r1
 8010070:	b921      	cbnz	r1, 801007c <_realloc_r+0x16>
 8010072:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010076:	4611      	mov	r1, r2
 8010078:	f7ff bb90 	b.w	800f79c <_malloc_r>
 801007c:	b92a      	cbnz	r2, 801008a <_realloc_r+0x24>
 801007e:	f7ff fb19 	bl	800f6b4 <_free_r>
 8010082:	4625      	mov	r5, r4
 8010084:	4628      	mov	r0, r5
 8010086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801008a:	f000 fa39 	bl	8010500 <_malloc_usable_size_r>
 801008e:	4284      	cmp	r4, r0
 8010090:	4607      	mov	r7, r0
 8010092:	d802      	bhi.n	801009a <_realloc_r+0x34>
 8010094:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010098:	d812      	bhi.n	80100c0 <_realloc_r+0x5a>
 801009a:	4621      	mov	r1, r4
 801009c:	4640      	mov	r0, r8
 801009e:	f7ff fb7d 	bl	800f79c <_malloc_r>
 80100a2:	4605      	mov	r5, r0
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d0ed      	beq.n	8010084 <_realloc_r+0x1e>
 80100a8:	42bc      	cmp	r4, r7
 80100aa:	4622      	mov	r2, r4
 80100ac:	4631      	mov	r1, r6
 80100ae:	bf28      	it	cs
 80100b0:	463a      	movcs	r2, r7
 80100b2:	f7ff fad3 	bl	800f65c <memcpy>
 80100b6:	4631      	mov	r1, r6
 80100b8:	4640      	mov	r0, r8
 80100ba:	f7ff fafb 	bl	800f6b4 <_free_r>
 80100be:	e7e1      	b.n	8010084 <_realloc_r+0x1e>
 80100c0:	4635      	mov	r5, r6
 80100c2:	e7df      	b.n	8010084 <_realloc_r+0x1e>

080100c4 <__sfputc_r>:
 80100c4:	6893      	ldr	r3, [r2, #8]
 80100c6:	3b01      	subs	r3, #1
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	b410      	push	{r4}
 80100cc:	6093      	str	r3, [r2, #8]
 80100ce:	da08      	bge.n	80100e2 <__sfputc_r+0x1e>
 80100d0:	6994      	ldr	r4, [r2, #24]
 80100d2:	42a3      	cmp	r3, r4
 80100d4:	db01      	blt.n	80100da <__sfputc_r+0x16>
 80100d6:	290a      	cmp	r1, #10
 80100d8:	d103      	bne.n	80100e2 <__sfputc_r+0x1e>
 80100da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100de:	f000 b935 	b.w	801034c <__swbuf_r>
 80100e2:	6813      	ldr	r3, [r2, #0]
 80100e4:	1c58      	adds	r0, r3, #1
 80100e6:	6010      	str	r0, [r2, #0]
 80100e8:	7019      	strb	r1, [r3, #0]
 80100ea:	4608      	mov	r0, r1
 80100ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <__sfputs_r>:
 80100f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100f4:	4606      	mov	r6, r0
 80100f6:	460f      	mov	r7, r1
 80100f8:	4614      	mov	r4, r2
 80100fa:	18d5      	adds	r5, r2, r3
 80100fc:	42ac      	cmp	r4, r5
 80100fe:	d101      	bne.n	8010104 <__sfputs_r+0x12>
 8010100:	2000      	movs	r0, #0
 8010102:	e007      	b.n	8010114 <__sfputs_r+0x22>
 8010104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010108:	463a      	mov	r2, r7
 801010a:	4630      	mov	r0, r6
 801010c:	f7ff ffda 	bl	80100c4 <__sfputc_r>
 8010110:	1c43      	adds	r3, r0, #1
 8010112:	d1f3      	bne.n	80100fc <__sfputs_r+0xa>
 8010114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010118 <_vfiprintf_r>:
 8010118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801011c:	460d      	mov	r5, r1
 801011e:	b09d      	sub	sp, #116	; 0x74
 8010120:	4614      	mov	r4, r2
 8010122:	4698      	mov	r8, r3
 8010124:	4606      	mov	r6, r0
 8010126:	b118      	cbz	r0, 8010130 <_vfiprintf_r+0x18>
 8010128:	6a03      	ldr	r3, [r0, #32]
 801012a:	b90b      	cbnz	r3, 8010130 <_vfiprintf_r+0x18>
 801012c:	f7ff f906 	bl	800f33c <__sinit>
 8010130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010132:	07d9      	lsls	r1, r3, #31
 8010134:	d405      	bmi.n	8010142 <_vfiprintf_r+0x2a>
 8010136:	89ab      	ldrh	r3, [r5, #12]
 8010138:	059a      	lsls	r2, r3, #22
 801013a:	d402      	bmi.n	8010142 <_vfiprintf_r+0x2a>
 801013c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801013e:	f7ff fa8b 	bl	800f658 <__retarget_lock_acquire_recursive>
 8010142:	89ab      	ldrh	r3, [r5, #12]
 8010144:	071b      	lsls	r3, r3, #28
 8010146:	d501      	bpl.n	801014c <_vfiprintf_r+0x34>
 8010148:	692b      	ldr	r3, [r5, #16]
 801014a:	b99b      	cbnz	r3, 8010174 <_vfiprintf_r+0x5c>
 801014c:	4629      	mov	r1, r5
 801014e:	4630      	mov	r0, r6
 8010150:	f000 f93a 	bl	80103c8 <__swsetup_r>
 8010154:	b170      	cbz	r0, 8010174 <_vfiprintf_r+0x5c>
 8010156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010158:	07dc      	lsls	r4, r3, #31
 801015a:	d504      	bpl.n	8010166 <_vfiprintf_r+0x4e>
 801015c:	f04f 30ff 	mov.w	r0, #4294967295
 8010160:	b01d      	add	sp, #116	; 0x74
 8010162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010166:	89ab      	ldrh	r3, [r5, #12]
 8010168:	0598      	lsls	r0, r3, #22
 801016a:	d4f7      	bmi.n	801015c <_vfiprintf_r+0x44>
 801016c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801016e:	f7ff fa74 	bl	800f65a <__retarget_lock_release_recursive>
 8010172:	e7f3      	b.n	801015c <_vfiprintf_r+0x44>
 8010174:	2300      	movs	r3, #0
 8010176:	9309      	str	r3, [sp, #36]	; 0x24
 8010178:	2320      	movs	r3, #32
 801017a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801017e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010182:	2330      	movs	r3, #48	; 0x30
 8010184:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010338 <_vfiprintf_r+0x220>
 8010188:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801018c:	f04f 0901 	mov.w	r9, #1
 8010190:	4623      	mov	r3, r4
 8010192:	469a      	mov	sl, r3
 8010194:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010198:	b10a      	cbz	r2, 801019e <_vfiprintf_r+0x86>
 801019a:	2a25      	cmp	r2, #37	; 0x25
 801019c:	d1f9      	bne.n	8010192 <_vfiprintf_r+0x7a>
 801019e:	ebba 0b04 	subs.w	fp, sl, r4
 80101a2:	d00b      	beq.n	80101bc <_vfiprintf_r+0xa4>
 80101a4:	465b      	mov	r3, fp
 80101a6:	4622      	mov	r2, r4
 80101a8:	4629      	mov	r1, r5
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7ff ffa1 	bl	80100f2 <__sfputs_r>
 80101b0:	3001      	adds	r0, #1
 80101b2:	f000 80a9 	beq.w	8010308 <_vfiprintf_r+0x1f0>
 80101b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101b8:	445a      	add	r2, fp
 80101ba:	9209      	str	r2, [sp, #36]	; 0x24
 80101bc:	f89a 3000 	ldrb.w	r3, [sl]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	f000 80a1 	beq.w	8010308 <_vfiprintf_r+0x1f0>
 80101c6:	2300      	movs	r3, #0
 80101c8:	f04f 32ff 	mov.w	r2, #4294967295
 80101cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101d0:	f10a 0a01 	add.w	sl, sl, #1
 80101d4:	9304      	str	r3, [sp, #16]
 80101d6:	9307      	str	r3, [sp, #28]
 80101d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101dc:	931a      	str	r3, [sp, #104]	; 0x68
 80101de:	4654      	mov	r4, sl
 80101e0:	2205      	movs	r2, #5
 80101e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101e6:	4854      	ldr	r0, [pc, #336]	; (8010338 <_vfiprintf_r+0x220>)
 80101e8:	f7f0 f82a 	bl	8000240 <memchr>
 80101ec:	9a04      	ldr	r2, [sp, #16]
 80101ee:	b9d8      	cbnz	r0, 8010228 <_vfiprintf_r+0x110>
 80101f0:	06d1      	lsls	r1, r2, #27
 80101f2:	bf44      	itt	mi
 80101f4:	2320      	movmi	r3, #32
 80101f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101fa:	0713      	lsls	r3, r2, #28
 80101fc:	bf44      	itt	mi
 80101fe:	232b      	movmi	r3, #43	; 0x2b
 8010200:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010204:	f89a 3000 	ldrb.w	r3, [sl]
 8010208:	2b2a      	cmp	r3, #42	; 0x2a
 801020a:	d015      	beq.n	8010238 <_vfiprintf_r+0x120>
 801020c:	9a07      	ldr	r2, [sp, #28]
 801020e:	4654      	mov	r4, sl
 8010210:	2000      	movs	r0, #0
 8010212:	f04f 0c0a 	mov.w	ip, #10
 8010216:	4621      	mov	r1, r4
 8010218:	f811 3b01 	ldrb.w	r3, [r1], #1
 801021c:	3b30      	subs	r3, #48	; 0x30
 801021e:	2b09      	cmp	r3, #9
 8010220:	d94d      	bls.n	80102be <_vfiprintf_r+0x1a6>
 8010222:	b1b0      	cbz	r0, 8010252 <_vfiprintf_r+0x13a>
 8010224:	9207      	str	r2, [sp, #28]
 8010226:	e014      	b.n	8010252 <_vfiprintf_r+0x13a>
 8010228:	eba0 0308 	sub.w	r3, r0, r8
 801022c:	fa09 f303 	lsl.w	r3, r9, r3
 8010230:	4313      	orrs	r3, r2
 8010232:	9304      	str	r3, [sp, #16]
 8010234:	46a2      	mov	sl, r4
 8010236:	e7d2      	b.n	80101de <_vfiprintf_r+0xc6>
 8010238:	9b03      	ldr	r3, [sp, #12]
 801023a:	1d19      	adds	r1, r3, #4
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	9103      	str	r1, [sp, #12]
 8010240:	2b00      	cmp	r3, #0
 8010242:	bfbb      	ittet	lt
 8010244:	425b      	neglt	r3, r3
 8010246:	f042 0202 	orrlt.w	r2, r2, #2
 801024a:	9307      	strge	r3, [sp, #28]
 801024c:	9307      	strlt	r3, [sp, #28]
 801024e:	bfb8      	it	lt
 8010250:	9204      	strlt	r2, [sp, #16]
 8010252:	7823      	ldrb	r3, [r4, #0]
 8010254:	2b2e      	cmp	r3, #46	; 0x2e
 8010256:	d10c      	bne.n	8010272 <_vfiprintf_r+0x15a>
 8010258:	7863      	ldrb	r3, [r4, #1]
 801025a:	2b2a      	cmp	r3, #42	; 0x2a
 801025c:	d134      	bne.n	80102c8 <_vfiprintf_r+0x1b0>
 801025e:	9b03      	ldr	r3, [sp, #12]
 8010260:	1d1a      	adds	r2, r3, #4
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	9203      	str	r2, [sp, #12]
 8010266:	2b00      	cmp	r3, #0
 8010268:	bfb8      	it	lt
 801026a:	f04f 33ff 	movlt.w	r3, #4294967295
 801026e:	3402      	adds	r4, #2
 8010270:	9305      	str	r3, [sp, #20]
 8010272:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010348 <_vfiprintf_r+0x230>
 8010276:	7821      	ldrb	r1, [r4, #0]
 8010278:	2203      	movs	r2, #3
 801027a:	4650      	mov	r0, sl
 801027c:	f7ef ffe0 	bl	8000240 <memchr>
 8010280:	b138      	cbz	r0, 8010292 <_vfiprintf_r+0x17a>
 8010282:	9b04      	ldr	r3, [sp, #16]
 8010284:	eba0 000a 	sub.w	r0, r0, sl
 8010288:	2240      	movs	r2, #64	; 0x40
 801028a:	4082      	lsls	r2, r0
 801028c:	4313      	orrs	r3, r2
 801028e:	3401      	adds	r4, #1
 8010290:	9304      	str	r3, [sp, #16]
 8010292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010296:	4829      	ldr	r0, [pc, #164]	; (801033c <_vfiprintf_r+0x224>)
 8010298:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801029c:	2206      	movs	r2, #6
 801029e:	f7ef ffcf 	bl	8000240 <memchr>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d03f      	beq.n	8010326 <_vfiprintf_r+0x20e>
 80102a6:	4b26      	ldr	r3, [pc, #152]	; (8010340 <_vfiprintf_r+0x228>)
 80102a8:	bb1b      	cbnz	r3, 80102f2 <_vfiprintf_r+0x1da>
 80102aa:	9b03      	ldr	r3, [sp, #12]
 80102ac:	3307      	adds	r3, #7
 80102ae:	f023 0307 	bic.w	r3, r3, #7
 80102b2:	3308      	adds	r3, #8
 80102b4:	9303      	str	r3, [sp, #12]
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	443b      	add	r3, r7
 80102ba:	9309      	str	r3, [sp, #36]	; 0x24
 80102bc:	e768      	b.n	8010190 <_vfiprintf_r+0x78>
 80102be:	fb0c 3202 	mla	r2, ip, r2, r3
 80102c2:	460c      	mov	r4, r1
 80102c4:	2001      	movs	r0, #1
 80102c6:	e7a6      	b.n	8010216 <_vfiprintf_r+0xfe>
 80102c8:	2300      	movs	r3, #0
 80102ca:	3401      	adds	r4, #1
 80102cc:	9305      	str	r3, [sp, #20]
 80102ce:	4619      	mov	r1, r3
 80102d0:	f04f 0c0a 	mov.w	ip, #10
 80102d4:	4620      	mov	r0, r4
 80102d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102da:	3a30      	subs	r2, #48	; 0x30
 80102dc:	2a09      	cmp	r2, #9
 80102de:	d903      	bls.n	80102e8 <_vfiprintf_r+0x1d0>
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d0c6      	beq.n	8010272 <_vfiprintf_r+0x15a>
 80102e4:	9105      	str	r1, [sp, #20]
 80102e6:	e7c4      	b.n	8010272 <_vfiprintf_r+0x15a>
 80102e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80102ec:	4604      	mov	r4, r0
 80102ee:	2301      	movs	r3, #1
 80102f0:	e7f0      	b.n	80102d4 <_vfiprintf_r+0x1bc>
 80102f2:	ab03      	add	r3, sp, #12
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	462a      	mov	r2, r5
 80102f8:	4b12      	ldr	r3, [pc, #72]	; (8010344 <_vfiprintf_r+0x22c>)
 80102fa:	a904      	add	r1, sp, #16
 80102fc:	4630      	mov	r0, r6
 80102fe:	f3af 8000 	nop.w
 8010302:	4607      	mov	r7, r0
 8010304:	1c78      	adds	r0, r7, #1
 8010306:	d1d6      	bne.n	80102b6 <_vfiprintf_r+0x19e>
 8010308:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801030a:	07d9      	lsls	r1, r3, #31
 801030c:	d405      	bmi.n	801031a <_vfiprintf_r+0x202>
 801030e:	89ab      	ldrh	r3, [r5, #12]
 8010310:	059a      	lsls	r2, r3, #22
 8010312:	d402      	bmi.n	801031a <_vfiprintf_r+0x202>
 8010314:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010316:	f7ff f9a0 	bl	800f65a <__retarget_lock_release_recursive>
 801031a:	89ab      	ldrh	r3, [r5, #12]
 801031c:	065b      	lsls	r3, r3, #25
 801031e:	f53f af1d 	bmi.w	801015c <_vfiprintf_r+0x44>
 8010322:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010324:	e71c      	b.n	8010160 <_vfiprintf_r+0x48>
 8010326:	ab03      	add	r3, sp, #12
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	462a      	mov	r2, r5
 801032c:	4b05      	ldr	r3, [pc, #20]	; (8010344 <_vfiprintf_r+0x22c>)
 801032e:	a904      	add	r1, sp, #16
 8010330:	4630      	mov	r0, r6
 8010332:	f7ff fc85 	bl	800fc40 <_printf_i>
 8010336:	e7e4      	b.n	8010302 <_vfiprintf_r+0x1ea>
 8010338:	0801192f 	.word	0x0801192f
 801033c:	08011939 	.word	0x08011939
 8010340:	00000000 	.word	0x00000000
 8010344:	080100f3 	.word	0x080100f3
 8010348:	08011935 	.word	0x08011935

0801034c <__swbuf_r>:
 801034c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801034e:	460e      	mov	r6, r1
 8010350:	4614      	mov	r4, r2
 8010352:	4605      	mov	r5, r0
 8010354:	b118      	cbz	r0, 801035e <__swbuf_r+0x12>
 8010356:	6a03      	ldr	r3, [r0, #32]
 8010358:	b90b      	cbnz	r3, 801035e <__swbuf_r+0x12>
 801035a:	f7fe ffef 	bl	800f33c <__sinit>
 801035e:	69a3      	ldr	r3, [r4, #24]
 8010360:	60a3      	str	r3, [r4, #8]
 8010362:	89a3      	ldrh	r3, [r4, #12]
 8010364:	071a      	lsls	r2, r3, #28
 8010366:	d525      	bpl.n	80103b4 <__swbuf_r+0x68>
 8010368:	6923      	ldr	r3, [r4, #16]
 801036a:	b31b      	cbz	r3, 80103b4 <__swbuf_r+0x68>
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	6922      	ldr	r2, [r4, #16]
 8010370:	1a98      	subs	r0, r3, r2
 8010372:	6963      	ldr	r3, [r4, #20]
 8010374:	b2f6      	uxtb	r6, r6
 8010376:	4283      	cmp	r3, r0
 8010378:	4637      	mov	r7, r6
 801037a:	dc04      	bgt.n	8010386 <__swbuf_r+0x3a>
 801037c:	4621      	mov	r1, r4
 801037e:	4628      	mov	r0, r5
 8010380:	f7ff fe06 	bl	800ff90 <_fflush_r>
 8010384:	b9e0      	cbnz	r0, 80103c0 <__swbuf_r+0x74>
 8010386:	68a3      	ldr	r3, [r4, #8]
 8010388:	3b01      	subs	r3, #1
 801038a:	60a3      	str	r3, [r4, #8]
 801038c:	6823      	ldr	r3, [r4, #0]
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	6022      	str	r2, [r4, #0]
 8010392:	701e      	strb	r6, [r3, #0]
 8010394:	6962      	ldr	r2, [r4, #20]
 8010396:	1c43      	adds	r3, r0, #1
 8010398:	429a      	cmp	r2, r3
 801039a:	d004      	beq.n	80103a6 <__swbuf_r+0x5a>
 801039c:	89a3      	ldrh	r3, [r4, #12]
 801039e:	07db      	lsls	r3, r3, #31
 80103a0:	d506      	bpl.n	80103b0 <__swbuf_r+0x64>
 80103a2:	2e0a      	cmp	r6, #10
 80103a4:	d104      	bne.n	80103b0 <__swbuf_r+0x64>
 80103a6:	4621      	mov	r1, r4
 80103a8:	4628      	mov	r0, r5
 80103aa:	f7ff fdf1 	bl	800ff90 <_fflush_r>
 80103ae:	b938      	cbnz	r0, 80103c0 <__swbuf_r+0x74>
 80103b0:	4638      	mov	r0, r7
 80103b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b4:	4621      	mov	r1, r4
 80103b6:	4628      	mov	r0, r5
 80103b8:	f000 f806 	bl	80103c8 <__swsetup_r>
 80103bc:	2800      	cmp	r0, #0
 80103be:	d0d5      	beq.n	801036c <__swbuf_r+0x20>
 80103c0:	f04f 37ff 	mov.w	r7, #4294967295
 80103c4:	e7f4      	b.n	80103b0 <__swbuf_r+0x64>
	...

080103c8 <__swsetup_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	4b2a      	ldr	r3, [pc, #168]	; (8010474 <__swsetup_r+0xac>)
 80103cc:	4605      	mov	r5, r0
 80103ce:	6818      	ldr	r0, [r3, #0]
 80103d0:	460c      	mov	r4, r1
 80103d2:	b118      	cbz	r0, 80103dc <__swsetup_r+0x14>
 80103d4:	6a03      	ldr	r3, [r0, #32]
 80103d6:	b90b      	cbnz	r3, 80103dc <__swsetup_r+0x14>
 80103d8:	f7fe ffb0 	bl	800f33c <__sinit>
 80103dc:	89a3      	ldrh	r3, [r4, #12]
 80103de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103e2:	0718      	lsls	r0, r3, #28
 80103e4:	d422      	bmi.n	801042c <__swsetup_r+0x64>
 80103e6:	06d9      	lsls	r1, r3, #27
 80103e8:	d407      	bmi.n	80103fa <__swsetup_r+0x32>
 80103ea:	2309      	movs	r3, #9
 80103ec:	602b      	str	r3, [r5, #0]
 80103ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103f2:	81a3      	strh	r3, [r4, #12]
 80103f4:	f04f 30ff 	mov.w	r0, #4294967295
 80103f8:	e034      	b.n	8010464 <__swsetup_r+0x9c>
 80103fa:	0758      	lsls	r0, r3, #29
 80103fc:	d512      	bpl.n	8010424 <__swsetup_r+0x5c>
 80103fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010400:	b141      	cbz	r1, 8010414 <__swsetup_r+0x4c>
 8010402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010406:	4299      	cmp	r1, r3
 8010408:	d002      	beq.n	8010410 <__swsetup_r+0x48>
 801040a:	4628      	mov	r0, r5
 801040c:	f7ff f952 	bl	800f6b4 <_free_r>
 8010410:	2300      	movs	r3, #0
 8010412:	6363      	str	r3, [r4, #52]	; 0x34
 8010414:	89a3      	ldrh	r3, [r4, #12]
 8010416:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801041a:	81a3      	strh	r3, [r4, #12]
 801041c:	2300      	movs	r3, #0
 801041e:	6063      	str	r3, [r4, #4]
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	6023      	str	r3, [r4, #0]
 8010424:	89a3      	ldrh	r3, [r4, #12]
 8010426:	f043 0308 	orr.w	r3, r3, #8
 801042a:	81a3      	strh	r3, [r4, #12]
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b94b      	cbnz	r3, 8010444 <__swsetup_r+0x7c>
 8010430:	89a3      	ldrh	r3, [r4, #12]
 8010432:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801043a:	d003      	beq.n	8010444 <__swsetup_r+0x7c>
 801043c:	4621      	mov	r1, r4
 801043e:	4628      	mov	r0, r5
 8010440:	f000 f88c 	bl	801055c <__smakebuf_r>
 8010444:	89a0      	ldrh	r0, [r4, #12]
 8010446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801044a:	f010 0301 	ands.w	r3, r0, #1
 801044e:	d00a      	beq.n	8010466 <__swsetup_r+0x9e>
 8010450:	2300      	movs	r3, #0
 8010452:	60a3      	str	r3, [r4, #8]
 8010454:	6963      	ldr	r3, [r4, #20]
 8010456:	425b      	negs	r3, r3
 8010458:	61a3      	str	r3, [r4, #24]
 801045a:	6923      	ldr	r3, [r4, #16]
 801045c:	b943      	cbnz	r3, 8010470 <__swsetup_r+0xa8>
 801045e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010462:	d1c4      	bne.n	80103ee <__swsetup_r+0x26>
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	0781      	lsls	r1, r0, #30
 8010468:	bf58      	it	pl
 801046a:	6963      	ldrpl	r3, [r4, #20]
 801046c:	60a3      	str	r3, [r4, #8]
 801046e:	e7f4      	b.n	801045a <__swsetup_r+0x92>
 8010470:	2000      	movs	r0, #0
 8010472:	e7f7      	b.n	8010464 <__swsetup_r+0x9c>
 8010474:	200000cc 	.word	0x200000cc

08010478 <_raise_r>:
 8010478:	291f      	cmp	r1, #31
 801047a:	b538      	push	{r3, r4, r5, lr}
 801047c:	4604      	mov	r4, r0
 801047e:	460d      	mov	r5, r1
 8010480:	d904      	bls.n	801048c <_raise_r+0x14>
 8010482:	2316      	movs	r3, #22
 8010484:	6003      	str	r3, [r0, #0]
 8010486:	f04f 30ff 	mov.w	r0, #4294967295
 801048a:	bd38      	pop	{r3, r4, r5, pc}
 801048c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801048e:	b112      	cbz	r2, 8010496 <_raise_r+0x1e>
 8010490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010494:	b94b      	cbnz	r3, 80104aa <_raise_r+0x32>
 8010496:	4620      	mov	r0, r4
 8010498:	f000 f830 	bl	80104fc <_getpid_r>
 801049c:	462a      	mov	r2, r5
 801049e:	4601      	mov	r1, r0
 80104a0:	4620      	mov	r0, r4
 80104a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104a6:	f000 b817 	b.w	80104d8 <_kill_r>
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d00a      	beq.n	80104c4 <_raise_r+0x4c>
 80104ae:	1c59      	adds	r1, r3, #1
 80104b0:	d103      	bne.n	80104ba <_raise_r+0x42>
 80104b2:	2316      	movs	r3, #22
 80104b4:	6003      	str	r3, [r0, #0]
 80104b6:	2001      	movs	r0, #1
 80104b8:	e7e7      	b.n	801048a <_raise_r+0x12>
 80104ba:	2400      	movs	r4, #0
 80104bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80104c0:	4628      	mov	r0, r5
 80104c2:	4798      	blx	r3
 80104c4:	2000      	movs	r0, #0
 80104c6:	e7e0      	b.n	801048a <_raise_r+0x12>

080104c8 <raise>:
 80104c8:	4b02      	ldr	r3, [pc, #8]	; (80104d4 <raise+0xc>)
 80104ca:	4601      	mov	r1, r0
 80104cc:	6818      	ldr	r0, [r3, #0]
 80104ce:	f7ff bfd3 	b.w	8010478 <_raise_r>
 80104d2:	bf00      	nop
 80104d4:	200000cc 	.word	0x200000cc

080104d8 <_kill_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d07      	ldr	r5, [pc, #28]	; (80104f8 <_kill_r+0x20>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	4611      	mov	r1, r2
 80104e4:	602b      	str	r3, [r5, #0]
 80104e6:	f7f5 fba1 	bl	8005c2c <_kill>
 80104ea:	1c43      	adds	r3, r0, #1
 80104ec:	d102      	bne.n	80104f4 <_kill_r+0x1c>
 80104ee:	682b      	ldr	r3, [r5, #0]
 80104f0:	b103      	cbz	r3, 80104f4 <_kill_r+0x1c>
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	bd38      	pop	{r3, r4, r5, pc}
 80104f6:	bf00      	nop
 80104f8:	20007584 	.word	0x20007584

080104fc <_getpid_r>:
 80104fc:	f7f5 bb8e 	b.w	8005c1c <_getpid>

08010500 <_malloc_usable_size_r>:
 8010500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010504:	1f18      	subs	r0, r3, #4
 8010506:	2b00      	cmp	r3, #0
 8010508:	bfbc      	itt	lt
 801050a:	580b      	ldrlt	r3, [r1, r0]
 801050c:	18c0      	addlt	r0, r0, r3
 801050e:	4770      	bx	lr

08010510 <__swhatbuf_r>:
 8010510:	b570      	push	{r4, r5, r6, lr}
 8010512:	460c      	mov	r4, r1
 8010514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010518:	2900      	cmp	r1, #0
 801051a:	b096      	sub	sp, #88	; 0x58
 801051c:	4615      	mov	r5, r2
 801051e:	461e      	mov	r6, r3
 8010520:	da0d      	bge.n	801053e <__swhatbuf_r+0x2e>
 8010522:	89a3      	ldrh	r3, [r4, #12]
 8010524:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010528:	f04f 0100 	mov.w	r1, #0
 801052c:	bf0c      	ite	eq
 801052e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010532:	2340      	movne	r3, #64	; 0x40
 8010534:	2000      	movs	r0, #0
 8010536:	6031      	str	r1, [r6, #0]
 8010538:	602b      	str	r3, [r5, #0]
 801053a:	b016      	add	sp, #88	; 0x58
 801053c:	bd70      	pop	{r4, r5, r6, pc}
 801053e:	466a      	mov	r2, sp
 8010540:	f000 f848 	bl	80105d4 <_fstat_r>
 8010544:	2800      	cmp	r0, #0
 8010546:	dbec      	blt.n	8010522 <__swhatbuf_r+0x12>
 8010548:	9901      	ldr	r1, [sp, #4]
 801054a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801054e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010552:	4259      	negs	r1, r3
 8010554:	4159      	adcs	r1, r3
 8010556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801055a:	e7eb      	b.n	8010534 <__swhatbuf_r+0x24>

0801055c <__smakebuf_r>:
 801055c:	898b      	ldrh	r3, [r1, #12]
 801055e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010560:	079d      	lsls	r5, r3, #30
 8010562:	4606      	mov	r6, r0
 8010564:	460c      	mov	r4, r1
 8010566:	d507      	bpl.n	8010578 <__smakebuf_r+0x1c>
 8010568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801056c:	6023      	str	r3, [r4, #0]
 801056e:	6123      	str	r3, [r4, #16]
 8010570:	2301      	movs	r3, #1
 8010572:	6163      	str	r3, [r4, #20]
 8010574:	b002      	add	sp, #8
 8010576:	bd70      	pop	{r4, r5, r6, pc}
 8010578:	ab01      	add	r3, sp, #4
 801057a:	466a      	mov	r2, sp
 801057c:	f7ff ffc8 	bl	8010510 <__swhatbuf_r>
 8010580:	9900      	ldr	r1, [sp, #0]
 8010582:	4605      	mov	r5, r0
 8010584:	4630      	mov	r0, r6
 8010586:	f7ff f909 	bl	800f79c <_malloc_r>
 801058a:	b948      	cbnz	r0, 80105a0 <__smakebuf_r+0x44>
 801058c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010590:	059a      	lsls	r2, r3, #22
 8010592:	d4ef      	bmi.n	8010574 <__smakebuf_r+0x18>
 8010594:	f023 0303 	bic.w	r3, r3, #3
 8010598:	f043 0302 	orr.w	r3, r3, #2
 801059c:	81a3      	strh	r3, [r4, #12]
 801059e:	e7e3      	b.n	8010568 <__smakebuf_r+0xc>
 80105a0:	89a3      	ldrh	r3, [r4, #12]
 80105a2:	6020      	str	r0, [r4, #0]
 80105a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105a8:	81a3      	strh	r3, [r4, #12]
 80105aa:	9b00      	ldr	r3, [sp, #0]
 80105ac:	6163      	str	r3, [r4, #20]
 80105ae:	9b01      	ldr	r3, [sp, #4]
 80105b0:	6120      	str	r0, [r4, #16]
 80105b2:	b15b      	cbz	r3, 80105cc <__smakebuf_r+0x70>
 80105b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105b8:	4630      	mov	r0, r6
 80105ba:	f000 f81d 	bl	80105f8 <_isatty_r>
 80105be:	b128      	cbz	r0, 80105cc <__smakebuf_r+0x70>
 80105c0:	89a3      	ldrh	r3, [r4, #12]
 80105c2:	f023 0303 	bic.w	r3, r3, #3
 80105c6:	f043 0301 	orr.w	r3, r3, #1
 80105ca:	81a3      	strh	r3, [r4, #12]
 80105cc:	89a3      	ldrh	r3, [r4, #12]
 80105ce:	431d      	orrs	r5, r3
 80105d0:	81a5      	strh	r5, [r4, #12]
 80105d2:	e7cf      	b.n	8010574 <__smakebuf_r+0x18>

080105d4 <_fstat_r>:
 80105d4:	b538      	push	{r3, r4, r5, lr}
 80105d6:	4d07      	ldr	r5, [pc, #28]	; (80105f4 <_fstat_r+0x20>)
 80105d8:	2300      	movs	r3, #0
 80105da:	4604      	mov	r4, r0
 80105dc:	4608      	mov	r0, r1
 80105de:	4611      	mov	r1, r2
 80105e0:	602b      	str	r3, [r5, #0]
 80105e2:	f7f5 fb66 	bl	8005cb2 <_fstat>
 80105e6:	1c43      	adds	r3, r0, #1
 80105e8:	d102      	bne.n	80105f0 <_fstat_r+0x1c>
 80105ea:	682b      	ldr	r3, [r5, #0]
 80105ec:	b103      	cbz	r3, 80105f0 <_fstat_r+0x1c>
 80105ee:	6023      	str	r3, [r4, #0]
 80105f0:	bd38      	pop	{r3, r4, r5, pc}
 80105f2:	bf00      	nop
 80105f4:	20007584 	.word	0x20007584

080105f8 <_isatty_r>:
 80105f8:	b538      	push	{r3, r4, r5, lr}
 80105fa:	4d06      	ldr	r5, [pc, #24]	; (8010614 <_isatty_r+0x1c>)
 80105fc:	2300      	movs	r3, #0
 80105fe:	4604      	mov	r4, r0
 8010600:	4608      	mov	r0, r1
 8010602:	602b      	str	r3, [r5, #0]
 8010604:	f7f5 fb65 	bl	8005cd2 <_isatty>
 8010608:	1c43      	adds	r3, r0, #1
 801060a:	d102      	bne.n	8010612 <_isatty_r+0x1a>
 801060c:	682b      	ldr	r3, [r5, #0]
 801060e:	b103      	cbz	r3, 8010612 <_isatty_r+0x1a>
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	bd38      	pop	{r3, r4, r5, pc}
 8010614:	20007584 	.word	0x20007584

08010618 <cos>:
 8010618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801061a:	ec53 2b10 	vmov	r2, r3, d0
 801061e:	4826      	ldr	r0, [pc, #152]	; (80106b8 <cos+0xa0>)
 8010620:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010624:	4281      	cmp	r1, r0
 8010626:	dc06      	bgt.n	8010636 <cos+0x1e>
 8010628:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80106b0 <cos+0x98>
 801062c:	b005      	add	sp, #20
 801062e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010632:	f000 b845 	b.w	80106c0 <__kernel_cos>
 8010636:	4821      	ldr	r0, [pc, #132]	; (80106bc <cos+0xa4>)
 8010638:	4281      	cmp	r1, r0
 801063a:	dd09      	ble.n	8010650 <cos+0x38>
 801063c:	ee10 0a10 	vmov	r0, s0
 8010640:	4619      	mov	r1, r3
 8010642:	f7ef fe51 	bl	80002e8 <__aeabi_dsub>
 8010646:	ec41 0b10 	vmov	d0, r0, r1
 801064a:	b005      	add	sp, #20
 801064c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010650:	4668      	mov	r0, sp
 8010652:	f000 f9bd 	bl	80109d0 <__ieee754_rem_pio2>
 8010656:	f000 0003 	and.w	r0, r0, #3
 801065a:	2801      	cmp	r0, #1
 801065c:	d00b      	beq.n	8010676 <cos+0x5e>
 801065e:	2802      	cmp	r0, #2
 8010660:	d016      	beq.n	8010690 <cos+0x78>
 8010662:	b9e0      	cbnz	r0, 801069e <cos+0x86>
 8010664:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010668:	ed9d 0b00 	vldr	d0, [sp]
 801066c:	f000 f828 	bl	80106c0 <__kernel_cos>
 8010670:	ec51 0b10 	vmov	r0, r1, d0
 8010674:	e7e7      	b.n	8010646 <cos+0x2e>
 8010676:	ed9d 1b02 	vldr	d1, [sp, #8]
 801067a:	ed9d 0b00 	vldr	d0, [sp]
 801067e:	f000 f8e7 	bl	8010850 <__kernel_sin>
 8010682:	ec53 2b10 	vmov	r2, r3, d0
 8010686:	ee10 0a10 	vmov	r0, s0
 801068a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801068e:	e7da      	b.n	8010646 <cos+0x2e>
 8010690:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010694:	ed9d 0b00 	vldr	d0, [sp]
 8010698:	f000 f812 	bl	80106c0 <__kernel_cos>
 801069c:	e7f1      	b.n	8010682 <cos+0x6a>
 801069e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80106a2:	ed9d 0b00 	vldr	d0, [sp]
 80106a6:	2001      	movs	r0, #1
 80106a8:	f000 f8d2 	bl	8010850 <__kernel_sin>
 80106ac:	e7e0      	b.n	8010670 <cos+0x58>
 80106ae:	bf00      	nop
	...
 80106b8:	3fe921fb 	.word	0x3fe921fb
 80106bc:	7fefffff 	.word	0x7fefffff

080106c0 <__kernel_cos>:
 80106c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	ec57 6b10 	vmov	r6, r7, d0
 80106c8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80106cc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80106d0:	ed8d 1b00 	vstr	d1, [sp]
 80106d4:	da07      	bge.n	80106e6 <__kernel_cos+0x26>
 80106d6:	ee10 0a10 	vmov	r0, s0
 80106da:	4639      	mov	r1, r7
 80106dc:	f7f0 fa56 	bl	8000b8c <__aeabi_d2iz>
 80106e0:	2800      	cmp	r0, #0
 80106e2:	f000 8088 	beq.w	80107f6 <__kernel_cos+0x136>
 80106e6:	4632      	mov	r2, r6
 80106e8:	463b      	mov	r3, r7
 80106ea:	4630      	mov	r0, r6
 80106ec:	4639      	mov	r1, r7
 80106ee:	f7ef ffb3 	bl	8000658 <__aeabi_dmul>
 80106f2:	4b51      	ldr	r3, [pc, #324]	; (8010838 <__kernel_cos+0x178>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	460d      	mov	r5, r1
 80106fa:	f7ef ffad 	bl	8000658 <__aeabi_dmul>
 80106fe:	a340      	add	r3, pc, #256	; (adr r3, 8010800 <__kernel_cos+0x140>)
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	4682      	mov	sl, r0
 8010706:	468b      	mov	fp, r1
 8010708:	4620      	mov	r0, r4
 801070a:	4629      	mov	r1, r5
 801070c:	f7ef ffa4 	bl	8000658 <__aeabi_dmul>
 8010710:	a33d      	add	r3, pc, #244	; (adr r3, 8010808 <__kernel_cos+0x148>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	f7ef fde9 	bl	80002ec <__adddf3>
 801071a:	4622      	mov	r2, r4
 801071c:	462b      	mov	r3, r5
 801071e:	f7ef ff9b 	bl	8000658 <__aeabi_dmul>
 8010722:	a33b      	add	r3, pc, #236	; (adr r3, 8010810 <__kernel_cos+0x150>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	f7ef fdde 	bl	80002e8 <__aeabi_dsub>
 801072c:	4622      	mov	r2, r4
 801072e:	462b      	mov	r3, r5
 8010730:	f7ef ff92 	bl	8000658 <__aeabi_dmul>
 8010734:	a338      	add	r3, pc, #224	; (adr r3, 8010818 <__kernel_cos+0x158>)
 8010736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073a:	f7ef fdd7 	bl	80002ec <__adddf3>
 801073e:	4622      	mov	r2, r4
 8010740:	462b      	mov	r3, r5
 8010742:	f7ef ff89 	bl	8000658 <__aeabi_dmul>
 8010746:	a336      	add	r3, pc, #216	; (adr r3, 8010820 <__kernel_cos+0x160>)
 8010748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074c:	f7ef fdcc 	bl	80002e8 <__aeabi_dsub>
 8010750:	4622      	mov	r2, r4
 8010752:	462b      	mov	r3, r5
 8010754:	f7ef ff80 	bl	8000658 <__aeabi_dmul>
 8010758:	a333      	add	r3, pc, #204	; (adr r3, 8010828 <__kernel_cos+0x168>)
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	f7ef fdc5 	bl	80002ec <__adddf3>
 8010762:	4622      	mov	r2, r4
 8010764:	462b      	mov	r3, r5
 8010766:	f7ef ff77 	bl	8000658 <__aeabi_dmul>
 801076a:	4622      	mov	r2, r4
 801076c:	462b      	mov	r3, r5
 801076e:	f7ef ff73 	bl	8000658 <__aeabi_dmul>
 8010772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010776:	4604      	mov	r4, r0
 8010778:	460d      	mov	r5, r1
 801077a:	4630      	mov	r0, r6
 801077c:	4639      	mov	r1, r7
 801077e:	f7ef ff6b 	bl	8000658 <__aeabi_dmul>
 8010782:	460b      	mov	r3, r1
 8010784:	4602      	mov	r2, r0
 8010786:	4629      	mov	r1, r5
 8010788:	4620      	mov	r0, r4
 801078a:	f7ef fdad 	bl	80002e8 <__aeabi_dsub>
 801078e:	4b2b      	ldr	r3, [pc, #172]	; (801083c <__kernel_cos+0x17c>)
 8010790:	4598      	cmp	r8, r3
 8010792:	4606      	mov	r6, r0
 8010794:	460f      	mov	r7, r1
 8010796:	dc10      	bgt.n	80107ba <__kernel_cos+0xfa>
 8010798:	4602      	mov	r2, r0
 801079a:	460b      	mov	r3, r1
 801079c:	4650      	mov	r0, sl
 801079e:	4659      	mov	r1, fp
 80107a0:	f7ef fda2 	bl	80002e8 <__aeabi_dsub>
 80107a4:	460b      	mov	r3, r1
 80107a6:	4926      	ldr	r1, [pc, #152]	; (8010840 <__kernel_cos+0x180>)
 80107a8:	4602      	mov	r2, r0
 80107aa:	2000      	movs	r0, #0
 80107ac:	f7ef fd9c 	bl	80002e8 <__aeabi_dsub>
 80107b0:	ec41 0b10 	vmov	d0, r0, r1
 80107b4:	b003      	add	sp, #12
 80107b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ba:	4b22      	ldr	r3, [pc, #136]	; (8010844 <__kernel_cos+0x184>)
 80107bc:	4920      	ldr	r1, [pc, #128]	; (8010840 <__kernel_cos+0x180>)
 80107be:	4598      	cmp	r8, r3
 80107c0:	bfcc      	ite	gt
 80107c2:	4d21      	ldrgt	r5, [pc, #132]	; (8010848 <__kernel_cos+0x188>)
 80107c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80107c8:	2400      	movs	r4, #0
 80107ca:	4622      	mov	r2, r4
 80107cc:	462b      	mov	r3, r5
 80107ce:	2000      	movs	r0, #0
 80107d0:	f7ef fd8a 	bl	80002e8 <__aeabi_dsub>
 80107d4:	4622      	mov	r2, r4
 80107d6:	4680      	mov	r8, r0
 80107d8:	4689      	mov	r9, r1
 80107da:	462b      	mov	r3, r5
 80107dc:	4650      	mov	r0, sl
 80107de:	4659      	mov	r1, fp
 80107e0:	f7ef fd82 	bl	80002e8 <__aeabi_dsub>
 80107e4:	4632      	mov	r2, r6
 80107e6:	463b      	mov	r3, r7
 80107e8:	f7ef fd7e 	bl	80002e8 <__aeabi_dsub>
 80107ec:	4602      	mov	r2, r0
 80107ee:	460b      	mov	r3, r1
 80107f0:	4640      	mov	r0, r8
 80107f2:	4649      	mov	r1, r9
 80107f4:	e7da      	b.n	80107ac <__kernel_cos+0xec>
 80107f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010830 <__kernel_cos+0x170>
 80107fa:	e7db      	b.n	80107b4 <__kernel_cos+0xf4>
 80107fc:	f3af 8000 	nop.w
 8010800:	be8838d4 	.word	0xbe8838d4
 8010804:	bda8fae9 	.word	0xbda8fae9
 8010808:	bdb4b1c4 	.word	0xbdb4b1c4
 801080c:	3e21ee9e 	.word	0x3e21ee9e
 8010810:	809c52ad 	.word	0x809c52ad
 8010814:	3e927e4f 	.word	0x3e927e4f
 8010818:	19cb1590 	.word	0x19cb1590
 801081c:	3efa01a0 	.word	0x3efa01a0
 8010820:	16c15177 	.word	0x16c15177
 8010824:	3f56c16c 	.word	0x3f56c16c
 8010828:	5555554c 	.word	0x5555554c
 801082c:	3fa55555 	.word	0x3fa55555
 8010830:	00000000 	.word	0x00000000
 8010834:	3ff00000 	.word	0x3ff00000
 8010838:	3fe00000 	.word	0x3fe00000
 801083c:	3fd33332 	.word	0x3fd33332
 8010840:	3ff00000 	.word	0x3ff00000
 8010844:	3fe90000 	.word	0x3fe90000
 8010848:	3fd20000 	.word	0x3fd20000
 801084c:	00000000 	.word	0x00000000

08010850 <__kernel_sin>:
 8010850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010854:	ed2d 8b04 	vpush	{d8-d9}
 8010858:	eeb0 8a41 	vmov.f32	s16, s2
 801085c:	eef0 8a61 	vmov.f32	s17, s3
 8010860:	ec55 4b10 	vmov	r4, r5, d0
 8010864:	b083      	sub	sp, #12
 8010866:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801086a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801086e:	9001      	str	r0, [sp, #4]
 8010870:	da06      	bge.n	8010880 <__kernel_sin+0x30>
 8010872:	ee10 0a10 	vmov	r0, s0
 8010876:	4629      	mov	r1, r5
 8010878:	f7f0 f988 	bl	8000b8c <__aeabi_d2iz>
 801087c:	2800      	cmp	r0, #0
 801087e:	d051      	beq.n	8010924 <__kernel_sin+0xd4>
 8010880:	4622      	mov	r2, r4
 8010882:	462b      	mov	r3, r5
 8010884:	4620      	mov	r0, r4
 8010886:	4629      	mov	r1, r5
 8010888:	f7ef fee6 	bl	8000658 <__aeabi_dmul>
 801088c:	4682      	mov	sl, r0
 801088e:	468b      	mov	fp, r1
 8010890:	4602      	mov	r2, r0
 8010892:	460b      	mov	r3, r1
 8010894:	4620      	mov	r0, r4
 8010896:	4629      	mov	r1, r5
 8010898:	f7ef fede 	bl	8000658 <__aeabi_dmul>
 801089c:	a341      	add	r3, pc, #260	; (adr r3, 80109a4 <__kernel_sin+0x154>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	4680      	mov	r8, r0
 80108a4:	4689      	mov	r9, r1
 80108a6:	4650      	mov	r0, sl
 80108a8:	4659      	mov	r1, fp
 80108aa:	f7ef fed5 	bl	8000658 <__aeabi_dmul>
 80108ae:	a33f      	add	r3, pc, #252	; (adr r3, 80109ac <__kernel_sin+0x15c>)
 80108b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b4:	f7ef fd18 	bl	80002e8 <__aeabi_dsub>
 80108b8:	4652      	mov	r2, sl
 80108ba:	465b      	mov	r3, fp
 80108bc:	f7ef fecc 	bl	8000658 <__aeabi_dmul>
 80108c0:	a33c      	add	r3, pc, #240	; (adr r3, 80109b4 <__kernel_sin+0x164>)
 80108c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c6:	f7ef fd11 	bl	80002ec <__adddf3>
 80108ca:	4652      	mov	r2, sl
 80108cc:	465b      	mov	r3, fp
 80108ce:	f7ef fec3 	bl	8000658 <__aeabi_dmul>
 80108d2:	a33a      	add	r3, pc, #232	; (adr r3, 80109bc <__kernel_sin+0x16c>)
 80108d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d8:	f7ef fd06 	bl	80002e8 <__aeabi_dsub>
 80108dc:	4652      	mov	r2, sl
 80108de:	465b      	mov	r3, fp
 80108e0:	f7ef feba 	bl	8000658 <__aeabi_dmul>
 80108e4:	a337      	add	r3, pc, #220	; (adr r3, 80109c4 <__kernel_sin+0x174>)
 80108e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ea:	f7ef fcff 	bl	80002ec <__adddf3>
 80108ee:	9b01      	ldr	r3, [sp, #4]
 80108f0:	4606      	mov	r6, r0
 80108f2:	460f      	mov	r7, r1
 80108f4:	b9eb      	cbnz	r3, 8010932 <__kernel_sin+0xe2>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	4650      	mov	r0, sl
 80108fc:	4659      	mov	r1, fp
 80108fe:	f7ef feab 	bl	8000658 <__aeabi_dmul>
 8010902:	a325      	add	r3, pc, #148	; (adr r3, 8010998 <__kernel_sin+0x148>)
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	f7ef fcee 	bl	80002e8 <__aeabi_dsub>
 801090c:	4642      	mov	r2, r8
 801090e:	464b      	mov	r3, r9
 8010910:	f7ef fea2 	bl	8000658 <__aeabi_dmul>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4620      	mov	r0, r4
 801091a:	4629      	mov	r1, r5
 801091c:	f7ef fce6 	bl	80002ec <__adddf3>
 8010920:	4604      	mov	r4, r0
 8010922:	460d      	mov	r5, r1
 8010924:	ec45 4b10 	vmov	d0, r4, r5
 8010928:	b003      	add	sp, #12
 801092a:	ecbd 8b04 	vpop	{d8-d9}
 801092e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010932:	4b1b      	ldr	r3, [pc, #108]	; (80109a0 <__kernel_sin+0x150>)
 8010934:	ec51 0b18 	vmov	r0, r1, d8
 8010938:	2200      	movs	r2, #0
 801093a:	f7ef fe8d 	bl	8000658 <__aeabi_dmul>
 801093e:	4632      	mov	r2, r6
 8010940:	ec41 0b19 	vmov	d9, r0, r1
 8010944:	463b      	mov	r3, r7
 8010946:	4640      	mov	r0, r8
 8010948:	4649      	mov	r1, r9
 801094a:	f7ef fe85 	bl	8000658 <__aeabi_dmul>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	ec51 0b19 	vmov	r0, r1, d9
 8010956:	f7ef fcc7 	bl	80002e8 <__aeabi_dsub>
 801095a:	4652      	mov	r2, sl
 801095c:	465b      	mov	r3, fp
 801095e:	f7ef fe7b 	bl	8000658 <__aeabi_dmul>
 8010962:	ec53 2b18 	vmov	r2, r3, d8
 8010966:	f7ef fcbf 	bl	80002e8 <__aeabi_dsub>
 801096a:	a30b      	add	r3, pc, #44	; (adr r3, 8010998 <__kernel_sin+0x148>)
 801096c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010970:	4606      	mov	r6, r0
 8010972:	460f      	mov	r7, r1
 8010974:	4640      	mov	r0, r8
 8010976:	4649      	mov	r1, r9
 8010978:	f7ef fe6e 	bl	8000658 <__aeabi_dmul>
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	4630      	mov	r0, r6
 8010982:	4639      	mov	r1, r7
 8010984:	f7ef fcb2 	bl	80002ec <__adddf3>
 8010988:	4602      	mov	r2, r0
 801098a:	460b      	mov	r3, r1
 801098c:	4620      	mov	r0, r4
 801098e:	4629      	mov	r1, r5
 8010990:	f7ef fcaa 	bl	80002e8 <__aeabi_dsub>
 8010994:	e7c4      	b.n	8010920 <__kernel_sin+0xd0>
 8010996:	bf00      	nop
 8010998:	55555549 	.word	0x55555549
 801099c:	3fc55555 	.word	0x3fc55555
 80109a0:	3fe00000 	.word	0x3fe00000
 80109a4:	5acfd57c 	.word	0x5acfd57c
 80109a8:	3de5d93a 	.word	0x3de5d93a
 80109ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80109b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80109b4:	57b1fe7d 	.word	0x57b1fe7d
 80109b8:	3ec71de3 	.word	0x3ec71de3
 80109bc:	19c161d5 	.word	0x19c161d5
 80109c0:	3f2a01a0 	.word	0x3f2a01a0
 80109c4:	1110f8a6 	.word	0x1110f8a6
 80109c8:	3f811111 	.word	0x3f811111
 80109cc:	00000000 	.word	0x00000000

080109d0 <__ieee754_rem_pio2>:
 80109d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d4:	ed2d 8b02 	vpush	{d8}
 80109d8:	ec55 4b10 	vmov	r4, r5, d0
 80109dc:	4bca      	ldr	r3, [pc, #808]	; (8010d08 <__ieee754_rem_pio2+0x338>)
 80109de:	b08b      	sub	sp, #44	; 0x2c
 80109e0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80109e4:	4598      	cmp	r8, r3
 80109e6:	4682      	mov	sl, r0
 80109e8:	9502      	str	r5, [sp, #8]
 80109ea:	dc08      	bgt.n	80109fe <__ieee754_rem_pio2+0x2e>
 80109ec:	2200      	movs	r2, #0
 80109ee:	2300      	movs	r3, #0
 80109f0:	ed80 0b00 	vstr	d0, [r0]
 80109f4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80109f8:	f04f 0b00 	mov.w	fp, #0
 80109fc:	e028      	b.n	8010a50 <__ieee754_rem_pio2+0x80>
 80109fe:	4bc3      	ldr	r3, [pc, #780]	; (8010d0c <__ieee754_rem_pio2+0x33c>)
 8010a00:	4598      	cmp	r8, r3
 8010a02:	dc78      	bgt.n	8010af6 <__ieee754_rem_pio2+0x126>
 8010a04:	9b02      	ldr	r3, [sp, #8]
 8010a06:	4ec2      	ldr	r6, [pc, #776]	; (8010d10 <__ieee754_rem_pio2+0x340>)
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	ee10 0a10 	vmov	r0, s0
 8010a0e:	a3b0      	add	r3, pc, #704	; (adr r3, 8010cd0 <__ieee754_rem_pio2+0x300>)
 8010a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a14:	4629      	mov	r1, r5
 8010a16:	dd39      	ble.n	8010a8c <__ieee754_rem_pio2+0xbc>
 8010a18:	f7ef fc66 	bl	80002e8 <__aeabi_dsub>
 8010a1c:	45b0      	cmp	r8, r6
 8010a1e:	4604      	mov	r4, r0
 8010a20:	460d      	mov	r5, r1
 8010a22:	d01b      	beq.n	8010a5c <__ieee754_rem_pio2+0x8c>
 8010a24:	a3ac      	add	r3, pc, #688	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x308>)
 8010a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a2a:	f7ef fc5d 	bl	80002e8 <__aeabi_dsub>
 8010a2e:	4602      	mov	r2, r0
 8010a30:	460b      	mov	r3, r1
 8010a32:	e9ca 2300 	strd	r2, r3, [sl]
 8010a36:	4620      	mov	r0, r4
 8010a38:	4629      	mov	r1, r5
 8010a3a:	f7ef fc55 	bl	80002e8 <__aeabi_dsub>
 8010a3e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x308>)
 8010a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a44:	f7ef fc50 	bl	80002e8 <__aeabi_dsub>
 8010a48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010a4c:	f04f 0b01 	mov.w	fp, #1
 8010a50:	4658      	mov	r0, fp
 8010a52:	b00b      	add	sp, #44	; 0x2c
 8010a54:	ecbd 8b02 	vpop	{d8}
 8010a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a5c:	a3a0      	add	r3, pc, #640	; (adr r3, 8010ce0 <__ieee754_rem_pio2+0x310>)
 8010a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a62:	f7ef fc41 	bl	80002e8 <__aeabi_dsub>
 8010a66:	a3a0      	add	r3, pc, #640	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x318>)
 8010a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a6c:	4604      	mov	r4, r0
 8010a6e:	460d      	mov	r5, r1
 8010a70:	f7ef fc3a 	bl	80002e8 <__aeabi_dsub>
 8010a74:	4602      	mov	r2, r0
 8010a76:	460b      	mov	r3, r1
 8010a78:	e9ca 2300 	strd	r2, r3, [sl]
 8010a7c:	4620      	mov	r0, r4
 8010a7e:	4629      	mov	r1, r5
 8010a80:	f7ef fc32 	bl	80002e8 <__aeabi_dsub>
 8010a84:	a398      	add	r3, pc, #608	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x318>)
 8010a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8a:	e7db      	b.n	8010a44 <__ieee754_rem_pio2+0x74>
 8010a8c:	f7ef fc2e 	bl	80002ec <__adddf3>
 8010a90:	45b0      	cmp	r8, r6
 8010a92:	4604      	mov	r4, r0
 8010a94:	460d      	mov	r5, r1
 8010a96:	d016      	beq.n	8010ac6 <__ieee754_rem_pio2+0xf6>
 8010a98:	a38f      	add	r3, pc, #572	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x308>)
 8010a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9e:	f7ef fc25 	bl	80002ec <__adddf3>
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	e9ca 2300 	strd	r2, r3, [sl]
 8010aaa:	4620      	mov	r0, r4
 8010aac:	4629      	mov	r1, r5
 8010aae:	f7ef fc1b 	bl	80002e8 <__aeabi_dsub>
 8010ab2:	a389      	add	r3, pc, #548	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x308>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f7ef fc18 	bl	80002ec <__adddf3>
 8010abc:	f04f 3bff 	mov.w	fp, #4294967295
 8010ac0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010ac4:	e7c4      	b.n	8010a50 <__ieee754_rem_pio2+0x80>
 8010ac6:	a386      	add	r3, pc, #536	; (adr r3, 8010ce0 <__ieee754_rem_pio2+0x310>)
 8010ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010acc:	f7ef fc0e 	bl	80002ec <__adddf3>
 8010ad0:	a385      	add	r3, pc, #532	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x318>)
 8010ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad6:	4604      	mov	r4, r0
 8010ad8:	460d      	mov	r5, r1
 8010ada:	f7ef fc07 	bl	80002ec <__adddf3>
 8010ade:	4602      	mov	r2, r0
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	e9ca 2300 	strd	r2, r3, [sl]
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	4629      	mov	r1, r5
 8010aea:	f7ef fbfd 	bl	80002e8 <__aeabi_dsub>
 8010aee:	a37e      	add	r3, pc, #504	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x318>)
 8010af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af4:	e7e0      	b.n	8010ab8 <__ieee754_rem_pio2+0xe8>
 8010af6:	4b87      	ldr	r3, [pc, #540]	; (8010d14 <__ieee754_rem_pio2+0x344>)
 8010af8:	4598      	cmp	r8, r3
 8010afa:	f300 80d8 	bgt.w	8010cae <__ieee754_rem_pio2+0x2de>
 8010afe:	f000 f96d 	bl	8010ddc <fabs>
 8010b02:	ec55 4b10 	vmov	r4, r5, d0
 8010b06:	ee10 0a10 	vmov	r0, s0
 8010b0a:	a379      	add	r3, pc, #484	; (adr r3, 8010cf0 <__ieee754_rem_pio2+0x320>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	4629      	mov	r1, r5
 8010b12:	f7ef fda1 	bl	8000658 <__aeabi_dmul>
 8010b16:	4b80      	ldr	r3, [pc, #512]	; (8010d18 <__ieee754_rem_pio2+0x348>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f7ef fbe7 	bl	80002ec <__adddf3>
 8010b1e:	f7f0 f835 	bl	8000b8c <__aeabi_d2iz>
 8010b22:	4683      	mov	fp, r0
 8010b24:	f7ef fd2e 	bl	8000584 <__aeabi_i2d>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	ec43 2b18 	vmov	d8, r2, r3
 8010b30:	a367      	add	r3, pc, #412	; (adr r3, 8010cd0 <__ieee754_rem_pio2+0x300>)
 8010b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b36:	f7ef fd8f 	bl	8000658 <__aeabi_dmul>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	4620      	mov	r0, r4
 8010b40:	4629      	mov	r1, r5
 8010b42:	f7ef fbd1 	bl	80002e8 <__aeabi_dsub>
 8010b46:	a364      	add	r3, pc, #400	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x308>)
 8010b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4c:	4606      	mov	r6, r0
 8010b4e:	460f      	mov	r7, r1
 8010b50:	ec51 0b18 	vmov	r0, r1, d8
 8010b54:	f7ef fd80 	bl	8000658 <__aeabi_dmul>
 8010b58:	f1bb 0f1f 	cmp.w	fp, #31
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	460d      	mov	r5, r1
 8010b60:	dc0d      	bgt.n	8010b7e <__ieee754_rem_pio2+0x1ae>
 8010b62:	4b6e      	ldr	r3, [pc, #440]	; (8010d1c <__ieee754_rem_pio2+0x34c>)
 8010b64:	f10b 32ff 	add.w	r2, fp, #4294967295
 8010b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b6c:	4543      	cmp	r3, r8
 8010b6e:	d006      	beq.n	8010b7e <__ieee754_rem_pio2+0x1ae>
 8010b70:	4622      	mov	r2, r4
 8010b72:	462b      	mov	r3, r5
 8010b74:	4630      	mov	r0, r6
 8010b76:	4639      	mov	r1, r7
 8010b78:	f7ef fbb6 	bl	80002e8 <__aeabi_dsub>
 8010b7c:	e00e      	b.n	8010b9c <__ieee754_rem_pio2+0x1cc>
 8010b7e:	462b      	mov	r3, r5
 8010b80:	4622      	mov	r2, r4
 8010b82:	4630      	mov	r0, r6
 8010b84:	4639      	mov	r1, r7
 8010b86:	f7ef fbaf 	bl	80002e8 <__aeabi_dsub>
 8010b8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b8e:	9303      	str	r3, [sp, #12]
 8010b90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b94:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010b98:	2b10      	cmp	r3, #16
 8010b9a:	dc02      	bgt.n	8010ba2 <__ieee754_rem_pio2+0x1d2>
 8010b9c:	e9ca 0100 	strd	r0, r1, [sl]
 8010ba0:	e039      	b.n	8010c16 <__ieee754_rem_pio2+0x246>
 8010ba2:	a34f      	add	r3, pc, #316	; (adr r3, 8010ce0 <__ieee754_rem_pio2+0x310>)
 8010ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba8:	ec51 0b18 	vmov	r0, r1, d8
 8010bac:	f7ef fd54 	bl	8000658 <__aeabi_dmul>
 8010bb0:	4604      	mov	r4, r0
 8010bb2:	460d      	mov	r5, r1
 8010bb4:	4602      	mov	r2, r0
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4630      	mov	r0, r6
 8010bba:	4639      	mov	r1, r7
 8010bbc:	f7ef fb94 	bl	80002e8 <__aeabi_dsub>
 8010bc0:	4602      	mov	r2, r0
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	4680      	mov	r8, r0
 8010bc6:	4689      	mov	r9, r1
 8010bc8:	4630      	mov	r0, r6
 8010bca:	4639      	mov	r1, r7
 8010bcc:	f7ef fb8c 	bl	80002e8 <__aeabi_dsub>
 8010bd0:	4622      	mov	r2, r4
 8010bd2:	462b      	mov	r3, r5
 8010bd4:	f7ef fb88 	bl	80002e8 <__aeabi_dsub>
 8010bd8:	a343      	add	r3, pc, #268	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x318>)
 8010bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bde:	4604      	mov	r4, r0
 8010be0:	460d      	mov	r5, r1
 8010be2:	ec51 0b18 	vmov	r0, r1, d8
 8010be6:	f7ef fd37 	bl	8000658 <__aeabi_dmul>
 8010bea:	4622      	mov	r2, r4
 8010bec:	462b      	mov	r3, r5
 8010bee:	f7ef fb7b 	bl	80002e8 <__aeabi_dsub>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	460d      	mov	r5, r1
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	f7ef fb73 	bl	80002e8 <__aeabi_dsub>
 8010c02:	9a03      	ldr	r2, [sp, #12]
 8010c04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c08:	1ad3      	subs	r3, r2, r3
 8010c0a:	2b31      	cmp	r3, #49	; 0x31
 8010c0c:	dc24      	bgt.n	8010c58 <__ieee754_rem_pio2+0x288>
 8010c0e:	e9ca 0100 	strd	r0, r1, [sl]
 8010c12:	4646      	mov	r6, r8
 8010c14:	464f      	mov	r7, r9
 8010c16:	e9da 8900 	ldrd	r8, r9, [sl]
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	4642      	mov	r2, r8
 8010c1e:	464b      	mov	r3, r9
 8010c20:	4639      	mov	r1, r7
 8010c22:	f7ef fb61 	bl	80002e8 <__aeabi_dsub>
 8010c26:	462b      	mov	r3, r5
 8010c28:	4622      	mov	r2, r4
 8010c2a:	f7ef fb5d 	bl	80002e8 <__aeabi_dsub>
 8010c2e:	9b02      	ldr	r3, [sp, #8]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010c36:	f6bf af0b 	bge.w	8010a50 <__ieee754_rem_pio2+0x80>
 8010c3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c3e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c46:	f8ca 8000 	str.w	r8, [sl]
 8010c4a:	f8ca 0008 	str.w	r0, [sl, #8]
 8010c4e:	f8ca 300c 	str.w	r3, [sl, #12]
 8010c52:	f1cb 0b00 	rsb	fp, fp, #0
 8010c56:	e6fb      	b.n	8010a50 <__ieee754_rem_pio2+0x80>
 8010c58:	a327      	add	r3, pc, #156	; (adr r3, 8010cf8 <__ieee754_rem_pio2+0x328>)
 8010c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5e:	ec51 0b18 	vmov	r0, r1, d8
 8010c62:	f7ef fcf9 	bl	8000658 <__aeabi_dmul>
 8010c66:	4604      	mov	r4, r0
 8010c68:	460d      	mov	r5, r1
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4640      	mov	r0, r8
 8010c70:	4649      	mov	r1, r9
 8010c72:	f7ef fb39 	bl	80002e8 <__aeabi_dsub>
 8010c76:	4602      	mov	r2, r0
 8010c78:	460b      	mov	r3, r1
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	460f      	mov	r7, r1
 8010c7e:	4640      	mov	r0, r8
 8010c80:	4649      	mov	r1, r9
 8010c82:	f7ef fb31 	bl	80002e8 <__aeabi_dsub>
 8010c86:	4622      	mov	r2, r4
 8010c88:	462b      	mov	r3, r5
 8010c8a:	f7ef fb2d 	bl	80002e8 <__aeabi_dsub>
 8010c8e:	a31c      	add	r3, pc, #112	; (adr r3, 8010d00 <__ieee754_rem_pio2+0x330>)
 8010c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c94:	4604      	mov	r4, r0
 8010c96:	460d      	mov	r5, r1
 8010c98:	ec51 0b18 	vmov	r0, r1, d8
 8010c9c:	f7ef fcdc 	bl	8000658 <__aeabi_dmul>
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	f7ef fb20 	bl	80002e8 <__aeabi_dsub>
 8010ca8:	4604      	mov	r4, r0
 8010caa:	460d      	mov	r5, r1
 8010cac:	e760      	b.n	8010b70 <__ieee754_rem_pio2+0x1a0>
 8010cae:	4b1c      	ldr	r3, [pc, #112]	; (8010d20 <__ieee754_rem_pio2+0x350>)
 8010cb0:	4598      	cmp	r8, r3
 8010cb2:	dd37      	ble.n	8010d24 <__ieee754_rem_pio2+0x354>
 8010cb4:	ee10 2a10 	vmov	r2, s0
 8010cb8:	462b      	mov	r3, r5
 8010cba:	4620      	mov	r0, r4
 8010cbc:	4629      	mov	r1, r5
 8010cbe:	f7ef fb13 	bl	80002e8 <__aeabi_dsub>
 8010cc2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010cc6:	e9ca 0100 	strd	r0, r1, [sl]
 8010cca:	e695      	b.n	80109f8 <__ieee754_rem_pio2+0x28>
 8010ccc:	f3af 8000 	nop.w
 8010cd0:	54400000 	.word	0x54400000
 8010cd4:	3ff921fb 	.word	0x3ff921fb
 8010cd8:	1a626331 	.word	0x1a626331
 8010cdc:	3dd0b461 	.word	0x3dd0b461
 8010ce0:	1a600000 	.word	0x1a600000
 8010ce4:	3dd0b461 	.word	0x3dd0b461
 8010ce8:	2e037073 	.word	0x2e037073
 8010cec:	3ba3198a 	.word	0x3ba3198a
 8010cf0:	6dc9c883 	.word	0x6dc9c883
 8010cf4:	3fe45f30 	.word	0x3fe45f30
 8010cf8:	2e000000 	.word	0x2e000000
 8010cfc:	3ba3198a 	.word	0x3ba3198a
 8010d00:	252049c1 	.word	0x252049c1
 8010d04:	397b839a 	.word	0x397b839a
 8010d08:	3fe921fb 	.word	0x3fe921fb
 8010d0c:	4002d97b 	.word	0x4002d97b
 8010d10:	3ff921fb 	.word	0x3ff921fb
 8010d14:	413921fb 	.word	0x413921fb
 8010d18:	3fe00000 	.word	0x3fe00000
 8010d1c:	08011964 	.word	0x08011964
 8010d20:	7fefffff 	.word	0x7fefffff
 8010d24:	ea4f 5628 	mov.w	r6, r8, asr #20
 8010d28:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8010d2c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8010d30:	4620      	mov	r0, r4
 8010d32:	460d      	mov	r5, r1
 8010d34:	f7ef ff2a 	bl	8000b8c <__aeabi_d2iz>
 8010d38:	f7ef fc24 	bl	8000584 <__aeabi_i2d>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	460b      	mov	r3, r1
 8010d40:	4620      	mov	r0, r4
 8010d42:	4629      	mov	r1, r5
 8010d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010d48:	f7ef face 	bl	80002e8 <__aeabi_dsub>
 8010d4c:	4b21      	ldr	r3, [pc, #132]	; (8010dd4 <__ieee754_rem_pio2+0x404>)
 8010d4e:	2200      	movs	r2, #0
 8010d50:	f7ef fc82 	bl	8000658 <__aeabi_dmul>
 8010d54:	460d      	mov	r5, r1
 8010d56:	4604      	mov	r4, r0
 8010d58:	f7ef ff18 	bl	8000b8c <__aeabi_d2iz>
 8010d5c:	f7ef fc12 	bl	8000584 <__aeabi_i2d>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4620      	mov	r0, r4
 8010d66:	4629      	mov	r1, r5
 8010d68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010d6c:	f7ef fabc 	bl	80002e8 <__aeabi_dsub>
 8010d70:	4b18      	ldr	r3, [pc, #96]	; (8010dd4 <__ieee754_rem_pio2+0x404>)
 8010d72:	2200      	movs	r2, #0
 8010d74:	f7ef fc70 	bl	8000658 <__aeabi_dmul>
 8010d78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d7c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8010d80:	2703      	movs	r7, #3
 8010d82:	2400      	movs	r4, #0
 8010d84:	2500      	movs	r5, #0
 8010d86:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8010d8a:	4622      	mov	r2, r4
 8010d8c:	462b      	mov	r3, r5
 8010d8e:	46b9      	mov	r9, r7
 8010d90:	3f01      	subs	r7, #1
 8010d92:	f7ef fec9 	bl	8000b28 <__aeabi_dcmpeq>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d1f5      	bne.n	8010d86 <__ieee754_rem_pio2+0x3b6>
 8010d9a:	4b0f      	ldr	r3, [pc, #60]	; (8010dd8 <__ieee754_rem_pio2+0x408>)
 8010d9c:	9301      	str	r3, [sp, #4]
 8010d9e:	2302      	movs	r3, #2
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	4632      	mov	r2, r6
 8010da4:	464b      	mov	r3, r9
 8010da6:	4651      	mov	r1, sl
 8010da8:	a804      	add	r0, sp, #16
 8010daa:	f000 f821 	bl	8010df0 <__kernel_rem_pio2>
 8010dae:	9b02      	ldr	r3, [sp, #8]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	4683      	mov	fp, r0
 8010db4:	f6bf ae4c 	bge.w	8010a50 <__ieee754_rem_pio2+0x80>
 8010db8:	e9da 2100 	ldrd	r2, r1, [sl]
 8010dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dc0:	e9ca 2300 	strd	r2, r3, [sl]
 8010dc4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8010dc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010dcc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010dd0:	e73f      	b.n	8010c52 <__ieee754_rem_pio2+0x282>
 8010dd2:	bf00      	nop
 8010dd4:	41700000 	.word	0x41700000
 8010dd8:	080119e4 	.word	0x080119e4

08010ddc <fabs>:
 8010ddc:	ec51 0b10 	vmov	r0, r1, d0
 8010de0:	ee10 2a10 	vmov	r2, s0
 8010de4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010de8:	ec43 2b10 	vmov	d0, r2, r3
 8010dec:	4770      	bx	lr
	...

08010df0 <__kernel_rem_pio2>:
 8010df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df4:	ed2d 8b02 	vpush	{d8}
 8010df8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010dfc:	f112 0f14 	cmn.w	r2, #20
 8010e00:	9306      	str	r3, [sp, #24]
 8010e02:	9104      	str	r1, [sp, #16]
 8010e04:	4bc2      	ldr	r3, [pc, #776]	; (8011110 <__kernel_rem_pio2+0x320>)
 8010e06:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010e08:	9009      	str	r0, [sp, #36]	; 0x24
 8010e0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e0e:	9300      	str	r3, [sp, #0]
 8010e10:	9b06      	ldr	r3, [sp, #24]
 8010e12:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e16:	bfa8      	it	ge
 8010e18:	1ed4      	subge	r4, r2, #3
 8010e1a:	9305      	str	r3, [sp, #20]
 8010e1c:	bfb2      	itee	lt
 8010e1e:	2400      	movlt	r4, #0
 8010e20:	2318      	movge	r3, #24
 8010e22:	fb94 f4f3 	sdivge	r4, r4, r3
 8010e26:	f06f 0317 	mvn.w	r3, #23
 8010e2a:	fb04 3303 	mla	r3, r4, r3, r3
 8010e2e:	eb03 0a02 	add.w	sl, r3, r2
 8010e32:	9b00      	ldr	r3, [sp, #0]
 8010e34:	9a05      	ldr	r2, [sp, #20]
 8010e36:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8011100 <__kernel_rem_pio2+0x310>
 8010e3a:	eb03 0802 	add.w	r8, r3, r2
 8010e3e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010e40:	1aa7      	subs	r7, r4, r2
 8010e42:	ae20      	add	r6, sp, #128	; 0x80
 8010e44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010e48:	2500      	movs	r5, #0
 8010e4a:	4545      	cmp	r5, r8
 8010e4c:	dd13      	ble.n	8010e76 <__kernel_rem_pio2+0x86>
 8010e4e:	9b06      	ldr	r3, [sp, #24]
 8010e50:	aa20      	add	r2, sp, #128	; 0x80
 8010e52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010e56:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8010e5a:	f04f 0800 	mov.w	r8, #0
 8010e5e:	9b00      	ldr	r3, [sp, #0]
 8010e60:	4598      	cmp	r8, r3
 8010e62:	dc31      	bgt.n	8010ec8 <__kernel_rem_pio2+0xd8>
 8010e64:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8011100 <__kernel_rem_pio2+0x310>
 8010e68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e70:	462f      	mov	r7, r5
 8010e72:	2600      	movs	r6, #0
 8010e74:	e01b      	b.n	8010eae <__kernel_rem_pio2+0xbe>
 8010e76:	42ef      	cmn	r7, r5
 8010e78:	d407      	bmi.n	8010e8a <__kernel_rem_pio2+0x9a>
 8010e7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010e7e:	f7ef fb81 	bl	8000584 <__aeabi_i2d>
 8010e82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010e86:	3501      	adds	r5, #1
 8010e88:	e7df      	b.n	8010e4a <__kernel_rem_pio2+0x5a>
 8010e8a:	ec51 0b18 	vmov	r0, r1, d8
 8010e8e:	e7f8      	b.n	8010e82 <__kernel_rem_pio2+0x92>
 8010e90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010e98:	f7ef fbde 	bl	8000658 <__aeabi_dmul>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ea4:	f7ef fa22 	bl	80002ec <__adddf3>
 8010ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010eac:	3601      	adds	r6, #1
 8010eae:	9b05      	ldr	r3, [sp, #20]
 8010eb0:	429e      	cmp	r6, r3
 8010eb2:	f1a7 0708 	sub.w	r7, r7, #8
 8010eb6:	ddeb      	ble.n	8010e90 <__kernel_rem_pio2+0xa0>
 8010eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ebc:	f108 0801 	add.w	r8, r8, #1
 8010ec0:	ecab 7b02 	vstmia	fp!, {d7}
 8010ec4:	3508      	adds	r5, #8
 8010ec6:	e7ca      	b.n	8010e5e <__kernel_rem_pio2+0x6e>
 8010ec8:	9b00      	ldr	r3, [sp, #0]
 8010eca:	aa0c      	add	r2, sp, #48	; 0x30
 8010ecc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010ed2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8010ed4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ed8:	9c00      	ldr	r4, [sp, #0]
 8010eda:	930a      	str	r3, [sp, #40]	; 0x28
 8010edc:	00e3      	lsls	r3, r4, #3
 8010ede:	9308      	str	r3, [sp, #32]
 8010ee0:	ab98      	add	r3, sp, #608	; 0x260
 8010ee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ee6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010eea:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8010eee:	ab70      	add	r3, sp, #448	; 0x1c0
 8010ef0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8010ef4:	46c3      	mov	fp, r8
 8010ef6:	46a1      	mov	r9, r4
 8010ef8:	f1b9 0f00 	cmp.w	r9, #0
 8010efc:	f1a5 0508 	sub.w	r5, r5, #8
 8010f00:	dc77      	bgt.n	8010ff2 <__kernel_rem_pio2+0x202>
 8010f02:	ec47 6b10 	vmov	d0, r6, r7
 8010f06:	4650      	mov	r0, sl
 8010f08:	f000 fac2 	bl	8011490 <scalbn>
 8010f0c:	ec57 6b10 	vmov	r6, r7, d0
 8010f10:	2200      	movs	r2, #0
 8010f12:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010f16:	ee10 0a10 	vmov	r0, s0
 8010f1a:	4639      	mov	r1, r7
 8010f1c:	f7ef fb9c 	bl	8000658 <__aeabi_dmul>
 8010f20:	ec41 0b10 	vmov	d0, r0, r1
 8010f24:	f000 fb34 	bl	8011590 <floor>
 8010f28:	4b7a      	ldr	r3, [pc, #488]	; (8011114 <__kernel_rem_pio2+0x324>)
 8010f2a:	ec51 0b10 	vmov	r0, r1, d0
 8010f2e:	2200      	movs	r2, #0
 8010f30:	f7ef fb92 	bl	8000658 <__aeabi_dmul>
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	4630      	mov	r0, r6
 8010f3a:	4639      	mov	r1, r7
 8010f3c:	f7ef f9d4 	bl	80002e8 <__aeabi_dsub>
 8010f40:	460f      	mov	r7, r1
 8010f42:	4606      	mov	r6, r0
 8010f44:	f7ef fe22 	bl	8000b8c <__aeabi_d2iz>
 8010f48:	9002      	str	r0, [sp, #8]
 8010f4a:	f7ef fb1b 	bl	8000584 <__aeabi_i2d>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	460b      	mov	r3, r1
 8010f52:	4630      	mov	r0, r6
 8010f54:	4639      	mov	r1, r7
 8010f56:	f7ef f9c7 	bl	80002e8 <__aeabi_dsub>
 8010f5a:	f1ba 0f00 	cmp.w	sl, #0
 8010f5e:	4606      	mov	r6, r0
 8010f60:	460f      	mov	r7, r1
 8010f62:	dd6d      	ble.n	8011040 <__kernel_rem_pio2+0x250>
 8010f64:	1e61      	subs	r1, r4, #1
 8010f66:	ab0c      	add	r3, sp, #48	; 0x30
 8010f68:	9d02      	ldr	r5, [sp, #8]
 8010f6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f6e:	f1ca 0018 	rsb	r0, sl, #24
 8010f72:	fa43 f200 	asr.w	r2, r3, r0
 8010f76:	4415      	add	r5, r2
 8010f78:	4082      	lsls	r2, r0
 8010f7a:	1a9b      	subs	r3, r3, r2
 8010f7c:	aa0c      	add	r2, sp, #48	; 0x30
 8010f7e:	9502      	str	r5, [sp, #8]
 8010f80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010f84:	f1ca 0217 	rsb	r2, sl, #23
 8010f88:	fa43 fb02 	asr.w	fp, r3, r2
 8010f8c:	f1bb 0f00 	cmp.w	fp, #0
 8010f90:	dd65      	ble.n	801105e <__kernel_rem_pio2+0x26e>
 8010f92:	9b02      	ldr	r3, [sp, #8]
 8010f94:	2200      	movs	r2, #0
 8010f96:	3301      	adds	r3, #1
 8010f98:	9302      	str	r3, [sp, #8]
 8010f9a:	4615      	mov	r5, r2
 8010f9c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8010fa0:	4294      	cmp	r4, r2
 8010fa2:	f300 809f 	bgt.w	80110e4 <__kernel_rem_pio2+0x2f4>
 8010fa6:	f1ba 0f00 	cmp.w	sl, #0
 8010faa:	dd07      	ble.n	8010fbc <__kernel_rem_pio2+0x1cc>
 8010fac:	f1ba 0f01 	cmp.w	sl, #1
 8010fb0:	f000 80c1 	beq.w	8011136 <__kernel_rem_pio2+0x346>
 8010fb4:	f1ba 0f02 	cmp.w	sl, #2
 8010fb8:	f000 80c7 	beq.w	801114a <__kernel_rem_pio2+0x35a>
 8010fbc:	f1bb 0f02 	cmp.w	fp, #2
 8010fc0:	d14d      	bne.n	801105e <__kernel_rem_pio2+0x26e>
 8010fc2:	4632      	mov	r2, r6
 8010fc4:	463b      	mov	r3, r7
 8010fc6:	4954      	ldr	r1, [pc, #336]	; (8011118 <__kernel_rem_pio2+0x328>)
 8010fc8:	2000      	movs	r0, #0
 8010fca:	f7ef f98d 	bl	80002e8 <__aeabi_dsub>
 8010fce:	4606      	mov	r6, r0
 8010fd0:	460f      	mov	r7, r1
 8010fd2:	2d00      	cmp	r5, #0
 8010fd4:	d043      	beq.n	801105e <__kernel_rem_pio2+0x26e>
 8010fd6:	4650      	mov	r0, sl
 8010fd8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8011108 <__kernel_rem_pio2+0x318>
 8010fdc:	f000 fa58 	bl	8011490 <scalbn>
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	ec53 2b10 	vmov	r2, r3, d0
 8010fe8:	f7ef f97e 	bl	80002e8 <__aeabi_dsub>
 8010fec:	4606      	mov	r6, r0
 8010fee:	460f      	mov	r7, r1
 8010ff0:	e035      	b.n	801105e <__kernel_rem_pio2+0x26e>
 8010ff2:	4b4a      	ldr	r3, [pc, #296]	; (801111c <__kernel_rem_pio2+0x32c>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fb2d 	bl	8000658 <__aeabi_dmul>
 8010ffe:	f7ef fdc5 	bl	8000b8c <__aeabi_d2iz>
 8011002:	f7ef fabf 	bl	8000584 <__aeabi_i2d>
 8011006:	4602      	mov	r2, r0
 8011008:	460b      	mov	r3, r1
 801100a:	ec43 2b18 	vmov	d8, r2, r3
 801100e:	4b44      	ldr	r3, [pc, #272]	; (8011120 <__kernel_rem_pio2+0x330>)
 8011010:	2200      	movs	r2, #0
 8011012:	f7ef fb21 	bl	8000658 <__aeabi_dmul>
 8011016:	4602      	mov	r2, r0
 8011018:	460b      	mov	r3, r1
 801101a:	4630      	mov	r0, r6
 801101c:	4639      	mov	r1, r7
 801101e:	f7ef f963 	bl	80002e8 <__aeabi_dsub>
 8011022:	f7ef fdb3 	bl	8000b8c <__aeabi_d2iz>
 8011026:	e9d5 2300 	ldrd	r2, r3, [r5]
 801102a:	f84b 0b04 	str.w	r0, [fp], #4
 801102e:	ec51 0b18 	vmov	r0, r1, d8
 8011032:	f7ef f95b 	bl	80002ec <__adddf3>
 8011036:	f109 39ff 	add.w	r9, r9, #4294967295
 801103a:	4606      	mov	r6, r0
 801103c:	460f      	mov	r7, r1
 801103e:	e75b      	b.n	8010ef8 <__kernel_rem_pio2+0x108>
 8011040:	d106      	bne.n	8011050 <__kernel_rem_pio2+0x260>
 8011042:	1e63      	subs	r3, r4, #1
 8011044:	aa0c      	add	r2, sp, #48	; 0x30
 8011046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801104a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 801104e:	e79d      	b.n	8010f8c <__kernel_rem_pio2+0x19c>
 8011050:	4b34      	ldr	r3, [pc, #208]	; (8011124 <__kernel_rem_pio2+0x334>)
 8011052:	2200      	movs	r2, #0
 8011054:	f7ef fd86 	bl	8000b64 <__aeabi_dcmpge>
 8011058:	2800      	cmp	r0, #0
 801105a:	d140      	bne.n	80110de <__kernel_rem_pio2+0x2ee>
 801105c:	4683      	mov	fp, r0
 801105e:	2200      	movs	r2, #0
 8011060:	2300      	movs	r3, #0
 8011062:	4630      	mov	r0, r6
 8011064:	4639      	mov	r1, r7
 8011066:	f7ef fd5f 	bl	8000b28 <__aeabi_dcmpeq>
 801106a:	2800      	cmp	r0, #0
 801106c:	f000 80c1 	beq.w	80111f2 <__kernel_rem_pio2+0x402>
 8011070:	1e65      	subs	r5, r4, #1
 8011072:	462b      	mov	r3, r5
 8011074:	2200      	movs	r2, #0
 8011076:	9900      	ldr	r1, [sp, #0]
 8011078:	428b      	cmp	r3, r1
 801107a:	da6d      	bge.n	8011158 <__kernel_rem_pio2+0x368>
 801107c:	2a00      	cmp	r2, #0
 801107e:	f000 808a 	beq.w	8011196 <__kernel_rem_pio2+0x3a6>
 8011082:	ab0c      	add	r3, sp, #48	; 0x30
 8011084:	f1aa 0a18 	sub.w	sl, sl, #24
 8011088:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 80ae 	beq.w	80111ee <__kernel_rem_pio2+0x3fe>
 8011092:	4650      	mov	r0, sl
 8011094:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8011108 <__kernel_rem_pio2+0x318>
 8011098:	f000 f9fa 	bl	8011490 <scalbn>
 801109c:	1c6b      	adds	r3, r5, #1
 801109e:	00da      	lsls	r2, r3, #3
 80110a0:	9205      	str	r2, [sp, #20]
 80110a2:	ec57 6b10 	vmov	r6, r7, d0
 80110a6:	aa70      	add	r2, sp, #448	; 0x1c0
 80110a8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 801111c <__kernel_rem_pio2+0x32c>
 80110ac:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80110b0:	462c      	mov	r4, r5
 80110b2:	f04f 0800 	mov.w	r8, #0
 80110b6:	2c00      	cmp	r4, #0
 80110b8:	f280 80d4 	bge.w	8011264 <__kernel_rem_pio2+0x474>
 80110bc:	462c      	mov	r4, r5
 80110be:	2c00      	cmp	r4, #0
 80110c0:	f2c0 8102 	blt.w	80112c8 <__kernel_rem_pio2+0x4d8>
 80110c4:	4b18      	ldr	r3, [pc, #96]	; (8011128 <__kernel_rem_pio2+0x338>)
 80110c6:	461e      	mov	r6, r3
 80110c8:	ab70      	add	r3, sp, #448	; 0x1c0
 80110ca:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80110ce:	1b2b      	subs	r3, r5, r4
 80110d0:	f04f 0900 	mov.w	r9, #0
 80110d4:	f04f 0a00 	mov.w	sl, #0
 80110d8:	2700      	movs	r7, #0
 80110da:	9306      	str	r3, [sp, #24]
 80110dc:	e0e6      	b.n	80112ac <__kernel_rem_pio2+0x4bc>
 80110de:	f04f 0b02 	mov.w	fp, #2
 80110e2:	e756      	b.n	8010f92 <__kernel_rem_pio2+0x1a2>
 80110e4:	f8d8 3000 	ldr.w	r3, [r8]
 80110e8:	bb05      	cbnz	r5, 801112c <__kernel_rem_pio2+0x33c>
 80110ea:	b123      	cbz	r3, 80110f6 <__kernel_rem_pio2+0x306>
 80110ec:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80110f0:	f8c8 3000 	str.w	r3, [r8]
 80110f4:	2301      	movs	r3, #1
 80110f6:	3201      	adds	r2, #1
 80110f8:	f108 0804 	add.w	r8, r8, #4
 80110fc:	461d      	mov	r5, r3
 80110fe:	e74f      	b.n	8010fa0 <__kernel_rem_pio2+0x1b0>
	...
 801110c:	3ff00000 	.word	0x3ff00000
 8011110:	08011b30 	.word	0x08011b30
 8011114:	40200000 	.word	0x40200000
 8011118:	3ff00000 	.word	0x3ff00000
 801111c:	3e700000 	.word	0x3e700000
 8011120:	41700000 	.word	0x41700000
 8011124:	3fe00000 	.word	0x3fe00000
 8011128:	08011af0 	.word	0x08011af0
 801112c:	1acb      	subs	r3, r1, r3
 801112e:	f8c8 3000 	str.w	r3, [r8]
 8011132:	462b      	mov	r3, r5
 8011134:	e7df      	b.n	80110f6 <__kernel_rem_pio2+0x306>
 8011136:	1e62      	subs	r2, r4, #1
 8011138:	ab0c      	add	r3, sp, #48	; 0x30
 801113a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801113e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011142:	a90c      	add	r1, sp, #48	; 0x30
 8011144:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011148:	e738      	b.n	8010fbc <__kernel_rem_pio2+0x1cc>
 801114a:	1e62      	subs	r2, r4, #1
 801114c:	ab0c      	add	r3, sp, #48	; 0x30
 801114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011152:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011156:	e7f4      	b.n	8011142 <__kernel_rem_pio2+0x352>
 8011158:	a90c      	add	r1, sp, #48	; 0x30
 801115a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801115e:	3b01      	subs	r3, #1
 8011160:	430a      	orrs	r2, r1
 8011162:	e788      	b.n	8011076 <__kernel_rem_pio2+0x286>
 8011164:	3301      	adds	r3, #1
 8011166:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801116a:	2900      	cmp	r1, #0
 801116c:	d0fa      	beq.n	8011164 <__kernel_rem_pio2+0x374>
 801116e:	9a08      	ldr	r2, [sp, #32]
 8011170:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8011174:	446a      	add	r2, sp
 8011176:	3a98      	subs	r2, #152	; 0x98
 8011178:	9208      	str	r2, [sp, #32]
 801117a:	9a06      	ldr	r2, [sp, #24]
 801117c:	a920      	add	r1, sp, #128	; 0x80
 801117e:	18a2      	adds	r2, r4, r2
 8011180:	18e3      	adds	r3, r4, r3
 8011182:	f104 0801 	add.w	r8, r4, #1
 8011186:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 801118a:	9302      	str	r3, [sp, #8]
 801118c:	9b02      	ldr	r3, [sp, #8]
 801118e:	4543      	cmp	r3, r8
 8011190:	da04      	bge.n	801119c <__kernel_rem_pio2+0x3ac>
 8011192:	461c      	mov	r4, r3
 8011194:	e6a2      	b.n	8010edc <__kernel_rem_pio2+0xec>
 8011196:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011198:	2301      	movs	r3, #1
 801119a:	e7e4      	b.n	8011166 <__kernel_rem_pio2+0x376>
 801119c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80111a2:	f7ef f9ef 	bl	8000584 <__aeabi_i2d>
 80111a6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80111aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111ac:	46ab      	mov	fp, r5
 80111ae:	461c      	mov	r4, r3
 80111b0:	f04f 0900 	mov.w	r9, #0
 80111b4:	2600      	movs	r6, #0
 80111b6:	2700      	movs	r7, #0
 80111b8:	9b05      	ldr	r3, [sp, #20]
 80111ba:	4599      	cmp	r9, r3
 80111bc:	dd06      	ble.n	80111cc <__kernel_rem_pio2+0x3dc>
 80111be:	9b08      	ldr	r3, [sp, #32]
 80111c0:	e8e3 6702 	strd	r6, r7, [r3], #8
 80111c4:	f108 0801 	add.w	r8, r8, #1
 80111c8:	9308      	str	r3, [sp, #32]
 80111ca:	e7df      	b.n	801118c <__kernel_rem_pio2+0x39c>
 80111cc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80111d0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80111d4:	f7ef fa40 	bl	8000658 <__aeabi_dmul>
 80111d8:	4602      	mov	r2, r0
 80111da:	460b      	mov	r3, r1
 80111dc:	4630      	mov	r0, r6
 80111de:	4639      	mov	r1, r7
 80111e0:	f7ef f884 	bl	80002ec <__adddf3>
 80111e4:	f109 0901 	add.w	r9, r9, #1
 80111e8:	4606      	mov	r6, r0
 80111ea:	460f      	mov	r7, r1
 80111ec:	e7e4      	b.n	80111b8 <__kernel_rem_pio2+0x3c8>
 80111ee:	3d01      	subs	r5, #1
 80111f0:	e747      	b.n	8011082 <__kernel_rem_pio2+0x292>
 80111f2:	ec47 6b10 	vmov	d0, r6, r7
 80111f6:	f1ca 0000 	rsb	r0, sl, #0
 80111fa:	f000 f949 	bl	8011490 <scalbn>
 80111fe:	ec57 6b10 	vmov	r6, r7, d0
 8011202:	4ba0      	ldr	r3, [pc, #640]	; (8011484 <__kernel_rem_pio2+0x694>)
 8011204:	ee10 0a10 	vmov	r0, s0
 8011208:	2200      	movs	r2, #0
 801120a:	4639      	mov	r1, r7
 801120c:	f7ef fcaa 	bl	8000b64 <__aeabi_dcmpge>
 8011210:	b1f8      	cbz	r0, 8011252 <__kernel_rem_pio2+0x462>
 8011212:	4b9d      	ldr	r3, [pc, #628]	; (8011488 <__kernel_rem_pio2+0x698>)
 8011214:	2200      	movs	r2, #0
 8011216:	4630      	mov	r0, r6
 8011218:	4639      	mov	r1, r7
 801121a:	f7ef fa1d 	bl	8000658 <__aeabi_dmul>
 801121e:	f7ef fcb5 	bl	8000b8c <__aeabi_d2iz>
 8011222:	4680      	mov	r8, r0
 8011224:	f7ef f9ae 	bl	8000584 <__aeabi_i2d>
 8011228:	4b96      	ldr	r3, [pc, #600]	; (8011484 <__kernel_rem_pio2+0x694>)
 801122a:	2200      	movs	r2, #0
 801122c:	f7ef fa14 	bl	8000658 <__aeabi_dmul>
 8011230:	460b      	mov	r3, r1
 8011232:	4602      	mov	r2, r0
 8011234:	4639      	mov	r1, r7
 8011236:	4630      	mov	r0, r6
 8011238:	f7ef f856 	bl	80002e8 <__aeabi_dsub>
 801123c:	f7ef fca6 	bl	8000b8c <__aeabi_d2iz>
 8011240:	1c65      	adds	r5, r4, #1
 8011242:	ab0c      	add	r3, sp, #48	; 0x30
 8011244:	f10a 0a18 	add.w	sl, sl, #24
 8011248:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801124c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011250:	e71f      	b.n	8011092 <__kernel_rem_pio2+0x2a2>
 8011252:	4630      	mov	r0, r6
 8011254:	4639      	mov	r1, r7
 8011256:	f7ef fc99 	bl	8000b8c <__aeabi_d2iz>
 801125a:	ab0c      	add	r3, sp, #48	; 0x30
 801125c:	4625      	mov	r5, r4
 801125e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011262:	e716      	b.n	8011092 <__kernel_rem_pio2+0x2a2>
 8011264:	ab0c      	add	r3, sp, #48	; 0x30
 8011266:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801126a:	f7ef f98b 	bl	8000584 <__aeabi_i2d>
 801126e:	4632      	mov	r2, r6
 8011270:	463b      	mov	r3, r7
 8011272:	f7ef f9f1 	bl	8000658 <__aeabi_dmul>
 8011276:	4642      	mov	r2, r8
 8011278:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 801127c:	464b      	mov	r3, r9
 801127e:	4630      	mov	r0, r6
 8011280:	4639      	mov	r1, r7
 8011282:	f7ef f9e9 	bl	8000658 <__aeabi_dmul>
 8011286:	3c01      	subs	r4, #1
 8011288:	4606      	mov	r6, r0
 801128a:	460f      	mov	r7, r1
 801128c:	e713      	b.n	80110b6 <__kernel_rem_pio2+0x2c6>
 801128e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8011292:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8011296:	f7ef f9df 	bl	8000658 <__aeabi_dmul>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	4648      	mov	r0, r9
 80112a0:	4651      	mov	r1, sl
 80112a2:	f7ef f823 	bl	80002ec <__adddf3>
 80112a6:	3701      	adds	r7, #1
 80112a8:	4681      	mov	r9, r0
 80112aa:	468a      	mov	sl, r1
 80112ac:	9b00      	ldr	r3, [sp, #0]
 80112ae:	429f      	cmp	r7, r3
 80112b0:	dc02      	bgt.n	80112b8 <__kernel_rem_pio2+0x4c8>
 80112b2:	9b06      	ldr	r3, [sp, #24]
 80112b4:	429f      	cmp	r7, r3
 80112b6:	ddea      	ble.n	801128e <__kernel_rem_pio2+0x49e>
 80112b8:	9a06      	ldr	r2, [sp, #24]
 80112ba:	ab48      	add	r3, sp, #288	; 0x120
 80112bc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80112c0:	e9c6 9a00 	strd	r9, sl, [r6]
 80112c4:	3c01      	subs	r4, #1
 80112c6:	e6fa      	b.n	80110be <__kernel_rem_pio2+0x2ce>
 80112c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80112ca:	2b02      	cmp	r3, #2
 80112cc:	dc0b      	bgt.n	80112e6 <__kernel_rem_pio2+0x4f6>
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	dc39      	bgt.n	8011346 <__kernel_rem_pio2+0x556>
 80112d2:	d05d      	beq.n	8011390 <__kernel_rem_pio2+0x5a0>
 80112d4:	9b02      	ldr	r3, [sp, #8]
 80112d6:	f003 0007 	and.w	r0, r3, #7
 80112da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80112de:	ecbd 8b02 	vpop	{d8}
 80112e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80112e8:	2b03      	cmp	r3, #3
 80112ea:	d1f3      	bne.n	80112d4 <__kernel_rem_pio2+0x4e4>
 80112ec:	9b05      	ldr	r3, [sp, #20]
 80112ee:	9500      	str	r5, [sp, #0]
 80112f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80112f4:	eb0d 0403 	add.w	r4, sp, r3
 80112f8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80112fc:	46a2      	mov	sl, r4
 80112fe:	9b00      	ldr	r3, [sp, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	f1aa 0a08 	sub.w	sl, sl, #8
 8011306:	dc69      	bgt.n	80113dc <__kernel_rem_pio2+0x5ec>
 8011308:	46aa      	mov	sl, r5
 801130a:	f1ba 0f01 	cmp.w	sl, #1
 801130e:	f1a4 0408 	sub.w	r4, r4, #8
 8011312:	f300 8083 	bgt.w	801141c <__kernel_rem_pio2+0x62c>
 8011316:	9c05      	ldr	r4, [sp, #20]
 8011318:	ab48      	add	r3, sp, #288	; 0x120
 801131a:	441c      	add	r4, r3
 801131c:	2000      	movs	r0, #0
 801131e:	2100      	movs	r1, #0
 8011320:	2d01      	cmp	r5, #1
 8011322:	f300 809a 	bgt.w	801145a <__kernel_rem_pio2+0x66a>
 8011326:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 801132a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801132e:	f1bb 0f00 	cmp.w	fp, #0
 8011332:	f040 8098 	bne.w	8011466 <__kernel_rem_pio2+0x676>
 8011336:	9b04      	ldr	r3, [sp, #16]
 8011338:	e9c3 7800 	strd	r7, r8, [r3]
 801133c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011340:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011344:	e7c6      	b.n	80112d4 <__kernel_rem_pio2+0x4e4>
 8011346:	9e05      	ldr	r6, [sp, #20]
 8011348:	ab48      	add	r3, sp, #288	; 0x120
 801134a:	441e      	add	r6, r3
 801134c:	462c      	mov	r4, r5
 801134e:	2000      	movs	r0, #0
 8011350:	2100      	movs	r1, #0
 8011352:	2c00      	cmp	r4, #0
 8011354:	da33      	bge.n	80113be <__kernel_rem_pio2+0x5ce>
 8011356:	f1bb 0f00 	cmp.w	fp, #0
 801135a:	d036      	beq.n	80113ca <__kernel_rem_pio2+0x5da>
 801135c:	4602      	mov	r2, r0
 801135e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011362:	9c04      	ldr	r4, [sp, #16]
 8011364:	e9c4 2300 	strd	r2, r3, [r4]
 8011368:	4602      	mov	r2, r0
 801136a:	460b      	mov	r3, r1
 801136c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8011370:	f7ee ffba 	bl	80002e8 <__aeabi_dsub>
 8011374:	ae4a      	add	r6, sp, #296	; 0x128
 8011376:	2401      	movs	r4, #1
 8011378:	42a5      	cmp	r5, r4
 801137a:	da29      	bge.n	80113d0 <__kernel_rem_pio2+0x5e0>
 801137c:	f1bb 0f00 	cmp.w	fp, #0
 8011380:	d002      	beq.n	8011388 <__kernel_rem_pio2+0x598>
 8011382:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011386:	4619      	mov	r1, r3
 8011388:	9b04      	ldr	r3, [sp, #16]
 801138a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801138e:	e7a1      	b.n	80112d4 <__kernel_rem_pio2+0x4e4>
 8011390:	9c05      	ldr	r4, [sp, #20]
 8011392:	ab48      	add	r3, sp, #288	; 0x120
 8011394:	441c      	add	r4, r3
 8011396:	2000      	movs	r0, #0
 8011398:	2100      	movs	r1, #0
 801139a:	2d00      	cmp	r5, #0
 801139c:	da09      	bge.n	80113b2 <__kernel_rem_pio2+0x5c2>
 801139e:	f1bb 0f00 	cmp.w	fp, #0
 80113a2:	d002      	beq.n	80113aa <__kernel_rem_pio2+0x5ba>
 80113a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113a8:	4619      	mov	r1, r3
 80113aa:	9b04      	ldr	r3, [sp, #16]
 80113ac:	e9c3 0100 	strd	r0, r1, [r3]
 80113b0:	e790      	b.n	80112d4 <__kernel_rem_pio2+0x4e4>
 80113b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80113b6:	f7ee ff99 	bl	80002ec <__adddf3>
 80113ba:	3d01      	subs	r5, #1
 80113bc:	e7ed      	b.n	801139a <__kernel_rem_pio2+0x5aa>
 80113be:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80113c2:	f7ee ff93 	bl	80002ec <__adddf3>
 80113c6:	3c01      	subs	r4, #1
 80113c8:	e7c3      	b.n	8011352 <__kernel_rem_pio2+0x562>
 80113ca:	4602      	mov	r2, r0
 80113cc:	460b      	mov	r3, r1
 80113ce:	e7c8      	b.n	8011362 <__kernel_rem_pio2+0x572>
 80113d0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80113d4:	f7ee ff8a 	bl	80002ec <__adddf3>
 80113d8:	3401      	adds	r4, #1
 80113da:	e7cd      	b.n	8011378 <__kernel_rem_pio2+0x588>
 80113dc:	e9da 8900 	ldrd	r8, r9, [sl]
 80113e0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80113e4:	9b00      	ldr	r3, [sp, #0]
 80113e6:	3b01      	subs	r3, #1
 80113e8:	9300      	str	r3, [sp, #0]
 80113ea:	4632      	mov	r2, r6
 80113ec:	463b      	mov	r3, r7
 80113ee:	4640      	mov	r0, r8
 80113f0:	4649      	mov	r1, r9
 80113f2:	f7ee ff7b 	bl	80002ec <__adddf3>
 80113f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80113fa:	4602      	mov	r2, r0
 80113fc:	460b      	mov	r3, r1
 80113fe:	4640      	mov	r0, r8
 8011400:	4649      	mov	r1, r9
 8011402:	f7ee ff71 	bl	80002e8 <__aeabi_dsub>
 8011406:	4632      	mov	r2, r6
 8011408:	463b      	mov	r3, r7
 801140a:	f7ee ff6f 	bl	80002ec <__adddf3>
 801140e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011412:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011416:	ed8a 7b00 	vstr	d7, [sl]
 801141a:	e770      	b.n	80112fe <__kernel_rem_pio2+0x50e>
 801141c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011420:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011424:	4640      	mov	r0, r8
 8011426:	4632      	mov	r2, r6
 8011428:	463b      	mov	r3, r7
 801142a:	4649      	mov	r1, r9
 801142c:	f7ee ff5e 	bl	80002ec <__adddf3>
 8011430:	e9cd 0100 	strd	r0, r1, [sp]
 8011434:	4602      	mov	r2, r0
 8011436:	460b      	mov	r3, r1
 8011438:	4640      	mov	r0, r8
 801143a:	4649      	mov	r1, r9
 801143c:	f7ee ff54 	bl	80002e8 <__aeabi_dsub>
 8011440:	4632      	mov	r2, r6
 8011442:	463b      	mov	r3, r7
 8011444:	f7ee ff52 	bl	80002ec <__adddf3>
 8011448:	ed9d 7b00 	vldr	d7, [sp]
 801144c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011450:	ed84 7b00 	vstr	d7, [r4]
 8011454:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011458:	e757      	b.n	801130a <__kernel_rem_pio2+0x51a>
 801145a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801145e:	f7ee ff45 	bl	80002ec <__adddf3>
 8011462:	3d01      	subs	r5, #1
 8011464:	e75c      	b.n	8011320 <__kernel_rem_pio2+0x530>
 8011466:	9b04      	ldr	r3, [sp, #16]
 8011468:	9a04      	ldr	r2, [sp, #16]
 801146a:	601f      	str	r7, [r3, #0]
 801146c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011470:	605c      	str	r4, [r3, #4]
 8011472:	609d      	str	r5, [r3, #8]
 8011474:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011478:	60d3      	str	r3, [r2, #12]
 801147a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801147e:	6110      	str	r0, [r2, #16]
 8011480:	6153      	str	r3, [r2, #20]
 8011482:	e727      	b.n	80112d4 <__kernel_rem_pio2+0x4e4>
 8011484:	41700000 	.word	0x41700000
 8011488:	3e700000 	.word	0x3e700000
 801148c:	00000000 	.word	0x00000000

08011490 <scalbn>:
 8011490:	b570      	push	{r4, r5, r6, lr}
 8011492:	ec55 4b10 	vmov	r4, r5, d0
 8011496:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801149a:	4606      	mov	r6, r0
 801149c:	462b      	mov	r3, r5
 801149e:	b999      	cbnz	r1, 80114c8 <scalbn+0x38>
 80114a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80114a4:	4323      	orrs	r3, r4
 80114a6:	d03f      	beq.n	8011528 <scalbn+0x98>
 80114a8:	4b35      	ldr	r3, [pc, #212]	; (8011580 <scalbn+0xf0>)
 80114aa:	4629      	mov	r1, r5
 80114ac:	ee10 0a10 	vmov	r0, s0
 80114b0:	2200      	movs	r2, #0
 80114b2:	f7ef f8d1 	bl	8000658 <__aeabi_dmul>
 80114b6:	4b33      	ldr	r3, [pc, #204]	; (8011584 <scalbn+0xf4>)
 80114b8:	429e      	cmp	r6, r3
 80114ba:	4604      	mov	r4, r0
 80114bc:	460d      	mov	r5, r1
 80114be:	da10      	bge.n	80114e2 <scalbn+0x52>
 80114c0:	a327      	add	r3, pc, #156	; (adr r3, 8011560 <scalbn+0xd0>)
 80114c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c6:	e01f      	b.n	8011508 <scalbn+0x78>
 80114c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80114cc:	4291      	cmp	r1, r2
 80114ce:	d10c      	bne.n	80114ea <scalbn+0x5a>
 80114d0:	ee10 2a10 	vmov	r2, s0
 80114d4:	4620      	mov	r0, r4
 80114d6:	4629      	mov	r1, r5
 80114d8:	f7ee ff08 	bl	80002ec <__adddf3>
 80114dc:	4604      	mov	r4, r0
 80114de:	460d      	mov	r5, r1
 80114e0:	e022      	b.n	8011528 <scalbn+0x98>
 80114e2:	460b      	mov	r3, r1
 80114e4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80114e8:	3936      	subs	r1, #54	; 0x36
 80114ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 80114ee:	4296      	cmp	r6, r2
 80114f0:	dd0d      	ble.n	801150e <scalbn+0x7e>
 80114f2:	2d00      	cmp	r5, #0
 80114f4:	a11c      	add	r1, pc, #112	; (adr r1, 8011568 <scalbn+0xd8>)
 80114f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114fa:	da02      	bge.n	8011502 <scalbn+0x72>
 80114fc:	a11c      	add	r1, pc, #112	; (adr r1, 8011570 <scalbn+0xe0>)
 80114fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011502:	a319      	add	r3, pc, #100	; (adr r3, 8011568 <scalbn+0xd8>)
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	f7ef f8a6 	bl	8000658 <__aeabi_dmul>
 801150c:	e7e6      	b.n	80114dc <scalbn+0x4c>
 801150e:	1872      	adds	r2, r6, r1
 8011510:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011514:	428a      	cmp	r2, r1
 8011516:	dcec      	bgt.n	80114f2 <scalbn+0x62>
 8011518:	2a00      	cmp	r2, #0
 801151a:	dd08      	ble.n	801152e <scalbn+0x9e>
 801151c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011520:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011524:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011528:	ec45 4b10 	vmov	d0, r4, r5
 801152c:	bd70      	pop	{r4, r5, r6, pc}
 801152e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011532:	da08      	bge.n	8011546 <scalbn+0xb6>
 8011534:	2d00      	cmp	r5, #0
 8011536:	a10a      	add	r1, pc, #40	; (adr r1, 8011560 <scalbn+0xd0>)
 8011538:	e9d1 0100 	ldrd	r0, r1, [r1]
 801153c:	dac0      	bge.n	80114c0 <scalbn+0x30>
 801153e:	a10e      	add	r1, pc, #56	; (adr r1, 8011578 <scalbn+0xe8>)
 8011540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011544:	e7bc      	b.n	80114c0 <scalbn+0x30>
 8011546:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801154a:	3236      	adds	r2, #54	; 0x36
 801154c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011550:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011554:	4620      	mov	r0, r4
 8011556:	4b0c      	ldr	r3, [pc, #48]	; (8011588 <scalbn+0xf8>)
 8011558:	2200      	movs	r2, #0
 801155a:	e7d5      	b.n	8011508 <scalbn+0x78>
 801155c:	f3af 8000 	nop.w
 8011560:	c2f8f359 	.word	0xc2f8f359
 8011564:	01a56e1f 	.word	0x01a56e1f
 8011568:	8800759c 	.word	0x8800759c
 801156c:	7e37e43c 	.word	0x7e37e43c
 8011570:	8800759c 	.word	0x8800759c
 8011574:	fe37e43c 	.word	0xfe37e43c
 8011578:	c2f8f359 	.word	0xc2f8f359
 801157c:	81a56e1f 	.word	0x81a56e1f
 8011580:	43500000 	.word	0x43500000
 8011584:	ffff3cb0 	.word	0xffff3cb0
 8011588:	3c900000 	.word	0x3c900000
 801158c:	00000000 	.word	0x00000000

08011590 <floor>:
 8011590:	ec51 0b10 	vmov	r0, r1, d0
 8011594:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801159c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80115a0:	2e13      	cmp	r6, #19
 80115a2:	ee10 5a10 	vmov	r5, s0
 80115a6:	ee10 8a10 	vmov	r8, s0
 80115aa:	460c      	mov	r4, r1
 80115ac:	dc31      	bgt.n	8011612 <floor+0x82>
 80115ae:	2e00      	cmp	r6, #0
 80115b0:	da14      	bge.n	80115dc <floor+0x4c>
 80115b2:	a333      	add	r3, pc, #204	; (adr r3, 8011680 <floor+0xf0>)
 80115b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b8:	f7ee fe98 	bl	80002ec <__adddf3>
 80115bc:	2200      	movs	r2, #0
 80115be:	2300      	movs	r3, #0
 80115c0:	f7ef fada 	bl	8000b78 <__aeabi_dcmpgt>
 80115c4:	b138      	cbz	r0, 80115d6 <floor+0x46>
 80115c6:	2c00      	cmp	r4, #0
 80115c8:	da53      	bge.n	8011672 <floor+0xe2>
 80115ca:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80115ce:	4325      	orrs	r5, r4
 80115d0:	d052      	beq.n	8011678 <floor+0xe8>
 80115d2:	4c2d      	ldr	r4, [pc, #180]	; (8011688 <floor+0xf8>)
 80115d4:	2500      	movs	r5, #0
 80115d6:	4621      	mov	r1, r4
 80115d8:	4628      	mov	r0, r5
 80115da:	e024      	b.n	8011626 <floor+0x96>
 80115dc:	4f2b      	ldr	r7, [pc, #172]	; (801168c <floor+0xfc>)
 80115de:	4137      	asrs	r7, r6
 80115e0:	ea01 0307 	and.w	r3, r1, r7
 80115e4:	4303      	orrs	r3, r0
 80115e6:	d01e      	beq.n	8011626 <floor+0x96>
 80115e8:	a325      	add	r3, pc, #148	; (adr r3, 8011680 <floor+0xf0>)
 80115ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115ee:	f7ee fe7d 	bl	80002ec <__adddf3>
 80115f2:	2200      	movs	r2, #0
 80115f4:	2300      	movs	r3, #0
 80115f6:	f7ef fabf 	bl	8000b78 <__aeabi_dcmpgt>
 80115fa:	2800      	cmp	r0, #0
 80115fc:	d0eb      	beq.n	80115d6 <floor+0x46>
 80115fe:	2c00      	cmp	r4, #0
 8011600:	bfbe      	ittt	lt
 8011602:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011606:	4133      	asrlt	r3, r6
 8011608:	18e4      	addlt	r4, r4, r3
 801160a:	ea24 0407 	bic.w	r4, r4, r7
 801160e:	2500      	movs	r5, #0
 8011610:	e7e1      	b.n	80115d6 <floor+0x46>
 8011612:	2e33      	cmp	r6, #51	; 0x33
 8011614:	dd0b      	ble.n	801162e <floor+0x9e>
 8011616:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801161a:	d104      	bne.n	8011626 <floor+0x96>
 801161c:	ee10 2a10 	vmov	r2, s0
 8011620:	460b      	mov	r3, r1
 8011622:	f7ee fe63 	bl	80002ec <__adddf3>
 8011626:	ec41 0b10 	vmov	d0, r0, r1
 801162a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8011632:	f04f 37ff 	mov.w	r7, #4294967295
 8011636:	40df      	lsrs	r7, r3
 8011638:	4238      	tst	r0, r7
 801163a:	d0f4      	beq.n	8011626 <floor+0x96>
 801163c:	a310      	add	r3, pc, #64	; (adr r3, 8011680 <floor+0xf0>)
 801163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011642:	f7ee fe53 	bl	80002ec <__adddf3>
 8011646:	2200      	movs	r2, #0
 8011648:	2300      	movs	r3, #0
 801164a:	f7ef fa95 	bl	8000b78 <__aeabi_dcmpgt>
 801164e:	2800      	cmp	r0, #0
 8011650:	d0c1      	beq.n	80115d6 <floor+0x46>
 8011652:	2c00      	cmp	r4, #0
 8011654:	da0a      	bge.n	801166c <floor+0xdc>
 8011656:	2e14      	cmp	r6, #20
 8011658:	d101      	bne.n	801165e <floor+0xce>
 801165a:	3401      	adds	r4, #1
 801165c:	e006      	b.n	801166c <floor+0xdc>
 801165e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011662:	2301      	movs	r3, #1
 8011664:	40b3      	lsls	r3, r6
 8011666:	441d      	add	r5, r3
 8011668:	45a8      	cmp	r8, r5
 801166a:	d8f6      	bhi.n	801165a <floor+0xca>
 801166c:	ea25 0507 	bic.w	r5, r5, r7
 8011670:	e7b1      	b.n	80115d6 <floor+0x46>
 8011672:	2500      	movs	r5, #0
 8011674:	462c      	mov	r4, r5
 8011676:	e7ae      	b.n	80115d6 <floor+0x46>
 8011678:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801167c:	e7ab      	b.n	80115d6 <floor+0x46>
 801167e:	bf00      	nop
 8011680:	8800759c 	.word	0x8800759c
 8011684:	7e37e43c 	.word	0x7e37e43c
 8011688:	bff00000 	.word	0xbff00000
 801168c:	000fffff 	.word	0x000fffff

08011690 <_init>:
 8011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011692:	bf00      	nop
 8011694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011696:	bc08      	pop	{r3}
 8011698:	469e      	mov	lr, r3
 801169a:	4770      	bx	lr

0801169c <_fini>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	bf00      	nop
 80116a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116a2:	bc08      	pop	{r3}
 80116a4:	469e      	mov	lr, r3
 80116a6:	4770      	bx	lr
