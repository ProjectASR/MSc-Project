
BMTR_RTOS_ASRV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005410  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080055e0  080055e0  000065e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005650  08005650  00007058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005650  08005650  00006650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005658  08005658  00007058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005658  08005658  00006658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08005660  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004230  20000058  080056b8  00007058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004288  080056b8  00007288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bdd  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef3  00000000  00000000  00019c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000df0  00000000  00000000  0001dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004db8  00000000  00000000  0001eb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157e6  00000000  00000000  00023928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa3d0  00000000  00000000  0003910e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001334de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c50  00000000  00000000  00133524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00138174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080055c8 	.word	0x080055c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	080055c8 	.word	0x080055c8

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	@ 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2uiz>:
 80009ac:	004a      	lsls	r2, r1, #1
 80009ae:	d211      	bcs.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009b4:	d211      	bcs.n	80009da <__aeabi_d2uiz+0x2e>
 80009b6:	d50d      	bpl.n	80009d4 <__aeabi_d2uiz+0x28>
 80009b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c0:	d40e      	bmi.n	80009e0 <__aeabi_d2uiz+0x34>
 80009c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ce:	fa23 f002 	lsr.w	r0, r3, r2
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d102      	bne.n	80009e6 <__aeabi_d2uiz+0x3a>
 80009e0:	f04f 30ff 	mov.w	r0, #4294967295
 80009e4:	4770      	bx	lr
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	4770      	bx	lr

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b988 	b.w	8000db4 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	468e      	mov	lr, r1
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	4688      	mov	r8, r1
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d14a      	bne.n	8000b62 <__udivmoddi4+0xa6>
 8000acc:	428a      	cmp	r2, r1
 8000ace:	4617      	mov	r7, r2
 8000ad0:	d962      	bls.n	8000b98 <__udivmoddi4+0xdc>
 8000ad2:	fab2 f682 	clz	r6, r2
 8000ad6:	b14e      	cbz	r6, 8000aec <__udivmoddi4+0x30>
 8000ad8:	f1c6 0320 	rsb	r3, r6, #32
 8000adc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae4:	40b7      	lsls	r7, r6
 8000ae6:	ea43 0808 	orr.w	r8, r3, r8
 8000aea:	40b4      	lsls	r4, r6
 8000aec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af0:	fa1f fc87 	uxth.w	ip, r7
 8000af4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000afe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b02:	fb01 f20c 	mul.w	r2, r1, ip
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d909      	bls.n	8000b1e <__udivmoddi4+0x62>
 8000b0a:	18fb      	adds	r3, r7, r3
 8000b0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b10:	f080 80ea 	bcs.w	8000ce8 <__udivmoddi4+0x22c>
 8000b14:	429a      	cmp	r2, r3
 8000b16:	f240 80e7 	bls.w	8000ce8 <__udivmoddi4+0x22c>
 8000b1a:	3902      	subs	r1, #2
 8000b1c:	443b      	add	r3, r7
 8000b1e:	1a9a      	subs	r2, r3, r2
 8000b20:	b2a3      	uxth	r3, r4
 8000b22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b32:	459c      	cmp	ip, r3
 8000b34:	d909      	bls.n	8000b4a <__udivmoddi4+0x8e>
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3c:	f080 80d6 	bcs.w	8000cec <__udivmoddi4+0x230>
 8000b40:	459c      	cmp	ip, r3
 8000b42:	f240 80d3 	bls.w	8000cec <__udivmoddi4+0x230>
 8000b46:	443b      	add	r3, r7
 8000b48:	3802      	subs	r0, #2
 8000b4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b4e:	eba3 030c 	sub.w	r3, r3, ip
 8000b52:	2100      	movs	r1, #0
 8000b54:	b11d      	cbz	r5, 8000b5e <__udivmoddi4+0xa2>
 8000b56:	40f3      	lsrs	r3, r6
 8000b58:	2200      	movs	r2, #0
 8000b5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d905      	bls.n	8000b72 <__udivmoddi4+0xb6>
 8000b66:	b10d      	cbz	r5, 8000b6c <__udivmoddi4+0xb0>
 8000b68:	e9c5 0100 	strd	r0, r1, [r5]
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e7f5      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b72:	fab3 f183 	clz	r1, r3
 8000b76:	2900      	cmp	r1, #0
 8000b78:	d146      	bne.n	8000c08 <__udivmoddi4+0x14c>
 8000b7a:	4573      	cmp	r3, lr
 8000b7c:	d302      	bcc.n	8000b84 <__udivmoddi4+0xc8>
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	f200 8105 	bhi.w	8000d8e <__udivmoddi4+0x2d2>
 8000b84:	1a84      	subs	r4, r0, r2
 8000b86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4690      	mov	r8, r2
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	d0e5      	beq.n	8000b5e <__udivmoddi4+0xa2>
 8000b92:	e9c5 4800 	strd	r4, r8, [r5]
 8000b96:	e7e2      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	f000 8090 	beq.w	8000cbe <__udivmoddi4+0x202>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	f040 80a4 	bne.w	8000cf0 <__udivmoddi4+0x234>
 8000ba8:	1a8a      	subs	r2, r1, r2
 8000baa:	0c03      	lsrs	r3, r0, #16
 8000bac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb0:	b280      	uxth	r0, r0
 8000bb2:	b2bc      	uxth	r4, r7
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d907      	bls.n	8000bda <__udivmoddi4+0x11e>
 8000bca:	18fb      	adds	r3, r7, r3
 8000bcc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x11c>
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	f200 80e0 	bhi.w	8000d98 <__udivmoddi4+0x2dc>
 8000bd8:	46c4      	mov	ip, r8
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000be4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000be8:	fb02 f404 	mul.w	r4, r2, r4
 8000bec:	429c      	cmp	r4, r3
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x144>
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x142>
 8000bf8:	429c      	cmp	r4, r3
 8000bfa:	f200 80ca 	bhi.w	8000d92 <__udivmoddi4+0x2d6>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	1b1b      	subs	r3, r3, r4
 8000c02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c06:	e7a5      	b.n	8000b54 <__udivmoddi4+0x98>
 8000c08:	f1c1 0620 	rsb	r6, r1, #32
 8000c0c:	408b      	lsls	r3, r1
 8000c0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000c12:	431f      	orrs	r7, r3
 8000c14:	fa0e f401 	lsl.w	r4, lr, r1
 8000c18:	fa20 f306 	lsr.w	r3, r0, r6
 8000c1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c24:	4323      	orrs	r3, r4
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	fa1f fc87 	uxth.w	ip, r7
 8000c2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c32:	0c1c      	lsrs	r4, r3, #16
 8000c34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c40:	45a6      	cmp	lr, r4
 8000c42:	fa02 f201 	lsl.w	r2, r2, r1
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x1a0>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c4e:	f080 809c 	bcs.w	8000d8a <__udivmoddi4+0x2ce>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8099 	bls.w	8000d8a <__udivmoddi4+0x2ce>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	eba4 040e 	sub.w	r4, r4, lr
 8000c60:	fa1f fe83 	uxth.w	lr, r3
 8000c64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c68:	fb09 4413 	mls	r4, r9, r3, r4
 8000c6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x1ce>
 8000c78:	193c      	adds	r4, r7, r4
 8000c7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c7e:	f080 8082 	bcs.w	8000d86 <__udivmoddi4+0x2ca>
 8000c82:	45a4      	cmp	ip, r4
 8000c84:	d97f      	bls.n	8000d86 <__udivmoddi4+0x2ca>
 8000c86:	3b02      	subs	r3, #2
 8000c88:	443c      	add	r4, r7
 8000c8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c8e:	eba4 040c 	sub.w	r4, r4, ip
 8000c92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c96:	4564      	cmp	r4, ip
 8000c98:	4673      	mov	r3, lr
 8000c9a:	46e1      	mov	r9, ip
 8000c9c:	d362      	bcc.n	8000d64 <__udivmoddi4+0x2a8>
 8000c9e:	d05f      	beq.n	8000d60 <__udivmoddi4+0x2a4>
 8000ca0:	b15d      	cbz	r5, 8000cba <__udivmoddi4+0x1fe>
 8000ca2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ca6:	eb64 0409 	sbc.w	r4, r4, r9
 8000caa:	fa04 f606 	lsl.w	r6, r4, r6
 8000cae:	fa22 f301 	lsr.w	r3, r2, r1
 8000cb2:	431e      	orrs	r6, r3
 8000cb4:	40cc      	lsrs	r4, r1
 8000cb6:	e9c5 6400 	strd	r6, r4, [r5]
 8000cba:	2100      	movs	r1, #0
 8000cbc:	e74f      	b.n	8000b5e <__udivmoddi4+0xa2>
 8000cbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cc2:	0c01      	lsrs	r1, r0, #16
 8000cc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cc8:	b280      	uxth	r0, r0
 8000cca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4638      	mov	r0, r7
 8000cd2:	463c      	mov	r4, r7
 8000cd4:	46b8      	mov	r8, r7
 8000cd6:	46be      	mov	lr, r7
 8000cd8:	2620      	movs	r6, #32
 8000cda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cde:	eba2 0208 	sub.w	r2, r2, r8
 8000ce2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ce6:	e766      	b.n	8000bb6 <__udivmoddi4+0xfa>
 8000ce8:	4601      	mov	r1, r0
 8000cea:	e718      	b.n	8000b1e <__udivmoddi4+0x62>
 8000cec:	4610      	mov	r0, r2
 8000cee:	e72c      	b.n	8000b4a <__udivmoddi4+0x8e>
 8000cf0:	f1c6 0220 	rsb	r2, r6, #32
 8000cf4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cf8:	40b7      	lsls	r7, r6
 8000cfa:	40b1      	lsls	r1, r6
 8000cfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	430a      	orrs	r2, r1
 8000d06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d0a:	b2bc      	uxth	r4, r7
 8000d0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d16:	fb08 f904 	mul.w	r9, r8, r4
 8000d1a:	40b0      	lsls	r0, r6
 8000d1c:	4589      	cmp	r9, r1
 8000d1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d22:	b280      	uxth	r0, r0
 8000d24:	d93e      	bls.n	8000da4 <__udivmoddi4+0x2e8>
 8000d26:	1879      	adds	r1, r7, r1
 8000d28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d2c:	d201      	bcs.n	8000d32 <__udivmoddi4+0x276>
 8000d2e:	4589      	cmp	r9, r1
 8000d30:	d81f      	bhi.n	8000d72 <__udivmoddi4+0x2b6>
 8000d32:	eba1 0109 	sub.w	r1, r1, r9
 8000d36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d3a:	fb09 f804 	mul.w	r8, r9, r4
 8000d3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d42:	b292      	uxth	r2, r2
 8000d44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d48:	4542      	cmp	r2, r8
 8000d4a:	d229      	bcs.n	8000da0 <__udivmoddi4+0x2e4>
 8000d4c:	18ba      	adds	r2, r7, r2
 8000d4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d52:	d2c4      	bcs.n	8000cde <__udivmoddi4+0x222>
 8000d54:	4542      	cmp	r2, r8
 8000d56:	d2c2      	bcs.n	8000cde <__udivmoddi4+0x222>
 8000d58:	f1a9 0102 	sub.w	r1, r9, #2
 8000d5c:	443a      	add	r2, r7
 8000d5e:	e7be      	b.n	8000cde <__udivmoddi4+0x222>
 8000d60:	45f0      	cmp	r8, lr
 8000d62:	d29d      	bcs.n	8000ca0 <__udivmoddi4+0x1e4>
 8000d64:	ebbe 0302 	subs.w	r3, lr, r2
 8000d68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	46e1      	mov	r9, ip
 8000d70:	e796      	b.n	8000ca0 <__udivmoddi4+0x1e4>
 8000d72:	eba7 0909 	sub.w	r9, r7, r9
 8000d76:	4449      	add	r1, r9
 8000d78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d80:	fb09 f804 	mul.w	r8, r9, r4
 8000d84:	e7db      	b.n	8000d3e <__udivmoddi4+0x282>
 8000d86:	4673      	mov	r3, lr
 8000d88:	e77f      	b.n	8000c8a <__udivmoddi4+0x1ce>
 8000d8a:	4650      	mov	r0, sl
 8000d8c:	e766      	b.n	8000c5c <__udivmoddi4+0x1a0>
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e6fd      	b.n	8000b8e <__udivmoddi4+0xd2>
 8000d92:	443b      	add	r3, r7
 8000d94:	3a02      	subs	r2, #2
 8000d96:	e733      	b.n	8000c00 <__udivmoddi4+0x144>
 8000d98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d9c:	443b      	add	r3, r7
 8000d9e:	e71c      	b.n	8000bda <__udivmoddi4+0x11e>
 8000da0:	4649      	mov	r1, r9
 8000da2:	e79c      	b.n	8000cde <__udivmoddi4+0x222>
 8000da4:	eba1 0109 	sub.w	r1, r1, r9
 8000da8:	46c4      	mov	ip, r8
 8000daa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dae:	fb09 f804 	mul.w	r8, r9, r4
 8000db2:	e7c4      	b.n	8000d3e <__udivmoddi4+0x282>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <vApplicationGetIdleTaskMemory+0x30>)
 8000dce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2280      	movs	r2, #128	@ 0x80
 8000dd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000dd6:	bf00      	nop
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000074 	.word	0x20000074
 8000de8:	200000c8 	.word	0x200000c8

08000dec <applyLowPassFilterVelocity>:
float Set_Accelaration1=10000;
HAL_StatusTypeDef status;
uint16_t OutputVref=5000;
uint32_t time_start;
uint32_t time_end;
float applyLowPassFilterVelocity(float X, float Y_old) {
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000df6:	edc7 0a00 	vstr	s1, [r7]
    // Apply the first-order low-pass filter formula
    float Y = Y_old + G * (X - Y_old);
 8000dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfe:	edd7 7a00 	vldr	s15, [r7]
 8000e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e06:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000e30 <applyLowPassFilterVelocity+0x44>
 8000e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0e:	ed97 7a00 	vldr	s14, [r7]
 8000e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e16:	edc7 7a03 	vstr	s15, [r7, #12]

    // Return the filtered output
    return Y;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	ee07 3a90 	vmov	s15, r3
}
 8000e20:	eeb0 0a67 	vmov.f32	s0, s15
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	3dcccccd 	.word	0x3dcccccd

08000e34 <ConfigureMotor01>:
void ConfigureMotor01(int Enable, int Clockwise, uint16_t dac_value) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, Clockwise);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	461a      	mov	r2, r3
 8000e48:	2110      	movs	r1, #16
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <ConfigureMotor01+0x40>)
 8000e4c:	f001 fc80 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, Enable);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	461a      	mov	r2, r3
 8000e56:	2120      	movs	r1, #32
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <ConfigureMotor01+0x40>)
 8000e5a:	f001 fc79 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <ConfigureMotor01+0x44>)
 8000e66:	f001 fa44 	bl	80022f2 <HAL_DAC_SetValue>

}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020400 	.word	0x40020400
 8000e78:	200002c8 	.word	0x200002c8

08000e7c <ConfigureMotor02>:
void ConfigureMotor02(int Enable, int Clockwise, uint16_t dac_value) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4613      	mov	r3, r2
 8000e88:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2, Clockwise);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2104      	movs	r1, #4
 8000e92:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <ConfigureMotor02+0x40>)
 8000e94:	f001 fc5c 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_3, Enable);
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2108      	movs	r1, #8
 8000ea0:	4806      	ldr	r0, [pc, #24]	@ (8000ebc <ConfigureMotor02+0x40>)
 8000ea2:	f001 fc55 	bl	8002750 <HAL_GPIO_WritePin>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2110      	movs	r1, #16
 8000eac:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <ConfigureMotor02+0x44>)
 8000eae:	f001 fa20 	bl	80022f2 <HAL_DAC_SetValue>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	200002c8 	.word	0x200002c8

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b08e      	sub	sp, #56	@ 0x38
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000eca:	f000 fd8d 	bl	80019e8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ece:	f001 f810 	bl	8001ef2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed2:	f000 f85b 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed6:	f000 fa53 	bl	8001380 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eda:	f000 f92f 	bl	800113c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ede:	f000 f9d5 	bl	800128c <MX_TIM4_Init>
  MX_TIM13_Init();
 8000ee2:	f000 fa29 	bl	8001338 <MX_TIM13_Init>
  MX_SPI4_Init();
 8000ee6:	f000 f8eb 	bl	80010c0 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000eea:	f003 f823 	bl	8003f34 <MX_FATFS_Init>
  MX_DAC_Init();
 8000eee:	f000 f8b3 	bl	8001058 <MX_DAC_Init>
  MX_TIM2_Init();
 8000ef2:	f000 f97d 	bl	80011f0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000ef6:	213c      	movs	r1, #60	@ 0x3c
 8000ef8:	481c      	ldr	r0, [pc, #112]	@ (8000f6c <main+0xa8>)
 8000efa:	f002 fb7b 	bl	80035f4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000efe:	213c      	movs	r1, #60	@ 0x3c
 8000f00:	481b      	ldr	r0, [pc, #108]	@ (8000f70 <main+0xac>)
 8000f02:	f002 fb77 	bl	80035f4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim2);
 8000f06:	481b      	ldr	r0, [pc, #108]	@ (8000f74 <main+0xb0>)
 8000f08:	f002 f9e6 	bl	80032d8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	481a      	ldr	r0, [pc, #104]	@ (8000f78 <main+0xb4>)
 8000f10:	f001 f998 	bl	8002244 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000f14:	2110      	movs	r1, #16
 8000f16:	4818      	ldr	r0, [pc, #96]	@ (8000f78 <main+0xb4>)
 8000f18:	f001 f994 	bl	8002244 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Record */
  osThreadDef(Record, StartDefaultTask, osPriorityNormal, 0, 128);
 8000f1c:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <main+0xb8>)
 8000f1e:	f107 041c 	add.w	r4, r7, #28
 8000f22:	461d      	mov	r5, r3
 8000f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecordHandle = osThreadCreate(osThread(Record), NULL);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f8e0 	bl	80040fc <osThreadCreate>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a10      	ldr	r2, [pc, #64]	@ (8000f80 <main+0xbc>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainController */
  osThreadDef(MainController, StartTask02, osPriorityRealtime, 0, 128);
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <main+0xc0>)
 8000f44:	463c      	mov	r4, r7
 8000f46:	461d      	mov	r5, r3
 8000f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainControllerHandle = osThreadCreate(osThread(MainController), NULL);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f003 f8cf 	bl	80040fc <osThreadCreate>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a09      	ldr	r2, [pc, #36]	@ (8000f88 <main+0xc4>)
 8000f62:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000f64:	f003 f8c3 	bl	80040ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <main+0xa4>
 8000f6c:	200003d8 	.word	0x200003d8
 8000f70:	20000340 	.word	0x20000340
 8000f74:	2000038c 	.word	0x2000038c
 8000f78:	200002c8 	.word	0x200002c8
 8000f7c:	080055e8 	.word	0x080055e8
 8000f80:	20000470 	.word	0x20000470
 8000f84:	08005614 	.word	0x08005614
 8000f88:	20000474 	.word	0x20000474

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	@ 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	@ 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 fae8 	bl	8005570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	@ (8001050 <SystemClock_Config+0xc4>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	4a26      	ldr	r2, [pc, #152]	@ (8001050 <SystemClock_Config+0xc4>)
 8000fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbc:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <SystemClock_Config+0xc4>)
 8000fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	60bb      	str	r3, [r7, #8]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <SystemClock_Config+0xc8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fd0:	4a20      	ldr	r2, [pc, #128]	@ (8001054 <SystemClock_Config+0xc8>)
 8000fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <SystemClock_Config+0xc8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ff8:	2319      	movs	r3, #25
 8000ffa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000ffc:	2390      	movs	r3, #144	@ 0x90
 8000ffe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001000:	2302      	movs	r3, #2
 8001002:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001004:	2302      	movs	r3, #2
 8001006:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001008:	f107 0320 	add.w	r3, r7, #32
 800100c:	4618      	mov	r0, r3
 800100e:	f001 fbb9 	bl	8002784 <HAL_RCC_OscConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001018:	f000 fd24 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101c:	230f      	movs	r3, #15
 800101e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001020:	2302      	movs	r3, #2
 8001022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001028:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	2102      	movs	r1, #2
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fe47 	bl	8002ccc <HAL_RCC_ClockConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001044:	f000 fd0e 	bl	8001a64 <Error_Handler>
  }
}
 8001048:	bf00      	nop
 800104a:	3750      	adds	r7, #80	@ 0x50
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40007000 	.word	0x40007000

08001058 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800105e:	463b      	mov	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <MX_DAC_Init+0x60>)
 8001068:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <MX_DAC_Init+0x64>)
 800106a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800106c:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <MX_DAC_Init+0x60>)
 800106e:	f001 f8c7 	bl	8002200 <HAL_DAC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001078:	f000 fcf4 	bl	8001a64 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	4619      	mov	r1, r3
 800108a:	480b      	ldr	r0, [pc, #44]	@ (80010b8 <MX_DAC_Init+0x60>)
 800108c:	f001 f95b 	bl	8002346 <HAL_DAC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001096:	f000 fce5 	bl	8001a64 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800109a:	463b      	mov	r3, r7
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	4805      	ldr	r0, [pc, #20]	@ (80010b8 <MX_DAC_Init+0x60>)
 80010a2:	f001 f950 	bl	8002346 <HAL_DAC_ConfigChannel>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 fcda 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200002c8 	.word	0x200002c8
 80010bc:	40007400 	.word	0x40007400

080010c0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001138 <MX_SPI4_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010d0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b18      	ldr	r3, [pc, #96]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d8:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010da:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010de:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e0:	4b14      	ldr	r3, [pc, #80]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010f2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010f6:	2220      	movs	r2, #32
 80010f8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_SPI4_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_SPI4_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_SPI4_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_SPI4_Init+0x74>)
 800110e:	2207      	movs	r2, #7
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_SPI4_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_SPI4_Init+0x74>)
 800111a:	2208      	movs	r2, #8
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_SPI4_Init+0x74>)
 8001120:	f001 ffd8 	bl	80030d4 <HAL_SPI_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800112a:	f000 fc9b 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002dc 	.word	0x200002dc
 8001138:	40013400 	.word	0x40013400

0800113c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	@ 0x30
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2224      	movs	r2, #36	@ 0x24
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 fa10 	bl	8005570 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001150:	463b      	mov	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <MX_TIM1_Init+0xac>)
 800115c:	4a23      	ldr	r2, [pc, #140]	@ (80011ec <MX_TIM1_Init+0xb0>)
 800115e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001160:	4b21      	ldr	r3, [pc, #132]	@ (80011e8 <MX_TIM1_Init+0xac>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <MX_TIM1_Init+0xac>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800116c:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <MX_TIM1_Init+0xac>)
 800116e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_TIM1_Init+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <MX_TIM1_Init+0xac>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <MX_TIM1_Init+0xac>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001186:	2303      	movs	r3, #3
 8001188:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800118a:	2302      	movs	r3, #2
 800118c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800118e:	2301      	movs	r3, #1
 8001190:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001196:	2304      	movs	r3, #4
 8001198:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800119a:	2302      	movs	r3, #2
 800119c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800119e:	2301      	movs	r3, #1
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 80011a6:	2304      	movs	r3, #4
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	4619      	mov	r1, r3
 80011b0:	480d      	ldr	r0, [pc, #52]	@ (80011e8 <MX_TIM1_Init+0xac>)
 80011b2:	f002 f979 	bl	80034a8 <HAL_TIM_Encoder_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80011bc:	f000 fc52 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	2300      	movs	r3, #0
 80011c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_TIM1_Init+0xac>)
 80011d2:	f002 fe03 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80011dc:	f000 fc42 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	@ 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000340 	.word	0x20000340
 80011ec:	40010000 	.word	0x40010000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120e:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001214:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001218:	f240 1267 	movw	r2, #359	@ 0x167
 800121c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1a      	ldr	r3, [pc, #104]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001226:	f04f 32ff 	mov.w	r2, #4294967295
 800122a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <MX_TIM2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	@ (8001288 <MX_TIM2_Init+0x98>)
 800123a:	f001 fff6 	bl	800322a <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001244:	f000 fc0e 	bl	8001a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001256:	f002 fb63 	bl	8003920 <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001260:	f000 fc00 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	@ (8001288 <MX_TIM2_Init+0x98>)
 8001272:	f002 fdb3 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800127c:	f000 fbf2 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000038c 	.word	0x2000038c

0800128c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	2224      	movs	r2, #36	@ 0x24
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 f968 	bl	8005570 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	463b      	mov	r3, r7
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012aa:	4b21      	ldr	r3, [pc, #132]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012ac:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <MX_TIM4_Init+0xa8>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b19      	ldr	r3, [pc, #100]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012d0:	2303      	movs	r3, #3
 80012d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80012d4:	2302      	movs	r3, #2
 80012d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d8:	2301      	movs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM4_Init+0xa4>)
 80012fc:	f002 f8d4 	bl	80034a8 <HAL_TIM_Encoder_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001306:	f000 fbad 	bl	8001a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001312:	463b      	mov	r3, r7
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM4_Init+0xa4>)
 8001318:	f002 fd60 	bl	8003ddc <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001322:	f000 fb9f 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	@ 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200003d8 	.word	0x200003d8
 8001334:	40000800 	.word	0x40000800

08001338 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <MX_TIM13_Init+0x40>)
 800133e:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <MX_TIM13_Init+0x44>)
 8001340:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 14400-1;
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <MX_TIM13_Init+0x40>)
 8001344:	f643 023f 	movw	r2, #14399	@ 0x383f
 8001348:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134a:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <MX_TIM13_Init+0x40>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001350:	4b09      	ldr	r3, [pc, #36]	@ (8001378 <MX_TIM13_Init+0x40>)
 8001352:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001356:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <MX_TIM13_Init+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <MX_TIM13_Init+0x40>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	@ (8001378 <MX_TIM13_Init+0x40>)
 8001366:	f001 ff60 	bl	800322a <HAL_TIM_Base_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001370:	f000 fb78 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000424 	.word	0x20000424
 800137c:	40001c00 	.word	0x40001c00

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	@ 0x30
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	4b4c      	ldr	r3, [pc, #304]	@ (80014c8 <MX_GPIO_Init+0x148>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a4b      	ldr	r2, [pc, #300]	@ (80014c8 <MX_GPIO_Init+0x148>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b49      	ldr	r3, [pc, #292]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a45      	ldr	r2, [pc, #276]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0320 	and.w	r3, r3, #32
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a3f      	ldr	r2, [pc, #252]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b3d      	ldr	r3, [pc, #244]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a39      	ldr	r2, [pc, #228]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b34      	ldr	r3, [pc, #208]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <MX_GPIO_Init+0x148>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b31      	ldr	r3, [pc, #196]	@ (80014c8 <MX_GPIO_Init+0x148>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <MX_GPIO_Init+0x148>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a2d      	ldr	r2, [pc, #180]	@ (80014c8 <MX_GPIO_Init+0x148>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <MX_GPIO_Init+0x148>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2103      	movs	r1, #3
 800142a:	4828      	ldr	r0, [pc, #160]	@ (80014cc <MX_GPIO_Init+0x14c>)
 800142c:	f001 f990 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	210c      	movs	r1, #12
 8001434:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <MX_GPIO_Init+0x150>)
 8001436:	f001 f98b 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2131      	movs	r1, #49	@ 0x31
 800143e:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <MX_GPIO_Init+0x154>)
 8001440:	f001 f986 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2103      	movs	r1, #3
 8001448:	4823      	ldr	r0, [pc, #140]	@ (80014d8 <MX_GPIO_Init+0x158>)
 800144a:	f001 f981 	bl	8002750 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800144e:	2303      	movs	r3, #3
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4819      	ldr	r0, [pc, #100]	@ (80014cc <MX_GPIO_Init+0x14c>)
 8001466:	f000 ffc7 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146a:	230c      	movs	r3, #12
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146e:	2301      	movs	r3, #1
 8001470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001476:	2300      	movs	r3, #0
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4813      	ldr	r0, [pc, #76]	@ (80014d0 <MX_GPIO_Init+0x150>)
 8001482:	f000 ffb9 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8001486:	2331      	movs	r3, #49	@ 0x31
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 031c 	add.w	r3, r7, #28
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <MX_GPIO_Init+0x154>)
 800149e:	f000 ffab 	bl	80023f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014a2:	2303      	movs	r3, #3
 80014a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a6:	2301      	movs	r3, #1
 80014a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <MX_GPIO_Init+0x158>)
 80014ba:	f000 ff9d 	bl	80023f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014be:	bf00      	nop
 80014c0:	3730      	adds	r7, #48	@ 0x30
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020c00 	.word	0x40020c00
 80014dc:	00000000 	.word	0x00000000

080014e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	MainTaskCount++;
 80014e8:	4bbf      	ldr	r3, [pc, #764]	@ (80017e8 <StartDefaultTask+0x308>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4abe      	ldr	r2, [pc, #760]	@ (80017e8 <StartDefaultTask+0x308>)
 80014f0:	6013      	str	r3, [r2, #0]
  time_start = __HAL_TIM_GET_COUNTER(&htim2);
 80014f2:	4bbe      	ldr	r3, [pc, #760]	@ (80017ec <StartDefaultTask+0x30c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	4abd      	ldr	r2, [pc, #756]	@ (80017f0 <StartDefaultTask+0x310>)
 80014fa:	6013      	str	r3, [r2, #0]
  MainloopCount++;
 80014fc:	4bbd      	ldr	r3, [pc, #756]	@ (80017f4 <StartDefaultTask+0x314>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4abc      	ldr	r2, [pc, #752]	@ (80017f4 <StartDefaultTask+0x314>)
 8001504:	6013      	str	r3, [r2, #0]
  OutputVref++;
 8001506:	4bbc      	ldr	r3, [pc, #752]	@ (80017f8 <StartDefaultTask+0x318>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	b29a      	uxth	r2, r3
 800150e:	4bba      	ldr	r3, [pc, #744]	@ (80017f8 <StartDefaultTask+0x318>)
 8001510:	801a      	strh	r2, [r3, #0]
  if(OutputVref>4000){
 8001512:	4bb9      	ldr	r3, [pc, #740]	@ (80017f8 <StartDefaultTask+0x318>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800151a:	d902      	bls.n	8001522 <StartDefaultTask+0x42>
	  OutputVref=0;
 800151c:	4bb6      	ldr	r3, [pc, #728]	@ (80017f8 <StartDefaultTask+0x318>)
 800151e:	2200      	movs	r2, #0
 8001520:	801a      	strh	r2, [r3, #0]
  }
  EncoderUpdated = 0;
 8001522:	4bb6      	ldr	r3, [pc, #728]	@ (80017fc <StartDefaultTask+0x31c>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);
 8001528:	4bb5      	ldr	r3, [pc, #724]	@ (8001800 <StartDefaultTask+0x320>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	4ab5      	ldr	r2, [pc, #724]	@ (8001804 <StartDefaultTask+0x324>)
 8001530:	6013      	str	r3, [r2, #0]
  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001532:	4bb5      	ldr	r3, [pc, #724]	@ (8001808 <StartDefaultTask+0x328>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	4ab4      	ldr	r2, [pc, #720]	@ (800180c <StartDefaultTask+0x32c>)
 800153a:	6013      	str	r3, [r2, #0]
  EncoderUpdated = 1;
 800153c:	4baf      	ldr	r3, [pc, #700]	@ (80017fc <StartDefaultTask+0x31c>)
 800153e:	2201      	movs	r2, #1
 8001540:	601a      	str	r2, [r3, #0]
  secondFromStart=__HAL_TIM_GET_COUNTER(&htim2)/100000;
 8001542:	4baa      	ldr	r3, [pc, #680]	@ (80017ec <StartDefaultTask+0x30c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	4ab1      	ldr	r2, [pc, #708]	@ (8001810 <StartDefaultTask+0x330>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	09db      	lsrs	r3, r3, #7
 8001552:	4ab0      	ldr	r2, [pc, #704]	@ (8001814 <StartDefaultTask+0x334>)
 8001554:	6013      	str	r3, [r2, #0]
  // Compute **Encoder 1** Position, Velocity, & Acceleration
  theta1 = (float)(encoder_ticks) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 8001556:	4bab      	ldr	r3, [pc, #684]	@ (8001804 <StartDefaultTask+0x324>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001562:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7fe ffb5 	bl	80004d8 <__aeabi_f2d>
 800156e:	a39c      	add	r3, pc, #624	@ (adr r3, 80017e0 <StartDefaultTask+0x300>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f808 	bl	8000588 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	4ba5      	ldr	r3, [pc, #660]	@ (8001818 <StartDefaultTask+0x338>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800181c <StartDefaultTask+0x33c>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	ee17 0a90 	vmov	r0, s15
 8001592:	f7fe ffa1 	bl	80004d8 <__aeabi_f2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4620      	mov	r0, r4
 800159c:	4629      	mov	r1, r5
 800159e:	f7ff f91d 	bl	80007dc <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa1f 	bl	80009ec <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a9b      	ldr	r2, [pc, #620]	@ (8001820 <StartDefaultTask+0x340>)
 80015b2:	6013      	str	r3, [r2, #0]
  velocity1 = (theta1 - theta1_prev) * 1000000  / time_interval;
 80015b4:	4b9a      	ldr	r3, [pc, #616]	@ (8001820 <StartDefaultTask+0x340>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001824 <StartDefaultTask+0x344>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8001828 <StartDefaultTask+0x348>
 80015c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015cc:	4b97      	ldr	r3, [pc, #604]	@ (800182c <StartDefaultTask+0x34c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015dc:	4b94      	ldr	r3, [pc, #592]	@ (8001830 <StartDefaultTask+0x350>)
 80015de:	edc3 7a00 	vstr	s15, [r3]
  acceleration1 = (velocity1 - velocity1_prev) * 1000000  / time_interval;
 80015e2:	4b93      	ldr	r3, [pc, #588]	@ (8001830 <StartDefaultTask+0x350>)
 80015e4:	ed93 7a00 	vldr	s14, [r3]
 80015e8:	4b92      	ldr	r3, [pc, #584]	@ (8001834 <StartDefaultTask+0x354>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f2:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001828 <StartDefaultTask+0x348>
 80015f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015fa:	4b8c      	ldr	r3, [pc, #560]	@ (800182c <StartDefaultTask+0x34c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	ee07 3a90 	vmov	s15, r3
 8001602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160a:	4b8b      	ldr	r3, [pc, #556]	@ (8001838 <StartDefaultTask+0x358>)
 800160c:	edc3 7a00 	vstr	s15, [r3]

  // Apply low-pass filter on the velocity of Encoder 1
  velocity1 = applyLowPassFilterVelocity(velocity1, velocity1_prev);  // Filtered velocity
 8001610:	4b87      	ldr	r3, [pc, #540]	@ (8001830 <StartDefaultTask+0x350>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	4b87      	ldr	r3, [pc, #540]	@ (8001834 <StartDefaultTask+0x354>)
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	eef0 0a47 	vmov.f32	s1, s14
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	f7ff fbe2 	bl	8000dec <applyLowPassFilterVelocity>
 8001628:	eef0 7a40 	vmov.f32	s15, s0
 800162c:	4b80      	ldr	r3, [pc, #512]	@ (8001830 <StartDefaultTask+0x350>)
 800162e:	edc3 7a00 	vstr	s15, [r3]

  theta1_prev = theta1;
 8001632:	4b7b      	ldr	r3, [pc, #492]	@ (8001820 <StartDefaultTask+0x340>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a7b      	ldr	r2, [pc, #492]	@ (8001824 <StartDefaultTask+0x344>)
 8001638:	6013      	str	r3, [r2, #0]
  velocity1_prev = velocity1;
 800163a:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <StartDefaultTask+0x350>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7d      	ldr	r2, [pc, #500]	@ (8001834 <StartDefaultTask+0x354>)
 8001640:	6013      	str	r3, [r2, #0]

  // Compute **Encoder 2** Position, Velocity, & Acceleration
  theta2 = (float)(encoder_ticks2) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 8001642:	4b72      	ldr	r3, [pc, #456]	@ (800180c <StartDefaultTask+0x32c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001652:	ee17 0a90 	vmov	r0, s15
 8001656:	f7fe ff3f 	bl	80004d8 <__aeabi_f2d>
 800165a:	a361      	add	r3, pc, #388	@ (adr r3, 80017e0 <StartDefaultTask+0x300>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ff92 	bl	8000588 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4614      	mov	r4, r2
 800166a:	461d      	mov	r5, r3
 800166c:	4b6a      	ldr	r3, [pc, #424]	@ (8001818 <StartDefaultTask+0x338>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800181c <StartDefaultTask+0x33c>
 8001676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff2b 	bl	80004d8 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7ff f8a7 	bl	80007dc <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff f9a9 	bl	80009ec <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a67      	ldr	r2, [pc, #412]	@ (800183c <StartDefaultTask+0x35c>)
 800169e:	6013      	str	r3, [r2, #0]
  velocity2 = (theta2 - theta2_prev) * 1000000  / time_interval;
 80016a0:	4b66      	ldr	r3, [pc, #408]	@ (800183c <StartDefaultTask+0x35c>)
 80016a2:	ed93 7a00 	vldr	s14, [r3]
 80016a6:	4b66      	ldr	r3, [pc, #408]	@ (8001840 <StartDefaultTask+0x360>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001828 <StartDefaultTask+0x348>
 80016b4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016b8:	4b5c      	ldr	r3, [pc, #368]	@ (800182c <StartDefaultTask+0x34c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	ee07 3a90 	vmov	s15, r3
 80016c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001844 <StartDefaultTask+0x364>)
 80016ca:	edc3 7a00 	vstr	s15, [r3]
  acceleration2 = (velocity2 - velocity2_prev) * 1000000  / time_interval;
 80016ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001844 <StartDefaultTask+0x364>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001848 <StartDefaultTask+0x368>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016de:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001828 <StartDefaultTask+0x348>
 80016e2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016e6:	4b51      	ldr	r3, [pc, #324]	@ (800182c <StartDefaultTask+0x34c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f6:	4b55      	ldr	r3, [pc, #340]	@ (800184c <StartDefaultTask+0x36c>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]

  // Apply low-pass filter on the velocity of Encoder 2
  velocity2 = applyLowPassFilterVelocity(velocity2, velocity2_prev);  // Filtered velocity
 80016fc:	4b51      	ldr	r3, [pc, #324]	@ (8001844 <StartDefaultTask+0x364>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	4b51      	ldr	r3, [pc, #324]	@ (8001848 <StartDefaultTask+0x368>)
 8001704:	ed93 7a00 	vldr	s14, [r3]
 8001708:	eef0 0a47 	vmov.f32	s1, s14
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	f7ff fb6c 	bl	8000dec <applyLowPassFilterVelocity>
 8001714:	eef0 7a40 	vmov.f32	s15, s0
 8001718:	4b4a      	ldr	r3, [pc, #296]	@ (8001844 <StartDefaultTask+0x364>)
 800171a:	edc3 7a00 	vstr	s15, [r3]
  theta2_prev = theta2;
 800171e:	4b47      	ldr	r3, [pc, #284]	@ (800183c <StartDefaultTask+0x35c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a47      	ldr	r2, [pc, #284]	@ (8001840 <StartDefaultTask+0x360>)
 8001724:	6013      	str	r3, [r2, #0]
  velocity2_prev = velocity2;
 8001726:	4b47      	ldr	r3, [pc, #284]	@ (8001844 <StartDefaultTask+0x364>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a47      	ldr	r2, [pc, #284]	@ (8001848 <StartDefaultTask+0x368>)
 800172c:	6013      	str	r3, [r2, #0]
  // Disturbance Observers //
  Icmd1=Jn1*Set_Accelaration1/Ktn1+Idis1;
 800172e:	4b48      	ldr	r3, [pc, #288]	@ (8001850 <StartDefaultTask+0x370>)
 8001730:	ed93 7a00 	vldr	s14, [r3]
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <StartDefaultTask+0x374>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800173e:	4b46      	ldr	r3, [pc, #280]	@ (8001858 <StartDefaultTask+0x378>)
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001748:	4b44      	ldr	r3, [pc, #272]	@ (800185c <StartDefaultTask+0x37c>)
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	4b43      	ldr	r3, [pc, #268]	@ (8001860 <StartDefaultTask+0x380>)
 8001754:	edc3 7a00 	vstr	s15, [r3]
  Tdis1 = (Icmd1 * Ktn1 + velocity1 * Jn1 * Gdis1) * Gdis1 / (time_interval + Gdis1) - velocity1 * Jn1 * Gdis1;
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <StartDefaultTask+0x380>)
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	4b3e      	ldr	r3, [pc, #248]	@ (8001858 <StartDefaultTask+0x378>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001768:	4b31      	ldr	r3, [pc, #196]	@ (8001830 <StartDefaultTask+0x350>)
 800176a:	edd3 6a00 	vldr	s13, [r3]
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <StartDefaultTask+0x370>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001778:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <StartDefaultTask+0x384>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <StartDefaultTask+0x384>)
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001790:	4b26      	ldr	r3, [pc, #152]	@ (800182c <StartDefaultTask+0x34c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800179c:	4b31      	ldr	r3, [pc, #196]	@ (8001864 <StartDefaultTask+0x384>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017aa:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <StartDefaultTask+0x350>)
 80017ac:	edd3 6a00 	vldr	s13, [r3]
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <StartDefaultTask+0x370>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001864 <StartDefaultTask+0x384>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <StartDefaultTask+0x388>)
 80017ca:	edc3 7a00 	vstr	s15, [r3]
  Idis1=Tdis1*Kt1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	@ (8001868 <StartDefaultTask+0x388>)
 80017d0:	ed93 7a00 	vldr	s14, [r3]
 80017d4:	4b25      	ldr	r3, [pc, #148]	@ (800186c <StartDefaultTask+0x38c>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	e047      	b.n	8001870 <StartDefaultTask+0x390>
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	400921fb 	.word	0x400921fb
 80017e8:	20000478 	.word	0x20000478
 80017ec:	2000038c 	.word	0x2000038c
 80017f0:	20000490 	.word	0x20000490
 80017f4:	20000488 	.word	0x20000488
 80017f8:	20000030 	.word	0x20000030
 80017fc:	2000048c 	.word	0x2000048c
 8001800:	20000340 	.word	0x20000340
 8001804:	20000480 	.word	0x20000480
 8001808:	200003d8 	.word	0x200003d8
 800180c:	20000484 	.word	0x20000484
 8001810:	0a7c5ac5 	.word	0x0a7c5ac5
 8001814:	20000498 	.word	0x20000498
 8001818:	20000014 	.word	0x20000014
 800181c:	47500000 	.word	0x47500000
 8001820:	2000049c 	.word	0x2000049c
 8001824:	200004a4 	.word	0x200004a4
 8001828:	49742400 	.word	0x49742400
 800182c:	20000000 	.word	0x20000000
 8001830:	200004ac 	.word	0x200004ac
 8001834:	200004b4 	.word	0x200004b4
 8001838:	200004bc 	.word	0x200004bc
 800183c:	200004a0 	.word	0x200004a0
 8001840:	200004a8 	.word	0x200004a8
 8001844:	200004b0 	.word	0x200004b0
 8001848:	200004b8 	.word	0x200004b8
 800184c:	200004c0 	.word	0x200004c0
 8001850:	20000008 	.word	0x20000008
 8001854:	2000002c 	.word	0x2000002c
 8001858:	20000004 	.word	0x20000004
 800185c:	200004d0 	.word	0x200004d0
 8001860:	200004c4 	.word	0x200004c4
 8001864:	2000000c 	.word	0x2000000c
 8001868:	200004c8 	.word	0x200004c8
 800186c:	20000010 	.word	0x20000010
 8001870:	4b44      	ldr	r3, [pc, #272]	@ (8001984 <StartDefaultTask+0x4a4>)
 8001872:	edc3 7a00 	vstr	s15, [r3]
  // Set the DAC output voltage
  if(Icmd1>4.5){
 8001876:	4b44      	ldr	r3, [pc, #272]	@ (8001988 <StartDefaultTask+0x4a8>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	dd02      	ble.n	8001890 <StartDefaultTask+0x3b0>
	  Icmd1=4.5;
 800188a:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <StartDefaultTask+0x4a8>)
 800188c:	4a3f      	ldr	r2, [pc, #252]	@ (800198c <StartDefaultTask+0x4ac>)
 800188e:	601a      	str	r2, [r3, #0]
  }
  ConfigureMotor02(1, 1, Icmd1*(4000)/4.5);
 8001890:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <StartDefaultTask+0x4a8>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001990 <StartDefaultTask+0x4b0>
 800189a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189e:	ee17 0a90 	vmov	r0, s15
 80018a2:	f7fe fe19 	bl	80004d8 <__aeabi_f2d>
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <StartDefaultTask+0x4b4>)
 80018ac:	f7fe ff96 	bl	80007dc <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f878 	bl	80009ac <__aeabi_d2uiz>
 80018bc:	4603      	mov	r3, r0
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	2101      	movs	r1, #1
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fad9 	bl	8000e7c <ConfigureMotor02>
  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2) - velocity2 * Jn2 * Gdis2;
 80018ca:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <StartDefaultTask+0x4b8>)
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	4b32      	ldr	r3, [pc, #200]	@ (800199c <StartDefaultTask+0x4bc>)
 80018d2:	edd3 7a00 	vldr	s15, [r3]
 80018d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018da:	4b31      	ldr	r3, [pc, #196]	@ (80019a0 <StartDefaultTask+0x4c0>)
 80018dc:	edd3 6a00 	vldr	s13, [r3]
 80018e0:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <StartDefaultTask+0x4c4>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ea:	4b2f      	ldr	r3, [pc, #188]	@ (80019a8 <StartDefaultTask+0x4c8>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <StartDefaultTask+0x4c8>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <StartDefaultTask+0x4cc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800190e:	4b26      	ldr	r3, [pc, #152]	@ (80019a8 <StartDefaultTask+0x4c8>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800191c:	4b20      	ldr	r3, [pc, #128]	@ (80019a0 <StartDefaultTask+0x4c0>)
 800191e:	edd3 6a00 	vldr	s13, [r3]
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <StartDefaultTask+0x4c4>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <StartDefaultTask+0x4c8>)
 800192e:	edd3 7a00 	vldr	s15, [r3]
 8001932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <StartDefaultTask+0x4d0>)
 800193c:	edc3 7a00 	vstr	s15, [r3]

  Idis2=Tdis2*Kt2;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <StartDefaultTask+0x4d0>)
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <StartDefaultTask+0x4d4>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001950:	4b19      	ldr	r3, [pc, #100]	@ (80019b8 <StartDefaultTask+0x4d8>)
 8001952:	edc3 7a00 	vstr	s15, [r3]

  ConfigureMotor01(1, 1, 500);
 8001956:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800195a:	2101      	movs	r1, #1
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fa69 	bl	8000e34 <ConfigureMotor01>
  time_end = __HAL_TIM_GET_COUNTER(&htim2);
 8001962:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <StartDefaultTask+0x4dc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <StartDefaultTask+0x4e0>)
 800196a:	6013      	str	r3, [r2, #0]
  time_interval = time_end - time_start;
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <StartDefaultTask+0x4e0>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <StartDefaultTask+0x4e4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <StartDefaultTask+0x4cc>)
 8001978:	6013      	str	r3, [r2, #0]
    osDelay(5);
 800197a:	2005      	movs	r0, #5
 800197c:	f002 fc0a 	bl	8004194 <osDelay>
	MainTaskCount++;
 8001980:	e5b2      	b.n	80014e8 <StartDefaultTask+0x8>
 8001982:	bf00      	nop
 8001984:	200004d0 	.word	0x200004d0
 8001988:	200004c4 	.word	0x200004c4
 800198c:	40900000 	.word	0x40900000
 8001990:	457a0000 	.word	0x457a0000
 8001994:	40120000 	.word	0x40120000
 8001998:	20000018 	.word	0x20000018
 800199c:	2000001c 	.word	0x2000001c
 80019a0:	200004b0 	.word	0x200004b0
 80019a4:	20000020 	.word	0x20000020
 80019a8:	20000024 	.word	0x20000024
 80019ac:	20000000 	.word	0x20000000
 80019b0:	200004cc 	.word	0x200004cc
 80019b4:	20000028 	.word	0x20000028
 80019b8:	200004d4 	.word	0x200004d4
 80019bc:	2000038c 	.word	0x2000038c
 80019c0:	20000494 	.word	0x20000494
 80019c4:	20000490 	.word	0x20000490

080019c8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	RecordTaskCount++;
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <StartTask02+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a03      	ldr	r2, [pc, #12]	@ (80019e4 <StartTask02+0x1c>)
 80019d8:	6013      	str	r3, [r2, #0]
    osDelay(5);
 80019da:	2005      	movs	r0, #5
 80019dc:	f002 fbda 	bl	8004194 <osDelay>
	RecordTaskCount++;
 80019e0:	bf00      	nop
 80019e2:	e7f5      	b.n	80019d0 <StartTask02+0x8>
 80019e4:	2000047c 	.word	0x2000047c

080019e8 <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80019fa:	f000 fb89 	bl	8002110 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80019fe:	2301      	movs	r3, #1
 8001a00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a0a:	231f      	movs	r3, #31
 8001a0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a0e:	2387      	movs	r3, #135	@ 0x87
 8001a10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a16:	2300      	movs	r3, #0
 8001a18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f000 fba7 	bl	8002180 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a32:	2004      	movs	r0, #4
 8001a34:	f000 fb84 	bl	8002140 <HAL_MPU_Enable>

}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001a52:	f000 fa5b 	bl	8001f0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40000c00 	.word	0x40000c00

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <Error_Handler+0x8>

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	4a10      	ldr	r2, [pc, #64]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a82:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <HAL_MspInit+0x4c>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	f06f 0001 	mvn.w	r0, #1
 8001aae:	f000 fb05 	bl	80020bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <HAL_DAC_MspInit+0x74>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d123      	bne.n	8001b2a <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001ae8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a0e      	ldr	r2, [pc, #56]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0c      	ldr	r3, [pc, #48]	@ (8001b38 <HAL_DAC_MspInit+0x78>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001b12:	2330      	movs	r3, #48	@ 0x30
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_DAC_MspInit+0x7c>)
 8001b26:	f000 fc67 	bl	80023f8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40007400 	.word	0x40007400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08a      	sub	sp, #40	@ 0x28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_SPI_MspInit+0x7c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d127      	bne.n	8001bb2 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b14      	ldr	r3, [pc, #80]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b80:	f043 0310 	orr.w	r3, r3, #16
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <HAL_SPI_MspInit+0x80>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001ba2:	2305      	movs	r3, #5
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	4805      	ldr	r0, [pc, #20]	@ (8001bc4 <HAL_SPI_MspInit+0x84>)
 8001bae:	f000 fc23 	bl	80023f8 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001bb2:	bf00      	nop
 8001bb4:	3728      	adds	r7, #40	@ 0x28
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40013400 	.word	0x40013400
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	@ 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ca4 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d129      	bne.n	8001c3e <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	4a28      	ldr	r2, [pc, #160]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c08:	f043 0310 	orr.w	r3, r3, #16
 8001c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0e:	4b26      	ldr	r3, [pc, #152]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	f003 0310 	and.w	r3, r3, #16
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001c1a:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c30:	f107 031c 	add.w	r3, r7, #28
 8001c34:	4619      	mov	r1, r3
 8001c36:	481d      	ldr	r0, [pc, #116]	@ (8001cac <HAL_TIM_Encoder_MspInit+0xe4>)
 8001c38:	f000 fbde 	bl	80023f8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c3c:	e02d      	b.n	8001c9a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d128      	bne.n	8001c9a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	4a16      	ldr	r2, [pc, #88]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	4a10      	ldr	r2, [pc, #64]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001c78:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4807      	ldr	r0, [pc, #28]	@ (8001cb4 <HAL_TIM_Encoder_MspInit+0xec>)
 8001c96:	f000 fbaf 	bl	80023f8 <HAL_GPIO_Init>
}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	@ 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40020c00 	.word	0x40020c00

08001cb8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001ce2:	e018      	b.n	8001d16 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d24 <HAL_TIM_Base_MspInit+0x6c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d113      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001cee:	4b0c      	ldr	r3, [pc, #48]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_TIM_Base_MspInit+0x68>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	202c      	movs	r0, #44	@ 0x2c
 8001d0c:	f000 f9d6 	bl	80020bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001d10:	202c      	movs	r0, #44	@ 0x2c
 8001d12:	f000 f9ef 	bl	80020f4 <HAL_NVIC_EnableIRQ>
}
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40001c00 	.word	0x40001c00

08001d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <HAL_InitTick+0xe0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	4a32      	ldr	r2, [pc, #200]	@ (8001e08 <HAL_InitTick+0xe0>)
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
 8001d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d44:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <HAL_InitTick+0xe0>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d48:	f003 0308 	and.w	r3, r3, #8
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d50:	f107 0210 	add.w	r2, r7, #16
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f001 f988 	bl	8003070 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d6a:	f001 f96d 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8001d6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d70:	e004      	b.n	8001d7c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d72:	f001 f969 	bl	8003048 <HAL_RCC_GetPCLK1Freq>
 8001d76:	4603      	mov	r3, r0
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7e:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <HAL_InitTick+0xe4>)
 8001d80:	fba2 2303 	umull	r2, r3, r2, r3
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	3b01      	subs	r3, #1
 8001d88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001d8a:	4b21      	ldr	r3, [pc, #132]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001d8c:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <HAL_InitTick+0xec>)
 8001d8e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001d90:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001d92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d96:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001d98:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b19      	ldr	r3, [pc, #100]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001db0:	4817      	ldr	r0, [pc, #92]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001db2:	f001 fa3a 	bl	800322a <HAL_TIM_Base_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d11b      	bne.n	8001dfc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001dc4:	4812      	ldr	r0, [pc, #72]	@ (8001e10 <HAL_InitTick+0xe8>)
 8001dc6:	f001 faf7 	bl	80033b8 <HAL_TIM_Base_Start_IT>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d111      	bne.n	8001dfc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001dd8:	2032      	movs	r0, #50	@ 0x32
 8001dda:	f000 f98b 	bl	80020f4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d808      	bhi.n	8001df6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	2032      	movs	r0, #50	@ 0x32
 8001dea:	f000 f967 	bl	80020bc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <HAL_InitTick+0xf0>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e002      	b.n	8001dfc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3738      	adds	r7, #56	@ 0x38
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	431bde83 	.word	0x431bde83
 8001e10:	200004d8 	.word	0x200004d8
 8001e14:	40000c00 	.word	0x40000c00
 8001e18:	20000038 	.word	0x20000038

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <NMI_Handler+0x4>

08001e24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <MemManage_Handler+0x4>

08001e34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e38:	bf00      	nop
 8001e3a:	e7fd      	b.n	8001e38 <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001e5a:	f001 fc59 	bl	8003710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000424 	.word	0x20000424

08001e68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <TIM5_IRQHandler+0x10>)
 8001e6e:	f001 fc4f 	bl	8003710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200004d8 	.word	0x200004d8

08001e7c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <SystemInit+0x20>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e86:	4a05      	ldr	r2, [pc, #20]	@ (8001e9c <SystemInit+0x20>)
 8001e88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea4:	f7ff ffea 	bl	8001e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eaa:	490d      	ldr	r1, [pc, #52]	@ (8001ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001eac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8001eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001ece:	f003 fb57 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7fe fff7 	bl	8000ec4 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001ee4:	08005660 	.word	0x08005660
  ldr r2, =_sbss
 8001ee8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001eec:	20004288 	.word	0x20004288

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>

08001ef2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef6:	2003      	movs	r0, #3
 8001ef8:	f000 f8d5 	bl	80020a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efc:	200f      	movs	r0, #15
 8001efe:	f7ff ff13 	bl	8001d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f02:	f7ff fdb5 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000003c 	.word	0x2000003c
 8001f30:	20000524 	.word	0x20000524

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000524 	.word	0x20000524

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	@ (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	05fa0000 	.word	0x05fa0000

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4907      	ldr	r1, [pc, #28]	@ (8001fe8 <__NVIC_EnableIRQ+0x38>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	@ (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	@ (800203c <__NVIC_SetPriority+0x50>)
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	@ 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
         );
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	@ 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff4c 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ce:	f7ff ff61 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 80020d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	68b9      	ldr	r1, [r7, #8]
 80020d8:	6978      	ldr	r0, [r7, #20]
 80020da:	f7ff ffb1 	bl	8002040 <NVIC_EncodePriority>
 80020de:	4602      	mov	r2, r0
 80020e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff ff80 	bl	8001fec <__NVIC_SetPriority>
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ff54 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002114:	f3bf 8f5f 	dmb	sy
}
 8002118:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <HAL_MPU_Disable+0x28>)
 800211c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211e:	4a06      	ldr	r2, [pc, #24]	@ (8002138 <HAL_MPU_Disable+0x28>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002124:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002126:	4b05      	ldr	r3, [pc, #20]	@ (800213c <HAL_MPU_Disable+0x2c>)
 8002128:	2200      	movs	r2, #0
 800212a:	605a      	str	r2, [r3, #4]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	e000ed90 	.word	0xe000ed90

08002140 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002148:	4a0b      	ldr	r2, [pc, #44]	@ (8002178 <HAL_MPU_Enable+0x38>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002152:	4b0a      	ldr	r3, [pc, #40]	@ (800217c <HAL_MPU_Enable+0x3c>)
 8002154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002156:	4a09      	ldr	r2, [pc, #36]	@ (800217c <HAL_MPU_Enable+0x3c>)
 8002158:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800215e:	f3bf 8f4f 	dsb	sy
}
 8002162:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002164:	f3bf 8f6f 	isb	sy
}
 8002168:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed90 	.word	0xe000ed90
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	785a      	ldrb	r2, [r3, #1]
 800218c:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <HAL_MPU_ConfigRegion+0x7c>)
 800218e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002190:	4b1a      	ldr	r3, [pc, #104]	@ (80021fc <HAL_MPU_ConfigRegion+0x7c>)
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	4a19      	ldr	r2, [pc, #100]	@ (80021fc <HAL_MPU_ConfigRegion+0x7c>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800219c:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_MPU_ConfigRegion+0x7c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
 80021a8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7adb      	ldrb	r3, [r3, #11]
 80021ae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7a9b      	ldrb	r3, [r3, #10]
 80021b6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7b5b      	ldrb	r3, [r3, #13]
 80021be:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7b9b      	ldrb	r3, [r3, #14]
 80021c6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7bdb      	ldrb	r3, [r3, #15]
 80021ce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7a5b      	ldrb	r3, [r3, #9]
 80021d6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7a1b      	ldrb	r3, [r3, #8]
 80021de:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021e0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021e8:	4a04      	ldr	r2, [pc, #16]	@ (80021fc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021ec:	6113      	str	r3, [r2, #16]
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed90 	.word	0xe000ed90

08002200 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e014      	b.n	800223c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	791b      	ldrb	r3, [r3, #4]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fc4c 	bl	8001ac0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e046      	b.n	80022e6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	795b      	ldrb	r3, [r3, #5]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_DAC_Start+0x20>
 8002260:	2302      	movs	r3, #2
 8002262:	e040      	b.n	80022e6 <HAL_DAC_Start+0xa2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2201      	movs	r2, #1
 800227e:	409a      	lsls	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10f      	bne.n	80022ae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002298:	2b3c      	cmp	r3, #60	@ 0x3c
 800229a:	d11d      	bne.n	80022d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e014      	b.n	80022d8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	213c      	movs	r1, #60	@ 0x3c
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0202 	orr.w	r2, r2, #2
 80022d6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b087      	sub	sp, #28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e015      	b.n	800233a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	3308      	adds	r3, #8
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e004      	b.n	8002330 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4413      	add	r3, r2
 800232c:	3314      	adds	r3, #20
 800232e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	461a      	mov	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002346:	b480      	push	{r7}
 8002348:	b089      	sub	sp, #36	@ 0x24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002352:	2300      	movs	r3, #0
 8002354:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_DAC_ConfigChannel+0x1c>
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e042      	b.n	80023ec <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	795b      	ldrb	r3, [r3, #5]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_DAC_ConfigChannel+0x2c>
 800236e:	2302      	movs	r3, #2
 8002370:	e03c      	b.n	80023ec <HAL_DAC_ConfigChannel+0xa6>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2202      	movs	r2, #2
 800237c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6819      	ldr	r1, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	22c0      	movs	r2, #192	@ 0xc0
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80023ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3724      	adds	r7, #36	@ 0x24
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e175      	b.n	8002704 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 8164 	bne.w	80026fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d005      	beq.n	800244e <HAL_GPIO_Init+0x56>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d130      	bne.n	80024b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d017      	beq.n	80024ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0203 	and.w	r2, r3, #3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80be 	beq.w	80026fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_GPIO_Init+0x324>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a65      	ldr	r2, [pc, #404]	@ (800271c <HAL_GPIO_Init+0x324>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b63      	ldr	r3, [pc, #396]	@ (800271c <HAL_GPIO_Init+0x324>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800259a:	4a61      	ldr	r2, [pc, #388]	@ (8002720 <HAL_GPIO_Init+0x328>)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	3302      	adds	r3, #2
 80025a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	220f      	movs	r2, #15
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a58      	ldr	r2, [pc, #352]	@ (8002724 <HAL_GPIO_Init+0x32c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d037      	beq.n	8002636 <HAL_GPIO_Init+0x23e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_GPIO_Init+0x330>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d031      	beq.n	8002632 <HAL_GPIO_Init+0x23a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a56      	ldr	r2, [pc, #344]	@ (800272c <HAL_GPIO_Init+0x334>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d02b      	beq.n	800262e <HAL_GPIO_Init+0x236>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a55      	ldr	r2, [pc, #340]	@ (8002730 <HAL_GPIO_Init+0x338>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x232>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a54      	ldr	r2, [pc, #336]	@ (8002734 <HAL_GPIO_Init+0x33c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x22e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a53      	ldr	r2, [pc, #332]	@ (8002738 <HAL_GPIO_Init+0x340>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x22a>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a52      	ldr	r2, [pc, #328]	@ (800273c <HAL_GPIO_Init+0x344>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x226>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a51      	ldr	r2, [pc, #324]	@ (8002740 <HAL_GPIO_Init+0x348>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x222>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a50      	ldr	r2, [pc, #320]	@ (8002744 <HAL_GPIO_Init+0x34c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x21e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4f      	ldr	r2, [pc, #316]	@ (8002748 <HAL_GPIO_Init+0x350>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x21a>
 800260e:	2309      	movs	r3, #9
 8002610:	e012      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002612:	230a      	movs	r3, #10
 8002614:	e010      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002616:	2308      	movs	r3, #8
 8002618:	e00e      	b.n	8002638 <HAL_GPIO_Init+0x240>
 800261a:	2307      	movs	r3, #7
 800261c:	e00c      	b.n	8002638 <HAL_GPIO_Init+0x240>
 800261e:	2306      	movs	r3, #6
 8002620:	e00a      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002622:	2305      	movs	r3, #5
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002626:	2304      	movs	r3, #4
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x240>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x240>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x240>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	@ (8002720 <HAL_GPIO_Init+0x328>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_GPIO_Init+0x354>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a34      	ldr	r2, [pc, #208]	@ (800274c <HAL_GPIO_Init+0x354>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <HAL_GPIO_Init+0x354>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a29      	ldr	r2, [pc, #164]	@ (800274c <HAL_GPIO_Init+0x354>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_GPIO_Init+0x354>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <HAL_GPIO_Init+0x354>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <HAL_GPIO_Init+0x354>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <HAL_GPIO_Init+0x354>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f ae86 	bls.w	8002418 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40021400 	.word	0x40021400
 800273c:	40021800 	.word	0x40021800
 8002740:	40021c00 	.word	0x40021c00
 8002744:	40022000 	.word	0x40022000
 8002748:	40022400 	.word	0x40022400
 800274c:	40013c00 	.word	0x40013c00

08002750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]
 800275c:	4613      	mov	r3, r2
 800275e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002760:	787b      	ldrb	r3, [r7, #1]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002766:	887a      	ldrh	r2, [r7, #2]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800276c:	e003      	b.n	8002776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	041a      	lsls	r2, r3, #16
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	619a      	str	r2, [r3, #24]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
	...

08002784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e291      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a8:	4b96      	ldr	r3, [pc, #600]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d00c      	beq.n	80027ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b4:	4b93      	ldr	r3, [pc, #588]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d112      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
 80027c0:	4b90      	ldr	r3, [pc, #576]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027cc:	d10b      	bne.n	80027e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ce:	4b8d      	ldr	r3, [pc, #564]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x130>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d168      	bne.n	80028b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e26b      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d106      	bne.n	80027fe <HAL_RCC_OscConfig+0x7a>
 80027f0:	4b84      	ldr	r3, [pc, #528]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a83      	ldr	r2, [pc, #524]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80027f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e02e      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10c      	bne.n	8002820 <HAL_RCC_OscConfig+0x9c>
 8002806:	4b7f      	ldr	r3, [pc, #508]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800280c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b7c      	ldr	r3, [pc, #496]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7b      	ldr	r2, [pc, #492]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002818:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281c:	6013      	str	r3, [r2, #0]
 800281e:	e01d      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002828:	d10c      	bne.n	8002844 <HAL_RCC_OscConfig+0xc0>
 800282a:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a75      	ldr	r2, [pc, #468]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	4b73      	ldr	r3, [pc, #460]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a72      	ldr	r2, [pc, #456]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xd8>
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6e      	ldr	r2, [pc, #440]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800284a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b6c      	ldr	r3, [pc, #432]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6b      	ldr	r2, [pc, #428]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800285a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d013      	beq.n	800288c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7ff fb66 	bl	8001f34 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff fb62 	bl	8001f34 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	@ 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e21f      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b61      	ldr	r3, [pc, #388]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0xe8>
 800288a:	e014      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff fb52 	bl	8001f34 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002894:	f7ff fb4e 	bl	8001f34 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b64      	cmp	r3, #100	@ 0x64
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e20b      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a6:	4b57      	ldr	r3, [pc, #348]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x110>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d069      	beq.n	8002996 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028c2:	4b50      	ldr	r3, [pc, #320]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00b      	beq.n	80028e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b4d      	ldr	r3, [pc, #308]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d11c      	bne.n	8002914 <HAL_RCC_OscConfig+0x190>
 80028da:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_RCC_OscConfig+0x17a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d001      	beq.n	80028fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1df      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	493d      	ldr	r1, [pc, #244]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	e040      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800291c:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a38      	ldr	r2, [pc, #224]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fb04 	bl	8001f34 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fb00 	bl	8001f34 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1bd      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002942:	4b30      	ldr	r3, [pc, #192]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4929      	ldr	r1, [pc, #164]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a26      	ldr	r2, [pc, #152]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fae0 	bl	8001f34 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff fadc 	bl	8001f34 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e199      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d038      	beq.n	8002a14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d019      	beq.n	80029de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b16      	ldr	r3, [pc, #88]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ae:	4a15      	ldr	r2, [pc, #84]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7ff fabd 	bl	8001f34 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029be:	f7ff fab9 	bl	8001f34 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e176      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x23a>
 80029dc:	e01a      	b.n	8002a14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e2:	4a08      	ldr	r2, [pc, #32]	@ (8002a04 <HAL_RCC_OscConfig+0x280>)
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ea:	f7ff faa3 	bl	8001f34 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7ff fa9f 	bl	8001f34 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d903      	bls.n	8002a08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e15c      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
 8002a04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	4b91      	ldr	r3, [pc, #580]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a4 	beq.w	8002b6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b8b      	ldr	r3, [pc, #556]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10d      	bne.n	8002a4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a87      	ldr	r2, [pc, #540]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b85      	ldr	r3, [pc, #532]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a46:	2301      	movs	r3, #1
 8002a48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a4a:	4b82      	ldr	r3, [pc, #520]	@ (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d118      	bne.n	8002a88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a56:	4b7f      	ldr	r3, [pc, #508]	@ (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a62:	f7ff fa67 	bl	8001f34 <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a68:	e008      	b.n	8002a7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6a:	f7ff fa63 	bl	8001f34 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	2b64      	cmp	r3, #100	@ 0x64
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e120      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7c:	4b75      	ldr	r3, [pc, #468]	@ (8002c54 <HAL_RCC_OscConfig+0x4d0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0f0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x31a>
 8002a90:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	4a6e      	ldr	r2, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a9c:	e02d      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x33c>
 8002aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a69      	ldr	r2, [pc, #420]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab6:	4a66      	ldr	r2, [pc, #408]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002abe:	e01c      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x35e>
 8002ac8:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002acc:	4a60      	ldr	r2, [pc, #384]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	f043 0304 	orr.w	r3, r3, #4
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae0:	e00b      	b.n	8002afa <HAL_RCC_OscConfig+0x376>
 8002ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae6:	4a5a      	ldr	r2, [pc, #360]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aee:	4b58      	ldr	r3, [pc, #352]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af2:	4a57      	ldr	r2, [pc, #348]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d015      	beq.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7ff fa17 	bl	8001f34 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7ff fa13 	bl	8001f34 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e0ce      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0ee      	beq.n	8002b0a <HAL_RCC_OscConfig+0x386>
 8002b2c:	e014      	b.n	8002b58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7ff fa01 	bl	8001f34 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b36:	f7ff f9fd 	bl	8001f34 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4c:	4b40      	ldr	r3, [pc, #256]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ee      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d105      	bne.n	8002b6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	4a3b      	ldr	r2, [pc, #236]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80a4 	beq.w	8002cbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b74:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d06b      	beq.n	8002c58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d149      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b88:	4b31      	ldr	r3, [pc, #196]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a30      	ldr	r2, [pc, #192]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002b8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7ff f9ce 	bl	8001f34 <HAL_GetTick>
 8002b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7ff f9ca 	bl	8001f34 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e087      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bae:	4b28      	ldr	r3, [pc, #160]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f0      	bne.n	8002b9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69da      	ldr	r2, [r3, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	019b      	lsls	r3, r3, #6
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	061b      	lsls	r3, r3, #24
 8002bde:	4313      	orrs	r3, r2
 8002be0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002be2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002be6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be8:	4b19      	ldr	r3, [pc, #100]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a18      	ldr	r2, [pc, #96]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7ff f99e 	bl	8001f34 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7ff f99a 	bl	8001f34 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e057      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x478>
 8002c1a:	e04f      	b.n	8002cbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c28:	f7ff f984 	bl	8001f34 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c30:	f7ff f980 	bl	8001f34 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e03d      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f0      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4ac>
 8002c4e:	e035      	b.n	8002cbc <HAL_RCC_OscConfig+0x538>
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_RCC_OscConfig+0x544>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d121      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d11a      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c88:	4013      	ands	r3, r2
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	085b      	lsrs	r3, r3, #1
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800

08002ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d0      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 030f 	and.w	r3, r3, #15
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b67      	ldr	r3, [pc, #412]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	4965      	ldr	r1, [pc, #404]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b63      	ldr	r3, [pc, #396]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b8      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d44:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a52      	ldr	r2, [pc, #328]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b50      	ldr	r3, [pc, #320]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	494d      	ldr	r1, [pc, #308]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b47      	ldr	r3, [pc, #284]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e073      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4936      	ldr	r1, [pc, #216]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7ff f8b8 	bl	8001f34 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7ff f8b4 	bl	8001f34 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e053      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d210      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 020f 	bic.w	r2, r3, #15
 8002e06:	4922      	ldr	r1, [pc, #136]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b20      	ldr	r3, [pc, #128]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e032      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4916      	ldr	r1, [pc, #88]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490e      	ldr	r1, [pc, #56]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f821 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490a      	ldr	r1, [pc, #40]	@ (8002e98 <HAL_RCC_ClockConfig+0x1cc>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a09      	ldr	r2, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1d0>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1d4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ff52 	bl	8001d28 <HAL_InitTick>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023c00 	.word	0x40023c00
 8002e94:	40023800 	.word	0x40023800
 8002e98:	08005638 	.word	0x08005638
 8002e9c:	20000034 	.word	0x20000034
 8002ea0:	20000038 	.word	0x20000038

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b090      	sub	sp, #64	@ 0x40
 8002eaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ebc:	4b59      	ldr	r3, [pc, #356]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d00d      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	f200 80a1 	bhi.w	8003010 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed6:	e09b      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4b53      	ldr	r3, [pc, #332]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x184>)
 8002eda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002edc:	e09b      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ede:	4b53      	ldr	r3, [pc, #332]	@ (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ee0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002ee2:	e098      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002eee:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d028      	beq.n	8002f4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002efa:	4b4a      	ldr	r3, [pc, #296]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	099b      	lsrs	r3, r3, #6
 8002f00:	2200      	movs	r2, #0
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f10:	fb03 f201 	mul.w	r2, r3, r1
 8002f14:	2300      	movs	r3, #0
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a43      	ldr	r2, [pc, #268]	@ (800302c <HAL_RCC_GetSysClockFreq+0x188>)
 8002f1e:	fba0 1202 	umull	r1, r2, r0, r2
 8002f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f24:	460a      	mov	r2, r1
 8002f26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002f28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f2a:	4413      	add	r3, r2
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f30:	2200      	movs	r2, #0
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	61fa      	str	r2, [r7, #28]
 8002f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002f3e:	f7fd fda5 	bl	8000a8c <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4613      	mov	r3, r2
 8002f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4a:	e053      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4c:	4b35      	ldr	r3, [pc, #212]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	099b      	lsrs	r3, r3, #6
 8002f52:	2200      	movs	r2, #0
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	617a      	str	r2, [r7, #20]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002f5e:	f04f 0b00 	mov.w	fp, #0
 8002f62:	4652      	mov	r2, sl
 8002f64:	465b      	mov	r3, fp
 8002f66:	f04f 0000 	mov.w	r0, #0
 8002f6a:	f04f 0100 	mov.w	r1, #0
 8002f6e:	0159      	lsls	r1, r3, #5
 8002f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f74:	0150      	lsls	r0, r2, #5
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	ebb2 080a 	subs.w	r8, r2, sl
 8002f7e:	eb63 090b 	sbc.w	r9, r3, fp
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002f8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002f92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002f96:	ebb2 0408 	subs.w	r4, r2, r8
 8002f9a:	eb63 0509 	sbc.w	r5, r3, r9
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	00eb      	lsls	r3, r5, #3
 8002fa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fac:	00e2      	lsls	r2, r4, #3
 8002fae:	4614      	mov	r4, r2
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	eb14 030a 	adds.w	r3, r4, sl
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	eb45 030b 	adc.w	r3, r5, fp
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fca:	4629      	mov	r1, r5
 8002fcc:	028b      	lsls	r3, r1, #10
 8002fce:	4621      	mov	r1, r4
 8002fd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	028a      	lsls	r2, r1, #10
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	60fa      	str	r2, [r7, #12]
 8002fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fe8:	f7fd fd50 	bl	8000a8c <__aeabi_uldivmod>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	0c1b      	lsrs	r3, r3, #16
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	3301      	adds	r3, #1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003004:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <HAL_RCC_GetSysClockFreq+0x184>)
 8003012:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003018:	4618      	mov	r0, r3
 800301a:	3740      	adds	r7, #64	@ 0x40
 800301c:	46bd      	mov	sp, r7
 800301e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	00f42400 	.word	0x00f42400
 800302c:	017d7840 	.word	0x017d7840

08003030 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003034:	4b03      	ldr	r3, [pc, #12]	@ (8003044 <HAL_RCC_GetHCLKFreq+0x14>)
 8003036:	681b      	ldr	r3, [r3, #0]
}
 8003038:	4618      	mov	r0, r3
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20000034 	.word	0x20000034

08003048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800304c:	f7ff fff0 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003050:	4602      	mov	r2, r0
 8003052:	4b05      	ldr	r3, [pc, #20]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	0a9b      	lsrs	r3, r3, #10
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	4903      	ldr	r1, [pc, #12]	@ (800306c <HAL_RCC_GetPCLK1Freq+0x24>)
 800305e:	5ccb      	ldrb	r3, [r1, r3]
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40023800 	.word	0x40023800
 800306c:	08005648 	.word	0x08005648

08003070 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	220f      	movs	r2, #15
 800307e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003080:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003098:	4b0c      	ldr	r3, [pc, #48]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80030a4:	4b09      	ldr	r3, [pc, #36]	@ (80030cc <HAL_RCC_GetClockConfig+0x5c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80030b2:	4b07      	ldr	r3, [pc, #28]	@ (80030d0 <HAL_RCC_GetClockConfig+0x60>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 020f 	and.w	r2, r3, #15
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	601a      	str	r2, [r3, #0]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e09d      	b.n	8003222 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030f6:	d009      	beq.n	800310c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	61da      	str	r2, [r3, #28]
 80030fe:	e005      	b.n	800310c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d106      	bne.n	800312c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7fe fd0a 	bl	8001b40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003142:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800314c:	d902      	bls.n	8003154 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e002      	b.n	800315a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003158:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003162:	d007      	beq.n	8003174 <HAL_SPI_Init+0xa0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	69db      	ldr	r3, [r3, #28]
 80031a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ac:	431a      	orrs	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b6:	ea42 0103 	orr.w	r1, r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0c1b      	lsrs	r3, r3, #16
 80031d0:	f003 0204 	and.w	r2, r3, #4
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031f0:	ea42 0103 	orr.w	r1, r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003210:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b082      	sub	sp, #8
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e049      	b.n	80032d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fe fd31 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f000 fc4b 	bl	8003b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80032d8:	b480      	push	{r7}
 80032da:	b085      	sub	sp, #20
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d001      	beq.n	80032f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04c      	b.n	800338a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a26      	ldr	r2, [pc, #152]	@ (8003398 <HAL_TIM_Base_Start+0xc0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d022      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330a:	d01d      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a22      	ldr	r2, [pc, #136]	@ (800339c <HAL_TIM_Base_Start+0xc4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d018      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <HAL_TIM_Base_Start+0xc8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_TIM_Base_Start+0xcc>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_TIM_Base_Start+0xd0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1c      	ldr	r2, [pc, #112]	@ (80033ac <HAL_TIM_Base_Start+0xd4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_TIM_Base_Start+0x70>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a1b      	ldr	r2, [pc, #108]	@ (80033b0 <HAL_TIM_Base_Start+0xd8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d115      	bne.n	8003374 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b19      	ldr	r3, [pc, #100]	@ (80033b4 <HAL_TIM_Base_Start+0xdc>)
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d015      	beq.n	8003386 <HAL_TIM_Base_Start+0xae>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d011      	beq.n	8003386 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	e008      	b.n	8003386 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	e000      	b.n	8003388 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003386:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40010000 	.word	0x40010000
 800339c:	40000400 	.word	0x40000400
 80033a0:	40000800 	.word	0x40000800
 80033a4:	40000c00 	.word	0x40000c00
 80033a8:	40010400 	.word	0x40010400
 80033ac:	40014000 	.word	0x40014000
 80033b0:	40001800 	.word	0x40001800
 80033b4:	00010007 	.word	0x00010007

080033b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d001      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e054      	b.n	800347a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a26      	ldr	r2, [pc, #152]	@ (8003488 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d022      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033fa:	d01d      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_TIM_Base_Start_IT+0xd4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d018      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a21      	ldr	r2, [pc, #132]	@ (8003490 <HAL_TIM_Base_Start_IT+0xd8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d013      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a1f      	ldr	r2, [pc, #124]	@ (8003494 <HAL_TIM_Base_Start_IT+0xdc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00e      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1e      	ldr	r2, [pc, #120]	@ (8003498 <HAL_TIM_Base_Start_IT+0xe0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d009      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1c      	ldr	r2, [pc, #112]	@ (800349c <HAL_TIM_Base_Start_IT+0xe4>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d004      	beq.n	8003438 <HAL_TIM_Base_Start_IT+0x80>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a1b      	ldr	r2, [pc, #108]	@ (80034a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d115      	bne.n	8003464 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_TIM_Base_Start_IT+0xec>)
 8003440:	4013      	ands	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b06      	cmp	r3, #6
 8003448:	d015      	beq.n	8003476 <HAL_TIM_Base_Start_IT+0xbe>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003450:	d011      	beq.n	8003476 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003462:	e008      	b.n	8003476 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e000      	b.n	8003478 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00
 8003498:	40010400 	.word	0x40010400
 800349c:	40014000 	.word	0x40014000
 80034a0:	40001800 	.word	0x40001800
 80034a4:	00010007 	.word	0x00010007

080034a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e08f      	b.n	80035dc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7fe fb79 	bl	8001bc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b3e      	ldr	r3, [pc, #248]	@ (80035e4 <HAL_TIM_Encoder_Init+0x13c>)
 80034ea:	400b      	ands	r3, r1
 80034ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f000 fb03 	bl	8003b04 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4b31      	ldr	r3, [pc, #196]	@ (80035e8 <HAL_TIM_Encoder_Init+0x140>)
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	4313      	orrs	r3, r2
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4b2b      	ldr	r3, [pc, #172]	@ (80035ec <HAL_TIM_Encoder_Init+0x144>)
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	4b2a      	ldr	r3, [pc, #168]	@ (80035f0 <HAL_TIM_Encoder_Init+0x148>)
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	4313      	orrs	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	011a      	lsls	r2, r3, #4
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	031b      	lsls	r3, r3, #12
 8003568:	4313      	orrs	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4313      	orrs	r3, r2
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	fffebff8 	.word	0xfffebff8
 80035e8:	fffffcfc 	.word	0xfffffcfc
 80035ec:	fffff3f3 	.word	0xfffff3f3
 80035f0:	ffff0f0f 	.word	0xffff0f0f

080035f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003604:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800360c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003614:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800361c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d110      	bne.n	8003646 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d102      	bne.n	8003630 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800362a:	7b7b      	ldrb	r3, [r7, #13]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e069      	b.n	8003708 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003644:	e031      	b.n	80036aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d110      	bne.n	800366e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003652:	7b3b      	ldrb	r3, [r7, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d001      	beq.n	800365c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e055      	b.n	8003708 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800366c:	e01d      	b.n	80036aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d108      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003674:	7bbb      	ldrb	r3, [r7, #14]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d105      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800367a:	7b7b      	ldrb	r3, [r7, #13]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d102      	bne.n	8003686 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003680:	7b3b      	ldrb	r3, [r7, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e03e      	b.n	8003708 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_TIM_Encoder_Start+0xc4>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	d008      	beq.n	80036c8 <HAL_TIM_Encoder_Start+0xd4>
 80036b6:	e00f      	b.n	80036d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	2100      	movs	r1, #0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fb65 	bl	8003d90 <TIM_CCxChannelCmd>
      break;
 80036c6:	e016      	b.n	80036f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	2104      	movs	r1, #4
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fb5d 	bl	8003d90 <TIM_CCxChannelCmd>
      break;
 80036d6:	e00e      	b.n	80036f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fb55 	bl	8003d90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	2104      	movs	r1, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fb4e 	bl	8003d90 <TIM_CCxChannelCmd>
      break;
 80036f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d020      	beq.n	8003774 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0202 	mvn.w	r2, #2
 8003744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f9b4 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003760:	e005      	b.n	800376e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9a6 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f9b7 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0204 	mvn.w	r2, #4
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f98e 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f980 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f991 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d020      	beq.n	800380c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0208 	mvn.w	r2, #8
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2204      	movs	r2, #4
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f968 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f95a 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f96b 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0210 	mvn.w	r2, #16
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2208      	movs	r2, #8
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f942 	bl	8003ac8 <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f934 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f945 	bl	8003adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0201 	mvn.w	r2, #1
 8003874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fe f8e2 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00c      	beq.n	80038aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80038a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fb31 	bl	8003f0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00c      	beq.n	80038ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80038c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fb29 	bl	8003f20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00c      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8ff 	bl	8003af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00c      	beq.n	8003916 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0220 	mvn.w	r2, #32
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 faf1 	bl	8003ef8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_TIM_ConfigClockSource+0x1c>
 8003938:	2302      	movs	r3, #2
 800393a:	e0b4      	b.n	8003aa6 <HAL_TIM_ConfigClockSource+0x186>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	4b56      	ldr	r3, [pc, #344]	@ (8003ab0 <HAL_TIM_ConfigClockSource+0x190>)
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003974:	d03e      	beq.n	80039f4 <HAL_TIM_ConfigClockSource+0xd4>
 8003976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397a:	f200 8087 	bhi.w	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 800397e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003982:	f000 8086 	beq.w	8003a92 <HAL_TIM_ConfigClockSource+0x172>
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398a:	d87f      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 800398c:	2b70      	cmp	r3, #112	@ 0x70
 800398e:	d01a      	beq.n	80039c6 <HAL_TIM_ConfigClockSource+0xa6>
 8003990:	2b70      	cmp	r3, #112	@ 0x70
 8003992:	d87b      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 8003994:	2b60      	cmp	r3, #96	@ 0x60
 8003996:	d050      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0x11a>
 8003998:	2b60      	cmp	r3, #96	@ 0x60
 800399a:	d877      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 800399c:	2b50      	cmp	r3, #80	@ 0x50
 800399e:	d03c      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xfa>
 80039a0:	2b50      	cmp	r3, #80	@ 0x50
 80039a2:	d873      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b40      	cmp	r3, #64	@ 0x40
 80039a6:	d058      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x13a>
 80039a8:	2b40      	cmp	r3, #64	@ 0x40
 80039aa:	d86f      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b30      	cmp	r3, #48	@ 0x30
 80039ae:	d064      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x15a>
 80039b0:	2b30      	cmp	r3, #48	@ 0x30
 80039b2:	d86b      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d060      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x15a>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d867      	bhi.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d05c      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x15a>
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d05a      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x15a>
 80039c4:	e062      	b.n	8003a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	f000 f9bb 	bl	8003d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80039e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	609a      	str	r2, [r3, #8]
      break;
 80039f2:	e04f      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a04:	f000 f9a4 	bl	8003d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a16:	609a      	str	r2, [r3, #8]
      break;
 8003a18:	e03c      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a26:	461a      	mov	r2, r3
 8003a28:	f000 f918 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2150      	movs	r1, #80	@ 0x50
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f971 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a38:	e02c      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a46:	461a      	mov	r2, r3
 8003a48:	f000 f937 	bl	8003cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2160      	movs	r1, #96	@ 0x60
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f961 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a58:	e01c      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a66:	461a      	mov	r2, r3
 8003a68:	f000 f8f8 	bl	8003c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2140      	movs	r1, #64	@ 0x40
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f951 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a78:	e00c      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f000 f948 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a8a:	e003      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a90:	e000      	b.n	8003a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	fffeff88 	.word	0xfffeff88

08003ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a46      	ldr	r2, [pc, #280]	@ (8003c30 <TIM_Base_SetConfig+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b22:	d00f      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a43      	ldr	r2, [pc, #268]	@ (8003c34 <TIM_Base_SetConfig+0x130>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00b      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a42      	ldr	r2, [pc, #264]	@ (8003c38 <TIM_Base_SetConfig+0x134>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a41      	ldr	r2, [pc, #260]	@ (8003c3c <TIM_Base_SetConfig+0x138>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d003      	beq.n	8003b44 <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a40      	ldr	r2, [pc, #256]	@ (8003c40 <TIM_Base_SetConfig+0x13c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d108      	bne.n	8003b56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a35      	ldr	r2, [pc, #212]	@ (8003c30 <TIM_Base_SetConfig+0x12c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d02b      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d027      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a32      	ldr	r2, [pc, #200]	@ (8003c34 <TIM_Base_SetConfig+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d023      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a31      	ldr	r2, [pc, #196]	@ (8003c38 <TIM_Base_SetConfig+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01f      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a30      	ldr	r2, [pc, #192]	@ (8003c3c <TIM_Base_SetConfig+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d01b      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2f      	ldr	r2, [pc, #188]	@ (8003c40 <TIM_Base_SetConfig+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d017      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2e      	ldr	r2, [pc, #184]	@ (8003c44 <TIM_Base_SetConfig+0x140>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2d      	ldr	r2, [pc, #180]	@ (8003c48 <TIM_Base_SetConfig+0x144>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00f      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2c      	ldr	r2, [pc, #176]	@ (8003c4c <TIM_Base_SetConfig+0x148>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d00b      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <TIM_Base_SetConfig+0x14c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d007      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8003c54 <TIM_Base_SetConfig+0x150>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d003      	beq.n	8003bb6 <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <TIM_Base_SetConfig+0x154>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d108      	bne.n	8003bc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a10      	ldr	r2, [pc, #64]	@ (8003c30 <TIM_Base_SetConfig+0x12c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d003      	beq.n	8003bfc <TIM_Base_SetConfig+0xf8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	4a12      	ldr	r2, [pc, #72]	@ (8003c40 <TIM_Base_SetConfig+0x13c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d103      	bne.n	8003c04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f023 0201 	bic.w	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]
  }
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40010400 	.word	0x40010400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	40001800 	.word	0x40001800
 8003c54:	40001c00 	.word	0x40001c00
 8003c58:	40002000 	.word	0x40002000

08003c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 030a 	bic.w	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	f023 0210 	bic.w	r2, r3, #16
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f043 0307 	orr.w	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1a      	ldr	r2, [r3, #32]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e06d      	b.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a30      	ldr	r2, [pc, #192]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d108      	bne.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a20      	ldr	r2, [pc, #128]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d022      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e66:	d01d      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d013      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	@ (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d10c      	bne.n	8003ebe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40010400 	.word	0x40010400
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003f38:	4904      	ldr	r1, [pc, #16]	@ (8003f4c <MX_FATFS_Init+0x18>)
 8003f3a:	4805      	ldr	r0, [pc, #20]	@ (8003f50 <MX_FATFS_Init+0x1c>)
 8003f3c:	f000 f8b0 	bl	80040a0 <FATFS_LinkDriver>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <MX_FATFS_Init+0x20>)
 8003f46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003f48:	bf00      	nop
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2000052c 	.word	0x2000052c
 8003f50:	20000040 	.word	0x20000040
 8003f54:	20000528 	.word	0x20000528

08003f58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003f62:	4b06      	ldr	r3, [pc, #24]	@ (8003f7c <USER_initialize+0x24>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003f68:	4b04      	ldr	r3, [pc, #16]	@ (8003f7c <USER_initialize+0x24>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	2000003d 	.word	0x2000003d

08003f80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	@ (8003fa4 <USER_status+0x24>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003f90:	4b04      	ldr	r3, [pc, #16]	@ (8003fa4 <USER_status+0x24>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	2000003d 	.word	0x2000003d

08003fa8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003fb8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003fd6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	603a      	str	r2, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
    return res;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	4613      	mov	r3, r2
 8004014:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800401e:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004020:	7a5b      	ldrb	r3, [r3, #9]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d131      	bne.n	800408c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004028:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 800402a:	7a5b      	ldrb	r3, [r3, #9]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004032:	2100      	movs	r1, #0
 8004034:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004038:	7a5b      	ldrb	r3, [r3, #9]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	4a17      	ldr	r2, [pc, #92]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004046:	4b15      	ldr	r3, [pc, #84]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004048:	7a5b      	ldrb	r3, [r3, #9]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004050:	4413      	add	r3, r2
 8004052:	79fa      	ldrb	r2, [r7, #7]
 8004054:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004056:	4b11      	ldr	r3, [pc, #68]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004058:	7a5b      	ldrb	r3, [r3, #9]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	b2d1      	uxtb	r1, r2
 8004060:	4a0e      	ldr	r2, [pc, #56]	@ (800409c <FATFS_LinkDriverEx+0x94>)
 8004062:	7251      	strb	r1, [r2, #9]
 8004064:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004066:	7dbb      	ldrb	r3, [r7, #22]
 8004068:	3330      	adds	r3, #48	@ 0x30
 800406a:	b2da      	uxtb	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	3301      	adds	r3, #1
 8004074:	223a      	movs	r2, #58	@ 0x3a
 8004076:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	3302      	adds	r3, #2
 800407c:	222f      	movs	r2, #47	@ 0x2f
 800407e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	3303      	adds	r3, #3
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20000530 	.word	0x20000530

080040a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffaa 	bl	8004008 <FATFS_LinkDriverEx>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4603      	mov	r3, r0
 80040c6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80040cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040d0:	2b84      	cmp	r3, #132	@ 0x84
 80040d2:	d005      	beq.n	80040e0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80040d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	3303      	adds	r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80040e0:	68fb      	ldr	r3, [r7, #12]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040f2:	f000 faef 	bl	80046d4 <vTaskStartScheduler>
  
  return osOK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}

080040fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fe:	b089      	sub	sp, #36	@ 0x24
 8004100:	af04      	add	r7, sp, #16
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d020      	beq.n	8004150 <osThreadCreate+0x54>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d01c      	beq.n	8004150 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685c      	ldr	r4, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691e      	ldr	r6, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004128:	4618      	mov	r0, r3
 800412a:	f7ff ffc8 	bl	80040be <makeFreeRtosPriority>
 800412e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004138:	9202      	str	r2, [sp, #8]
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	9100      	str	r1, [sp, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	4632      	mov	r2, r6
 8004142:	4629      	mov	r1, r5
 8004144:	4620      	mov	r0, r4
 8004146:	f000 f8ed 	bl	8004324 <xTaskCreateStatic>
 800414a:	4603      	mov	r3, r0
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	e01c      	b.n	800418a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685c      	ldr	r4, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800415c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ffaa 	bl	80040be <makeFreeRtosPriority>
 800416a:	4602      	mov	r2, r0
 800416c:	f107 030c 	add.w	r3, r7, #12
 8004170:	9301      	str	r3, [sp, #4]
 8004172:	9200      	str	r2, [sp, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4632      	mov	r2, r6
 8004178:	4629      	mov	r1, r5
 800417a:	4620      	mov	r0, r4
 800417c:	f000 f938 	bl	80043f0 <xTaskCreate>
 8004180:	4603      	mov	r3, r0
 8004182:	2b01      	cmp	r3, #1
 8004184:	d001      	beq.n	800418a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004194 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <osDelay+0x16>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	e000      	b.n	80041ac <osDelay+0x18>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fa59 	bl	8004664 <vTaskDelay>
  
  return osOK;
 80041b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f103 0208 	add.w	r2, r3, #8
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f103 0208 	add.w	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f103 0208 	add.w	r2, r3, #8
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800425e:	b480      	push	{r7}
 8004260:	b085      	sub	sp, #20
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004274:	d103      	bne.n	800427e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e00c      	b.n	8004298 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3308      	adds	r3, #8
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	e002      	b.n	800428c <vListInsert+0x2e>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d2f6      	bcs.n	8004286 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6892      	ldr	r2, [r2, #8]
 80042e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6852      	ldr	r2, [r2, #4]
 80042f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d103      	bne.n	8004304 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	1e5a      	subs	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08e      	sub	sp, #56	@ 0x38
 8004328:	af04      	add	r7, sp, #16
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10d      	bne.n	8004354 <xTaskCreateStatic+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	b672      	cpsid	i
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	b662      	cpsie	i
 800434c:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	e7fd      	b.n	8004350 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10d      	bne.n	8004376 <xTaskCreateStatic+0x52>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435e:	b672      	cpsid	i
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	b662      	cpsie	i
 800436e:	61fb      	str	r3, [r7, #28]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004376:	2354      	movs	r3, #84	@ 0x54
 8004378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b54      	cmp	r3, #84	@ 0x54
 800437e:	d00d      	beq.n	800439c <xTaskCreateStatic+0x78>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004384:	b672      	cpsid	i
 8004386:	f383 8811 	msr	BASEPRI, r3
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	f3bf 8f4f 	dsb	sy
 8004392:	b662      	cpsie	i
 8004394:	61bb      	str	r3, [r7, #24]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800439c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01e      	beq.n	80043e2 <xTaskCreateStatic+0xbe>
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01b      	beq.n	80043e2 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043bc:	2300      	movs	r3, #0
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	f107 0314 	add.w	r3, r7, #20
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f850 	bl	800447a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80043dc:	f000 f8d8 	bl	8004590 <prvAddNewTaskToReadyList>
 80043e0:	e001      	b.n	80043e6 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043e6:	697b      	ldr	r3, [r7, #20]
	}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3728      	adds	r7, #40	@ 0x28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	@ 0x30
 80043f4:	af04      	add	r7, sp, #16
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004400:	88fb      	ldrh	r3, [r7, #6]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f000 fec9 	bl	800519c <pvPortMalloc>
 800440a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00e      	beq.n	8004430 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004412:	2054      	movs	r0, #84	@ 0x54
 8004414:	f000 fec2 	bl	800519c <pvPortMalloc>
 8004418:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	631a      	str	r2, [r3, #48]	@ 0x30
 8004426:	e005      	b.n	8004434 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004428:	6978      	ldr	r0, [r7, #20]
 800442a:	f000 ff85 	bl	8005338 <vPortFree>
 800442e:	e001      	b.n	8004434 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	2300      	movs	r3, #0
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	9302      	str	r3, [sp, #8]
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f80e 	bl	800447a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800445e:	69f8      	ldr	r0, [r7, #28]
 8004460:	f000 f896 	bl	8004590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004464:	2301      	movs	r3, #1
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	e002      	b.n	8004470 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800446a:	f04f 33ff 	mov.w	r3, #4294967295
 800446e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004470:	69bb      	ldr	r3, [r7, #24]
	}
 8004472:	4618      	mov	r0, r3
 8004474:	3720      	adds	r7, #32
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b088      	sub	sp, #32
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004492:	440b      	add	r3, r1
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80044ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b0:	b672      	cpsid	i
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	b662      	cpsie	i
 80044c0:	617b      	str	r3, [r7, #20]
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	e7fd      	b.n	80044c4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d01f      	beq.n	800450e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ce:	2300      	movs	r3, #0
 80044d0:	61fb      	str	r3, [r7, #28]
 80044d2:	e012      	b.n	80044fa <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	7819      	ldrb	r1, [r3, #0]
 80044dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	3334      	adds	r3, #52	@ 0x34
 80044e4:	460a      	mov	r2, r1
 80044e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d006      	beq.n	8004502 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	3301      	adds	r3, #1
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d9e9      	bls.n	80044d4 <prvInitialiseNewTask+0x5a>
 8004500:	e000      	b.n	8004504 <prvInitialiseNewTask+0x8a>
			{
				break;
 8004502:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800450c:	e003      	b.n	8004516 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	2b06      	cmp	r3, #6
 800451a:	d901      	bls.n	8004520 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800451c:	2306      	movs	r3, #6
 800451e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004528:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	2200      	movs	r2, #0
 8004530:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	3304      	adds	r3, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fe60 	bl	80041fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	3318      	adds	r3, #24
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fe5b 	bl	80041fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800454c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454e:	f1c3 0207 	rsb	r2, r3, #7
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	2200      	movs	r2, #0
 8004560:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	68f9      	ldr	r1, [r7, #12]
 800456e:	69b8      	ldr	r0, [r7, #24]
 8004570:	f000 fc1c 	bl	8004dac <pxPortInitialiseStack>
 8004574:	4602      	mov	r2, r0
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800457a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004586:	bf00      	nop
 8004588:	3720      	adds	r7, #32
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004598:	f000 fd18 	bl	8004fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800459c:	4b2a      	ldr	r3, [pc, #168]	@ (8004648 <prvAddNewTaskToReadyList+0xb8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a29      	ldr	r2, [pc, #164]	@ (8004648 <prvAddNewTaskToReadyList+0xb8>)
 80045a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045a6:	4b29      	ldr	r3, [pc, #164]	@ (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ae:	4a27      	ldr	r2, [pc, #156]	@ (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045b4:	4b24      	ldr	r3, [pc, #144]	@ (8004648 <prvAddNewTaskToReadyList+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045bc:	f000 fad0 	bl	8004b60 <prvInitialiseTaskLists>
 80045c0:	e00d      	b.n	80045de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045c2:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <prvAddNewTaskToReadyList+0xc0>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ca:	4b20      	ldr	r3, [pc, #128]	@ (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d802      	bhi.n	80045de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045d8:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <prvAddNewTaskToReadyList+0xbc>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045de:	4b1d      	ldr	r3, [pc, #116]	@ (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	4b19      	ldr	r3, [pc, #100]	@ (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a15      	ldr	r2, [pc, #84]	@ (800465c <prvAddNewTaskToReadyList+0xcc>)
 8004608:	441a      	add	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7ff fe00 	bl	8004216 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004616:	f000 fd0f 	bl	8005038 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <prvAddNewTaskToReadyList+0xc0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00e      	beq.n	8004640 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <prvAddNewTaskToReadyList+0xbc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d207      	bcs.n	8004640 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004630:	4b0b      	ldr	r3, [pc, #44]	@ (8004660 <prvAddNewTaskToReadyList+0xd0>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	2000063c 	.word	0x2000063c
 800464c:	2000053c 	.word	0x2000053c
 8004650:	20000648 	.word	0x20000648
 8004654:	20000658 	.word	0x20000658
 8004658:	20000644 	.word	0x20000644
 800465c:	20000540 	.word	0x20000540
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d01a      	beq.n	80046ac <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <vTaskDelay+0x68>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00d      	beq.n	800469a <vTaskDelay+0x36>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	b672      	cpsid	i
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	b662      	cpsie	i
 8004692:	60bb      	str	r3, [r7, #8]
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800469a:	f000 f881 	bl	80047a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800469e:	2100      	movs	r1, #0
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 fb1d 	bl	8004ce0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046a6:	f000 f889 	bl	80047bc <xTaskResumeAll>
 80046aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d107      	bne.n	80046c2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80046b2:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <vTaskDelay+0x6c>)
 80046b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000664 	.word	0x20000664
 80046d0:	e000ed04 	.word	0xe000ed04

080046d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08a      	sub	sp, #40	@ 0x28
 80046d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046e2:	463a      	mov	r2, r7
 80046e4:	1d39      	adds	r1, r7, #4
 80046e6:	f107 0308 	add.w	r3, r7, #8
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fc fb64 	bl	8000db8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046f0:	6839      	ldr	r1, [r7, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	9202      	str	r2, [sp, #8]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	2300      	movs	r3, #0
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	2300      	movs	r3, #0
 8004700:	460a      	mov	r2, r1
 8004702:	4921      	ldr	r1, [pc, #132]	@ (8004788 <vTaskStartScheduler+0xb4>)
 8004704:	4821      	ldr	r0, [pc, #132]	@ (800478c <vTaskStartScheduler+0xb8>)
 8004706:	f7ff fe0d 	bl	8004324 <xTaskCreateStatic>
 800470a:	4603      	mov	r3, r0
 800470c:	4a20      	ldr	r2, [pc, #128]	@ (8004790 <vTaskStartScheduler+0xbc>)
 800470e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004710:	4b1f      	ldr	r3, [pc, #124]	@ (8004790 <vTaskStartScheduler+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d002      	beq.n	800471e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004718:	2301      	movs	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e001      	b.n	8004722 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d118      	bne.n	800475a <vTaskStartScheduler+0x86>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	b672      	cpsid	i
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	b662      	cpsie	i
 800473c:	613b      	str	r3, [r7, #16]
}
 800473e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004740:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <vTaskStartScheduler+0xc0>)
 8004742:	f04f 32ff 	mov.w	r2, #4294967295
 8004746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004748:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <vTaskStartScheduler+0xc4>)
 800474a:	2201      	movs	r2, #1
 800474c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800474e:	4b13      	ldr	r3, [pc, #76]	@ (800479c <vTaskStartScheduler+0xc8>)
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004754:	f000 fbbc 	bl	8004ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004758:	e011      	b.n	800477e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d10d      	bne.n	800477e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004766:	b672      	cpsid	i
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	b662      	cpsie	i
 8004776:	60fb      	str	r3, [r7, #12]
}
 8004778:	bf00      	nop
 800477a:	bf00      	nop
 800477c:	e7fd      	b.n	800477a <vTaskStartScheduler+0xa6>
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	08005630 	.word	0x08005630
 800478c:	08004b31 	.word	0x08004b31
 8004790:	20000660 	.word	0x20000660
 8004794:	2000065c 	.word	0x2000065c
 8004798:	20000648 	.word	0x20000648
 800479c:	20000640 	.word	0x20000640

080047a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047a4:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <vTaskSuspendAll+0x18>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	4a03      	ldr	r2, [pc, #12]	@ (80047b8 <vTaskSuspendAll+0x18>)
 80047ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80047ae:	bf00      	nop
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000664 	.word	0x20000664

080047bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ca:	4b43      	ldr	r3, [pc, #268]	@ (80048d8 <xTaskResumeAll+0x11c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10d      	bne.n	80047ee <xTaskResumeAll+0x32>
	__asm volatile
 80047d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d6:	b672      	cpsid	i
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	b662      	cpsie	i
 80047e6:	603b      	str	r3, [r7, #0]
}
 80047e8:	bf00      	nop
 80047ea:	bf00      	nop
 80047ec:	e7fd      	b.n	80047ea <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ee:	f000 fbed 	bl	8004fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f2:	4b39      	ldr	r3, [pc, #228]	@ (80048d8 <xTaskResumeAll+0x11c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4a37      	ldr	r2, [pc, #220]	@ (80048d8 <xTaskResumeAll+0x11c>)
 80047fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047fc:	4b36      	ldr	r3, [pc, #216]	@ (80048d8 <xTaskResumeAll+0x11c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d161      	bne.n	80048c8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004804:	4b35      	ldr	r3, [pc, #212]	@ (80048dc <xTaskResumeAll+0x120>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d05d      	beq.n	80048c8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800480c:	e02e      	b.n	800486c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b34      	ldr	r3, [pc, #208]	@ (80048e0 <xTaskResumeAll+0x124>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3318      	adds	r3, #24
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fd58 	bl	80042d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3304      	adds	r3, #4
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fd53 	bl	80042d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	2201      	movs	r2, #1
 8004830:	409a      	lsls	r2, r3
 8004832:	4b2c      	ldr	r3, [pc, #176]	@ (80048e4 <xTaskResumeAll+0x128>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	4a2a      	ldr	r2, [pc, #168]	@ (80048e4 <xTaskResumeAll+0x128>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4a27      	ldr	r2, [pc, #156]	@ (80048e8 <xTaskResumeAll+0x12c>)
 800484a:	441a      	add	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3304      	adds	r3, #4
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7ff fcdf 	bl	8004216 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485c:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <xTaskResumeAll+0x130>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <xTaskResumeAll+0x134>)
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486c:	4b1c      	ldr	r3, [pc, #112]	@ (80048e0 <xTaskResumeAll+0x124>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1cc      	bne.n	800480e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800487a:	f000 fa11 	bl	8004ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800487e:	4b1d      	ldr	r3, [pc, #116]	@ (80048f4 <xTaskResumeAll+0x138>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d010      	beq.n	80048ac <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800488a:	f000 f837 	bl	80048fc <xTaskIncrementTick>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004894:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <xTaskResumeAll+0x134>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3b01      	subs	r3, #1
 800489e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f1      	bne.n	800488a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80048a6:	4b13      	ldr	r3, [pc, #76]	@ (80048f4 <xTaskResumeAll+0x138>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048ac:	4b10      	ldr	r3, [pc, #64]	@ (80048f0 <xTaskResumeAll+0x134>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d009      	beq.n	80048c8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048b4:	2301      	movs	r3, #1
 80048b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048b8:	4b0f      	ldr	r3, [pc, #60]	@ (80048f8 <xTaskResumeAll+0x13c>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048c8:	f000 fbb6 	bl	8005038 <vPortExitCritical>

	return xAlreadyYielded;
 80048cc:	68bb      	ldr	r3, [r7, #8]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000664 	.word	0x20000664
 80048dc:	2000063c 	.word	0x2000063c
 80048e0:	200005fc 	.word	0x200005fc
 80048e4:	20000644 	.word	0x20000644
 80048e8:	20000540 	.word	0x20000540
 80048ec:	2000053c 	.word	0x2000053c
 80048f0:	20000650 	.word	0x20000650
 80048f4:	2000064c 	.word	0x2000064c
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004906:	4b50      	ldr	r3, [pc, #320]	@ (8004a48 <xTaskIncrementTick+0x14c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 808b 	bne.w	8004a26 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004910:	4b4e      	ldr	r3, [pc, #312]	@ (8004a4c <xTaskIncrementTick+0x150>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004918:	4a4c      	ldr	r2, [pc, #304]	@ (8004a4c <xTaskIncrementTick+0x150>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d123      	bne.n	800496c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004924:	4b4a      	ldr	r3, [pc, #296]	@ (8004a50 <xTaskIncrementTick+0x154>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <xTaskIncrementTick+0x4e>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	b672      	cpsid	i
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	b662      	cpsie	i
 8004942:	603b      	str	r3, [r7, #0]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <xTaskIncrementTick+0x4a>
 800494a:	4b41      	ldr	r3, [pc, #260]	@ (8004a50 <xTaskIncrementTick+0x154>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	4b40      	ldr	r3, [pc, #256]	@ (8004a54 <xTaskIncrementTick+0x158>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a3e      	ldr	r2, [pc, #248]	@ (8004a50 <xTaskIncrementTick+0x154>)
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	@ (8004a54 <xTaskIncrementTick+0x158>)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a58 <xTaskIncrementTick+0x15c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a3c      	ldr	r2, [pc, #240]	@ (8004a58 <xTaskIncrementTick+0x15c>)
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	f000 f99a 	bl	8004ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <xTaskIncrementTick+0x160>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	429a      	cmp	r2, r3
 8004974:	d348      	bcc.n	8004a08 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004976:	4b36      	ldr	r3, [pc, #216]	@ (8004a50 <xTaskIncrementTick+0x154>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d104      	bne.n	800498a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004980:	4b36      	ldr	r3, [pc, #216]	@ (8004a5c <xTaskIncrementTick+0x160>)
 8004982:	f04f 32ff 	mov.w	r2, #4294967295
 8004986:	601a      	str	r2, [r3, #0]
					break;
 8004988:	e03e      	b.n	8004a08 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498a:	4b31      	ldr	r3, [pc, #196]	@ (8004a50 <xTaskIncrementTick+0x154>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d203      	bcs.n	80049aa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049a2:	4a2e      	ldr	r2, [pc, #184]	@ (8004a5c <xTaskIncrementTick+0x160>)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049a8:	e02e      	b.n	8004a08 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7ff fc8e 	bl	80042d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d004      	beq.n	80049c6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	3318      	adds	r3, #24
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fc85 	bl	80042d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	2201      	movs	r2, #1
 80049cc:	409a      	lsls	r2, r3
 80049ce:	4b24      	ldr	r3, [pc, #144]	@ (8004a60 <xTaskIncrementTick+0x164>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	4a22      	ldr	r2, [pc, #136]	@ (8004a60 <xTaskIncrementTick+0x164>)
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004a64 <xTaskIncrementTick+0x168>)
 80049e6:	441a      	add	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7ff fc11 	bl	8004216 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a68 <xTaskIncrementTick+0x16c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3b9      	bcc.n	8004976 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004a02:	2301      	movs	r3, #1
 8004a04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a06:	e7b6      	b.n	8004976 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a08:	4b17      	ldr	r3, [pc, #92]	@ (8004a68 <xTaskIncrementTick+0x16c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a0e:	4915      	ldr	r1, [pc, #84]	@ (8004a64 <xTaskIncrementTick+0x168>)
 8004a10:	4613      	mov	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d907      	bls.n	8004a30 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e004      	b.n	8004a30 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a26:	4b11      	ldr	r3, [pc, #68]	@ (8004a6c <xTaskIncrementTick+0x170>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a6c <xTaskIncrementTick+0x170>)
 8004a2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a30:	4b0f      	ldr	r3, [pc, #60]	@ (8004a70 <xTaskIncrementTick+0x174>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a3c:	697b      	ldr	r3, [r7, #20]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3718      	adds	r7, #24
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	20000664 	.word	0x20000664
 8004a4c:	20000640 	.word	0x20000640
 8004a50:	200005f4 	.word	0x200005f4
 8004a54:	200005f8 	.word	0x200005f8
 8004a58:	20000654 	.word	0x20000654
 8004a5c:	2000065c 	.word	0x2000065c
 8004a60:	20000644 	.word	0x20000644
 8004a64:	20000540 	.word	0x20000540
 8004a68:	2000053c 	.word	0x2000053c
 8004a6c:	2000064c 	.word	0x2000064c
 8004a70:	20000650 	.word	0x20000650

08004a74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a7a:	4b28      	ldr	r3, [pc, #160]	@ (8004b1c <vTaskSwitchContext+0xa8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a82:	4b27      	ldr	r3, [pc, #156]	@ (8004b20 <vTaskSwitchContext+0xac>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a88:	e042      	b.n	8004b10 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a8a:	4b25      	ldr	r3, [pc, #148]	@ (8004b20 <vTaskSwitchContext+0xac>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a90:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <vTaskSwitchContext+0xb0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
 8004aa0:	f1c3 031f 	rsb	r3, r3, #31
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	4920      	ldr	r1, [pc, #128]	@ (8004b28 <vTaskSwitchContext+0xb4>)
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <vTaskSwitchContext+0x62>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004abe:	b672      	cpsid	i
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	b662      	cpsie	i
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <vTaskSwitchContext+0x5e>
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <vTaskSwitchContext+0xb4>)
 8004ae2:	4413      	add	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3308      	adds	r3, #8
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d104      	bne.n	8004b06 <vTaskSwitchContext+0x92>
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	4a07      	ldr	r2, [pc, #28]	@ (8004b2c <vTaskSwitchContext+0xb8>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000664 	.word	0x20000664
 8004b20:	20000650 	.word	0x20000650
 8004b24:	20000644 	.word	0x20000644
 8004b28:	20000540 	.word	0x20000540
 8004b2c:	2000053c 	.word	0x2000053c

08004b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b38:	f000 f852 	bl	8004be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b3c:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <prvIdleTask+0x28>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d9f9      	bls.n	8004b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <prvIdleTask+0x2c>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b54:	e7f0      	b.n	8004b38 <prvIdleTask+0x8>
 8004b56:	bf00      	nop
 8004b58:	20000540 	.word	0x20000540
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e00c      	b.n	8004b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4a12      	ldr	r2, [pc, #72]	@ (8004bc0 <prvInitialiseTaskLists+0x60>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb1e 	bl	80041bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d9ef      	bls.n	8004b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b8c:	480d      	ldr	r0, [pc, #52]	@ (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	f7ff fb15 	bl	80041bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b92:	480d      	ldr	r0, [pc, #52]	@ (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004b94:	f7ff fb12 	bl	80041bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b98:	480c      	ldr	r0, [pc, #48]	@ (8004bcc <prvInitialiseTaskLists+0x6c>)
 8004b9a:	f7ff fb0f 	bl	80041bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b9e:	480c      	ldr	r0, [pc, #48]	@ (8004bd0 <prvInitialiseTaskLists+0x70>)
 8004ba0:	f7ff fb0c 	bl	80041bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ba4:	480b      	ldr	r0, [pc, #44]	@ (8004bd4 <prvInitialiseTaskLists+0x74>)
 8004ba6:	f7ff fb09 	bl	80041bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd8 <prvInitialiseTaskLists+0x78>)
 8004bac:	4a05      	ldr	r2, [pc, #20]	@ (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bdc <prvInitialiseTaskLists+0x7c>)
 8004bb2:	4a05      	ldr	r2, [pc, #20]	@ (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000540 	.word	0x20000540
 8004bc4:	200005cc 	.word	0x200005cc
 8004bc8:	200005e0 	.word	0x200005e0
 8004bcc:	200005fc 	.word	0x200005fc
 8004bd0:	20000610 	.word	0x20000610
 8004bd4:	20000628 	.word	0x20000628
 8004bd8:	200005f4 	.word	0x200005f4
 8004bdc:	200005f8 	.word	0x200005f8

08004be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be6:	e019      	b.n	8004c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be8:	f000 f9f0 	bl	8004fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <prvCheckTasksWaitingTermination+0x50>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fb69 	bl	80042d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4a0b      	ldr	r2, [pc, #44]	@ (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c08:	4b0b      	ldr	r3, [pc, #44]	@ (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c12:	f000 fa11 	bl	8005038 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f810 	bl	8004c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e1      	bne.n	8004be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000610 	.word	0x20000610
 8004c34:	2000063c 	.word	0x2000063c
 8004c38:	20000624 	.word	0x20000624

08004c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fb70 	bl	8005338 <vPortFree>
				vPortFree( pxTCB );
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fb6d 	bl	8005338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c5e:	e01b      	b.n	8004c98 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d103      	bne.n	8004c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb64 	bl	8005338 <vPortFree>
	}
 8004c70:	e012      	b.n	8004c98 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d00d      	beq.n	8004c98 <prvDeleteTCB+0x5c>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c80:	b672      	cpsid	i
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	b662      	cpsie	i
 8004c90:	60fb      	str	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	e7fd      	b.n	8004c94 <prvDeleteTCB+0x58>
	}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb8:	e008      	b.n	8004ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cba:	4b07      	ldr	r3, [pc, #28]	@ (8004cd8 <prvResetNextTaskUnblockTime+0x38>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <prvResetNextTaskUnblockTime+0x3c>)
 8004cca:	6013      	str	r3, [r2, #0]
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	200005f4 	.word	0x200005f4
 8004cdc:	2000065c 	.word	0x2000065c

08004ce0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cea:	4b29      	ldr	r3, [pc, #164]	@ (8004d90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cf0:	4b28      	ldr	r3, [pc, #160]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff faea 	bl	80042d0 <uxListRemove>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10b      	bne.n	8004d1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d02:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	2201      	movs	r2, #1
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43da      	mvns	r2, r3
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4013      	ands	r3, r2
 8004d16:	4a20      	ldr	r2, [pc, #128]	@ (8004d98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d20:	d10a      	bne.n	8004d38 <prvAddCurrentTaskToDelayedList+0x58>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d28:	4b1a      	ldr	r3, [pc, #104]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4619      	mov	r1, r3
 8004d30:	481a      	ldr	r0, [pc, #104]	@ (8004d9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d32:	f7ff fa70 	bl	8004216 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d36:	e026      	b.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d40:	4b14      	ldr	r3, [pc, #80]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d209      	bcs.n	8004d64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	4b0f      	ldr	r3, [pc, #60]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7ff fa7e 	bl	800425e <vListInsert>
}
 8004d62:	e010      	b.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d64:	4b0f      	ldr	r3, [pc, #60]	@ (8004da4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b0a      	ldr	r3, [pc, #40]	@ (8004d94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7ff fa74 	bl	800425e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d76:	4b0c      	ldr	r3, [pc, #48]	@ (8004da8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d202      	bcs.n	8004d86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d80:	4a09      	ldr	r2, [pc, #36]	@ (8004da8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6013      	str	r3, [r2, #0]
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	20000640 	.word	0x20000640
 8004d94:	2000053c 	.word	0x2000053c
 8004d98:	20000644 	.word	0x20000644
 8004d9c:	20000628 	.word	0x20000628
 8004da0:	200005f8 	.word	0x200005f8
 8004da4:	200005f4 	.word	0x200005f4
 8004da8:	2000065c 	.word	0x2000065c

08004dac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3b04      	subs	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f023 0201 	bic.w	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8004e10 <pxPortInitialiseStack+0x64>)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	3b14      	subs	r3, #20
 8004de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b04      	subs	r3, #4
 8004df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f06f 0202 	mvn.w	r2, #2
 8004dfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3b20      	subs	r3, #32
 8004e00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e02:	68fb      	ldr	r3, [r7, #12]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr
 8004e10:	08004e15 	.word	0x08004e15

08004e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <prvTaskExitError+0x60>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d00d      	beq.n	8004e44 <prvTaskExitError+0x30>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	b672      	cpsid	i
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	b662      	cpsie	i
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <prvTaskExitError+0x2c>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e48:	b672      	cpsid	i
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	b662      	cpsie	i
 8004e58:	60bb      	str	r3, [r7, #8]
}
 8004e5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e5c:	bf00      	nop
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0fc      	beq.n	8004e5e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000054 	.word	0x20000054
	...

08004e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e80:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <pxCurrentTCBConst2>)
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	6808      	ldr	r0, [r1, #0]
 8004e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	f380 8809 	msr	PSP, r0
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f04f 0000 	mov.w	r0, #0
 8004e96:	f380 8811 	msr	BASEPRI, r0
 8004e9a:	4770      	bx	lr
 8004e9c:	f3af 8000 	nop.w

08004ea0 <pxCurrentTCBConst2>:
 8004ea0:	2000053c 	.word	0x2000053c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop

08004ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ea8:	4808      	ldr	r0, [pc, #32]	@ (8004ecc <prvPortStartFirstTask+0x24>)
 8004eaa:	6800      	ldr	r0, [r0, #0]
 8004eac:	6800      	ldr	r0, [r0, #0]
 8004eae:	f380 8808 	msr	MSP, r0
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8814 	msr	CONTROL, r0
 8004eba:	b662      	cpsie	i
 8004ebc:	b661      	cpsie	f
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	df00      	svc	0
 8004ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eca:	bf00      	nop
 8004ecc:	e000ed08 	.word	0xe000ed08

08004ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ed6:	4b37      	ldr	r3, [pc, #220]	@ (8004fb4 <xPortStartScheduler+0xe4>)
 8004ed8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	22ff      	movs	r2, #255	@ 0xff
 8004ee6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef0:	78fb      	ldrb	r3, [r7, #3]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <xPortStartScheduler+0xe8>)
 8004efc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f04:	e009      	b.n	8004f1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f06:	4b2d      	ldr	r3, [pc, #180]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f1a:	78fb      	ldrb	r3, [r7, #3]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b80      	cmp	r3, #128	@ 0x80
 8004f24:	d0ef      	beq.n	8004f06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f26:	4b25      	ldr	r3, [pc, #148]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f1c3 0307 	rsb	r3, r3, #7
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d00d      	beq.n	8004f4e <xPortStartScheduler+0x7e>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	60bb      	str	r3, [r7, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f58:	4b18      	ldr	r3, [pc, #96]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f60:	4a16      	ldr	r2, [pc, #88]	@ (8004fbc <xPortStartScheduler+0xec>)
 8004f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f6c:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <xPortStartScheduler+0xf0>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a13      	ldr	r2, [pc, #76]	@ (8004fc0 <xPortStartScheduler+0xf0>)
 8004f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f78:	4b11      	ldr	r3, [pc, #68]	@ (8004fc0 <xPortStartScheduler+0xf0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <xPortStartScheduler+0xf0>)
 8004f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f84:	f000 f8dc 	bl	8005140 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <xPortStartScheduler+0xf4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f8e:	f000 f8fb 	bl	8005188 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f92:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc8 <xPortStartScheduler+0xf8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <xPortStartScheduler+0xf8>)
 8004f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f9e:	f7ff ff83 	bl	8004ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa2:	f7ff fd67 	bl	8004a74 <vTaskSwitchContext>
	prvTaskExitError();
 8004fa6:	f7ff ff35 	bl	8004e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3710      	adds	r7, #16
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000e400 	.word	0xe000e400
 8004fb8:	20000668 	.word	0x20000668
 8004fbc:	2000066c 	.word	0x2000066c
 8004fc0:	e000ed20 	.word	0xe000ed20
 8004fc4:	20000054 	.word	0x20000054
 8004fc8:	e000ef34 	.word	0xe000ef34

08004fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	b672      	cpsid	i
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	b662      	cpsie	i
 8004fe6:	607b      	str	r3, [r7, #4]
}
 8004fe8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fea:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <vPortEnterCritical+0x64>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8005030 <vPortEnterCritical+0x64>)
 8004ff2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <vPortEnterCritical+0x64>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d112      	bne.n	8005022 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <vPortEnterCritical+0x68>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00d      	beq.n	8005022 <vPortEnterCritical+0x56>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500a:	b672      	cpsid	i
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	b662      	cpsie	i
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <vPortEnterCritical+0x52>
	}
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	20000054 	.word	0x20000054
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800503e:	4b13      	ldr	r3, [pc, #76]	@ (800508c <vPortExitCritical+0x54>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <vPortExitCritical+0x2a>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	b672      	cpsid	i
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	b662      	cpsie	i
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <vPortExitCritical+0x54>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3b01      	subs	r3, #1
 8005068:	4a08      	ldr	r2, [pc, #32]	@ (800508c <vPortExitCritical+0x54>)
 800506a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800506c:	4b07      	ldr	r3, [pc, #28]	@ (800508c <vPortExitCritical+0x54>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <vPortExitCritical+0x48>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800507e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	20000054 	.word	0x20000054

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f01e 0f10 	tst.w	lr, #16
 80050a0:	bf08      	it	eq
 80050a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050b4:	b672      	cpsid	i
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	f3bf 8f6f 	isb	sy
 80050c2:	b662      	cpsie	i
 80050c4:	f7ff fcd6 	bl	8004a74 <vTaskSwitchContext>
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f380 8811 	msr	BASEPRI, r0
 80050d0:	bc09      	pop	{r0, r3}
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f01e 0f10 	tst.w	lr, #16
 80050de:	bf08      	it	eq
 80050e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050e4:	f380 8809 	msr	PSP, r0
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop

080050f0 <pxCurrentTCBConst>:
 80050f0:	2000053c 	.word	0x2000053c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	b672      	cpsid	i
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	b662      	cpsie	i
 8005112:	607b      	str	r3, [r7, #4]
}
 8005114:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005116:	f7ff fbf1 	bl	80048fc <xTaskIncrementTick>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <SysTick_Handler+0x44>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	2300      	movs	r3, #0
 800512a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f383 8811 	msr	BASEPRI, r3
}
 8005132:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	e000ed04 	.word	0xe000ed04

08005140 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005144:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <vPortSetupTimerInterrupt+0x34>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800514a:	4b0b      	ldr	r3, [pc, #44]	@ (8005178 <vPortSetupTimerInterrupt+0x38>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005150:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <vPortSetupTimerInterrupt+0x3c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a0a      	ldr	r2, [pc, #40]	@ (8005180 <vPortSetupTimerInterrupt+0x40>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	4a09      	ldr	r2, [pc, #36]	@ (8005184 <vPortSetupTimerInterrupt+0x44>)
 800515e:	3b01      	subs	r3, #1
 8005160:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005162:	4b04      	ldr	r3, [pc, #16]	@ (8005174 <vPortSetupTimerInterrupt+0x34>)
 8005164:	2207      	movs	r2, #7
 8005166:	601a      	str	r2, [r3, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e010 	.word	0xe000e010
 8005178:	e000e018 	.word	0xe000e018
 800517c:	20000034 	.word	0x20000034
 8005180:	10624dd3 	.word	0x10624dd3
 8005184:	e000e014 	.word	0xe000e014

08005188 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005188:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005198 <vPortEnableVFP+0x10>
 800518c:	6801      	ldr	r1, [r0, #0]
 800518e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005192:	6001      	str	r1, [r0, #0]
 8005194:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005196:	bf00      	nop
 8005198:	e000ed88 	.word	0xe000ed88

0800519c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	@ 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051a8:	f7ff fafa 	bl	80047a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051ac:	4b5d      	ldr	r3, [pc, #372]	@ (8005324 <pvPortMalloc+0x188>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b4:	f000 f920 	bl	80053f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005328 <pvPortMalloc+0x18c>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f040 8094 	bne.w	80052ee <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d020      	beq.n	800520e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80051cc:	2208      	movs	r2, #8
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d017      	beq.n	800520e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f023 0307 	bic.w	r3, r3, #7
 80051e4:	3308      	adds	r3, #8
 80051e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00d      	beq.n	800520e <pvPortMalloc+0x72>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	b672      	cpsid	i
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	b662      	cpsie	i
 8005206:	617b      	str	r3, [r7, #20]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d06c      	beq.n	80052ee <pvPortMalloc+0x152>
 8005214:	4b45      	ldr	r3, [pc, #276]	@ (800532c <pvPortMalloc+0x190>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d867      	bhi.n	80052ee <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800521e:	4b44      	ldr	r3, [pc, #272]	@ (8005330 <pvPortMalloc+0x194>)
 8005220:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005222:	4b43      	ldr	r3, [pc, #268]	@ (8005330 <pvPortMalloc+0x194>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005228:	e004      	b.n	8005234 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d903      	bls.n	8005246 <pvPortMalloc+0xaa>
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f1      	bne.n	800522a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005246:	4b37      	ldr	r3, [pc, #220]	@ (8005324 <pvPortMalloc+0x188>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	429a      	cmp	r2, r3
 800524e:	d04e      	beq.n	80052ee <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	4413      	add	r3, r2
 8005258:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad2      	subs	r2, r2, r3
 800526a:	2308      	movs	r3, #8
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	429a      	cmp	r2, r3
 8005270:	d922      	bls.n	80052b8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00d      	beq.n	80052a0 <pvPortMalloc+0x104>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	b672      	cpsid	i
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	b662      	cpsie	i
 8005298:	613b      	str	r3, [r7, #16]
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	1ad2      	subs	r2, r2, r3
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f000 f902 	bl	80054bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052b8:	4b1c      	ldr	r3, [pc, #112]	@ (800532c <pvPortMalloc+0x190>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	4a1a      	ldr	r2, [pc, #104]	@ (800532c <pvPortMalloc+0x190>)
 80052c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052c6:	4b19      	ldr	r3, [pc, #100]	@ (800532c <pvPortMalloc+0x190>)
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005334 <pvPortMalloc+0x198>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d203      	bcs.n	80052da <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052d2:	4b16      	ldr	r3, [pc, #88]	@ (800532c <pvPortMalloc+0x190>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a17      	ldr	r2, [pc, #92]	@ (8005334 <pvPortMalloc+0x198>)
 80052d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <pvPortMalloc+0x18c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	431a      	orrs	r2, r3
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052ee:	f7ff fa65 	bl	80047bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00d      	beq.n	8005318 <pvPortMalloc+0x17c>
	__asm volatile
 80052fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005300:	b672      	cpsid	i
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	b662      	cpsie	i
 8005310:	60fb      	str	r3, [r7, #12]
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	e7fd      	b.n	8005314 <pvPortMalloc+0x178>
	return pvReturn;
 8005318:	69fb      	ldr	r3, [r7, #28]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3728      	adds	r7, #40	@ 0x28
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20004278 	.word	0x20004278
 8005328:	20004284 	.word	0x20004284
 800532c:	2000427c 	.word	0x2000427c
 8005330:	20004270 	.word	0x20004270
 8005334:	20004280 	.word	0x20004280

08005338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04e      	beq.n	80053e8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800534a:	2308      	movs	r3, #8
 800534c:	425b      	negs	r3, r3
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4413      	add	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b24      	ldr	r3, [pc, #144]	@ (80053f0 <vPortFree+0xb8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10d      	bne.n	8005382 <vPortFree+0x4a>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536a:	b672      	cpsid	i
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	b662      	cpsie	i
 800537a:	60fb      	str	r3, [r7, #12]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00d      	beq.n	80053a6 <vPortFree+0x6e>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	b672      	cpsid	i
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	b662      	cpsie	i
 800539e:	60bb      	str	r3, [r7, #8]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <vPortFree+0xb8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4013      	ands	r3, r2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d019      	beq.n	80053e8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d115      	bne.n	80053e8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	4b0b      	ldr	r3, [pc, #44]	@ (80053f0 <vPortFree+0xb8>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	43db      	mvns	r3, r3
 80053c6:	401a      	ands	r2, r3
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053cc:	f7ff f9e8 	bl	80047a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	4b07      	ldr	r3, [pc, #28]	@ (80053f4 <vPortFree+0xbc>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4413      	add	r3, r2
 80053da:	4a06      	ldr	r2, [pc, #24]	@ (80053f4 <vPortFree+0xbc>)
 80053dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053de:	6938      	ldr	r0, [r7, #16]
 80053e0:	f000 f86c 	bl	80054bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80053e4:	f7ff f9ea 	bl	80047bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20004284 	.word	0x20004284
 80053f4:	2000427c 	.word	0x2000427c

080053f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053fe:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005402:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005404:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <prvHeapInit+0xac>)
 8005406:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	3307      	adds	r3, #7
 8005416:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	4a1f      	ldr	r2, [pc, #124]	@ (80054a4 <prvHeapInit+0xac>)
 8005428:	4413      	add	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005430:	4a1d      	ldr	r2, [pc, #116]	@ (80054a8 <prvHeapInit+0xb0>)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005436:	4b1c      	ldr	r3, [pc, #112]	@ (80054a8 <prvHeapInit+0xb0>)
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4413      	add	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005444:	2208      	movs	r2, #8
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1a9b      	subs	r3, r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <prvHeapInit+0xb4>)
 8005458:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800545a:	4b14      	ldr	r3, [pc, #80]	@ (80054ac <prvHeapInit+0xb4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <prvHeapInit+0xb4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005478:	4b0c      	ldr	r3, [pc, #48]	@ (80054ac <prvHeapInit+0xb4>)
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	4a0a      	ldr	r2, [pc, #40]	@ (80054b0 <prvHeapInit+0xb8>)
 8005486:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4a09      	ldr	r2, [pc, #36]	@ (80054b4 <prvHeapInit+0xbc>)
 800548e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005490:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <prvHeapInit+0xc0>)
 8005492:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005496:	601a      	str	r2, [r3, #0]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	20000670 	.word	0x20000670
 80054a8:	20004270 	.word	0x20004270
 80054ac:	20004278 	.word	0x20004278
 80054b0:	20004280 	.word	0x20004280
 80054b4:	2000427c 	.word	0x2000427c
 80054b8:	20004284 	.word	0x20004284

080054bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c4:	4b28      	ldr	r3, [pc, #160]	@ (8005568 <prvInsertBlockIntoFreeList+0xac>)
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e002      	b.n	80054d0 <prvInsertBlockIntoFreeList+0x14>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d8f7      	bhi.n	80054ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	4413      	add	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d108      	bne.n	80054fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	441a      	add	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d118      	bne.n	8005544 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b15      	ldr	r3, [pc, #84]	@ (800556c <prvInsertBlockIntoFreeList+0xb0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d00d      	beq.n	800553a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	441a      	add	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	e008      	b.n	800554c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800553a:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <prvInsertBlockIntoFreeList+0xb0>)
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e003      	b.n	800554c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	429a      	cmp	r2, r3
 8005552:	d002      	beq.n	800555a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20004270 	.word	0x20004270
 800556c:	20004278 	.word	0x20004278

08005570 <memset>:
 8005570:	4402      	add	r2, r0
 8005572:	4603      	mov	r3, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	d100      	bne.n	800557a <memset+0xa>
 8005578:	4770      	bx	lr
 800557a:	f803 1b01 	strb.w	r1, [r3], #1
 800557e:	e7f9      	b.n	8005574 <memset+0x4>

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	@ (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	@ (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	@ (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	@ (80055c4 <__libc_init_array+0x44>)
 8005594:	f000 f818 	bl	80055c8 <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	08005658 	.word	0x08005658
 80055bc:	08005658 	.word	0x08005658
 80055c0:	08005658 	.word	0x08005658
 80055c4:	0800565c 	.word	0x0800565c

080055c8 <_init>:
 80055c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ca:	bf00      	nop
 80055cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ce:	bc08      	pop	{r3}
 80055d0:	469e      	mov	lr, r3
 80055d2:	4770      	bx	lr

080055d4 <_fini>:
 80055d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d6:	bf00      	nop
 80055d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055da:	bc08      	pop	{r3}
 80055dc:	469e      	mov	lr, r3
 80055de:	4770      	bx	lr
