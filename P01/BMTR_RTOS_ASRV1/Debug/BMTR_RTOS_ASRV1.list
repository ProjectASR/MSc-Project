
BMTR_RTOS_ASRV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a400  0800a400  0000c0b0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a400  0800a400  0000b400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a408  0800a408  0000c0b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a408  0800a408  0000b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a40c  0800a40c  0000b40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  0800a410  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c38  200000b0  0800a4c0  0000c0b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ce8  0800a4c0  0000cce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173cb  00000000  00000000  0000c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003971  00000000  00000000  000234ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00026e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010df  00000000  00000000  00028410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000060dc  00000000  00000000  000294ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c1d1  00000000  00000000  0002f5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc000  00000000  00000000  0004b79c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014779c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006184  00000000  00000000  001477e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a25c 	.word	0x0800a25c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800a25c 	.word	0x0800a25c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <vApplicationGetIdleTaskMemory+0x30>)
 8000e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	@ 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000cc 	.word	0x200000cc
 8000e98:	20000120 	.word	0x20000120

08000e9c <applyLowPassFilterVelocity>:
HAL_StatusTypeDef status;
uint16_t OutputVref = 5000;         // DAC output voltage reference value
uint16_t ENABLEmOTOR = 0;         // DAC output voltage reference value

// ────────────── Low-pass Filter Function ──────────────
float applyLowPassFilterVelocity(float X, float Y_old) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ea6:	edc7 0a00 	vstr	s1, [r7]
    // Apply the first-order low-pass filter formula
    float Y = Y_old + G * (X - Y_old);  // Filtered value
 8000eaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eae:	edd7 7a00 	vldr	s15, [r7]
 8000eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ee0 <applyLowPassFilterVelocity+0x44>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	ed97 7a00 	vldr	s14, [r7]
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc7 7a03 	vstr	s15, [r7, #12]
    return Y;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	ee07 3a90 	vmov	s15, r3
}
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	3f19999a 	.word	0x3f19999a

08000ee4 <applyLowPassFilterAcceleration>:
float applyLowPassFilterAcceleration(float X, float Y_old) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	edc7 0a00 	vstr	s1, [r7]
    float alpha = 0.05f;  // Adjust as needed (lower = smoother, higher = faster response)
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <applyLowPassFilterAcceleration+0x3c>)
 8000ef4:	60fb      	str	r3, [r7, #12]
    return Y_old + alpha * (X - Y_old);
 8000ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efa:	edd7 7a00 	vldr	s15, [r7]
 8000efe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f0a:	edd7 7a00 	vldr	s15, [r7]
 8000f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f12:	eeb0 0a67 	vmov.f32	s0, s15
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	3d4ccccd 	.word	0x3d4ccccd

08000f24 <ConfigureMotor01>:
// ────────────── Motor Control Functions ──────────────
void ConfigureMotor01(int Enable, int Clockwise, uint16_t dac_value) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, Clockwise);
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	2110      	movs	r1, #16
 8000f3a:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <ConfigureMotor01+0x40>)
 8000f3c:	f001 ff42 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, Enable);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	2120      	movs	r1, #32
 8000f48:	4806      	ldr	r0, [pc, #24]	@ (8000f64 <ConfigureMotor01+0x40>)
 8000f4a:	f001 ff3b 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <ConfigureMotor01+0x44>)
 8000f56:	f001 fd06 	bl	8002966 <HAL_DAC_SetValue>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020400 	.word	0x40020400
 8000f68:	20000320 	.word	0x20000320

08000f6c <ConfigureMotor02>:

void ConfigureMotor02(int Enable, int Clockwise, uint16_t dac_value) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	4613      	mov	r3, r2
 8000f78:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, Clockwise);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	2104      	movs	r1, #4
 8000f82:	480a      	ldr	r0, [pc, #40]	@ (8000fac <ConfigureMotor02+0x40>)
 8000f84:	f001 ff1e 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, Enable);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <ConfigureMotor02+0x40>)
 8000f92:	f001 ff17 	bl	8002dc4 <HAL_GPIO_WritePin>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	4804      	ldr	r0, [pc, #16]	@ (8000fb0 <ConfigureMotor02+0x44>)
 8000f9e:	f001 fce2 	bl	8002966 <HAL_DAC_SetValue>
}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	20000320 	.word	0x20000320

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b5b0      	push	{r4, r5, r7, lr}
 8000fb6:	b08e      	sub	sp, #56	@ 0x38
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fba:	f001 f819 	bl	8001ff0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f001 fad2 	bl	8002566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f85b 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fa53 	bl	8001470 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fca:	f000 f92f 	bl	800122c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000fce:	f000 f9d5 	bl	800137c <MX_TIM4_Init>
  MX_TIM13_Init();
 8000fd2:	f000 fa29 	bl	8001428 <MX_TIM13_Init>
  MX_SPI4_Init();
 8000fd6:	f000 f8eb 	bl	80011b0 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000fda:	f003 fe91 	bl	8004d00 <MX_FATFS_Init>
  MX_DAC_Init();
 8000fde:	f000 f8b3 	bl	8001148 <MX_DAC_Init>
  MX_TIM2_Init();
 8000fe2:	f000 f97d 	bl	80012e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fe6:	213c      	movs	r1, #60	@ 0x3c
 8000fe8:	481c      	ldr	r0, [pc, #112]	@ (800105c <main+0xa8>)
 8000fea:	f003 f9e9 	bl	80043c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fee:	213c      	movs	r1, #60	@ 0x3c
 8000ff0:	481b      	ldr	r0, [pc, #108]	@ (8001060 <main+0xac>)
 8000ff2:	f003 f9e5 	bl	80043c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim2);
 8000ff6:	481b      	ldr	r0, [pc, #108]	@ (8001064 <main+0xb0>)
 8000ff8:	f003 f854 	bl	80040a4 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	481a      	ldr	r0, [pc, #104]	@ (8001068 <main+0xb4>)
 8001000:	f001 fc5a 	bl	80028b8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001004:	2110      	movs	r1, #16
 8001006:	4818      	ldr	r0, [pc, #96]	@ (8001068 <main+0xb4>)
 8001008:	f001 fc56 	bl	80028b8 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Record */
  osThreadDef(Record, StartDefaultTask, osPriorityNormal, 0, 128);
 800100c:	4b17      	ldr	r3, [pc, #92]	@ (800106c <main+0xb8>)
 800100e:	f107 041c 	add.w	r4, r7, #28
 8001012:	461d      	mov	r5, r3
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecordHandle = osThreadCreate(osThread(Record), NULL);
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fa12 	bl	8007450 <osThreadCreate>
 800102c:	4603      	mov	r3, r0
 800102e:	4a10      	ldr	r2, [pc, #64]	@ (8001070 <main+0xbc>)
 8001030:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainController */
  osThreadDef(MainController, StartTask02, osPriorityRealtime, 0, 128);
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <main+0xc0>)
 8001034:	463c      	mov	r4, r7
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainControllerHandle = osThreadCreate(osThread(MainController), NULL);
 8001044:	463b      	mov	r3, r7
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f006 fa01 	bl	8007450 <osThreadCreate>
 800104e:	4603      	mov	r3, r0
 8001050:	4a09      	ldr	r2, [pc, #36]	@ (8001078 <main+0xc4>)
 8001052:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001054:	f006 f9f5 	bl	8007442 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <main+0xa4>
 800105c:	20000430 	.word	0x20000430
 8001060:	20000398 	.word	0x20000398
 8001064:	200003e4 	.word	0x200003e4
 8001068:	20000320 	.word	0x20000320
 800106c:	0800a27c 	.word	0x0800a27c
 8001070:	200004c8 	.word	0x200004c8
 8001074:	0800a2a8 	.word	0x0800a2a8
 8001078:	200004cc 	.word	0x200004cc

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	@ 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0320 	add.w	r3, r7, #32
 8001086:	2230      	movs	r2, #48	@ 0x30
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f008 fc68 	bl	8009960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a0:	4b27      	ldr	r3, [pc, #156]	@ (8001140 <SystemClock_Config+0xc4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <SystemClock_Config+0xc4>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ac:	4b24      	ldr	r3, [pc, #144]	@ (8001140 <SystemClock_Config+0xc4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010b8:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <SystemClock_Config+0xc8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80010c0:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <SystemClock_Config+0xc8>)
 80010c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001144 <SystemClock_Config+0xc8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010e8:	2319      	movs	r3, #25
 80010ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010ec:	2390      	movs	r3, #144	@ 0x90
 80010ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f0:	2302      	movs	r3, #2
 80010f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010f4:	2302      	movs	r3, #2
 80010f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 fe7b 	bl	8002df8 <HAL_RCC_OscConfig>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001108:	f000 ffb0 	bl	800206c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001110:	2302      	movs	r3, #2
 8001112:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2102      	movs	r1, #2
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f909 	bl	8003340 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001134:	f000 ff9a 	bl	800206c <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	@ 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001156:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_DAC_Init+0x60>)
 8001158:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <MX_DAC_Init+0x64>)
 800115a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800115c:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <MX_DAC_Init+0x60>)
 800115e:	f001 fb89 	bl	8002874 <HAL_DAC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001168:	f000 ff80 	bl	800206c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <MX_DAC_Init+0x60>)
 800117c:	f001 fc1d 	bl	80029ba <HAL_DAC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001186:	f000 ff71 	bl	800206c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800118a:	463b      	mov	r3, r7
 800118c:	2210      	movs	r2, #16
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_DAC_Init+0x60>)
 8001192:	f001 fc12 	bl	80029ba <HAL_DAC_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 ff66 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000320 	.word	0x20000320
 80011ac:	40007400 	.word	0x40007400

080011b0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001228 <MX_SPI4_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011c0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011ce:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80011dc:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011e6:	2228      	movs	r2, #40	@ 0x28
 80011e8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_SPI4_Init+0x74>)
 80011fe:	2207      	movs	r2, #7
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_SPI4_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_SPI4_Init+0x74>)
 800120a:	2208      	movs	r2, #8
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_SPI4_Init+0x74>)
 8001210:	f002 fa9a 	bl	8003748 <HAL_SPI_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 ff27 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000334 	.word	0x20000334
 8001228:	40013400 	.word	0x40013400

0800122c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2224      	movs	r2, #36	@ 0x24
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f008 fb90 	bl	8009960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124a:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <MX_TIM1_Init+0xac>)
 800124c:	4a23      	ldr	r2, [pc, #140]	@ (80012dc <MX_TIM1_Init+0xb0>)
 800124e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001250:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <MX_TIM1_Init+0xac>)
 8001252:	2200      	movs	r2, #0
 8001254:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b20      	ldr	r3, [pc, #128]	@ (80012d8 <MX_TIM1_Init+0xac>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800125c:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_TIM1_Init+0xac>)
 800125e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_TIM1_Init+0xac>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126a:	4b1b      	ldr	r3, [pc, #108]	@ (80012d8 <MX_TIM1_Init+0xac>)
 800126c:	2200      	movs	r2, #0
 800126e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_TIM1_Init+0xac>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001276:	2303      	movs	r3, #3
 8001278:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800127a:	2302      	movs	r3, #2
 800127c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127e:	2301      	movs	r3, #1
 8001280:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001286:	2304      	movs	r3, #4
 8001288:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800128a:	2302      	movs	r3, #2
 800128c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128e:	2301      	movs	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8001296:	2304      	movs	r3, #4
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4619      	mov	r1, r3
 80012a0:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM1_Init+0xac>)
 80012a2:	f002 ffe7 	bl	8004274 <HAL_TIM_Encoder_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 fede 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_TIM1_Init+0xac>)
 80012c2:	f003 fc71 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80012cc:	f000 fece 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3730      	adds	r7, #48	@ 0x30
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000398 	.word	0x20000398
 80012dc:	40010000 	.word	0x40010000

080012e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012e6:	f107 0310 	add.w	r3, r7, #16
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001300:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001304:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 8001306:	4b1c      	ldr	r3, [pc, #112]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001308:	f240 1267 	movw	r2, #359	@ 0x167
 800130c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001316:	f04f 32ff 	mov.w	r2, #4294967295
 800131a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <MX_TIM2_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001328:	4813      	ldr	r0, [pc, #76]	@ (8001378 <MX_TIM2_Init+0x98>)
 800132a:	f002 fe63 	bl	8003ff4 <HAL_TIM_Base_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001334:	f000 fe9a 	bl	800206c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001338:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800133c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001346:	f003 f9d1 	bl	80046ec <HAL_TIM_ConfigClockSource>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001350:	f000 fe8c 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	@ (8001378 <MX_TIM2_Init+0x98>)
 8001362:	f003 fc21 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800136c:	f000 fe7e 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200003e4 	.word	0x200003e4

0800137c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	@ 0x30
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f008 fae8 	bl	8009960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_TIM4_Init+0xa4>)
 800139c:	4a21      	ldr	r2, [pc, #132]	@ (8001424 <MX_TIM4_Init+0xa8>)
 800139e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c0:	2303      	movs	r3, #3
 80013c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013c4:	2302      	movs	r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 80013d0:	2308      	movs	r3, #8
 80013d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	@ (8001420 <MX_TIM4_Init+0xa4>)
 80013ec:	f002 ff42 	bl	8004274 <HAL_TIM_Encoder_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013f6:	f000 fe39 	bl	800206c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	@ (8001420 <MX_TIM4_Init+0xa4>)
 8001408:	f003 fbce 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001412:	f000 fe2b 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	@ 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000430 	.word	0x20000430
 8001424:	40000800 	.word	0x40000800

08001428 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_TIM13_Init+0x40>)
 800142e:	4a0f      	ldr	r2, [pc, #60]	@ (800146c <MX_TIM13_Init+0x44>)
 8001430:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 14400-1;
 8001432:	4b0d      	ldr	r3, [pc, #52]	@ (8001468 <MX_TIM13_Init+0x40>)
 8001434:	f643 023f 	movw	r2, #14399	@ 0x383f
 8001438:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143a:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <MX_TIM13_Init+0x40>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001440:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_TIM13_Init+0x40>)
 8001442:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001446:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_TIM13_Init+0x40>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_TIM13_Init+0x40>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_TIM13_Init+0x40>)
 8001456:	f002 fdcd 	bl	8003ff4 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001460:	f000 fe04 	bl	800206c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	2000047c 	.word	0x2000047c
 800146c:	40001c00 	.word	0x40001c00

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001486:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <MX_GPIO_Init+0x148>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	4a4b      	ldr	r2, [pc, #300]	@ (80015b8 <MX_GPIO_Init+0x148>)
 800148c:	f043 0310 	orr.w	r3, r3, #16
 8001490:	6313      	str	r3, [r2, #48]	@ 0x30
 8001492:	4b49      	ldr	r3, [pc, #292]	@ (80015b8 <MX_GPIO_Init+0x148>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	f003 0310 	and.w	r3, r3, #16
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b46      	ldr	r3, [pc, #280]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a45      	ldr	r2, [pc, #276]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b3a      	ldr	r3, [pc, #232]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a39      	ldr	r2, [pc, #228]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b37      	ldr	r3, [pc, #220]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a33      	ldr	r2, [pc, #204]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b31      	ldr	r3, [pc, #196]	@ (80015b8 <MX_GPIO_Init+0x148>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fe:	4b2e      	ldr	r3, [pc, #184]	@ (80015b8 <MX_GPIO_Init+0x148>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a2d      	ldr	r2, [pc, #180]	@ (80015b8 <MX_GPIO_Init+0x148>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_GPIO_Init+0x148>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	2103      	movs	r1, #3
 800151a:	4828      	ldr	r0, [pc, #160]	@ (80015bc <MX_GPIO_Init+0x14c>)
 800151c:	f001 fc52 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	210c      	movs	r1, #12
 8001524:	4826      	ldr	r0, [pc, #152]	@ (80015c0 <MX_GPIO_Init+0x150>)
 8001526:	f001 fc4d 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	2131      	movs	r1, #49	@ 0x31
 800152e:	4825      	ldr	r0, [pc, #148]	@ (80015c4 <MX_GPIO_Init+0x154>)
 8001530:	f001 fc48 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2103      	movs	r1, #3
 8001538:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <MX_GPIO_Init+0x158>)
 800153a:	f001 fc43 	bl	8002dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800153e:	2303      	movs	r3, #3
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4819      	ldr	r0, [pc, #100]	@ (80015bc <MX_GPIO_Init+0x14c>)
 8001556:	f001 fa89 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155a:	230c      	movs	r3, #12
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	2301      	movs	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	4813      	ldr	r0, [pc, #76]	@ (80015c0 <MX_GPIO_Init+0x150>)
 8001572:	f001 fa7b 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8001576:	2331      	movs	r3, #49	@ 0x31
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <MX_GPIO_Init+0x154>)
 800158e:	f001 fa6d 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001592:	2303      	movs	r3, #3
 8001594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	4619      	mov	r1, r3
 80015a8:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_GPIO_Init+0x158>)
 80015aa:	f001 fa5f 	bl	8002a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40021400 	.word	0x40021400
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	00000000 	.word	0x00000000

080015d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /*********************************************************
	   *                  Main Task Counter Update              *
	   *********************************************************/
	  MainTaskCount++;
 80015d8:	4bb9      	ldr	r3, [pc, #740]	@ (80018c0 <StartDefaultTask+0x2f0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4ab8      	ldr	r2, [pc, #736]	@ (80018c0 <StartDefaultTask+0x2f0>)
 80015e0:	6013      	str	r3, [r2, #0]
	  time_start = __HAL_TIM_GET_COUNTER(&htim2);
 80015e2:	4bb8      	ldr	r3, [pc, #736]	@ (80018c4 <StartDefaultTask+0x2f4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e8:	4ab7      	ldr	r2, [pc, #732]	@ (80018c8 <StartDefaultTask+0x2f8>)
 80015ea:	6013      	str	r3, [r2, #0]
	  MainloopCount++;
 80015ec:	4bb7      	ldr	r3, [pc, #732]	@ (80018cc <StartDefaultTask+0x2fc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4ab6      	ldr	r2, [pc, #728]	@ (80018cc <StartDefaultTask+0x2fc>)
 80015f4:	6013      	str	r3, [r2, #0]
	  if (time_interval == 0) time_interval = 1;  // Safety check (avoid division by zero)
 80015f6:	4bb6      	ldr	r3, [pc, #728]	@ (80018d0 <StartDefaultTask+0x300>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <StartDefaultTask+0x34>
 80015fe:	4bb4      	ldr	r3, [pc, #720]	@ (80018d0 <StartDefaultTask+0x300>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
	  dt_s = (float)time_interval * 1e-6f;
 8001604:	4bb2      	ldr	r3, [pc, #712]	@ (80018d0 <StartDefaultTask+0x300>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001610:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 80018d4 <StartDefaultTask+0x304>
 8001614:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001618:	4baf      	ldr	r3, [pc, #700]	@ (80018d8 <StartDefaultTask+0x308>)
 800161a:	edc3 7a00 	vstr	s15, [r3]
	  /*********************************************************
	   *                Read Encoder Tick Counts               *
	   *********************************************************/
	  EncoderUpdated = 0;
 800161e:	4baf      	ldr	r3, [pc, #700]	@ (80018dc <StartDefaultTask+0x30c>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
      if(encoder_ticks>CPR){
 8001624:	4bae      	ldr	r3, [pc, #696]	@ (80018e0 <StartDefaultTask+0x310>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 800162c:	d907      	bls.n	800163e <StartDefaultTask+0x6e>
    	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 800162e:	4bad      	ldr	r3, [pc, #692]	@ (80018e4 <StartDefaultTask+0x314>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	@ 0x24
    	  theta1_prev=0;
 8001636:	4bac      	ldr	r3, [pc, #688]	@ (80018e8 <StartDefaultTask+0x318>)
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
      }
      if(encoder_ticks2>CPR){
 800163e:	4bab      	ldr	r3, [pc, #684]	@ (80018ec <StartDefaultTask+0x31c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f5b3 4f50 	cmp.w	r3, #53248	@ 0xd000
 8001646:	d907      	bls.n	8001658 <StartDefaultTask+0x88>
    	  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001648:	4ba9      	ldr	r3, [pc, #676]	@ (80018f0 <StartDefaultTask+0x320>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	@ 0x24
    	  theta2_prev = 0;
 8001650:	4ba8      	ldr	r3, [pc, #672]	@ (80018f4 <StartDefaultTask+0x324>)
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
      }
	  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);   // Encoder 1
 8001658:	4ba2      	ldr	r3, [pc, #648]	@ (80018e4 <StartDefaultTask+0x314>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165e:	4aa0      	ldr	r2, [pc, #640]	@ (80018e0 <StartDefaultTask+0x310>)
 8001660:	6013      	str	r3, [r2, #0]
	  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);  // Encoder 2
 8001662:	4ba3      	ldr	r3, [pc, #652]	@ (80018f0 <StartDefaultTask+0x320>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001668:	4aa0      	ldr	r2, [pc, #640]	@ (80018ec <StartDefaultTask+0x31c>)
 800166a:	6013      	str	r3, [r2, #0]
	  EncoderUpdated = 1;
 800166c:	4b9b      	ldr	r3, [pc, #620]	@ (80018dc <StartDefaultTask+0x30c>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
	  /*********************************************************
	   *                 Time from Start (in sec)              *
	   *********************************************************/
	  secondFromStart = __HAL_TIM_GET_COUNTER(&htim2) / 100000;
 8001672:	4b94      	ldr	r3, [pc, #592]	@ (80018c4 <StartDefaultTask+0x2f4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	4a9f      	ldr	r2, [pc, #636]	@ (80018f8 <StartDefaultTask+0x328>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	09db      	lsrs	r3, r3, #7
 8001682:	4a9e      	ldr	r2, [pc, #632]	@ (80018fc <StartDefaultTask+0x32c>)
 8001684:	6013      	str	r3, [r2, #0]

	  /*********************************************************
	   *        Compute Position, Velocity, Acceleration       *
	   *                    For Encoder 1                      *
	   *********************************************************/
	  theta1 = (float)(encoder_ticks) * 2.0f * M_PI / ((float)CPR);
 8001686:	4b96      	ldr	r3, [pc, #600]	@ (80018e0 <StartDefaultTask+0x310>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001696:	ee17 0a90 	vmov	r0, s15
 800169a:	f7fe ff75 	bl	8000588 <__aeabi_f2d>
 800169e:	a386      	add	r3, pc, #536	@ (adr r3, 80018b8 <StartDefaultTask+0x2e8>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7fe ffc8 	bl	8000638 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b92      	ldr	r3, [pc, #584]	@ (8001900 <StartDefaultTask+0x330>)
 80016b6:	f7ff f8e9 	bl	800088c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff f9eb 	bl	8000a9c <__aeabi_d2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001904 <StartDefaultTask+0x334>)
 80016ca:	6013      	str	r3, [r2, #0]
	  velocity1 = (theta1 - theta1_prev)* 1000000 / time_interval;
 80016cc:	4b8d      	ldr	r3, [pc, #564]	@ (8001904 <StartDefaultTask+0x334>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	4b85      	ldr	r3, [pc, #532]	@ (80018e8 <StartDefaultTask+0x318>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016dc:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001908 <StartDefaultTask+0x338>
 80016e0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016e4:	4b7a      	ldr	r3, [pc, #488]	@ (80018d0 <StartDefaultTask+0x300>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f4:	4b85      	ldr	r3, [pc, #532]	@ (800190c <StartDefaultTask+0x33c>)
 80016f6:	edc3 7a00 	vstr	s15, [r3]
	  acceleration1 = (velocity1 - velocity1_prev) * 1000000 / time_interval;
 80016fa:	4b84      	ldr	r3, [pc, #528]	@ (800190c <StartDefaultTask+0x33c>)
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	4b83      	ldr	r3, [pc, #524]	@ (8001910 <StartDefaultTask+0x340>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170a:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001908 <StartDefaultTask+0x338>
 800170e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001712:	4b6f      	ldr	r3, [pc, #444]	@ (80018d0 <StartDefaultTask+0x300>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800171e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001722:	4b7c      	ldr	r3, [pc, #496]	@ (8001914 <StartDefaultTask+0x344>)
 8001724:	edc3 7a00 	vstr	s15, [r3]
	  velocity1Filtered = applyLowPassFilterVelocity(velocity1, velocity1_prev);  // Filter velocity
 8001728:	4b78      	ldr	r3, [pc, #480]	@ (800190c <StartDefaultTask+0x33c>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	4b78      	ldr	r3, [pc, #480]	@ (8001910 <StartDefaultTask+0x340>)
 8001730:	ed93 7a00 	vldr	s14, [r3]
 8001734:	eef0 0a47 	vmov.f32	s1, s14
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f7ff fbae 	bl	8000e9c <applyLowPassFilterVelocity>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	4b74      	ldr	r3, [pc, #464]	@ (8001918 <StartDefaultTask+0x348>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
	  theta1_prev = theta1;
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <StartDefaultTask+0x334>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a66      	ldr	r2, [pc, #408]	@ (80018e8 <StartDefaultTask+0x318>)
 8001750:	6013      	str	r3, [r2, #0]
	  velocity1_prev = velocity1;
 8001752:	4b6e      	ldr	r3, [pc, #440]	@ (800190c <StartDefaultTask+0x33c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a6e      	ldr	r2, [pc, #440]	@ (8001910 <StartDefaultTask+0x340>)
 8001758:	6013      	str	r3, [r2, #0]
	  acceleration1 = applyLowPassFilterAcceleration(acceleration1, acceleration1_prev);
 800175a:	4b6e      	ldr	r3, [pc, #440]	@ (8001914 <StartDefaultTask+0x344>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	4b6e      	ldr	r3, [pc, #440]	@ (800191c <StartDefaultTask+0x34c>)
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	eef0 0a47 	vmov.f32	s1, s14
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	f7ff fbb9 	bl	8000ee4 <applyLowPassFilterAcceleration>
 8001772:	eef0 7a40 	vmov.f32	s15, s0
 8001776:	4b67      	ldr	r3, [pc, #412]	@ (8001914 <StartDefaultTask+0x344>)
 8001778:	edc3 7a00 	vstr	s15, [r3]
	  acceleration1_prev = acceleration1;
 800177c:	4b65      	ldr	r3, [pc, #404]	@ (8001914 <StartDefaultTask+0x344>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a66      	ldr	r2, [pc, #408]	@ (800191c <StartDefaultTask+0x34c>)
 8001782:	6013      	str	r3, [r2, #0]
	  /*********************************************************
	   *        Compute Position, Velocity, Acceleration       *
	   *                    For Encoder 2                      *
	   *********************************************************/
	  theta2 = (float)(encoder_ticks2) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <StartDefaultTask+0x31c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001790:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001794:	ee17 0a90 	vmov	r0, s15
 8001798:	f7fe fef6 	bl	8000588 <__aeabi_f2d>
 800179c:	a346      	add	r3, pc, #280	@ (adr r3, 80018b8 <StartDefaultTask+0x2e8>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe ff49 	bl	8000638 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4614      	mov	r4, r2
 80017ac:	461d      	mov	r5, r3
 80017ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001920 <StartDefaultTask+0x350>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001924 <StartDefaultTask+0x354>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	ee17 0a90 	vmov	r0, s15
 80017c0:	f7fe fee2 	bl	8000588 <__aeabi_f2d>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7ff f85e 	bl	800088c <__aeabi_ddiv>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f960 	bl	8000a9c <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <StartDefaultTask+0x358>)
 80017e0:	6013      	str	r3, [r2, #0]
	  velocity2 = (theta2 - theta2_prev) * 1000000 / time_interval;
 80017e2:	4b51      	ldr	r3, [pc, #324]	@ (8001928 <StartDefaultTask+0x358>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <StartDefaultTask+0x324>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001908 <StartDefaultTask+0x338>
 80017f6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017fa:	4b35      	ldr	r3, [pc, #212]	@ (80018d0 <StartDefaultTask+0x300>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	4b48      	ldr	r3, [pc, #288]	@ (800192c <StartDefaultTask+0x35c>)
 800180c:	edc3 7a00 	vstr	s15, [r3]
	  acceleration2 = (velocity2 - velocity2_prev) * 1000000 / time_interval;
 8001810:	4b46      	ldr	r3, [pc, #280]	@ (800192c <StartDefaultTask+0x35c>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b46      	ldr	r3, [pc, #280]	@ (8001930 <StartDefaultTask+0x360>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001820:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001908 <StartDefaultTask+0x338>
 8001824:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <StartDefaultTask+0x300>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001838:	4b3e      	ldr	r3, [pc, #248]	@ (8001934 <StartDefaultTask+0x364>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
	  velocity2Filtered = applyLowPassFilterVelocity(velocity2, velocity2_prev);  // Filter velocity
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <StartDefaultTask+0x35c>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <StartDefaultTask+0x360>)
 8001846:	ed93 7a00 	vldr	s14, [r3]
 800184a:	eef0 0a47 	vmov.f32	s1, s14
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	f7ff fb23 	bl	8000e9c <applyLowPassFilterVelocity>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <StartDefaultTask+0x368>)
 800185c:	edc3 7a00 	vstr	s15, [r3]
	  theta2_prev = theta2;
 8001860:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <StartDefaultTask+0x358>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <StartDefaultTask+0x324>)
 8001866:	6013      	str	r3, [r2, #0]
	  velocity2_prev = velocity2;
 8001868:	4b30      	ldr	r3, [pc, #192]	@ (800192c <StartDefaultTask+0x35c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a30      	ldr	r2, [pc, #192]	@ (8001930 <StartDefaultTask+0x360>)
 800186e:	6013      	str	r3, [r2, #0]
	   *********************************************************/
	  // Compute commanded current


	  // Torque disturbance calculation
	  motor_torque = Icmd1 * Ktn1;
 8001870:	4b32      	ldr	r3, [pc, #200]	@ (800193c <StartDefaultTask+0x36c>)
 8001872:	ed93 7a00 	vldr	s14, [r3]
 8001876:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <StartDefaultTask+0x370>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <StartDefaultTask+0x374>)
 8001882:	edc3 7a00 	vstr	s15, [r3]
	  velocity_disturbance = velocity1 * Jn1 * Gdis1;
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <StartDefaultTask+0x33c>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	4b2e      	ldr	r3, [pc, #184]	@ (8001948 <StartDefaultTask+0x378>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001896:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <StartDefaultTask+0x37c>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001950 <StartDefaultTask+0x380>)
 80018a2:	edc3 7a00 	vstr	s15, [r3]
	  InputForFilterDOB = (motor_torque + velocity_disturbance);
 80018a6:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <StartDefaultTask+0x374>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	4b28      	ldr	r3, [pc, #160]	@ (8001950 <StartDefaultTask+0x380>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b6:	e04d      	b.n	8001954 <StartDefaultTask+0x384>
 80018b8:	54442d18 	.word	0x54442d18
 80018bc:	400921fb 	.word	0x400921fb
 80018c0:	200004d0 	.word	0x200004d0
 80018c4:	200003e4 	.word	0x200003e4
 80018c8:	200004ec 	.word	0x200004ec
 80018cc:	200004e0 	.word	0x200004e0
 80018d0:	20000004 	.word	0x20000004
 80018d4:	358637bd 	.word	0x358637bd
 80018d8:	20001dbc 	.word	0x20001dbc
 80018dc:	20001d28 	.word	0x20001d28
 80018e0:	200004d8 	.word	0x200004d8
 80018e4:	20000398 	.word	0x20000398
 80018e8:	20001d38 	.word	0x20001d38
 80018ec:	200004dc 	.word	0x200004dc
 80018f0:	20000430 	.word	0x20000430
 80018f4:	20001d3c 	.word	0x20001d3c
 80018f8:	0a7c5ac5 	.word	0x0a7c5ac5
 80018fc:	200004f4 	.word	0x200004f4
 8001900:	40ea0000 	.word	0x40ea0000
 8001904:	20001d30 	.word	0x20001d30
 8001908:	49742400 	.word	0x49742400
 800190c:	20001d40 	.word	0x20001d40
 8001910:	20001d48 	.word	0x20001d48
 8001914:	20001d58 	.word	0x20001d58
 8001918:	20001d50 	.word	0x20001d50
 800191c:	20001d60 	.word	0x20001d60
 8001920:	2000001c 	.word	0x2000001c
 8001924:	47500000 	.word	0x47500000
 8001928:	20001d34 	.word	0x20001d34
 800192c:	20001d44 	.word	0x20001d44
 8001930:	20001d4c 	.word	0x20001d4c
 8001934:	20001d5c 	.word	0x20001d5c
 8001938:	20001d54 	.word	0x20001d54
 800193c:	20001d64 	.word	0x20001d64
 8001940:	20000008 	.word	0x20000008
 8001944:	20001d74 	.word	0x20001d74
 8001948:	2000000c 	.word	0x2000000c
 800194c:	20000014 	.word	0x20000014
 8001950:	20001d78 	.word	0x20001d78
 8001954:	4bcb      	ldr	r3, [pc, #812]	@ (8001c84 <StartDefaultTask+0x6b4>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
	  // Apply the first-order low-pass filter using the difference equation
	  FilteredInputForFilterDOB = FilteredInputForFilterDOBPrev + (Gdis1 * dt_s / (1 + Gdis1 * dt_s)) * (InputForFilterDOB - FilteredInputForFilterDOBPrev);
 800195a:	4bcb      	ldr	r3, [pc, #812]	@ (8001c88 <StartDefaultTask+0x6b8>)
 800195c:	ed93 7a00 	vldr	s14, [r3]
 8001960:	4bca      	ldr	r3, [pc, #808]	@ (8001c8c <StartDefaultTask+0x6bc>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee67 6a27 	vmul.f32	s13, s14, s15
 800196a:	4bc7      	ldr	r3, [pc, #796]	@ (8001c88 <StartDefaultTask+0x6b8>)
 800196c:	ed93 7a00 	vldr	s14, [r3]
 8001970:	4bc6      	ldr	r3, [pc, #792]	@ (8001c8c <StartDefaultTask+0x6bc>)
 8001972:	edd3 7a00 	vldr	s15, [r3]
 8001976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800197e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001986:	4bbf      	ldr	r3, [pc, #764]	@ (8001c84 <StartDefaultTask+0x6b4>)
 8001988:	edd3 6a00 	vldr	s13, [r3]
 800198c:	4bc0      	ldr	r3, [pc, #768]	@ (8001c90 <StartDefaultTask+0x6c0>)
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001996:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199a:	4bbd      	ldr	r3, [pc, #756]	@ (8001c90 <StartDefaultTask+0x6c0>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a4:	4bbb      	ldr	r3, [pc, #748]	@ (8001c94 <StartDefaultTask+0x6c4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	  FilteredInputForFilterDOBPrev = FilteredInputForFilterDOB;  // Update the previous output for next iteration
 80019aa:	4bba      	ldr	r3, [pc, #744]	@ (8001c94 <StartDefaultTask+0x6c4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4ab8      	ldr	r2, [pc, #736]	@ (8001c90 <StartDefaultTask+0x6c0>)
 80019b0:	6013      	str	r3, [r2, #0]
	  velocity_correction = velocity1 * Jn1 * Gdis1;
 80019b2:	4bb9      	ldr	r3, [pc, #740]	@ (8001c98 <StartDefaultTask+0x6c8>)
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	4bb8      	ldr	r3, [pc, #736]	@ (8001c9c <StartDefaultTask+0x6cc>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019c2:	4bb1      	ldr	r3, [pc, #708]	@ (8001c88 <StartDefaultTask+0x6b8>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	4bb4      	ldr	r3, [pc, #720]	@ (8001ca0 <StartDefaultTask+0x6d0>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
	  Tdis1 = FilteredInputForFilterDOB - velocity_correction;
 80019d2:	4bb0      	ldr	r3, [pc, #704]	@ (8001c94 <StartDefaultTask+0x6c4>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ca0 <StartDefaultTask+0x6d0>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca4 <StartDefaultTask+0x6d4>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
	  Idis1 = Tdis1 * Kt1;
 80019e8:	4bae      	ldr	r3, [pc, #696]	@ (8001ca4 <StartDefaultTask+0x6d4>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4bae      	ldr	r3, [pc, #696]	@ (8001ca8 <StartDefaultTask+0x6d8>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f8:	4bac      	ldr	r3, [pc, #688]	@ (8001cac <StartDefaultTask+0x6dc>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]


	  // Compute commanded torque from current
	  float motor_torqueNEW = Icmd1 * (Kt1);
 80019fe:	4bac      	ldr	r3, [pc, #688]	@ (8001cb0 <StartDefaultTask+0x6e0>)
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	4ba8      	ldr	r3, [pc, #672]	@ (8001ca8 <StartDefaultTask+0x6d8>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a0e:	edc7 7a03 	vstr	s15, [r7, #12]

	  // Compute estimated reaction torque (discrete-time observer with LPF)
	  float reaction_input = motor_torqueNEW + velocity1 * Jn1*Grtob1 - (Fint + Ffric);
 8001a12:	4ba1      	ldr	r3, [pc, #644]	@ (8001c98 <StartDefaultTask+0x6c8>)
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	4ba0      	ldr	r3, [pc, #640]	@ (8001c9c <StartDefaultTask+0x6cc>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a22:	4ba4      	ldr	r3, [pc, #656]	@ (8001cb4 <StartDefaultTask+0x6e4>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a34:	4ba0      	ldr	r3, [pc, #640]	@ (8001cb8 <StartDefaultTask+0x6e8>)
 8001a36:	edd3 6a00 	vldr	s13, [r3]
 8001a3a:	4ba0      	ldr	r3, [pc, #640]	@ (8001cbc <StartDefaultTask+0x6ec>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	edc7 7a02 	vstr	s15, [r7, #8]
	    // Apply the first-order low-pass filter using the difference equation
	  Text1Filtered = Text1Filteredprev + (Grtob1 * dt_s / (1 + Grtob1 * dt_s )) * (reaction_input - Text1Filteredprev);
 8001a4c:	4b99      	ldr	r3, [pc, #612]	@ (8001cb4 <StartDefaultTask+0x6e4>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b8e      	ldr	r3, [pc, #568]	@ (8001c8c <StartDefaultTask+0x6bc>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a5c:	4b95      	ldr	r3, [pc, #596]	@ (8001cb4 <StartDefaultTask+0x6e4>)
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	4b8a      	ldr	r3, [pc, #552]	@ (8001c8c <StartDefaultTask+0x6bc>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a78:	4b91      	ldr	r3, [pc, #580]	@ (8001cc0 <StartDefaultTask+0x6f0>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8001cc0 <StartDefaultTask+0x6f0>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc4 <StartDefaultTask+0x6f4>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
	  Text1Filteredprev = Text1Filtered;  // Update the previous output for next iteration
 8001a9a:	4b8a      	ldr	r3, [pc, #552]	@ (8001cc4 <StartDefaultTask+0x6f4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a88      	ldr	r2, [pc, #544]	@ (8001cc0 <StartDefaultTask+0x6f0>)
 8001aa0:	6013      	str	r3, [r2, #0]

	  Set_Accelaration1=(Set_Torque1-Text1Filtered)*2500;
 8001aa2:	4b89      	ldr	r3, [pc, #548]	@ (8001cc8 <StartDefaultTask+0x6f8>)
 8001aa4:	ed93 7a00 	vldr	s14, [r3]
 8001aa8:	4b86      	ldr	r3, [pc, #536]	@ (8001cc4 <StartDefaultTask+0x6f4>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab2:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001ccc <StartDefaultTask+0x6fc>
 8001ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aba:	4b85      	ldr	r3, [pc, #532]	@ (8001cd0 <StartDefaultTask+0x700>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
	  inertia_term = (Jn1 * Set_Accelaration1) / Ktn1;
 8001ac0:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <StartDefaultTask+0x6cc>)
 8001ac2:	ed93 7a00 	vldr	s14, [r3]
 8001ac6:	4b82      	ldr	r3, [pc, #520]	@ (8001cd0 <StartDefaultTask+0x700>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ad0:	4b80      	ldr	r3, [pc, #512]	@ (8001cd4 <StartDefaultTask+0x704>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ada:	4b7f      	ldr	r3, [pc, #508]	@ (8001cd8 <StartDefaultTask+0x708>)
 8001adc:	edc3 7a00 	vstr	s15, [r3]
	  Icmd1 = inertia_term + Idis1;
 8001ae0:	4b7d      	ldr	r3, [pc, #500]	@ (8001cd8 <StartDefaultTask+0x708>)
 8001ae2:	ed93 7a00 	vldr	s14, [r3]
 8001ae6:	4b71      	ldr	r3, [pc, #452]	@ (8001cac <StartDefaultTask+0x6dc>)
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb0 <StartDefaultTask+0x6e0>)
 8001af2:	edc3 7a00 	vstr	s15, [r3]
	  /*********************************************************
	   *        Disturbance Observer for Motor 02             *
	   *********************************************************/
	  Icmd2 = inertia_term2 + Idis2;
 8001af6:	4b79      	ldr	r3, [pc, #484]	@ (8001cdc <StartDefaultTask+0x70c>)
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	4b78      	ldr	r3, [pc, #480]	@ (8001ce0 <StartDefaultTask+0x710>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b06:	4b77      	ldr	r3, [pc, #476]	@ (8001ce4 <StartDefaultTask+0x714>)
 8001b08:	edc3 7a00 	vstr	s15, [r3]

	  motor_torque2 = Icmd2 * Ktn2;
 8001b0c:	4b75      	ldr	r3, [pc, #468]	@ (8001ce4 <StartDefaultTask+0x714>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b75      	ldr	r3, [pc, #468]	@ (8001ce8 <StartDefaultTask+0x718>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <StartDefaultTask+0x71c>)
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
	  velocity_disturbance2 = velocity2 * Jn2 * Gdis2;
 8001b22:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <StartDefaultTask+0x720>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	4b72      	ldr	r3, [pc, #456]	@ (8001cf4 <StartDefaultTask+0x724>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b32:	4b71      	ldr	r3, [pc, #452]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001cfc <StartDefaultTask+0x72c>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
	  numerator2 = (motor_torque2 + velocity_disturbance2) * Gdis2;
 8001b42:	4b6a      	ldr	r3, [pc, #424]	@ (8001cec <StartDefaultTask+0x71c>)
 8001b44:	ed93 7a00 	vldr	s14, [r3]
 8001b48:	4b6c      	ldr	r3, [pc, #432]	@ (8001cfc <StartDefaultTask+0x72c>)
 8001b4a:	edd3 7a00 	vldr	s15, [r3]
 8001b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b52:	4b69      	ldr	r3, [pc, #420]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5c:	4b68      	ldr	r3, [pc, #416]	@ (8001d00 <StartDefaultTask+0x730>)
 8001b5e:	edc3 7a00 	vstr	s15, [r3]
	  denominator2 = time_interval + Gdis2;
 8001b62:	4b68      	ldr	r3, [pc, #416]	@ (8001d04 <StartDefaultTask+0x734>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b6e:	4b62      	ldr	r3, [pc, #392]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b78:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <StartDefaultTask+0x738>)
 8001b7a:	edc3 7a00 	vstr	s15, [r3]
	  velocity_correction2 = velocity2 * Jn2 * Gdis2;
 8001b7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf0 <StartDefaultTask+0x720>)
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf4 <StartDefaultTask+0x724>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b98:	4b5c      	ldr	r3, [pc, #368]	@ (8001d0c <StartDefaultTask+0x73c>)
 8001b9a:	edc3 7a00 	vstr	s15, [r3]
	  Tdis2 = numerator2 / denominator2 - velocity_correction2;
 8001b9e:	4b58      	ldr	r3, [pc, #352]	@ (8001d00 <StartDefaultTask+0x730>)
 8001ba0:	edd3 6a00 	vldr	s13, [r3]
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <StartDefaultTask+0x738>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001bae:	4b57      	ldr	r3, [pc, #348]	@ (8001d0c <StartDefaultTask+0x73c>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb8:	4b55      	ldr	r3, [pc, #340]	@ (8001d10 <StartDefaultTask+0x740>)
 8001bba:	edc3 7a00 	vstr	s15, [r3]
	  Idis2 = Tdis2 * Kt2;
 8001bbe:	4b54      	ldr	r3, [pc, #336]	@ (8001d10 <StartDefaultTask+0x740>)
 8001bc0:	ed93 7a00 	vldr	s14, [r3]
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <StartDefaultTask+0x744>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bce:	4b44      	ldr	r3, [pc, #272]	@ (8001ce0 <StartDefaultTask+0x710>)
 8001bd0:	edc3 7a00 	vstr	s15, [r3]

	  /*********************************************************
	   *         Motor Output Control & Saturation            *
	   *********************************************************/
	  if (Icmd1 > 3.5) {
 8001bd4:	4b36      	ldr	r3, [pc, #216]	@ (8001cb0 <StartDefaultTask+0x6e0>)
 8001bd6:	edd3 7a00 	vldr	s15, [r3]
 8001bda:	eeb0 7a0c 	vmov.f32	s14, #12	@ 0x40600000  3.5
 8001bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	dd02      	ble.n	8001bee <StartDefaultTask+0x61e>
	      Icmd1 = 3.5;
 8001be8:	4b31      	ldr	r3, [pc, #196]	@ (8001cb0 <StartDefaultTask+0x6e0>)
 8001bea:	4a4b      	ldr	r2, [pc, #300]	@ (8001d18 <StartDefaultTask+0x748>)
 8001bec:	601a      	str	r2, [r3, #0]
	  }
	  ConfigureMotor02(ENABLEmOTOR, 1, Icmd1 * (4096) / 3.5);
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <StartDefaultTask+0x74c>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb0 <StartDefaultTask+0x6e0>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001d20 <StartDefaultTask+0x750>
 8001bfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c02:	ee17 0a90 	vmov	r0, s15
 8001c06:	f7fe fcbf 	bl	8000588 <__aeabi_f2d>
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	4b45      	ldr	r3, [pc, #276]	@ (8001d24 <StartDefaultTask+0x754>)
 8001c10:	f7fe fe3c 	bl	800088c <__aeabi_ddiv>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe ff1e 	bl	8000a5c <__aeabi_d2uiz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	2101      	movs	r1, #1
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f7ff f99f 	bl	8000f6c <ConfigureMotor02>

	  // Redundant Tdis2 and Idis2 update (if needed)
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2)
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <StartDefaultTask+0x714>)
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce8 <StartDefaultTask+0x718>)
 8001c36:	edd3 7a00 	vldr	s15, [r3]
 8001c3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <StartDefaultTask+0x720>)
 8001c40:	edd3 6a00 	vldr	s13, [r3]
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <StartDefaultTask+0x724>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5c:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <StartDefaultTask+0x734>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c72:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <StartDefaultTask+0x728>)
 8001c74:	edd3 7a00 	vldr	s15, [r3]
 8001c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c80:	e052      	b.n	8001d28 <StartDefaultTask+0x758>
 8001c82:	bf00      	nop
 8001c84:	20001d80 	.word	0x20001d80
 8001c88:	20000014 	.word	0x20000014
 8001c8c:	20001dbc 	.word	0x20001dbc
 8001c90:	20001d88 	.word	0x20001d88
 8001c94:	20001d84 	.word	0x20001d84
 8001c98:	20001d40 	.word	0x20001d40
 8001c9c:	2000000c 	.word	0x2000000c
 8001ca0:	20001d7c 	.word	0x20001d7c
 8001ca4:	20001db0 	.word	0x20001db0
 8001ca8:	20000010 	.word	0x20000010
 8001cac:	20001db4 	.word	0x20001db4
 8001cb0:	20001d64 	.word	0x20001d64
 8001cb4:	20000018 	.word	0x20000018
 8001cb8:	20001d68 	.word	0x20001d68
 8001cbc:	20001d6c 	.word	0x20001d6c
 8001cc0:	20001d90 	.word	0x20001d90
 8001cc4:	20001d8c 	.word	0x20001d8c
 8001cc8:	20001db8 	.word	0x20001db8
 8001ccc:	451c4000 	.word	0x451c4000
 8001cd0:	20000038 	.word	0x20000038
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20001d70 	.word	0x20001d70
 8001cdc:	20001d94 	.word	0x20001d94
 8001ce0:	20001d98 	.word	0x20001d98
 8001ce4:	20000020 	.word	0x20000020
 8001ce8:	20000024 	.word	0x20000024
 8001cec:	20001da0 	.word	0x20001da0
 8001cf0:	20001d44 	.word	0x20001d44
 8001cf4:	20000028 	.word	0x20000028
 8001cf8:	2000002c 	.word	0x2000002c
 8001cfc:	20001da4 	.word	0x20001da4
 8001d00:	20001da8 	.word	0x20001da8
 8001d04:	20000004 	.word	0x20000004
 8001d08:	20000034 	.word	0x20000034
 8001d0c:	20001dac 	.word	0x20001dac
 8001d10:	20001d9c 	.word	0x20001d9c
 8001d14:	20000030 	.word	0x20000030
 8001d18:	40600000 	.word	0x40600000
 8001d1c:	20001dc0 	.word	0x20001dc0
 8001d20:	45800000 	.word	0x45800000
 8001d24:	400c0000 	.word	0x400c0000
	          - velocity2 * Jn2 * Gdis2;
 8001d28:	4b26      	ldr	r3, [pc, #152]	@ (8001dc4 <StartDefaultTask+0x7f4>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <StartDefaultTask+0x7f8>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d38:	4b24      	ldr	r3, [pc, #144]	@ (8001dcc <StartDefaultTask+0x7fc>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2)
 8001d46:	4b22      	ldr	r3, [pc, #136]	@ (8001dd0 <StartDefaultTask+0x800>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
	  Idis2 = Tdis2 * Kt2;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <StartDefaultTask+0x800>)
 8001d4e:	ed93 7a00 	vldr	s14, [r3]
 8001d52:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <StartDefaultTask+0x804>)
 8001d54:	edd3 7a00 	vldr	s15, [r3]
 8001d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <StartDefaultTask+0x808>)
 8001d5e:	edc3 7a00 	vstr	s15, [r3]

	  ConfigureMotor01(ENABLEmOTOR, 1, Icmd1 * (4096) / 3.5);
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <StartDefaultTask+0x80c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <StartDefaultTask+0x810>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001de4 <StartDefaultTask+0x814>
 8001d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d76:	ee17 0a90 	vmov	r0, s15
 8001d7a:	f7fe fc05 	bl	8000588 <__aeabi_f2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <StartDefaultTask+0x818>)
 8001d84:	f7fe fd82 	bl	800088c <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7fe fe64 	bl	8000a5c <__aeabi_d2uiz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff f8c1 	bl	8000f24 <ConfigureMotor01>

	  /*********************************************************
	   *               Update Time Interval                   *
	   *********************************************************/
	  osDelay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f005 fba0 	bl	80074e8 <osDelay>
	  time_end = __HAL_TIM_GET_COUNTER(&htim2);
 8001da8:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <StartDefaultTask+0x81c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <StartDefaultTask+0x820>)
 8001db0:	6013      	str	r3, [r2, #0]
	  time_interval = time_end - time_start;
 8001db2:	4b0f      	ldr	r3, [pc, #60]	@ (8001df0 <StartDefaultTask+0x820>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <StartDefaultTask+0x824>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8001df8 <StartDefaultTask+0x828>)
 8001dbe:	6013      	str	r3, [r2, #0]
  {
 8001dc0:	e40a      	b.n	80015d8 <StartDefaultTask+0x8>
 8001dc2:	bf00      	nop
 8001dc4:	20001d44 	.word	0x20001d44
 8001dc8:	20000028 	.word	0x20000028
 8001dcc:	2000002c 	.word	0x2000002c
 8001dd0:	20001d9c 	.word	0x20001d9c
 8001dd4:	20000030 	.word	0x20000030
 8001dd8:	20001d98 	.word	0x20001d98
 8001ddc:	20001dc0 	.word	0x20001dc0
 8001de0:	20001d64 	.word	0x20001d64
 8001de4:	45800000 	.word	0x45800000
 8001de8:	400c0000 	.word	0x400c0000
 8001dec:	200003e4 	.word	0x200003e4
 8001df0:	200004f0 	.word	0x200004f0
 8001df4:	200004ec 	.word	0x200004ec
 8001df8:	20000004 	.word	0x20000004

08001dfc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b096      	sub	sp, #88	@ 0x58
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	if (SDCardRecordMode==1){
 8001e04:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <StartTask02+0x1a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d15c      	bne.n	8001ec6 <StartTask02+0xca>
    SDCardCount++;
 8001e0c:	4b65      	ldr	r3, [pc, #404]	@ (8001fa4 <StartTask02+0x1a8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a64      	ldr	r2, [pc, #400]	@ (8001fa4 <StartTask02+0x1a8>)
 8001e14:	6013      	str	r3, [r2, #0]
    if (EncoderUpdated == 1 && communicationError==0) {
 8001e16:	4b64      	ldr	r3, [pc, #400]	@ (8001fa8 <StartTask02+0x1ac>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	f040 80b9 	bne.w	8001f92 <StartTask02+0x196>
 8001e20:	4b62      	ldr	r3, [pc, #392]	@ (8001fac <StartTask02+0x1b0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 80b4 	bne.w	8001f92 <StartTask02+0x196>
        FRESULT fr;
        UINT bytes_written;

        // Open the file for appending
        fr = f_open(&fil, "Data.txt", FA_OPEN_APPEND | FA_WRITE);
 8001e2a:	2232      	movs	r2, #50	@ 0x32
 8001e2c:	4960      	ldr	r1, [pc, #384]	@ (8001fb0 <StartTask02+0x1b4>)
 8001e2e:	4861      	ldr	r0, [pc, #388]	@ (8001fb4 <StartTask02+0x1b8>)
 8001e30:	f004 fe17 	bl	8006a62 <f_open>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK) {
 8001e3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <StartTask02+0x4e>
            // Optional: Handle error (blink LED, set flag, etc.)
        	communicationError=1;
 8001e42:	4b5a      	ldr	r3, [pc, #360]	@ (8001fac <StartTask02+0x1b0>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
            return;
 8001e48:	e0a7      	b.n	8001f9a <StartTask02+0x19e>
        }

        // Format the record number and encoder tick data into a string
        sprintf(buffer, "R%lu: E1: %lu, E2: %lu\n", SDCardCount, encoder_ticks, encoder_ticks2);
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <StartTask02+0x1a8>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb8 <StartTask02+0x1bc>)
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	4b5a      	ldr	r3, [pc, #360]	@ (8001fbc <StartTask02+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4959      	ldr	r1, [pc, #356]	@ (8001fc0 <StartTask02+0x1c4>)
 8001e5c:	4859      	ldr	r0, [pc, #356]	@ (8001fc4 <StartTask02+0x1c8>)
 8001e5e:	f007 fd5d 	bl	800991c <siprintf>
        //"R%lu: E1: %lu, E2: %lu\n"
        // Write to the file
        fr = f_write(&fil, buffer, strlen(buffer), &bytes_written);
 8001e62:	4858      	ldr	r0, [pc, #352]	@ (8001fc4 <StartTask02+0x1c8>)
 8001e64:	f7fe f9d4 	bl	8000210 <strlen>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e6e:	4955      	ldr	r1, [pc, #340]	@ (8001fc4 <StartTask02+0x1c8>)
 8001e70:	4850      	ldr	r0, [pc, #320]	@ (8001fb4 <StartTask02+0x1b8>)
 8001e72:	f004 ffc5 	bl	8006e00 <f_write>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK || bytes_written == 0) {
 8001e7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <StartTask02+0x8e>
 8001e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d106      	bne.n	8001e98 <StartTask02+0x9c>
            f_close(&fil);  // Close anyway if open
 8001e8a:	484a      	ldr	r0, [pc, #296]	@ (8001fb4 <StartTask02+0x1b8>)
 8001e8c:	f005 fa04 	bl	8007298 <f_close>
            communicationError=1;
 8001e90:	4b46      	ldr	r3, [pc, #280]	@ (8001fac <StartTask02+0x1b0>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
            return;
 8001e96:	e080      	b.n	8001f9a <StartTask02+0x19e>
        }

        // Close the file
        fr = f_close(&fil);
 8001e98:	4846      	ldr	r0, [pc, #280]	@ (8001fb4 <StartTask02+0x1b8>)
 8001e9a:	f005 f9fd 	bl	8007298 <f_close>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK) {
 8001ea4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <StartTask02+0xb8>
        	communicationError=1;
 8001eac:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <StartTask02+0x1b0>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
            return;
 8001eb2:	e072      	b.n	8001f9a <StartTask02+0x19e>
        }

        EncoderUpdated = 0;
 8001eb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa8 <StartTask02+0x1ac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
        record_number++;
 8001eba:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <StartTask02+0x1cc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a41      	ldr	r2, [pc, #260]	@ (8001fc8 <StartTask02+0x1cc>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e065      	b.n	8001f92 <StartTask02+0x196>
    }
	}
		else {

			RecordTaskCount++;
 8001ec6:	4b41      	ldr	r3, [pc, #260]	@ (8001fcc <StartTask02+0x1d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	4a3f      	ldr	r2, [pc, #252]	@ (8001fcc <StartTask02+0x1d0>)
 8001ece:	6013      	str	r3, [r2, #0]
		    uint8_t txBuf[25];  // 6 floats = 24 bytes + 1 byte for CRC
		    uint8_t rxBuf[25];

		    memcpy(&txBuf[0],  &Icmd1,     sizeof(float));
 8001ed0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd0 <StartTask02+0x1d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
		    memcpy(&txBuf[4],  &Icmd2,     sizeof(float));
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd4 <StartTask02+0x1d8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	62bb      	str	r3, [r7, #40]	@ 0x28
		    memcpy(&txBuf[8],  &velocity1, sizeof(float));
 8001edc:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <StartTask02+0x1dc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		    memcpy(&txBuf[12], &velocity2, sizeof(float));
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <StartTask02+0x1e0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	633b      	str	r3, [r7, #48]	@ 0x30
		    memcpy(&txBuf[16], &theta1,    sizeof(float));
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <StartTask02+0x1e4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	637b      	str	r3, [r7, #52]	@ 0x34
		    memcpy(&txBuf[20], &theta2,    sizeof(float));
 8001eee:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe4 <StartTask02+0x1e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38

		    // CRC-8 calculation (same polynomial: 0x07)
		    uint8_t crc = 0x00;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		    for (int i = 0; i < 24; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001efe:	e02c      	b.n	8001f5a <StartTask02+0x15e>
		        crc ^= txBuf[i];
 8001f00:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f06:	4413      	add	r3, r2
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f0e:	4053      	eors	r3, r2
 8001f10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		        for (uint8_t j = 0; j < 8; j++) {
 8001f14:	2300      	movs	r3, #0
 8001f16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f1a:	e017      	b.n	8001f4c <StartTask02+0x150>
		            crc = (crc & 0x80) ? (crc << 1) ^ 0x07 : (crc << 1);
 8001f1c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da08      	bge.n	8001f36 <StartTask02+0x13a>
 8001f24:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	f083 0307 	eor.w	r3, r3, #7
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	e003      	b.n	8001f3e <StartTask02+0x142>
 8001f36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		        for (uint8_t j = 0; j < 8; j++) {
 8001f42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f46:	3301      	adds	r3, #1
 8001f48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001f50:	2b07      	cmp	r3, #7
 8001f52:	d9e3      	bls.n	8001f1c <StartTask02+0x120>
		    for (int i = 0; i < 24; i++) {
 8001f54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f56:	3301      	adds	r3, #1
 8001f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f5c:	2b17      	cmp	r3, #23
 8001f5e:	ddcf      	ble.n	8001f00 <StartTask02+0x104>
		        }
		    }

		    txBuf[24] = crc;  // Add CRC to the last byte
 8001f60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001f64:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

		    // SPI Transaction
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // CS LOW
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	481e      	ldr	r0, [pc, #120]	@ (8001fe8 <StartTask02+0x1ec>)
 8001f6e:	f000 ff29 	bl	8002dc4 <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi4, txBuf, rxBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001f72:	f107 0208 	add.w	r2, r7, #8
 8001f76:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2319      	movs	r3, #25
 8001f82:	481a      	ldr	r0, [pc, #104]	@ (8001fec <StartTask02+0x1f0>)
 8001f84:	f001 fc8b 	bl	800389e <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);    // CS HIGH
 8001f88:	2201      	movs	r2, #1
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	4816      	ldr	r0, [pc, #88]	@ (8001fe8 <StartTask02+0x1ec>)
 8001f8e:	f000 ff19 	bl	8002dc4 <HAL_GPIO_WritePin>

		}

    osDelay(1);
 8001f92:	2001      	movs	r0, #1
 8001f94:	f005 faa8 	bl	80074e8 <osDelay>
	if (SDCardRecordMode==1){
 8001f98:	e734      	b.n	8001e04 <StartTask02+0x8>
  }
  /* USER CODE END StartTask02 */
}
 8001f9a:	3750      	adds	r7, #80	@ 0x50
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20001d2c 	.word	0x20001d2c
 8001fa4:	200004e4 	.word	0x200004e4
 8001fa8:	20001d28 	.word	0x20001d28
 8001fac:	200004e8 	.word	0x200004e8
 8001fb0:	0800a2c4 	.word	0x0800a2c4
 8001fb4:	200004f8 	.word	0x200004f8
 8001fb8:	200004d8 	.word	0x200004d8
 8001fbc:	200004dc 	.word	0x200004dc
 8001fc0:	0800a2d0 	.word	0x0800a2d0
 8001fc4:	20001528 	.word	0x20001528
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	200004d4 	.word	0x200004d4
 8001fd0:	20001d64 	.word	0x20001d64
 8001fd4:	20000020 	.word	0x20000020
 8001fd8:	20001d40 	.word	0x20001d40
 8001fdc:	20001d44 	.word	0x20001d44
 8001fe0:	20001d30 	.word	0x20001d30
 8001fe4:	20001d34 	.word	0x20001d34
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	20000334 	.word	0x20000334

08001ff0 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8002002:	f000 fbbf 	bl	8002784 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800200a:	2300      	movs	r3, #0
 800200c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002012:	231f      	movs	r3, #31
 8002014:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8002016:	2387      	movs	r3, #135	@ 0x87
 8002018:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800201a:	2300      	movs	r3, #0
 800201c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800201e:	2300      	movs	r3, #0
 8002020:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002022:	2301      	movs	r3, #1
 8002024:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002026:	2301      	movs	r3, #1
 8002028:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002032:	463b      	mov	r3, r7
 8002034:	4618      	mov	r0, r3
 8002036:	f000 fbdd 	bl	80027f4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800203a:	2004      	movs	r0, #4
 800203c:	f000 fbba 	bl	80027b4 <HAL_MPU_Enable>

}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a04      	ldr	r2, [pc, #16]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800205a:	f000 fa91 	bl	8002580 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40000c00 	.word	0x40000c00

0800206c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <Error_Handler+0x8>

08002078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <HAL_MspInit+0x4c>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	4a10      	ldr	r2, [pc, #64]	@ (80020c4 <HAL_MspInit+0x4c>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6413      	str	r3, [r2, #64]	@ 0x40
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <HAL_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_MspInit+0x4c>)
 800209c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	210f      	movs	r1, #15
 80020b2:	f06f 0001 	mvn.w	r0, #1
 80020b6:	f000 fb3b 	bl	8002730 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a15      	ldr	r2, [pc, #84]	@ (800213c <HAL_DAC_MspInit+0x74>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d123      	bne.n	8002132 <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80020ea:	4b15      	ldr	r3, [pc, #84]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a14      	ldr	r2, [pc, #80]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 80020f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002102:	4b0f      	ldr	r3, [pc, #60]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a0e      	ldr	r2, [pc, #56]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_DAC_MspInit+0x78>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800211a:	2330      	movs	r3, #48	@ 0x30
 800211c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800211e:	2303      	movs	r3, #3
 8002120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	4805      	ldr	r0, [pc, #20]	@ (8002144 <HAL_DAC_MspInit+0x7c>)
 800212e:	f000 fc9d 	bl	8002a6c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8002132:	bf00      	nop
 8002134:	3728      	adds	r7, #40	@ 0x28
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40007400 	.word	0x40007400
 8002140:	40023800 	.word	0x40023800
 8002144:	40020000 	.word	0x40020000

08002148 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a17      	ldr	r2, [pc, #92]	@ (80021c4 <HAL_SPI_MspInit+0x7c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d127      	bne.n	80021ba <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800216a:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	4a16      	ldr	r2, [pc, #88]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 8002170:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002174:	6453      	str	r3, [r2, #68]	@ 0x44
 8002176:	4b14      	ldr	r3, [pc, #80]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a10      	ldr	r2, [pc, #64]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 8002188:	f043 0310 	orr.w	r3, r3, #16
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <HAL_SPI_MspInit+0x80>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800219a:	2364      	movs	r3, #100	@ 0x64
 800219c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80021aa:	2305      	movs	r3, #5
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <HAL_SPI_MspInit+0x84>)
 80021b6:	f000 fc59 	bl	8002a6c <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80021ba:	bf00      	nop
 80021bc:	3728      	adds	r7, #40	@ 0x28
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40013400 	.word	0x40013400
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40021000 	.word	0x40021000

080021d0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	@ 0x30
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a2f      	ldr	r2, [pc, #188]	@ (80022ac <HAL_TIM_Encoder_MspInit+0xdc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d129      	bne.n	8002246 <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b2f      	ldr	r3, [pc, #188]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f6:	4a2e      	ldr	r2, [pc, #184]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fe:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a28      	ldr	r2, [pc, #160]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002222:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222c:	2300      	movs	r3, #0
 800222e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002234:	2301      	movs	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002238:	f107 031c 	add.w	r3, r7, #28
 800223c:	4619      	mov	r1, r3
 800223e:	481d      	ldr	r0, [pc, #116]	@ (80022b4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002240:	f000 fc14 	bl	8002a6c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002244:	e02d      	b.n	80022a2 <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a1b      	ldr	r2, [pc, #108]	@ (80022b8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d128      	bne.n	80022a2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002254:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6413      	str	r3, [r2, #64]	@ 0x40
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002268:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	4a10      	ldr	r2, [pc, #64]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800226e:	f043 0308 	orr.w	r3, r3, #8
 8002272:	6313      	str	r3, [r2, #48]	@ 0x30
 8002274:	4b0e      	ldr	r3, [pc, #56]	@ (80022b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002280:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002292:	2302      	movs	r3, #2
 8002294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 031c 	add.w	r3, r7, #28
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <HAL_TIM_Encoder_MspInit+0xec>)
 800229e:	f000 fbe5 	bl	8002a6c <HAL_GPIO_Init>
}
 80022a2:	bf00      	nop
 80022a4:	3730      	adds	r7, #48	@ 0x30
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40010000 	.word	0x40010000
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40000800 	.word	0x40000800
 80022bc:	40020c00 	.word	0x40020c00

080022c0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022d0:	d10c      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80022ea:	e018      	b.n	800231e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <HAL_TIM_Base_MspInit+0x6c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d113      	bne.n	800231e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80022f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	4a0b      	ldr	r2, [pc, #44]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002300:	6413      	str	r3, [r2, #64]	@ 0x40
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <HAL_TIM_Base_MspInit+0x68>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2105      	movs	r1, #5
 8002312:	202c      	movs	r0, #44	@ 0x2c
 8002314:	f000 fa0c 	bl	8002730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002318:	202c      	movs	r0, #44	@ 0x2c
 800231a:	f000 fa25 	bl	8002768 <HAL_NVIC_EnableIRQ>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40001c00 	.word	0x40001c00

08002330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	@ 0x38
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002340:	4b33      	ldr	r3, [pc, #204]	@ (8002410 <HAL_InitTick+0xe0>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	4a32      	ldr	r2, [pc, #200]	@ (8002410 <HAL_InitTick+0xe0>)
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6413      	str	r3, [r2, #64]	@ 0x40
 800234c:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <HAL_InitTick+0xe0>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002358:	f107 0210 	add.w	r2, r7, #16
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f001 f9be 	bl	80036e4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800236c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002372:	f001 f9a3 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 8002376:	6378      	str	r0, [r7, #52]	@ 0x34
 8002378:	e004      	b.n	8002384 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800237a:	f001 f99f 	bl	80036bc <HAL_RCC_GetPCLK1Freq>
 800237e:	4603      	mov	r3, r0
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002386:	4a23      	ldr	r2, [pc, #140]	@ (8002414 <HAL_InitTick+0xe4>)
 8002388:	fba2 2303 	umull	r2, r3, r2, r3
 800238c:	0c9b      	lsrs	r3, r3, #18
 800238e:	3b01      	subs	r3, #1
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002392:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <HAL_InitTick+0xe8>)
 8002394:	4a21      	ldr	r2, [pc, #132]	@ (800241c <HAL_InitTick+0xec>)
 8002396:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <HAL_InitTick+0xe8>)
 800239a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800239e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80023a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_InitTick+0xe8>)
 80023a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <HAL_InitTick+0xe8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <HAL_InitTick+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_InitTick+0xe8>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80023b8:	4817      	ldr	r0, [pc, #92]	@ (8002418 <HAL_InitTick+0xe8>)
 80023ba:	f001 fe1b 	bl	8003ff4 <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d11b      	bne.n	8002404 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80023cc:	4812      	ldr	r0, [pc, #72]	@ (8002418 <HAL_InitTick+0xe8>)
 80023ce:	f001 fed9 	bl	8004184 <HAL_TIM_Base_Start_IT>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023e0:	2032      	movs	r0, #50	@ 0x32
 80023e2:	f000 f9c1 	bl	8002768 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d808      	bhi.n	80023fe <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80023ec:	2200      	movs	r2, #0
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	2032      	movs	r0, #50	@ 0x32
 80023f2:	f000 f99d 	bl	8002730 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_InitTick+0xf0>)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e002      	b.n	8002404 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002404:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002408:	4618      	mov	r0, r3
 800240a:	3738      	adds	r7, #56	@ 0x38
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	431bde83 	.word	0x431bde83
 8002418:	20001dc4 	.word	0x20001dc4
 800241c:	40000c00 	.word	0x40000c00
 8002420:	20000040 	.word	0x20000040

08002424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002428:	bf00      	nop
 800242a:	e7fd      	b.n	8002428 <NMI_Handler+0x4>

0800242c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002430:	bf00      	nop
 8002432:	e7fd      	b.n	8002430 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <MemManage_Handler+0x4>

0800243c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <BusFault_Handler+0x4>

08002444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <UsageFault_Handler+0x4>

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
	...

0800245c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002460:	4802      	ldr	r0, [pc, #8]	@ (800246c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002462:	f002 f83b 	bl	80044dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000047c 	.word	0x2000047c

08002470 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002474:	4802      	ldr	r0, [pc, #8]	@ (8002480 <TIM5_IRQHandler+0x10>)
 8002476:	f002 f831 	bl	80044dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20001dc4 	.word	0x20001dc4

08002484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <_sbrk+0x5c>)
 800248e:	4b15      	ldr	r3, [pc, #84]	@ (80024e4 <_sbrk+0x60>)
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <_sbrk+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a0:	4b11      	ldr	r3, [pc, #68]	@ (80024e8 <_sbrk+0x64>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	@ (80024ec <_sbrk+0x68>)
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d207      	bcs.n	80024c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b4:	f007 fa5c 	bl	8009970 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	220c      	movs	r2, #12
 80024bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
 80024c2:	e009      	b.n	80024d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ca:	4b07      	ldr	r3, [pc, #28]	@ (80024e8 <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <_sbrk+0x64>)
 80024d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	20050000 	.word	0x20050000
 80024e4:	00000400 	.word	0x00000400
 80024e8:	20001e10 	.word	0x20001e10
 80024ec:	20005ce8 	.word	0x20005ce8

080024f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <SystemInit+0x20>)
 80024f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fa:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <SystemInit+0x20>)
 80024fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800254c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002518:	f7ff ffea 	bl	80024f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800251c:	480c      	ldr	r0, [pc, #48]	@ (8002550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800251e:	490d      	ldr	r1, [pc, #52]	@ (8002554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002520:	4a0d      	ldr	r2, [pc, #52]	@ (8002558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002534:	4c0a      	ldr	r4, [pc, #40]	@ (8002560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002542:	f007 fa1b 	bl	800997c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002546:	f7fe fd35 	bl	8000fb4 <main>
  bx  lr    
 800254a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800254c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002554:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8002558:	0800a410 	.word	0x0800a410
  ldr r2, =_sbss
 800255c:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8002560:	20005ce8 	.word	0x20005ce8

08002564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC_IRQHandler>

08002566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256a:	2003      	movs	r0, #3
 800256c:	f000 f8d5 	bl	800271a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002570:	200f      	movs	r0, #15
 8002572:	f7ff fedd 	bl	8002330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002576:	f7ff fd7f 	bl	8002078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	@ (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	@ (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000044 	.word	0x20000044
 80025a4:	20001e14 	.word	0x20001e14

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	@ (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20001e14 	.word	0x20001e14

080025c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <__NVIC_SetPriorityGrouping+0x40>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025e8:	4b06      	ldr	r3, [pc, #24]	@ (8002604 <__NVIC_SetPriorityGrouping+0x44>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ee:	4a04      	ldr	r2, [pc, #16]	@ (8002600 <__NVIC_SetPriorityGrouping+0x40>)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	60d3      	str	r3, [r2, #12]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00
 8002604:	05fa0000 	.word	0x05fa0000

08002608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800260c:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <__NVIC_GetPriorityGrouping+0x18>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	0a1b      	lsrs	r3, r3, #8
 8002612:	f003 0307 	and.w	r3, r3, #7
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db0b      	blt.n	800264e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	f003 021f 	and.w	r2, r3, #31
 800263c:	4907      	ldr	r1, [pc, #28]	@ (800265c <__NVIC_EnableIRQ+0x38>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	095b      	lsrs	r3, r3, #5
 8002644:	2001      	movs	r0, #1
 8002646:	fa00 f202 	lsl.w	r2, r0, r2
 800264a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000e100 	.word	0xe000e100

08002660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	2b00      	cmp	r3, #0
 8002672:	db0a      	blt.n	800268a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	b2da      	uxtb	r2, r3
 8002678:	490c      	ldr	r1, [pc, #48]	@ (80026ac <__NVIC_SetPriority+0x4c>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	0112      	lsls	r2, r2, #4
 8002680:	b2d2      	uxtb	r2, r2
 8002682:	440b      	add	r3, r1
 8002684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002688:	e00a      	b.n	80026a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4908      	ldr	r1, [pc, #32]	@ (80026b0 <__NVIC_SetPriority+0x50>)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	3b04      	subs	r3, #4
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	440b      	add	r3, r1
 800269e:	761a      	strb	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000e100 	.word	0xe000e100
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b089      	sub	sp, #36	@ 0x24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f1c3 0307 	rsb	r3, r3, #7
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	bf28      	it	cs
 80026d2:	2304      	movcs	r3, #4
 80026d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3304      	adds	r3, #4
 80026da:	2b06      	cmp	r3, #6
 80026dc:	d902      	bls.n	80026e4 <NVIC_EncodePriority+0x30>
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3b03      	subs	r3, #3
 80026e2:	e000      	b.n	80026e6 <NVIC_EncodePriority+0x32>
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	401a      	ands	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43d9      	mvns	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	4313      	orrs	r3, r2
         );
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f7ff ff4c 	bl	80025c0 <__NVIC_SetPriorityGrouping>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002742:	f7ff ff61 	bl	8002608 <__NVIC_GetPriorityGrouping>
 8002746:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	6978      	ldr	r0, [r7, #20]
 800274e:	f7ff ffb1 	bl	80026b4 <NVIC_EncodePriority>
 8002752:	4602      	mov	r2, r0
 8002754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff80 	bl	8002660 <__NVIC_SetPriority>
}
 8002760:	bf00      	nop
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff54 	bl	8002624 <__NVIC_EnableIRQ>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002788:	f3bf 8f5f 	dmb	sy
}
 800278c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_MPU_Disable+0x28>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	4a06      	ldr	r2, [pc, #24]	@ (80027ac <HAL_MPU_Disable+0x28>)
 8002794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002798:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800279a:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_MPU_Disable+0x2c>)
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	e000ed90 	.word	0xe000ed90

080027b4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027bc:	4a0b      	ldr	r2, [pc, #44]	@ (80027ec <HAL_MPU_Enable+0x38>)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_MPU_Enable+0x3c>)
 80027c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ca:	4a09      	ldr	r2, [pc, #36]	@ (80027f0 <HAL_MPU_Enable+0x3c>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027d2:	f3bf 8f4f 	dsb	sy
}
 80027d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027d8:	f3bf 8f6f 	isb	sy
}
 80027dc:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000ed90 	.word	0xe000ed90
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	785a      	ldrb	r2, [r3, #1]
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_MPU_ConfigRegion+0x7c>)
 8002802:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <HAL_MPU_ConfigRegion+0x7c>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_MPU_ConfigRegion+0x7c>)
 800280a:	f023 0301 	bic.w	r3, r3, #1
 800280e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002810:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_MPU_ConfigRegion+0x7c>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7b1b      	ldrb	r3, [r3, #12]
 800281c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	7adb      	ldrb	r3, [r3, #11]
 8002822:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002824:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	7a9b      	ldrb	r3, [r3, #10]
 800282a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800282c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7b5b      	ldrb	r3, [r3, #13]
 8002832:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002834:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7b9b      	ldrb	r3, [r3, #14]
 800283a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800283c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7bdb      	ldrb	r3, [r3, #15]
 8002842:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002844:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7a5b      	ldrb	r3, [r3, #9]
 800284a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800284c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7a1b      	ldrb	r3, [r3, #8]
 8002852:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002854:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	7812      	ldrb	r2, [r2, #0]
 800285a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800285e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002860:	6113      	str	r3, [r2, #16]
}
 8002862:	bf00      	nop
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	e000ed90 	.word	0xe000ed90

08002874 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e014      	b.n	80028b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fc16 	bl	80020c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e046      	b.n	800295a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	795b      	ldrb	r3, [r3, #5]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_DAC_Start+0x20>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e040      	b.n	800295a <HAL_DAC_Start+0xa2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2201      	movs	r2, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800290c:	2b3c      	cmp	r3, #60	@ 0x3c
 800290e:	d11d      	bne.n	800294c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	e014      	b.n	800294c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	213c      	movs	r1, #60	@ 0x3c
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	429a      	cmp	r2, r3
 800293a:	d107      	bne.n	800294c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0202 	orr.w	r2, r2, #2
 800294a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002966:	b480      	push	{r7}
 8002968:	b087      	sub	sp, #28
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e015      	b.n	80029ae <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	3308      	adds	r3, #8
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	e004      	b.n	80029a4 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4413      	add	r3, r2
 80029a0:	3314      	adds	r3, #20
 80029a2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	461a      	mov	r2, r3
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b089      	sub	sp, #36	@ 0x24
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_DAC_ConfigChannel+0x1c>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e042      	b.n	8002a60 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	795b      	ldrb	r3, [r3, #5]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_DAC_ConfigChannel+0x2c>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e03c      	b.n	8002a60 <HAL_DAC_ConfigChannel+0xa6>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2202      	movs	r2, #2
 80029f0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6819      	ldr	r1, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f003 0310 	and.w	r3, r3, #16
 8002a42:	22c0      	movs	r2, #192	@ 0xc0
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	400a      	ands	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002a5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3724      	adds	r7, #36	@ 0x24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e175      	b.n	8002d78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8164 	bne.w	8002d72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x56>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80be 	beq.w	8002d72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	4b66      	ldr	r3, [pc, #408]	@ (8002d90 <HAL_GPIO_Init+0x324>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a65      	ldr	r2, [pc, #404]	@ (8002d90 <HAL_GPIO_Init+0x324>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b63      	ldr	r3, [pc, #396]	@ (8002d90 <HAL_GPIO_Init+0x324>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c0e:	4a61      	ldr	r2, [pc, #388]	@ (8002d94 <HAL_GPIO_Init+0x328>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a58      	ldr	r2, [pc, #352]	@ (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d037      	beq.n	8002caa <HAL_GPIO_Init+0x23e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a57      	ldr	r2, [pc, #348]	@ (8002d9c <HAL_GPIO_Init+0x330>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d031      	beq.n	8002ca6 <HAL_GPIO_Init+0x23a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a56      	ldr	r2, [pc, #344]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02b      	beq.n	8002ca2 <HAL_GPIO_Init+0x236>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a55      	ldr	r2, [pc, #340]	@ (8002da4 <HAL_GPIO_Init+0x338>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d025      	beq.n	8002c9e <HAL_GPIO_Init+0x232>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a54      	ldr	r2, [pc, #336]	@ (8002da8 <HAL_GPIO_Init+0x33c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d01f      	beq.n	8002c9a <HAL_GPIO_Init+0x22e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a53      	ldr	r2, [pc, #332]	@ (8002dac <HAL_GPIO_Init+0x340>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d019      	beq.n	8002c96 <HAL_GPIO_Init+0x22a>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_GPIO_Init+0x344>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d013      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a51      	ldr	r2, [pc, #324]	@ (8002db4 <HAL_GPIO_Init+0x348>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d00d      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a50      	ldr	r2, [pc, #320]	@ (8002db8 <HAL_GPIO_Init+0x34c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d007      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002dbc <HAL_GPIO_Init+0x350>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d101      	bne.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c82:	2309      	movs	r3, #9
 8002c84:	e012      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c86:	230a      	movs	r3, #10
 8002c88:	e010      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c8a:	2308      	movs	r3, #8
 8002c8c:	e00e      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e00c      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x240>
 8002caa:	2300      	movs	r3, #0
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f002 0203 	and.w	r2, r2, #3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	@ (8002d94 <HAL_GPIO_Init+0x328>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a34      	ldr	r2, [pc, #208]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b32      	ldr	r3, [pc, #200]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a29      	ldr	r2, [pc, #164]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1e:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d42:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6c:	4a14      	ldr	r2, [pc, #80]	@ (8002dc0 <HAL_GPIO_Init+0x354>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f ae86 	bls.w	8002a8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40021400 	.word	0x40021400
 8002db0:	40021800 	.word	0x40021800
 8002db4:	40021c00 	.word	0x40021c00
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40022400 	.word	0x40022400
 8002dc0:	40013c00 	.word	0x40013c00

08002dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dd4:	787b      	ldrb	r3, [r7, #1]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dda:	887a      	ldrh	r2, [r7, #2]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de0:	e003      	b.n	8002dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	041a      	lsls	r2, r3, #16
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	619a      	str	r2, [r3, #24]
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002e00:	2300      	movs	r3, #0
 8002e02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e291      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8087 	beq.w	8002f2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e1c:	4b96      	ldr	r3, [pc, #600]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d00c      	beq.n	8002e42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e28:	4b93      	ldr	r3, [pc, #588]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 030c 	and.w	r3, r3, #12
 8002e30:	2b08      	cmp	r3, #8
 8002e32:	d112      	bne.n	8002e5a <HAL_RCC_OscConfig+0x62>
 8002e34:	4b90      	ldr	r3, [pc, #576]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e40:	d10b      	bne.n	8002e5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	4b8d      	ldr	r3, [pc, #564]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d06c      	beq.n	8002f28 <HAL_RCC_OscConfig+0x130>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d168      	bne.n	8002f28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e26b      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e62:	d106      	bne.n	8002e72 <HAL_RCC_OscConfig+0x7a>
 8002e64:	4b84      	ldr	r3, [pc, #528]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a83      	ldr	r2, [pc, #524]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e02e      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x9c>
 8002e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b7c      	ldr	r3, [pc, #496]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a7b      	ldr	r2, [pc, #492]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002e8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xc0>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a72      	ldr	r2, [pc, #456]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xd8>
 8002eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a6e      	ldr	r2, [pc, #440]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fb66 	bl	80025a8 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fb62 	bl	80025a8 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e21f      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b61      	ldr	r3, [pc, #388]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xe8>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f00:	f7ff fb52 	bl	80025a8 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff fb4e 	bl	80025a8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e20b      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b57      	ldr	r3, [pc, #348]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x110>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d069      	beq.n	800300a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f36:	4b50      	ldr	r3, [pc, #320]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x190>
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b47      	ldr	r3, [pc, #284]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1df      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b41      	ldr	r3, [pc, #260]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	493d      	ldr	r1, [pc, #244]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e040      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b39      	ldr	r3, [pc, #228]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a38      	ldr	r2, [pc, #224]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7ff fb04 	bl	80025a8 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7ff fb00 	bl	80025a8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e1bd      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb6:	4b30      	ldr	r3, [pc, #192]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4929      	ldr	r1, [pc, #164]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
 8002fd6:	e018      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd8:	4b27      	ldr	r3, [pc, #156]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a26      	ldr	r2, [pc, #152]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8002fde:	f023 0301 	bic.w	r3, r3, #1
 8002fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7ff fae0 	bl	80025a8 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fec:	f7ff fadc 	bl	80025a8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e199      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d038      	beq.n	8003088 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d019      	beq.n	8003052 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800301e:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	4a15      	ldr	r2, [pc, #84]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302a:	f7ff fabd 	bl	80025a8 <HAL_GetTick>
 800302e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003032:	f7ff fab9 	bl	80025a8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e176      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0f0      	beq.n	8003032 <HAL_RCC_OscConfig+0x23a>
 8003050:	e01a      	b.n	8003088 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003052:	4b09      	ldr	r3, [pc, #36]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003056:	4a08      	ldr	r2, [pc, #32]	@ (8003078 <HAL_RCC_OscConfig+0x280>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7ff faa3 	bl	80025a8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003066:	f7ff fa9f 	bl	80025a8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d903      	bls.n	800307c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e15c      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
 8003078:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b91      	ldr	r3, [pc, #580]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a4 	beq.w	80031de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b8b      	ldr	r3, [pc, #556]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b88      	ldr	r3, [pc, #544]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	4a87      	ldr	r2, [pc, #540]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ae:	4b85      	ldr	r3, [pc, #532]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030be:	4b82      	ldr	r3, [pc, #520]	@ (80032c8 <HAL_RCC_OscConfig+0x4d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030ca:	4b7f      	ldr	r3, [pc, #508]	@ (80032c8 <HAL_RCC_OscConfig+0x4d0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7e      	ldr	r2, [pc, #504]	@ (80032c8 <HAL_RCC_OscConfig+0x4d0>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7ff fa67 	bl	80025a8 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7ff fa63 	bl	80025a8 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	@ 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e120      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f0:	4b75      	ldr	r3, [pc, #468]	@ (80032c8 <HAL_RCC_OscConfig+0x4d0>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x31a>
 8003104:	4b6f      	ldr	r3, [pc, #444]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	4a6e      	ldr	r2, [pc, #440]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003110:	e02d      	b.n	800316e <HAL_RCC_OscConfig+0x376>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x33c>
 800311a:	4b6a      	ldr	r3, [pc, #424]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	4a69      	ldr	r2, [pc, #420]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	@ 0x70
 8003126:	4b67      	ldr	r3, [pc, #412]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a66      	ldr	r2, [pc, #408]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
 8003132:	e01c      	b.n	800316e <HAL_RCC_OscConfig+0x376>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x35e>
 800313c:	4b61      	ldr	r3, [pc, #388]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	4a60      	ldr	r2, [pc, #384]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	@ 0x70
 8003148:	4b5e      	ldr	r3, [pc, #376]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314c:	4a5d      	ldr	r2, [pc, #372]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6713      	str	r3, [r2, #112]	@ 0x70
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x376>
 8003156:	4b5b      	ldr	r3, [pc, #364]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	4a5a      	ldr	r2, [pc, #360]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	@ 0x70
 8003162:	4b58      	ldr	r3, [pc, #352]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	4a57      	ldr	r2, [pc, #348]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003176:	f7ff fa17 	bl	80025a8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7ff fa13 	bl	80025a8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0ce      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b4b      	ldr	r3, [pc, #300]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCC_OscConfig+0x386>
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7ff fa01 	bl	80025a8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7ff f9fd 	bl	80025a8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	4b40      	ldr	r3, [pc, #256]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b3c      	ldr	r3, [pc, #240]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	4a3b      	ldr	r2, [pc, #236]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80a4 	beq.w	8003330 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b36      	ldr	r3, [pc, #216]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d06b      	beq.n	80032cc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d149      	bne.n	8003290 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b31      	ldr	r3, [pc, #196]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a30      	ldr	r2, [pc, #192]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7ff f9ce 	bl	80025a8 <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003210:	f7ff f9ca 	bl	80025a8 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e087      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003222:	4b28      	ldr	r3, [pc, #160]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	019b      	lsls	r3, r3, #6
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	3b01      	subs	r3, #1
 8003248:	041b      	lsls	r3, r3, #16
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	061b      	lsls	r3, r3, #24
 8003252:	4313      	orrs	r3, r2
 8003254:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003256:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800325a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7ff f99e 	bl	80025a8 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003270:	f7ff f99a 	bl	80025a8 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e057      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0x478>
 800328e:	e04f      	b.n	8003330 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a0b      	ldr	r2, [pc, #44]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 8003296:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7ff f984 	bl	80025a8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a4:	f7ff f980 	bl	80025a8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e03d      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b03      	ldr	r3, [pc, #12]	@ (80032c4 <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x4ac>
 80032c2:	e035      	b.n	8003330 <HAL_RCC_OscConfig+0x538>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	@ (800333c <HAL_RCC_OscConfig+0x544>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d028      	beq.n	800332c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d121      	bne.n	800332c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d11a      	bne.n	800332c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032fc:	4013      	ands	r3, r2
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003302:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003304:	4293      	cmp	r3, r2
 8003306:	d111      	bne.n	800332c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003318:	429a      	cmp	r2, r3
 800331a:	d107      	bne.n	800332c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800

08003340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0d0      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b6a      	ldr	r3, [pc, #424]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d910      	bls.n	8003388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b67      	ldr	r3, [pc, #412]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 020f 	bic.w	r2, r3, #15
 800336e:	4965      	ldr	r1, [pc, #404]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	4313      	orrs	r3, r2
 8003374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b63      	ldr	r3, [pc, #396]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b8      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a0:	4b59      	ldr	r3, [pc, #356]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a58      	ldr	r2, [pc, #352]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b8:	4b53      	ldr	r3, [pc, #332]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a52      	ldr	r2, [pc, #328]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b50      	ldr	r3, [pc, #320]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	494d      	ldr	r1, [pc, #308]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d040      	beq.n	8003464 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b47      	ldr	r3, [pc, #284]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d115      	bne.n	8003422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e073      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e06b      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4936      	ldr	r1, [pc, #216]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003434:	f7ff f8b8 	bl	80025a8 <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7ff f8b4 	bl	80025a8 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e053      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b27      	ldr	r3, [pc, #156]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d210      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b24      	ldr	r3, [pc, #144]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 020f 	bic.w	r2, r3, #15
 800347a:	4922      	ldr	r1, [pc, #136]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b20      	ldr	r3, [pc, #128]	@ (8003504 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e032      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b19      	ldr	r3, [pc, #100]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4916      	ldr	r1, [pc, #88]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034be:	4b12      	ldr	r3, [pc, #72]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	490e      	ldr	r1, [pc, #56]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 f821 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003508 <HAL_RCC_ClockConfig+0x1c8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	490a      	ldr	r1, [pc, #40]	@ (800350c <HAL_RCC_ClockConfig+0x1cc>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a09      	ldr	r2, [pc, #36]	@ (8003510 <HAL_RCC_ClockConfig+0x1d0>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ee:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_RCC_ClockConfig+0x1d4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe ff1c 	bl	8002330 <HAL_InitTick>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00
 8003508:	40023800 	.word	0x40023800
 800350c:	0800a334 	.word	0x0800a334
 8003510:	2000003c 	.word	0x2000003c
 8003514:	20000040 	.word	0x20000040

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b090      	sub	sp, #64	@ 0x40
 800351e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003530:	4b59      	ldr	r3, [pc, #356]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d00d      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x40>
 800353c:	2b08      	cmp	r3, #8
 800353e:	f200 80a1 	bhi.w	8003684 <HAL_RCC_GetSysClockFreq+0x16c>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003546:	2b04      	cmp	r3, #4
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x3a>
 800354a:	e09b      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_GetSysClockFreq+0x184>)
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003550:	e09b      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003552:	4b53      	ldr	r3, [pc, #332]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003556:	e098      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b4f      	ldr	r3, [pc, #316]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003562:	4b4d      	ldr	r3, [pc, #308]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b4a      	ldr	r3, [pc, #296]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	2200      	movs	r2, #0
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	627a      	str	r2, [r7, #36]	@ 0x24
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003580:	2100      	movs	r1, #0
 8003582:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003584:	fb03 f201 	mul.w	r2, r3, r1
 8003588:	2300      	movs	r3, #0
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	4413      	add	r3, r2
 8003590:	4a43      	ldr	r2, [pc, #268]	@ (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003592:	fba0 1202 	umull	r1, r2, r0, r2
 8003596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003598:	460a      	mov	r2, r1
 800359a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800359c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359e:	4413      	add	r3, r2
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a4:	2200      	movs	r2, #0
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035b2:	f7fd fac3 	bl	8000b3c <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4613      	mov	r3, r2
 80035bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035be:	e053      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c0:	4b35      	ldr	r3, [pc, #212]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	2200      	movs	r2, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	617a      	str	r2, [r7, #20]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035d2:	f04f 0b00 	mov.w	fp, #0
 80035d6:	4652      	mov	r2, sl
 80035d8:	465b      	mov	r3, fp
 80035da:	f04f 0000 	mov.w	r0, #0
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e8:	0150      	lsls	r0, r2, #5
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	ebb2 080a 	subs.w	r8, r2, sl
 80035f2:	eb63 090b 	sbc.w	r9, r3, fp
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003602:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003606:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800360a:	ebb2 0408 	subs.w	r4, r2, r8
 800360e:	eb63 0509 	sbc.w	r5, r3, r9
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	00eb      	lsls	r3, r5, #3
 800361c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003620:	00e2      	lsls	r2, r4, #3
 8003622:	4614      	mov	r4, r2
 8003624:	461d      	mov	r5, r3
 8003626:	eb14 030a 	adds.w	r3, r4, sl
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	eb45 030b 	adc.w	r3, r5, fp
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003652:	2200      	movs	r2, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	60fa      	str	r2, [r7, #12]
 8003658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800365c:	f7fd fa6e 	bl	8000b3c <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003678:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b05      	ldr	r3, [pc, #20]	@ (800369c <HAL_RCC_GetSysClockFreq+0x184>)
 8003686:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800368c:	4618      	mov	r0, r3
 800368e:	3740      	adds	r7, #64	@ 0x40
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	017d7840 	.word	0x017d7840

080036a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	@ (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	2000003c 	.word	0x2000003c

080036bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036c0:	f7ff fff0 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	0a9b      	lsrs	r3, r3, #10
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	@ (80036e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	0800a344 	.word	0x0800a344

080036e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	220f      	movs	r2, #15
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f4:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <HAL_RCC_GetClockConfig+0x5c>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003726:	4b07      	ldr	r3, [pc, #28]	@ (8003744 <HAL_RCC_GetClockConfig+0x60>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	40023c00 	.word	0x40023c00

08003748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e09d      	b.n	8003896 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d108      	bne.n	8003774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376a:	d009      	beq.n	8003780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	e005      	b.n	8003780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fe fcd4 	bl	8002148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037c0:	d902      	bls.n	80037c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037c2:	2300      	movs	r3, #0
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	e002      	b.n	80037ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80037d6:	d007      	beq.n	80037e8 <HAL_SPI_Init+0xa0>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e0:	d002      	beq.n	80037e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	ea42 0103 	orr.w	r1, r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003832:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	f003 0204 	and.w	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003864:	ea42 0103 	orr.w	r1, r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69da      	ldr	r2, [r3, #28]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003884:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b08a      	sub	sp, #40	@ 0x28
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038ac:	2301      	movs	r3, #1
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x26>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e20a      	b.n	8003cda <HAL_SPI_TransmitReceive+0x43c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038cc:	f7fe fe6c 	bl	80025a8 <HAL_GetTick>
 80038d0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80038d8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038e8:	7efb      	ldrb	r3, [r7, #27]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d00e      	beq.n	800390c <HAL_SPI_TransmitReceive+0x6e>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038f4:	d106      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_TransmitReceive+0x66>
 80038fe:	7efb      	ldrb	r3, [r7, #27]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d003      	beq.n	800390c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800390a:	e1e0      	b.n	8003cce <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_SPI_TransmitReceive+0x80>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_SPI_TransmitReceive+0x80>
 8003918:	887b      	ldrh	r3, [r7, #2]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d103      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8003924:	e1d3      	b.n	8003cce <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b04      	cmp	r3, #4
 8003930:	d003      	beq.n	800393a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	887a      	ldrh	r2, [r7, #2]
 800394a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	887a      	ldrh	r2, [r7, #2]
 8003952:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	887a      	ldrh	r2, [r7, #2]
 8003966:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800397c:	d802      	bhi.n	8003984 <HAL_SPI_TransmitReceive+0xe6>
 800397e:	8a3b      	ldrh	r3, [r7, #16]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d908      	bls.n	8003996 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e007      	b.n	80039a6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039a4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b0:	2b40      	cmp	r3, #64	@ 0x40
 80039b2:	d007      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039cc:	f240 8081 	bls.w	8003ad2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_SPI_TransmitReceive+0x140>
 80039d8:	8a7b      	ldrh	r3, [r7, #18]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d16d      	bne.n	8003aba <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a02:	e05a      	b.n	8003aba <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d11b      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x1ac>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d016      	beq.n	8003a4a <HAL_SPI_TransmitReceive+0x1ac>
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d113      	bne.n	8003a4a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d11c      	bne.n	8003a92 <HAL_SPI_TransmitReceive+0x1f4>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d016      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a92:	f7fe fd89 	bl	80025a8 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d80b      	bhi.n	8003aba <HAL_SPI_TransmitReceive+0x21c>
 8003aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d007      	beq.n	8003aba <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003ab8:	e109      	b.n	8003cce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d19f      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x166>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d199      	bne.n	8003a04 <HAL_SPI_TransmitReceive+0x166>
 8003ad0:	e0e3      	b.n	8003c9a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_SPI_TransmitReceive+0x244>
 8003ada:	8a7b      	ldrh	r3, [r7, #18]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 80cf 	bne.w	8003c80 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d912      	bls.n	8003b12 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	881a      	ldrh	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003afc:	1c9a      	adds	r2, r3, #2
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	3b02      	subs	r3, #2
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b10:	e0b6      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	330c      	adds	r3, #12
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b38:	e0a2      	b.n	8003c80 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d134      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x314>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d02f      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x314>
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d12c      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d912      	bls.n	8003b88 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b66:	881a      	ldrh	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b72:	1c9a      	adds	r2, r3, #2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b02      	subs	r3, #2
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b86:	e012      	b.n	8003bae <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	330c      	adds	r3, #12
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d148      	bne.n	8003c52 <HAL_SPI_TransmitReceive+0x3b4>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d042      	beq.n	8003c52 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d923      	bls.n	8003c20 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	b292      	uxth	r2, r2
 8003be4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bea:	1c9a      	adds	r2, r3, #2
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b02      	subs	r3, #2
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d81f      	bhi.n	8003c4e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	e016      	b.n	8003c4e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f103 020c 	add.w	r2, r3, #12
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	b2d2      	uxtb	r2, r2
 8003c30:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c52:	f7fe fca9 	bl	80025a8 <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d803      	bhi.n	8003c6a <HAL_SPI_TransmitReceive+0x3cc>
 8003c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d102      	bne.n	8003c70 <HAL_SPI_TransmitReceive+0x3d2>
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003c7e:	e026      	b.n	8003cce <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f47f af57 	bne.w	8003b3a <HAL_SPI_TransmitReceive+0x29c>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f47f af50 	bne.w	8003b3a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f93e 	bl	8003f20 <SPI_EndRxTxTransaction>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d005      	beq.n	8003cb6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cc4:	e003      	b.n	8003cce <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	@ 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003cf4:	f7fe fc58 	bl	80025a8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4413      	add	r3, r2
 8003d02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d04:	f7fe fc50 	bl	80025a8 <HAL_GetTick>
 8003d08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d0a:	4b39      	ldr	r3, [pc, #228]	@ (8003df0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	015b      	lsls	r3, r3, #5
 8003d10:	0d1b      	lsrs	r3, r3, #20
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	fb02 f303 	mul.w	r3, r2, r3
 8003d18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d1a:	e054      	b.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d050      	beq.n	8003dc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d24:	f7fe fc40 	bl	80025a8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d902      	bls.n	8003d3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d13d      	bne.n	8003db6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d52:	d111      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5c:	d004      	beq.n	8003d68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d66:	d107      	bne.n	8003d78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d80:	d10f      	bne.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003da0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e017      	b.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2301      	moveq	r3, #1
 8003dd8:	2300      	movne	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d19b      	bne.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	2000003c 	.word	0x2000003c

08003df4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	@ 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e06:	f7fe fbcf 	bl	80025a8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	4413      	add	r3, r2
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e16:	f7fe fbc7 	bl	80025a8 <HAL_GetTick>
 8003e1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e24:	4b3d      	ldr	r3, [pc, #244]	@ (8003f1c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	00da      	lsls	r2, r3, #3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	0d1b      	lsrs	r3, r3, #20
 8003e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003e3c:	e060      	b.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e44:	d107      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d104      	bne.n	8003e56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5c:	d050      	beq.n	8003f00 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5e:	f7fe fba3 	bl	80025a8 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d902      	bls.n	8003e74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d13d      	bne.n	8003ef0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8c:	d111      	bne.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e96:	d004      	beq.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea0:	d107      	bne.n	8003eb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eba:	d10f      	bne.n	8003edc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003eda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e010      	b.n	8003f12 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d196      	bne.n	8003e3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3728      	adds	r7, #40	@ 0x28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	2000003c 	.word	0x2000003c

08003f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff ff5b 	bl	8003df4 <SPI_WaitFifoStateUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e046      	b.n	8003fe2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003f54:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <SPI_EndRxTxTransaction+0xcc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a25      	ldr	r2, [pc, #148]	@ (8003ff0 <SPI_EndRxTxTransaction+0xd0>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0d5b      	lsrs	r3, r3, #21
 8003f60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f64:	fb02 f303 	mul.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f72:	d112      	bne.n	8003f9a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2180      	movs	r1, #128	@ 0x80
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f7ff feb0 	bl	8003ce4 <SPI_WaitFlagStateUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d016      	beq.n	8003fb8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8e:	f043 0220 	orr.w	r2, r3, #32
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e023      	b.n	8003fe2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb0:	2b80      	cmp	r3, #128	@ 0x80
 8003fb2:	d0f2      	beq.n	8003f9a <SPI_EndRxTxTransaction+0x7a>
 8003fb4:	e000      	b.n	8003fb8 <SPI_EndRxTxTransaction+0x98>
        break;
 8003fb6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f7ff ff15 	bl	8003df4 <SPI_WaitFifoStateUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d007      	beq.n	8003fe0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	2000003c 	.word	0x2000003c
 8003ff0:	165e9f81 	.word	0x165e9f81

08003ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e049      	b.n	800409a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe f950 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f000 fc4c 	bl	80048d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d001      	beq.n	80040bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e04c      	b.n	8004156 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <HAL_TIM_Base_Start+0xc0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d022      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d6:	d01d      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a22      	ldr	r2, [pc, #136]	@ (8004168 <HAL_TIM_Base_Start+0xc4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d018      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a21      	ldr	r2, [pc, #132]	@ (800416c <HAL_TIM_Base_Start+0xc8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004170 <HAL_TIM_Base_Start+0xcc>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d00e      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004174 <HAL_TIM_Base_Start+0xd0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a1c      	ldr	r2, [pc, #112]	@ (8004178 <HAL_TIM_Base_Start+0xd4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_Base_Start+0x70>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1b      	ldr	r2, [pc, #108]	@ (800417c <HAL_TIM_Base_Start+0xd8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d115      	bne.n	8004140 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689a      	ldr	r2, [r3, #8]
 800411a:	4b19      	ldr	r3, [pc, #100]	@ (8004180 <HAL_TIM_Base_Start+0xdc>)
 800411c:	4013      	ands	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d015      	beq.n	8004152 <HAL_TIM_Base_Start+0xae>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800412c:	d011      	beq.n	8004152 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0201 	orr.w	r2, r2, #1
 800413c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413e:	e008      	b.n	8004152 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e000      	b.n	8004154 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40010000 	.word	0x40010000
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800
 8004170:	40000c00 	.word	0x40000c00
 8004174:	40010400 	.word	0x40010400
 8004178:	40014000 	.word	0x40014000
 800417c:	40001800 	.word	0x40001800
 8004180:	00010007 	.word	0x00010007

08004184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d001      	beq.n	800419c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e054      	b.n	8004246 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68da      	ldr	r2, [r3, #12]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a26      	ldr	r2, [pc, #152]	@ (8004254 <HAL_TIM_Base_Start_IT+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d022      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c6:	d01d      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a22      	ldr	r2, [pc, #136]	@ (8004258 <HAL_TIM_Base_Start_IT+0xd4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d018      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	@ (800425c <HAL_TIM_Base_Start_IT+0xd8>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	@ (8004260 <HAL_TIM_Base_Start_IT+0xdc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00e      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004264 <HAL_TIM_Base_Start_IT+0xe0>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d009      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004268 <HAL_TIM_Base_Start_IT+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d004      	beq.n	8004204 <HAL_TIM_Base_Start_IT+0x80>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <HAL_TIM_Base_Start_IT+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d115      	bne.n	8004230 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <HAL_TIM_Base_Start_IT+0xec>)
 800420c:	4013      	ands	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b06      	cmp	r3, #6
 8004214:	d015      	beq.n	8004242 <HAL_TIM_Base_Start_IT+0xbe>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800421c:	d011      	beq.n	8004242 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800422e:	e008      	b.n	8004242 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e000      	b.n	8004244 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800
 8004270:	00010007 	.word	0x00010007

08004274 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e08f      	b.n	80043a8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7fd ff97 	bl	80021d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2202      	movs	r2, #2
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6899      	ldr	r1, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b3e      	ldr	r3, [pc, #248]	@ (80043b0 <HAL_TIM_Encoder_Init+0x13c>)
 80042b6:	400b      	ands	r3, r1
 80042b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f000 fb03 	bl	80048d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <HAL_TIM_Encoder_Init+0x140>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	021b      	lsls	r3, r3, #8
 80042fe:	4313      	orrs	r3, r2
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <HAL_TIM_Encoder_Init+0x144>)
 800430a:	4013      	ands	r3, r2
 800430c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <HAL_TIM_Encoder_Init+0x148>)
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	4313      	orrs	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4313      	orrs	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	fffebff8 	.word	0xfffebff8
 80043b4:	fffffcfc 	.word	0xfffffcfc
 80043b8:	fffff3f3 	.word	0xfffff3f3
 80043bc:	ffff0f0f 	.word	0xffff0f0f

080043c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d110      	bne.n	8004412 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043f6:	7b7b      	ldrb	r3, [r7, #13]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e069      	b.n	80044d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004410:	e031      	b.n	8004476 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d110      	bne.n	800443a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800441e:	7b3b      	ldrb	r3, [r7, #12]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e055      	b.n	80044d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004438:	e01d      	b.n	8004476 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d108      	bne.n	8004452 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004446:	7b7b      	ldrb	r3, [r7, #13]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d102      	bne.n	8004452 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800444c:	7b3b      	ldrb	r3, [r7, #12]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e03e      	b.n	80044d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_TIM_Encoder_Start+0xc4>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b04      	cmp	r3, #4
 8004480:	d008      	beq.n	8004494 <HAL_TIM_Encoder_Start+0xd4>
 8004482:	e00f      	b.n	80044a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	2100      	movs	r1, #0
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fb65 	bl	8004b5c <TIM_CCxChannelCmd>
      break;
 8004492:	e016      	b.n	80044c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	2104      	movs	r1, #4
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb5d 	bl	8004b5c <TIM_CCxChannelCmd>
      break;
 80044a2:	e00e      	b.n	80044c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2201      	movs	r2, #1
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb55 	bl	8004b5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2201      	movs	r2, #1
 80044b8:	2104      	movs	r1, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb4e 	bl	8004b5c <TIM_CCxChannelCmd>
      break;
 80044c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d020      	beq.n	8004540 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01b      	beq.n	8004540 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0202 	mvn.w	r2, #2
 8004510:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f9b4 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f9a6 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f9b7 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	d020      	beq.n	800458c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d01b      	beq.n	800458c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f06f 0204 	mvn.w	r2, #4
 800455c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2202      	movs	r2, #2
 8004562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f98e 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 8004578:	e005      	b.n	8004586 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f980 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f991 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d020      	beq.n	80045d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0208 	mvn.w	r2, #8
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2204      	movs	r2, #4
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f968 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f95a 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f96b 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0310 	and.w	r3, r3, #16
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d020      	beq.n	8004624 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d01b      	beq.n	8004624 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2208      	movs	r2, #8
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f942 	bl	8004894 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f934 	bl	8004880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 f945 	bl	80048a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f06f 0201 	mvn.w	r2, #1
 8004640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7fd fd00 	bl	8002048 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00c      	beq.n	8004676 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004662:	2b00      	cmp	r3, #0
 8004664:	d007      	beq.n	8004676 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800466e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb31 	bl	8004cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb29 	bl	8004cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00c      	beq.n	80046be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d007      	beq.n	80046be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f8ff 	bl	80048bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00c      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0220 	mvn.w	r2, #32
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 faf1 	bl	8004cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004700:	2b01      	cmp	r3, #1
 8004702:	d101      	bne.n	8004708 <HAL_TIM_ConfigClockSource+0x1c>
 8004704:	2302      	movs	r3, #2
 8004706:	e0b4      	b.n	8004872 <HAL_TIM_ConfigClockSource+0x186>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	4b56      	ldr	r3, [pc, #344]	@ (800487c <HAL_TIM_ConfigClockSource+0x190>)
 8004724:	4013      	ands	r3, r2
 8004726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004740:	d03e      	beq.n	80047c0 <HAL_TIM_ConfigClockSource+0xd4>
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004746:	f200 8087 	bhi.w	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 800474a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474e:	f000 8086 	beq.w	800485e <HAL_TIM_ConfigClockSource+0x172>
 8004752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004756:	d87f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004758:	2b70      	cmp	r3, #112	@ 0x70
 800475a:	d01a      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xa6>
 800475c:	2b70      	cmp	r3, #112	@ 0x70
 800475e:	d87b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004760:	2b60      	cmp	r3, #96	@ 0x60
 8004762:	d050      	beq.n	8004806 <HAL_TIM_ConfigClockSource+0x11a>
 8004764:	2b60      	cmp	r3, #96	@ 0x60
 8004766:	d877      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004768:	2b50      	cmp	r3, #80	@ 0x50
 800476a:	d03c      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0xfa>
 800476c:	2b50      	cmp	r3, #80	@ 0x50
 800476e:	d873      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b40      	cmp	r3, #64	@ 0x40
 8004772:	d058      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0x13a>
 8004774:	2b40      	cmp	r3, #64	@ 0x40
 8004776:	d86f      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b30      	cmp	r3, #48	@ 0x30
 800477a:	d064      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800477c:	2b30      	cmp	r3, #48	@ 0x30
 800477e:	d86b      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b20      	cmp	r3, #32
 8004782:	d060      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004784:	2b20      	cmp	r3, #32
 8004786:	d867      	bhi.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d05c      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 800478c:	2b10      	cmp	r3, #16
 800478e:	d05a      	beq.n	8004846 <HAL_TIM_ConfigClockSource+0x15a>
 8004790:	e062      	b.n	8004858 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047a2:	f000 f9bb 	bl	8004b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80047b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	609a      	str	r2, [r3, #8]
      break;
 80047be:	e04f      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047d0:	f000 f9a4 	bl	8004b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e2:	609a      	str	r2, [r3, #8]
      break;
 80047e4:	e03c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047f2:	461a      	mov	r2, r3
 80047f4:	f000 f918 	bl	8004a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2150      	movs	r1, #80	@ 0x50
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 f971 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004804:	e02c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004812:	461a      	mov	r2, r3
 8004814:	f000 f937 	bl	8004a86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2160      	movs	r1, #96	@ 0x60
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f961 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004824:	e01c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004832:	461a      	mov	r2, r3
 8004834:	f000 f8f8 	bl	8004a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2140      	movs	r1, #64	@ 0x40
 800483e:	4618      	mov	r0, r3
 8004840:	f000 f951 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004844:	e00c      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	4610      	mov	r0, r2
 8004852:	f000 f948 	bl	8004ae6 <TIM_ITRx_SetConfig>
      break;
 8004856:	e003      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      break;
 800485c:	e000      	b.n	8004860 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800485e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	fffeff88 	.word	0xfffeff88

08004880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a46      	ldr	r2, [pc, #280]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d013      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ee:	d00f      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a43      	ldr	r2, [pc, #268]	@ (8004a00 <TIM_Base_SetConfig+0x130>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00b      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a42      	ldr	r2, [pc, #264]	@ (8004a04 <TIM_Base_SetConfig+0x134>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d007      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a41      	ldr	r2, [pc, #260]	@ (8004a08 <TIM_Base_SetConfig+0x138>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d003      	beq.n	8004910 <TIM_Base_SetConfig+0x40>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a40      	ldr	r2, [pc, #256]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d108      	bne.n	8004922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a35      	ldr	r2, [pc, #212]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004930:	d027      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a32      	ldr	r2, [pc, #200]	@ (8004a00 <TIM_Base_SetConfig+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d023      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a31      	ldr	r2, [pc, #196]	@ (8004a04 <TIM_Base_SetConfig+0x134>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d01f      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a30      	ldr	r2, [pc, #192]	@ (8004a08 <TIM_Base_SetConfig+0x138>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d01b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2f      	ldr	r2, [pc, #188]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d017      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2e      	ldr	r2, [pc, #184]	@ (8004a10 <TIM_Base_SetConfig+0x140>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d013      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2d      	ldr	r2, [pc, #180]	@ (8004a14 <TIM_Base_SetConfig+0x144>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d00f      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a2c      	ldr	r2, [pc, #176]	@ (8004a18 <TIM_Base_SetConfig+0x148>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00b      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a2b      	ldr	r2, [pc, #172]	@ (8004a1c <TIM_Base_SetConfig+0x14c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d007      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2a      	ldr	r2, [pc, #168]	@ (8004a20 <TIM_Base_SetConfig+0x150>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d003      	beq.n	8004982 <TIM_Base_SetConfig+0xb2>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a29      	ldr	r2, [pc, #164]	@ (8004a24 <TIM_Base_SetConfig+0x154>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a10      	ldr	r2, [pc, #64]	@ (80049fc <TIM_Base_SetConfig+0x12c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0xf8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a12      	ldr	r2, [pc, #72]	@ (8004a0c <TIM_Base_SetConfig+0x13c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d103      	bne.n	80049d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d105      	bne.n	80049ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f023 0201 	bic.w	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	611a      	str	r2, [r3, #16]
  }
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40010400 	.word	0x40010400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800
 8004a1c:	40001800 	.word	0x40001800
 8004a20:	40001c00 	.word	0x40001c00
 8004a24:	40002000 	.word	0x40002000

08004a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 030a 	bic.w	r3, r3, #10
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f023 0210 	bic.w	r2, r3, #16
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ab0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	031b      	lsls	r3, r3, #12
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ac2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	621a      	str	r2, [r3, #32]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f043 0307 	orr.w	r3, r3, #7
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	609a      	str	r2, [r3, #8]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	021a      	lsls	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	609a      	str	r2, [r3, #8]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	2201      	movs	r2, #1
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	401a      	ands	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1a      	ldr	r2, [r3, #32]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	431a      	orrs	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e06d      	b.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a30      	ldr	r2, [pc, #192]	@ (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d004      	beq.n	8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2f      	ldr	r2, [pc, #188]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d108      	bne.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bfa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a20      	ldr	r2, [pc, #128]	@ (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d022      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c32:	d01d      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d018      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d013      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00e      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a15      	ldr	r2, [pc, #84]	@ (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d009      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10c      	bne.n	8004c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	40010400 	.word	0x40010400
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40001800 	.word	0x40001800

08004cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ccc:	bf00      	nop
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d04:	4904      	ldr	r1, [pc, #16]	@ (8004d18 <MX_FATFS_Init+0x18>)
 8004d06:	4805      	ldr	r0, [pc, #20]	@ (8004d1c <MX_FATFS_Init+0x1c>)
 8004d08:	f002 fb42 	bl	8007390 <FATFS_LinkDriver>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <MX_FATFS_Init+0x20>)
 8004d12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d14:	bf00      	nop
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	20001e1c 	.word	0x20001e1c
 8004d1c:	20000048 	.word	0x20000048
 8004d20:	20001e18 	.word	0x20001e18

08004d24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <USER_initialize+0x24>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004d44:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <USER_initialize+0x24>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	20000045 	.word	0x20000045

08004d5c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004d66:	4b06      	ldr	r3, [pc, #24]	@ (8004d80 <USER_status+0x24>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004d6c:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <USER_status+0x24>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000045 	.word	0x20000045

08004d84 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004d94:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b085      	sub	sp, #20
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004db2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	603a      	str	r2, [r7, #0]
 8004dca:	71fb      	strb	r3, [r7, #7]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
    return res;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	4603      	mov	r3, r0
 8004dec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <disk_status+0x30>)
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	79fa      	ldrb	r2, [r7, #7]
 8004dfc:	4905      	ldr	r1, [pc, #20]	@ (8004e14 <disk_status+0x30>)
 8004dfe:	440a      	add	r2, r1
 8004e00:	7a12      	ldrb	r2, [r2, #8]
 8004e02:	4610      	mov	r0, r2
 8004e04:	4798      	blx	r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20001e48 	.word	0x20001e48

08004e18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	4a0d      	ldr	r2, [pc, #52]	@ (8004e60 <disk_initialize+0x48>)
 8004e2a:	5cd3      	ldrb	r3, [r2, r3]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d111      	bne.n	8004e54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	4a0b      	ldr	r2, [pc, #44]	@ (8004e60 <disk_initialize+0x48>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <disk_initialize+0x48>)
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	79fa      	ldrb	r2, [r7, #7]
 8004e46:	4906      	ldr	r1, [pc, #24]	@ (8004e60 <disk_initialize+0x48>)
 8004e48:	440a      	add	r2, r1
 8004e4a:	7a12      	ldrb	r2, [r2, #8]
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	4798      	blx	r3
 8004e50:	4603      	mov	r3, r0
 8004e52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20001e48 	.word	0x20001e48

08004e64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ea0 <disk_read+0x3c>)
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	689c      	ldr	r4, [r3, #8]
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	4a07      	ldr	r2, [pc, #28]	@ (8004ea0 <disk_read+0x3c>)
 8004e84:	4413      	add	r3, r2
 8004e86:	7a18      	ldrb	r0, [r3, #8]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	47a0      	blx	r4
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20001e48 	.word	0x20001e48

08004ea4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ea4:	b590      	push	{r4, r7, lr}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60b9      	str	r1, [r7, #8]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee0 <disk_write+0x3c>)
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	68dc      	ldr	r4, [r3, #12]
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
 8004ec2:	4a07      	ldr	r2, [pc, #28]	@ (8004ee0 <disk_write+0x3c>)
 8004ec4:	4413      	add	r3, r2
 8004ec6:	7a18      	ldrb	r0, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	47a0      	blx	r4
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd90      	pop	{r4, r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20001e48 	.word	0x20001e48

08004ee4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	4603      	mov	r3, r0
 8004eec:	603a      	str	r2, [r7, #0]
 8004eee:	71fb      	strb	r3, [r7, #7]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	4a09      	ldr	r2, [pc, #36]	@ (8004f1c <disk_ioctl+0x38>)
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	4413      	add	r3, r2
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	4906      	ldr	r1, [pc, #24]	@ (8004f1c <disk_ioctl+0x38>)
 8004f04:	440a      	add	r2, r1
 8004f06:	7a10      	ldrb	r0, [r2, #8]
 8004f08:	79b9      	ldrb	r1, [r7, #6]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	4798      	blx	r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20001e48 	.word	0x20001e48

08004f20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004f30:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f34:	021b      	lsls	r3, r3, #8
 8004f36:	b21a      	sxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b21b      	sxth	r3, r3
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b21b      	sxth	r3, r3
 8004f42:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004f44:	89fb      	ldrh	r3, [r7, #14]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3303      	adds	r3, #3
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	3202      	adds	r2, #2
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	3201      	adds	r2, #1
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	021b      	lsls	r3, r3, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	7812      	ldrb	r2, [r2, #0]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]
	return rv;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	1c5a      	adds	r2, r3, #1
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	b2d2      	uxtb	r2, r2
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	0a1b      	lsrs	r3, r3, #8
 8004fb4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	887a      	ldrh	r2, [r7, #2]
 8004fbe:	b2d2      	uxtb	r2, r2
 8004fc0:	701a      	strb	r2, [r3, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	0a1b      	lsrs	r3, r3, #8
 8004fe8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	701a      	strb	r2, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	0a1b      	lsrs	r3, r3, #8
 800500c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005026:	b480      	push	{r7}
 8005028:	b087      	sub	sp, #28
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00d      	beq.n	800505c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	1c53      	adds	r3, r2, #1
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	1c59      	adds	r1, r3, #1
 800504a:	6179      	str	r1, [r7, #20]
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	607b      	str	r3, [r7, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f1      	bne.n	8005040 <mem_cpy+0x1a>
	}
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	617a      	str	r2, [r7, #20]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3b01      	subs	r3, #1
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f3      	bne.n	8005078 <mem_set+0x10>
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800509e:	b480      	push	{r7}
 80050a0:	b089      	sub	sp, #36	@ 0x24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	61fa      	str	r2, [r7, #28]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	4619      	mov	r1, r3
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	61ba      	str	r2, [r7, #24]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	1acb      	subs	r3, r1, r3
 80050ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <mem_cmp+0x40>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0eb      	beq.n	80050b6 <mem_cmp+0x18>

	return r;
 80050de:	697b      	ldr	r3, [r7, #20]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3724      	adds	r7, #36	@ 0x24
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80050f6:	e002      	b.n	80050fe <chk_chr+0x12>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3301      	adds	r3, #1
 80050fc:	607b      	str	r3, [r7, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <chk_chr+0x26>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4293      	cmp	r3, r2
 8005110:	d1f2      	bne.n	80050f8 <chk_chr+0xc>
	return *str;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	781b      	ldrb	r3, [r3, #0]
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <lock_fs+0x22>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	4618      	mov	r0, r3
 8005136:	f002 f93a 	bl	80073ae <ff_req_grant>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <lock_fs+0x22>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <lock_fs+0x24>
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	460b      	mov	r3, r1
 8005158:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00d      	beq.n	800517c <unlock_fs+0x2e>
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	2b0c      	cmp	r3, #12
 8005164:	d00a      	beq.n	800517c <unlock_fs+0x2e>
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	2b0b      	cmp	r3, #11
 800516a:	d007      	beq.n	800517c <unlock_fs+0x2e>
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d004      	beq.n	800517c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	4618      	mov	r0, r3
 8005178:	f002 f92e 	bl	80073d8 <ff_rel_grant>
	}
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800518e:	2300      	movs	r3, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e029      	b.n	80051ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005198:	4a27      	ldr	r2, [pc, #156]	@ (8005238 <chk_lock+0xb4>)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	4413      	add	r3, r2
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01d      	beq.n	80051e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051a6:	4a24      	ldr	r2, [pc, #144]	@ (8005238 <chk_lock+0xb4>)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d116      	bne.n	80051e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80051b8:	4a1f      	ldr	r2, [pc, #124]	@ (8005238 <chk_lock+0xb4>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	011b      	lsls	r3, r3, #4
 80051be:	4413      	add	r3, r2
 80051c0:	3304      	adds	r3, #4
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10c      	bne.n	80051e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005238 <chk_lock+0xb4>)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	4413      	add	r3, r2
 80051d4:	3308      	adds	r3, #8
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80051dc:	429a      	cmp	r2, r3
 80051de:	d102      	bne.n	80051e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051e0:	e007      	b.n	80051f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3301      	adds	r3, #1
 80051ea:	60fb      	str	r3, [r7, #12]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d9d2      	bls.n	8005198 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d109      	bne.n	800520c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d102      	bne.n	8005204 <chk_lock+0x80>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d101      	bne.n	8005208 <chk_lock+0x84>
 8005204:	2300      	movs	r3, #0
 8005206:	e010      	b.n	800522a <chk_lock+0xa6>
 8005208:	2312      	movs	r3, #18
 800520a:	e00e      	b.n	800522a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d108      	bne.n	8005224 <chk_lock+0xa0>
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <chk_lock+0xb4>)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	330c      	adds	r3, #12
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005222:	d101      	bne.n	8005228 <chk_lock+0xa4>
 8005224:	2310      	movs	r3, #16
 8005226:	e000      	b.n	800522a <chk_lock+0xa6>
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20001e28 	.word	0x20001e28

0800523c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	e002      	b.n	800524e <enq_lock+0x12>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3301      	adds	r3, #1
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d806      	bhi.n	8005262 <enq_lock+0x26>
 8005254:	4a09      	ldr	r2, [pc, #36]	@ (800527c <enq_lock+0x40>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4413      	add	r3, r2
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f2      	bne.n	8005248 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b02      	cmp	r3, #2
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
}
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	20001e28 	.word	0x20001e28

08005280 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e01f      	b.n	80052d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005290:	4a41      	ldr	r2, [pc, #260]	@ (8005398 <inc_lock+0x118>)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d113      	bne.n	80052ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005398 <inc_lock+0x118>)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	4413      	add	r3, r2
 80052aa:	3304      	adds	r3, #4
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d109      	bne.n	80052ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80052b6:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <inc_lock+0x118>)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4413      	add	r3, r2
 80052be:	3308      	adds	r3, #8
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d006      	beq.n	80052d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3301      	adds	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d9dc      	bls.n	8005290 <inc_lock+0x10>
 80052d6:	e000      	b.n	80052da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80052d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d132      	bne.n	8005346 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e002      	b.n	80052ec <inc_lock+0x6c>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	3301      	adds	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d806      	bhi.n	8005300 <inc_lock+0x80>
 80052f2:	4a29      	ldr	r2, [pc, #164]	@ (8005398 <inc_lock+0x118>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f2      	bne.n	80052e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d101      	bne.n	800530a <inc_lock+0x8a>
 8005306:	2300      	movs	r3, #0
 8005308:	e040      	b.n	800538c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4922      	ldr	r1, [pc, #136]	@ (8005398 <inc_lock+0x118>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	440b      	add	r3, r1
 8005316:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	491e      	ldr	r1, [pc, #120]	@ (8005398 <inc_lock+0x118>)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	440b      	add	r3, r1
 8005324:	3304      	adds	r3, #4
 8005326:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695a      	ldr	r2, [r3, #20]
 800532c:	491a      	ldr	r1, [pc, #104]	@ (8005398 <inc_lock+0x118>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	440b      	add	r3, r1
 8005334:	3308      	adds	r3, #8
 8005336:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005338:	4a17      	ldr	r2, [pc, #92]	@ (8005398 <inc_lock+0x118>)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	4413      	add	r3, r2
 8005340:	330c      	adds	r3, #12
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <inc_lock+0xe0>
 800534c:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <inc_lock+0x118>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	4413      	add	r3, r2
 8005354:	330c      	adds	r3, #12
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <inc_lock+0xe0>
 800535c:	2300      	movs	r3, #0
 800535e:	e015      	b.n	800538c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d108      	bne.n	8005378 <inc_lock+0xf8>
 8005366:	4a0c      	ldr	r2, [pc, #48]	@ (8005398 <inc_lock+0x118>)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	4413      	add	r3, r2
 800536e:	330c      	adds	r3, #12
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	e001      	b.n	800537c <inc_lock+0xfc>
 8005378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537c:	4906      	ldr	r1, [pc, #24]	@ (8005398 <inc_lock+0x118>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	440b      	add	r3, r1
 8005384:	330c      	adds	r3, #12
 8005386:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3301      	adds	r3, #1
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20001e28 	.word	0x20001e28

0800539c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	607b      	str	r3, [r7, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d825      	bhi.n	80053fc <dec_lock+0x60>
		n = Files[i].ctr;
 80053b0:	4a17      	ldr	r2, [pc, #92]	@ (8005410 <dec_lock+0x74>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	4413      	add	r3, r2
 80053b8:	330c      	adds	r3, #12
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80053be:	89fb      	ldrh	r3, [r7, #14]
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c4:	d101      	bne.n	80053ca <dec_lock+0x2e>
 80053c6:	2300      	movs	r3, #0
 80053c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80053ca:	89fb      	ldrh	r3, [r7, #14]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <dec_lock+0x3a>
 80053d0:	89fb      	ldrh	r3, [r7, #14]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80053d6:	4a0e      	ldr	r2, [pc, #56]	@ (8005410 <dec_lock+0x74>)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	4413      	add	r3, r2
 80053de:	330c      	adds	r3, #12
 80053e0:	89fa      	ldrh	r2, [r7, #14]
 80053e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80053e4:	89fb      	ldrh	r3, [r7, #14]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d105      	bne.n	80053f6 <dec_lock+0x5a>
 80053ea:	4a09      	ldr	r2, [pc, #36]	@ (8005410 <dec_lock+0x74>)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	4413      	add	r3, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	737b      	strb	r3, [r7, #13]
 80053fa:	e001      	b.n	8005400 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80053fc:	2302      	movs	r3, #2
 80053fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005400:	7b7b      	ldrb	r3, [r7, #13]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20001e28 	.word	0x20001e28

08005414 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e010      	b.n	8005444 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005422:	4a0d      	ldr	r2, [pc, #52]	@ (8005458 <clear_lock+0x44>)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	4413      	add	r3, r2
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d105      	bne.n	800543e <clear_lock+0x2a>
 8005432:	4a09      	ldr	r2, [pc, #36]	@ (8005458 <clear_lock+0x44>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	4413      	add	r3, r2
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3301      	adds	r3, #1
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d9eb      	bls.n	8005422 <clear_lock+0xe>
	}
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	3714      	adds	r7, #20
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20001e28 	.word	0x20001e28

0800545c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005464:	2300      	movs	r3, #0
 8005466:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	78db      	ldrb	r3, [r3, #3]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d034      	beq.n	80054da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005474:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	7858      	ldrb	r0, [r3, #1]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005480:	2301      	movs	r3, #1
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	f7ff fd0e 	bl	8004ea4 <disk_write>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <sync_window+0x38>
			res = FR_DISK_ERR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
 8005492:	e022      	b.n	80054da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	1ad2      	subs	r2, r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d217      	bcs.n	80054da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e010      	b.n	80054d4 <sync_window+0x78>
					wsect += fs->fsize;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	4413      	add	r3, r2
 80054ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	7858      	ldrb	r0, [r3, #1]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80054c6:	2301      	movs	r3, #1
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	f7ff fceb 	bl	8004ea4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d8eb      	bhi.n	80054b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80054da:	7bfb      	ldrb	r3, [r7, #15]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d01b      	beq.n	8005534 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ffad 	bl	800545c <sync_window>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d113      	bne.n	8005534 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7858      	ldrb	r0, [r3, #1]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005516:	2301      	movs	r3, #1
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f7ff fca3 	bl	8004e64 <disk_read>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d004      	beq.n	800552e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005524:	f04f 33ff 	mov.w	r3, #4294967295
 8005528:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8005534:	7bfb      	ldrb	r3, [r7, #15]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
	...

08005540 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff ff87 	bl	800545c <sync_window>
 800554e:	4603      	mov	r3, r0
 8005550:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d159      	bne.n	800560c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b03      	cmp	r3, #3
 800555e:	d149      	bne.n	80055f4 <sync_fs+0xb4>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d145      	bne.n	80055f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	899b      	ldrh	r3, [r3, #12]
 8005572:	461a      	mov	r2, r3
 8005574:	2100      	movs	r1, #0
 8005576:	f7ff fd77 	bl	8005068 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3338      	adds	r3, #56	@ 0x38
 800557e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005582:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fd06 	bl	8004f98 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3338      	adds	r3, #56	@ 0x38
 8005590:	4921      	ldr	r1, [pc, #132]	@ (8005618 <sync_fs+0xd8>)
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fd1b 	bl	8004fce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3338      	adds	r3, #56	@ 0x38
 800559c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80055a0:	491e      	ldr	r1, [pc, #120]	@ (800561c <sync_fs+0xdc>)
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff fd13 	bl	8004fce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3338      	adds	r3, #56	@ 0x38
 80055ac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	4619      	mov	r1, r3
 80055b6:	4610      	mov	r0, r2
 80055b8:	f7ff fd09 	bl	8004fce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3338      	adds	r3, #56	@ 0x38
 80055c0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7ff fcff 	bl	8004fce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	7858      	ldrb	r0, [r3, #1]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055e8:	2301      	movs	r3, #1
 80055ea:	f7ff fc5b 	bl	8004ea4 <disk_write>
			fs->fsi_flag = 0;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2200      	movs	r2, #0
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7ff fc71 	bl	8004ee4 <disk_ioctl>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <sync_fs+0xcc>
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	41615252 	.word	0x41615252
 800561c:	61417272 	.word	0x61417272

08005620 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	3b02      	subs	r3, #2
 800562e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	3b02      	subs	r3, #2
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d301      	bcc.n	8005640 <clust2sect+0x20>
 800563c:	2300      	movs	r3, #0
 800563e:	e008      	b.n	8005652 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	895b      	ldrh	r3, [r3, #10]
 8005644:	461a      	mov	r2, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	fb03 f202 	mul.w	r2, r3, r2
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005650:	4413      	add	r3, r2
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d904      	bls.n	800567e <get_fat+0x20>
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <get_fat+0x26>
		val = 1;	/* Internal error */
 800567e:	2301      	movs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e0ba      	b.n	80057fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b03      	cmp	r3, #3
 8005690:	f000 8082 	beq.w	8005798 <get_fat+0x13a>
 8005694:	2b03      	cmp	r3, #3
 8005696:	f300 80a6 	bgt.w	80057e6 <get_fat+0x188>
 800569a:	2b01      	cmp	r3, #1
 800569c:	d002      	beq.n	80056a4 <get_fat+0x46>
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d055      	beq.n	800574e <get_fat+0xf0>
 80056a2:	e0a0      	b.n	80057e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	899b      	ldrh	r3, [r3, #12]
 80056ba:	4619      	mov	r1, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	fbb3 f3f1 	udiv	r3, r3, r1
 80056c2:	4413      	add	r3, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	6938      	ldr	r0, [r7, #16]
 80056c8:	f7ff ff0c 	bl	80054e4 <move_window>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 808c 	bne.w	80057ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	60fa      	str	r2, [r7, #12]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	8992      	ldrh	r2, [r2, #12]
 80056de:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e2:	fb01 f202 	mul.w	r2, r1, r2
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	899b      	ldrh	r3, [r3, #12]
 80056fa:	4619      	mov	r1, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005702:	4413      	add	r3, r2
 8005704:	4619      	mov	r1, r3
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f7ff feec 	bl	80054e4 <move_window>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d16e      	bne.n	80057f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	899b      	ldrh	r3, [r3, #12]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	fbb3 f1f2 	udiv	r1, r3, r2
 800571e:	fb01 f202 	mul.w	r2, r1, r2
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <get_fat+0xe6>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	e002      	b.n	800574a <get_fat+0xec>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574a:	617b      	str	r3, [r7, #20]
			break;
 800574c:	e055      	b.n	80057fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	899b      	ldrh	r3, [r3, #12]
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	4619      	mov	r1, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005762:	4413      	add	r3, r2
 8005764:	4619      	mov	r1, r3
 8005766:	6938      	ldr	r0, [r7, #16]
 8005768:	f7ff febc 	bl	80054e4 <move_window>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d140      	bne.n	80057f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	8992      	ldrh	r2, [r2, #12]
 8005780:	fbb3 f0f2 	udiv	r0, r3, r2
 8005784:	fb00 f202 	mul.w	r2, r0, r2
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	440b      	add	r3, r1
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff fbc7 	bl	8004f20 <ld_word>
 8005792:	4603      	mov	r3, r0
 8005794:	617b      	str	r3, [r7, #20]
			break;
 8005796:	e030      	b.n	80057fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	899b      	ldrh	r3, [r3, #12]
 80057a0:	089b      	lsrs	r3, r3, #2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ac:	4413      	add	r3, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	6938      	ldr	r0, [r7, #16]
 80057b2:	f7ff fe97 	bl	80054e4 <move_window>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11d      	bne.n	80057f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	8992      	ldrh	r2, [r2, #12]
 80057ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80057ce:	fb00 f202 	mul.w	r2, r0, r2
 80057d2:	1a9b      	subs	r3, r3, r2
 80057d4:	440b      	add	r3, r1
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff fbbb 	bl	8004f52 <ld_dword>
 80057dc:	4603      	mov	r3, r0
 80057de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80057e2:	617b      	str	r3, [r7, #20]
			break;
 80057e4:	e009      	b.n	80057fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057e6:	2301      	movs	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e006      	b.n	80057fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057ec:	bf00      	nop
 80057ee:	e004      	b.n	80057fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057f0:	bf00      	nop
 80057f2:	e002      	b.n	80057fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057f4:	bf00      	nop
 80057f6:	e000      	b.n	80057fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057f8:	bf00      	nop
		}
	}

	return val;
 80057fa:	697b      	ldr	r3, [r7, #20]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b089      	sub	sp, #36	@ 0x24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005810:	2302      	movs	r3, #2
 8005812:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b01      	cmp	r3, #1
 8005818:	f240 8109 	bls.w	8005a2e <put_fat+0x22a>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	f080 8103 	bcs.w	8005a2e <put_fat+0x22a>
		switch (fs->fs_type) {
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b03      	cmp	r3, #3
 800582e:	f000 80b6 	beq.w	800599e <put_fat+0x19a>
 8005832:	2b03      	cmp	r3, #3
 8005834:	f300 80fb 	bgt.w	8005a2e <put_fat+0x22a>
 8005838:	2b01      	cmp	r3, #1
 800583a:	d003      	beq.n	8005844 <put_fat+0x40>
 800583c:	2b02      	cmp	r3, #2
 800583e:	f000 8083 	beq.w	8005948 <put_fat+0x144>
 8005842:	e0f4      	b.n	8005a2e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	4413      	add	r3, r2
 8005850:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	899b      	ldrh	r3, [r3, #12]
 800585a:	4619      	mov	r1, r3
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005862:	4413      	add	r3, r2
 8005864:	4619      	mov	r1, r3
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff fe3c 	bl	80054e4 <move_window>
 800586c:	4603      	mov	r3, r0
 800586e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005870:	7ffb      	ldrb	r3, [r7, #31]
 8005872:	2b00      	cmp	r3, #0
 8005874:	f040 80d4 	bne.w	8005a20 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	61ba      	str	r2, [r7, #24]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	8992      	ldrh	r2, [r2, #12]
 8005888:	fbb3 f0f2 	udiv	r0, r3, r2
 800588c:	fb00 f202 	mul.w	r2, r0, r2
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	440b      	add	r3, r1
 8005894:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <put_fat+0xb8>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b25b      	sxtb	r3, r3
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	b25a      	sxtb	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	011b      	lsls	r3, r3, #4
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	e001      	b.n	80058c0 <put_fat+0xbc>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	899b      	ldrh	r3, [r3, #12]
 80058d2:	4619      	mov	r1, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80058da:	4413      	add	r3, r2
 80058dc:	4619      	mov	r1, r3
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fe00 	bl	80054e4 <move_window>
 80058e4:	4603      	mov	r3, r0
 80058e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058e8:	7ffb      	ldrb	r3, [r7, #31]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f040 809a 	bne.w	8005a24 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	899b      	ldrh	r3, [r3, #12]
 80058fa:	461a      	mov	r2, r3
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005902:	fb00 f202 	mul.w	r2, r0, r2
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	440b      	add	r3, r1
 800590a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <put_fat+0x11a>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e00e      	b.n	800593c <put_fat+0x138>
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b25b      	sxtb	r3, r3
 8005924:	f023 030f 	bic.w	r3, r3, #15
 8005928:	b25a      	sxtb	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	b25b      	sxtb	r3, r3
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	b25b      	sxtb	r3, r3
 8005936:	4313      	orrs	r3, r2
 8005938:	b25b      	sxtb	r3, r3
 800593a:	b2db      	uxtb	r3, r3
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	70da      	strb	r2, [r3, #3]
			break;
 8005946:	e072      	b.n	8005a2e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	899b      	ldrh	r3, [r3, #12]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	b29b      	uxth	r3, r3
 8005954:	4619      	mov	r1, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	fbb3 f3f1 	udiv	r3, r3, r1
 800595c:	4413      	add	r3, r2
 800595e:	4619      	mov	r1, r3
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fdbf 	bl	80054e4 <move_window>
 8005966:	4603      	mov	r3, r0
 8005968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d15b      	bne.n	8005a28 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	8992      	ldrh	r2, [r2, #12]
 800597e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005982:	fb00 f202 	mul.w	r2, r0, r2
 8005986:	1a9b      	subs	r3, r3, r2
 8005988:	440b      	add	r3, r1
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	b292      	uxth	r2, r2
 800598e:	4611      	mov	r1, r2
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff fb01 	bl	8004f98 <st_word>
			fs->wflag = 1;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	70da      	strb	r2, [r3, #3]
			break;
 800599c:	e047      	b.n	8005a2e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	899b      	ldrh	r3, [r3, #12]
 80059a6:	089b      	lsrs	r3, r3, #2
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80059b2:	4413      	add	r3, r2
 80059b4:	4619      	mov	r1, r3
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff fd94 	bl	80054e4 <move_window>
 80059bc:	4603      	mov	r3, r0
 80059be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059c0:	7ffb      	ldrb	r3, [r7, #31]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d132      	bne.n	8005a2c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	8992      	ldrh	r2, [r2, #12]
 80059da:	fbb3 f0f2 	udiv	r0, r3, r2
 80059de:	fb00 f202 	mul.w	r2, r0, r2
 80059e2:	1a9b      	subs	r3, r3, r2
 80059e4:	440b      	add	r3, r1
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fab3 	bl	8004f52 <ld_dword>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80059f2:	4323      	orrs	r3, r4
 80059f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	8992      	ldrh	r2, [r2, #12]
 8005a04:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a08:	fb00 f202 	mul.w	r2, r0, r2
 8005a0c:	1a9b      	subs	r3, r3, r2
 8005a0e:	440b      	add	r3, r1
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fadb 	bl	8004fce <st_dword>
			fs->wflag = 1;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	70da      	strb	r2, [r3, #3]
			break;
 8005a1e:	e006      	b.n	8005a2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a20:	bf00      	nop
 8005a22:	e004      	b.n	8005a2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a24:	bf00      	nop
 8005a26:	e002      	b.n	8005a2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a28:	bf00      	nop
 8005a2a:	e000      	b.n	8005a2e <put_fat+0x22a>
			if (res != FR_OK) break;
 8005a2c:	bf00      	nop
		}
	}
	return res;
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3724      	adds	r7, #36	@ 0x24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd90      	pop	{r4, r7, pc}

08005a38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d904      	bls.n	8005a5e <remove_chain+0x26>
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	68ba      	ldr	r2, [r7, #8]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d301      	bcc.n	8005a62 <remove_chain+0x2a>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	e04b      	b.n	8005afa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00c      	beq.n	8005a82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a68:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	69b8      	ldr	r0, [r7, #24]
 8005a70:	f7ff fec8 	bl	8005804 <put_fat>
 8005a74:	4603      	mov	r3, r0
 8005a76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a78:	7ffb      	ldrb	r3, [r7, #31]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <remove_chain+0x4a>
 8005a7e:	7ffb      	ldrb	r3, [r7, #31]
 8005a80:	e03b      	b.n	8005afa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff fdea 	bl	800565e <get_fat>
 8005a8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d031      	beq.n	8005af6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <remove_chain+0x64>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e02e      	b.n	8005afa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d101      	bne.n	8005aa8 <remove_chain+0x70>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e028      	b.n	8005afa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	69b8      	ldr	r0, [r7, #24]
 8005aae:	f7ff fea9 	bl	8005804 <put_fat>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ab6:	7ffb      	ldrb	r3, [r7, #31]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <remove_chain+0x88>
 8005abc:	7ffb      	ldrb	r3, [r7, #31]
 8005abe:	e01c      	b.n	8005afa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	3b02      	subs	r3, #2
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20b      	bcs.n	8005ae6 <remove_chain+0xae>
			fs->free_clst++;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	b2da      	uxtb	r2, r3
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3c6      	bcc.n	8005a82 <remove_chain+0x4a>
 8005af4:	e000      	b.n	8005af8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005af6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3720      	adds	r7, #32
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b088      	sub	sp, #32
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10d      	bne.n	8005b34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <create_chain+0x2c>
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d31b      	bcc.n	8005b66 <create_chain+0x64>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	e018      	b.n	8005b66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff fd91 	bl	800565e <get_fat>
 8005b3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d801      	bhi.n	8005b48 <create_chain+0x46>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e070      	b.n	8005c2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4e:	d101      	bne.n	8005b54 <create_chain+0x52>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	e06a      	b.n	8005c2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d201      	bcs.n	8005b62 <create_chain+0x60>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	e063      	b.n	8005c2a <create_chain+0x128>
		scl = clst;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d307      	bcc.n	8005b8a <create_chain+0x88>
				ncl = 2;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d901      	bls.n	8005b8a <create_chain+0x88>
 8005b86:	2300      	movs	r3, #0
 8005b88:	e04f      	b.n	8005c2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7ff fd66 	bl	800565e <get_fat>
 8005b92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d003      	beq.n	8005ba8 <create_chain+0xa6>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d101      	bne.n	8005bac <create_chain+0xaa>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	e03e      	b.n	8005c2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d1da      	bne.n	8005b6a <create_chain+0x68>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	e038      	b.n	8005c2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005bb8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005bba:	f04f 32ff 	mov.w	r2, #4294967295
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	6938      	ldr	r0, [r7, #16]
 8005bc2:	f7ff fe1f 	bl	8005804 <put_fat>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d109      	bne.n	8005be4 <create_chain+0xe2>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6938      	ldr	r0, [r7, #16]
 8005bdc:	f7ff fe12 	bl	8005804 <put_fat>
 8005be0:	4603      	mov	r3, r0
 8005be2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d116      	bne.n	8005c18 <create_chain+0x116>
		fs->last_clst = ncl;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	3b02      	subs	r3, #2
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d804      	bhi.n	8005c08 <create_chain+0x106>
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	1e5a      	subs	r2, r3, #1
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	791b      	ldrb	r3, [r3, #4]
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	711a      	strb	r2, [r3, #4]
 8005c16:	e007      	b.n	8005c28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d102      	bne.n	8005c24 <create_chain+0x122>
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	e000      	b.n	8005c26 <create_chain+0x124>
 8005c24:	2301      	movs	r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c28:	69fb      	ldr	r3, [r7, #28]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3720      	adds	r7, #32
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b087      	sub	sp, #28
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	3304      	adds	r3, #4
 8005c48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	899b      	ldrh	r3, [r3, #12]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	8952      	ldrh	r2, [r2, #10]
 8005c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	613a      	str	r2, [r7, #16]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <clmt_clust+0x42>
 8005c70:	2300      	movs	r3, #0
 8005c72:	e010      	b.n	8005c96 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d307      	bcc.n	8005c8c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	3304      	adds	r3, #4
 8005c88:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c8a:	e7e9      	b.n	8005c60 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005c8c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	4413      	add	r3, r2
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	371c      	adds	r7, #28
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b086      	sub	sp, #24
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cb8:	d204      	bcs.n	8005cc4 <dir_sdi+0x22>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f003 031f 	and.w	r3, r3, #31
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005cc4:	2302      	movs	r3, #2
 8005cc6:	e071      	b.n	8005dac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <dir_sdi+0x46>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d902      	bls.n	8005ce8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	8912      	ldrh	r2, [r2, #8]
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d301      	bcc.n	8005cfe <dir_sdi+0x5c>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	e056      	b.n	8005dac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	61da      	str	r2, [r3, #28]
 8005d06:	e02d      	b.n	8005d64 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	895b      	ldrh	r3, [r3, #10]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	899b      	ldrh	r3, [r3, #12]
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d18:	e019      	b.n	8005d4e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fc9d 	bl	800565e <get_fat>
 8005d24:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d101      	bne.n	8005d32 <dir_sdi+0x90>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e03c      	b.n	8005dac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d904      	bls.n	8005d42 <dir_sdi+0xa0>
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d301      	bcc.n	8005d46 <dir_sdi+0xa4>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e032      	b.n	8005dac <dir_sdi+0x10a>
			ofs -= csz;
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d2e1      	bcs.n	8005d1a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	6938      	ldr	r0, [r7, #16]
 8005d5a:	f7ff fc61 	bl	8005620 <clust2sect>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <dir_sdi+0xd4>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e01a      	b.n	8005dac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	899b      	ldrh	r3, [r3, #12]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d86:	441a      	add	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	899b      	ldrh	r3, [r3, #12]
 8005d96:	461a      	mov	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d9e:	fb00 f202 	mul.w	r2, r0, r2
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	18ca      	adds	r2, r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	3320      	adds	r3, #32
 8005dca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <dir_next+0x28>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dda:	d301      	bcc.n	8005de0 <dir_next+0x2c>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	e0bb      	b.n	8005f58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	899b      	ldrh	r3, [r3, #12]
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005dec:	fb01 f202 	mul.w	r2, r1, r2
 8005df0:	1a9b      	subs	r3, r3, r2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f040 809d 	bne.w	8005f32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	095b      	lsrs	r3, r3, #5
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	8912      	ldrh	r2, [r2, #8]
 8005e12:	4293      	cmp	r3, r2
 8005e14:	f0c0 808d 	bcc.w	8005f32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	61da      	str	r2, [r3, #28]
 8005e1e:	2304      	movs	r3, #4
 8005e20:	e09a      	b.n	8005f58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	899b      	ldrh	r3, [r3, #12]
 8005e26:	461a      	mov	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	8952      	ldrh	r2, [r2, #10]
 8005e32:	3a01      	subs	r2, #1
 8005e34:	4013      	ands	r3, r2
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d17b      	bne.n	8005f32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7ff fc0b 	bl	800565e <get_fat>
 8005e48:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d801      	bhi.n	8005e54 <dir_next+0xa0>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e081      	b.n	8005f58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d101      	bne.n	8005e60 <dir_next+0xac>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e07b      	b.n	8005f58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d359      	bcc.n	8005f1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	61da      	str	r2, [r3, #28]
 8005e76:	2304      	movs	r3, #4
 8005e78:	e06e      	b.n	8005f58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	4619      	mov	r1, r3
 8005e82:	4610      	mov	r0, r2
 8005e84:	f7ff fe3d 	bl	8005b02 <create_chain>
 8005e88:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <dir_next+0xe0>
 8005e90:	2307      	movs	r3, #7
 8005e92:	e061      	b.n	8005f58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <dir_next+0xea>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e05c      	b.n	8005f58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea4:	d101      	bne.n	8005eaa <dir_next+0xf6>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e056      	b.n	8005f58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff fad6 	bl	800545c <sync_window>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <dir_next+0x106>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e04e      	b.n	8005f58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	899b      	ldrh	r3, [r3, #12]
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	2100      	movs	r1, #0
 8005ec8:	f7ff f8ce 	bl	8005068 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	6979      	ldr	r1, [r7, #20]
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff fba4 	bl	8005620 <clust2sect>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ede:	e012      	b.n	8005f06 <dir_next+0x152>
						fs->wflag = 1;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff fab8 	bl	800545c <sync_window>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <dir_next+0x142>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e030      	b.n	8005f58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	895b      	ldrh	r3, [r3, #10]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d3e6      	bcc.n	8005ee0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad2      	subs	r2, r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f24:	6979      	ldr	r1, [r7, #20]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f7ff fb7a 	bl	8005620 <clust2sect>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	899b      	ldrh	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f4a:	fb00 f202 	mul.w	r2, r0, r2
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	18ca      	adds	r2, r1, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005f70:	2100      	movs	r1, #0
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff fe95 	bl	8005ca2 <dir_sdi>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d12b      	bne.n	8005fda <dir_alloc+0x7a>
		n = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f7ff faa9 	bl	80054e4 <move_window>
 8005f92:	4603      	mov	r3, r0
 8005f94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11d      	bne.n	8005fd8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2be5      	cmp	r3, #229	@ 0xe5
 8005fa4:	d004      	beq.n	8005fb0 <dir_alloc+0x50>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d107      	bne.n	8005fc0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d102      	bne.n	8005fc4 <dir_alloc+0x64>
 8005fbe:	e00c      	b.n	8005fda <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7ff fef4 	bl	8005db4 <dir_next>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0d7      	beq.n	8005f86 <dir_alloc+0x26>
 8005fd6:	e000      	b.n	8005fda <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005fd8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d101      	bne.n	8005fe4 <dir_alloc+0x84>
 8005fe0:	2307      	movs	r3, #7
 8005fe2:	75fb      	strb	r3, [r7, #23]
	return res;
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	331a      	adds	r3, #26
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe ff8f 	bl	8004f20 <ld_word>
 8006002:	4603      	mov	r3, r0
 8006004:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d109      	bne.n	8006022 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe ff84 	bl	8004f20 <ld_word>
 8006018:	4603      	mov	r3, r0
 800601a:	041b      	lsls	r3, r3, #16
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006022:	68fb      	ldr	r3, [r7, #12]
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	331a      	adds	r3, #26
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	b292      	uxth	r2, r2
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f7fe ffa8 	bl	8004f98 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b03      	cmp	r3, #3
 800604e:	d109      	bne.n	8006064 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f103 0214 	add.w	r2, r3, #20
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0c1b      	lsrs	r3, r3, #16
 800605a:	b29b      	uxth	r3, r3
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f7fe ff9a 	bl	8004f98 <st_word>
	}
}
 8006064:	bf00      	nop
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800607a:	2100      	movs	r1, #0
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe10 	bl	8005ca2 <dir_sdi>
 8006082:	4603      	mov	r3, r0
 8006084:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <dir_find+0x24>
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	e03e      	b.n	800610e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69db      	ldr	r3, [r3, #28]
 8006094:	4619      	mov	r1, r3
 8006096:	6938      	ldr	r0, [r7, #16]
 8006098:	f7ff fa24 	bl	80054e4 <move_window>
 800609c:	4603      	mov	r3, r0
 800609e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d12f      	bne.n	8006106 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <dir_find+0x4e>
 80060b4:	2304      	movs	r3, #4
 80060b6:	75fb      	strb	r3, [r7, #23]
 80060b8:	e028      	b.n	800610c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	330b      	adds	r3, #11
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	330b      	adds	r3, #11
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10a      	bne.n	80060f2 <dir_find+0x86>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a18      	ldr	r0, [r3, #32]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3324      	adds	r3, #36	@ 0x24
 80060e4:	220b      	movs	r2, #11
 80060e6:	4619      	mov	r1, r3
 80060e8:	f7fe ffd9 	bl	800509e <mem_cmp>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00b      	beq.n	800610a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80060f2:	2100      	movs	r1, #0
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff fe5d 	bl	8005db4 <dir_next>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0c5      	beq.n	8006090 <dir_find+0x24>
 8006104:	e002      	b.n	800610c <dir_find+0xa0>
		if (res != FR_OK) break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800610a:	bf00      	nop

	return res;
 800610c:	7dfb      	ldrb	r3, [r7, #23]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b084      	sub	sp, #16
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006124:	2101      	movs	r1, #1
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff ff1a 	bl	8005f60 <dir_alloc>
 800612c:	4603      	mov	r3, r0
 800612e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11c      	bne.n	8006170 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4619      	mov	r1, r3
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f7ff f9d1 	bl	80054e4 <move_window>
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d111      	bne.n	8006170 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	2220      	movs	r2, #32
 8006152:	2100      	movs	r1, #0
 8006154:	4618      	mov	r0, r3
 8006156:	f7fe ff87 	bl	8005068 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a18      	ldr	r0, [r3, #32]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3324      	adds	r3, #36	@ 0x24
 8006162:	220b      	movs	r2, #11
 8006164:	4619      	mov	r1, r3
 8006166:	f7fe ff5e 	bl	8005026 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	2201      	movs	r2, #1
 800616e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3324      	adds	r3, #36	@ 0x24
 8006190:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006192:	220b      	movs	r2, #11
 8006194:	2120      	movs	r1, #32
 8006196:	68b8      	ldr	r0, [r7, #8]
 8006198:	f7fe ff66 	bl	8005068 <mem_set>
	si = i = 0; ni = 8;
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	61fb      	str	r3, [r7, #28]
 80061a4:	2308      	movs	r3, #8
 80061a6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	61fa      	str	r2, [r7, #28]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80061b6:	7efb      	ldrb	r3, [r7, #27]
 80061b8:	2b20      	cmp	r3, #32
 80061ba:	d94e      	bls.n	800625a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80061bc:	7efb      	ldrb	r3, [r7, #27]
 80061be:	2b2f      	cmp	r3, #47	@ 0x2f
 80061c0:	d006      	beq.n	80061d0 <create_name+0x54>
 80061c2:	7efb      	ldrb	r3, [r7, #27]
 80061c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80061c6:	d110      	bne.n	80061ea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80061c8:	e002      	b.n	80061d0 <create_name+0x54>
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	3301      	adds	r3, #1
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80061da:	d0f6      	beq.n	80061ca <create_name+0x4e>
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b5c      	cmp	r3, #92	@ 0x5c
 80061e6:	d0f0      	beq.n	80061ca <create_name+0x4e>
			break;
 80061e8:	e038      	b.n	800625c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80061ea:	7efb      	ldrb	r3, [r7, #27]
 80061ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80061ee:	d003      	beq.n	80061f8 <create_name+0x7c>
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d30c      	bcc.n	8006212 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b0b      	cmp	r3, #11
 80061fc:	d002      	beq.n	8006204 <create_name+0x88>
 80061fe:	7efb      	ldrb	r3, [r7, #27]
 8006200:	2b2e      	cmp	r3, #46	@ 0x2e
 8006202:	d001      	beq.n	8006208 <create_name+0x8c>
 8006204:	2306      	movs	r3, #6
 8006206:	e044      	b.n	8006292 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006208:	2308      	movs	r3, #8
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	230b      	movs	r3, #11
 800620e:	617b      	str	r3, [r7, #20]
			continue;
 8006210:	e022      	b.n	8006258 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006212:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006216:	2b00      	cmp	r3, #0
 8006218:	da04      	bge.n	8006224 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800621a:	7efb      	ldrb	r3, [r7, #27]
 800621c:	3b80      	subs	r3, #128	@ 0x80
 800621e:	4a1f      	ldr	r2, [pc, #124]	@ (800629c <create_name+0x120>)
 8006220:	5cd3      	ldrb	r3, [r2, r3]
 8006222:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006224:	7efb      	ldrb	r3, [r7, #27]
 8006226:	4619      	mov	r1, r3
 8006228:	481d      	ldr	r0, [pc, #116]	@ (80062a0 <create_name+0x124>)
 800622a:	f7fe ff5f 	bl	80050ec <chk_chr>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <create_name+0xbc>
 8006234:	2306      	movs	r3, #6
 8006236:	e02c      	b.n	8006292 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006238:	7efb      	ldrb	r3, [r7, #27]
 800623a:	2b60      	cmp	r3, #96	@ 0x60
 800623c:	d905      	bls.n	800624a <create_name+0xce>
 800623e:	7efb      	ldrb	r3, [r7, #27]
 8006240:	2b7a      	cmp	r3, #122	@ 0x7a
 8006242:	d802      	bhi.n	800624a <create_name+0xce>
 8006244:	7efb      	ldrb	r3, [r7, #27]
 8006246:	3b20      	subs	r3, #32
 8006248:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	613a      	str	r2, [r7, #16]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	7efa      	ldrb	r2, [r7, #27]
 8006256:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006258:	e7a6      	b.n	80061a8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800625a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	441a      	add	r2, r3
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <create_name+0xf4>
 800626c:	2306      	movs	r3, #6
 800626e:	e010      	b.n	8006292 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2be5      	cmp	r3, #229	@ 0xe5
 8006276:	d102      	bne.n	800627e <create_name+0x102>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2205      	movs	r2, #5
 800627c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800627e:	7efb      	ldrb	r3, [r7, #27]
 8006280:	2b20      	cmp	r3, #32
 8006282:	d801      	bhi.n	8006288 <create_name+0x10c>
 8006284:	2204      	movs	r2, #4
 8006286:	e000      	b.n	800628a <create_name+0x10e>
 8006288:	2200      	movs	r2, #0
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	330b      	adds	r3, #11
 800628e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006290:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006292:	4618      	mov	r0, r3
 8006294:	3720      	adds	r7, #32
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	0800a34c 	.word	0x0800a34c
 80062a0:	0800a2e8 	.word	0x0800a2e8

080062a4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80062b8:	e002      	b.n	80062c0 <follow_path+0x1c>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	3301      	adds	r3, #1
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b2f      	cmp	r3, #47	@ 0x2f
 80062c6:	d0f8      	beq.n	80062ba <follow_path+0x16>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80062ce:	d0f4      	beq.n	80062ba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2200      	movs	r2, #0
 80062d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b1f      	cmp	r3, #31
 80062dc:	d80a      	bhi.n	80062f4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2280      	movs	r2, #128	@ 0x80
 80062e2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80062e6:	2100      	movs	r1, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fcda 	bl	8005ca2 <dir_sdi>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]
 80062f2:	e048      	b.n	8006386 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80062f4:	463b      	mov	r3, r7
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7ff ff3f 	bl	800617c <create_name>
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d139      	bne.n	800637c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff feaf 	bl	800606c <dir_find>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8006318:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	2b04      	cmp	r3, #4
 8006324:	d12c      	bne.n	8006380 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006326:	7afb      	ldrb	r3, [r7, #11]
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d127      	bne.n	8006380 <follow_path+0xdc>
 8006330:	2305      	movs	r3, #5
 8006332:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006334:	e024      	b.n	8006380 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d121      	bne.n	8006384 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	799b      	ldrb	r3, [r3, #6]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	d102      	bne.n	8006352 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800634c:	2305      	movs	r3, #5
 800634e:	75fb      	strb	r3, [r7, #23]
 8006350:	e019      	b.n	8006386 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	8992      	ldrh	r2, [r2, #12]
 8006360:	fbb3 f0f2 	udiv	r0, r3, r2
 8006364:	fb00 f202 	mul.w	r2, r0, r2
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	440b      	add	r3, r1
 800636c:	4619      	mov	r1, r3
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f7ff fe3d 	bl	8005fee <ld_clust>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800637a:	e7bb      	b.n	80062f4 <follow_path+0x50>
			if (res != FR_OK) break;
 800637c:	bf00      	nop
 800637e:	e002      	b.n	8006386 <follow_path+0xe2>
				break;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006384:	bf00      	nop
			}
		}
	}

	return res;
 8006386:	7dfb      	ldrb	r3, [r7, #23]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d031      	beq.n	800640a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	e002      	b.n	80063b4 <get_ldnumber+0x24>
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	3301      	adds	r3, #1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d903      	bls.n	80063c4 <get_ldnumber+0x34>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80063c2:	d1f4      	bne.n	80063ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b3a      	cmp	r3, #58	@ 0x3a
 80063ca:	d11c      	bne.n	8006406 <get_ldnumber+0x76>
			tp = *path;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	60fa      	str	r2, [r7, #12]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	3b30      	subs	r3, #48	@ 0x30
 80063dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	d80e      	bhi.n	8006402 <get_ldnumber+0x72>
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10a      	bne.n	8006402 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d107      	bne.n	8006402 <get_ldnumber+0x72>
					vol = (int)i;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	3301      	adds	r3, #1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	e002      	b.n	800640c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006406:	2300      	movs	r3, #0
 8006408:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800640a:	693b      	ldr	r3, [r7, #16]
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	70da      	strb	r2, [r3, #3]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f04f 32ff 	mov.w	r2, #4294967295
 800642e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006430:	6839      	ldr	r1, [r7, #0]
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7ff f856 	bl	80054e4 <move_window>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <check_fs+0x2a>
 800643e:	2304      	movs	r3, #4
 8006440:	e038      	b.n	80064b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3338      	adds	r3, #56	@ 0x38
 8006446:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800644a:	4618      	mov	r0, r3
 800644c:	f7fe fd68 	bl	8004f20 <ld_word>
 8006450:	4603      	mov	r3, r0
 8006452:	461a      	mov	r2, r3
 8006454:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006458:	429a      	cmp	r2, r3
 800645a:	d001      	beq.n	8006460 <check_fs+0x48>
 800645c:	2303      	movs	r3, #3
 800645e:	e029      	b.n	80064b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006466:	2be9      	cmp	r3, #233	@ 0xe9
 8006468:	d009      	beq.n	800647e <check_fs+0x66>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006470:	2beb      	cmp	r3, #235	@ 0xeb
 8006472:	d11e      	bne.n	80064b2 <check_fs+0x9a>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800647a:	2b90      	cmp	r3, #144	@ 0x90
 800647c:	d119      	bne.n	80064b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3338      	adds	r3, #56	@ 0x38
 8006482:	3336      	adds	r3, #54	@ 0x36
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe fd64 	bl	8004f52 <ld_dword>
 800648a:	4603      	mov	r3, r0
 800648c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006490:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <check_fs+0xa4>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <check_fs+0x82>
 8006496:	2300      	movs	r3, #0
 8006498:	e00c      	b.n	80064b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3338      	adds	r3, #56	@ 0x38
 800649e:	3352      	adds	r3, #82	@ 0x52
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fe fd56 	bl	8004f52 <ld_dword>
 80064a6:	4603      	mov	r3, r0
 80064a8:	4a05      	ldr	r2, [pc, #20]	@ (80064c0 <check_fs+0xa8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d101      	bne.n	80064b2 <check_fs+0x9a>
 80064ae:	2300      	movs	r3, #0
 80064b0:	e000      	b.n	80064b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80064b2:	2302      	movs	r3, #2
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	00544146 	.word	0x00544146
 80064c0:	33544146 	.word	0x33544146

080064c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b096      	sub	sp, #88	@ 0x58
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	2200      	movs	r2, #0
 80064d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f7ff ff59 	bl	8006390 <get_ldnumber>
 80064de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80064e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da01      	bge.n	80064ea <find_volume+0x26>
 80064e6:	230b      	movs	r3, #11
 80064e8:	e26a      	b.n	80069c0 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80064ea:	4aa3      	ldr	r2, [pc, #652]	@ (8006778 <find_volume+0x2b4>)
 80064ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <find_volume+0x3a>
 80064fa:	230c      	movs	r3, #12
 80064fc:	e260      	b.n	80069c0 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80064fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006500:	f7fe fe0f 	bl	8005122 <lock_fs>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d101      	bne.n	800650e <find_volume+0x4a>
 800650a:	230f      	movs	r3, #15
 800650c:	e258      	b.n	80069c0 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006512:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d01a      	beq.n	800655a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fc5b 	bl	8004de4 <disk_status>
 800652e:	4603      	mov	r3, r0
 8006530:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006534:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <find_volume+0x92>
 8006546:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800654a:	f003 0304 	and.w	r3, r3, #4
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006552:	230a      	movs	r3, #10
 8006554:	e234      	b.n	80069c0 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8006556:	2300      	movs	r3, #0
 8006558:	e232      	b.n	80069c0 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800655a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655c:	2200      	movs	r2, #0
 800655e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006562:	b2da      	uxtb	r2, r3
 8006564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006566:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656a:	785b      	ldrb	r3, [r3, #1]
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fc53 	bl	8004e18 <disk_initialize>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006578:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006584:	2303      	movs	r3, #3
 8006586:	e21b      	b.n	80069c0 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <find_volume+0xda>
 800658e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006592:	f003 0304 	and.w	r3, r3, #4
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800659a:	230a      	movs	r3, #10
 800659c:	e210      	b.n	80069c0 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800659e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a0:	7858      	ldrb	r0, [r3, #1]
 80065a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a4:	330c      	adds	r3, #12
 80065a6:	461a      	mov	r2, r3
 80065a8:	2102      	movs	r1, #2
 80065aa:	f7fe fc9b 	bl	8004ee4 <disk_ioctl>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <find_volume+0xf4>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e203      	b.n	80069c0 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80065b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ba:	899b      	ldrh	r3, [r3, #12]
 80065bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065c0:	d80d      	bhi.n	80065de <find_volume+0x11a>
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	899b      	ldrh	r3, [r3, #12]
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ca:	d308      	bcc.n	80065de <find_volume+0x11a>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	899b      	ldrh	r3, [r3, #12]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	899b      	ldrh	r3, [r3, #12]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	4013      	ands	r3, r2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <find_volume+0x11e>
 80065de:	2301      	movs	r3, #1
 80065e0:	e1ee      	b.n	80069c0 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80065e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80065ea:	f7ff ff15 	bl	8006418 <check_fs>
 80065ee:	4603      	mov	r3, r0
 80065f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80065f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d149      	bne.n	8006690 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80065fc:	2300      	movs	r3, #0
 80065fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006600:	e01e      	b.n	8006640 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006604:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006608:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006610:	4413      	add	r3, r2
 8006612:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	3304      	adds	r3, #4
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d006      	beq.n	800662c <find_volume+0x168>
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	3308      	adds	r3, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fc95 	bl	8004f52 <ld_dword>
 8006628:	4602      	mov	r2, r0
 800662a:	e000      	b.n	800662e <find_volume+0x16a>
 800662c:	2200      	movs	r2, #0
 800662e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	3358      	adds	r3, #88	@ 0x58
 8006634:	443b      	add	r3, r7
 8006636:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800663a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800663c:	3301      	adds	r3, #1
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006642:	2b03      	cmp	r3, #3
 8006644:	d9dd      	bls.n	8006602 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006646:	2300      	movs	r3, #0
 8006648:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800664a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <find_volume+0x192>
 8006650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006652:	3b01      	subs	r3, #1
 8006654:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	3358      	adds	r3, #88	@ 0x58
 800665c:	443b      	add	r3, r7
 800665e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006662:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006666:	2b00      	cmp	r3, #0
 8006668:	d005      	beq.n	8006676 <find_volume+0x1b2>
 800666a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800666c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800666e:	f7ff fed3 	bl	8006418 <check_fs>
 8006672:	4603      	mov	r3, r0
 8006674:	e000      	b.n	8006678 <find_volume+0x1b4>
 8006676:	2303      	movs	r3, #3
 8006678:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800667c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006680:	2b01      	cmp	r3, #1
 8006682:	d905      	bls.n	8006690 <find_volume+0x1cc>
 8006684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006686:	3301      	adds	r3, #1
 8006688:	643b      	str	r3, [r7, #64]	@ 0x40
 800668a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800668c:	2b03      	cmp	r3, #3
 800668e:	d9e2      	bls.n	8006656 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006690:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006694:	2b04      	cmp	r3, #4
 8006696:	d101      	bne.n	800669c <find_volume+0x1d8>
 8006698:	2301      	movs	r3, #1
 800669a:	e191      	b.n	80069c0 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800669c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d901      	bls.n	80066a8 <find_volume+0x1e4>
 80066a4:	230d      	movs	r3, #13
 80066a6:	e18b      	b.n	80069c0 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80066a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066aa:	3338      	adds	r3, #56	@ 0x38
 80066ac:	330b      	adds	r3, #11
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fc36 	bl	8004f20 <ld_word>
 80066b4:	4603      	mov	r3, r0
 80066b6:	461a      	mov	r2, r3
 80066b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ba:	899b      	ldrh	r3, [r3, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d001      	beq.n	80066c4 <find_volume+0x200>
 80066c0:	230d      	movs	r3, #13
 80066c2:	e17d      	b.n	80069c0 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80066c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c6:	3338      	adds	r3, #56	@ 0x38
 80066c8:	3316      	adds	r3, #22
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe fc28 	bl	8004f20 <ld_word>
 80066d0:	4603      	mov	r3, r0
 80066d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80066d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d106      	bne.n	80066e8 <find_volume+0x224>
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	3338      	adds	r3, #56	@ 0x38
 80066de:	3324      	adds	r3, #36	@ 0x24
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe fc36 	bl	8004f52 <ld_dword>
 80066e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80066e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066ec:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80066ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80066f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d005      	beq.n	800670c <find_volume+0x248>
 8006700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006702:	789b      	ldrb	r3, [r3, #2]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d001      	beq.n	800670c <find_volume+0x248>
 8006708:	230d      	movs	r3, #13
 800670a:	e159      	b.n	80069c0 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	789b      	ldrb	r3, [r3, #2]
 8006710:	461a      	mov	r2, r3
 8006712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006714:	fb02 f303 	mul.w	r3, r2, r3
 8006718:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800671a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006720:	461a      	mov	r2, r3
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	895b      	ldrh	r3, [r3, #10]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d008      	beq.n	8006740 <find_volume+0x27c>
 800672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006730:	895b      	ldrh	r3, [r3, #10]
 8006732:	461a      	mov	r2, r3
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	895b      	ldrh	r3, [r3, #10]
 8006738:	3b01      	subs	r3, #1
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <find_volume+0x280>
 8006740:	230d      	movs	r3, #13
 8006742:	e13d      	b.n	80069c0 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	3338      	adds	r3, #56	@ 0x38
 8006748:	3311      	adds	r3, #17
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fbe8 	bl	8004f20 <ld_word>
 8006750:	4603      	mov	r3, r0
 8006752:	461a      	mov	r2, r3
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675a:	891b      	ldrh	r3, [r3, #8]
 800675c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800675e:	8992      	ldrh	r2, [r2, #12]
 8006760:	0952      	lsrs	r2, r2, #5
 8006762:	b292      	uxth	r2, r2
 8006764:	fbb3 f1f2 	udiv	r1, r3, r2
 8006768:	fb01 f202 	mul.w	r2, r1, r2
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <find_volume+0x2b8>
 8006774:	230d      	movs	r3, #13
 8006776:	e123      	b.n	80069c0 <find_volume+0x4fc>
 8006778:	20001e20 	.word	0x20001e20

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800677c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677e:	3338      	adds	r3, #56	@ 0x38
 8006780:	3313      	adds	r3, #19
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fbcc 	bl	8004f20 <ld_word>
 8006788:	4603      	mov	r3, r0
 800678a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800678c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <find_volume+0x2dc>
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	3338      	adds	r3, #56	@ 0x38
 8006796:	3320      	adds	r3, #32
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fbda 	bl	8004f52 <ld_dword>
 800679e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	3338      	adds	r3, #56	@ 0x38
 80067a4:	330e      	adds	r3, #14
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe fbba 	bl	8004f20 <ld_word>
 80067ac:	4603      	mov	r3, r0
 80067ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <find_volume+0x2f6>
 80067b6:	230d      	movs	r3, #13
 80067b8:	e102      	b.n	80069c0 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80067ba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80067bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067be:	4413      	add	r3, r2
 80067c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067c2:	8911      	ldrh	r1, [r2, #8]
 80067c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067c6:	8992      	ldrh	r2, [r2, #12]
 80067c8:	0952      	lsrs	r2, r2, #5
 80067ca:	b292      	uxth	r2, r2
 80067cc:	fbb1 f2f2 	udiv	r2, r1, r2
 80067d0:	b292      	uxth	r2, r2
 80067d2:	4413      	add	r3, r2
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80067d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	429a      	cmp	r2, r3
 80067dc:	d201      	bcs.n	80067e2 <find_volume+0x31e>
 80067de:	230d      	movs	r3, #13
 80067e0:	e0ee      	b.n	80069c0 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80067e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ea:	8952      	ldrh	r2, [r2, #10]
 80067ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <find_volume+0x338>
 80067f8:	230d      	movs	r3, #13
 80067fa:	e0e1      	b.n	80069c0 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80067fc:	2303      	movs	r3, #3
 80067fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006808:	4293      	cmp	r3, r2
 800680a:	d802      	bhi.n	8006812 <find_volume+0x34e>
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006818:	4293      	cmp	r3, r2
 800681a:	d802      	bhi.n	8006822 <find_volume+0x35e>
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	1c9a      	adds	r2, r3, #2
 8006826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006828:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800682e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006830:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006834:	441a      	add	r2, r3
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800683a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	441a      	add	r2, r3
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8006844:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006848:	2b03      	cmp	r3, #3
 800684a:	d11e      	bne.n	800688a <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	3338      	adds	r3, #56	@ 0x38
 8006850:	332a      	adds	r3, #42	@ 0x2a
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fb64 	bl	8004f20 <ld_word>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <find_volume+0x39e>
 800685e:	230d      	movs	r3, #13
 8006860:	e0ae      	b.n	80069c0 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006864:	891b      	ldrh	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <find_volume+0x3aa>
 800686a:	230d      	movs	r3, #13
 800686c:	e0a8      	b.n	80069c0 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800686e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006870:	3338      	adds	r3, #56	@ 0x38
 8006872:	332c      	adds	r3, #44	@ 0x2c
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fb6c 	bl	8004f52 <ld_dword>
 800687a:	4602      	mov	r2, r0
 800687c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800687e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	647b      	str	r3, [r7, #68]	@ 0x44
 8006888:	e01f      	b.n	80068ca <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800688a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688c:	891b      	ldrh	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <find_volume+0x3d2>
 8006892:	230d      	movs	r3, #13
 8006894:	e094      	b.n	80069c0 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800689a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800689c:	441a      	add	r2, r3
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d103      	bne.n	80068b2 <find_volume+0x3ee>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	e00a      	b.n	80068c8 <find_volume+0x404>
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	4613      	mov	r3, r2
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	085a      	lsrs	r2, r3, #1
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80068ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d0:	899b      	ldrh	r3, [r3, #12]
 80068d2:	4619      	mov	r1, r3
 80068d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d6:	440b      	add	r3, r1
 80068d8:	3b01      	subs	r3, #1
 80068da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80068dc:	8989      	ldrh	r1, [r1, #12]
 80068de:	fbb3 f3f1 	udiv	r3, r3, r1
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d201      	bcs.n	80068ea <find_volume+0x426>
 80068e6:	230d      	movs	r3, #13
 80068e8:	e06a      	b.n	80069c0 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80068ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ec:	f04f 32ff 	mov.w	r2, #4294967295
 80068f0:	619a      	str	r2, [r3, #24]
 80068f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	2280      	movs	r2, #128	@ 0x80
 80068fe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006904:	2b03      	cmp	r3, #3
 8006906:	d149      	bne.n	800699c <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690a:	3338      	adds	r3, #56	@ 0x38
 800690c:	3330      	adds	r3, #48	@ 0x30
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fb06 	bl	8004f20 <ld_word>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d140      	bne.n	800699c <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800691a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800691c:	3301      	adds	r3, #1
 800691e:	4619      	mov	r1, r3
 8006920:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006922:	f7fe fddf 	bl	80054e4 <move_window>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d137      	bne.n	800699c <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 800692c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692e:	2200      	movs	r2, #0
 8006930:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	3338      	adds	r3, #56	@ 0x38
 8006936:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe faf0 	bl	8004f20 <ld_word>
 8006940:	4603      	mov	r3, r0
 8006942:	461a      	mov	r2, r3
 8006944:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006948:	429a      	cmp	r2, r3
 800694a:	d127      	bne.n	800699c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800694e:	3338      	adds	r3, #56	@ 0x38
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fafe 	bl	8004f52 <ld_dword>
 8006956:	4603      	mov	r3, r0
 8006958:	4a1b      	ldr	r2, [pc, #108]	@ (80069c8 <find_volume+0x504>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d11e      	bne.n	800699c <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	3338      	adds	r3, #56	@ 0x38
 8006962:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe faf3 	bl	8004f52 <ld_dword>
 800696c:	4603      	mov	r3, r0
 800696e:	4a17      	ldr	r2, [pc, #92]	@ (80069cc <find_volume+0x508>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d113      	bne.n	800699c <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006976:	3338      	adds	r3, #56	@ 0x38
 8006978:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800697c:	4618      	mov	r0, r3
 800697e:	f7fe fae8 	bl	8004f52 <ld_dword>
 8006982:	4602      	mov	r2, r0
 8006984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006986:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	3338      	adds	r3, #56	@ 0x38
 800698c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fade 	bl	8004f52 <ld_dword>
 8006996:	4602      	mov	r2, r0
 8006998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800699c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800699e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80069a2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069a4:	4b0a      	ldr	r3, [pc, #40]	@ (80069d0 <find_volume+0x50c>)
 80069a6:	881b      	ldrh	r3, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	4b08      	ldr	r3, [pc, #32]	@ (80069d0 <find_volume+0x50c>)
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	4b07      	ldr	r3, [pc, #28]	@ (80069d0 <find_volume+0x50c>)
 80069b2:	881a      	ldrh	r2, [r3, #0]
 80069b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80069b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80069ba:	f7fe fd2b 	bl	8005414 <clear_lock>
#endif
	return FR_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3758      	adds	r7, #88	@ 0x58
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	41615252 	.word	0x41615252
 80069cc:	61417272 	.word	0x61417272
 80069d0:	20001e24 	.word	0x20001e24

080069d4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80069de:	2309      	movs	r3, #9
 80069e0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02e      	beq.n	8006a46 <validate+0x72>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d02a      	beq.n	8006a46 <validate+0x72>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d025      	beq.n	8006a46 <validate+0x72>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	889a      	ldrh	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	88db      	ldrh	r3, [r3, #6]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d11e      	bne.n	8006a46 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fb88 	bl	8005122 <lock_fs>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d014      	beq.n	8006a42 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	785b      	ldrb	r3, [r3, #1]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f9e0 	bl	8004de4 <disk_status>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d102      	bne.n	8006a34 <validate+0x60>
				res = FR_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]
 8006a32:	e008      	b.n	8006a46 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe fb87 	bl	800514e <unlock_fs>
 8006a40:	e001      	b.n	8006a46 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8006a42:	230f      	movs	r3, #15
 8006a44:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <validate+0x7e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	e000      	b.n	8006a54 <validate+0x80>
 8006a52:	2300      	movs	r3, #0
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	6013      	str	r3, [r2, #0]
	return res;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b098      	sub	sp, #96	@ 0x60
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	60f8      	str	r0, [r7, #12]
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <f_open+0x18>
 8006a76:	2309      	movs	r3, #9
 8006a78:	e1be      	b.n	8006df8 <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a80:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006a82:	79fa      	ldrb	r2, [r7, #7]
 8006a84:	f107 0110 	add.w	r1, r7, #16
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fd19 	bl	80064c4 <find_volume>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006a98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 819b 	bne.w	8006dd8 <f_open+0x376>
		dj.obj.fs = fs;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	f107 0314 	add.w	r3, r7, #20
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fbf8 	bl	80062a4 <follow_path>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006aba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d118      	bne.n	8006af4 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006ac2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	b25b      	sxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da03      	bge.n	8006ad4 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006acc:	2306      	movs	r3, #6
 8006ace:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006ad2:	e00f      	b.n	8006af4 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	bf8c      	ite	hi
 8006ada:	2301      	movhi	r3, #1
 8006adc:	2300      	movls	r3, #0
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f107 0314 	add.w	r3, r7, #20
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe fb4b 	bl	8005184 <chk_lock>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	f003 031c 	and.w	r3, r3, #28
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d07f      	beq.n	8006bfe <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006afe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d017      	beq.n	8006b36 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006b06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d10e      	bne.n	8006b2c <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006b0e:	f7fe fb95 	bl	800523c <enq_lock>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d006      	beq.n	8006b26 <f_open+0xc4>
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fafa 	bl	8006116 <dir_register>
 8006b22:	4603      	mov	r3, r0
 8006b24:	e000      	b.n	8006b28 <f_open+0xc6>
 8006b26:	2312      	movs	r3, #18
 8006b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	f043 0308 	orr.w	r3, r3, #8
 8006b32:	71fb      	strb	r3, [r7, #7]
 8006b34:	e010      	b.n	8006b58 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006b36:	7ebb      	ldrb	r3, [r7, #26]
 8006b38:	f003 0311 	and.w	r3, r3, #17
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <f_open+0xe6>
					res = FR_DENIED;
 8006b40:	2307      	movs	r3, #7
 8006b42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b46:	e007      	b.n	8006b58 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006b48:	79fb      	ldrb	r3, [r7, #7]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <f_open+0xf6>
 8006b52:	2308      	movs	r3, #8
 8006b54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006b58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d168      	bne.n	8006c32 <f_open+0x1d0>
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006b6a:	f7fe f8db 	bl	8004d24 <get_fattime>
 8006b6e:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b72:	330e      	adds	r3, #14
 8006b74:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fa29 	bl	8004fce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	3316      	adds	r3, #22
 8006b80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fe fa23 	bl	8004fce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b8a:	330b      	adds	r3, #11
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b94:	4611      	mov	r1, r2
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff fa29 	bl	8005fee <ld_clust>
 8006b9c:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fa41 	bl	800602c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bac:	331c      	adds	r3, #28
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fe fa0c 	bl	8004fce <st_dword>
					fs->wflag = 1;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d037      	beq.n	8006c32 <f_open+0x1d0>
						dw = fs->winsect;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc6:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006bc8:	f107 0314 	add.w	r3, r7, #20
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe ff31 	bl	8005a38 <remove_chain>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d126      	bne.n	8006c32 <f_open+0x1d0>
							res = move_window(fs, dw);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7fe fc7b 	bl	80054e4 <move_window>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bf8:	3a01      	subs	r2, #1
 8006bfa:	615a      	str	r2, [r3, #20]
 8006bfc:	e019      	b.n	8006c32 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d115      	bne.n	8006c32 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006c06:	7ebb      	ldrb	r3, [r7, #26]
 8006c08:	f003 0310 	and.w	r3, r3, #16
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <f_open+0x1b6>
					res = FR_NO_FILE;
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006c16:	e00c      	b.n	8006c32 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <f_open+0x1d0>
 8006c22:	7ebb      	ldrb	r3, [r7, #26]
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <f_open+0x1d0>
						res = FR_DENIED;
 8006c2c:	2307      	movs	r3, #7
 8006c2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006c32:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d126      	bne.n	8006c88 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8006c44:	79fb      	ldrb	r3, [r7, #7]
 8006c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006c54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	bf8c      	ite	hi
 8006c60:	2301      	movhi	r3, #1
 8006c62:	2300      	movls	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	f107 0314 	add.w	r3, r7, #20
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fe fb06 	bl	8005280 <inc_lock>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d102      	bne.n	8006c88 <f_open+0x226>
 8006c82:	2302      	movs	r3, #2
 8006c84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006c88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f040 80a3 	bne.w	8006dd8 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c96:	4611      	mov	r1, r2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff f9a8 	bl	8005fee <ld_clust>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	331c      	adds	r3, #28
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe f952 	bl	8004f52 <ld_dword>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	88da      	ldrh	r2, [r3, #6]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	79fa      	ldrb	r2, [r7, #7]
 8006ccc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3330      	adds	r3, #48	@ 0x30
 8006ce4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe f9bc 	bl	8005068 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	f003 0320 	and.w	r3, r3, #32
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d06e      	beq.n	8006dd8 <f_open+0x376>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d06a      	beq.n	8006dd8 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	68da      	ldr	r2, [r3, #12]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	895b      	ldrh	r3, [r3, #10]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	899b      	ldrh	r3, [r3, #12]
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
 8006d18:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d26:	e016      	b.n	8006d56 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fc96 	bl	800565e <get_fat>
 8006d32:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006d34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d802      	bhi.n	8006d40 <f_open+0x2de>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d102      	bne.n	8006d4e <f_open+0x2ec>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006d4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d103      	bne.n	8006d66 <f_open+0x304>
 8006d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d8e0      	bhi.n	8006d28 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d6a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006d6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d131      	bne.n	8006dd8 <f_open+0x376>
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	899b      	ldrh	r3, [r3, #12]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d80:	fb01 f202 	mul.w	r2, r1, r2
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d026      	beq.n	8006dd8 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fc46 	bl	8005620 <clust2sect>
 8006d94:	6478      	str	r0, [r7, #68]	@ 0x44
 8006d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <f_open+0x342>
						res = FR_INT_ERR;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006da2:	e019      	b.n	8006dd8 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	899b      	ldrh	r3, [r3, #12]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dac:	fbb3 f2f2 	udiv	r2, r3, r2
 8006db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006db2:	441a      	add	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	7858      	ldrb	r0, [r3, #1]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6a1a      	ldr	r2, [r3, #32]
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f7fe f84c 	bl	8004e64 <disk_read>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <f_open+0x376>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006dd8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <f_open+0x384>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe f9ad 	bl	800514e <unlock_fs>
 8006df4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3760      	adds	r7, #96	@ 0x60
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08c      	sub	sp, #48	@ 0x30
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f107 0210 	add.w	r2, r7, #16
 8006e1e:	4611      	mov	r1, r2
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fdd7 	bl	80069d4 <validate>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d107      	bne.n	8006e44 <f_write+0x44>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	7d5b      	ldrb	r3, [r3, #21]
 8006e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d009      	beq.n	8006e58 <f_write+0x58>
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe f97e 	bl	800514e <unlock_fs>
 8006e52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006e56:	e192      	b.n	800717e <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	7d1b      	ldrb	r3, [r3, #20]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d106      	bne.n	8006e72 <f_write+0x72>
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2107      	movs	r1, #7
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe f970 	bl	800514e <unlock_fs>
 8006e6e:	2307      	movs	r3, #7
 8006e70:	e185      	b.n	800717e <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	f080 816a 	bcs.w	8007158 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006e8c:	e164      	b.n	8007158 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	8992      	ldrh	r2, [r2, #12]
 8006e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e9a:	fb01 f202 	mul.w	r2, r1, r2
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f040 810f 	bne.w	80070c4 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	8992      	ldrh	r2, [r2, #12]
 8006eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	8952      	ldrh	r2, [r2, #10]
 8006eb6:	3a01      	subs	r2, #1
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d14d      	bne.n	8006f5e <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10c      	bne.n	8006ee4 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11a      	bne.n	8006f0c <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2100      	movs	r1, #0
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fe11 	bl	8005b02 <create_chain>
 8006ee0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006ee2:	e013      	b.n	8006f0c <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7fe fe9d 	bl	8005c32 <clmt_clust>
 8006ef8:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006efa:	e007      	b.n	8006f0c <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4619      	mov	r1, r3
 8006f04:	4610      	mov	r0, r2
 8006f06:	f7fe fdfc 	bl	8005b02 <create_chain>
 8006f0a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8127 	beq.w	8007162 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d109      	bne.n	8006f2e <f_write+0x12e>
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	755a      	strb	r2, [r3, #21]
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2102      	movs	r1, #2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fe f912 	bl	800514e <unlock_fs>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e127      	b.n	800717e <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d109      	bne.n	8006f4a <f_write+0x14a>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	755a      	strb	r2, [r3, #21]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2101      	movs	r1, #1
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe f904 	bl	800514e <unlock_fs>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e119      	b.n	800717e <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f4e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d102      	bne.n	8006f5e <f_write+0x15e>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f5c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	7d1b      	ldrb	r3, [r3, #20]
 8006f62:	b25b      	sxtb	r3, r3
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da1d      	bge.n	8006fa4 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	7858      	ldrb	r0, [r3, #1]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a1a      	ldr	r2, [r3, #32]
 8006f76:	2301      	movs	r3, #1
 8006f78:	f7fd ff94 	bl	8004ea4 <disk_write>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <f_write+0x196>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2201      	movs	r2, #1
 8006f86:	755a      	strb	r2, [r3, #21]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7fe f8de 	bl	800514e <unlock_fs>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e0f3      	b.n	800717e <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	7d1b      	ldrb	r3, [r3, #20]
 8006f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe fb37 	bl	8005620 <clust2sect>
 8006fb2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <f_write+0x1ce>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	755a      	strb	r2, [r3, #21]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7fe f8c2 	bl	800514e <unlock_fs>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e0d7      	b.n	800717e <f_write+0x37e>
			sect += csect;
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	899b      	ldrh	r3, [r3, #12]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fe2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006fe4:	6a3b      	ldr	r3, [r7, #32]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d048      	beq.n	800707c <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	4413      	add	r3, r2
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	8952      	ldrh	r2, [r2, #10]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d905      	bls.n	8007004 <f_write+0x204>
					cc = fs->csize - csect;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	895b      	ldrh	r3, [r3, #10]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	7858      	ldrb	r0, [r3, #1]
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	69f9      	ldr	r1, [r7, #28]
 800700e:	f7fd ff49 	bl	8004ea4 <disk_write>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d009      	beq.n	800702c <f_write+0x22c>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	755a      	strb	r2, [r3, #21]
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	2101      	movs	r1, #1
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f893 	bl	800514e <unlock_fs>
 8007028:	2301      	movs	r3, #1
 800702a:	e0a8      	b.n	800717e <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	6a3a      	ldr	r2, [r7, #32]
 8007036:	429a      	cmp	r2, r3
 8007038:	d918      	bls.n	800706c <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	8992      	ldrh	r2, [r2, #12]
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	18d1      	adds	r1, r2, r3
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	899b      	ldrh	r3, [r3, #12]
 8007058:	461a      	mov	r2, r3
 800705a:	f7fd ffe4 	bl	8005026 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	7d1b      	ldrb	r3, [r3, #20]
 8007062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007066:	b2da      	uxtb	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	899b      	ldrh	r3, [r3, #12]
 8007070:	461a      	mov	r2, r3
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800707a:	e050      	b.n	800711e <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	429a      	cmp	r2, r3
 8007084:	d01b      	beq.n	80070be <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800708e:	429a      	cmp	r2, r3
 8007090:	d215      	bcs.n	80070be <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	7858      	ldrb	r0, [r3, #1]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800709c:	2301      	movs	r3, #1
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	f7fd fee0 	bl	8004e64 <disk_read>
 80070a4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2201      	movs	r2, #1
 80070ae:	755a      	strb	r2, [r3, #21]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	2101      	movs	r1, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe f84a 	bl	800514e <unlock_fs>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e05f      	b.n	800717e <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	899b      	ldrh	r3, [r3, #12]
 80070c8:	4618      	mov	r0, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	8992      	ldrh	r2, [r2, #12]
 80070d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070d6:	fb01 f202 	mul.w	r2, r1, r2
 80070da:	1a9b      	subs	r3, r3, r2
 80070dc:	1ac3      	subs	r3, r0, r3
 80070de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80070e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d901      	bls.n	80070ec <f_write+0x2ec>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	8992      	ldrh	r2, [r2, #12]
 80070fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80070fe:	fb00 f202 	mul.w	r2, r0, r2
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	440b      	add	r3, r1
 8007106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fd ff8b 	bl	8005026 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	7d1b      	ldrb	r3, [r3, #20]
 8007114:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007118:	b2da      	uxtb	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	4413      	add	r3, r2
 8007124:	61fb      	str	r3, [r7, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	619a      	str	r2, [r3, #24]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	429a      	cmp	r2, r3
 800713c:	bf38      	it	cc
 800713e:	461a      	movcc	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	60da      	str	r2, [r3, #12]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714a:	441a      	add	r2, r3
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f47f ae97 	bne.w	8006e8e <f_write+0x8e>
 8007160:	e000      	b.n	8007164 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007162:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	7d1b      	ldrb	r3, [r3, #20]
 8007168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716c:	b2da      	uxtb	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f7fd ffe9 	bl	800514e <unlock_fs>
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3730      	adds	r7, #48	@ 0x30
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f107 0208 	add.w	r2, r7, #8
 8007194:	4611      	mov	r1, r2
 8007196:	4618      	mov	r0, r3
 8007198:	f7ff fc1c 	bl	80069d4 <validate>
 800719c:	4603      	mov	r3, r0
 800719e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d16d      	bne.n	8007282 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7d1b      	ldrb	r3, [r3, #20]
 80071aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d067      	beq.n	8007282 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	7d1b      	ldrb	r3, [r3, #20]
 80071b6:	b25b      	sxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	da1a      	bge.n	80071f2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	7858      	ldrb	r0, [r3, #1]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	2301      	movs	r3, #1
 80071cc:	f7fd fe6a 	bl	8004ea4 <disk_write>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d006      	beq.n	80071e4 <f_sync+0x5e>
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2101      	movs	r1, #1
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fd ffb7 	bl	800514e <unlock_fs>
 80071e0:	2301      	movs	r3, #1
 80071e2:	e055      	b.n	8007290 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	7d1b      	ldrb	r3, [r3, #20]
 80071e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80071f2:	f7fd fd97 	bl	8004d24 <get_fattime>
 80071f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fe:	4619      	mov	r1, r3
 8007200:	4610      	mov	r0, r2
 8007202:	f7fe f96f 	bl	80054e4 <move_window>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d138      	bne.n	8007282 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	330b      	adds	r3, #11
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	330b      	adds	r3, #11
 8007220:	f042 0220 	orr.w	r2, r2, #32
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	461a      	mov	r2, r3
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	f7fe fefa 	bl	800602c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f103 021c 	add.w	r2, r3, #28
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fd fec2 	bl	8004fce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3316      	adds	r3, #22
 800724e:	6939      	ldr	r1, [r7, #16]
 8007250:	4618      	mov	r0, r3
 8007252:	f7fd febc 	bl	8004fce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3312      	adds	r3, #18
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f7fd fe9b 	bl	8004f98 <st_word>
					fs->wflag = 1;
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2201      	movs	r2, #1
 8007266:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f7fe f968 	bl	8005540 <sync_fs>
 8007270:	4603      	mov	r3, r0
 8007272:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	7d1b      	ldrb	r3, [r3, #20]
 8007278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	7dfa      	ldrb	r2, [r7, #23]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7fd ff60 	bl	800514e <unlock_fs>
 800728e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f7ff ff70 	bl	8007186 <f_sync>
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11d      	bne.n	80072ec <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f107 0208 	add.w	r2, r7, #8
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fb8b 	bl	80069d4 <validate>
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d111      	bne.n	80072ec <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe f865 	bl	800539c <dec_lock>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d102      	bne.n	80072e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fd ff31 	bl	800514e <unlock_fs>
#endif
		}
	}
	return res;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b087      	sub	sp, #28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007306:	2301      	movs	r3, #1
 8007308:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800730e:	4b1f      	ldr	r3, [pc, #124]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007310:	7a5b      	ldrb	r3, [r3, #9]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d131      	bne.n	800737c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007318:	4b1c      	ldr	r3, [pc, #112]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 800731a:	7a5b      	ldrb	r3, [r3, #9]
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	4b1a      	ldr	r3, [pc, #104]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007322:	2100      	movs	r1, #0
 8007324:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007326:	4b19      	ldr	r3, [pc, #100]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007328:	7a5b      	ldrb	r3, [r3, #9]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	4a17      	ldr	r2, [pc, #92]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007336:	4b15      	ldr	r3, [pc, #84]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007338:	7a5b      	ldrb	r3, [r3, #9]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	461a      	mov	r2, r3
 800733e:	4b13      	ldr	r3, [pc, #76]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007340:	4413      	add	r3, r2
 8007342:	79fa      	ldrb	r2, [r7, #7]
 8007344:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007346:	4b11      	ldr	r3, [pc, #68]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007348:	7a5b      	ldrb	r3, [r3, #9]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	b2d1      	uxtb	r1, r2
 8007350:	4a0e      	ldr	r2, [pc, #56]	@ (800738c <FATFS_LinkDriverEx+0x94>)
 8007352:	7251      	strb	r1, [r2, #9]
 8007354:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007356:	7dbb      	ldrb	r3, [r7, #22]
 8007358:	3330      	adds	r3, #48	@ 0x30
 800735a:	b2da      	uxtb	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	3301      	adds	r3, #1
 8007364:	223a      	movs	r2, #58	@ 0x3a
 8007366:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	3302      	adds	r3, #2
 800736c:	222f      	movs	r2, #47	@ 0x2f
 800736e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	3303      	adds	r3, #3
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
}
 800737e:	4618      	mov	r0, r3
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	20001e48 	.word	0x20001e48

08007390 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800739a:	2200      	movs	r2, #0
 800739c:	6839      	ldr	r1, [r7, #0]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7ff ffaa 	bl	80072f8 <FATFS_LinkDriverEx>
 80073a4:	4603      	mov	r3, r0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80073ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f8a6 	bl	8007510 <osSemaphoreWait>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80073ce:	68fb      	ldr	r3, [r7, #12]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8e3 	bl	80075ac <osSemaphoreRelease>
#endif
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	4603      	mov	r3, r0
 80073f6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007400:	2b84      	cmp	r3, #132	@ 0x84
 8007402:	d005      	beq.n	8007410 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007404:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	3303      	adds	r3, #3
 800740e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007410:	68fb      	ldr	r3, [r7, #12]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007424:	f3ef 8305 	mrs	r3, IPSR
 8007428:	607b      	str	r3, [r7, #4]
  return(result);
 800742a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007446:	f000 ffdd 	bl	8008404 <vTaskStartScheduler>
  
  return osOK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	bd80      	pop	{r7, pc}

08007450 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007452:	b089      	sub	sp, #36	@ 0x24
 8007454:	af04      	add	r7, sp, #16
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d020      	beq.n	80074a4 <osThreadCreate+0x54>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d01c      	beq.n	80074a4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685c      	ldr	r4, [r3, #4]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691e      	ldr	r6, [r3, #16]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff ffb6 	bl	80073ee <makeFreeRtosPriority>
 8007482:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800748c:	9202      	str	r2, [sp, #8]
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	9100      	str	r1, [sp, #0]
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	4632      	mov	r2, r6
 8007496:	4629      	mov	r1, r5
 8007498:	4620      	mov	r0, r4
 800749a:	f000 fddb 	bl	8008054 <xTaskCreateStatic>
 800749e:	4603      	mov	r3, r0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	e01c      	b.n	80074de <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685c      	ldr	r4, [r3, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074b0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff ff98 	bl	80073ee <makeFreeRtosPriority>
 80074be:	4602      	mov	r2, r0
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	9200      	str	r2, [sp, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	4632      	mov	r2, r6
 80074cc:	4629      	mov	r1, r5
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 fe26 	bl	8008120 <xTaskCreate>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d001      	beq.n	80074de <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	e000      	b.n	80074e0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074de:	68fb      	ldr	r3, [r7, #12]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074e8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <osDelay+0x16>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	e000      	b.n	8007500 <osDelay+0x18>
 80074fe:	2301      	movs	r3, #1
 8007500:	4618      	mov	r0, r3
 8007502:	f000 ff47 	bl	8008394 <vTaskDelay>
  
  return osOK;
 8007506:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800751a:	2300      	movs	r3, #0
 800751c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007524:	2380      	movs	r3, #128	@ 0x80
 8007526:	e03a      	b.n	800759e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007532:	d103      	bne.n	800753c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007534:	f04f 33ff 	mov.w	r3, #4294967295
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e009      	b.n	8007550 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <osSemaphoreWait+0x40>
      ticks = 1;
 800754c:	2301      	movs	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007550:	f7ff ff65 	bl	800741e <inHandlerMode>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d017      	beq.n	800758a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800755a:	f107 0308 	add.w	r3, r7, #8
 800755e:	461a      	mov	r2, r3
 8007560:	2100      	movs	r1, #0
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fbc6 	bl	8007cf4 <xQueueReceiveFromISR>
 8007568:	4603      	mov	r3, r0
 800756a:	2b01      	cmp	r3, #1
 800756c:	d001      	beq.n	8007572 <osSemaphoreWait+0x62>
      return osErrorOS;
 800756e:	23ff      	movs	r3, #255	@ 0xff
 8007570:	e015      	b.n	800759e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <osSemaphoreWait+0x8c>
 8007578:	4b0b      	ldr	r3, [pc, #44]	@ (80075a8 <osSemaphoreWait+0x98>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	e008      	b.n	800759c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800758a:	68f9      	ldr	r1, [r7, #12]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fa99 	bl	8007ac4 <xQueueSemaphoreTake>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d001      	beq.n	800759c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007598:	23ff      	movs	r3, #255	@ 0xff
 800759a:	e000      	b.n	800759e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	e000ed04 	.word	0xe000ed04

080075ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80075bc:	f7ff ff2f 	bl	800741e <inHandlerMode>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80075c6:	f107 0308 	add.w	r3, r7, #8
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9e1 	bl	8007994 <xQueueGiveFromISR>
 80075d2:	4603      	mov	r3, r0
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80075d8:	23ff      	movs	r3, #255	@ 0xff
 80075da:	e017      	b.n	800760c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <osSemaphoreRelease+0x5e>
 80075e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007614 <osSemaphoreRelease+0x68>)
 80075e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075e8:	601a      	str	r2, [r3, #0]
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	f3bf 8f6f 	isb	sy
 80075f2:	e00a      	b.n	800760a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80075f4:	2300      	movs	r3, #0
 80075f6:	2200      	movs	r2, #0
 80075f8:	2100      	movs	r1, #0
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8c0 	bl	8007780 <xQueueGenericSend>
 8007600:	4603      	mov	r3, r0
 8007602:	2b01      	cmp	r3, #1
 8007604:	d001      	beq.n	800760a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007606:	23ff      	movs	r3, #255	@ 0xff
 8007608:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f103 0208 	add.w	r2, r3, #8
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f04f 32ff 	mov.w	r2, #4294967295
 8007630:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f103 0208 	add.w	r2, r3, #8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f103 0208 	add.w	r2, r3, #8
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d0:	d103      	bne.n	80076da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	e00c      	b.n	80076f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	3308      	adds	r3, #8
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e002      	b.n	80076e8 <vListInsert+0x2e>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d2f6      	bcs.n	80076e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	601a      	str	r2, [r3, #0]
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	6892      	ldr	r2, [r2, #8]
 8007742:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6852      	ldr	r2, [r2, #4]
 800774c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	d103      	bne.n	8007760 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	1e5a      	subs	r2, r3, #1
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	@ 0x38
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	b672      	cpsid	i
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	b662      	cpsie	i
 80077b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077b2:	bf00      	nop
 80077b4:	bf00      	nop
 80077b6:	e7fd      	b.n	80077b4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <xQueueGenericSend+0x46>
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueGenericSend+0x4a>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueGenericSend+0x4c>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10d      	bne.n	80077ec <xQueueGenericSend+0x6c>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d4:	b672      	cpsid	i
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	b662      	cpsie	i
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	e7fd      	b.n	80077e8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d103      	bne.n	80077fa <xQueueGenericSend+0x7a>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <xQueueGenericSend+0x7e>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <xQueueGenericSend+0x80>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10d      	bne.n	8007820 <xQueueGenericSend+0xa0>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	623b      	str	r3, [r7, #32]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007820:	f001 fa0e 	bl	8008c40 <xTaskGetSchedulerState>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d102      	bne.n	8007830 <xQueueGenericSend+0xb0>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <xQueueGenericSend+0xb4>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <xQueueGenericSend+0xb6>
 8007834:	2300      	movs	r3, #0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10d      	bne.n	8007856 <xQueueGenericSend+0xd6>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	b672      	cpsid	i
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	b662      	cpsie	i
 800784e:	61fb      	str	r3, [r7, #28]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007856:	f001 fd49 	bl	80092ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007862:	429a      	cmp	r2, r3
 8007864:	d302      	bcc.n	800786c <xQueueGenericSend+0xec>
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b02      	cmp	r3, #2
 800786a:	d129      	bne.n	80078c0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	68b9      	ldr	r1, [r7, #8]
 8007870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007872:	f000 fadf 	bl	8007e34 <prvCopyDataToQueue>
 8007876:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d010      	beq.n	80078a2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	3324      	adds	r3, #36	@ 0x24
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f813 	bl	80088b0 <xTaskRemoveFromEventList>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d013      	beq.n	80078b8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <xQueueGenericSend+0x210>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	e00a      	b.n	80078b8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078a8:	4b39      	ldr	r3, [pc, #228]	@ (8007990 <xQueueGenericSend+0x210>)
 80078aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078b8:	f001 fd4e 	bl	8009358 <vPortExitCritical>
				return pdPASS;
 80078bc:	2301      	movs	r3, #1
 80078be:	e063      	b.n	8007988 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d103      	bne.n	80078ce <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078c6:	f001 fd47 	bl	8009358 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	e05c      	b.n	8007988 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d106      	bne.n	80078e2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f84f 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078e2:	f001 fd39 	bl	8009358 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078e6:	f000 fdf3 	bl	80084d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078ea:	f001 fcff 	bl	80092ec <vPortEnterCritical>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078f4:	b25b      	sxtb	r3, r3
 80078f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fa:	d103      	bne.n	8007904 <xQueueGenericSend+0x184>
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800790a:	b25b      	sxtb	r3, r3
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d103      	bne.n	800791a <xQueueGenericSend+0x19a>
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800791a:	f001 fd1d 	bl	8009358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800791e:	1d3a      	adds	r2, r7, #4
 8007920:	f107 0314 	add.w	r3, r7, #20
 8007924:	4611      	mov	r1, r2
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f83e 	bl	80089a8 <xTaskCheckForTimeOut>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d124      	bne.n	800797c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007934:	f000 fb76 	bl	8008024 <prvIsQueueFull>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d018      	beq.n	8007970 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3310      	adds	r3, #16
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4611      	mov	r1, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f000 ff8a 	bl	8008860 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800794c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800794e:	f000 fb01 	bl	8007f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007952:	f000 fdcb 	bl	80084ec <xTaskResumeAll>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	f47f af7c 	bne.w	8007856 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800795e:	4b0c      	ldr	r3, [pc, #48]	@ (8007990 <xQueueGenericSend+0x210>)
 8007960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	e772      	b.n	8007856 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007972:	f000 faef 	bl	8007f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007976:	f000 fdb9 	bl	80084ec <xTaskResumeAll>
 800797a:	e76c      	b.n	8007856 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800797c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800797e:	f000 fae9 	bl	8007f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007982:	f000 fdb3 	bl	80084ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007988:	4618      	mov	r0, r3
 800798a:	3738      	adds	r7, #56	@ 0x38
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	e000ed04 	.word	0xe000ed04

08007994 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08e      	sub	sp, #56	@ 0x38
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10d      	bne.n	80079c4 <xQueueGiveFromISR+0x30>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00d      	beq.n	80079e8 <xQueueGiveFromISR+0x54>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	b672      	cpsid	i
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	b662      	cpsie	i
 80079e0:	61fb      	str	r3, [r7, #28]
}
 80079e2:	bf00      	nop
 80079e4:	bf00      	nop
 80079e6:	e7fd      	b.n	80079e4 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d103      	bne.n	80079f8 <xQueueGiveFromISR+0x64>
 80079f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <xQueueGiveFromISR+0x68>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <xQueueGiveFromISR+0x6a>
 80079fc:	2300      	movs	r3, #0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10d      	bne.n	8007a1e <xQueueGiveFromISR+0x8a>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a06:	b672      	cpsid	i
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	b662      	cpsie	i
 8007a16:	61bb      	str	r3, [r7, #24]
}
 8007a18:	bf00      	nop
 8007a1a:	bf00      	nop
 8007a1c:	e7fd      	b.n	8007a1a <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a1e:	f001 fd4d 	bl	80094bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a22:	f3ef 8211 	mrs	r2, BASEPRI
 8007a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a2a:	b672      	cpsid	i
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	b662      	cpsie	i
 8007a3a:	617a      	str	r2, [r7, #20]
 8007a3c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a3e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d22b      	bcs.n	8007aaa <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6c:	d112      	bne.n	8007a94 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d016      	beq.n	8007aa4 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	3324      	adds	r3, #36	@ 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 ff18 	bl	80088b0 <xTaskRemoveFromEventList>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00e      	beq.n	8007aa4 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e007      	b.n	8007aa4 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a98:	3301      	adds	r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	b25a      	sxtb	r2, r3
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aa8:	e001      	b.n	8007aae <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007ab8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3738      	adds	r7, #56	@ 0x38
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	@ 0x38
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10d      	bne.n	8007afc <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	b672      	cpsid	i
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	b662      	cpsie	i
 8007af4:	623b      	str	r3, [r7, #32]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00d      	beq.n	8007b20 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	b672      	cpsid	i
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	b662      	cpsie	i
 8007b18:	61fb      	str	r3, [r7, #28]
}
 8007b1a:	bf00      	nop
 8007b1c:	bf00      	nop
 8007b1e:	e7fd      	b.n	8007b1c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b20:	f001 f88e 	bl	8008c40 <xTaskGetSchedulerState>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <xQueueSemaphoreTake+0x6c>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <xQueueSemaphoreTake+0x70>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <xQueueSemaphoreTake+0x72>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10d      	bne.n	8007b56 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	b672      	cpsid	i
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	b662      	cpsie	i
 8007b4e:	61bb      	str	r3, [r7, #24]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b56:	f001 fbc9 	bl	80092ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d024      	beq.n	8007bb0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	1e5a      	subs	r2, r3, #1
 8007b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d104      	bne.n	8007b80 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007b76:	f001 fa2d 	bl	8008fd4 <pvTaskIncrementMutexHeldCount>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00f      	beq.n	8007ba8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fe8f 	bl	80088b0 <xTaskRemoveFromEventList>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b98:	4b55      	ldr	r3, [pc, #340]	@ (8007cf0 <xQueueSemaphoreTake+0x22c>)
 8007b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ba8:	f001 fbd6 	bl	8009358 <vPortExitCritical>
				return pdPASS;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e09a      	b.n	8007ce6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d114      	bne.n	8007be0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00d      	beq.n	8007bd8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	b672      	cpsid	i
 8007bc2:	f383 8811 	msr	BASEPRI, r3
 8007bc6:	f3bf 8f6f 	isb	sy
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	b662      	cpsie	i
 8007bd0:	617b      	str	r3, [r7, #20]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007bd8:	f001 fbbe 	bl	8009358 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e082      	b.n	8007ce6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d106      	bne.n	8007bf4 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007be6:	f107 030c 	add.w	r3, r7, #12
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 fec6 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bf4:	f001 fbb0 	bl	8009358 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bf8:	f000 fc6a 	bl	80084d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bfc:	f001 fb76 	bl	80092ec <vPortEnterCritical>
 8007c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c06:	b25b      	sxtb	r3, r3
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d103      	bne.n	8007c16 <xQueueSemaphoreTake+0x152>
 8007c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c1c:	b25b      	sxtb	r3, r3
 8007c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c22:	d103      	bne.n	8007c2c <xQueueSemaphoreTake+0x168>
 8007c24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c2c:	f001 fb94 	bl	8009358 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c30:	463a      	mov	r2, r7
 8007c32:	f107 030c 	add.w	r3, r7, #12
 8007c36:	4611      	mov	r1, r2
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 feb5 	bl	80089a8 <xTaskCheckForTimeOut>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d132      	bne.n	8007caa <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c46:	f000 f9d7 	bl	8007ff8 <prvIsQueueEmpty>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d026      	beq.n	8007c9e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d109      	bne.n	8007c6c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007c58:	f001 fb48 	bl	80092ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f80b 	bl	8008c7c <xTaskPriorityInherit>
 8007c66:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007c68:	f001 fb76 	bl	8009358 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	3324      	adds	r3, #36	@ 0x24
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f000 fdf3 	bl	8008860 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007c7c:	f000 f96a 	bl	8007f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c80:	f000 fc34 	bl	80084ec <xTaskResumeAll>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f47f af65 	bne.w	8007b56 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007c8c:	4b18      	ldr	r3, [pc, #96]	@ (8007cf0 <xQueueSemaphoreTake+0x22c>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	e75b      	b.n	8007b56 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007c9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ca0:	f000 f958 	bl	8007f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ca4:	f000 fc22 	bl	80084ec <xTaskResumeAll>
 8007ca8:	e755      	b.n	8007b56 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007caa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cac:	f000 f952 	bl	8007f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cb0:	f000 fc1c 	bl	80084ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cb6:	f000 f99f 	bl	8007ff8 <prvIsQueueEmpty>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f43f af4a 	beq.w	8007b56 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00d      	beq.n	8007ce4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007cc8:	f001 fb10 	bl	80092ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ccc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007cce:	f000 f899 	bl	8007e04 <prvGetDisinheritPriorityAfterTimeout>
 8007cd2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 f8da 	bl	8008e94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ce0:	f001 fb3a 	bl	8009358 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3738      	adds	r7, #56	@ 0x38
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	@ 0x38
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d10d      	bne.n	8007d26 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0e:	b672      	cpsid	i
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	b662      	cpsie	i
 8007d1e:	623b      	str	r3, [r7, #32]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <xQueueReceiveFromISR+0x40>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <xQueueReceiveFromISR+0x44>
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <xQueueReceiveFromISR+0x46>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10d      	bne.n	8007d5a <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	b672      	cpsid	i
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	b662      	cpsie	i
 8007d52:	61fb      	str	r3, [r7, #28]
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop
 8007d58:	e7fd      	b.n	8007d56 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d5a:	f001 fbaf 	bl	80094bc <vPortValidateInterruptPriority>
	__asm volatile
 8007d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d66:	b672      	cpsid	i
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	b662      	cpsie	i
 8007d76:	61ba      	str	r2, [r7, #24]
 8007d78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d02f      	beq.n	8007dea <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d94:	68b9      	ldr	r1, [r7, #8]
 8007d96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d98:	f000 f8b6 	bl	8007f08 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	1e5a      	subs	r2, r3, #1
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007da4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dac:	d112      	bne.n	8007dd4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d016      	beq.n	8007de4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	3310      	adds	r3, #16
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f000 fd78 	bl	80088b0 <xTaskRemoveFromEventList>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	e007      	b.n	8007de4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dd8:	3301      	adds	r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	b25a      	sxtb	r2, r3
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007de4:	2301      	movs	r3, #1
 8007de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de8:	e001      	b.n	8007dee <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f383 8811 	msr	BASEPRI, r3
}
 8007df8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3738      	adds	r7, #56	@ 0x38
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f1c3 0307 	rsb	r3, r3, #7
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	e001      	b.n	8007e26 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007e26:	68fb      	ldr	r3, [r7, #12]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3714      	adds	r7, #20
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10d      	bne.n	8007e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d14d      	bne.n	8007ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 ff8c 	bl	8008d7c <xTaskPriorityDisinherit>
 8007e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	e043      	b.n	8007ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d119      	bne.n	8007ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6858      	ldr	r0, [r3, #4]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	68b9      	ldr	r1, [r7, #8]
 8007e80:	f001 fda2 	bl	80099c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	685a      	ldr	r2, [r3, #4]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d32b      	bcc.n	8007ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	605a      	str	r2, [r3, #4]
 8007ea6:	e026      	b.n	8007ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68d8      	ldr	r0, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	f001 fd88 	bl	80099c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec0:	425b      	negs	r3, r3
 8007ec2:	441a      	add	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d207      	bcs.n	8007ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007edc:	425b      	negs	r3, r3
 8007ede:	441a      	add	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d105      	bne.n	8007ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d002      	beq.n	8007ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d018      	beq.n	8007f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68da      	ldr	r2, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	441a      	add	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d303      	bcc.n	8007f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68d9      	ldr	r1, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f44:	461a      	mov	r2, r3
 8007f46:	6838      	ldr	r0, [r7, #0]
 8007f48:	f001 fd3e 	bl	80099c8 <memcpy>
	}
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f5c:	f001 f9c6 	bl	80092ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f68:	e011      	b.n	8007f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	3324      	adds	r3, #36	@ 0x24
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fc9a 	bl	80088b0 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f82:	f000 fd79 	bl	8008a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	dce9      	bgt.n	8007f6a <prvUnlockQueue+0x16>
 8007f96:	e000      	b.n	8007f9a <prvUnlockQueue+0x46>
					break;
 8007f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	22ff      	movs	r2, #255	@ 0xff
 8007f9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007fa2:	f001 f9d9 	bl	8009358 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007fa6:	f001 f9a1 	bl	80092ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fb2:	e011      	b.n	8007fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d012      	beq.n	8007fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3310      	adds	r3, #16
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f000 fc75 	bl	80088b0 <xTaskRemoveFromEventList>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d001      	beq.n	8007fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fcc:	f000 fd54 	bl	8008a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	dce9      	bgt.n	8007fb4 <prvUnlockQueue+0x60>
 8007fe0:	e000      	b.n	8007fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	22ff      	movs	r2, #255	@ 0xff
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fec:	f001 f9b4 	bl	8009358 <vPortExitCritical>
}
 8007ff0:	bf00      	nop
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008000:	f001 f974 	bl	80092ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008008:	2b00      	cmp	r3, #0
 800800a:	d102      	bne.n	8008012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	e001      	b.n	8008016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008016:	f001 f99f 	bl	8009358 <vPortExitCritical>

	return xReturn;
 800801a:	68fb      	ldr	r3, [r7, #12]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800802c:	f001 f95e 	bl	80092ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008038:	429a      	cmp	r2, r3
 800803a:	d102      	bne.n	8008042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e001      	b.n	8008046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008046:	f001 f987 	bl	8009358 <vPortExitCritical>

	return xReturn;
 800804a:	68fb      	ldr	r3, [r7, #12]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008054:	b580      	push	{r7, lr}
 8008056:	b08e      	sub	sp, #56	@ 0x38
 8008058:	af04      	add	r7, sp, #16
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10d      	bne.n	8008084 <xTaskCreateStatic+0x30>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	623b      	str	r3, [r7, #32]
}
 800807e:	bf00      	nop
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10d      	bne.n	80080a6 <xTaskCreateStatic+0x52>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808e:	b672      	cpsid	i
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	b662      	cpsie	i
 800809e:	61fb      	str	r3, [r7, #28]
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	e7fd      	b.n	80080a2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080a6:	2354      	movs	r3, #84	@ 0x54
 80080a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	2b54      	cmp	r3, #84	@ 0x54
 80080ae:	d00d      	beq.n	80080cc <xTaskCreateStatic+0x78>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	b672      	cpsid	i
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	b662      	cpsie	i
 80080c4:	61bb      	str	r3, [r7, #24]
}
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
 80080ca:	e7fd      	b.n	80080c8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01e      	beq.n	8008112 <xTaskCreateStatic+0xbe>
 80080d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d01b      	beq.n	8008112 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ec:	2300      	movs	r3, #0
 80080ee:	9303      	str	r3, [sp, #12]
 80080f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f2:	9302      	str	r3, [sp, #8]
 80080f4:	f107 0314 	add.w	r3, r7, #20
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f850 	bl	80081aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800810a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800810c:	f000 f8d8 	bl	80082c0 <prvAddNewTaskToReadyList>
 8008110:	e001      	b.n	8008116 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008116:	697b      	ldr	r3, [r7, #20]
	}
 8008118:	4618      	mov	r0, r3
 800811a:	3728      	adds	r7, #40	@ 0x28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08c      	sub	sp, #48	@ 0x30
 8008124:	af04      	add	r7, sp, #16
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4618      	mov	r0, r3
 8008136:	f001 fa07 	bl	8009548 <pvPortMalloc>
 800813a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008142:	2054      	movs	r0, #84	@ 0x54
 8008144:	f001 fa00 	bl	8009548 <pvPortMalloc>
 8008148:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d003      	beq.n	8008158 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	631a      	str	r2, [r3, #48]	@ 0x30
 8008156:	e005      	b.n	8008164 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008158:	6978      	ldr	r0, [r7, #20]
 800815a:	f001 fac3 	bl	80096e4 <vPortFree>
 800815e:	e001      	b.n	8008164 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008160:	2300      	movs	r3, #0
 8008162:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008172:	88fa      	ldrh	r2, [r7, #6]
 8008174:	2300      	movs	r3, #0
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	68b9      	ldr	r1, [r7, #8]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f80e 	bl	80081aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800818e:	69f8      	ldr	r0, [r7, #28]
 8008190:	f000 f896 	bl	80082c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e002      	b.n	80081a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081a0:	69bb      	ldr	r3, [r7, #24]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b088      	sub	sp, #32
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	60b9      	str	r1, [r7, #8]
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80081c2:	440b      	add	r3, r1
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f023 0307 	bic.w	r3, r3, #7
 80081d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	f003 0307 	and.w	r3, r3, #7
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00d      	beq.n	80081f8 <prvInitialiseNewTask+0x4e>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e0:	b672      	cpsid	i
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	b662      	cpsie	i
 80081f0:	617b      	str	r3, [r7, #20]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01f      	beq.n	800823e <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081fe:	2300      	movs	r3, #0
 8008200:	61fb      	str	r3, [r7, #28]
 8008202:	e012      	b.n	800822a <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	4413      	add	r3, r2
 800820a:	7819      	ldrb	r1, [r3, #0]
 800820c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	3334      	adds	r3, #52	@ 0x34
 8008214:	460a      	mov	r2, r1
 8008216:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d006      	beq.n	8008232 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	3301      	adds	r3, #1
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	2b0f      	cmp	r3, #15
 800822e:	d9e9      	bls.n	8008204 <prvInitialiseNewTask+0x5a>
 8008230:	e000      	b.n	8008234 <prvInitialiseNewTask+0x8a>
			{
				break;
 8008232:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800823c:	e003      	b.n	8008246 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008248:	2b06      	cmp	r3, #6
 800824a:	d901      	bls.n	8008250 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800824c:	2306      	movs	r3, #6
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008254:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800825a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	2200      	movs	r2, #0
 8008260:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	3304      	adds	r3, #4
 8008266:	4618      	mov	r0, r3
 8008268:	f7ff f9f6 	bl	8007658 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800826c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800826e:	3318      	adds	r3, #24
 8008270:	4618      	mov	r0, r3
 8008272:	f7ff f9f1 	bl	8007658 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800827a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800827c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827e:	f1c3 0207 	rsb	r2, r3, #7
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800828a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800828c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800828e:	2200      	movs	r2, #0
 8008290:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	69b8      	ldr	r0, [r7, #24]
 80082a0:	f000 ff12 	bl	80090c8 <pxPortInitialiseStack>
 80082a4:	4602      	mov	r2, r0
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082b6:	bf00      	nop
 80082b8:	3720      	adds	r7, #32
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082c8:	f001 f810 	bl	80092ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008378 <prvAddNewTaskToReadyList+0xb8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	4a29      	ldr	r2, [pc, #164]	@ (8008378 <prvAddNewTaskToReadyList+0xb8>)
 80082d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082d6:	4b29      	ldr	r3, [pc, #164]	@ (800837c <prvAddNewTaskToReadyList+0xbc>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082de:	4a27      	ldr	r2, [pc, #156]	@ (800837c <prvAddNewTaskToReadyList+0xbc>)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082e4:	4b24      	ldr	r3, [pc, #144]	@ (8008378 <prvAddNewTaskToReadyList+0xb8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d110      	bne.n	800830e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082ec:	f000 fbe8 	bl	8008ac0 <prvInitialiseTaskLists>
 80082f0:	e00d      	b.n	800830e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80082f2:	4b23      	ldr	r3, [pc, #140]	@ (8008380 <prvAddNewTaskToReadyList+0xc0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d109      	bne.n	800830e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80082fa:	4b20      	ldr	r3, [pc, #128]	@ (800837c <prvAddNewTaskToReadyList+0xbc>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	429a      	cmp	r2, r3
 8008306:	d802      	bhi.n	800830e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008308:	4a1c      	ldr	r2, [pc, #112]	@ (800837c <prvAddNewTaskToReadyList+0xbc>)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800830e:	4b1d      	ldr	r3, [pc, #116]	@ (8008384 <prvAddNewTaskToReadyList+0xc4>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <prvAddNewTaskToReadyList+0xc4>)
 8008316:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	2201      	movs	r2, #1
 800831e:	409a      	lsls	r2, r3
 8008320:	4b19      	ldr	r3, [pc, #100]	@ (8008388 <prvAddNewTaskToReadyList+0xc8>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4313      	orrs	r3, r2
 8008326:	4a18      	ldr	r2, [pc, #96]	@ (8008388 <prvAddNewTaskToReadyList+0xc8>)
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832e:	4613      	mov	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4a15      	ldr	r2, [pc, #84]	@ (800838c <prvAddNewTaskToReadyList+0xcc>)
 8008338:	441a      	add	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	4619      	mov	r1, r3
 8008340:	4610      	mov	r0, r2
 8008342:	f7ff f996 	bl	8007672 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008346:	f001 f807 	bl	8009358 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800834a:	4b0d      	ldr	r3, [pc, #52]	@ (8008380 <prvAddNewTaskToReadyList+0xc0>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00e      	beq.n	8008370 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008352:	4b0a      	ldr	r3, [pc, #40]	@ (800837c <prvAddNewTaskToReadyList+0xbc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	429a      	cmp	r2, r3
 800835e:	d207      	bcs.n	8008370 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008360:	4b0b      	ldr	r3, [pc, #44]	@ (8008390 <prvAddNewTaskToReadyList+0xd0>)
 8008362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	20001f54 	.word	0x20001f54
 800837c:	20001e54 	.word	0x20001e54
 8008380:	20001f60 	.word	0x20001f60
 8008384:	20001f70 	.word	0x20001f70
 8008388:	20001f5c 	.word	0x20001f5c
 800838c:	20001e58 	.word	0x20001e58
 8008390:	e000ed04 	.word	0xe000ed04

08008394 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800839c:	2300      	movs	r3, #0
 800839e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d01a      	beq.n	80083dc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083a6:	4b15      	ldr	r3, [pc, #84]	@ (80083fc <vTaskDelay+0x68>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00d      	beq.n	80083ca <vTaskDelay+0x36>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	b672      	cpsid	i
 80083b4:	f383 8811 	msr	BASEPRI, r3
 80083b8:	f3bf 8f6f 	isb	sy
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	b662      	cpsie	i
 80083c2:	60bb      	str	r3, [r7, #8]
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop
 80083c8:	e7fd      	b.n	80083c6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80083ca:	f000 f881 	bl	80084d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083ce:	2100      	movs	r1, #0
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fe13 	bl	8008ffc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083d6:	f000 f889 	bl	80084ec <xTaskResumeAll>
 80083da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d107      	bne.n	80083f2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80083e2:	4b07      	ldr	r3, [pc, #28]	@ (8008400 <vTaskDelay+0x6c>)
 80083e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083f2:	bf00      	nop
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	20001f7c 	.word	0x20001f7c
 8008400:	e000ed04 	.word	0xe000ed04

08008404 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	@ 0x28
 8008408:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008412:	463a      	mov	r2, r7
 8008414:	1d39      	adds	r1, r7, #4
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4618      	mov	r0, r3
 800841c:	f7f8 fd24 	bl	8000e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008420:	6839      	ldr	r1, [r7, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	9202      	str	r2, [sp, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	460a      	mov	r2, r1
 8008432:	4921      	ldr	r1, [pc, #132]	@ (80084b8 <vTaskStartScheduler+0xb4>)
 8008434:	4821      	ldr	r0, [pc, #132]	@ (80084bc <vTaskStartScheduler+0xb8>)
 8008436:	f7ff fe0d 	bl	8008054 <xTaskCreateStatic>
 800843a:	4603      	mov	r3, r0
 800843c:	4a20      	ldr	r2, [pc, #128]	@ (80084c0 <vTaskStartScheduler+0xbc>)
 800843e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008440:	4b1f      	ldr	r3, [pc, #124]	@ (80084c0 <vTaskStartScheduler+0xbc>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008448:	2301      	movs	r3, #1
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e001      	b.n	8008452 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d118      	bne.n	800848a <vTaskStartScheduler+0x86>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845c:	b672      	cpsid	i
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	b662      	cpsie	i
 800846c:	613b      	str	r3, [r7, #16]
}
 800846e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008470:	4b14      	ldr	r3, [pc, #80]	@ (80084c4 <vTaskStartScheduler+0xc0>)
 8008472:	f04f 32ff 	mov.w	r2, #4294967295
 8008476:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008478:	4b13      	ldr	r3, [pc, #76]	@ (80084c8 <vTaskStartScheduler+0xc4>)
 800847a:	2201      	movs	r2, #1
 800847c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800847e:	4b13      	ldr	r3, [pc, #76]	@ (80084cc <vTaskStartScheduler+0xc8>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008484:	f000 feb4 	bl	80091f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008488:	e011      	b.n	80084ae <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d10d      	bne.n	80084ae <vTaskStartScheduler+0xaa>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	b672      	cpsid	i
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	b662      	cpsie	i
 80084a6:	60fb      	str	r3, [r7, #12]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <vTaskStartScheduler+0xa6>
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	0800a32c 	.word	0x0800a32c
 80084bc:	08008a91 	.word	0x08008a91
 80084c0:	20001f78 	.word	0x20001f78
 80084c4:	20001f74 	.word	0x20001f74
 80084c8:	20001f60 	.word	0x20001f60
 80084cc:	20001f58 	.word	0x20001f58

080084d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80084d4:	4b04      	ldr	r3, [pc, #16]	@ (80084e8 <vTaskSuspendAll+0x18>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3301      	adds	r3, #1
 80084da:	4a03      	ldr	r2, [pc, #12]	@ (80084e8 <vTaskSuspendAll+0x18>)
 80084dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80084de:	bf00      	nop
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	20001f7c 	.word	0x20001f7c

080084ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80084fa:	4b43      	ldr	r3, [pc, #268]	@ (8008608 <xTaskResumeAll+0x11c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10d      	bne.n	800851e <xTaskResumeAll+0x32>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	603b      	str	r3, [r7, #0]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800851e:	f000 fee5 	bl	80092ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008522:	4b39      	ldr	r3, [pc, #228]	@ (8008608 <xTaskResumeAll+0x11c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3b01      	subs	r3, #1
 8008528:	4a37      	ldr	r2, [pc, #220]	@ (8008608 <xTaskResumeAll+0x11c>)
 800852a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800852c:	4b36      	ldr	r3, [pc, #216]	@ (8008608 <xTaskResumeAll+0x11c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d161      	bne.n	80085f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008534:	4b35      	ldr	r3, [pc, #212]	@ (800860c <xTaskResumeAll+0x120>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d05d      	beq.n	80085f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853c:	e02e      	b.n	800859c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800853e:	4b34      	ldr	r3, [pc, #208]	@ (8008610 <xTaskResumeAll+0x124>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	3318      	adds	r3, #24
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff f8ee 	bl	800772c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3304      	adds	r3, #4
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff f8e9 	bl	800772c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855e:	2201      	movs	r2, #1
 8008560:	409a      	lsls	r2, r3
 8008562:	4b2c      	ldr	r3, [pc, #176]	@ (8008614 <xTaskResumeAll+0x128>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4313      	orrs	r3, r2
 8008568:	4a2a      	ldr	r2, [pc, #168]	@ (8008614 <xTaskResumeAll+0x128>)
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4a27      	ldr	r2, [pc, #156]	@ (8008618 <xTaskResumeAll+0x12c>)
 800857a:	441a      	add	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3304      	adds	r3, #4
 8008580:	4619      	mov	r1, r3
 8008582:	4610      	mov	r0, r2
 8008584:	f7ff f875 	bl	8007672 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858c:	4b23      	ldr	r3, [pc, #140]	@ (800861c <xTaskResumeAll+0x130>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008596:	4b22      	ldr	r3, [pc, #136]	@ (8008620 <xTaskResumeAll+0x134>)
 8008598:	2201      	movs	r2, #1
 800859a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800859c:	4b1c      	ldr	r3, [pc, #112]	@ (8008610 <xTaskResumeAll+0x124>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1cc      	bne.n	800853e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085aa:	f000 fb29 	bl	8008c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085ae:	4b1d      	ldr	r3, [pc, #116]	@ (8008624 <xTaskResumeAll+0x138>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d010      	beq.n	80085dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085ba:	f000 f837 	bl	800862c <xTaskIncrementTick>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d002      	beq.n	80085ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80085c4:	4b16      	ldr	r3, [pc, #88]	@ (8008620 <xTaskResumeAll+0x134>)
 80085c6:	2201      	movs	r2, #1
 80085c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d1f1      	bne.n	80085ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80085d6:	4b13      	ldr	r3, [pc, #76]	@ (8008624 <xTaskResumeAll+0x138>)
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80085dc:	4b10      	ldr	r3, [pc, #64]	@ (8008620 <xTaskResumeAll+0x134>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d009      	beq.n	80085f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80085e4:	2301      	movs	r3, #1
 80085e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80085e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008628 <xTaskResumeAll+0x13c>)
 80085ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ee:	601a      	str	r2, [r3, #0]
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085f8:	f000 feae 	bl	8009358 <vPortExitCritical>

	return xAlreadyYielded;
 80085fc:	68bb      	ldr	r3, [r7, #8]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	20001f7c 	.word	0x20001f7c
 800860c:	20001f54 	.word	0x20001f54
 8008610:	20001f14 	.word	0x20001f14
 8008614:	20001f5c 	.word	0x20001f5c
 8008618:	20001e58 	.word	0x20001e58
 800861c:	20001e54 	.word	0x20001e54
 8008620:	20001f68 	.word	0x20001f68
 8008624:	20001f64 	.word	0x20001f64
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008632:	2300      	movs	r3, #0
 8008634:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008636:	4b50      	ldr	r3, [pc, #320]	@ (8008778 <xTaskIncrementTick+0x14c>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 808b 	bne.w	8008756 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008640:	4b4e      	ldr	r3, [pc, #312]	@ (800877c <xTaskIncrementTick+0x150>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3301      	adds	r3, #1
 8008646:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008648:	4a4c      	ldr	r2, [pc, #304]	@ (800877c <xTaskIncrementTick+0x150>)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d123      	bne.n	800869c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8008654:	4b4a      	ldr	r3, [pc, #296]	@ (8008780 <xTaskIncrementTick+0x154>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <xTaskIncrementTick+0x4e>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	603b      	str	r3, [r7, #0]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xTaskIncrementTick+0x4a>
 800867a:	4b41      	ldr	r3, [pc, #260]	@ (8008780 <xTaskIncrementTick+0x154>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	4b40      	ldr	r3, [pc, #256]	@ (8008784 <xTaskIncrementTick+0x158>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a3e      	ldr	r2, [pc, #248]	@ (8008780 <xTaskIncrementTick+0x154>)
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	4a3e      	ldr	r2, [pc, #248]	@ (8008784 <xTaskIncrementTick+0x158>)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6013      	str	r3, [r2, #0]
 800868e:	4b3e      	ldr	r3, [pc, #248]	@ (8008788 <xTaskIncrementTick+0x15c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	4a3c      	ldr	r2, [pc, #240]	@ (8008788 <xTaskIncrementTick+0x15c>)
 8008696:	6013      	str	r3, [r2, #0]
 8008698:	f000 fab2 	bl	8008c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800869c:	4b3b      	ldr	r3, [pc, #236]	@ (800878c <xTaskIncrementTick+0x160>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d348      	bcc.n	8008738 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a6:	4b36      	ldr	r3, [pc, #216]	@ (8008780 <xTaskIncrementTick+0x154>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	4b36      	ldr	r3, [pc, #216]	@ (800878c <xTaskIncrementTick+0x160>)
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295
 80086b6:	601a      	str	r2, [r3, #0]
					break;
 80086b8:	e03e      	b.n	8008738 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ba:	4b31      	ldr	r3, [pc, #196]	@ (8008780 <xTaskIncrementTick+0x154>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d203      	bcs.n	80086da <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80086d2:	4a2e      	ldr	r2, [pc, #184]	@ (800878c <xTaskIncrementTick+0x160>)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80086d8:	e02e      	b.n	8008738 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3304      	adds	r3, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff f824 	bl	800772c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff f81b 	bl	800772c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fa:	2201      	movs	r2, #1
 80086fc:	409a      	lsls	r2, r3
 80086fe:	4b24      	ldr	r3, [pc, #144]	@ (8008790 <xTaskIncrementTick+0x164>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4313      	orrs	r3, r2
 8008704:	4a22      	ldr	r2, [pc, #136]	@ (8008790 <xTaskIncrementTick+0x164>)
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800870c:	4613      	mov	r3, r2
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4a1f      	ldr	r2, [pc, #124]	@ (8008794 <xTaskIncrementTick+0x168>)
 8008716:	441a      	add	r2, r3
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3304      	adds	r3, #4
 800871c:	4619      	mov	r1, r3
 800871e:	4610      	mov	r0, r2
 8008720:	f7fe ffa7 	bl	8007672 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008728:	4b1b      	ldr	r3, [pc, #108]	@ (8008798 <xTaskIncrementTick+0x16c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872e:	429a      	cmp	r2, r3
 8008730:	d3b9      	bcc.n	80086a6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8008732:	2301      	movs	r3, #1
 8008734:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008736:	e7b6      	b.n	80086a6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008738:	4b17      	ldr	r3, [pc, #92]	@ (8008798 <xTaskIncrementTick+0x16c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800873e:	4915      	ldr	r1, [pc, #84]	@ (8008794 <xTaskIncrementTick+0x168>)
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d907      	bls.n	8008760 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008750:	2301      	movs	r3, #1
 8008752:	617b      	str	r3, [r7, #20]
 8008754:	e004      	b.n	8008760 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008756:	4b11      	ldr	r3, [pc, #68]	@ (800879c <xTaskIncrementTick+0x170>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	4a0f      	ldr	r2, [pc, #60]	@ (800879c <xTaskIncrementTick+0x170>)
 800875e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008760:	4b0f      	ldr	r3, [pc, #60]	@ (80087a0 <xTaskIncrementTick+0x174>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008768:	2301      	movs	r3, #1
 800876a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800876c:	697b      	ldr	r3, [r7, #20]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	20001f7c 	.word	0x20001f7c
 800877c:	20001f58 	.word	0x20001f58
 8008780:	20001f0c 	.word	0x20001f0c
 8008784:	20001f10 	.word	0x20001f10
 8008788:	20001f6c 	.word	0x20001f6c
 800878c:	20001f74 	.word	0x20001f74
 8008790:	20001f5c 	.word	0x20001f5c
 8008794:	20001e58 	.word	0x20001e58
 8008798:	20001e54 	.word	0x20001e54
 800879c:	20001f64 	.word	0x20001f64
 80087a0:	20001f68 	.word	0x20001f68

080087a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80087aa:	4b28      	ldr	r3, [pc, #160]	@ (800884c <vTaskSwitchContext+0xa8>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80087b2:	4b27      	ldr	r3, [pc, #156]	@ (8008850 <vTaskSwitchContext+0xac>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80087b8:	e042      	b.n	8008840 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80087ba:	4b25      	ldr	r3, [pc, #148]	@ (8008850 <vTaskSwitchContext+0xac>)
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087c0:	4b24      	ldr	r3, [pc, #144]	@ (8008854 <vTaskSwitchContext+0xb0>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	fab3 f383 	clz	r3, r3
 80087cc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80087ce:	7afb      	ldrb	r3, [r7, #11]
 80087d0:	f1c3 031f 	rsb	r3, r3, #31
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	4920      	ldr	r1, [pc, #128]	@ (8008858 <vTaskSwitchContext+0xb4>)
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10d      	bne.n	8008806 <vTaskSwitchContext+0x62>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ee:	b672      	cpsid	i
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	b662      	cpsie	i
 80087fe:	607b      	str	r3, [r7, #4]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <vTaskSwitchContext+0x5e>
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4a11      	ldr	r2, [pc, #68]	@ (8008858 <vTaskSwitchContext+0xb4>)
 8008812:	4413      	add	r3, r2
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	605a      	str	r2, [r3, #4]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	3308      	adds	r3, #8
 8008828:	429a      	cmp	r2, r3
 800882a:	d104      	bne.n	8008836 <vTaskSwitchContext+0x92>
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	685a      	ldr	r2, [r3, #4]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	605a      	str	r2, [r3, #4]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	4a07      	ldr	r2, [pc, #28]	@ (800885c <vTaskSwitchContext+0xb8>)
 800883e:	6013      	str	r3, [r2, #0]
}
 8008840:	bf00      	nop
 8008842:	371c      	adds	r7, #28
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	20001f7c 	.word	0x20001f7c
 8008850:	20001f68 	.word	0x20001f68
 8008854:	20001f5c 	.word	0x20001f5c
 8008858:	20001e58 	.word	0x20001e58
 800885c:	20001e54 	.word	0x20001e54

08008860 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10d      	bne.n	800888c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	b672      	cpsid	i
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	b662      	cpsie	i
 8008884:	60fb      	str	r3, [r7, #12]
}
 8008886:	bf00      	nop
 8008888:	bf00      	nop
 800888a:	e7fd      	b.n	8008888 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800888c:	4b07      	ldr	r3, [pc, #28]	@ (80088ac <vTaskPlaceOnEventList+0x4c>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3318      	adds	r3, #24
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fe ff10 	bl	80076ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800889a:	2101      	movs	r1, #1
 800889c:	6838      	ldr	r0, [r7, #0]
 800889e:	f000 fbad 	bl	8008ffc <prvAddCurrentTaskToDelayedList>
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20001e54 	.word	0x20001e54

080088b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10d      	bne.n	80088e2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ca:	b672      	cpsid	i
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	b662      	cpsie	i
 80088da:	60fb      	str	r3, [r7, #12]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3318      	adds	r3, #24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe ff20 	bl	800772c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <xTaskRemoveFromEventList+0xb4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11c      	bne.n	800892e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe ff17 	bl	800772c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008902:	2201      	movs	r2, #1
 8008904:	409a      	lsls	r2, r3
 8008906:	4b18      	ldr	r3, [pc, #96]	@ (8008968 <xTaskRemoveFromEventList+0xb8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4313      	orrs	r3, r2
 800890c:	4a16      	ldr	r2, [pc, #88]	@ (8008968 <xTaskRemoveFromEventList+0xb8>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a13      	ldr	r2, [pc, #76]	@ (800896c <xTaskRemoveFromEventList+0xbc>)
 800891e:	441a      	add	r2, r3
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fe fea3 	bl	8007672 <vListInsertEnd>
 800892c:	e005      	b.n	800893a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	3318      	adds	r3, #24
 8008932:	4619      	mov	r1, r3
 8008934:	480e      	ldr	r0, [pc, #56]	@ (8008970 <xTaskRemoveFromEventList+0xc0>)
 8008936:	f7fe fe9c 	bl	8007672 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800893e:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <xTaskRemoveFromEventList+0xc4>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008944:	429a      	cmp	r2, r3
 8008946:	d905      	bls.n	8008954 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008948:	2301      	movs	r3, #1
 800894a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800894c:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <xTaskRemoveFromEventList+0xc8>)
 800894e:	2201      	movs	r2, #1
 8008950:	601a      	str	r2, [r3, #0]
 8008952:	e001      	b.n	8008958 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008954:	2300      	movs	r3, #0
 8008956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008958:	697b      	ldr	r3, [r7, #20]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20001f7c 	.word	0x20001f7c
 8008968:	20001f5c 	.word	0x20001f5c
 800896c:	20001e58 	.word	0x20001e58
 8008970:	20001f14 	.word	0x20001f14
 8008974:	20001e54 	.word	0x20001e54
 8008978:	20001f68 	.word	0x20001f68

0800897c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008984:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <vTaskInternalSetTimeOutState+0x24>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <vTaskInternalSetTimeOutState+0x28>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	20001f6c 	.word	0x20001f6c
 80089a4:	20001f58 	.word	0x20001f58

080089a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10d      	bne.n	80089d4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	b672      	cpsid	i
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	b662      	cpsie	i
 80089cc:	613b      	str	r3, [r7, #16]
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089de:	b672      	cpsid	i
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	b662      	cpsie	i
 80089ee:	60fb      	str	r3, [r7, #12]
}
 80089f0:	bf00      	nop
 80089f2:	bf00      	nop
 80089f4:	e7fd      	b.n	80089f2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80089f6:	f000 fc79 	bl	80092ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008a70 <xTaskCheckForTimeOut+0xc8>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d102      	bne.n	8008a1a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	e023      	b.n	8008a62 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b15      	ldr	r3, [pc, #84]	@ (8008a74 <xTaskCheckForTimeOut+0xcc>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d007      	beq.n	8008a36 <xTaskCheckForTimeOut+0x8e>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d302      	bcc.n	8008a36 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e015      	b.n	8008a62 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d20b      	bcs.n	8008a58 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	1ad2      	subs	r2, r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f7ff ff95 	bl	800897c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61fb      	str	r3, [r7, #28]
 8008a56:	e004      	b.n	8008a62 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a62:	f000 fc79 	bl	8009358 <vPortExitCritical>

	return xReturn;
 8008a66:	69fb      	ldr	r3, [r7, #28]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3720      	adds	r7, #32
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	20001f58 	.word	0x20001f58
 8008a74:	20001f6c 	.word	0x20001f6c

08008a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a7c:	4b03      	ldr	r3, [pc, #12]	@ (8008a8c <vTaskMissedYield+0x14>)
 8008a7e:	2201      	movs	r2, #1
 8008a80:	601a      	str	r2, [r3, #0]
}
 8008a82:	bf00      	nop
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20001f68 	.word	0x20001f68

08008a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a98:	f000 f852 	bl	8008b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a9c:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <prvIdleTask+0x28>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d9f9      	bls.n	8008a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008aa4:	4b05      	ldr	r3, [pc, #20]	@ (8008abc <prvIdleTask+0x2c>)
 8008aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aaa:	601a      	str	r2, [r3, #0]
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ab4:	e7f0      	b.n	8008a98 <prvIdleTask+0x8>
 8008ab6:	bf00      	nop
 8008ab8:	20001e58 	.word	0x20001e58
 8008abc:	e000ed04 	.word	0xe000ed04

08008ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	e00c      	b.n	8008ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a12      	ldr	r2, [pc, #72]	@ (8008b20 <prvInitialiseTaskLists+0x60>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fd9c 	bl	8007618 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	607b      	str	r3, [r7, #4]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	d9ef      	bls.n	8008acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aec:	480d      	ldr	r0, [pc, #52]	@ (8008b24 <prvInitialiseTaskLists+0x64>)
 8008aee:	f7fe fd93 	bl	8007618 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008af2:	480d      	ldr	r0, [pc, #52]	@ (8008b28 <prvInitialiseTaskLists+0x68>)
 8008af4:	f7fe fd90 	bl	8007618 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af8:	480c      	ldr	r0, [pc, #48]	@ (8008b2c <prvInitialiseTaskLists+0x6c>)
 8008afa:	f7fe fd8d 	bl	8007618 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008afe:	480c      	ldr	r0, [pc, #48]	@ (8008b30 <prvInitialiseTaskLists+0x70>)
 8008b00:	f7fe fd8a 	bl	8007618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b04:	480b      	ldr	r0, [pc, #44]	@ (8008b34 <prvInitialiseTaskLists+0x74>)
 8008b06:	f7fe fd87 	bl	8007618 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <prvInitialiseTaskLists+0x78>)
 8008b0c:	4a05      	ldr	r2, [pc, #20]	@ (8008b24 <prvInitialiseTaskLists+0x64>)
 8008b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b10:	4b0a      	ldr	r3, [pc, #40]	@ (8008b3c <prvInitialiseTaskLists+0x7c>)
 8008b12:	4a05      	ldr	r2, [pc, #20]	@ (8008b28 <prvInitialiseTaskLists+0x68>)
 8008b14:	601a      	str	r2, [r3, #0]
}
 8008b16:	bf00      	nop
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	20001e58 	.word	0x20001e58
 8008b24:	20001ee4 	.word	0x20001ee4
 8008b28:	20001ef8 	.word	0x20001ef8
 8008b2c:	20001f14 	.word	0x20001f14
 8008b30:	20001f28 	.word	0x20001f28
 8008b34:	20001f40 	.word	0x20001f40
 8008b38:	20001f0c 	.word	0x20001f0c
 8008b3c:	20001f10 	.word	0x20001f10

08008b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b46:	e019      	b.n	8008b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b48:	f000 fbd0 	bl	80092ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b4c:	4b10      	ldr	r3, [pc, #64]	@ (8008b90 <prvCheckTasksWaitingTermination+0x50>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	3304      	adds	r3, #4
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fde7 	bl	800772c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	4a0b      	ldr	r2, [pc, #44]	@ (8008b94 <prvCheckTasksWaitingTermination+0x54>)
 8008b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b68:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3b01      	subs	r3, #1
 8008b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b72:	f000 fbf1 	bl	8009358 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f810 	bl	8008b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b7c:	4b06      	ldr	r3, [pc, #24]	@ (8008b98 <prvCheckTasksWaitingTermination+0x58>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e1      	bne.n	8008b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20001f28 	.word	0x20001f28
 8008b94:	20001f54 	.word	0x20001f54
 8008b98:	20001f3c 	.word	0x20001f3c

08008b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 fd96 	bl	80096e4 <vPortFree>
				vPortFree( pxTCB );
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fd93 	bl	80096e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bbe:	e01b      	b.n	8008bf8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d103      	bne.n	8008bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fd8a 	bl	80096e4 <vPortFree>
	}
 8008bd0:	e012      	b.n	8008bf8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d00d      	beq.n	8008bf8 <prvDeleteTCB+0x5c>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be0:	b672      	cpsid	i
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	b662      	cpsie	i
 8008bf0:	60fb      	str	r3, [r7, #12]
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <prvDeleteTCB+0x58>
	}
 8008bf8:	bf00      	nop
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c06:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <prvResetNextTaskUnblockTime+0x38>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d104      	bne.n	8008c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c10:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <prvResetNextTaskUnblockTime+0x3c>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c18:	e008      	b.n	8008c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1a:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <prvResetNextTaskUnblockTime+0x38>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a04      	ldr	r2, [pc, #16]	@ (8008c3c <prvResetNextTaskUnblockTime+0x3c>)
 8008c2a:	6013      	str	r3, [r2, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	20001f0c 	.word	0x20001f0c
 8008c3c:	20001f74 	.word	0x20001f74

08008c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c46:	4b0b      	ldr	r3, [pc, #44]	@ (8008c74 <xTaskGetSchedulerState+0x34>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d102      	bne.n	8008c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e008      	b.n	8008c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c54:	4b08      	ldr	r3, [pc, #32]	@ (8008c78 <xTaskGetSchedulerState+0x38>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	607b      	str	r3, [r7, #4]
 8008c60:	e001      	b.n	8008c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c62:	2300      	movs	r3, #0
 8008c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c66:	687b      	ldr	r3, [r7, #4]
	}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20001f60 	.word	0x20001f60
 8008c78:	20001f7c 	.word	0x20001f7c

08008c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d069      	beq.n	8008d66 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c96:	4b36      	ldr	r3, [pc, #216]	@ (8008d70 <xTaskPriorityInherit+0xf4>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d259      	bcs.n	8008d54 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	db06      	blt.n	8008cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca8:	4b31      	ldr	r3, [pc, #196]	@ (8008d70 <xTaskPriorityInherit+0xf4>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cae:	f1c3 0207 	rsb	r2, r3, #7
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	6959      	ldr	r1, [r3, #20]
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d74 <xTaskPriorityInherit+0xf8>)
 8008cc8:	4413      	add	r3, r2
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d13a      	bne.n	8008d44 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fd2a 	bl	800772c <uxListRemove>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d115      	bne.n	8008d0a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce2:	4924      	ldr	r1, [pc, #144]	@ (8008d74 <xTaskPriorityInherit+0xf8>)
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10a      	bne.n	8008d0a <xTaskPriorityInherit+0x8e>
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	43da      	mvns	r2, r3
 8008d00:	4b1d      	ldr	r3, [pc, #116]	@ (8008d78 <xTaskPriorityInherit+0xfc>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4013      	ands	r3, r2
 8008d06:	4a1c      	ldr	r2, [pc, #112]	@ (8008d78 <xTaskPriorityInherit+0xfc>)
 8008d08:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d0a:	4b19      	ldr	r3, [pc, #100]	@ (8008d70 <xTaskPriorityInherit+0xf4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d18:	2201      	movs	r2, #1
 8008d1a:	409a      	lsls	r2, r3
 8008d1c:	4b16      	ldr	r3, [pc, #88]	@ (8008d78 <xTaskPriorityInherit+0xfc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	4a15      	ldr	r2, [pc, #84]	@ (8008d78 <xTaskPriorityInherit+0xfc>)
 8008d24:	6013      	str	r3, [r2, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	4413      	add	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4a10      	ldr	r2, [pc, #64]	@ (8008d74 <xTaskPriorityInherit+0xf8>)
 8008d34:	441a      	add	r2, r3
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7fe fc98 	bl	8007672 <vListInsertEnd>
 8008d42:	e004      	b.n	8008d4e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d44:	4b0a      	ldr	r3, [pc, #40]	@ (8008d70 <xTaskPriorityInherit+0xf4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e008      	b.n	8008d66 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d58:	4b05      	ldr	r3, [pc, #20]	@ (8008d70 <xTaskPriorityInherit+0xf4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d201      	bcs.n	8008d66 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d62:	2301      	movs	r3, #1
 8008d64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d66:	68fb      	ldr	r3, [r7, #12]
	}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20001e54 	.word	0x20001e54
 8008d74:	20001e58 	.word	0x20001e58
 8008d78:	20001f5c 	.word	0x20001f5c

08008d7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d074      	beq.n	8008e7c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d92:	4b3d      	ldr	r3, [pc, #244]	@ (8008e88 <xTaskPriorityDisinherit+0x10c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d00d      	beq.n	8008db8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	b672      	cpsid	i
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	b662      	cpsie	i
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10d      	bne.n	8008ddc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	b672      	cpsid	i
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	b662      	cpsie	i
 8008dd4:	60bb      	str	r3, [r7, #8]
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	e7fd      	b.n	8008dd8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008de0:	1e5a      	subs	r2, r3, #1
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d044      	beq.n	8008e7c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d140      	bne.n	8008e7c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe fc94 	bl	800772c <uxListRemove>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d115      	bne.n	8008e36 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e0e:	491f      	ldr	r1, [pc, #124]	@ (8008e8c <xTaskPriorityDisinherit+0x110>)
 8008e10:	4613      	mov	r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xTaskPriorityDisinherit+0xba>
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e24:	2201      	movs	r2, #1
 8008e26:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2a:	43da      	mvns	r2, r3
 8008e2c:	4b18      	ldr	r3, [pc, #96]	@ (8008e90 <xTaskPriorityDisinherit+0x114>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4013      	ands	r3, r2
 8008e32:	4a17      	ldr	r2, [pc, #92]	@ (8008e90 <xTaskPriorityDisinherit+0x114>)
 8008e34:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e42:	f1c3 0207 	rsb	r2, r3, #7
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4e:	2201      	movs	r2, #1
 8008e50:	409a      	lsls	r2, r3
 8008e52:	4b0f      	ldr	r3, [pc, #60]	@ (8008e90 <xTaskPriorityDisinherit+0x114>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	4a0d      	ldr	r2, [pc, #52]	@ (8008e90 <xTaskPriorityDisinherit+0x114>)
 8008e5a:	6013      	str	r3, [r2, #0]
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <xTaskPriorityDisinherit+0x110>)
 8008e6a:	441a      	add	r2, r3
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f7fe fbfd 	bl	8007672 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e7c:	697b      	ldr	r3, [r7, #20]
	}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20001e54 	.word	0x20001e54
 8008e8c:	20001e58 	.word	0x20001e58
 8008e90:	20001f5c 	.word	0x20001f5c

08008e94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 8089 	beq.w	8008fc0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10d      	bne.n	8008ed2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eba:	b672      	cpsid	i
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	b662      	cpsie	i
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	bf00      	nop
 8008ed0:	e7fd      	b.n	8008ece <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d902      	bls.n	8008ee2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e002      	b.n	8008ee8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d066      	beq.n	8008fc0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d161      	bne.n	8008fc0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008efc:	4b32      	ldr	r3, [pc, #200]	@ (8008fc8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d10d      	bne.n	8008f22 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	b672      	cpsid	i
 8008f0c:	f383 8811 	msr	BASEPRI, r3
 8008f10:	f3bf 8f6f 	isb	sy
 8008f14:	f3bf 8f4f 	dsb	sy
 8008f18:	b662      	cpsie	i
 8008f1a:	60bb      	str	r3, [r7, #8]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f26:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	69fa      	ldr	r2, [r7, #28]
 8008f2c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	db04      	blt.n	8008f40 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	f1c3 0207 	rsb	r2, r3, #7
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	6959      	ldr	r1, [r3, #20]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8008fcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f50:	4413      	add	r3, r2
 8008f52:	4299      	cmp	r1, r3
 8008f54:	d134      	bne.n	8008fc0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	3304      	adds	r3, #4
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fbe6 	bl	800772c <uxListRemove>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d115      	bne.n	8008f92 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f6a:	4918      	ldr	r1, [pc, #96]	@ (8008fcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10a      	bne.n	8008f92 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f80:	2201      	movs	r2, #1
 8008f82:	fa02 f303 	lsl.w	r3, r2, r3
 8008f86:	43da      	mvns	r2, r3
 8008f88:	4b11      	ldr	r3, [pc, #68]	@ (8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	4a10      	ldr	r2, [pc, #64]	@ (8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008f90:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f96:	2201      	movs	r2, #1
 8008f98:	409a      	lsls	r2, r3
 8008f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8008fd0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4a06      	ldr	r2, [pc, #24]	@ (8008fcc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008fb2:	441a      	add	r2, r3
 8008fb4:	69bb      	ldr	r3, [r7, #24]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7fe fb59 	bl	8007672 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008fc0:	bf00      	nop
 8008fc2:	3720      	adds	r7, #32
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20001e54 	.word	0x20001e54
 8008fcc:	20001e58 	.word	0x20001e58
 8008fd0:	20001f5c 	.word	0x20001f5c

08008fd4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008fd8:	4b07      	ldr	r3, [pc, #28]	@ (8008ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008fe0:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008fe6:	3201      	adds	r2, #1
 8008fe8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008fea:	4b03      	ldr	r3, [pc, #12]	@ (8008ff8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008fec:	681b      	ldr	r3, [r3, #0]
	}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	20001e54 	.word	0x20001e54

08008ffc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009006:	4b29      	ldr	r3, [pc, #164]	@ (80090ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800900c:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3304      	adds	r3, #4
 8009012:	4618      	mov	r0, r3
 8009014:	f7fe fb8a 	bl	800772c <uxListRemove>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10b      	bne.n	8009036 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800901e:	4b24      	ldr	r3, [pc, #144]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	2201      	movs	r2, #1
 8009026:	fa02 f303 	lsl.w	r3, r2, r3
 800902a:	43da      	mvns	r2, r3
 800902c:	4b21      	ldr	r3, [pc, #132]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4013      	ands	r3, r2
 8009032:	4a20      	ldr	r2, [pc, #128]	@ (80090b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009034:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d10a      	bne.n	8009054 <prvAddCurrentTaskToDelayedList+0x58>
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d007      	beq.n	8009054 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009044:	4b1a      	ldr	r3, [pc, #104]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	3304      	adds	r3, #4
 800904a:	4619      	mov	r1, r3
 800904c:	481a      	ldr	r0, [pc, #104]	@ (80090b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800904e:	f7fe fb10 	bl	8007672 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009052:	e026      	b.n	80090a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800905c:	4b14      	ldr	r3, [pc, #80]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d209      	bcs.n	8009080 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800906c:	4b13      	ldr	r3, [pc, #76]	@ (80090bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	4b0f      	ldr	r3, [pc, #60]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3304      	adds	r3, #4
 8009076:	4619      	mov	r1, r3
 8009078:	4610      	mov	r0, r2
 800907a:	f7fe fb1e 	bl	80076ba <vListInsert>
}
 800907e:	e010      	b.n	80090a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009080:	4b0f      	ldr	r3, [pc, #60]	@ (80090c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4b0a      	ldr	r3, [pc, #40]	@ (80090b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3304      	adds	r3, #4
 800908a:	4619      	mov	r1, r3
 800908c:	4610      	mov	r0, r2
 800908e:	f7fe fb14 	bl	80076ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009092:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68ba      	ldr	r2, [r7, #8]
 8009098:	429a      	cmp	r2, r3
 800909a:	d202      	bcs.n	80090a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800909c:	4a09      	ldr	r2, [pc, #36]	@ (80090c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	6013      	str	r3, [r2, #0]
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	20001f58 	.word	0x20001f58
 80090b0:	20001e54 	.word	0x20001e54
 80090b4:	20001f5c 	.word	0x20001f5c
 80090b8:	20001f40 	.word	0x20001f40
 80090bc:	20001f10 	.word	0x20001f10
 80090c0:	20001f0c 	.word	0x20001f0c
 80090c4:	20001f74 	.word	0x20001f74

080090c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3b04      	subs	r3, #4
 80090d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80090e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3b04      	subs	r3, #4
 80090e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f023 0201 	bic.w	r2, r3, #1
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	3b04      	subs	r3, #4
 80090f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80090f8:	4a0c      	ldr	r2, [pc, #48]	@ (800912c <pxPortInitialiseStack+0x64>)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	3b14      	subs	r3, #20
 8009102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3b04      	subs	r3, #4
 800910e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f06f 0202 	mvn.w	r2, #2
 8009116:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3b20      	subs	r3, #32
 800911c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800911e:	68fb      	ldr	r3, [r7, #12]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	08009131 	.word	0x08009131

08009130 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009136:	2300      	movs	r3, #0
 8009138:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800913a:	4b15      	ldr	r3, [pc, #84]	@ (8009190 <prvTaskExitError+0x60>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d00d      	beq.n	8009160 <prvTaskExitError+0x30>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009148:	b672      	cpsid	i
 800914a:	f383 8811 	msr	BASEPRI, r3
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	b662      	cpsie	i
 8009158:	60fb      	str	r3, [r7, #12]
}
 800915a:	bf00      	nop
 800915c:	bf00      	nop
 800915e:	e7fd      	b.n	800915c <prvTaskExitError+0x2c>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	b672      	cpsid	i
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	b662      	cpsie	i
 8009174:	60bb      	str	r3, [r7, #8]
}
 8009176:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009178:	bf00      	nop
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0fc      	beq.n	800917a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	3714      	adds	r7, #20
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	2000005c 	.word	0x2000005c
	...

080091a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80091a0:	4b07      	ldr	r3, [pc, #28]	@ (80091c0 <pxCurrentTCBConst2>)
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f380 8809 	msr	PSP, r0
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f04f 0000 	mov.w	r0, #0
 80091b6:	f380 8811 	msr	BASEPRI, r0
 80091ba:	4770      	bx	lr
 80091bc:	f3af 8000 	nop.w

080091c0 <pxCurrentTCBConst2>:
 80091c0:	20001e54 	.word	0x20001e54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80091c8:	4808      	ldr	r0, [pc, #32]	@ (80091ec <prvPortStartFirstTask+0x24>)
 80091ca:	6800      	ldr	r0, [r0, #0]
 80091cc:	6800      	ldr	r0, [r0, #0]
 80091ce:	f380 8808 	msr	MSP, r0
 80091d2:	f04f 0000 	mov.w	r0, #0
 80091d6:	f380 8814 	msr	CONTROL, r0
 80091da:	b662      	cpsie	i
 80091dc:	b661      	cpsie	f
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	df00      	svc	0
 80091e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80091ea:	bf00      	nop
 80091ec:	e000ed08 	.word	0xe000ed08

080091f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80091f6:	4b37      	ldr	r3, [pc, #220]	@ (80092d4 <xPortStartScheduler+0xe4>)
 80091f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	22ff      	movs	r2, #255	@ 0xff
 8009206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	b2db      	uxtb	r3, r3
 800920e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009218:	b2da      	uxtb	r2, r3
 800921a:	4b2f      	ldr	r3, [pc, #188]	@ (80092d8 <xPortStartScheduler+0xe8>)
 800921c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800921e:	4b2f      	ldr	r3, [pc, #188]	@ (80092dc <xPortStartScheduler+0xec>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009224:	e009      	b.n	800923a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009226:	4b2d      	ldr	r3, [pc, #180]	@ (80092dc <xPortStartScheduler+0xec>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3b01      	subs	r3, #1
 800922c:	4a2b      	ldr	r2, [pc, #172]	@ (80092dc <xPortStartScheduler+0xec>)
 800922e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	b2db      	uxtb	r3, r3
 8009238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009242:	2b80      	cmp	r3, #128	@ 0x80
 8009244:	d0ef      	beq.n	8009226 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009246:	4b25      	ldr	r3, [pc, #148]	@ (80092dc <xPortStartScheduler+0xec>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f1c3 0307 	rsb	r3, r3, #7
 800924e:	2b04      	cmp	r3, #4
 8009250:	d00d      	beq.n	800926e <xPortStartScheduler+0x7e>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	b672      	cpsid	i
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	b662      	cpsie	i
 8009266:	60bb      	str	r3, [r7, #8]
}
 8009268:	bf00      	nop
 800926a:	bf00      	nop
 800926c:	e7fd      	b.n	800926a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800926e:	4b1b      	ldr	r3, [pc, #108]	@ (80092dc <xPortStartScheduler+0xec>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	021b      	lsls	r3, r3, #8
 8009274:	4a19      	ldr	r2, [pc, #100]	@ (80092dc <xPortStartScheduler+0xec>)
 8009276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009278:	4b18      	ldr	r3, [pc, #96]	@ (80092dc <xPortStartScheduler+0xec>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009280:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <xPortStartScheduler+0xec>)
 8009282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800928c:	4b14      	ldr	r3, [pc, #80]	@ (80092e0 <xPortStartScheduler+0xf0>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a13      	ldr	r2, [pc, #76]	@ (80092e0 <xPortStartScheduler+0xf0>)
 8009292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009298:	4b11      	ldr	r3, [pc, #68]	@ (80092e0 <xPortStartScheduler+0xf0>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a10      	ldr	r2, [pc, #64]	@ (80092e0 <xPortStartScheduler+0xf0>)
 800929e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80092a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80092a4:	f000 f8dc 	bl	8009460 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80092a8:	4b0e      	ldr	r3, [pc, #56]	@ (80092e4 <xPortStartScheduler+0xf4>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80092ae:	f000 f8fb 	bl	80094a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <xPortStartScheduler+0xf8>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a0c      	ldr	r2, [pc, #48]	@ (80092e8 <xPortStartScheduler+0xf8>)
 80092b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80092bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80092be:	f7ff ff83 	bl	80091c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80092c2:	f7ff fa6f 	bl	80087a4 <vTaskSwitchContext>
	prvTaskExitError();
 80092c6:	f7ff ff33 	bl	8009130 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	e000e400 	.word	0xe000e400
 80092d8:	20001f80 	.word	0x20001f80
 80092dc:	20001f84 	.word	0x20001f84
 80092e0:	e000ed20 	.word	0xe000ed20
 80092e4:	2000005c 	.word	0x2000005c
 80092e8:	e000ef34 	.word	0xe000ef34

080092ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	607b      	str	r3, [r7, #4]
}
 8009308:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800930a:	4b11      	ldr	r3, [pc, #68]	@ (8009350 <vPortEnterCritical+0x64>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	4a0f      	ldr	r2, [pc, #60]	@ (8009350 <vPortEnterCritical+0x64>)
 8009312:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009314:	4b0e      	ldr	r3, [pc, #56]	@ (8009350 <vPortEnterCritical+0x64>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b01      	cmp	r3, #1
 800931a:	d112      	bne.n	8009342 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800931c:	4b0d      	ldr	r3, [pc, #52]	@ (8009354 <vPortEnterCritical+0x68>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00d      	beq.n	8009342 <vPortEnterCritical+0x56>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	b672      	cpsid	i
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	b662      	cpsie	i
 800933a:	603b      	str	r3, [r7, #0]
}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	e7fd      	b.n	800933e <vPortEnterCritical+0x52>
	}
}
 8009342:	bf00      	nop
 8009344:	370c      	adds	r7, #12
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	2000005c 	.word	0x2000005c
 8009354:	e000ed04 	.word	0xe000ed04

08009358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800935e:	4b13      	ldr	r3, [pc, #76]	@ (80093ac <vPortExitCritical+0x54>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10d      	bne.n	8009382 <vPortExitCritical+0x2a>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	607b      	str	r3, [r7, #4]
}
 800937c:	bf00      	nop
 800937e:	bf00      	nop
 8009380:	e7fd      	b.n	800937e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009382:	4b0a      	ldr	r3, [pc, #40]	@ (80093ac <vPortExitCritical+0x54>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3b01      	subs	r3, #1
 8009388:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <vPortExitCritical+0x54>)
 800938a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800938c:	4b07      	ldr	r3, [pc, #28]	@ (80093ac <vPortExitCritical+0x54>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d105      	bne.n	80093a0 <vPortExitCritical+0x48>
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f383 8811 	msr	BASEPRI, r3
}
 800939e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80093a0:	bf00      	nop
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	2000005c 	.word	0x2000005c

080093b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80093b0:	f3ef 8009 	mrs	r0, PSP
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	4b15      	ldr	r3, [pc, #84]	@ (8009410 <pxCurrentTCBConst>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	f01e 0f10 	tst.w	lr, #16
 80093c0:	bf08      	it	eq
 80093c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80093c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	6010      	str	r0, [r2, #0]
 80093cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80093d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80093d4:	b672      	cpsid	i
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	b662      	cpsie	i
 80093e4:	f7ff f9de 	bl	80087a4 <vTaskSwitchContext>
 80093e8:	f04f 0000 	mov.w	r0, #0
 80093ec:	f380 8811 	msr	BASEPRI, r0
 80093f0:	bc09      	pop	{r0, r3}
 80093f2:	6819      	ldr	r1, [r3, #0]
 80093f4:	6808      	ldr	r0, [r1, #0]
 80093f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fa:	f01e 0f10 	tst.w	lr, #16
 80093fe:	bf08      	it	eq
 8009400:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009404:	f380 8809 	msr	PSP, r0
 8009408:	f3bf 8f6f 	isb	sy
 800940c:	4770      	bx	lr
 800940e:	bf00      	nop

08009410 <pxCurrentTCBConst>:
 8009410:	20001e54 	.word	0x20001e54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop

08009418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	607b      	str	r3, [r7, #4]
}
 8009434:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009436:	f7ff f8f9 	bl	800862c <xTaskIncrementTick>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009440:	4b06      	ldr	r3, [pc, #24]	@ (800945c <SysTick_Handler+0x44>)
 8009442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009446:	601a      	str	r2, [r3, #0]
 8009448:	2300      	movs	r3, #0
 800944a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	f383 8811 	msr	BASEPRI, r3
}
 8009452:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	e000ed04 	.word	0xe000ed04

08009460 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009460:	b480      	push	{r7}
 8009462:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009464:	4b0b      	ldr	r3, [pc, #44]	@ (8009494 <vPortSetupTimerInterrupt+0x34>)
 8009466:	2200      	movs	r2, #0
 8009468:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800946a:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <vPortSetupTimerInterrupt+0x38>)
 800946c:	2200      	movs	r2, #0
 800946e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009470:	4b0a      	ldr	r3, [pc, #40]	@ (800949c <vPortSetupTimerInterrupt+0x3c>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a0a      	ldr	r2, [pc, #40]	@ (80094a0 <vPortSetupTimerInterrupt+0x40>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	099b      	lsrs	r3, r3, #6
 800947c:	4a09      	ldr	r2, [pc, #36]	@ (80094a4 <vPortSetupTimerInterrupt+0x44>)
 800947e:	3b01      	subs	r3, #1
 8009480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009482:	4b04      	ldr	r3, [pc, #16]	@ (8009494 <vPortSetupTimerInterrupt+0x34>)
 8009484:	2207      	movs	r2, #7
 8009486:	601a      	str	r2, [r3, #0]
}
 8009488:	bf00      	nop
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	e000e010 	.word	0xe000e010
 8009498:	e000e018 	.word	0xe000e018
 800949c:	2000003c 	.word	0x2000003c
 80094a0:	10624dd3 	.word	0x10624dd3
 80094a4:	e000e014 	.word	0xe000e014

080094a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80094a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80094b8 <vPortEnableVFP+0x10>
 80094ac:	6801      	ldr	r1, [r0, #0]
 80094ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80094b2:	6001      	str	r1, [r0, #0]
 80094b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80094b6:	bf00      	nop
 80094b8:	e000ed88 	.word	0xe000ed88

080094bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80094c2:	f3ef 8305 	mrs	r3, IPSR
 80094c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b0f      	cmp	r3, #15
 80094cc:	d917      	bls.n	80094fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80094ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009538 <vPortValidateInterruptPriority+0x7c>)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	4413      	add	r3, r2
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80094d8:	4b18      	ldr	r3, [pc, #96]	@ (800953c <vPortValidateInterruptPriority+0x80>)
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	7afa      	ldrb	r2, [r7, #11]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d20d      	bcs.n	80094fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e6:	b672      	cpsid	i
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	b662      	cpsie	i
 80094f6:	607b      	str	r3, [r7, #4]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <vPortValidateInterruptPriority+0x84>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009506:	4b0f      	ldr	r3, [pc, #60]	@ (8009544 <vPortValidateInterruptPriority+0x88>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	429a      	cmp	r2, r3
 800950c:	d90d      	bls.n	800952a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	b672      	cpsid	i
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	b662      	cpsie	i
 8009522:	603b      	str	r3, [r7, #0]
}
 8009524:	bf00      	nop
 8009526:	bf00      	nop
 8009528:	e7fd      	b.n	8009526 <vPortValidateInterruptPriority+0x6a>
	}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	e000e3f0 	.word	0xe000e3f0
 800953c:	20001f80 	.word	0x20001f80
 8009540:	e000ed0c 	.word	0xe000ed0c
 8009544:	20001f84 	.word	0x20001f84

08009548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	@ 0x28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009554:	f7fe ffbc 	bl	80084d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009558:	4b5d      	ldr	r3, [pc, #372]	@ (80096d0 <pvPortMalloc+0x188>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009560:	f000 f920 	bl	80097a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009564:	4b5b      	ldr	r3, [pc, #364]	@ (80096d4 <pvPortMalloc+0x18c>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4013      	ands	r3, r2
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8094 	bne.w	800969a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d020      	beq.n	80095ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009578:	2208      	movs	r2, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4413      	add	r3, r2
 800957e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	2b00      	cmp	r3, #0
 8009588:	d017      	beq.n	80095ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f023 0307 	bic.w	r3, r3, #7
 8009590:	3308      	adds	r3, #8
 8009592:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f003 0307 	and.w	r3, r3, #7
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <pvPortMalloc+0x72>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	b672      	cpsid	i
 80095a4:	f383 8811 	msr	BASEPRI, r3
 80095a8:	f3bf 8f6f 	isb	sy
 80095ac:	f3bf 8f4f 	dsb	sy
 80095b0:	b662      	cpsie	i
 80095b2:	617b      	str	r3, [r7, #20]
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	e7fd      	b.n	80095b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d06c      	beq.n	800969a <pvPortMalloc+0x152>
 80095c0:	4b45      	ldr	r3, [pc, #276]	@ (80096d8 <pvPortMalloc+0x190>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d867      	bhi.n	800969a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095ca:	4b44      	ldr	r3, [pc, #272]	@ (80096dc <pvPortMalloc+0x194>)
 80095cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095ce:	4b43      	ldr	r3, [pc, #268]	@ (80096dc <pvPortMalloc+0x194>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095d4:	e004      	b.n	80095e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d903      	bls.n	80095f2 <pvPortMalloc+0xaa>
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f1      	bne.n	80095d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80095f2:	4b37      	ldr	r3, [pc, #220]	@ (80096d0 <pvPortMalloc+0x188>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d04e      	beq.n	800969a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2208      	movs	r2, #8
 8009602:	4413      	add	r3, r2
 8009604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800960e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	1ad2      	subs	r2, r2, r3
 8009616:	2308      	movs	r3, #8
 8009618:	005b      	lsls	r3, r3, #1
 800961a:	429a      	cmp	r2, r3
 800961c:	d922      	bls.n	8009664 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800961e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4413      	add	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009626:	69bb      	ldr	r3, [r7, #24]
 8009628:	f003 0307 	and.w	r3, r3, #7
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00d      	beq.n	800964c <pvPortMalloc+0x104>
	__asm volatile
 8009630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009634:	b672      	cpsid	i
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	b662      	cpsie	i
 8009644:	613b      	str	r3, [r7, #16]
}
 8009646:	bf00      	nop
 8009648:	bf00      	nop
 800964a:	e7fd      	b.n	8009648 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800964c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	1ad2      	subs	r2, r2, r3
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800965e:	69b8      	ldr	r0, [r7, #24]
 8009660:	f000 f902 	bl	8009868 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009664:	4b1c      	ldr	r3, [pc, #112]	@ (80096d8 <pvPortMalloc+0x190>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	4a1a      	ldr	r2, [pc, #104]	@ (80096d8 <pvPortMalloc+0x190>)
 8009670:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009672:	4b19      	ldr	r3, [pc, #100]	@ (80096d8 <pvPortMalloc+0x190>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4b1a      	ldr	r3, [pc, #104]	@ (80096e0 <pvPortMalloc+0x198>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	429a      	cmp	r2, r3
 800967c:	d203      	bcs.n	8009686 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800967e:	4b16      	ldr	r3, [pc, #88]	@ (80096d8 <pvPortMalloc+0x190>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a17      	ldr	r2, [pc, #92]	@ (80096e0 <pvPortMalloc+0x198>)
 8009684:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	4b12      	ldr	r3, [pc, #72]	@ (80096d4 <pvPortMalloc+0x18c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	431a      	orrs	r2, r3
 8009690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009692:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009696:	2200      	movs	r2, #0
 8009698:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800969a:	f7fe ff27 	bl	80084ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00d      	beq.n	80096c4 <pvPortMalloc+0x17c>
	__asm volatile
 80096a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ac:	b672      	cpsid	i
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	b662      	cpsie	i
 80096bc:	60fb      	str	r3, [r7, #12]
}
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
 80096c2:	e7fd      	b.n	80096c0 <pvPortMalloc+0x178>
	return pvReturn;
 80096c4:	69fb      	ldr	r3, [r7, #28]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3728      	adds	r7, #40	@ 0x28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20005b90 	.word	0x20005b90
 80096d4:	20005b9c 	.word	0x20005b9c
 80096d8:	20005b94 	.word	0x20005b94
 80096dc:	20005b88 	.word	0x20005b88
 80096e0:	20005b98 	.word	0x20005b98

080096e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d04e      	beq.n	8009794 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80096f6:	2308      	movs	r3, #8
 80096f8:	425b      	negs	r3, r3
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4413      	add	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	4b24      	ldr	r3, [pc, #144]	@ (800979c <vPortFree+0xb8>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4013      	ands	r3, r2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <vPortFree+0x4a>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	b672      	cpsid	i
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	b662      	cpsie	i
 8009726:	60fb      	str	r3, [r7, #12]
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	e7fd      	b.n	800972a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00d      	beq.n	8009752 <vPortFree+0x6e>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	b672      	cpsid	i
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	b662      	cpsie	i
 800974a:	60bb      	str	r3, [r7, #8]
}
 800974c:	bf00      	nop
 800974e:	bf00      	nop
 8009750:	e7fd      	b.n	800974e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	685a      	ldr	r2, [r3, #4]
 8009756:	4b11      	ldr	r3, [pc, #68]	@ (800979c <vPortFree+0xb8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d019      	beq.n	8009794 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d115      	bne.n	8009794 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	4b0b      	ldr	r3, [pc, #44]	@ (800979c <vPortFree+0xb8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	43db      	mvns	r3, r3
 8009772:	401a      	ands	r2, r3
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009778:	f7fe feaa 	bl	80084d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	4b07      	ldr	r3, [pc, #28]	@ (80097a0 <vPortFree+0xbc>)
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4413      	add	r3, r2
 8009786:	4a06      	ldr	r2, [pc, #24]	@ (80097a0 <vPortFree+0xbc>)
 8009788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800978a:	6938      	ldr	r0, [r7, #16]
 800978c:	f000 f86c 	bl	8009868 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009790:	f7fe feac 	bl	80084ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009794:	bf00      	nop
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	20005b9c 	.word	0x20005b9c
 80097a0:	20005b94 	.word	0x20005b94

080097a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097a4:	b480      	push	{r7}
 80097a6:	b085      	sub	sp, #20
 80097a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80097ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097b0:	4b27      	ldr	r3, [pc, #156]	@ (8009850 <prvHeapInit+0xac>)
 80097b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d00c      	beq.n	80097d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3307      	adds	r3, #7
 80097c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0307 	bic.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	4a1f      	ldr	r2, [pc, #124]	@ (8009850 <prvHeapInit+0xac>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009854 <prvHeapInit+0xb0>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009854 <prvHeapInit+0xb0>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80097f0:	2208      	movs	r2, #8
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	1a9b      	subs	r3, r3, r2
 80097f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f023 0307 	bic.w	r3, r3, #7
 80097fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a15      	ldr	r2, [pc, #84]	@ (8009858 <prvHeapInit+0xb4>)
 8009804:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009806:	4b14      	ldr	r3, [pc, #80]	@ (8009858 <prvHeapInit+0xb4>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2200      	movs	r2, #0
 800980c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800980e:	4b12      	ldr	r3, [pc, #72]	@ (8009858 <prvHeapInit+0xb4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	68fa      	ldr	r2, [r7, #12]
 800981e:	1ad2      	subs	r2, r2, r3
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009824:	4b0c      	ldr	r3, [pc, #48]	@ (8009858 <prvHeapInit+0xb4>)
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4a0a      	ldr	r2, [pc, #40]	@ (800985c <prvHeapInit+0xb8>)
 8009832:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	4a09      	ldr	r2, [pc, #36]	@ (8009860 <prvHeapInit+0xbc>)
 800983a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800983c:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <prvHeapInit+0xc0>)
 800983e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009842:	601a      	str	r2, [r3, #0]
}
 8009844:	bf00      	nop
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	20001f88 	.word	0x20001f88
 8009854:	20005b88 	.word	0x20005b88
 8009858:	20005b90 	.word	0x20005b90
 800985c:	20005b98 	.word	0x20005b98
 8009860:	20005b94 	.word	0x20005b94
 8009864:	20005b9c 	.word	0x20005b9c

08009868 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009870:	4b28      	ldr	r3, [pc, #160]	@ (8009914 <prvInsertBlockIntoFreeList+0xac>)
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e002      	b.n	800987c <prvInsertBlockIntoFreeList+0x14>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d8f7      	bhi.n	8009876 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4413      	add	r3, r2
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d108      	bne.n	80098aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	441a      	add	r2, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	441a      	add	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d118      	bne.n	80098f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b15      	ldr	r3, [pc, #84]	@ (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d00d      	beq.n	80098e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	441a      	add	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e008      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80098e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009918 <prvInsertBlockIntoFreeList+0xb0>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	e003      	b.n	80098f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d002      	beq.n	8009906 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009906:	bf00      	nop
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	20005b88 	.word	0x20005b88
 8009918:	20005b90 	.word	0x20005b90

0800991c <siprintf>:
 800991c:	b40e      	push	{r1, r2, r3}
 800991e:	b510      	push	{r4, lr}
 8009920:	b09d      	sub	sp, #116	@ 0x74
 8009922:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009924:	9002      	str	r0, [sp, #8]
 8009926:	9006      	str	r0, [sp, #24]
 8009928:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800992c:	480a      	ldr	r0, [pc, #40]	@ (8009958 <siprintf+0x3c>)
 800992e:	9107      	str	r1, [sp, #28]
 8009930:	9104      	str	r1, [sp, #16]
 8009932:	490a      	ldr	r1, [pc, #40]	@ (800995c <siprintf+0x40>)
 8009934:	f853 2b04 	ldr.w	r2, [r3], #4
 8009938:	9105      	str	r1, [sp, #20]
 800993a:	2400      	movs	r4, #0
 800993c:	a902      	add	r1, sp, #8
 800993e:	6800      	ldr	r0, [r0, #0]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009944:	f000 f9a2 	bl	8009c8c <_svfiprintf_r>
 8009948:	9b02      	ldr	r3, [sp, #8]
 800994a:	701c      	strb	r4, [r3, #0]
 800994c:	b01d      	add	sp, #116	@ 0x74
 800994e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009952:	b003      	add	sp, #12
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	20000060 	.word	0x20000060
 800995c:	ffff0208 	.word	0xffff0208

08009960 <memset>:
 8009960:	4402      	add	r2, r0
 8009962:	4603      	mov	r3, r0
 8009964:	4293      	cmp	r3, r2
 8009966:	d100      	bne.n	800996a <memset+0xa>
 8009968:	4770      	bx	lr
 800996a:	f803 1b01 	strb.w	r1, [r3], #1
 800996e:	e7f9      	b.n	8009964 <memset+0x4>

08009970 <__errno>:
 8009970:	4b01      	ldr	r3, [pc, #4]	@ (8009978 <__errno+0x8>)
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	20000060 	.word	0x20000060

0800997c <__libc_init_array>:
 800997c:	b570      	push	{r4, r5, r6, lr}
 800997e:	4d0d      	ldr	r5, [pc, #52]	@ (80099b4 <__libc_init_array+0x38>)
 8009980:	4c0d      	ldr	r4, [pc, #52]	@ (80099b8 <__libc_init_array+0x3c>)
 8009982:	1b64      	subs	r4, r4, r5
 8009984:	10a4      	asrs	r4, r4, #2
 8009986:	2600      	movs	r6, #0
 8009988:	42a6      	cmp	r6, r4
 800998a:	d109      	bne.n	80099a0 <__libc_init_array+0x24>
 800998c:	4d0b      	ldr	r5, [pc, #44]	@ (80099bc <__libc_init_array+0x40>)
 800998e:	4c0c      	ldr	r4, [pc, #48]	@ (80099c0 <__libc_init_array+0x44>)
 8009990:	f000 fc64 	bl	800a25c <_init>
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	2600      	movs	r6, #0
 800999a:	42a6      	cmp	r6, r4
 800999c:	d105      	bne.n	80099aa <__libc_init_array+0x2e>
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a4:	4798      	blx	r3
 80099a6:	3601      	adds	r6, #1
 80099a8:	e7ee      	b.n	8009988 <__libc_init_array+0xc>
 80099aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ae:	4798      	blx	r3
 80099b0:	3601      	adds	r6, #1
 80099b2:	e7f2      	b.n	800999a <__libc_init_array+0x1e>
 80099b4:	0800a408 	.word	0x0800a408
 80099b8:	0800a408 	.word	0x0800a408
 80099bc:	0800a408 	.word	0x0800a408
 80099c0:	0800a40c 	.word	0x0800a40c

080099c4 <__retarget_lock_acquire_recursive>:
 80099c4:	4770      	bx	lr

080099c6 <__retarget_lock_release_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <memcpy>:
 80099c8:	440a      	add	r2, r1
 80099ca:	4291      	cmp	r1, r2
 80099cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d0:	d100      	bne.n	80099d4 <memcpy+0xc>
 80099d2:	4770      	bx	lr
 80099d4:	b510      	push	{r4, lr}
 80099d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099de:	4291      	cmp	r1, r2
 80099e0:	d1f9      	bne.n	80099d6 <memcpy+0xe>
 80099e2:	bd10      	pop	{r4, pc}

080099e4 <_free_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4605      	mov	r5, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d041      	beq.n	8009a70 <_free_r+0x8c>
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f0c      	subs	r4, r1, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfb8      	it	lt
 80099f6:	18e4      	addlt	r4, r4, r3
 80099f8:	f000 f8e0 	bl	8009bbc <__malloc_lock>
 80099fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009a74 <_free_r+0x90>)
 80099fe:	6813      	ldr	r3, [r2, #0]
 8009a00:	b933      	cbnz	r3, 8009a10 <_free_r+0x2c>
 8009a02:	6063      	str	r3, [r4, #4]
 8009a04:	6014      	str	r4, [r2, #0]
 8009a06:	4628      	mov	r0, r5
 8009a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0c:	f000 b8dc 	b.w	8009bc8 <__malloc_unlock>
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	d908      	bls.n	8009a26 <_free_r+0x42>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	1821      	adds	r1, r4, r0
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	bf01      	itttt	eq
 8009a1c:	6819      	ldreq	r1, [r3, #0]
 8009a1e:	685b      	ldreq	r3, [r3, #4]
 8009a20:	1809      	addeq	r1, r1, r0
 8009a22:	6021      	streq	r1, [r4, #0]
 8009a24:	e7ed      	b.n	8009a02 <_free_r+0x1e>
 8009a26:	461a      	mov	r2, r3
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	b10b      	cbz	r3, 8009a30 <_free_r+0x4c>
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d9fa      	bls.n	8009a26 <_free_r+0x42>
 8009a30:	6811      	ldr	r1, [r2, #0]
 8009a32:	1850      	adds	r0, r2, r1
 8009a34:	42a0      	cmp	r0, r4
 8009a36:	d10b      	bne.n	8009a50 <_free_r+0x6c>
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	1850      	adds	r0, r2, r1
 8009a3e:	4283      	cmp	r3, r0
 8009a40:	6011      	str	r1, [r2, #0]
 8009a42:	d1e0      	bne.n	8009a06 <_free_r+0x22>
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	6053      	str	r3, [r2, #4]
 8009a4a:	4408      	add	r0, r1
 8009a4c:	6010      	str	r0, [r2, #0]
 8009a4e:	e7da      	b.n	8009a06 <_free_r+0x22>
 8009a50:	d902      	bls.n	8009a58 <_free_r+0x74>
 8009a52:	230c      	movs	r3, #12
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	e7d6      	b.n	8009a06 <_free_r+0x22>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf04      	itt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	6063      	str	r3, [r4, #4]
 8009a66:	bf04      	itt	eq
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6054      	str	r4, [r2, #4]
 8009a6e:	e7ca      	b.n	8009a06 <_free_r+0x22>
 8009a70:	bd38      	pop	{r3, r4, r5, pc}
 8009a72:	bf00      	nop
 8009a74:	20005ce4 	.word	0x20005ce4

08009a78 <sbrk_aligned>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009ab8 <sbrk_aligned+0x40>)
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	6831      	ldr	r1, [r6, #0]
 8009a80:	4605      	mov	r5, r0
 8009a82:	b911      	cbnz	r1, 8009a8a <sbrk_aligned+0x12>
 8009a84:	f000 fba4 	bl	800a1d0 <_sbrk_r>
 8009a88:	6030      	str	r0, [r6, #0]
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 fb9f 	bl	800a1d0 <_sbrk_r>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d103      	bne.n	8009a9e <sbrk_aligned+0x26>
 8009a96:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d0f8      	beq.n	8009a9a <sbrk_aligned+0x22>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 fb90 	bl	800a1d0 <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d1f2      	bne.n	8009a9a <sbrk_aligned+0x22>
 8009ab4:	e7ef      	b.n	8009a96 <sbrk_aligned+0x1e>
 8009ab6:	bf00      	nop
 8009ab8:	20005ce0 	.word	0x20005ce0

08009abc <_malloc_r>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	1ccd      	adds	r5, r1, #3
 8009ac2:	f025 0503 	bic.w	r5, r5, #3
 8009ac6:	3508      	adds	r5, #8
 8009ac8:	2d0c      	cmp	r5, #12
 8009aca:	bf38      	it	cc
 8009acc:	250c      	movcc	r5, #12
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	db01      	blt.n	8009ad8 <_malloc_r+0x1c>
 8009ad4:	42a9      	cmp	r1, r5
 8009ad6:	d904      	bls.n	8009ae2 <_malloc_r+0x26>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	2000      	movs	r0, #0
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bb8 <_malloc_r+0xfc>
 8009ae6:	f000 f869 	bl	8009bbc <__malloc_lock>
 8009aea:	f8d8 3000 	ldr.w	r3, [r8]
 8009aee:	461c      	mov	r4, r3
 8009af0:	bb44      	cbnz	r4, 8009b44 <_malloc_r+0x88>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffbf 	bl	8009a78 <sbrk_aligned>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	d158      	bne.n	8009bb2 <_malloc_r+0xf6>
 8009b00:	f8d8 4000 	ldr.w	r4, [r8]
 8009b04:	4627      	mov	r7, r4
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	d143      	bne.n	8009b92 <_malloc_r+0xd6>
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	d04b      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	4639      	mov	r1, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	eb04 0903 	add.w	r9, r4, r3
 8009b18:	f000 fb5a 	bl	800a1d0 <_sbrk_r>
 8009b1c:	4581      	cmp	r9, r0
 8009b1e:	d142      	bne.n	8009ba6 <_malloc_r+0xea>
 8009b20:	6821      	ldr	r1, [r4, #0]
 8009b22:	1a6d      	subs	r5, r5, r1
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ffa6 	bl	8009a78 <sbrk_aligned>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d03a      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	442b      	add	r3, r5
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	bb62      	cbnz	r2, 8009b98 <_malloc_r+0xdc>
 8009b3e:	f8c8 7000 	str.w	r7, [r8]
 8009b42:	e00f      	b.n	8009b64 <_malloc_r+0xa8>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	1b52      	subs	r2, r2, r5
 8009b48:	d420      	bmi.n	8009b8c <_malloc_r+0xd0>
 8009b4a:	2a0b      	cmp	r2, #11
 8009b4c:	d917      	bls.n	8009b7e <_malloc_r+0xc2>
 8009b4e:	1961      	adds	r1, r4, r5
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	6059      	strne	r1, [r3, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	bf08      	it	eq
 8009b5c:	f8c8 1000 	streq.w	r1, [r8]
 8009b60:	5162      	str	r2, [r4, r5]
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f82f 	bl	8009bc8 <__malloc_unlock>
 8009b6a:	f104 000b 	add.w	r0, r4, #11
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	f020 0007 	bic.w	r0, r0, #7
 8009b74:	1ac2      	subs	r2, r0, r3
 8009b76:	bf1c      	itt	ne
 8009b78:	1a1b      	subne	r3, r3, r0
 8009b7a:	50a3      	strne	r3, [r4, r2]
 8009b7c:	e7af      	b.n	8009ade <_malloc_r+0x22>
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	bf0c      	ite	eq
 8009b84:	f8c8 2000 	streq.w	r2, [r8]
 8009b88:	605a      	strne	r2, [r3, #4]
 8009b8a:	e7eb      	b.n	8009b64 <_malloc_r+0xa8>
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	6864      	ldr	r4, [r4, #4]
 8009b90:	e7ae      	b.n	8009af0 <_malloc_r+0x34>
 8009b92:	463c      	mov	r4, r7
 8009b94:	687f      	ldr	r7, [r7, #4]
 8009b96:	e7b6      	b.n	8009b06 <_malloc_r+0x4a>
 8009b98:	461a      	mov	r2, r3
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	d1fb      	bne.n	8009b98 <_malloc_r+0xdc>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6053      	str	r3, [r2, #4]
 8009ba4:	e7de      	b.n	8009b64 <_malloc_r+0xa8>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 f80c 	bl	8009bc8 <__malloc_unlock>
 8009bb0:	e794      	b.n	8009adc <_malloc_r+0x20>
 8009bb2:	6005      	str	r5, [r0, #0]
 8009bb4:	e7d6      	b.n	8009b64 <_malloc_r+0xa8>
 8009bb6:	bf00      	nop
 8009bb8:	20005ce4 	.word	0x20005ce4

08009bbc <__malloc_lock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	@ (8009bc4 <__malloc_lock+0x8>)
 8009bbe:	f7ff bf01 	b.w	80099c4 <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20005cdc 	.word	0x20005cdc

08009bc8 <__malloc_unlock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	@ (8009bd0 <__malloc_unlock+0x8>)
 8009bca:	f7ff befc 	b.w	80099c6 <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	20005cdc 	.word	0x20005cdc

08009bd4 <__ssputs_r>:
 8009bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	688e      	ldr	r6, [r1, #8]
 8009bda:	461f      	mov	r7, r3
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	680b      	ldr	r3, [r1, #0]
 8009be0:	4682      	mov	sl, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	4690      	mov	r8, r2
 8009be6:	d82d      	bhi.n	8009c44 <__ssputs_r+0x70>
 8009be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bf0:	d026      	beq.n	8009c40 <__ssputs_r+0x6c>
 8009bf2:	6965      	ldr	r5, [r4, #20]
 8009bf4:	6909      	ldr	r1, [r1, #16]
 8009bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bfa:	eba3 0901 	sub.w	r9, r3, r1
 8009bfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c02:	1c7b      	adds	r3, r7, #1
 8009c04:	444b      	add	r3, r9
 8009c06:	106d      	asrs	r5, r5, #1
 8009c08:	429d      	cmp	r5, r3
 8009c0a:	bf38      	it	cc
 8009c0c:	461d      	movcc	r5, r3
 8009c0e:	0553      	lsls	r3, r2, #21
 8009c10:	d527      	bpl.n	8009c62 <__ssputs_r+0x8e>
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7ff ff52 	bl	8009abc <_malloc_r>
 8009c18:	4606      	mov	r6, r0
 8009c1a:	b360      	cbz	r0, 8009c76 <__ssputs_r+0xa2>
 8009c1c:	6921      	ldr	r1, [r4, #16]
 8009c1e:	464a      	mov	r2, r9
 8009c20:	f7ff fed2 	bl	80099c8 <memcpy>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	6126      	str	r6, [r4, #16]
 8009c32:	6165      	str	r5, [r4, #20]
 8009c34:	444e      	add	r6, r9
 8009c36:	eba5 0509 	sub.w	r5, r5, r9
 8009c3a:	6026      	str	r6, [r4, #0]
 8009c3c:	60a5      	str	r5, [r4, #8]
 8009c3e:	463e      	mov	r6, r7
 8009c40:	42be      	cmp	r6, r7
 8009c42:	d900      	bls.n	8009c46 <__ssputs_r+0x72>
 8009c44:	463e      	mov	r6, r7
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	f000 faa6 	bl	800a19c <memmove>
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	1b9b      	subs	r3, r3, r6
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	4433      	add	r3, r6
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c62:	462a      	mov	r2, r5
 8009c64:	f000 fac4 	bl	800a1f0 <_realloc_r>
 8009c68:	4606      	mov	r6, r0
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d1e0      	bne.n	8009c30 <__ssputs_r+0x5c>
 8009c6e:	6921      	ldr	r1, [r4, #16]
 8009c70:	4650      	mov	r0, sl
 8009c72:	f7ff feb7 	bl	80099e4 <_free_r>
 8009c76:	230c      	movs	r3, #12
 8009c78:	f8ca 3000 	str.w	r3, [sl]
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	e7e9      	b.n	8009c5e <__ssputs_r+0x8a>
	...

08009c8c <_svfiprintf_r>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4698      	mov	r8, r3
 8009c92:	898b      	ldrh	r3, [r1, #12]
 8009c94:	061b      	lsls	r3, r3, #24
 8009c96:	b09d      	sub	sp, #116	@ 0x74
 8009c98:	4607      	mov	r7, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	d510      	bpl.n	8009cc2 <_svfiprintf_r+0x36>
 8009ca0:	690b      	ldr	r3, [r1, #16]
 8009ca2:	b973      	cbnz	r3, 8009cc2 <_svfiprintf_r+0x36>
 8009ca4:	2140      	movs	r1, #64	@ 0x40
 8009ca6:	f7ff ff09 	bl	8009abc <_malloc_r>
 8009caa:	6028      	str	r0, [r5, #0]
 8009cac:	6128      	str	r0, [r5, #16]
 8009cae:	b930      	cbnz	r0, 8009cbe <_svfiprintf_r+0x32>
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	b01d      	add	sp, #116	@ 0x74
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbe:	2340      	movs	r3, #64	@ 0x40
 8009cc0:	616b      	str	r3, [r5, #20]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc6:	2320      	movs	r3, #32
 8009cc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd0:	2330      	movs	r3, #48	@ 0x30
 8009cd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e70 <_svfiprintf_r+0x1e4>
 8009cd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cda:	f04f 0901 	mov.w	r9, #1
 8009cde:	4623      	mov	r3, r4
 8009ce0:	469a      	mov	sl, r3
 8009ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce6:	b10a      	cbz	r2, 8009cec <_svfiprintf_r+0x60>
 8009ce8:	2a25      	cmp	r2, #37	@ 0x25
 8009cea:	d1f9      	bne.n	8009ce0 <_svfiprintf_r+0x54>
 8009cec:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf0:	d00b      	beq.n	8009d0a <_svfiprintf_r+0x7e>
 8009cf2:	465b      	mov	r3, fp
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7ff ff6b 	bl	8009bd4 <__ssputs_r>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f000 80a7 	beq.w	8009e52 <_svfiprintf_r+0x1c6>
 8009d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d06:	445a      	add	r2, fp
 8009d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 809f 	beq.w	8009e52 <_svfiprintf_r+0x1c6>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1e:	f10a 0a01 	add.w	sl, sl, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d2c:	4654      	mov	r4, sl
 8009d2e:	2205      	movs	r2, #5
 8009d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d34:	484e      	ldr	r0, [pc, #312]	@ (8009e70 <_svfiprintf_r+0x1e4>)
 8009d36:	f7f6 fa73 	bl	8000220 <memchr>
 8009d3a:	9a04      	ldr	r2, [sp, #16]
 8009d3c:	b9d8      	cbnz	r0, 8009d76 <_svfiprintf_r+0xea>
 8009d3e:	06d0      	lsls	r0, r2, #27
 8009d40:	bf44      	itt	mi
 8009d42:	2320      	movmi	r3, #32
 8009d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d48:	0711      	lsls	r1, r2, #28
 8009d4a:	bf44      	itt	mi
 8009d4c:	232b      	movmi	r3, #43	@ 0x2b
 8009d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d52:	f89a 3000 	ldrb.w	r3, [sl]
 8009d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d58:	d015      	beq.n	8009d86 <_svfiprintf_r+0xfa>
 8009d5a:	9a07      	ldr	r2, [sp, #28]
 8009d5c:	4654      	mov	r4, sl
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4621      	mov	r1, r4
 8009d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6a:	3b30      	subs	r3, #48	@ 0x30
 8009d6c:	2b09      	cmp	r3, #9
 8009d6e:	d94b      	bls.n	8009e08 <_svfiprintf_r+0x17c>
 8009d70:	b1b0      	cbz	r0, 8009da0 <_svfiprintf_r+0x114>
 8009d72:	9207      	str	r2, [sp, #28]
 8009d74:	e014      	b.n	8009da0 <_svfiprintf_r+0x114>
 8009d76:	eba0 0308 	sub.w	r3, r0, r8
 8009d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	46a2      	mov	sl, r4
 8009d84:	e7d2      	b.n	8009d2c <_svfiprintf_r+0xa0>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d19      	adds	r1, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfbb      	ittet	lt
 8009d92:	425b      	neglt	r3, r3
 8009d94:	f042 0202 	orrlt.w	r2, r2, #2
 8009d98:	9307      	strge	r3, [sp, #28]
 8009d9a:	9307      	strlt	r3, [sp, #28]
 8009d9c:	bfb8      	it	lt
 8009d9e:	9204      	strlt	r2, [sp, #16]
 8009da0:	7823      	ldrb	r3, [r4, #0]
 8009da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009da4:	d10a      	bne.n	8009dbc <_svfiprintf_r+0x130>
 8009da6:	7863      	ldrb	r3, [r4, #1]
 8009da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009daa:	d132      	bne.n	8009e12 <_svfiprintf_r+0x186>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009db8:	3402      	adds	r4, #2
 8009dba:	9305      	str	r3, [sp, #20]
 8009dbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e80 <_svfiprintf_r+0x1f4>
 8009dc0:	7821      	ldrb	r1, [r4, #0]
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f7f6 fa2b 	bl	8000220 <memchr>
 8009dca:	b138      	cbz	r0, 8009ddc <_svfiprintf_r+0x150>
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	eba0 000a 	sub.w	r0, r0, sl
 8009dd2:	2240      	movs	r2, #64	@ 0x40
 8009dd4:	4082      	lsls	r2, r0
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	3401      	adds	r4, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de0:	4824      	ldr	r0, [pc, #144]	@ (8009e74 <_svfiprintf_r+0x1e8>)
 8009de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009de6:	2206      	movs	r2, #6
 8009de8:	f7f6 fa1a 	bl	8000220 <memchr>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d036      	beq.n	8009e5e <_svfiprintf_r+0x1d2>
 8009df0:	4b21      	ldr	r3, [pc, #132]	@ (8009e78 <_svfiprintf_r+0x1ec>)
 8009df2:	bb1b      	cbnz	r3, 8009e3c <_svfiprintf_r+0x1b0>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	3307      	adds	r3, #7
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e02:	4433      	add	r3, r6
 8009e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e06:	e76a      	b.n	8009cde <_svfiprintf_r+0x52>
 8009e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7a8      	b.n	8009d64 <_svfiprintf_r+0xd8>
 8009e12:	2300      	movs	r3, #0
 8009e14:	3401      	adds	r4, #1
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f04f 0c0a 	mov.w	ip, #10
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e24:	3a30      	subs	r2, #48	@ 0x30
 8009e26:	2a09      	cmp	r2, #9
 8009e28:	d903      	bls.n	8009e32 <_svfiprintf_r+0x1a6>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0c6      	beq.n	8009dbc <_svfiprintf_r+0x130>
 8009e2e:	9105      	str	r1, [sp, #20]
 8009e30:	e7c4      	b.n	8009dbc <_svfiprintf_r+0x130>
 8009e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e36:	4604      	mov	r4, r0
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e7f0      	b.n	8009e1e <_svfiprintf_r+0x192>
 8009e3c:	ab03      	add	r3, sp, #12
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	462a      	mov	r2, r5
 8009e42:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <_svfiprintf_r+0x1f0>)
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	4638      	mov	r0, r7
 8009e48:	f3af 8000 	nop.w
 8009e4c:	1c42      	adds	r2, r0, #1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	d1d6      	bne.n	8009e00 <_svfiprintf_r+0x174>
 8009e52:	89ab      	ldrh	r3, [r5, #12]
 8009e54:	065b      	lsls	r3, r3, #25
 8009e56:	f53f af2d 	bmi.w	8009cb4 <_svfiprintf_r+0x28>
 8009e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e5c:	e72c      	b.n	8009cb8 <_svfiprintf_r+0x2c>
 8009e5e:	ab03      	add	r3, sp, #12
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	462a      	mov	r2, r5
 8009e64:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <_svfiprintf_r+0x1f0>)
 8009e66:	a904      	add	r1, sp, #16
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f000 f879 	bl	8009f60 <_printf_i>
 8009e6e:	e7ed      	b.n	8009e4c <_svfiprintf_r+0x1c0>
 8009e70:	0800a3cc 	.word	0x0800a3cc
 8009e74:	0800a3d6 	.word	0x0800a3d6
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	08009bd5 	.word	0x08009bd5
 8009e80:	0800a3d2 	.word	0x0800a3d2

08009e84 <_printf_common>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	4616      	mov	r6, r2
 8009e8a:	4698      	mov	r8, r3
 8009e8c:	688a      	ldr	r2, [r1, #8]
 8009e8e:	690b      	ldr	r3, [r1, #16]
 8009e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e94:	4293      	cmp	r3, r2
 8009e96:	bfb8      	it	lt
 8009e98:	4613      	movlt	r3, r2
 8009e9a:	6033      	str	r3, [r6, #0]
 8009e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_printf_common+0x26>
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	0699      	lsls	r1, r3, #26
 8009eae:	bf42      	ittt	mi
 8009eb0:	6833      	ldrmi	r3, [r6, #0]
 8009eb2:	3302      	addmi	r3, #2
 8009eb4:	6033      	strmi	r3, [r6, #0]
 8009eb6:	6825      	ldr	r5, [r4, #0]
 8009eb8:	f015 0506 	ands.w	r5, r5, #6
 8009ebc:	d106      	bne.n	8009ecc <_printf_common+0x48>
 8009ebe:	f104 0a19 	add.w	sl, r4, #25
 8009ec2:	68e3      	ldr	r3, [r4, #12]
 8009ec4:	6832      	ldr	r2, [r6, #0]
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	dc26      	bgt.n	8009f1a <_printf_common+0x96>
 8009ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ed0:	6822      	ldr	r2, [r4, #0]
 8009ed2:	3b00      	subs	r3, #0
 8009ed4:	bf18      	it	ne
 8009ed6:	2301      	movne	r3, #1
 8009ed8:	0692      	lsls	r2, r2, #26
 8009eda:	d42b      	bmi.n	8009f34 <_printf_common+0xb0>
 8009edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c8      	blx	r9
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d01e      	beq.n	8009f28 <_printf_common+0xa4>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	6922      	ldr	r2, [r4, #16]
 8009eee:	f003 0306 	and.w	r3, r3, #6
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	bf02      	ittt	eq
 8009ef6:	68e5      	ldreq	r5, [r4, #12]
 8009ef8:	6833      	ldreq	r3, [r6, #0]
 8009efa:	1aed      	subeq	r5, r5, r3
 8009efc:	68a3      	ldr	r3, [r4, #8]
 8009efe:	bf0c      	ite	eq
 8009f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f04:	2500      	movne	r5, #0
 8009f06:	4293      	cmp	r3, r2
 8009f08:	bfc4      	itt	gt
 8009f0a:	1a9b      	subgt	r3, r3, r2
 8009f0c:	18ed      	addgt	r5, r5, r3
 8009f0e:	2600      	movs	r6, #0
 8009f10:	341a      	adds	r4, #26
 8009f12:	42b5      	cmp	r5, r6
 8009f14:	d11a      	bne.n	8009f4c <_printf_common+0xc8>
 8009f16:	2000      	movs	r0, #0
 8009f18:	e008      	b.n	8009f2c <_printf_common+0xa8>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4638      	mov	r0, r7
 8009f22:	47c8      	blx	r9
 8009f24:	3001      	adds	r0, #1
 8009f26:	d103      	bne.n	8009f30 <_printf_common+0xac>
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	3501      	adds	r5, #1
 8009f32:	e7c6      	b.n	8009ec2 <_printf_common+0x3e>
 8009f34:	18e1      	adds	r1, r4, r3
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	2030      	movs	r0, #48	@ 0x30
 8009f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f3e:	4422      	add	r2, r4
 8009f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f48:	3302      	adds	r3, #2
 8009f4a:	e7c7      	b.n	8009edc <_printf_common+0x58>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4622      	mov	r2, r4
 8009f50:	4641      	mov	r1, r8
 8009f52:	4638      	mov	r0, r7
 8009f54:	47c8      	blx	r9
 8009f56:	3001      	adds	r0, #1
 8009f58:	d0e6      	beq.n	8009f28 <_printf_common+0xa4>
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7d9      	b.n	8009f12 <_printf_common+0x8e>
	...

08009f60 <_printf_i>:
 8009f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	7e0f      	ldrb	r7, [r1, #24]
 8009f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f68:	2f78      	cmp	r7, #120	@ 0x78
 8009f6a:	4691      	mov	r9, r2
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	469a      	mov	sl, r3
 8009f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f76:	d807      	bhi.n	8009f88 <_printf_i+0x28>
 8009f78:	2f62      	cmp	r7, #98	@ 0x62
 8009f7a:	d80a      	bhi.n	8009f92 <_printf_i+0x32>
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	f000 80d1 	beq.w	800a124 <_printf_i+0x1c4>
 8009f82:	2f58      	cmp	r7, #88	@ 0x58
 8009f84:	f000 80b8 	beq.w	800a0f8 <_printf_i+0x198>
 8009f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f90:	e03a      	b.n	800a008 <_printf_i+0xa8>
 8009f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f96:	2b15      	cmp	r3, #21
 8009f98:	d8f6      	bhi.n	8009f88 <_printf_i+0x28>
 8009f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009fa0 <_printf_i+0x40>)
 8009f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	08009f89 	.word	0x08009f89
 8009fac:	08009f89 	.word	0x08009f89
 8009fb0:	08009f89 	.word	0x08009f89
 8009fb4:	08009f89 	.word	0x08009f89
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	08009f89 	.word	0x08009f89
 8009fc0:	08009f89 	.word	0x08009f89
 8009fc4:	08009f89 	.word	0x08009f89
 8009fc8:	08009f89 	.word	0x08009f89
 8009fcc:	0800a10b 	.word	0x0800a10b
 8009fd0:	0800a037 	.word	0x0800a037
 8009fd4:	0800a0c5 	.word	0x0800a0c5
 8009fd8:	08009f89 	.word	0x08009f89
 8009fdc:	08009f89 	.word	0x08009f89
 8009fe0:	0800a12d 	.word	0x0800a12d
 8009fe4:	08009f89 	.word	0x08009f89
 8009fe8:	0800a037 	.word	0x0800a037
 8009fec:	08009f89 	.word	0x08009f89
 8009ff0:	08009f89 	.word	0x08009f89
 8009ff4:	0800a0cd 	.word	0x0800a0cd
 8009ff8:	6833      	ldr	r3, [r6, #0]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6032      	str	r2, [r6, #0]
 800a000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a008:	2301      	movs	r3, #1
 800a00a:	e09c      	b.n	800a146 <_printf_i+0x1e6>
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	6820      	ldr	r0, [r4, #0]
 800a010:	1d19      	adds	r1, r3, #4
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	0606      	lsls	r6, r0, #24
 800a016:	d501      	bpl.n	800a01c <_printf_i+0xbc>
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	e003      	b.n	800a024 <_printf_i+0xc4>
 800a01c:	0645      	lsls	r5, r0, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0xb8>
 800a020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a024:	2d00      	cmp	r5, #0
 800a026:	da03      	bge.n	800a030 <_printf_i+0xd0>
 800a028:	232d      	movs	r3, #45	@ 0x2d
 800a02a:	426d      	negs	r5, r5
 800a02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a030:	4858      	ldr	r0, [pc, #352]	@ (800a194 <_printf_i+0x234>)
 800a032:	230a      	movs	r3, #10
 800a034:	e011      	b.n	800a05a <_printf_i+0xfa>
 800a036:	6821      	ldr	r1, [r4, #0]
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	0608      	lsls	r0, r1, #24
 800a03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a040:	d402      	bmi.n	800a048 <_printf_i+0xe8>
 800a042:	0649      	lsls	r1, r1, #25
 800a044:	bf48      	it	mi
 800a046:	b2ad      	uxthmi	r5, r5
 800a048:	2f6f      	cmp	r7, #111	@ 0x6f
 800a04a:	4852      	ldr	r0, [pc, #328]	@ (800a194 <_printf_i+0x234>)
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	bf14      	ite	ne
 800a050:	230a      	movne	r3, #10
 800a052:	2308      	moveq	r3, #8
 800a054:	2100      	movs	r1, #0
 800a056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a05a:	6866      	ldr	r6, [r4, #4]
 800a05c:	60a6      	str	r6, [r4, #8]
 800a05e:	2e00      	cmp	r6, #0
 800a060:	db05      	blt.n	800a06e <_printf_i+0x10e>
 800a062:	6821      	ldr	r1, [r4, #0]
 800a064:	432e      	orrs	r6, r5
 800a066:	f021 0104 	bic.w	r1, r1, #4
 800a06a:	6021      	str	r1, [r4, #0]
 800a06c:	d04b      	beq.n	800a106 <_printf_i+0x1a6>
 800a06e:	4616      	mov	r6, r2
 800a070:	fbb5 f1f3 	udiv	r1, r5, r3
 800a074:	fb03 5711 	mls	r7, r3, r1, r5
 800a078:	5dc7      	ldrb	r7, [r0, r7]
 800a07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a07e:	462f      	mov	r7, r5
 800a080:	42bb      	cmp	r3, r7
 800a082:	460d      	mov	r5, r1
 800a084:	d9f4      	bls.n	800a070 <_printf_i+0x110>
 800a086:	2b08      	cmp	r3, #8
 800a088:	d10b      	bne.n	800a0a2 <_printf_i+0x142>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07df      	lsls	r7, r3, #31
 800a08e:	d508      	bpl.n	800a0a2 <_printf_i+0x142>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	6861      	ldr	r1, [r4, #4]
 800a094:	4299      	cmp	r1, r3
 800a096:	bfde      	ittt	le
 800a098:	2330      	movle	r3, #48	@ 0x30
 800a09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0a2:	1b92      	subs	r2, r2, r6
 800a0a4:	6122      	str	r2, [r4, #16]
 800a0a6:	f8cd a000 	str.w	sl, [sp]
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	aa03      	add	r2, sp, #12
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f7ff fee7 	bl	8009e84 <_printf_common>
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d14a      	bne.n	800a150 <_printf_i+0x1f0>
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	b004      	add	sp, #16
 800a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f043 0320 	orr.w	r3, r3, #32
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	4832      	ldr	r0, [pc, #200]	@ (800a198 <_printf_i+0x238>)
 800a0ce:	2778      	movs	r7, #120	@ 0x78
 800a0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	6831      	ldr	r1, [r6, #0]
 800a0d8:	061f      	lsls	r7, r3, #24
 800a0da:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0de:	d402      	bmi.n	800a0e6 <_printf_i+0x186>
 800a0e0:	065f      	lsls	r7, r3, #25
 800a0e2:	bf48      	it	mi
 800a0e4:	b2ad      	uxthmi	r5, r5
 800a0e6:	6031      	str	r1, [r6, #0]
 800a0e8:	07d9      	lsls	r1, r3, #31
 800a0ea:	bf44      	itt	mi
 800a0ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a0f0:	6023      	strmi	r3, [r4, #0]
 800a0f2:	b11d      	cbz	r5, 800a0fc <_printf_i+0x19c>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	e7ad      	b.n	800a054 <_printf_i+0xf4>
 800a0f8:	4826      	ldr	r0, [pc, #152]	@ (800a194 <_printf_i+0x234>)
 800a0fa:	e7e9      	b.n	800a0d0 <_printf_i+0x170>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	f023 0320 	bic.w	r3, r3, #32
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	e7f6      	b.n	800a0f4 <_printf_i+0x194>
 800a106:	4616      	mov	r6, r2
 800a108:	e7bd      	b.n	800a086 <_printf_i+0x126>
 800a10a:	6833      	ldr	r3, [r6, #0]
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	6961      	ldr	r1, [r4, #20]
 800a110:	1d18      	adds	r0, r3, #4
 800a112:	6030      	str	r0, [r6, #0]
 800a114:	062e      	lsls	r6, r5, #24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	d501      	bpl.n	800a11e <_printf_i+0x1be>
 800a11a:	6019      	str	r1, [r3, #0]
 800a11c:	e002      	b.n	800a124 <_printf_i+0x1c4>
 800a11e:	0668      	lsls	r0, r5, #25
 800a120:	d5fb      	bpl.n	800a11a <_printf_i+0x1ba>
 800a122:	8019      	strh	r1, [r3, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	4616      	mov	r6, r2
 800a12a:	e7bc      	b.n	800a0a6 <_printf_i+0x146>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	6032      	str	r2, [r6, #0]
 800a132:	681e      	ldr	r6, [r3, #0]
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	2100      	movs	r1, #0
 800a138:	4630      	mov	r0, r6
 800a13a:	f7f6 f871 	bl	8000220 <memchr>
 800a13e:	b108      	cbz	r0, 800a144 <_printf_i+0x1e4>
 800a140:	1b80      	subs	r0, r0, r6
 800a142:	6060      	str	r0, [r4, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	2300      	movs	r3, #0
 800a14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14e:	e7aa      	b.n	800a0a6 <_printf_i+0x146>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	4632      	mov	r2, r6
 800a154:	4649      	mov	r1, r9
 800a156:	4640      	mov	r0, r8
 800a158:	47d0      	blx	sl
 800a15a:	3001      	adds	r0, #1
 800a15c:	d0ad      	beq.n	800a0ba <_printf_i+0x15a>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	079b      	lsls	r3, r3, #30
 800a162:	d413      	bmi.n	800a18c <_printf_i+0x22c>
 800a164:	68e0      	ldr	r0, [r4, #12]
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	4298      	cmp	r0, r3
 800a16a:	bfb8      	it	lt
 800a16c:	4618      	movlt	r0, r3
 800a16e:	e7a6      	b.n	800a0be <_printf_i+0x15e>
 800a170:	2301      	movs	r3, #1
 800a172:	4632      	mov	r2, r6
 800a174:	4649      	mov	r1, r9
 800a176:	4640      	mov	r0, r8
 800a178:	47d0      	blx	sl
 800a17a:	3001      	adds	r0, #1
 800a17c:	d09d      	beq.n	800a0ba <_printf_i+0x15a>
 800a17e:	3501      	adds	r5, #1
 800a180:	68e3      	ldr	r3, [r4, #12]
 800a182:	9903      	ldr	r1, [sp, #12]
 800a184:	1a5b      	subs	r3, r3, r1
 800a186:	42ab      	cmp	r3, r5
 800a188:	dcf2      	bgt.n	800a170 <_printf_i+0x210>
 800a18a:	e7eb      	b.n	800a164 <_printf_i+0x204>
 800a18c:	2500      	movs	r5, #0
 800a18e:	f104 0619 	add.w	r6, r4, #25
 800a192:	e7f5      	b.n	800a180 <_printf_i+0x220>
 800a194:	0800a3dd 	.word	0x0800a3dd
 800a198:	0800a3ee 	.word	0x0800a3ee

0800a19c <memmove>:
 800a19c:	4288      	cmp	r0, r1
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	eb01 0402 	add.w	r4, r1, r2
 800a1a4:	d902      	bls.n	800a1ac <memmove+0x10>
 800a1a6:	4284      	cmp	r4, r0
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	d807      	bhi.n	800a1bc <memmove+0x20>
 800a1ac:	1e43      	subs	r3, r0, #1
 800a1ae:	42a1      	cmp	r1, r4
 800a1b0:	d008      	beq.n	800a1c4 <memmove+0x28>
 800a1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ba:	e7f8      	b.n	800a1ae <memmove+0x12>
 800a1bc:	4402      	add	r2, r0
 800a1be:	4601      	mov	r1, r0
 800a1c0:	428a      	cmp	r2, r1
 800a1c2:	d100      	bne.n	800a1c6 <memmove+0x2a>
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ce:	e7f7      	b.n	800a1c0 <memmove+0x24>

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	@ (800a1ec <_sbrk_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f8 f952 	bl	8002484 <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20005cd8 	.word	0x20005cd8

0800a1f0 <_realloc_r>:
 800a1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	4614      	mov	r4, r2
 800a1f8:	460d      	mov	r5, r1
 800a1fa:	b921      	cbnz	r1, 800a206 <_realloc_r+0x16>
 800a1fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	4611      	mov	r1, r2
 800a202:	f7ff bc5b 	b.w	8009abc <_malloc_r>
 800a206:	b92a      	cbnz	r2, 800a214 <_realloc_r+0x24>
 800a208:	f7ff fbec 	bl	80099e4 <_free_r>
 800a20c:	4625      	mov	r5, r4
 800a20e:	4628      	mov	r0, r5
 800a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a214:	f000 f81a 	bl	800a24c <_malloc_usable_size_r>
 800a218:	4284      	cmp	r4, r0
 800a21a:	4606      	mov	r6, r0
 800a21c:	d802      	bhi.n	800a224 <_realloc_r+0x34>
 800a21e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a222:	d8f4      	bhi.n	800a20e <_realloc_r+0x1e>
 800a224:	4621      	mov	r1, r4
 800a226:	4638      	mov	r0, r7
 800a228:	f7ff fc48 	bl	8009abc <_malloc_r>
 800a22c:	4680      	mov	r8, r0
 800a22e:	b908      	cbnz	r0, 800a234 <_realloc_r+0x44>
 800a230:	4645      	mov	r5, r8
 800a232:	e7ec      	b.n	800a20e <_realloc_r+0x1e>
 800a234:	42b4      	cmp	r4, r6
 800a236:	4622      	mov	r2, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	bf28      	it	cs
 800a23c:	4632      	movcs	r2, r6
 800a23e:	f7ff fbc3 	bl	80099c8 <memcpy>
 800a242:	4629      	mov	r1, r5
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff fbcd 	bl	80099e4 <_free_r>
 800a24a:	e7f1      	b.n	800a230 <_realloc_r+0x40>

0800a24c <_malloc_usable_size_r>:
 800a24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a250:	1f18      	subs	r0, r3, #4
 800a252:	2b00      	cmp	r3, #0
 800a254:	bfbc      	itt	lt
 800a256:	580b      	ldrlt	r3, [r1, r0]
 800a258:	18c0      	addlt	r0, r0, r3
 800a25a:	4770      	bx	lr

0800a25c <_init>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	bf00      	nop
 800a260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a262:	bc08      	pop	{r3}
 800a264:	469e      	mov	lr, r3
 800a266:	4770      	bx	lr

0800a268 <_fini>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	bf00      	nop
 800a26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a26e:	bc08      	pop	{r3}
 800a270:	469e      	mov	lr, r3
 800a272:	4770      	bx	lr
