
BMTR_RTOS_ASRV1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800a024  0800a024  0000b024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b0  0800a1b0  0000c0ac  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1b0  0800a1b0  0000b1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1b8  0800a1b8  0000c0ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1b8  0800a1b8  0000b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1bc  0800a1bc  0000b1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000ac  20000000  0800a1c0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005c0c  200000ac  0800a26c  0000c0ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005cb8  0800a26c  0000ccb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172a9  00000000  00000000  0000c0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395d  00000000  00000000  00023385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00026ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d9  00000000  00000000  000282d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000060dc  00000000  00000000  000293a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c124  00000000  00000000  0002f485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbf15  00000000  00000000  0004b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001474be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000615c  00000000  00000000  00147504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a00c 	.word	0x0800a00c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b0 	.word	0x200000b0
 800020c:	0800a00c 	.word	0x0800a00c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b988 	b.w	8000e64 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	468e      	mov	lr, r1
 8000b74:	4604      	mov	r4, r0
 8000b76:	4688      	mov	r8, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14a      	bne.n	8000c12 <__udivmoddi4+0xa6>
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	4617      	mov	r7, r2
 8000b80:	d962      	bls.n	8000c48 <__udivmoddi4+0xdc>
 8000b82:	fab2 f682 	clz	r6, r2
 8000b86:	b14e      	cbz	r6, 8000b9c <__udivmoddi4+0x30>
 8000b88:	f1c6 0320 	rsb	r3, r6, #32
 8000b8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	40b7      	lsls	r7, r6
 8000b96:	ea43 0808 	orr.w	r8, r3, r8
 8000b9a:	40b4      	lsls	r4, r6
 8000b9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0x62>
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bc0:	f080 80ea 	bcs.w	8000d98 <__udivmoddi4+0x22c>
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f240 80e7 	bls.w	8000d98 <__udivmoddi4+0x22c>
 8000bca:	3902      	subs	r1, #2
 8000bcc:	443b      	add	r3, r7
 8000bce:	1a9a      	subs	r2, r3, r2
 8000bd0:	b2a3      	uxth	r3, r4
 8000bd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be2:	459c      	cmp	ip, r3
 8000be4:	d909      	bls.n	8000bfa <__udivmoddi4+0x8e>
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bec:	f080 80d6 	bcs.w	8000d9c <__udivmoddi4+0x230>
 8000bf0:	459c      	cmp	ip, r3
 8000bf2:	f240 80d3 	bls.w	8000d9c <__udivmoddi4+0x230>
 8000bf6:	443b      	add	r3, r7
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bfe:	eba3 030c 	sub.w	r3, r3, ip
 8000c02:	2100      	movs	r1, #0
 8000c04:	b11d      	cbz	r5, 8000c0e <__udivmoddi4+0xa2>
 8000c06:	40f3      	lsrs	r3, r6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d905      	bls.n	8000c22 <__udivmoddi4+0xb6>
 8000c16:	b10d      	cbz	r5, 8000c1c <__udivmoddi4+0xb0>
 8000c18:	e9c5 0100 	strd	r0, r1, [r5]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4608      	mov	r0, r1
 8000c20:	e7f5      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c22:	fab3 f183 	clz	r1, r3
 8000c26:	2900      	cmp	r1, #0
 8000c28:	d146      	bne.n	8000cb8 <__udivmoddi4+0x14c>
 8000c2a:	4573      	cmp	r3, lr
 8000c2c:	d302      	bcc.n	8000c34 <__udivmoddi4+0xc8>
 8000c2e:	4282      	cmp	r2, r0
 8000c30:	f200 8105 	bhi.w	8000e3e <__udivmoddi4+0x2d2>
 8000c34:	1a84      	subs	r4, r0, r2
 8000c36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	4690      	mov	r8, r2
 8000c3e:	2d00      	cmp	r5, #0
 8000c40:	d0e5      	beq.n	8000c0e <__udivmoddi4+0xa2>
 8000c42:	e9c5 4800 	strd	r4, r8, [r5]
 8000c46:	e7e2      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f000 8090 	beq.w	8000d6e <__udivmoddi4+0x202>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f040 80a4 	bne.w	8000da0 <__udivmoddi4+0x234>
 8000c58:	1a8a      	subs	r2, r1, r2
 8000c5a:	0c03      	lsrs	r3, r0, #16
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	b280      	uxth	r0, r0
 8000c62:	b2bc      	uxth	r4, r7
 8000c64:	2101      	movs	r1, #1
 8000c66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c72:	fb04 f20c 	mul.w	r2, r4, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x11e>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x11c>
 8000c82:	429a      	cmp	r2, r3
 8000c84:	f200 80e0 	bhi.w	8000e48 <__udivmoddi4+0x2dc>
 8000c88:	46c4      	mov	ip, r8
 8000c8a:	1a9b      	subs	r3, r3, r2
 8000c8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000c90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000c94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000c98:	fb02 f404 	mul.w	r4, r2, r4
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x144>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x142>
 8000ca8:	429c      	cmp	r4, r3
 8000caa:	f200 80ca 	bhi.w	8000e42 <__udivmoddi4+0x2d6>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	1b1b      	subs	r3, r3, r4
 8000cb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cb6:	e7a5      	b.n	8000c04 <__udivmoddi4+0x98>
 8000cb8:	f1c1 0620 	rsb	r6, r1, #32
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc2:	431f      	orrs	r7, r3
 8000cc4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cc8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ccc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cd0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cd4:	4323      	orrs	r3, r4
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	fa1f fc87 	uxth.w	ip, r7
 8000cde:	fbbe f0f9 	udiv	r0, lr, r9
 8000ce2:	0c1c      	lsrs	r4, r3, #16
 8000ce4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ce8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000cec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cf6:	d909      	bls.n	8000d0c <__udivmoddi4+0x1a0>
 8000cf8:	193c      	adds	r4, r7, r4
 8000cfa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000cfe:	f080 809c 	bcs.w	8000e3a <__udivmoddi4+0x2ce>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f240 8099 	bls.w	8000e3a <__udivmoddi4+0x2ce>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	443c      	add	r4, r7
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	fa1f fe83 	uxth.w	lr, r3
 8000d14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d18:	fb09 4413 	mls	r4, r9, r3, r4
 8000d1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1ce>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d2e:	f080 8082 	bcs.w	8000e36 <__udivmoddi4+0x2ca>
 8000d32:	45a4      	cmp	ip, r4
 8000d34:	d97f      	bls.n	8000e36 <__udivmoddi4+0x2ca>
 8000d36:	3b02      	subs	r3, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d3e:	eba4 040c 	sub.w	r4, r4, ip
 8000d42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d46:	4564      	cmp	r4, ip
 8000d48:	4673      	mov	r3, lr
 8000d4a:	46e1      	mov	r9, ip
 8000d4c:	d362      	bcc.n	8000e14 <__udivmoddi4+0x2a8>
 8000d4e:	d05f      	beq.n	8000e10 <__udivmoddi4+0x2a4>
 8000d50:	b15d      	cbz	r5, 8000d6a <__udivmoddi4+0x1fe>
 8000d52:	ebb8 0203 	subs.w	r2, r8, r3
 8000d56:	eb64 0409 	sbc.w	r4, r4, r9
 8000d5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d62:	431e      	orrs	r6, r3
 8000d64:	40cc      	lsrs	r4, r1
 8000d66:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	e74f      	b.n	8000c0e <__udivmoddi4+0xa2>
 8000d6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d72:	0c01      	lsrs	r1, r0, #16
 8000d74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d78:	b280      	uxth	r0, r0
 8000d7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4638      	mov	r0, r7
 8000d82:	463c      	mov	r4, r7
 8000d84:	46b8      	mov	r8, r7
 8000d86:	46be      	mov	lr, r7
 8000d88:	2620      	movs	r6, #32
 8000d8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000d8e:	eba2 0208 	sub.w	r2, r2, r8
 8000d92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000d96:	e766      	b.n	8000c66 <__udivmoddi4+0xfa>
 8000d98:	4601      	mov	r1, r0
 8000d9a:	e718      	b.n	8000bce <__udivmoddi4+0x62>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	e72c      	b.n	8000bfa <__udivmoddi4+0x8e>
 8000da0:	f1c6 0220 	rsb	r2, r6, #32
 8000da4:	fa2e f302 	lsr.w	r3, lr, r2
 8000da8:	40b7      	lsls	r7, r6
 8000daa:	40b1      	lsls	r1, r6
 8000dac:	fa20 f202 	lsr.w	r2, r0, r2
 8000db0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dba:	b2bc      	uxth	r4, r7
 8000dbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb08 f904 	mul.w	r9, r8, r4
 8000dca:	40b0      	lsls	r0, r6
 8000dcc:	4589      	cmp	r9, r1
 8000dce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dd2:	b280      	uxth	r0, r0
 8000dd4:	d93e      	bls.n	8000e54 <__udivmoddi4+0x2e8>
 8000dd6:	1879      	adds	r1, r7, r1
 8000dd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ddc:	d201      	bcs.n	8000de2 <__udivmoddi4+0x276>
 8000dde:	4589      	cmp	r9, r1
 8000de0:	d81f      	bhi.n	8000e22 <__udivmoddi4+0x2b6>
 8000de2:	eba1 0109 	sub.w	r1, r1, r9
 8000de6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dea:	fb09 f804 	mul.w	r8, r9, r4
 8000dee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000df2:	b292      	uxth	r2, r2
 8000df4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df8:	4542      	cmp	r2, r8
 8000dfa:	d229      	bcs.n	8000e50 <__udivmoddi4+0x2e4>
 8000dfc:	18ba      	adds	r2, r7, r2
 8000dfe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e02:	d2c4      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e04:	4542      	cmp	r2, r8
 8000e06:	d2c2      	bcs.n	8000d8e <__udivmoddi4+0x222>
 8000e08:	f1a9 0102 	sub.w	r1, r9, #2
 8000e0c:	443a      	add	r2, r7
 8000e0e:	e7be      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e10:	45f0      	cmp	r8, lr
 8000e12:	d29d      	bcs.n	8000d50 <__udivmoddi4+0x1e4>
 8000e14:	ebbe 0302 	subs.w	r3, lr, r2
 8000e18:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e1c:	3801      	subs	r0, #1
 8000e1e:	46e1      	mov	r9, ip
 8000e20:	e796      	b.n	8000d50 <__udivmoddi4+0x1e4>
 8000e22:	eba7 0909 	sub.w	r9, r7, r9
 8000e26:	4449      	add	r1, r9
 8000e28:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e2c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e30:	fb09 f804 	mul.w	r8, r9, r4
 8000e34:	e7db      	b.n	8000dee <__udivmoddi4+0x282>
 8000e36:	4673      	mov	r3, lr
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1ce>
 8000e3a:	4650      	mov	r0, sl
 8000e3c:	e766      	b.n	8000d0c <__udivmoddi4+0x1a0>
 8000e3e:	4608      	mov	r0, r1
 8000e40:	e6fd      	b.n	8000c3e <__udivmoddi4+0xd2>
 8000e42:	443b      	add	r3, r7
 8000e44:	3a02      	subs	r2, #2
 8000e46:	e733      	b.n	8000cb0 <__udivmoddi4+0x144>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	443b      	add	r3, r7
 8000e4e:	e71c      	b.n	8000c8a <__udivmoddi4+0x11e>
 8000e50:	4649      	mov	r1, r9
 8000e52:	e79c      	b.n	8000d8e <__udivmoddi4+0x222>
 8000e54:	eba1 0109 	sub.w	r1, r1, r9
 8000e58:	46c4      	mov	ip, r8
 8000e5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e5e:	fb09 f804 	mul.w	r8, r9, r4
 8000e62:	e7c4      	b.n	8000dee <__udivmoddi4+0x282>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a06      	ldr	r2, [pc, #24]	@ (8000e98 <vApplicationGetIdleTaskMemory+0x30>)
 8000e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	@ 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200000c8 	.word	0x200000c8
 8000e98:	2000011c 	.word	0x2000011c

08000e9c <applyLowPassFilterVelocity>:
HAL_StatusTypeDef status;
uint16_t OutputVref = 5000;         // DAC output voltage reference value


// ────────────── Low-pass Filter Function ──────────────
float applyLowPassFilterVelocity(float X, float Y_old) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ea6:	edc7 0a00 	vstr	s1, [r7]
    // Apply the first-order low-pass filter formula
    float Y = Y_old + G * (X - Y_old);  // Filtered value
 8000eaa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000eae:	edd7 7a00 	vldr	s15, [r7]
 8000eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eb6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ee0 <applyLowPassFilterVelocity+0x44>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	ed97 7a00 	vldr	s14, [r7]
 8000ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec6:	edc7 7a03 	vstr	s15, [r7, #12]
    return Y;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	ee07 3a90 	vmov	s15, r3
}
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	3dcccccd 	.word	0x3dcccccd

08000ee4 <ConfigureMotor01>:

// ────────────── Motor Control Functions ──────────────
void ConfigureMotor01(int Enable, int Clockwise, uint16_t dac_value) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, Clockwise);
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	2110      	movs	r1, #16
 8000efa:	480a      	ldr	r0, [pc, #40]	@ (8000f24 <ConfigureMotor01+0x40>)
 8000efc:	f001 fe3e 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, Enable);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	2120      	movs	r1, #32
 8000f08:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <ConfigureMotor01+0x40>)
 8000f0a:	f001 fe37 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	4804      	ldr	r0, [pc, #16]	@ (8000f28 <ConfigureMotor01+0x44>)
 8000f16:	f001 fc02 	bl	800271e <HAL_DAC_SetValue>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40020400 	.word	0x40020400
 8000f28:	2000031c 	.word	0x2000031c

08000f2c <ConfigureMotor02>:

void ConfigureMotor02(int Enable, int Clockwise, uint16_t dac_value) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, Clockwise);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	2104      	movs	r1, #4
 8000f42:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <ConfigureMotor02+0x40>)
 8000f44:	f001 fe1a 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, Enable);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2108      	movs	r1, #8
 8000f50:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <ConfigureMotor02+0x40>)
 8000f52:	f001 fe13 	bl	8002b7c <HAL_GPIO_WritePin>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dac_value);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2110      	movs	r1, #16
 8000f5c:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <ConfigureMotor02+0x44>)
 8000f5e:	f001 fbde 	bl	800271e <HAL_DAC_SetValue>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	2000031c 	.word	0x2000031c

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b5b0      	push	{r4, r5, r7, lr}
 8000f76:	b08e      	sub	sp, #56	@ 0x38
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000f7a:	f000 ff15 	bl	8001da8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f001 f9ce 	bl	800231e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f85b 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 fa53 	bl	8001430 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f8a:	f000 f92f 	bl	80011ec <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f8e:	f000 f9d5 	bl	800133c <MX_TIM4_Init>
  MX_TIM13_Init();
 8000f92:	f000 fa29 	bl	80013e8 <MX_TIM13_Init>
  MX_SPI4_Init();
 8000f96:	f000 f8eb 	bl	8001170 <MX_SPI4_Init>
  MX_FATFS_Init();
 8000f9a:	f003 fd8d 	bl	8004ab8 <MX_FATFS_Init>
  MX_DAC_Init();
 8000f9e:	f000 f8b3 	bl	8001108 <MX_DAC_Init>
  MX_TIM2_Init();
 8000fa2:	f000 f97d 	bl	80012a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000fa6:	213c      	movs	r1, #60	@ 0x3c
 8000fa8:	481c      	ldr	r0, [pc, #112]	@ (800101c <main+0xa8>)
 8000faa:	f003 f8e5 	bl	8004178 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fae:	213c      	movs	r1, #60	@ 0x3c
 8000fb0:	481b      	ldr	r0, [pc, #108]	@ (8001020 <main+0xac>)
 8000fb2:	f003 f8e1 	bl	8004178 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim2);
 8000fb6:	481b      	ldr	r0, [pc, #108]	@ (8001024 <main+0xb0>)
 8000fb8:	f002 ff50 	bl	8003e5c <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	481a      	ldr	r0, [pc, #104]	@ (8001028 <main+0xb4>)
 8000fc0:	f001 fb56 	bl	8002670 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	4818      	ldr	r0, [pc, #96]	@ (8001028 <main+0xb4>)
 8000fc8:	f001 fb52 	bl	8002670 <HAL_DAC_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Record */
  osThreadDef(Record, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fcc:	4b17      	ldr	r3, [pc, #92]	@ (800102c <main+0xb8>)
 8000fce:	f107 041c 	add.w	r4, r7, #28
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RecordHandle = osThreadCreate(osThread(Record), NULL);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 f90e 	bl	8007208 <osThreadCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a10      	ldr	r2, [pc, #64]	@ (8001030 <main+0xbc>)
 8000ff0:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainController */
  osThreadDef(MainController, StartTask02, osPriorityRealtime, 0, 128);
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <main+0xc0>)
 8000ff4:	463c      	mov	r4, r7
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001000:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainControllerHandle = osThreadCreate(osThread(MainController), NULL);
 8001004:	463b      	mov	r3, r7
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 f8fd 	bl	8007208 <osThreadCreate>
 800100e:	4603      	mov	r3, r0
 8001010:	4a09      	ldr	r2, [pc, #36]	@ (8001038 <main+0xc4>)
 8001012:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001014:	f006 f8f1 	bl	80071fa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <main+0xa4>
 800101c:	2000042c 	.word	0x2000042c
 8001020:	20000394 	.word	0x20000394
 8001024:	200003e0 	.word	0x200003e0
 8001028:	2000031c 	.word	0x2000031c
 800102c:	0800a02c 	.word	0x0800a02c
 8001030:	200004c4 	.word	0x200004c4
 8001034:	0800a058 	.word	0x0800a058
 8001038:	200004c8 	.word	0x200004c8

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	@ 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	@ 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f008 fb60 	bl	8009710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <SystemClock_Config+0xc4>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <SystemClock_Config+0xc4>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	@ 0x40
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <SystemClock_Config+0xc4>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001078:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <SystemClock_Config+0xc8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001080:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <SystemClock_Config+0xc8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <SystemClock_Config+0xc8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010a8:	2319      	movs	r3, #25
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010ac:	2390      	movs	r3, #144	@ 0x90
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fd77 	bl	8002bb0 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80010c8:	f000 feac 	bl	8001e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 f805 	bl	80030f8 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80010f4:	f000 fe96 	bl	8001e24 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <MX_DAC_Init+0x60>)
 8001118:	4a14      	ldr	r2, [pc, #80]	@ (800116c <MX_DAC_Init+0x64>)
 800111a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800111c:	4812      	ldr	r0, [pc, #72]	@ (8001168 <MX_DAC_Init+0x60>)
 800111e:	f001 fa85 	bl	800262c <HAL_DAC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001128:	f000 fe7c 	bl	8001e24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800112c:	2300      	movs	r3, #0
 800112e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	@ (8001168 <MX_DAC_Init+0x60>)
 800113c:	f001 fb19 	bl	8002772 <HAL_DAC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001146:	f000 fe6d 	bl	8001e24 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	2210      	movs	r2, #16
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_DAC_Init+0x60>)
 8001152:	f001 fb0e 	bl	8002772 <HAL_DAC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800115c:	f000 fe62 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000031c 	.word	0x2000031c
 800116c:	40007400 	.word	0x40007400

08001170 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_SPI4_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	@ (80011e8 <MX_SPI4_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_SPI4_Init+0x74>)
 800117c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001180:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_SPI4_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_SPI4_Init+0x74>)
 800118a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800118e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_SPI4_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_SPI4_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_SPI4_Init+0x74>)
 800119e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011a2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011a6:	2228      	movs	r2, #40	@ 0x28
 80011a8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011be:	2207      	movs	r2, #7
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_SPI4_Init+0x74>)
 80011d0:	f002 f996 	bl	8003500 <HAL_SPI_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 fe23 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000330 	.word	0x20000330
 80011e8:	40013400 	.word	0x40013400

080011ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	@ 0x30
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	2224      	movs	r2, #36	@ 0x24
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f008 fa88 	bl	8009710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	463b      	mov	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <MX_TIM1_Init+0xac>)
 800120c:	4a23      	ldr	r2, [pc, #140]	@ (800129c <MX_TIM1_Init+0xb0>)
 800120e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001212:	2200      	movs	r2, #0
 8001214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800121c:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <MX_TIM1_Init+0xac>)
 800121e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001224:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800122a:	4b1b      	ldr	r3, [pc, #108]	@ (8001298 <MX_TIM1_Init+0xac>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001236:	2303      	movs	r3, #3
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800123a:	2302      	movs	r3, #2
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001246:	2304      	movs	r3, #4
 8001248:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800124a:	2302      	movs	r3, #2
 800124c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800124e:	2301      	movs	r3, #1
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 4;
 8001256:	2304      	movs	r3, #4
 8001258:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	480d      	ldr	r0, [pc, #52]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001262:	f002 fee3 	bl	800402c <HAL_TIM_Encoder_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800126c:	f000 fdda 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001270:	2300      	movs	r3, #0
 8001272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_TIM1_Init+0xac>)
 8001282:	f003 fb6d 	bl	8004960 <HAL_TIMEx_MasterConfigSynchronization>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800128c:	f000 fdca 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	3730      	adds	r7, #48	@ 0x30
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000394 	.word	0x20000394
 800129c:	40010000 	.word	0x40010000

080012a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012be:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72*5-1;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012c8:	f240 1267 	movw	r2, #359	@ 0x167
 80012cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 80012d4:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012e8:	4813      	ldr	r0, [pc, #76]	@ (8001338 <MX_TIM2_Init+0x98>)
 80012ea:	f002 fd5f 	bl	8003dac <HAL_TIM_Base_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012f4:	f000 fd96 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001306:	f003 f8cd 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001310:	f000 fd88 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_TIM2_Init+0x98>)
 8001322:	f003 fb1d 	bl	8004960 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800132c:	f000 fd7a 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200003e0 	.word	0x200003e0

0800133c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	@ 0x30
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f008 f9e0 	bl	8009710 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800135a:	4b21      	ldr	r3, [pc, #132]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 800135c:	4a21      	ldr	r2, [pc, #132]	@ (80013e4 <MX_TIM4_Init+0xa8>)
 800135e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001360:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1e      	ldr	r3, [pc, #120]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 800136e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001372:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b1a      	ldr	r3, [pc, #104]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001380:	2303      	movs	r3, #3
 8001382:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 8;
 8001390:	2308      	movs	r3, #8
 8001392:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001394:	2302      	movs	r3, #2
 8001396:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013a4:	f107 030c 	add.w	r3, r7, #12
 80013a8:	4619      	mov	r1, r3
 80013aa:	480d      	ldr	r0, [pc, #52]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 80013ac:	f002 fe3e 	bl	800402c <HAL_TIM_Encoder_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013b6:	f000 fd35 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c2:	463b      	mov	r3, r7
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <MX_TIM4_Init+0xa4>)
 80013c8:	f003 faca 	bl	8004960 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013d2:	f000 fd27 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	@ 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000042c 	.word	0x2000042c
 80013e4:	40000800 	.word	0x40000800

080013e8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013ee:	4a0f      	ldr	r2, [pc, #60]	@ (800142c <MX_TIM13_Init+0x44>)
 80013f0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 14400-1;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013f4:	f643 023f 	movw	r2, #14399	@ 0x383f
 80013f8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <MX_TIM13_Init+0x40>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 8001400:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001402:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001406:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <MX_TIM13_Init+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001414:	4804      	ldr	r0, [pc, #16]	@ (8001428 <MX_TIM13_Init+0x40>)
 8001416:	f002 fcc9 	bl	8003dac <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001420:	f000 fd00 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000478 	.word	0x20000478
 800142c:	40001c00 	.word	0x40001c00

08001430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	@ 0x30
 8001434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001436:	f107 031c 	add.w	r3, r7, #28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
 8001444:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001446:	4b4c      	ldr	r3, [pc, #304]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a4b      	ldr	r2, [pc, #300]	@ (8001578 <MX_GPIO_Init+0x148>)
 800144c:	f043 0310 	orr.w	r3, r3, #16
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b49      	ldr	r3, [pc, #292]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	61bb      	str	r3, [r7, #24]
 800145c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a45      	ldr	r2, [pc, #276]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001464:	f043 0320 	orr.w	r3, r3, #32
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <MX_GPIO_Init+0x148>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b40      	ldr	r3, [pc, #256]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a3f      	ldr	r2, [pc, #252]	@ (8001578 <MX_GPIO_Init+0x148>)
 800147c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b3d      	ldr	r3, [pc, #244]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b3a      	ldr	r3, [pc, #232]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a39      	ldr	r2, [pc, #228]	@ (8001578 <MX_GPIO_Init+0x148>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <MX_GPIO_Init+0x148>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a33      	ldr	r2, [pc, #204]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014ac:	f043 0302 	orr.w	r3, r3, #2
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_GPIO_Init+0x148>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2103      	movs	r1, #3
 80014da:	4828      	ldr	r0, [pc, #160]	@ (800157c <MX_GPIO_Init+0x14c>)
 80014dc:	f001 fb4e 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	210c      	movs	r1, #12
 80014e4:	4826      	ldr	r0, [pc, #152]	@ (8001580 <MX_GPIO_Init+0x150>)
 80014e6:	f001 fb49 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2131      	movs	r1, #49	@ 0x31
 80014ee:	4825      	ldr	r0, [pc, #148]	@ (8001584 <MX_GPIO_Init+0x154>)
 80014f0:	f001 fb44 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2103      	movs	r1, #3
 80014f8:	4823      	ldr	r0, [pc, #140]	@ (8001588 <MX_GPIO_Init+0x158>)
 80014fa:	f001 fb3f 	bl	8002b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014fe:	2303      	movs	r3, #3
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4819      	ldr	r0, [pc, #100]	@ (800157c <MX_GPIO_Init+0x14c>)
 8001516:	f001 f985 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800151a:	230c      	movs	r3, #12
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 031c 	add.w	r3, r7, #28
 800152e:	4619      	mov	r1, r3
 8001530:	4813      	ldr	r0, [pc, #76]	@ (8001580 <MX_GPIO_Init+0x150>)
 8001532:	f001 f977 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8001536:	2331      	movs	r3, #49	@ 0x31
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	480d      	ldr	r0, [pc, #52]	@ (8001584 <MX_GPIO_Init+0x154>)
 800154e:	f001 f969 	bl	8002824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001552:	2303      	movs	r3, #3
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <MX_GPIO_Init+0x158>)
 800156a:	f001 f95b 	bl	8002824 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	@ 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40021400 	.word	0x40021400
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020c00 	.word	0x40020c00
 800158c:	00000000 	.word	0x00000000

08001590 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  /*********************************************************
	   *                  Main Task Counter Update              *
	   *********************************************************/
	  MainTaskCount++;
 8001598:	4bc3      	ldr	r3, [pc, #780]	@ (80018a8 <StartDefaultTask+0x318>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	3301      	adds	r3, #1
 800159e:	4ac2      	ldr	r2, [pc, #776]	@ (80018a8 <StartDefaultTask+0x318>)
 80015a0:	6013      	str	r3, [r2, #0]
	  time_start = __HAL_TIM_GET_COUNTER(&htim2);
 80015a2:	4bc2      	ldr	r3, [pc, #776]	@ (80018ac <StartDefaultTask+0x31c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a8:	4ac1      	ldr	r2, [pc, #772]	@ (80018b0 <StartDefaultTask+0x320>)
 80015aa:	6013      	str	r3, [r2, #0]
	  MainloopCount++;
 80015ac:	4bc1      	ldr	r3, [pc, #772]	@ (80018b4 <StartDefaultTask+0x324>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	4ac0      	ldr	r2, [pc, #768]	@ (80018b4 <StartDefaultTask+0x324>)
 80015b4:	6013      	str	r3, [r2, #0]
	  /*********************************************************
	   *                Read Encoder Tick Counts               *
	   *********************************************************/
	  EncoderUpdated = 0;
 80015b6:	4bc0      	ldr	r3, [pc, #768]	@ (80018b8 <StartDefaultTask+0x328>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
	  encoder_ticks = __HAL_TIM_GET_COUNTER(&htim1);   // Encoder 1
 80015bc:	4bbf      	ldr	r3, [pc, #764]	@ (80018bc <StartDefaultTask+0x32c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	4abf      	ldr	r2, [pc, #764]	@ (80018c0 <StartDefaultTask+0x330>)
 80015c4:	6013      	str	r3, [r2, #0]
	  encoder_ticks2 = __HAL_TIM_GET_COUNTER(&htim4);  // Encoder 2
 80015c6:	4bbf      	ldr	r3, [pc, #764]	@ (80018c4 <StartDefaultTask+0x334>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015cc:	4abe      	ldr	r2, [pc, #760]	@ (80018c8 <StartDefaultTask+0x338>)
 80015ce:	6013      	str	r3, [r2, #0]
	  EncoderUpdated = 1;
 80015d0:	4bb9      	ldr	r3, [pc, #740]	@ (80018b8 <StartDefaultTask+0x328>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

	  /*********************************************************
	   *                 Time from Start (in sec)              *
	   *********************************************************/
	  secondFromStart = __HAL_TIM_GET_COUNTER(&htim2) / 100000;
 80015d6:	4bb5      	ldr	r3, [pc, #724]	@ (80018ac <StartDefaultTask+0x31c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	095b      	lsrs	r3, r3, #5
 80015de:	4abb      	ldr	r2, [pc, #748]	@ (80018cc <StartDefaultTask+0x33c>)
 80015e0:	fba2 2303 	umull	r2, r3, r2, r3
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	4aba      	ldr	r2, [pc, #744]	@ (80018d0 <StartDefaultTask+0x340>)
 80015e8:	6013      	str	r3, [r2, #0]

	  /*********************************************************
	   *        Compute Position, Velocity, Acceleration       *
	   *                    For Encoder 1                      *
	   *********************************************************/
	  theta1 = (float)(encoder_ticks) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 80015ea:	4bb5      	ldr	r3, [pc, #724]	@ (80018c0 <StartDefaultTask+0x330>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015fa:	ee17 0a90 	vmov	r0, s15
 80015fe:	f7fe ffc3 	bl	8000588 <__aeabi_f2d>
 8001602:	a3a7      	add	r3, pc, #668	@ (adr r3, 80018a0 <StartDefaultTask+0x310>)
 8001604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001608:	f7ff f816 	bl	8000638 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4614      	mov	r4, r2
 8001612:	461d      	mov	r5, r3
 8001614:	4baf      	ldr	r3, [pc, #700]	@ (80018d4 <StartDefaultTask+0x344>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80018d8 <StartDefaultTask+0x348>
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	ee17 0a90 	vmov	r0, s15
 8001626:	f7fe ffaf 	bl	8000588 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7ff f92b 	bl	800088c <__aeabi_ddiv>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa2d 	bl	8000a9c <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	4aa5      	ldr	r2, [pc, #660]	@ (80018dc <StartDefaultTask+0x34c>)
 8001646:	6013      	str	r3, [r2, #0]
	  velocity1 = (theta1 - theta1_prev) * 1000000 / time_interval;
 8001648:	4ba4      	ldr	r3, [pc, #656]	@ (80018dc <StartDefaultTask+0x34c>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	4ba4      	ldr	r3, [pc, #656]	@ (80018e0 <StartDefaultTask+0x350>)
 8001650:	edd3 7a00 	vldr	s15, [r3]
 8001654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001658:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80018e4 <StartDefaultTask+0x354>
 800165c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001660:	4ba1      	ldr	r3, [pc, #644]	@ (80018e8 <StartDefaultTask+0x358>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	ee07 3a90 	vmov	s15, r3
 8001668:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800166c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001670:	4b9e      	ldr	r3, [pc, #632]	@ (80018ec <StartDefaultTask+0x35c>)
 8001672:	edc3 7a00 	vstr	s15, [r3]
	  acceleration1 = (velocity1 - velocity1_prev) * 1000000 / time_interval;
 8001676:	4b9d      	ldr	r3, [pc, #628]	@ (80018ec <StartDefaultTask+0x35c>)
 8001678:	ed93 7a00 	vldr	s14, [r3]
 800167c:	4b9c      	ldr	r3, [pc, #624]	@ (80018f0 <StartDefaultTask+0x360>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001686:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 80018e4 <StartDefaultTask+0x354>
 800168a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800168e:	4b96      	ldr	r3, [pc, #600]	@ (80018e8 <StartDefaultTask+0x358>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800169a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169e:	4b95      	ldr	r3, [pc, #596]	@ (80018f4 <StartDefaultTask+0x364>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]
	  velocity1 = applyLowPassFilterVelocity(velocity1, velocity1_prev);  // Filter velocity
 80016a4:	4b91      	ldr	r3, [pc, #580]	@ (80018ec <StartDefaultTask+0x35c>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	4b91      	ldr	r3, [pc, #580]	@ (80018f0 <StartDefaultTask+0x360>)
 80016ac:	ed93 7a00 	vldr	s14, [r3]
 80016b0:	eef0 0a47 	vmov.f32	s1, s14
 80016b4:	eeb0 0a67 	vmov.f32	s0, s15
 80016b8:	f7ff fbf0 	bl	8000e9c <applyLowPassFilterVelocity>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	4b8a      	ldr	r3, [pc, #552]	@ (80018ec <StartDefaultTask+0x35c>)
 80016c2:	edc3 7a00 	vstr	s15, [r3]
	  theta1_prev = theta1;
 80016c6:	4b85      	ldr	r3, [pc, #532]	@ (80018dc <StartDefaultTask+0x34c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a85      	ldr	r2, [pc, #532]	@ (80018e0 <StartDefaultTask+0x350>)
 80016cc:	6013      	str	r3, [r2, #0]
	  velocity1_prev = velocity1;
 80016ce:	4b87      	ldr	r3, [pc, #540]	@ (80018ec <StartDefaultTask+0x35c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a87      	ldr	r2, [pc, #540]	@ (80018f0 <StartDefaultTask+0x360>)
 80016d4:	6013      	str	r3, [r2, #0]

	  /*********************************************************
	   *        Compute Position, Velocity, Acceleration       *
	   *                    For Encoder 2                      *
	   *********************************************************/
	  theta2 = (float)(encoder_ticks2) * 2.0f * M_PI / ((float)CPR * gear_ratio);
 80016d6:	4b7c      	ldr	r3, [pc, #496]	@ (80018c8 <StartDefaultTask+0x338>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe ff4d 	bl	8000588 <__aeabi_f2d>
 80016ee:	a36c      	add	r3, pc, #432	@ (adr r3, 80018a0 <StartDefaultTask+0x310>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ffa0 	bl	8000638 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4614      	mov	r4, r2
 80016fe:	461d      	mov	r5, r3
 8001700:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <StartDefaultTask+0x344>)
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80018d8 <StartDefaultTask+0x348>
 800170a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170e:	ee17 0a90 	vmov	r0, s15
 8001712:	f7fe ff39 	bl	8000588 <__aeabi_f2d>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4620      	mov	r0, r4
 800171c:	4629      	mov	r1, r5
 800171e:	f7ff f8b5 	bl	800088c <__aeabi_ddiv>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f9b7 	bl	8000a9c <__aeabi_d2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4a71      	ldr	r2, [pc, #452]	@ (80018f8 <StartDefaultTask+0x368>)
 8001732:	6013      	str	r3, [r2, #0]
	  velocity2 = (theta2 - theta2_prev) * 1000000 / time_interval;
 8001734:	4b70      	ldr	r3, [pc, #448]	@ (80018f8 <StartDefaultTask+0x368>)
 8001736:	ed93 7a00 	vldr	s14, [r3]
 800173a:	4b70      	ldr	r3, [pc, #448]	@ (80018fc <StartDefaultTask+0x36c>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001744:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80018e4 <StartDefaultTask+0x354>
 8001748:	ee67 6a87 	vmul.f32	s13, s15, s14
 800174c:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <StartDefaultTask+0x358>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175c:	4b68      	ldr	r3, [pc, #416]	@ (8001900 <StartDefaultTask+0x370>)
 800175e:	edc3 7a00 	vstr	s15, [r3]
	  acceleration2 = (velocity2 - velocity2_prev) * 1000000 / time_interval;
 8001762:	4b67      	ldr	r3, [pc, #412]	@ (8001900 <StartDefaultTask+0x370>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <StartDefaultTask+0x374>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001772:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80018e4 <StartDefaultTask+0x354>
 8001776:	ee67 6a87 	vmul.f32	s13, s15, s14
 800177a:	4b5b      	ldr	r3, [pc, #364]	@ (80018e8 <StartDefaultTask+0x358>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178a:	4b5f      	ldr	r3, [pc, #380]	@ (8001908 <StartDefaultTask+0x378>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
	  velocity2 = applyLowPassFilterVelocity(velocity2, velocity2_prev);  // Filter velocity
 8001790:	4b5b      	ldr	r3, [pc, #364]	@ (8001900 <StartDefaultTask+0x370>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <StartDefaultTask+0x374>)
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	eef0 0a47 	vmov.f32	s1, s14
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f7ff fb7a 	bl	8000e9c <applyLowPassFilterVelocity>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	4b54      	ldr	r3, [pc, #336]	@ (8001900 <StartDefaultTask+0x370>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]
	  theta2_prev = theta2;
 80017b2:	4b51      	ldr	r3, [pc, #324]	@ (80018f8 <StartDefaultTask+0x368>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a51      	ldr	r2, [pc, #324]	@ (80018fc <StartDefaultTask+0x36c>)
 80017b8:	6013      	str	r3, [r2, #0]
	  velocity2_prev = velocity2;
 80017ba:	4b51      	ldr	r3, [pc, #324]	@ (8001900 <StartDefaultTask+0x370>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a51      	ldr	r2, [pc, #324]	@ (8001904 <StartDefaultTask+0x374>)
 80017c0:	6013      	str	r3, [r2, #0]

	  /*********************************************************
	   *        Disturbance Observer for Motor 01             *
	   *********************************************************/
	  // Compute commanded current
	  inertia_term = (Jn1 * Set_Accelaration1) / Ktn1;
 80017c2:	4b52      	ldr	r3, [pc, #328]	@ (800190c <StartDefaultTask+0x37c>)
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	4b51      	ldr	r3, [pc, #324]	@ (8001910 <StartDefaultTask+0x380>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017d2:	4b50      	ldr	r3, [pc, #320]	@ (8001914 <StartDefaultTask+0x384>)
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001918 <StartDefaultTask+0x388>)
 80017de:	edc3 7a00 	vstr	s15, [r3]
	  Icmd1 = inertia_term + Idis1;
 80017e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001918 <StartDefaultTask+0x388>)
 80017e4:	ed93 7a00 	vldr	s14, [r3]
 80017e8:	4b4c      	ldr	r3, [pc, #304]	@ (800191c <StartDefaultTask+0x38c>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001920 <StartDefaultTask+0x390>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]

	  // Torque disturbance calculation
	  motor_torque = Icmd1 * Ktn1;
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <StartDefaultTask+0x390>)
 80017fa:	ed93 7a00 	vldr	s14, [r3]
 80017fe:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <StartDefaultTask+0x384>)
 8001800:	edd3 7a00 	vldr	s15, [r3]
 8001804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001808:	4b46      	ldr	r3, [pc, #280]	@ (8001924 <StartDefaultTask+0x394>)
 800180a:	edc3 7a00 	vstr	s15, [r3]
	  velocity_disturbance = velocity1 * Jn1 * Gdis1;
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <StartDefaultTask+0x35c>)
 8001810:	ed93 7a00 	vldr	s14, [r3]
 8001814:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <StartDefaultTask+0x37c>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181e:	4b42      	ldr	r3, [pc, #264]	@ (8001928 <StartDefaultTask+0x398>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	4b40      	ldr	r3, [pc, #256]	@ (800192c <StartDefaultTask+0x39c>)
 800182a:	edc3 7a00 	vstr	s15, [r3]
	  numerator = (motor_torque + velocity_disturbance) * Gdis1;
 800182e:	4b3d      	ldr	r3, [pc, #244]	@ (8001924 <StartDefaultTask+0x394>)
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	4b3d      	ldr	r3, [pc, #244]	@ (800192c <StartDefaultTask+0x39c>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <StartDefaultTask+0x398>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <StartDefaultTask+0x3a0>)
 800184a:	edc3 7a00 	vstr	s15, [r3]
	  denominator = time_interval + Gdis1;
 800184e:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <StartDefaultTask+0x358>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800185a:	4b33      	ldr	r3, [pc, #204]	@ (8001928 <StartDefaultTask+0x398>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <StartDefaultTask+0x3a4>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
	  velocity_correction = velocity1 * Jn1 * Gdis1;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <StartDefaultTask+0x35c>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b26      	ldr	r3, [pc, #152]	@ (800190c <StartDefaultTask+0x37c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <StartDefaultTask+0x398>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001884:	4b2c      	ldr	r3, [pc, #176]	@ (8001938 <StartDefaultTask+0x3a8>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	  Tdis1 = numerator / denominator - velocity_correction;
 800188a:	4b29      	ldr	r3, [pc, #164]	@ (8001930 <StartDefaultTask+0x3a0>)
 800188c:	edd3 6a00 	vldr	s13, [r3]
 8001890:	4b28      	ldr	r3, [pc, #160]	@ (8001934 <StartDefaultTask+0x3a4>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800189a:	e04f      	b.n	800193c <StartDefaultTask+0x3ac>
 800189c:	f3af 8000 	nop.w
 80018a0:	54442d18 	.word	0x54442d18
 80018a4:	400921fb 	.word	0x400921fb
 80018a8:	200004cc 	.word	0x200004cc
 80018ac:	200003e0 	.word	0x200003e0
 80018b0:	200004e8 	.word	0x200004e8
 80018b4:	200004dc 	.word	0x200004dc
 80018b8:	20001d24 	.word	0x20001d24
 80018bc:	20000394 	.word	0x20000394
 80018c0:	200004d4 	.word	0x200004d4
 80018c4:	2000042c 	.word	0x2000042c
 80018c8:	200004d8 	.word	0x200004d8
 80018cc:	0a7c5ac5 	.word	0x0a7c5ac5
 80018d0:	200004f0 	.word	0x200004f0
 80018d4:	20000018 	.word	0x20000018
 80018d8:	47500000 	.word	0x47500000
 80018dc:	20001d2c 	.word	0x20001d2c
 80018e0:	20001d34 	.word	0x20001d34
 80018e4:	49742400 	.word	0x49742400
 80018e8:	20000004 	.word	0x20000004
 80018ec:	20001d3c 	.word	0x20001d3c
 80018f0:	20001d44 	.word	0x20001d44
 80018f4:	20001d4c 	.word	0x20001d4c
 80018f8:	20001d30 	.word	0x20001d30
 80018fc:	20001d38 	.word	0x20001d38
 8001900:	20001d40 	.word	0x20001d40
 8001904:	20001d48 	.word	0x20001d48
 8001908:	20001d50 	.word	0x20001d50
 800190c:	2000000c 	.word	0x2000000c
 8001910:	20000034 	.word	0x20000034
 8001914:	20000008 	.word	0x20000008
 8001918:	20001d58 	.word	0x20001d58
 800191c:	20001d90 	.word	0x20001d90
 8001920:	20001d54 	.word	0x20001d54
 8001924:	20001d5c 	.word	0x20001d5c
 8001928:	20000010 	.word	0x20000010
 800192c:	20001d60 	.word	0x20001d60
 8001930:	20001d64 	.word	0x20001d64
 8001934:	20001d68 	.word	0x20001d68
 8001938:	20001d6c 	.word	0x20001d6c
 800193c:	4b83      	ldr	r3, [pc, #524]	@ (8001b4c <StartDefaultTask+0x5bc>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001946:	4b82      	ldr	r3, [pc, #520]	@ (8001b50 <StartDefaultTask+0x5c0>)
 8001948:	edc3 7a00 	vstr	s15, [r3]
	  Idis1 = Tdis1 * Kt1;
 800194c:	4b80      	ldr	r3, [pc, #512]	@ (8001b50 <StartDefaultTask+0x5c0>)
 800194e:	ed93 7a00 	vldr	s14, [r3]
 8001952:	4b80      	ldr	r3, [pc, #512]	@ (8001b54 <StartDefaultTask+0x5c4>)
 8001954:	edd3 7a00 	vldr	s15, [r3]
 8001958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800195c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b58 <StartDefaultTask+0x5c8>)
 800195e:	edc3 7a00 	vstr	s15, [r3]

	  /*********************************************************
	   *        Disturbance Observer for Motor 02             *
	   *********************************************************/
	  Icmd2 = inertia_term2 + Idis2;
 8001962:	4b7e      	ldr	r3, [pc, #504]	@ (8001b5c <StartDefaultTask+0x5cc>)
 8001964:	ed93 7a00 	vldr	s14, [r3]
 8001968:	4b7d      	ldr	r3, [pc, #500]	@ (8001b60 <StartDefaultTask+0x5d0>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001972:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <StartDefaultTask+0x5d4>)
 8001974:	edc3 7a00 	vstr	s15, [r3]

	  motor_torque2 = Icmd2 * Ktn2;
 8001978:	4b7a      	ldr	r3, [pc, #488]	@ (8001b64 <StartDefaultTask+0x5d4>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b68 <StartDefaultTask+0x5d8>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	4b78      	ldr	r3, [pc, #480]	@ (8001b6c <StartDefaultTask+0x5dc>)
 800198a:	edc3 7a00 	vstr	s15, [r3]
	  velocity_disturbance2 = velocity2 * Jn2 * Gdis2;
 800198e:	4b78      	ldr	r3, [pc, #480]	@ (8001b70 <StartDefaultTask+0x5e0>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b77      	ldr	r3, [pc, #476]	@ (8001b74 <StartDefaultTask+0x5e4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800199e:	4b76      	ldr	r3, [pc, #472]	@ (8001b78 <StartDefaultTask+0x5e8>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <StartDefaultTask+0x5ec>)
 80019aa:	edc3 7a00 	vstr	s15, [r3]
	  numerator2 = (motor_torque2 + velocity_disturbance2) * Gdis2;
 80019ae:	4b6f      	ldr	r3, [pc, #444]	@ (8001b6c <StartDefaultTask+0x5dc>)
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	4b71      	ldr	r3, [pc, #452]	@ (8001b7c <StartDefaultTask+0x5ec>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019be:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <StartDefaultTask+0x5e8>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <StartDefaultTask+0x5f0>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
	  denominator2 = time_interval + Gdis2;
 80019ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001b84 <StartDefaultTask+0x5f4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019da:	4b67      	ldr	r3, [pc, #412]	@ (8001b78 <StartDefaultTask+0x5e8>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e4:	4b68      	ldr	r3, [pc, #416]	@ (8001b88 <StartDefaultTask+0x5f8>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]
	  velocity_correction2 = velocity2 * Jn2 * Gdis2;
 80019ea:	4b61      	ldr	r3, [pc, #388]	@ (8001b70 <StartDefaultTask+0x5e0>)
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	4b60      	ldr	r3, [pc, #384]	@ (8001b74 <StartDefaultTask+0x5e4>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001b78 <StartDefaultTask+0x5e8>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	4b61      	ldr	r3, [pc, #388]	@ (8001b8c <StartDefaultTask+0x5fc>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
	  Tdis2 = numerator2 / denominator2 - velocity_correction2;
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001b80 <StartDefaultTask+0x5f0>)
 8001a0c:	edd3 6a00 	vldr	s13, [r3]
 8001a10:	4b5d      	ldr	r3, [pc, #372]	@ (8001b88 <StartDefaultTask+0x5f8>)
 8001a12:	edd3 7a00 	vldr	s15, [r3]
 8001a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b8c <StartDefaultTask+0x5fc>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a24:	4b5a      	ldr	r3, [pc, #360]	@ (8001b90 <StartDefaultTask+0x600>)
 8001a26:	edc3 7a00 	vstr	s15, [r3]
	  Idis2 = Tdis2 * Kt2;
 8001a2a:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <StartDefaultTask+0x600>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <StartDefaultTask+0x604>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3a:	4b49      	ldr	r3, [pc, #292]	@ (8001b60 <StartDefaultTask+0x5d0>)
 8001a3c:	edc3 7a00 	vstr	s15, [r3]

	  /*********************************************************
	   *         Motor Output Control & Saturation            *
	   *********************************************************/
	  if (Icmd1 > 4.5) {
 8001a40:	4b55      	ldr	r3, [pc, #340]	@ (8001b98 <StartDefaultTask+0x608>)
 8001a42:	edd3 7a00 	vldr	s15, [r3]
 8001a46:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	dd02      	ble.n	8001a5a <StartDefaultTask+0x4ca>
	      Icmd1 = 4.5;
 8001a54:	4b50      	ldr	r3, [pc, #320]	@ (8001b98 <StartDefaultTask+0x608>)
 8001a56:	4a51      	ldr	r2, [pc, #324]	@ (8001b9c <StartDefaultTask+0x60c>)
 8001a58:	601a      	str	r2, [r3, #0]
	  }
	  ConfigureMotor02(1, 1, Icmd1 * (4000) / 4.5);
 8001a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b98 <StartDefaultTask+0x608>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001ba0 <StartDefaultTask+0x610>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	ee17 0a90 	vmov	r0, s15
 8001a6c:	f7fe fd8c 	bl	8000588 <__aeabi_f2d>
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba4 <StartDefaultTask+0x614>)
 8001a76:	f7fe ff09 	bl	800088c <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe ffeb 	bl	8000a5c <__aeabi_d2uiz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fa4c 	bl	8000f2c <ConfigureMotor02>

	  // Redundant Tdis2 and Idis2 update (if needed)
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2)
 8001a94:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <StartDefaultTask+0x5d4>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b33      	ldr	r3, [pc, #204]	@ (8001b68 <StartDefaultTask+0x5d8>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa4:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <StartDefaultTask+0x5e0>)
 8001aa6:	edd3 6a00 	vldr	s13, [r3]
 8001aaa:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <StartDefaultTask+0x5e4>)
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ab4:	4b30      	ldr	r3, [pc, #192]	@ (8001b78 <StartDefaultTask+0x5e8>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <StartDefaultTask+0x5e8>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001acc:	4b2d      	ldr	r3, [pc, #180]	@ (8001b84 <StartDefaultTask+0x5f4>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad8:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <StartDefaultTask+0x5e8>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	          - velocity2 * Jn2 * Gdis2;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <StartDefaultTask+0x5e0>)
 8001ae8:	edd3 6a00 	vldr	s13, [r3]
 8001aec:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <StartDefaultTask+0x5e4>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af6:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <StartDefaultTask+0x5e8>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee77 7a67 	vsub.f32	s15, s14, s15
	  Tdis2 = (Icmd2 * Ktn2 + velocity2 * Jn2 * Gdis2) * Gdis2 / (time_interval + Gdis2)
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <StartDefaultTask+0x600>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
	  Idis2 = Tdis2 * Kt2;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <StartDefaultTask+0x600>)
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	4b20      	ldr	r3, [pc, #128]	@ (8001b94 <StartDefaultTask+0x604>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <StartDefaultTask+0x5d0>)
 8001b1c:	edc3 7a00 	vstr	s15, [r3]

	  ConfigureMotor01(1, 1, 500);
 8001b20:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001b24:	2101      	movs	r1, #1
 8001b26:	2001      	movs	r0, #1
 8001b28:	f7ff f9dc 	bl	8000ee4 <ConfigureMotor01>

	  /*********************************************************
	   *               Update Time Interval                   *
	   *********************************************************/
	  time_end = __HAL_TIM_GET_COUNTER(&htim2);
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <StartDefaultTask+0x618>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	4a1e      	ldr	r2, [pc, #120]	@ (8001bac <StartDefaultTask+0x61c>)
 8001b34:	6013      	str	r3, [r2, #0]
	  time_interval = time_end - time_start;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	@ (8001bac <StartDefaultTask+0x61c>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bb0 <StartDefaultTask+0x620>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a10      	ldr	r2, [pc, #64]	@ (8001b84 <StartDefaultTask+0x5f4>)
 8001b42:	6013      	str	r3, [r2, #0]

    osDelay(5);
 8001b44:	2005      	movs	r0, #5
 8001b46:	f005 fbab 	bl	80072a0 <osDelay>
	  MainTaskCount++;
 8001b4a:	e525      	b.n	8001598 <StartDefaultTask+0x8>
 8001b4c:	20001d6c 	.word	0x20001d6c
 8001b50:	20001d8c 	.word	0x20001d8c
 8001b54:	20000014 	.word	0x20000014
 8001b58:	20001d90 	.word	0x20001d90
 8001b5c:	20001d70 	.word	0x20001d70
 8001b60:	20001d74 	.word	0x20001d74
 8001b64:	2000001c 	.word	0x2000001c
 8001b68:	20000020 	.word	0x20000020
 8001b6c:	20001d7c 	.word	0x20001d7c
 8001b70:	20001d40 	.word	0x20001d40
 8001b74:	20000024 	.word	0x20000024
 8001b78:	20000028 	.word	0x20000028
 8001b7c:	20001d80 	.word	0x20001d80
 8001b80:	20001d84 	.word	0x20001d84
 8001b84:	20000004 	.word	0x20000004
 8001b88:	20000030 	.word	0x20000030
 8001b8c:	20001d88 	.word	0x20001d88
 8001b90:	20001d78 	.word	0x20001d78
 8001b94:	2000002c 	.word	0x2000002c
 8001b98:	20001d54 	.word	0x20001d54
 8001b9c:	40900000 	.word	0x40900000
 8001ba0:	457a0000 	.word	0x457a0000
 8001ba4:	40120000 	.word	0x40120000
 8001ba8:	200003e0 	.word	0x200003e0
 8001bac:	200004ec 	.word	0x200004ec
 8001bb0:	200004e8 	.word	0x200004e8

08001bb4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b096      	sub	sp, #88	@ 0x58
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	if (SDCardRecordMode==1){
 8001bbc:	4b66      	ldr	r3, [pc, #408]	@ (8001d58 <StartTask02+0x1a4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d15c      	bne.n	8001c7e <StartTask02+0xca>
    SDCardCount++;
 8001bc4:	4b65      	ldr	r3, [pc, #404]	@ (8001d5c <StartTask02+0x1a8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a64      	ldr	r2, [pc, #400]	@ (8001d5c <StartTask02+0x1a8>)
 8001bcc:	6013      	str	r3, [r2, #0]
    if (EncoderUpdated == 1 && communicationError==0) {
 8001bce:	4b64      	ldr	r3, [pc, #400]	@ (8001d60 <StartTask02+0x1ac>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	f040 80b9 	bne.w	8001d4a <StartTask02+0x196>
 8001bd8:	4b62      	ldr	r3, [pc, #392]	@ (8001d64 <StartTask02+0x1b0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f040 80b4 	bne.w	8001d4a <StartTask02+0x196>
        FRESULT fr;
        UINT bytes_written;

        // Open the file for appending
        fr = f_open(&fil, "Data.txt", FA_OPEN_APPEND | FA_WRITE);
 8001be2:	2232      	movs	r2, #50	@ 0x32
 8001be4:	4960      	ldr	r1, [pc, #384]	@ (8001d68 <StartTask02+0x1b4>)
 8001be6:	4861      	ldr	r0, [pc, #388]	@ (8001d6c <StartTask02+0x1b8>)
 8001be8:	f004 fe17 	bl	800681a <f_open>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK) {
 8001bf2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <StartTask02+0x4e>
            // Optional: Handle error (blink LED, set flag, etc.)
        	communicationError=1;
 8001bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d64 <StartTask02+0x1b0>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
            return;
 8001c00:	e0a7      	b.n	8001d52 <StartTask02+0x19e>
        }

        // Format the record number and encoder tick data into a string
        sprintf(buffer, "R%lu: E1: %lu, E2: %lu\n", SDCardCount, encoder_ticks, encoder_ticks2);
 8001c02:	4b56      	ldr	r3, [pc, #344]	@ (8001d5c <StartTask02+0x1a8>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b5a      	ldr	r3, [pc, #360]	@ (8001d70 <StartTask02+0x1bc>)
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001d74 <StartTask02+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	460b      	mov	r3, r1
 8001c12:	4959      	ldr	r1, [pc, #356]	@ (8001d78 <StartTask02+0x1c4>)
 8001c14:	4859      	ldr	r0, [pc, #356]	@ (8001d7c <StartTask02+0x1c8>)
 8001c16:	f007 fd59 	bl	80096cc <siprintf>
        //"R%lu: E1: %lu, E2: %lu\n"
        // Write to the file
        fr = f_write(&fil, buffer, strlen(buffer), &bytes_written);
 8001c1a:	4858      	ldr	r0, [pc, #352]	@ (8001d7c <StartTask02+0x1c8>)
 8001c1c:	f7fe faf8 	bl	8000210 <strlen>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c26:	4955      	ldr	r1, [pc, #340]	@ (8001d7c <StartTask02+0x1c8>)
 8001c28:	4850      	ldr	r0, [pc, #320]	@ (8001d6c <StartTask02+0x1b8>)
 8001c2a:	f004 ffc5 	bl	8006bb8 <f_write>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK || bytes_written == 0) {
 8001c34:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d102      	bne.n	8001c42 <StartTask02+0x8e>
 8001c3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <StartTask02+0x9c>
            f_close(&fil);  // Close anyway if open
 8001c42:	484a      	ldr	r0, [pc, #296]	@ (8001d6c <StartTask02+0x1b8>)
 8001c44:	f005 fa04 	bl	8007050 <f_close>
            communicationError=1;
 8001c48:	4b46      	ldr	r3, [pc, #280]	@ (8001d64 <StartTask02+0x1b0>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
            return;
 8001c4e:	e080      	b.n	8001d52 <StartTask02+0x19e>
        }

        // Close the file
        fr = f_close(&fil);
 8001c50:	4846      	ldr	r0, [pc, #280]	@ (8001d6c <StartTask02+0x1b8>)
 8001c52:	f005 f9fd 	bl	8007050 <f_close>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
        if (fr != FR_OK) {
 8001c5c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <StartTask02+0xb8>
        	communicationError=1;
 8001c64:	4b3f      	ldr	r3, [pc, #252]	@ (8001d64 <StartTask02+0x1b0>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
            return;
 8001c6a:	e072      	b.n	8001d52 <StartTask02+0x19e>
        }

        EncoderUpdated = 0;
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <StartTask02+0x1ac>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
        record_number++;
 8001c72:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <StartTask02+0x1cc>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3301      	adds	r3, #1
 8001c78:	4a41      	ldr	r2, [pc, #260]	@ (8001d80 <StartTask02+0x1cc>)
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e065      	b.n	8001d4a <StartTask02+0x196>
    }
	}
		else {

			RecordTaskCount++;
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <StartTask02+0x1d0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a3f      	ldr	r2, [pc, #252]	@ (8001d84 <StartTask02+0x1d0>)
 8001c86:	6013      	str	r3, [r2, #0]
		    uint8_t txBuf[25];  // 6 floats = 24 bytes + 1 byte for CRC
		    uint8_t rxBuf[25];

		    memcpy(&txBuf[0],  &Icmd1,     sizeof(float));
 8001c88:	4b3f      	ldr	r3, [pc, #252]	@ (8001d88 <StartTask02+0x1d4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
		    memcpy(&txBuf[4],  &Icmd2,     sizeof(float));
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d8c <StartTask02+0x1d8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	62bb      	str	r3, [r7, #40]	@ 0x28
		    memcpy(&txBuf[8],  &velocity1, sizeof(float));
 8001c94:	4b3e      	ldr	r3, [pc, #248]	@ (8001d90 <StartTask02+0x1dc>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
		    memcpy(&txBuf[12], &velocity2, sizeof(float));
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <StartTask02+0x1e0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	633b      	str	r3, [r7, #48]	@ 0x30
		    memcpy(&txBuf[16], &theta1,    sizeof(float));
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <StartTask02+0x1e4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
		    memcpy(&txBuf[20], &theta2,    sizeof(float));
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8001d9c <StartTask02+0x1e8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38

		    // CRC-8 calculation (same polynomial: 0x07)
		    uint8_t crc = 0x00;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		    for (int i = 0; i < 24; i++) {
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cb6:	e02c      	b.n	8001d12 <StartTask02+0x15e>
		        crc ^= txBuf[i];
 8001cb8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cbe:	4413      	add	r3, r2
 8001cc0:	781a      	ldrb	r2, [r3, #0]
 8001cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cc6:	4053      	eors	r3, r2
 8001cc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		        for (uint8_t j = 0; j < 8; j++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001cd2:	e017      	b.n	8001d04 <StartTask02+0x150>
		            crc = (crc & 0x80) ? (crc << 1) ^ 0x07 : (crc << 1);
 8001cd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	da08      	bge.n	8001cee <StartTask02+0x13a>
 8001cdc:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	b25b      	sxtb	r3, r3
 8001ce4:	f083 0307 	eor.w	r3, r3, #7
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	e003      	b.n	8001cf6 <StartTask02+0x142>
 8001cee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		        for (uint8_t j = 0; j < 8; j++) {
 8001cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001d04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001d08:	2b07      	cmp	r3, #7
 8001d0a:	d9e3      	bls.n	8001cd4 <StartTask02+0x120>
		    for (int i = 0; i < 24; i++) {
 8001d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d0e:	3301      	adds	r3, #1
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d14:	2b17      	cmp	r3, #23
 8001d16:	ddcf      	ble.n	8001cb8 <StartTask02+0x104>
		        }
		    }

		    txBuf[24] = crc;  // Add CRC to the last byte
 8001d18:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001d1c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

		    // SPI Transaction
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);  // CS LOW
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	481e      	ldr	r0, [pc, #120]	@ (8001da0 <StartTask02+0x1ec>)
 8001d26:	f000 ff29 	bl	8002b7c <HAL_GPIO_WritePin>
		    HAL_SPI_TransmitReceive(&hspi4, txBuf, rxBuf, sizeof(txBuf), HAL_MAX_DELAY);
 8001d2a:	f107 0208 	add.w	r2, r7, #8
 8001d2e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2319      	movs	r3, #25
 8001d3a:	481a      	ldr	r0, [pc, #104]	@ (8001da4 <StartTask02+0x1f0>)
 8001d3c:	f001 fc8b 	bl	8003656 <HAL_SPI_TransmitReceive>
		    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);    // CS HIGH
 8001d40:	2201      	movs	r2, #1
 8001d42:	2101      	movs	r1, #1
 8001d44:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <StartTask02+0x1ec>)
 8001d46:	f000 ff19 	bl	8002b7c <HAL_GPIO_WritePin>

		}

    osDelay(5);
 8001d4a:	2005      	movs	r0, #5
 8001d4c:	f005 faa8 	bl	80072a0 <osDelay>
	if (SDCardRecordMode==1){
 8001d50:	e734      	b.n	8001bbc <StartTask02+0x8>
  }
  /* USER CODE END StartTask02 */
}
 8001d52:	3750      	adds	r7, #80	@ 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20001d28 	.word	0x20001d28
 8001d5c:	200004e0 	.word	0x200004e0
 8001d60:	20001d24 	.word	0x20001d24
 8001d64:	200004e4 	.word	0x200004e4
 8001d68:	0800a074 	.word	0x0800a074
 8001d6c:	200004f4 	.word	0x200004f4
 8001d70:	200004d4 	.word	0x200004d4
 8001d74:	200004d8 	.word	0x200004d8
 8001d78:	0800a080 	.word	0x0800a080
 8001d7c:	20001524 	.word	0x20001524
 8001d80:	20000000 	.word	0x20000000
 8001d84:	200004d0 	.word	0x200004d0
 8001d88:	20001d54 	.word	0x20001d54
 8001d8c:	2000001c 	.word	0x2000001c
 8001d90:	20001d3c 	.word	0x20001d3c
 8001d94:	20001d40 	.word	0x20001d40
 8001d98:	20001d2c 	.word	0x20001d2c
 8001d9c:	20001d30 	.word	0x20001d30
 8001da0:	40020400 	.word	0x40020400
 8001da4:	20000330 	.word	0x20000330

08001da8 <MPU_Config>:

 /* MPU Configuration */

void MPU_Config(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001dba:	f000 fbbf 	bl	800253c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001dca:	231f      	movs	r3, #31
 8001dcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001dce:	2387      	movs	r3, #135	@ 0x87
 8001dd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001dea:	463b      	mov	r3, r7
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fbdd 	bl	80025ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001df2:	2004      	movs	r0, #4
 8001df4:	f000 fbba 	bl	800256c <HAL_MPU_Enable>

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001e12:	f000 fa91 	bl	8002338 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40000c00 	.word	0x40000c00

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <Error_Handler+0x8>

08001e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	4a10      	ldr	r2, [pc, #64]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e42:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5a:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	210f      	movs	r1, #15
 8001e6a:	f06f 0001 	mvn.w	r0, #1
 8001e6e:	f000 fb3b 	bl	80024e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a15      	ldr	r2, [pc, #84]	@ (8001ef4 <HAL_DAC_MspInit+0x74>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d123      	bne.n	8001eea <HAL_DAC_MspInit+0x6a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001ea2:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001ea8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef8 <HAL_DAC_MspInit+0x78>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ed2:	2330      	movs	r3, #48	@ 0x30
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	@ (8001efc <HAL_DAC_MspInit+0x7c>)
 8001ee6:	f000 fc9d 	bl	8002824 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8001eea:	bf00      	nop
 8001eec:	3728      	adds	r7, #40	@ 0x28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40007400 	.word	0x40007400
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020000 	.word	0x40020000

08001f00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	@ 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	@ (8001f7c <HAL_SPI_MspInit+0x7c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d127      	bne.n	8001f72 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f22:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	4a16      	ldr	r2, [pc, #88]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2e:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <HAL_SPI_MspInit+0x80>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001f52:	2364      	movs	r3, #100	@ 0x64
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f56:	2302      	movs	r3, #2
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f62:	2305      	movs	r3, #5
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f66:	f107 0314 	add.w	r3, r7, #20
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4805      	ldr	r0, [pc, #20]	@ (8001f84 <HAL_SPI_MspInit+0x84>)
 8001f6e:	f000 fc59 	bl	8002824 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40013400 	.word	0x40013400
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a2f      	ldr	r2, [pc, #188]	@ (8002064 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d129      	bne.n	8001ffe <HAL_TIM_Encoder_MspInit+0x76>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001faa:	4b2f      	ldr	r3, [pc, #188]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	4a2e      	ldr	r2, [pc, #184]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b26      	ldr	r3, [pc, #152]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001fda:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	481d      	ldr	r0, [pc, #116]	@ (800206c <HAL_TIM_Encoder_MspInit+0xe4>)
 8001ff8:	f000 fc14 	bl	8002824 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ffc:	e02d      	b.n	800205a <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d128      	bne.n	800205a <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002008:	4b17      	ldr	r3, [pc, #92]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 800200e:	f043 0304 	orr.w	r3, r3, #4
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002024:	4a10      	ldr	r2, [pc, #64]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002026:	f043 0308 	orr.w	r3, r3, #8
 800202a:	6313      	str	r3, [r2, #48]	@ 0x30
 800202c:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_TIM_Encoder_MspInit+0xe0>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002038:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800204a:	2302      	movs	r3, #2
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204e:	f107 031c 	add.w	r3, r7, #28
 8002052:	4619      	mov	r1, r3
 8002054:	4807      	ldr	r0, [pc, #28]	@ (8002074 <HAL_TIM_Encoder_MspInit+0xec>)
 8002056:	f000 fbe5 	bl	8002824 <HAL_GPIO_Init>
}
 800205a:	bf00      	nop
 800205c:	3730      	adds	r7, #48	@ 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	40023800 	.word	0x40023800
 800206c:	40021000 	.word	0x40021000
 8002070:	40000800 	.word	0x40000800
 8002074:	40020c00 	.word	0x40020c00

08002078 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002088:	d10c      	bne.n	80020a4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208e:	4a14      	ldr	r2, [pc, #80]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6413      	str	r3, [r2, #64]	@ 0x40
 8002096:	4b12      	ldr	r3, [pc, #72]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80020a2:	e018      	b.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM13)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <HAL_TIM_Base_MspInit+0x6c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d113      	bne.n	80020d6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <HAL_TIM_Base_MspInit+0x68>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2105      	movs	r1, #5
 80020ca:	202c      	movs	r0, #44	@ 0x2c
 80020cc:	f000 fa0c 	bl	80024e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80020d0:	202c      	movs	r0, #44	@ 0x2c
 80020d2:	f000 fa25 	bl	8002520 <HAL_NVIC_EnableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40001c00 	.word	0x40001c00

080020e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b08e      	sub	sp, #56	@ 0x38
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80020f8:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_InitTick+0xe0>)
 80020fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fc:	4a32      	ldr	r2, [pc, #200]	@ (80021c8 <HAL_InitTick+0xe0>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6413      	str	r3, [r2, #64]	@ 0x40
 8002104:	4b30      	ldr	r3, [pc, #192]	@ (80021c8 <HAL_InitTick+0xe0>)
 8002106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002110:	f107 0210 	add.w	r2, r7, #16
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f001 f9be 	bl	800349c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002120:	6a3b      	ldr	r3, [r7, #32]
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800212a:	f001 f9a3 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 800212e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002130:	e004      	b.n	800213c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002132:	f001 f99f 	bl	8003474 <HAL_RCC_GetPCLK1Freq>
 8002136:	4603      	mov	r3, r0
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800213c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800213e:	4a23      	ldr	r2, [pc, #140]	@ (80021cc <HAL_InitTick+0xe4>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	0c9b      	lsrs	r3, r3, #18
 8002146:	3b01      	subs	r3, #1
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_InitTick+0xe8>)
 800214c:	4a21      	ldr	r2, [pc, #132]	@ (80021d4 <HAL_InitTick+0xec>)
 800214e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002150:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_InitTick+0xe8>)
 8002152:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002156:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002158:	4a1d      	ldr	r2, [pc, #116]	@ (80021d0 <HAL_InitTick+0xe8>)
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_InitTick+0xe8>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_InitTick+0xe8>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_InitTick+0xe8>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002170:	4817      	ldr	r0, [pc, #92]	@ (80021d0 <HAL_InitTick+0xe8>)
 8002172:	f001 fe1b 	bl	8003dac <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800217c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002180:	2b00      	cmp	r3, #0
 8002182:	d11b      	bne.n	80021bc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002184:	4812      	ldr	r0, [pc, #72]	@ (80021d0 <HAL_InitTick+0xe8>)
 8002186:	f001 fed9 	bl	8003f3c <HAL_TIM_Base_Start_IT>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002190:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002194:	2b00      	cmp	r3, #0
 8002196:	d111      	bne.n	80021bc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002198:	2032      	movs	r0, #50	@ 0x32
 800219a:	f000 f9c1 	bl	8002520 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d808      	bhi.n	80021b6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80021a4:	2200      	movs	r2, #0
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	2032      	movs	r0, #50	@ 0x32
 80021aa:	f000 f99d 	bl	80024e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ae:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_InitTick+0xf0>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e002      	b.n	80021bc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80021bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3738      	adds	r7, #56	@ 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	431bde83 	.word	0x431bde83
 80021d0:	20001d94 	.word	0x20001d94
 80021d4:	40000c00 	.word	0x40000c00
 80021d8:	2000003c 	.word	0x2000003c

080021dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021e0:	bf00      	nop
 80021e2:	e7fd      	b.n	80021e0 <NMI_Handler+0x4>

080021e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <HardFault_Handler+0x4>

080021ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <MemManage_Handler+0x4>

080021f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <BusFault_Handler+0x4>

080021fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <UsageFault_Handler+0x4>

08002204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002218:	4802      	ldr	r0, [pc, #8]	@ (8002224 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800221a:	f002 f83b 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000478 	.word	0x20000478

08002228 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <TIM5_IRQHandler+0x10>)
 800222e:	f002 f831 	bl	8004294 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20001d94 	.word	0x20001d94

0800223c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800226c:	f007 fa58 	bl	8009720 <__errno>
 8002270:	4603      	mov	r3, r0
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20050000 	.word	0x20050000
 800229c:	00000400 	.word	0x00000400
 80022a0:	20001de0 	.word	0x20001de0
 80022a4:	20005cb8 	.word	0x20005cb8

080022a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002304 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	@ (800230c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80022fa:	f007 fa17 	bl	800972c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7fe fe39 	bl	8000f74 <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8002310:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 8002314:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8002318:	20005cb8 	.word	0x20005cb8

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>

0800231e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002322:	2003      	movs	r0, #3
 8002324:	f000 f8d5 	bl	80024d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002328:	200f      	movs	r0, #15
 800232a:	f7ff fedd 	bl	80020e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232e:	f7ff fd7f 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_IncTick+0x20>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <HAL_IncTick+0x24>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4413      	add	r3, r2
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_IncTick+0x24>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000040 	.word	0x20000040
 800235c:	20001de4 	.word	0x20001de4

08002360 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return uwTick;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_GetTick+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20001de4 	.word	0x20001de4

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	@ (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	@ (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	@ (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	@ (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	@ (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	@ 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ff4c 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024fa:	f7ff ff61 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 80024fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f7ff ffb1 	bl	800246c <NVIC_EncodePriority>
 800250a:	4602      	mov	r2, r0
 800250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff80 	bl	8002418 <__NVIC_SetPriority>
}
 8002518:	bf00      	nop
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff ff54 	bl	80023dc <__NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002540:	f3bf 8f5f 	dmb	sy
}
 8002544:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002546:	4b07      	ldr	r3, [pc, #28]	@ (8002564 <HAL_MPU_Disable+0x28>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	4a06      	ldr	r2, [pc, #24]	@ (8002564 <HAL_MPU_Disable+0x28>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_MPU_Disable+0x2c>)
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00
 8002568:	e000ed90 	.word	0xe000ed90

0800256c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002574:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <HAL_MPU_Enable+0x38>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_MPU_Enable+0x3c>)
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	4a09      	ldr	r2, [pc, #36]	@ (80025a8 <HAL_MPU_Enable+0x3c>)
 8002584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002588:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800258a:	f3bf 8f4f 	dsb	sy
}
 800258e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002590:	f3bf 8f6f 	isb	sy
}
 8002594:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000ed90 	.word	0xe000ed90
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	785a      	ldrb	r2, [r3, #1]
 80025b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002628 <HAL_MPU_ConfigRegion+0x7c>)
 80025ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002628 <HAL_MPU_ConfigRegion+0x7c>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a19      	ldr	r2, [pc, #100]	@ (8002628 <HAL_MPU_ConfigRegion+0x7c>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025c8:	4a17      	ldr	r2, [pc, #92]	@ (8002628 <HAL_MPU_ConfigRegion+0x7c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7b1b      	ldrb	r3, [r3, #12]
 80025d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7adb      	ldrb	r3, [r3, #11]
 80025da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7a9b      	ldrb	r3, [r3, #10]
 80025e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7b5b      	ldrb	r3, [r3, #13]
 80025ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80025ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	7b9b      	ldrb	r3, [r3, #14]
 80025f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80025f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7bdb      	ldrb	r3, [r3, #15]
 80025fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80025fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7a5b      	ldrb	r3, [r3, #9]
 8002602:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002604:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	7a1b      	ldrb	r3, [r3, #8]
 800260a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800260c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	7812      	ldrb	r2, [r2, #0]
 8002612:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002614:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002616:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002618:	6113      	str	r3, [r2, #16]
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ed90 	.word	0xe000ed90

0800262c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e014      	b.n	8002668 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	791b      	ldrb	r3, [r3, #4]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fc16 	bl	8001e80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e046      	b.n	8002712 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	795b      	ldrb	r3, [r3, #5]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d101      	bne.n	8002690 <HAL_DAC_Start+0x20>
 800268c:	2302      	movs	r3, #2
 800268e:	e040      	b.n	8002712 <HAL_DAC_Start+0xa2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10f      	bne.n	80026da <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80026c4:	2b3c      	cmp	r3, #60	@ 0x3c
 80026c6:	d11d      	bne.n	8002704 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e014      	b.n	8002704 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	213c      	movs	r1, #60	@ 0x3c
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d107      	bne.n	8002704 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0202 	orr.w	r2, r2, #2
 8002702:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e015      	b.n	8002766 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4413      	add	r3, r2
 800274c:	3308      	adds	r3, #8
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	e004      	b.n	800275c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	3314      	adds	r3, #20
 800275a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	461a      	mov	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002772:	b480      	push	{r7}
 8002774:	b089      	sub	sp, #36	@ 0x24
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_DAC_ConfigChannel+0x1c>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e042      	b.n	8002818 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	795b      	ldrb	r3, [r3, #5]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_DAC_ConfigChannel+0x2c>
 800279a:	2302      	movs	r3, #2
 800279c:	e03c      	b.n	8002818 <HAL_DAC_ConfigChannel+0xa6>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2201      	movs	r2, #1
 80027a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2202      	movs	r2, #2
 80027a8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	22c0      	movs	r2, #192	@ 0xc0
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43da      	mvns	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	400a      	ands	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2201      	movs	r2, #1
 800280e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002816:	7ffb      	ldrb	r3, [r7, #31]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3724      	adds	r7, #36	@ 0x24
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002824:	b480      	push	{r7}
 8002826:	b089      	sub	sp, #36	@ 0x24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e175      	b.n	8002b30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002844:	2201      	movs	r2, #1
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4013      	ands	r3, r2
 8002856:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	f040 8164 	bne.w	8002b2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f003 0303 	and.w	r3, r3, #3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d005      	beq.n	800287a <HAL_GPIO_Init+0x56>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d017      	beq.n	8002918 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d123      	bne.n	800296c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	08da      	lsrs	r2, r3, #3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3208      	adds	r2, #8
 800292c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	220f      	movs	r2, #15
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	08da      	lsrs	r2, r3, #3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	3208      	adds	r2, #8
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 0203 	and.w	r2, r3, #3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80be 	beq.w	8002b2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ae:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_GPIO_Init+0x324>)
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_GPIO_Init+0x324>)
 80029b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ba:	4b63      	ldr	r3, [pc, #396]	@ (8002b48 <HAL_GPIO_Init+0x324>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029c6:	4a61      	ldr	r2, [pc, #388]	@ (8002b4c <HAL_GPIO_Init+0x328>)
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	3302      	adds	r3, #2
 80029ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	220f      	movs	r2, #15
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a58      	ldr	r2, [pc, #352]	@ (8002b50 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d037      	beq.n	8002a62 <HAL_GPIO_Init+0x23e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a57      	ldr	r2, [pc, #348]	@ (8002b54 <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_GPIO_Init+0x23a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a56      	ldr	r2, [pc, #344]	@ (8002b58 <HAL_GPIO_Init+0x334>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02b      	beq.n	8002a5a <HAL_GPIO_Init+0x236>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a55      	ldr	r2, [pc, #340]	@ (8002b5c <HAL_GPIO_Init+0x338>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d025      	beq.n	8002a56 <HAL_GPIO_Init+0x232>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a54      	ldr	r2, [pc, #336]	@ (8002b60 <HAL_GPIO_Init+0x33c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01f      	beq.n	8002a52 <HAL_GPIO_Init+0x22e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a53      	ldr	r2, [pc, #332]	@ (8002b64 <HAL_GPIO_Init+0x340>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d019      	beq.n	8002a4e <HAL_GPIO_Init+0x22a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a52      	ldr	r2, [pc, #328]	@ (8002b68 <HAL_GPIO_Init+0x344>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_GPIO_Init+0x226>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a51      	ldr	r2, [pc, #324]	@ (8002b6c <HAL_GPIO_Init+0x348>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00d      	beq.n	8002a46 <HAL_GPIO_Init+0x222>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a50      	ldr	r2, [pc, #320]	@ (8002b70 <HAL_GPIO_Init+0x34c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <HAL_GPIO_Init+0x21e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4f      	ldr	r2, [pc, #316]	@ (8002b74 <HAL_GPIO_Init+0x350>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d101      	bne.n	8002a3e <HAL_GPIO_Init+0x21a>
 8002a3a:	2309      	movs	r3, #9
 8002a3c:	e012      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a3e:	230a      	movs	r3, #10
 8002a40:	e010      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a42:	2308      	movs	r3, #8
 8002a44:	e00e      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a46:	2307      	movs	r3, #7
 8002a48:	e00c      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e00a      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a4e:	2305      	movs	r3, #5
 8002a50:	e008      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a52:	2304      	movs	r3, #4
 8002a54:	e006      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a56:	2303      	movs	r3, #3
 8002a58:	e004      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e002      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_GPIO_Init+0x240>
 8002a62:	2300      	movs	r3, #0
 8002a64:	69fa      	ldr	r2, [r7, #28]
 8002a66:	f002 0203 	and.w	r2, r2, #3
 8002a6a:	0092      	lsls	r2, r2, #2
 8002a6c:	4093      	lsls	r3, r2
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a74:	4935      	ldr	r1, [pc, #212]	@ (8002b4c <HAL_GPIO_Init+0x328>)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	089b      	lsrs	r3, r3, #2
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a82:	4b3d      	ldr	r3, [pc, #244]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aa6:	4a34      	ldr	r2, [pc, #208]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aac:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ad0:	4a29      	ldr	r2, [pc, #164]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ad6:	4b28      	ldr	r3, [pc, #160]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002afa:	4a1f      	ldr	r2, [pc, #124]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b24:	4a14      	ldr	r2, [pc, #80]	@ (8002b78 <HAL_GPIO_Init+0x354>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b0f      	cmp	r3, #15
 8002b34:	f67f ae86 	bls.w	8002844 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	@ 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40013800 	.word	0x40013800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400
 8002b58:	40020800 	.word	0x40020800
 8002b5c:	40020c00 	.word	0x40020c00
 8002b60:	40021000 	.word	0x40021000
 8002b64:	40021400 	.word	0x40021400
 8002b68:	40021800 	.word	0x40021800
 8002b6c:	40021c00 	.word	0x40021c00
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40022400 	.word	0x40022400
 8002b78:	40013c00 	.word	0x40013c00

08002b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	807b      	strh	r3, [r7, #2]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b8c:	787b      	ldrb	r3, [r7, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b98:	e003      	b.n	8002ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b9a:	887b      	ldrh	r3, [r7, #2]
 8002b9c:	041a      	lsls	r2, r3, #16
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e291      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 8087 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bd4:	4b96      	ldr	r3, [pc, #600]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00c      	beq.n	8002bfa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be0:	4b93      	ldr	r3, [pc, #588]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d112      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62>
 8002bec:	4b90      	ldr	r3, [pc, #576]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d06c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x130>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d168      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e26b      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x7a>
 8002c1c:	4b84      	ldr	r3, [pc, #528]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a83      	ldr	r2, [pc, #524]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	e02e      	b.n	8002c88 <HAL_RCC_OscConfig+0xd8>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x9c>
 8002c32:	4b7f      	ldr	r3, [pc, #508]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7e      	ldr	r2, [pc, #504]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7b      	ldr	r2, [pc, #492]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	e01d      	b.n	8002c88 <HAL_RCC_OscConfig+0xd8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c54:	d10c      	bne.n	8002c70 <HAL_RCC_OscConfig+0xc0>
 8002c56:	4b76      	ldr	r3, [pc, #472]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a75      	ldr	r2, [pc, #468]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	4b73      	ldr	r3, [pc, #460]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a72      	ldr	r2, [pc, #456]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e00b      	b.n	8002c88 <HAL_RCC_OscConfig+0xd8>
 8002c70:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6b      	ldr	r2, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7ff fb66 	bl	8002360 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7ff fb62 	bl	8002360 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	@ 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e21f      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002caa:	4b61      	ldr	r3, [pc, #388]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0xe8>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7ff fb52 	bl	8002360 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7ff fb4e 	bl	8002360 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e20b      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd2:	4b57      	ldr	r3, [pc, #348]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x110>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d069      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cee:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00b      	beq.n	8002d12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 030c 	and.w	r3, r3, #12
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d11c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x190>
 8002d06:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	4b47      	ldr	r3, [pc, #284]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d001      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e1df      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d2a:	4b41      	ldr	r3, [pc, #260]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	493d      	ldr	r1, [pc, #244]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3e:	e040      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d48:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7ff fb04 	bl	8002360 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d5c:	f7ff fb00 	bl	8002360 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e1bd      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6e:	4b30      	ldr	r3, [pc, #192]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4929      	ldr	r1, [pc, #164]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]
 8002d8e:	e018      	b.n	8002dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d90:	4b27      	ldr	r3, [pc, #156]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a26      	ldr	r2, [pc, #152]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002d96:	f023 0301 	bic.w	r3, r3, #1
 8002d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9c:	f7ff fae0 	bl	8002360 <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	e008      	b.n	8002db6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da4:	f7ff fadc 	bl	8002360 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e199      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d038      	beq.n	8002e40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d019      	beq.n	8002e0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dd6:	4b16      	ldr	r3, [pc, #88]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dda:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7ff fabd 	bl	8002360 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dea:	f7ff fab9 	bl	8002360 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e176      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x23a>
 8002e08:	e01a      	b.n	8002e40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0e:	4a08      	ldr	r2, [pc, #32]	@ (8002e30 <HAL_RCC_OscConfig+0x280>)
 8002e10:	f023 0301 	bic.w	r3, r3, #1
 8002e14:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7ff faa3 	bl	8002360 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7ff fa9f 	bl	8002360 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d903      	bls.n	8002e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e15c      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
 8002e30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b91      	ldr	r3, [pc, #580]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1ee      	bne.n	8002e1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a4 	beq.w	8002f96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b88      	ldr	r3, [pc, #544]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5e:	4a87      	ldr	r2, [pc, #540]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e66:	4b85      	ldr	r3, [pc, #532]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6e:	60bb      	str	r3, [r7, #8]
 8002e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e76:	4b82      	ldr	r3, [pc, #520]	@ (8003080 <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d118      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e82:	4b7f      	ldr	r3, [pc, #508]	@ (8003080 <HAL_RCC_OscConfig+0x4d0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7e      	ldr	r2, [pc, #504]	@ (8003080 <HAL_RCC_OscConfig+0x4d0>)
 8002e88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff fa67 	bl	8002360 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e96:	f7ff fa63 	bl	8002360 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b64      	cmp	r3, #100	@ 0x64
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e120      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea8:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x31a>
 8002ebc:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec8:	e02d      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCC_OscConfig+0x33c>
 8002ed2:	4b6a      	ldr	r3, [pc, #424]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed6:	4a69      	ldr	r2, [pc, #420]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ede:	4b67      	ldr	r3, [pc, #412]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee2:	4a66      	ldr	r2, [pc, #408]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ee4:	f023 0304 	bic.w	r3, r3, #4
 8002ee8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eea:	e01c      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b05      	cmp	r3, #5
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCC_OscConfig+0x35e>
 8002ef4:	4b61      	ldr	r3, [pc, #388]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef8:	4a60      	ldr	r2, [pc, #384]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002efa:	f043 0304 	orr.w	r3, r3, #4
 8002efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f00:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f04:	4a5d      	ldr	r2, [pc, #372]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0x376>
 8002f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f12:	4a5a      	ldr	r2, [pc, #360]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f1a:	4b58      	ldr	r3, [pc, #352]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	4a57      	ldr	r2, [pc, #348]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d015      	beq.n	8002f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2e:	f7ff fa17 	bl	8002360 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7ff fa13 	bl	8002360 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0ce      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0ee      	beq.n	8002f36 <HAL_RCC_OscConfig+0x386>
 8002f58:	e014      	b.n	8002f84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5a:	f7ff fa01 	bl	8002360 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	e00a      	b.n	8002f78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7ff f9fd 	bl	8002360 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e0b8      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f78:	4b40      	ldr	r3, [pc, #256]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ee      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f84:	7dfb      	ldrb	r3, [r7, #23]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002f90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f94:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a4 	beq.w	80030e8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fa0:	4b36      	ldr	r3, [pc, #216]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 030c 	and.w	r3, r3, #12
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d06b      	beq.n	8003084 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d149      	bne.n	8003048 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb4:	4b31      	ldr	r3, [pc, #196]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a30      	ldr	r2, [pc, #192]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7ff f9ce 	bl	8002360 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff f9ca 	bl	8002360 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e087      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fda:	4b28      	ldr	r3, [pc, #160]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f0      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	019b      	lsls	r3, r3, #6
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	3b01      	subs	r3, #1
 8003000:	041b      	lsls	r3, r3, #16
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4313      	orrs	r3, r2
 800300c:	4a1b      	ldr	r2, [pc, #108]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 800300e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003012:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003014:	4b19      	ldr	r3, [pc, #100]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a18      	ldr	r2, [pc, #96]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7ff f99e 	bl	8002360 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003028:	f7ff f99a 	bl	8002360 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e057      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800303a:	4b10      	ldr	r3, [pc, #64]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x478>
 8003046:	e04f      	b.n	80030e8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003048:	4b0c      	ldr	r3, [pc, #48]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0b      	ldr	r2, [pc, #44]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 800304e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003054:	f7ff f984 	bl	8002360 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305c:	f7ff f980 	bl	8002360 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e03d      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b03      	ldr	r3, [pc, #12]	@ (800307c <HAL_RCC_OscConfig+0x4cc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x4ac>
 800307a:	e035      	b.n	80030e8 <HAL_RCC_OscConfig+0x538>
 800307c:	40023800 	.word	0x40023800
 8003080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003084:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_RCC_OscConfig+0x544>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d028      	beq.n	80030e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800309c:	429a      	cmp	r2, r3
 800309e:	d121      	bne.n	80030e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030b4:	4013      	ands	r3, r2
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	4293      	cmp	r3, r2
 80030be:	d111      	bne.n	80030e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	3b01      	subs	r3, #1
 80030ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4965      	ldr	r1, [pc, #404]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7ff f8b8 	bl	8002360 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7ff f8b4 	bl	8002360 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4922      	ldr	r1, [pc, #136]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	@ (80032c4 <HAL_RCC_ClockConfig+0x1cc>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	@ (80032c8 <HAL_RCC_ClockConfig+0x1d0>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_ClockConfig+0x1d4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe ff1c 	bl	80020e8 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	0800a0e4 	.word	0x0800a0e4
 80032c8:	20000038 	.word	0x20000038
 80032cc:	2000003c 	.word	0x2000003c

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b090      	sub	sp, #64	@ 0x40
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	637b      	str	r3, [r7, #52]	@ 0x34
 80032dc:	2300      	movs	r3, #0
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80a1 	bhi.w	800343c <HAL_RCC_GetSysClockFreq+0x16c>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e09b      	b.n	800343c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x184>)
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003308:	e09b      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800330e:	e098      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b4f      	ldr	r3, [pc, #316]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003318:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800331a:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d028      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b4a      	ldr	r3, [pc, #296]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	623b      	str	r3, [r7, #32]
 8003330:	627a      	str	r2, [r7, #36]	@ 0x24
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003338:	2100      	movs	r1, #0
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800333c:	fb03 f201 	mul.w	r2, r3, r1
 8003340:	2300      	movs	r3, #0
 8003342:	fb00 f303 	mul.w	r3, r0, r3
 8003346:	4413      	add	r3, r2
 8003348:	4a43      	ldr	r2, [pc, #268]	@ (8003458 <HAL_RCC_GetSysClockFreq+0x188>)
 800334a:	fba0 1202 	umull	r1, r2, r0, r2
 800334e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003350:	460a      	mov	r2, r1
 8003352:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003356:	4413      	add	r3, r2
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	2200      	movs	r2, #0
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	61fa      	str	r2, [r7, #28]
 8003362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800336a:	f7fd fbe7 	bl	8000b3c <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4613      	mov	r3, r2
 8003374:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003376:	e053      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b35      	ldr	r3, [pc, #212]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	2200      	movs	r2, #0
 8003380:	613b      	str	r3, [r7, #16]
 8003382:	617a      	str	r2, [r7, #20]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800338a:	f04f 0b00 	mov.w	fp, #0
 800338e:	4652      	mov	r2, sl
 8003390:	465b      	mov	r3, fp
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	f04f 0100 	mov.w	r1, #0
 800339a:	0159      	lsls	r1, r3, #5
 800339c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a0:	0150      	lsls	r0, r2, #5
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	ebb2 080a 	subs.w	r8, r2, sl
 80033aa:	eb63 090b 	sbc.w	r9, r3, fp
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033c2:	ebb2 0408 	subs.w	r4, r2, r8
 80033c6:	eb63 0509 	sbc.w	r5, r3, r9
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	00eb      	lsls	r3, r5, #3
 80033d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d8:	00e2      	lsls	r2, r4, #3
 80033da:	4614      	mov	r4, r2
 80033dc:	461d      	mov	r5, r3
 80033de:	eb14 030a 	adds.w	r3, r4, sl
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	eb45 030b 	adc.w	r3, r5, fp
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f6:	4629      	mov	r1, r5
 80033f8:	028b      	lsls	r3, r1, #10
 80033fa:	4621      	mov	r1, r4
 80033fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003400:	4621      	mov	r1, r4
 8003402:	028a      	lsls	r2, r1, #10
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	2200      	movs	r2, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	60fa      	str	r2, [r7, #12]
 8003410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003414:	f7fd fb92 	bl	8000b3c <__aeabi_uldivmod>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4613      	mov	r3, r2
 800341e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_GetSysClockFreq+0x180>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	3301      	adds	r3, #1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	fbb2 f3f3 	udiv	r3, r2, r3
 8003438:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800343a:	e002      	b.n	8003442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800343c:	4b05      	ldr	r3, [pc, #20]	@ (8003454 <HAL_RCC_GetSysClockFreq+0x184>)
 800343e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003444:	4618      	mov	r0, r3
 8003446:	3740      	adds	r7, #64	@ 0x40
 8003448:	46bd      	mov	sp, r7
 800344a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	00f42400 	.word	0x00f42400
 8003458:	017d7840 	.word	0x017d7840

0800345c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003460:	4b03      	ldr	r3, [pc, #12]	@ (8003470 <HAL_RCC_GetHCLKFreq+0x14>)
 8003462:	681b      	ldr	r3, [r3, #0]
}
 8003464:	4618      	mov	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	20000038 	.word	0x20000038

08003474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003478:	f7ff fff0 	bl	800345c <HAL_RCC_GetHCLKFreq>
 800347c:	4602      	mov	r2, r0
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	0a9b      	lsrs	r3, r3, #10
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	4903      	ldr	r1, [pc, #12]	@ (8003498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800348a:	5ccb      	ldrb	r3, [r1, r3]
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	0800a0f4 	.word	0x0800a0f4

0800349c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	220f      	movs	r2, #15
 80034aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ac:	4b12      	ldr	r3, [pc, #72]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0203 	and.w	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034b8:	4b0f      	ldr	r3, [pc, #60]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c4:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80034d0:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	08db      	lsrs	r3, r3, #3
 80034d6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034de:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <HAL_RCC_GetClockConfig+0x60>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 020f 	and.w	r2, r3, #15
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e09d      	b.n	800364e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	2b00      	cmp	r3, #0
 8003518:	d108      	bne.n	800352c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003522:	d009      	beq.n	8003538 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	61da      	str	r2, [r3, #28]
 800352a:	e005      	b.n	8003538 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fe fcd4 	bl	8001f00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800356e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003578:	d902      	bls.n	8003580 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e002      	b.n	8003586 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003580:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003584:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800358e:	d007      	beq.n	80035a0 <HAL_SPI_Init+0xa0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003598:	d002      	beq.n	80035a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e2:	ea42 0103 	orr.w	r1, r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	0c1b      	lsrs	r3, r3, #16
 80035fc:	f003 0204 	and.w	r2, r3, #4
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800361c:	ea42 0103 	orr.w	r1, r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003664:	2301      	movs	r3, #1
 8003666:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003674:	2b01      	cmp	r3, #1
 8003676:	d101      	bne.n	800367c <HAL_SPI_TransmitReceive+0x26>
 8003678:	2302      	movs	r3, #2
 800367a:	e20a      	b.n	8003a92 <HAL_SPI_TransmitReceive+0x43c>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003684:	f7fe fe6c 	bl	8002360 <HAL_GetTick>
 8003688:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003690:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800369c:	887b      	ldrh	r3, [r7, #2]
 800369e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036a0:	7efb      	ldrb	r3, [r7, #27]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d00e      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x6e>
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036ac:	d106      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_SPI_TransmitReceive+0x66>
 80036b6:	7efb      	ldrb	r3, [r7, #27]
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d003      	beq.n	80036c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80036c2:	e1e0      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x80>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x80>
 80036d0:	887b      	ldrh	r3, [r7, #2]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d103      	bne.n	80036de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80036dc:	e1d3      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d003      	beq.n	80036f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	887a      	ldrh	r2, [r7, #2]
 8003702:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	887a      	ldrh	r2, [r7, #2]
 800370a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003734:	d802      	bhi.n	800373c <HAL_SPI_TransmitReceive+0xe6>
 8003736:	8a3b      	ldrh	r3, [r7, #16]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d908      	bls.n	800374e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	e007      	b.n	800375e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800375c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003768:	2b40      	cmp	r3, #64	@ 0x40
 800376a:	d007      	beq.n	800377c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800377a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003784:	f240 8081 	bls.w	800388a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_SPI_TransmitReceive+0x140>
 8003790:	8a7b      	ldrh	r3, [r7, #18]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d16d      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379a:	881a      	ldrh	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	1c9a      	adds	r2, r3, #2
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	3b01      	subs	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ba:	e05a      	b.n	8003872 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d11b      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x1ac>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d016      	beq.n	8003802 <HAL_SPI_TransmitReceive+0x1ac>
 80037d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d113      	bne.n	8003802 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037de:	881a      	ldrh	r2, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ea:	1c9a      	adds	r2, r3, #2
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b01      	cmp	r3, #1
 800380e:	d11c      	bne.n	800384a <HAL_SPI_TransmitReceive+0x1f4>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	b292      	uxth	r2, r2
 8003828:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003846:	2301      	movs	r3, #1
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800384a:	f7fe fd89 	bl	8002360 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003856:	429a      	cmp	r2, r3
 8003858:	d80b      	bhi.n	8003872 <HAL_SPI_TransmitReceive+0x21c>
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d007      	beq.n	8003872 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003870:	e109      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d19f      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x166>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003882:	b29b      	uxth	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d199      	bne.n	80037bc <HAL_SPI_TransmitReceive+0x166>
 8003888:	e0e3      	b.n	8003a52 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_SPI_TransmitReceive+0x244>
 8003892:	8a7b      	ldrh	r3, [r7, #18]
 8003894:	2b01      	cmp	r3, #1
 8003896:	f040 80cf 	bne.w	8003a38 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d912      	bls.n	80038ca <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b02      	subs	r3, #2
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038c8:	e0b6      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038f0:	e0a2      	b.n	8003a38 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d134      	bne.n	800396a <HAL_SPI_TransmitReceive+0x314>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d02f      	beq.n	800396a <HAL_SPI_TransmitReceive+0x314>
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	2b01      	cmp	r3, #1
 800390e:	d12c      	bne.n	800396a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b01      	cmp	r3, #1
 8003918:	d912      	bls.n	8003940 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391e:	881a      	ldrh	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	1c9a      	adds	r2, r3, #2
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003934:	b29b      	uxth	r3, r3
 8003936:	3b02      	subs	r3, #2
 8003938:	b29a      	uxth	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800393e:	e012      	b.n	8003966 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d148      	bne.n	8003a0a <HAL_SPI_TransmitReceive+0x3b4>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800397e:	b29b      	uxth	r3, r3
 8003980:	2b00      	cmp	r3, #0
 8003982:	d042      	beq.n	8003a0a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d923      	bls.n	80039d8 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399a:	b292      	uxth	r2, r2
 800399c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	1c9a      	adds	r2, r3, #2
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b02      	subs	r3, #2
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d81f      	bhi.n	8003a06 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	e016      	b.n	8003a06 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f103 020c 	add.w	r2, r3, #12
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	1c5a      	adds	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a06:	2301      	movs	r3, #1
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a0a:	f7fe fca9 	bl	8002360 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d803      	bhi.n	8003a22 <HAL_SPI_TransmitReceive+0x3cc>
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x3d2>
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8003a36:	e026      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f47f af57 	bne.w	80038f2 <HAL_SPI_TransmitReceive+0x29c>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f af50 	bne.w	80038f2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a52:	69fa      	ldr	r2, [r7, #28]
 8003a54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f93e 	bl	8003cd8 <SPI_EndRxTxTransaction>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a7c:	e003      	b.n	8003a86 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3728      	adds	r7, #40	@ 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003aac:	f7fe fc58 	bl	8002360 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4413      	add	r3, r2
 8003aba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003abc:	f7fe fc50 	bl	8002360 <HAL_GetTick>
 8003ac0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	@ (8003ba8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	015b      	lsls	r3, r3, #5
 8003ac8:	0d1b      	lsrs	r3, r3, #20
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ad2:	e054      	b.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	d050      	beq.n	8003b7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003adc:	f7fe fc40 	bl	8002360 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d902      	bls.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d13d      	bne.n	8003b6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0a:	d111      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b14:	d004      	beq.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1e:	d107      	bne.n	8003b30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d10f      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e017      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4013      	ands	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d19b      	bne.n	8003ad4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000038 	.word	0x20000038

08003bac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003bbe:	f7fe fbcf 	bl	8002360 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	4413      	add	r3, r2
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003bce:	f7fe fbc7 	bl	8002360 <HAL_GetTick>
 8003bd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8003cd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	00da      	lsls	r2, r3, #3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	0d1b      	lsrs	r3, r3, #20
 8003bec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003bf4:	e060      	b.n	8003cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003bfc:	d107      	bne.n	8003c0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d050      	beq.n	8003cb8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c16:	f7fe fba3 	bl	8002360 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d902      	bls.n	8003c2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d13d      	bne.n	8003ca8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c44:	d111      	bne.n	8003c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c4e:	d004      	beq.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c58:	d107      	bne.n	8003c6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c72:	d10f      	bne.n	8003c94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e010      	b.n	8003cca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d196      	bne.n	8003bf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3728      	adds	r7, #40	@ 0x28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000038 	.word	0x20000038

08003cd8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af02      	add	r7, sp, #8
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff ff5b 	bl	8003bac <SPI_WaitFifoStateUntilTimeout>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d00:	f043 0220 	orr.w	r2, r3, #32
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e046      	b.n	8003d9a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d0c:	4b25      	ldr	r3, [pc, #148]	@ (8003da4 <SPI_EndRxTxTransaction+0xcc>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <SPI_EndRxTxTransaction+0xd0>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	0d5b      	lsrs	r3, r3, #21
 8003d18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d1c:	fb02 f303 	mul.w	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d2a:	d112      	bne.n	8003d52 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2200      	movs	r2, #0
 8003d34:	2180      	movs	r1, #128	@ 0x80
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f7ff feb0 	bl	8003a9c <SPI_WaitFlagStateUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d46:	f043 0220 	orr.w	r2, r3, #32
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e023      	b.n	8003d9a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d68:	2b80      	cmp	r3, #128	@ 0x80
 8003d6a:	d0f2      	beq.n	8003d52 <SPI_EndRxTxTransaction+0x7a>
 8003d6c:	e000      	b.n	8003d70 <SPI_EndRxTxTransaction+0x98>
        break;
 8003d6e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7ff ff15 	bl	8003bac <SPI_WaitFifoStateUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8c:	f043 0220 	orr.w	r2, r3, #32
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e000      	b.n	8003d9a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000038 	.word	0x20000038
 8003da8:	165e9f81 	.word	0x165e9f81

08003dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e049      	b.n	8003e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fe f950 	bl	8002078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3304      	adds	r3, #4
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fc4c 	bl	8004688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d001      	beq.n	8003e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e04c      	b.n	8003f0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a26      	ldr	r2, [pc, #152]	@ (8003f1c <HAL_TIM_Base_Start+0xc0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d022      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8e:	d01d      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a22      	ldr	r2, [pc, #136]	@ (8003f20 <HAL_TIM_Base_Start+0xc4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d018      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a21      	ldr	r2, [pc, #132]	@ (8003f24 <HAL_TIM_Base_Start+0xc8>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d013      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <HAL_TIM_Base_Start+0xcc>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00e      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <HAL_TIM_Base_Start+0xd0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d009      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f30 <HAL_TIM_Base_Start+0xd4>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d004      	beq.n	8003ecc <HAL_TIM_Base_Start+0x70>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f34 <HAL_TIM_Base_Start+0xd8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d115      	bne.n	8003ef8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	4b19      	ldr	r3, [pc, #100]	@ (8003f38 <HAL_TIM_Base_Start+0xdc>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d015      	beq.n	8003f0a <HAL_TIM_Base_Start+0xae>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee4:	d011      	beq.n	8003f0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef6:	e008      	b.n	8003f0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	e000      	b.n	8003f0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40010000 	.word	0x40010000
 8003f20:	40000400 	.word	0x40000400
 8003f24:	40000800 	.word	0x40000800
 8003f28:	40000c00 	.word	0x40000c00
 8003f2c:	40010400 	.word	0x40010400
 8003f30:	40014000 	.word	0x40014000
 8003f34:	40001800 	.word	0x40001800
 8003f38:	00010007 	.word	0x00010007

08003f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d001      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e054      	b.n	8003ffe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a26      	ldr	r2, [pc, #152]	@ (800400c <HAL_TIM_Base_Start_IT+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d022      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7e:	d01d      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a22      	ldr	r2, [pc, #136]	@ (8004010 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d018      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a21      	ldr	r2, [pc, #132]	@ (8004014 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d013      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1f      	ldr	r2, [pc, #124]	@ (8004018 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00e      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800401c <HAL_TIM_Base_Start_IT+0xe0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d009      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	@ (8004020 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_Base_Start_IT+0x80>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004024 <HAL_TIM_Base_Start_IT+0xe8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d115      	bne.n	8003fe8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	4b19      	ldr	r3, [pc, #100]	@ (8004028 <HAL_TIM_Base_Start_IT+0xec>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b06      	cmp	r3, #6
 8003fcc:	d015      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0xbe>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd4:	d011      	beq.n	8003ffa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe6:	e008      	b.n	8003ffa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e000      	b.n	8003ffc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40010400 	.word	0x40010400
 8004020:	40014000 	.word	0x40014000
 8004024:	40001800 	.word	0x40001800
 8004028:	00010007 	.word	0x00010007

0800402c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e08f      	b.n	8004160 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d106      	bne.n	800405a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7fd ff97 	bl	8001f88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b3e      	ldr	r3, [pc, #248]	@ (8004168 <HAL_TIM_Encoder_Init+0x13c>)
 800406e:	400b      	ands	r3, r1
 8004070:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f000 fb03 	bl	8004688 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4b31      	ldr	r3, [pc, #196]	@ (800416c <HAL_TIM_Encoder_Init+0x140>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	4313      	orrs	r3, r2
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004170 <HAL_TIM_Encoder_Init+0x144>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004174 <HAL_TIM_Encoder_Init+0x148>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	4313      	orrs	r3, r2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	031b      	lsls	r3, r3, #12
 80040ec:	4313      	orrs	r3, r2
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80040fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004102:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	4313      	orrs	r3, r2
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	fffebff8 	.word	0xfffebff8
 800416c:	fffffcfc 	.word	0xfffffcfc
 8004170:	fffff3f3 	.word	0xfffff3f3
 8004174:	ffff0f0f 	.word	0xffff0f0f

08004178 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004188:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004190:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004198:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d110      	bne.n	80041ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d102      	bne.n	80041b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ae:	7b7b      	ldrb	r3, [r7, #13]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d001      	beq.n	80041b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e069      	b.n	800428c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c8:	e031      	b.n	800422e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d110      	bne.n	80041f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d0:	7bbb      	ldrb	r3, [r7, #14]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d102      	bne.n	80041dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041d6:	7b3b      	ldrb	r3, [r7, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e055      	b.n	800428c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f0:	e01d      	b.n	800422e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d108      	bne.n	800420a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f8:	7bbb      	ldrb	r3, [r7, #14]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d105      	bne.n	800420a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041fe:	7b7b      	ldrb	r3, [r7, #13]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d102      	bne.n	800420a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004204:	7b3b      	ldrb	r3, [r7, #12]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d001      	beq.n	800420e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e03e      	b.n	800428c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2202      	movs	r2, #2
 8004212:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2202      	movs	r2, #2
 800422a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_Encoder_Start+0xc4>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d008      	beq.n	800424c <HAL_TIM_Encoder_Start+0xd4>
 800423a:	e00f      	b.n	800425c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2201      	movs	r2, #1
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb65 	bl	8004914 <TIM_CCxChannelCmd>
      break;
 800424a:	e016      	b.n	800427a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	2104      	movs	r1, #4
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fb5d 	bl	8004914 <TIM_CCxChannelCmd>
      break;
 800425a:	e00e      	b.n	800427a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f000 fb55 	bl	8004914 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2201      	movs	r2, #1
 8004270:	2104      	movs	r1, #4
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb4e 	bl	8004914 <TIM_CCxChannelCmd>
      break;
 8004278:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d020      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0202 	mvn.w	r2, #2
 80042c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9b4 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9a6 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f9b7 	bl	8004660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d020      	beq.n	8004344 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0204 	mvn.w	r2, #4
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f98e 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f980 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f991 	bl	8004660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d020      	beq.n	8004390 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01b      	beq.n	8004390 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f06f 0208 	mvn.w	r2, #8
 8004360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2204      	movs	r2, #4
 8004366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f968 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 800437c:	e005      	b.n	800438a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f95a 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f96b 	bl	8004660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	d020      	beq.n	80043dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0210 	mvn.w	r2, #16
 80043ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2208      	movs	r2, #8
 80043b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 f942 	bl	800464c <HAL_TIM_IC_CaptureCallback>
 80043c8:	e005      	b.n	80043d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f934 	bl	8004638 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f945 	bl	8004660 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00c      	beq.n	8004400 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d007      	beq.n	8004400 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fd00 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004406:	2b00      	cmp	r3, #0
 8004408:	d104      	bne.n	8004414 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00c      	beq.n	800442e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d007      	beq.n	800442e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fb31 	bl	8004a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800444a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fb29 	bl	8004aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00c      	beq.n	8004476 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800446e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f8ff 	bl	8004674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 0320 	and.w	r3, r3, #32
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d007      	beq.n	800449a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f06f 0220 	mvn.w	r2, #32
 8004492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 faf1 	bl	8004a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIM_ConfigClockSource+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0b4      	b.n	800462a <HAL_TIM_ConfigClockSource+0x186>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4b56      	ldr	r3, [pc, #344]	@ (8004634 <HAL_TIM_ConfigClockSource+0x190>)
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044f8:	d03e      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0xd4>
 80044fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044fe:	f200 8087 	bhi.w	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004506:	f000 8086 	beq.w	8004616 <HAL_TIM_ConfigClockSource+0x172>
 800450a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450e:	d87f      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004510:	2b70      	cmp	r3, #112	@ 0x70
 8004512:	d01a      	beq.n	800454a <HAL_TIM_ConfigClockSource+0xa6>
 8004514:	2b70      	cmp	r3, #112	@ 0x70
 8004516:	d87b      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004518:	2b60      	cmp	r3, #96	@ 0x60
 800451a:	d050      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x11a>
 800451c:	2b60      	cmp	r3, #96	@ 0x60
 800451e:	d877      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004520:	2b50      	cmp	r3, #80	@ 0x50
 8004522:	d03c      	beq.n	800459e <HAL_TIM_ConfigClockSource+0xfa>
 8004524:	2b50      	cmp	r3, #80	@ 0x50
 8004526:	d873      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d058      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x13a>
 800452c:	2b40      	cmp	r3, #64	@ 0x40
 800452e:	d86f      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b30      	cmp	r3, #48	@ 0x30
 8004532:	d064      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x15a>
 8004534:	2b30      	cmp	r3, #48	@ 0x30
 8004536:	d86b      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b20      	cmp	r3, #32
 800453a:	d060      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x15a>
 800453c:	2b20      	cmp	r3, #32
 800453e:	d867      	bhi.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05c      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x15a>
 8004544:	2b10      	cmp	r3, #16
 8004546:	d05a      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x15a>
 8004548:	e062      	b.n	8004610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800455a:	f000 f9bb 	bl	80048d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800456c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	609a      	str	r2, [r3, #8]
      break;
 8004576:	e04f      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004588:	f000 f9a4 	bl	80048d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800459a:	609a      	str	r2, [r3, #8]
      break;
 800459c:	e03c      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045aa:	461a      	mov	r2, r3
 80045ac:	f000 f918 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2150      	movs	r1, #80	@ 0x50
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 f971 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 80045bc:	e02c      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ca:	461a      	mov	r2, r3
 80045cc:	f000 f937 	bl	800483e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2160      	movs	r1, #96	@ 0x60
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f961 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 80045dc:	e01c      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 f8f8 	bl	80047e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2140      	movs	r1, #64	@ 0x40
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 f951 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 80045fc:	e00c      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4619      	mov	r1, r3
 8004608:	4610      	mov	r0, r2
 800460a:	f000 f948 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 800460e:	e003      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      break;
 8004614:	e000      	b.n	8004618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	fffeff88 	.word	0xfffeff88

08004638 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a46      	ldr	r2, [pc, #280]	@ (80047b4 <TIM_Base_SetConfig+0x12c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a6:	d00f      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a43      	ldr	r2, [pc, #268]	@ (80047b8 <TIM_Base_SetConfig+0x130>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a42      	ldr	r2, [pc, #264]	@ (80047bc <TIM_Base_SetConfig+0x134>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a41      	ldr	r2, [pc, #260]	@ (80047c0 <TIM_Base_SetConfig+0x138>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a40      	ldr	r2, [pc, #256]	@ (80047c4 <TIM_Base_SetConfig+0x13c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a35      	ldr	r2, [pc, #212]	@ (80047b4 <TIM_Base_SetConfig+0x12c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d02b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e8:	d027      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a32      	ldr	r2, [pc, #200]	@ (80047b8 <TIM_Base_SetConfig+0x130>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d023      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a31      	ldr	r2, [pc, #196]	@ (80047bc <TIM_Base_SetConfig+0x134>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01f      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a30      	ldr	r2, [pc, #192]	@ (80047c0 <TIM_Base_SetConfig+0x138>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2f      	ldr	r2, [pc, #188]	@ (80047c4 <TIM_Base_SetConfig+0x13c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d017      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2e      	ldr	r2, [pc, #184]	@ (80047c8 <TIM_Base_SetConfig+0x140>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2d      	ldr	r2, [pc, #180]	@ (80047cc <TIM_Base_SetConfig+0x144>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00f      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2c      	ldr	r2, [pc, #176]	@ (80047d0 <TIM_Base_SetConfig+0x148>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00b      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a2b      	ldr	r2, [pc, #172]	@ (80047d4 <TIM_Base_SetConfig+0x14c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d007      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a2a      	ldr	r2, [pc, #168]	@ (80047d8 <TIM_Base_SetConfig+0x150>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d003      	beq.n	800473a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a29      	ldr	r2, [pc, #164]	@ (80047dc <TIM_Base_SetConfig+0x154>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d108      	bne.n	800474c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a10      	ldr	r2, [pc, #64]	@ (80047b4 <TIM_Base_SetConfig+0x12c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d003      	beq.n	8004780 <TIM_Base_SetConfig+0xf8>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a12      	ldr	r2, [pc, #72]	@ (80047c4 <TIM_Base_SetConfig+0x13c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d103      	bne.n	8004788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	611a      	str	r2, [r3, #16]
  }
}
 80047a6:	bf00      	nop
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00
 80047c4:	40010400 	.word	0x40010400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40001800 	.word	0x40001800
 80047d8:	40001c00 	.word	0x40001c00
 80047dc:	40002000 	.word	0x40002000

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f023 0210 	bic.w	r2, r3, #16
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	4313      	orrs	r3, r2
 8004872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800487a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f043 0307 	orr.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f003 031f 	and.w	r3, r3, #31
 8004926:	2201      	movs	r2, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a1a      	ldr	r2, [r3, #32]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	43db      	mvns	r3, r3
 8004936:	401a      	ands	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	621a      	str	r2, [r3, #32]
}
 8004952:	bf00      	nop
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004970:	2b01      	cmp	r3, #1
 8004972:	d101      	bne.n	8004978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004974:	2302      	movs	r3, #2
 8004976:	e06d      	b.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d108      	bne.n	80049be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80049b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a20      	ldr	r2, [pc, #128]	@ (8004a60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049ea:	d01d      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	@ (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a16      	ldr	r2, [pc, #88]	@ (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a15      	ldr	r2, [pc, #84]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d10c      	bne.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40010400 	.word	0x40010400
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40001800 	.word	0x40001800

08004a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004abc:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <MX_FATFS_Init+0x18>)
 8004abe:	4805      	ldr	r0, [pc, #20]	@ (8004ad4 <MX_FATFS_Init+0x1c>)
 8004ac0:	f002 fb42 	bl	8007148 <FATFS_LinkDriver>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b03      	ldr	r3, [pc, #12]	@ (8004ad8 <MX_FATFS_Init+0x20>)
 8004aca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004acc:	bf00      	nop
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20001dec 	.word	0x20001dec
 8004ad4:	20000044 	.word	0x20000044
 8004ad8:	20001de8 	.word	0x20001de8

08004adc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004ae0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004af6:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <USER_initialize+0x24>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004afc:	4b04      	ldr	r3, [pc, #16]	@ (8004b10 <USER_initialize+0x24>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000041 	.word	0x20000041

08004b14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004b1e:	4b06      	ldr	r3, [pc, #24]	@ (8004b38 <USER_status+0x24>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004b24:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <USER_status+0x24>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000041 	.word	0x20000041

08004b3c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4603      	mov	r3, r0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004b4c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004b6a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3714      	adds	r7, #20
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	603a      	str	r2, [r7, #0]
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	460b      	mov	r3, r1
 8004b86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
    return res;
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
	...

08004b9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	4a08      	ldr	r2, [pc, #32]	@ (8004bcc <disk_status+0x30>)
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	79fa      	ldrb	r2, [r7, #7]
 8004bb4:	4905      	ldr	r1, [pc, #20]	@ (8004bcc <disk_status+0x30>)
 8004bb6:	440a      	add	r2, r1
 8004bb8:	7a12      	ldrb	r2, [r2, #8]
 8004bba:	4610      	mov	r0, r2
 8004bbc:	4798      	blx	r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20001e18 	.word	0x20001e18

08004bd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	4a0d      	ldr	r2, [pc, #52]	@ (8004c18 <disk_initialize+0x48>)
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d111      	bne.n	8004c0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	4a0b      	ldr	r2, [pc, #44]	@ (8004c18 <disk_initialize+0x48>)
 8004bec:	2101      	movs	r1, #1
 8004bee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <disk_initialize+0x48>)
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	79fa      	ldrb	r2, [r7, #7]
 8004bfe:	4906      	ldr	r1, [pc, #24]	@ (8004c18 <disk_initialize+0x48>)
 8004c00:	440a      	add	r2, r1
 8004c02:	7a12      	ldrb	r2, [r2, #8]
 8004c04:	4610      	mov	r0, r2
 8004c06:	4798      	blx	r3
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20001e18 	.word	0x20001e18

08004c1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	603b      	str	r3, [r7, #0]
 8004c28:	4603      	mov	r3, r0
 8004c2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <disk_read+0x3c>)
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	689c      	ldr	r4, [r3, #8]
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <disk_read+0x3c>)
 8004c3c:	4413      	add	r3, r2
 8004c3e:	7a18      	ldrb	r0, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	47a0      	blx	r4
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd90      	pop	{r4, r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20001e18 	.word	0x20001e18

08004c5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c98 <disk_write+0x3c>)
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	68dc      	ldr	r4, [r3, #12]
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
 8004c7a:	4a07      	ldr	r2, [pc, #28]	@ (8004c98 <disk_write+0x3c>)
 8004c7c:	4413      	add	r3, r2
 8004c7e:	7a18      	ldrb	r0, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	68b9      	ldr	r1, [r7, #8]
 8004c86:	47a0      	blx	r4
 8004c88:	4603      	mov	r3, r0
 8004c8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20001e18 	.word	0x20001e18

08004c9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	603a      	str	r2, [r7, #0]
 8004ca6:	71fb      	strb	r3, [r7, #7]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <disk_ioctl+0x38>)
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	79fa      	ldrb	r2, [r7, #7]
 8004cba:	4906      	ldr	r1, [pc, #24]	@ (8004cd4 <disk_ioctl+0x38>)
 8004cbc:	440a      	add	r2, r1
 8004cbe:	7a10      	ldrb	r0, [r2, #8]
 8004cc0:	79b9      	ldrb	r1, [r7, #6]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	4798      	blx	r3
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	20001e18 	.word	0x20001e18

08004cd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	b21a      	sxth	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	b21b      	sxth	r3, r3
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	b21b      	sxth	r3, r3
 8004cfa:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3303      	adds	r3, #3
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	3202      	adds	r2, #2
 8004d22:	7812      	ldrb	r2, [r2, #0]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	3201      	adds	r2, #1
 8004d30:	7812      	ldrb	r2, [r2, #0]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	021b      	lsls	r3, r3, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
	return rv;
 8004d42:	68fb      	ldr	r3, [r7, #12]
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1c5a      	adds	r2, r3, #1
 8004d60:	607a      	str	r2, [r7, #4]
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	887b      	ldrh	r3, [r7, #2]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	887a      	ldrh	r2, [r7, #2]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	0a1b      	lsrs	r3, r3, #8
 8004db2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004dde:	b480      	push	{r7}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	1c53      	adds	r3, r2, #1
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	1c59      	adds	r1, r3, #1
 8004e02:	6179      	str	r1, [r7, #20]
 8004e04:	7812      	ldrb	r2, [r2, #0]
 8004e06:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1f1      	bne.n	8004df8 <mem_cpy+0x1a>
	}
}
 8004e14:	bf00      	nop
 8004e16:	371c      	adds	r7, #28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	617a      	str	r2, [r7, #20]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1f3      	bne.n	8004e30 <mem_set+0x10>
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004e56:	b480      	push	{r7}
 8004e58:	b089      	sub	sp, #36	@ 0x24
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	61fa      	str	r2, [r7, #28]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	4619      	mov	r1, r3
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	61ba      	str	r2, [r7, #24]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	1acb      	subs	r3, r1, r3
 8004e82:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	607b      	str	r3, [r7, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <mem_cmp+0x40>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0eb      	beq.n	8004e6e <mem_cmp+0x18>

	return r;
 8004e96:	697b      	ldr	r3, [r7, #20]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3724      	adds	r7, #36	@ 0x24
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004eae:	e002      	b.n	8004eb6 <chk_chr+0x12>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	607b      	str	r3, [r7, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <chk_chr+0x26>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d1f2      	bne.n	8004eb0 <chk_chr+0xc>
	return *str;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b082      	sub	sp, #8
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d009      	beq.n	8004efc <lock_fs+0x22>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 f93a 	bl	8007166 <ff_req_grant>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <lock_fs+0x22>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <lock_fs+0x24>
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <unlock_fs+0x2e>
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d00a      	beq.n	8004f34 <unlock_fs+0x2e>
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	2b0b      	cmp	r3, #11
 8004f22:	d007      	beq.n	8004f34 <unlock_fs+0x2e>
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	2b0f      	cmp	r3, #15
 8004f28:	d004      	beq.n	8004f34 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f002 f92e 	bl	8007190 <ff_rel_grant>
	}
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e029      	b.n	8004fa4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004f50:	4a27      	ldr	r2, [pc, #156]	@ (8004ff0 <chk_lock+0xb4>)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	4413      	add	r3, r2
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01d      	beq.n	8004f9a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f5e:	4a24      	ldr	r2, [pc, #144]	@ (8004ff0 <chk_lock+0xb4>)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	4413      	add	r3, r2
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d116      	bne.n	8004f9e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004f70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <chk_lock+0xb4>)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	4413      	add	r3, r2
 8004f78:	3304      	adds	r3, #4
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d10c      	bne.n	8004f9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f84:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff0 <chk_lock+0xb4>)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	4413      	add	r3, r2
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d102      	bne.n	8004f9e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004f98:	e007      	b.n	8004faa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d9d2      	bls.n	8004f50 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d109      	bne.n	8004fc4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d102      	bne.n	8004fbc <chk_lock+0x80>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d101      	bne.n	8004fc0 <chk_lock+0x84>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e010      	b.n	8004fe2 <chk_lock+0xa6>
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	e00e      	b.n	8004fe2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <chk_lock+0xa0>
 8004fca:	4a09      	ldr	r2, [pc, #36]	@ (8004ff0 <chk_lock+0xb4>)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	4413      	add	r3, r2
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fda:	d101      	bne.n	8004fe0 <chk_lock+0xa4>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	e000      	b.n	8004fe2 <chk_lock+0xa6>
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20001df8 	.word	0x20001df8

08004ff4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	e002      	b.n	8005006 <enq_lock+0x12>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3301      	adds	r3, #1
 8005004:	607b      	str	r3, [r7, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d806      	bhi.n	800501a <enq_lock+0x26>
 800500c:	4a09      	ldr	r2, [pc, #36]	@ (8005034 <enq_lock+0x40>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	4413      	add	r3, r2
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f2      	bne.n	8005000 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b02      	cmp	r3, #2
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20001df8 	.word	0x20001df8

08005038 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e01f      	b.n	8005088 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005048:	4a41      	ldr	r2, [pc, #260]	@ (8005150 <inc_lock+0x118>)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	4413      	add	r3, r2
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d113      	bne.n	8005082 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800505a:	4a3d      	ldr	r2, [pc, #244]	@ (8005150 <inc_lock+0x118>)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	4413      	add	r3, r2
 8005062:	3304      	adds	r3, #4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800506a:	429a      	cmp	r2, r3
 800506c:	d109      	bne.n	8005082 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800506e:	4a38      	ldr	r2, [pc, #224]	@ (8005150 <inc_lock+0x118>)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	3308      	adds	r3, #8
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800507e:	429a      	cmp	r2, r3
 8005080:	d006      	beq.n	8005090 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3301      	adds	r3, #1
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d9dc      	bls.n	8005048 <inc_lock+0x10>
 800508e:	e000      	b.n	8005092 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005090:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d132      	bne.n	80050fe <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e002      	b.n	80050a4 <inc_lock+0x6c>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3301      	adds	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d806      	bhi.n	80050b8 <inc_lock+0x80>
 80050aa:	4a29      	ldr	r2, [pc, #164]	@ (8005150 <inc_lock+0x118>)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	4413      	add	r3, r2
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f2      	bne.n	800509e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d101      	bne.n	80050c2 <inc_lock+0x8a>
 80050be:	2300      	movs	r3, #0
 80050c0:	e040      	b.n	8005144 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4922      	ldr	r1, [pc, #136]	@ (8005150 <inc_lock+0x118>)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	440b      	add	r3, r1
 80050ce:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	491e      	ldr	r1, [pc, #120]	@ (8005150 <inc_lock+0x118>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	440b      	add	r3, r1
 80050dc:	3304      	adds	r3, #4
 80050de:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	695a      	ldr	r2, [r3, #20]
 80050e4:	491a      	ldr	r1, [pc, #104]	@ (8005150 <inc_lock+0x118>)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	440b      	add	r3, r1
 80050ec:	3308      	adds	r3, #8
 80050ee:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80050f0:	4a17      	ldr	r2, [pc, #92]	@ (8005150 <inc_lock+0x118>)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4413      	add	r3, r2
 80050f8:	330c      	adds	r3, #12
 80050fa:	2200      	movs	r2, #0
 80050fc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d009      	beq.n	8005118 <inc_lock+0xe0>
 8005104:	4a12      	ldr	r2, [pc, #72]	@ (8005150 <inc_lock+0x118>)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	4413      	add	r3, r2
 800510c:	330c      	adds	r3, #12
 800510e:	881b      	ldrh	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <inc_lock+0xe0>
 8005114:	2300      	movs	r3, #0
 8005116:	e015      	b.n	8005144 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <inc_lock+0xf8>
 800511e:	4a0c      	ldr	r2, [pc, #48]	@ (8005150 <inc_lock+0x118>)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	4413      	add	r3, r2
 8005126:	330c      	adds	r3, #12
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	e001      	b.n	8005134 <inc_lock+0xfc>
 8005130:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005134:	4906      	ldr	r1, [pc, #24]	@ (8005150 <inc_lock+0x118>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	011b      	lsls	r3, r3, #4
 800513a:	440b      	add	r3, r1
 800513c:	330c      	adds	r3, #12
 800513e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20001df8 	.word	0x20001df8

08005154 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3b01      	subs	r3, #1
 8005160:	607b      	str	r3, [r7, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d825      	bhi.n	80051b4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005168:	4a17      	ldr	r2, [pc, #92]	@ (80051c8 <dec_lock+0x74>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4413      	add	r3, r2
 8005170:	330c      	adds	r3, #12
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800517c:	d101      	bne.n	8005182 <dec_lock+0x2e>
 800517e:	2300      	movs	r3, #0
 8005180:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <dec_lock+0x3a>
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	3b01      	subs	r3, #1
 800518c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800518e:	4a0e      	ldr	r2, [pc, #56]	@ (80051c8 <dec_lock+0x74>)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	4413      	add	r3, r2
 8005196:	330c      	adds	r3, #12
 8005198:	89fa      	ldrh	r2, [r7, #14]
 800519a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800519c:	89fb      	ldrh	r3, [r7, #14]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d105      	bne.n	80051ae <dec_lock+0x5a>
 80051a2:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <dec_lock+0x74>)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	4413      	add	r3, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	737b      	strb	r3, [r7, #13]
 80051b2:	e001      	b.n	80051b8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80051b4:	2302      	movs	r3, #2
 80051b6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80051b8:	7b7b      	ldrb	r3, [r7, #13]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	20001df8 	.word	0x20001df8

080051cc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	e010      	b.n	80051fc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80051da:	4a0d      	ldr	r2, [pc, #52]	@ (8005210 <clear_lock+0x44>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d105      	bne.n	80051f6 <clear_lock+0x2a>
 80051ea:	4a09      	ldr	r2, [pc, #36]	@ (8005210 <clear_lock+0x44>)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4413      	add	r3, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d9eb      	bls.n	80051da <clear_lock+0xe>
	}
}
 8005202:	bf00      	nop
 8005204:	bf00      	nop
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	20001df8 	.word	0x20001df8

08005214 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800521c:	2300      	movs	r3, #0
 800521e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	78db      	ldrb	r3, [r3, #3]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d034      	beq.n	8005292 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	7858      	ldrb	r0, [r3, #1]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005238:	2301      	movs	r3, #1
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	f7ff fd0e 	bl	8004c5c <disk_write>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005246:	2301      	movs	r3, #1
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e022      	b.n	8005292 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	1ad2      	subs	r2, r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	429a      	cmp	r2, r3
 8005260:	d217      	bcs.n	8005292 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	789b      	ldrb	r3, [r3, #2]
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e010      	b.n	800528c <sync_window+0x78>
					wsect += fs->fsize;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	7858      	ldrb	r0, [r3, #1]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800527e:	2301      	movs	r3, #1
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	f7ff fceb 	bl	8004c5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	3b01      	subs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d8eb      	bhi.n	800526a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d01b      	beq.n	80052ec <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ffad 	bl	8005214 <sync_window>
 80052ba:	4603      	mov	r3, r0
 80052bc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d113      	bne.n	80052ec <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	7858      	ldrb	r0, [r3, #1]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80052ce:	2301      	movs	r3, #1
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	f7ff fca3 	bl	8004c1c <disk_read>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80052ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
	...

080052f8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ff87 	bl	8005214 <sync_window>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d159      	bne.n	80053c4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d149      	bne.n	80053ac <sync_fs+0xb4>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	791b      	ldrb	r3, [r3, #4]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d145      	bne.n	80053ac <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	899b      	ldrh	r3, [r3, #12]
 800532a:	461a      	mov	r2, r3
 800532c:	2100      	movs	r1, #0
 800532e:	f7ff fd77 	bl	8004e20 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3338      	adds	r3, #56	@ 0x38
 8005336:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800533a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800533e:	4618      	mov	r0, r3
 8005340:	f7ff fd06 	bl	8004d50 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3338      	adds	r3, #56	@ 0x38
 8005348:	4921      	ldr	r1, [pc, #132]	@ (80053d0 <sync_fs+0xd8>)
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff fd1b 	bl	8004d86 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	3338      	adds	r3, #56	@ 0x38
 8005354:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005358:	491e      	ldr	r1, [pc, #120]	@ (80053d4 <sync_fs+0xdc>)
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fd13 	bl	8004d86 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3338      	adds	r3, #56	@ 0x38
 8005364:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7ff fd09 	bl	8004d86 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3338      	adds	r3, #56	@ 0x38
 8005378:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	695b      	ldr	r3, [r3, #20]
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7ff fcff 	bl	8004d86 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	7858      	ldrb	r0, [r3, #1]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a0:	2301      	movs	r3, #1
 80053a2:	f7ff fc5b 	bl	8004c5c <disk_write>
			fs->fsi_flag = 0;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	785b      	ldrb	r3, [r3, #1]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff fc71 	bl	8004c9c <disk_ioctl>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <sync_fs+0xcc>
 80053c0:	2301      	movs	r3, #1
 80053c2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80053c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	41615252 	.word	0x41615252
 80053d4:	61417272 	.word	0x61417272

080053d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	3b02      	subs	r3, #2
 80053e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	3b02      	subs	r3, #2
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d301      	bcc.n	80053f8 <clust2sect+0x20>
 80053f4:	2300      	movs	r3, #0
 80053f6:	e008      	b.n	800540a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	895b      	ldrh	r3, [r3, #10]
 80053fc:	461a      	mov	r2, r3
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	fb03 f202 	mul.w	r2, r3, r2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	4413      	add	r3, r2
}
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b086      	sub	sp, #24
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d904      	bls.n	8005436 <get_fat+0x20>
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005436:	2301      	movs	r3, #1
 8005438:	617b      	str	r3, [r7, #20]
 800543a:	e0ba      	b.n	80055b2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b03      	cmp	r3, #3
 8005448:	f000 8082 	beq.w	8005550 <get_fat+0x13a>
 800544c:	2b03      	cmp	r3, #3
 800544e:	f300 80a6 	bgt.w	800559e <get_fat+0x188>
 8005452:	2b01      	cmp	r3, #1
 8005454:	d002      	beq.n	800545c <get_fat+0x46>
 8005456:	2b02      	cmp	r3, #2
 8005458:	d055      	beq.n	8005506 <get_fat+0xf0>
 800545a:	e0a0      	b.n	800559e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	085b      	lsrs	r3, r3, #1
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	899b      	ldrh	r3, [r3, #12]
 8005472:	4619      	mov	r1, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	fbb3 f3f1 	udiv	r3, r3, r1
 800547a:	4413      	add	r3, r2
 800547c:	4619      	mov	r1, r3
 800547e:	6938      	ldr	r0, [r7, #16]
 8005480:	f7ff ff0c 	bl	800529c <move_window>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	f040 808c 	bne.w	80055a4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60fa      	str	r2, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	8992      	ldrh	r2, [r2, #12]
 8005496:	fbb3 f1f2 	udiv	r1, r3, r2
 800549a:	fb01 f202 	mul.w	r2, r1, r2
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	899b      	ldrh	r3, [r3, #12]
 80054b2:	4619      	mov	r1, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ba:	4413      	add	r3, r2
 80054bc:	4619      	mov	r1, r3
 80054be:	6938      	ldr	r0, [r7, #16]
 80054c0:	f7ff feec 	bl	800529c <move_window>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d16e      	bne.n	80055a8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	899b      	ldrh	r3, [r3, #12]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80054d6:	fb01 f202 	mul.w	r2, r1, r2
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4413      	add	r3, r2
 80054e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054e4:	021b      	lsls	r3, r3, #8
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d002      	beq.n	80054fc <get_fat+0xe6>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	e002      	b.n	8005502 <get_fat+0xec>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005502:	617b      	str	r3, [r7, #20]
			break;
 8005504:	e055      	b.n	80055b2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	899b      	ldrh	r3, [r3, #12]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	b29b      	uxth	r3, r3
 8005512:	4619      	mov	r1, r3
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	fbb3 f3f1 	udiv	r3, r3, r1
 800551a:	4413      	add	r3, r2
 800551c:	4619      	mov	r1, r3
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f7ff febc 	bl	800529c <move_window>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d140      	bne.n	80055ac <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	8992      	ldrh	r2, [r2, #12]
 8005538:	fbb3 f0f2 	udiv	r0, r3, r2
 800553c:	fb00 f202 	mul.w	r2, r0, r2
 8005540:	1a9b      	subs	r3, r3, r2
 8005542:	440b      	add	r3, r1
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fbc7 	bl	8004cd8 <ld_word>
 800554a:	4603      	mov	r3, r0
 800554c:	617b      	str	r3, [r7, #20]
			break;
 800554e:	e030      	b.n	80055b2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	899b      	ldrh	r3, [r3, #12]
 8005558:	089b      	lsrs	r3, r3, #2
 800555a:	b29b      	uxth	r3, r3
 800555c:	4619      	mov	r1, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	fbb3 f3f1 	udiv	r3, r3, r1
 8005564:	4413      	add	r3, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6938      	ldr	r0, [r7, #16]
 800556a:	f7ff fe97 	bl	800529c <move_window>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11d      	bne.n	80055b0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	8992      	ldrh	r2, [r2, #12]
 8005582:	fbb3 f0f2 	udiv	r0, r3, r2
 8005586:	fb00 f202 	mul.w	r2, r0, r2
 800558a:	1a9b      	subs	r3, r3, r2
 800558c:	440b      	add	r3, r1
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fbbb 	bl	8004d0a <ld_dword>
 8005594:	4603      	mov	r3, r0
 8005596:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800559a:	617b      	str	r3, [r7, #20]
			break;
 800559c:	e009      	b.n	80055b2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e006      	b.n	80055b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055a4:	bf00      	nop
 80055a6:	e004      	b.n	80055b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80055a8:	bf00      	nop
 80055aa:	e002      	b.n	80055b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055b0:	bf00      	nop
		}
	}

	return val;
 80055b2:	697b      	ldr	r3, [r7, #20]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80055bc:	b590      	push	{r4, r7, lr}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80055c8:	2302      	movs	r3, #2
 80055ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	f240 8109 	bls.w	80057e6 <put_fat+0x22a>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	429a      	cmp	r2, r3
 80055dc:	f080 8103 	bcs.w	80057e6 <put_fat+0x22a>
		switch (fs->fs_type) {
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	f000 80b6 	beq.w	8005756 <put_fat+0x19a>
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	f300 80fb 	bgt.w	80057e6 <put_fat+0x22a>
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d003      	beq.n	80055fc <put_fat+0x40>
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	f000 8083 	beq.w	8005700 <put_fat+0x144>
 80055fa:	e0f4      	b.n	80057e6 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	61bb      	str	r3, [r7, #24]
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4413      	add	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	899b      	ldrh	r3, [r3, #12]
 8005612:	4619      	mov	r1, r3
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	fbb3 f3f1 	udiv	r3, r3, r1
 800561a:	4413      	add	r3, r2
 800561c:	4619      	mov	r1, r3
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fe3c 	bl	800529c <move_window>
 8005624:	4603      	mov	r3, r0
 8005626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005628:	7ffb      	ldrb	r3, [r7, #31]
 800562a:	2b00      	cmp	r3, #0
 800562c:	f040 80d4 	bne.w	80057d8 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	61ba      	str	r2, [r7, #24]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	8992      	ldrh	r2, [r2, #12]
 8005640:	fbb3 f0f2 	udiv	r0, r3, r2
 8005644:	fb00 f202 	mul.w	r2, r0, r2
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	440b      	add	r3, r1
 800564c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00d      	beq.n	8005674 <put_fat+0xb8>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	b25b      	sxtb	r3, r3
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	b25a      	sxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	b25b      	sxtb	r3, r3
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	b25b      	sxtb	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b25b      	sxtb	r3, r3
 8005670:	b2db      	uxtb	r3, r3
 8005672:	e001      	b.n	8005678 <put_fat+0xbc>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	899b      	ldrh	r3, [r3, #12]
 800568a:	4619      	mov	r1, r3
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005692:	4413      	add	r3, r2
 8005694:	4619      	mov	r1, r3
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff fe00 	bl	800529c <move_window>
 800569c:	4603      	mov	r3, r0
 800569e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80056a0:	7ffb      	ldrb	r3, [r7, #31]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f040 809a 	bne.w	80057dc <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	899b      	ldrh	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ba:	fb00 f202 	mul.w	r2, r0, r2
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	440b      	add	r3, r1
 80056c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <put_fat+0x11a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e00e      	b.n	80056f4 <put_fat+0x138>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	b25b      	sxtb	r3, r3
 80056dc:	f023 030f 	bic.w	r3, r3, #15
 80056e0:	b25a      	sxtb	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	f003 030f 	and.w	r3, r3, #15
 80056ec:	b25b      	sxtb	r3, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	b25b      	sxtb	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	70da      	strb	r2, [r3, #3]
			break;
 80056fe:	e072      	b.n	80057e6 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	899b      	ldrh	r3, [r3, #12]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b29b      	uxth	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	fbb3 f3f1 	udiv	r3, r3, r1
 8005714:	4413      	add	r3, r2
 8005716:	4619      	mov	r1, r3
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fdbf 	bl	800529c <move_window>
 800571e:	4603      	mov	r3, r0
 8005720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005722:	7ffb      	ldrb	r3, [r7, #31]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d15b      	bne.n	80057e0 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	005b      	lsls	r3, r3, #1
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	8992      	ldrh	r2, [r2, #12]
 8005736:	fbb3 f0f2 	udiv	r0, r3, r2
 800573a:	fb00 f202 	mul.w	r2, r0, r2
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	440b      	add	r3, r1
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	b292      	uxth	r2, r2
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fb01 	bl	8004d50 <st_word>
			fs->wflag = 1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2201      	movs	r2, #1
 8005752:	70da      	strb	r2, [r3, #3]
			break;
 8005754:	e047      	b.n	80057e6 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	899b      	ldrh	r3, [r3, #12]
 800575e:	089b      	lsrs	r3, r3, #2
 8005760:	b29b      	uxth	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	fbb3 f3f1 	udiv	r3, r3, r1
 800576a:	4413      	add	r3, r2
 800576c:	4619      	mov	r1, r3
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7ff fd94 	bl	800529c <move_window>
 8005774:	4603      	mov	r3, r0
 8005776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005778:	7ffb      	ldrb	r3, [r7, #31]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d132      	bne.n	80057e4 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	8992      	ldrh	r2, [r2, #12]
 8005792:	fbb3 f0f2 	udiv	r0, r3, r2
 8005796:	fb00 f202 	mul.w	r2, r0, r2
 800579a:	1a9b      	subs	r3, r3, r2
 800579c:	440b      	add	r3, r1
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fab3 	bl	8004d0a <ld_dword>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80057aa:	4323      	orrs	r3, r4
 80057ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	8992      	ldrh	r2, [r2, #12]
 80057bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80057c0:	fb00 f202 	mul.w	r2, r0, r2
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	440b      	add	r3, r1
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff fadb 	bl	8004d86 <st_dword>
			fs->wflag = 1;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	70da      	strb	r2, [r3, #3]
			break;
 80057d6:	e006      	b.n	80057e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80057d8:	bf00      	nop
 80057da:	e004      	b.n	80057e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80057dc:	bf00      	nop
 80057de:	e002      	b.n	80057e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80057e0:	bf00      	nop
 80057e2:	e000      	b.n	80057e6 <put_fat+0x22a>
			if (res != FR_OK) break;
 80057e4:	bf00      	nop
		}
	}
	return res;
 80057e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3724      	adds	r7, #36	@ 0x24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd90      	pop	{r4, r7, pc}

080057f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d904      	bls.n	8005816 <remove_chain+0x26>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d301      	bcc.n	800581a <remove_chain+0x2a>
 8005816:	2302      	movs	r3, #2
 8005818:	e04b      	b.n	80058b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005820:	f04f 32ff 	mov.w	r2, #4294967295
 8005824:	6879      	ldr	r1, [r7, #4]
 8005826:	69b8      	ldr	r0, [r7, #24]
 8005828:	f7ff fec8 	bl	80055bc <put_fat>
 800582c:	4603      	mov	r3, r0
 800582e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <remove_chain+0x4a>
 8005836:	7ffb      	ldrb	r3, [r7, #31]
 8005838:	e03b      	b.n	80058b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff fdea 	bl	8005416 <get_fat>
 8005842:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d031      	beq.n	80058ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <remove_chain+0x64>
 8005850:	2302      	movs	r3, #2
 8005852:	e02e      	b.n	80058b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585a:	d101      	bne.n	8005860 <remove_chain+0x70>
 800585c:	2301      	movs	r3, #1
 800585e:	e028      	b.n	80058b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005860:	2200      	movs	r2, #0
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	69b8      	ldr	r0, [r7, #24]
 8005866:	f7ff fea9 	bl	80055bc <put_fat>
 800586a:	4603      	mov	r3, r0
 800586c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800586e:	7ffb      	ldrb	r3, [r7, #31]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <remove_chain+0x88>
 8005874:	7ffb      	ldrb	r3, [r7, #31]
 8005876:	e01c      	b.n	80058b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	69db      	ldr	r3, [r3, #28]
 8005880:	3b02      	subs	r3, #2
 8005882:	429a      	cmp	r2, r3
 8005884:	d20b      	bcs.n	800589e <remove_chain+0xae>
			fs->free_clst++;
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	791b      	ldrb	r3, [r3, #4]
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	b2da      	uxtb	r2, r3
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d3c6      	bcc.n	800583a <remove_chain+0x4a>
 80058ac:	e000      	b.n	80058b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80058ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b088      	sub	sp, #32
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d004      	beq.n	80058e6 <create_chain+0x2c>
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d31b      	bcc.n	800591e <create_chain+0x64>
 80058e6:	2301      	movs	r3, #1
 80058e8:	61bb      	str	r3, [r7, #24]
 80058ea:	e018      	b.n	800591e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff fd91 	bl	8005416 <get_fat>
 80058f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d801      	bhi.n	8005900 <create_chain+0x46>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e070      	b.n	80059e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d101      	bne.n	800590c <create_chain+0x52>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	e06a      	b.n	80059e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	69db      	ldr	r3, [r3, #28]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	429a      	cmp	r2, r3
 8005914:	d201      	bcs.n	800591a <create_chain+0x60>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	e063      	b.n	80059e2 <create_chain+0x128>
		scl = clst;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	3301      	adds	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	429a      	cmp	r2, r3
 8005930:	d307      	bcc.n	8005942 <create_chain+0x88>
				ncl = 2;
 8005932:	2302      	movs	r3, #2
 8005934:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	429a      	cmp	r2, r3
 800593c:	d901      	bls.n	8005942 <create_chain+0x88>
 800593e:	2300      	movs	r3, #0
 8005940:	e04f      	b.n	80059e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff fd66 	bl	8005416 <get_fat>
 800594a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00e      	beq.n	8005970 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d003      	beq.n	8005960 <create_chain+0xa6>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595e:	d101      	bne.n	8005964 <create_chain+0xaa>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	e03e      	b.n	80059e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	429a      	cmp	r2, r3
 800596a:	d1da      	bne.n	8005922 <create_chain+0x68>
 800596c:	2300      	movs	r3, #0
 800596e:	e038      	b.n	80059e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005970:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005972:	f04f 32ff 	mov.w	r2, #4294967295
 8005976:	69f9      	ldr	r1, [r7, #28]
 8005978:	6938      	ldr	r0, [r7, #16]
 800597a:	f7ff fe1f 	bl	80055bc <put_fat>
 800597e:	4603      	mov	r3, r0
 8005980:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005982:	7dfb      	ldrb	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <create_chain+0xe2>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d006      	beq.n	800599c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6938      	ldr	r0, [r7, #16]
 8005994:	f7ff fe12 	bl	80055bc <put_fat>
 8005998:	4603      	mov	r3, r0
 800599a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800599c:	7dfb      	ldrb	r3, [r7, #23]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d116      	bne.n	80059d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	699a      	ldr	r2, [r3, #24]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	3b02      	subs	r3, #2
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d804      	bhi.n	80059c0 <create_chain+0x106>
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	1e5a      	subs	r2, r3, #1
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	791b      	ldrb	r3, [r3, #4]
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	711a      	strb	r2, [r3, #4]
 80059ce:	e007      	b.n	80059e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d102      	bne.n	80059dc <create_chain+0x122>
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	e000      	b.n	80059de <create_chain+0x124>
 80059dc:	2301      	movs	r3, #1
 80059de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80059e0:	69fb      	ldr	r3, [r7, #28]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b087      	sub	sp, #28
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fe:	3304      	adds	r3, #4
 8005a00:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	899b      	ldrh	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	8952      	ldrh	r2, [r2, #10]
 8005a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	1d1a      	adds	r2, r3, #4
 8005a1c:	613a      	str	r2, [r7, #16]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <clmt_clust+0x42>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e010      	b.n	8005a4e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d307      	bcc.n	8005a44 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a42:	e7e9      	b.n	8005a18 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005a44:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b086      	sub	sp, #24
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a70:	d204      	bcs.n	8005a7c <dir_sdi+0x22>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	e071      	b.n	8005b64 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <dir_sdi+0x46>
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d902      	bls.n	8005aa0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10c      	bne.n	8005ac0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	095b      	lsrs	r3, r3, #5
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	8912      	ldrh	r2, [r2, #8]
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d301      	bcc.n	8005ab6 <dir_sdi+0x5c>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e056      	b.n	8005b64 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	61da      	str	r2, [r3, #28]
 8005abe:	e02d      	b.n	8005b1c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	895b      	ldrh	r3, [r3, #10]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	899b      	ldrh	r3, [r3, #12]
 8005aca:	fb02 f303 	mul.w	r3, r2, r3
 8005ace:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ad0:	e019      	b.n	8005b06 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6979      	ldr	r1, [r7, #20]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fc9d 	bl	8005416 <get_fat>
 8005adc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae4:	d101      	bne.n	8005aea <dir_sdi+0x90>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e03c      	b.n	8005b64 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d904      	bls.n	8005afa <dir_sdi+0xa0>
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d301      	bcc.n	8005afe <dir_sdi+0xa4>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e032      	b.n	8005b64 <dir_sdi+0x10a>
			ofs -= csz;
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005b06:	683a      	ldr	r2, [r7, #0]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d2e1      	bcs.n	8005ad2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005b0e:	6979      	ldr	r1, [r7, #20]
 8005b10:	6938      	ldr	r0, [r7, #16]
 8005b12:	f7ff fc61 	bl	80053d8 <clust2sect>
 8005b16:	4602      	mov	r2, r0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <dir_sdi+0xd4>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e01a      	b.n	8005b64 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	899b      	ldrh	r3, [r3, #12]
 8005b36:	4619      	mov	r1, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b3e:	441a      	add	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	899b      	ldrh	r3, [r3, #12]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b56:	fb00 f202 	mul.w	r2, r0, r2
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	18ca      	adds	r2, r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3718      	adds	r7, #24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	3320      	adds	r3, #32
 8005b82:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <dir_next+0x28>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b92:	d301      	bcc.n	8005b98 <dir_next+0x2c>
 8005b94:	2304      	movs	r3, #4
 8005b96:	e0bb      	b.n	8005d10 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	899b      	ldrh	r3, [r3, #12]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba4:	fb01 f202 	mul.w	r2, r1, r2
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 809d 	bne.w	8005cea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10b      	bne.n	8005bda <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	8912      	ldrh	r2, [r2, #8]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	f0c0 808d 	bcc.w	8005cea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61da      	str	r2, [r3, #28]
 8005bd6:	2304      	movs	r3, #4
 8005bd8:	e09a      	b.n	8005d10 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	899b      	ldrh	r3, [r3, #12]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	8952      	ldrh	r2, [r2, #10]
 8005bea:	3a01      	subs	r2, #1
 8005bec:	4013      	ands	r3, r2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d17b      	bne.n	8005cea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7ff fc0b 	bl	8005416 <get_fat>
 8005c00:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d801      	bhi.n	8005c0c <dir_next+0xa0>
 8005c08:	2302      	movs	r3, #2
 8005c0a:	e081      	b.n	8005d10 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d101      	bne.n	8005c18 <dir_next+0xac>
 8005c14:	2301      	movs	r3, #1
 8005c16:	e07b      	b.n	8005d10 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	69db      	ldr	r3, [r3, #28]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d359      	bcc.n	8005cd6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e06e      	b.n	8005d10 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f7ff fe3d 	bl	80058ba <create_chain>
 8005c40:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <dir_next+0xe0>
 8005c48:	2307      	movs	r3, #7
 8005c4a:	e061      	b.n	8005d10 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <dir_next+0xea>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e05c      	b.n	8005d10 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d101      	bne.n	8005c62 <dir_next+0xf6>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e056      	b.n	8005d10 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fad6 	bl	8005214 <sync_window>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <dir_next+0x106>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e04e      	b.n	8005d10 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	899b      	ldrh	r3, [r3, #12]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	2100      	movs	r1, #0
 8005c80:	f7ff f8ce 	bl	8004e20 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff fba4 	bl	80053d8 <clust2sect>
 8005c90:	4602      	mov	r2, r0
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c96:	e012      	b.n	8005cbe <dir_next+0x152>
						fs->wflag = 1;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fab8 	bl	8005214 <sync_window>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <dir_next+0x142>
 8005caa:	2301      	movs	r3, #1
 8005cac:	e030      	b.n	8005d10 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	895b      	ldrh	r3, [r3, #10]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d3e6      	bcc.n	8005c98 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad2      	subs	r2, r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005cdc:	6979      	ldr	r1, [r7, #20]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fb7a 	bl	80053d8 <clust2sect>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	899b      	ldrh	r3, [r3, #12]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d02:	fb00 f202 	mul.w	r2, r0, r2
 8005d06:	1a9b      	subs	r3, r3, r2
 8005d08:	18ca      	adds	r2, r1, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005d28:	2100      	movs	r1, #0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff fe95 	bl	8005a5a <dir_sdi>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005d34:	7dfb      	ldrb	r3, [r7, #23]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d12b      	bne.n	8005d92 <dir_alloc+0x7a>
		n = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f7ff faa9 	bl	800529c <move_window>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11d      	bne.n	8005d90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2be5      	cmp	r3, #229	@ 0xe5
 8005d5c:	d004      	beq.n	8005d68 <dir_alloc+0x50>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d107      	bne.n	8005d78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d102      	bne.n	8005d7c <dir_alloc+0x64>
 8005d76:	e00c      	b.n	8005d92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d78:	2300      	movs	r3, #0
 8005d7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7ff fef4 	bl	8005b6c <dir_next>
 8005d84:	4603      	mov	r3, r0
 8005d86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005d88:	7dfb      	ldrb	r3, [r7, #23]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0d7      	beq.n	8005d3e <dir_alloc+0x26>
 8005d8e:	e000      	b.n	8005d92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005d90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d101      	bne.n	8005d9c <dir_alloc+0x84>
 8005d98:	2307      	movs	r3, #7
 8005d9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3718      	adds	r7, #24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
 8005dae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	331a      	adds	r3, #26
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe ff8f 	bl	8004cd8 <ld_word>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d109      	bne.n	8005dda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fe ff84 	bl	8004cd8 <ld_word>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	041b      	lsls	r3, r3, #16
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005dda:	68fb      	ldr	r3, [r7, #12]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	331a      	adds	r3, #26
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	b292      	uxth	r2, r2
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fe ffa8 	bl	8004d50 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d109      	bne.n	8005e1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f103 0214 	add.w	r2, r3, #20
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe ff9a 	bl	8004d50 <st_word>
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005e32:	2100      	movs	r1, #0
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fe10 	bl	8005a5a <dir_sdi>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <dir_find+0x24>
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
 8005e46:	e03e      	b.n	8005ec6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6938      	ldr	r0, [r7, #16]
 8005e50:	f7ff fa24 	bl	800529c <move_window>
 8005e54:	4603      	mov	r3, r0
 8005e56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d12f      	bne.n	8005ebe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <dir_find+0x4e>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	75fb      	strb	r3, [r7, #23]
 8005e70:	e028      	b.n	8005ec4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	330b      	adds	r3, #11
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	330b      	adds	r3, #11
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <dir_find+0x86>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a18      	ldr	r0, [r3, #32]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3324      	adds	r3, #36	@ 0x24
 8005e9c:	220b      	movs	r2, #11
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	f7fe ffd9 	bl	8004e56 <mem_cmp>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005eaa:	2100      	movs	r1, #0
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fe5d 	bl	8005b6c <dir_next>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0c5      	beq.n	8005e48 <dir_find+0x24>
 8005ebc:	e002      	b.n	8005ec4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005ec2:	bf00      	nop

	return res;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ff1a 	bl	8005d18 <dir_alloc>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11c      	bne.n	8005f28 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	68b8      	ldr	r0, [r7, #8]
 8005ef6:	f7ff f9d1 	bl	800529c <move_window>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d111      	bne.n	8005f28 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe ff87 	bl	8004e20 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a18      	ldr	r0, [r3, #32]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3324      	adds	r3, #36	@ 0x24
 8005f1a:	220b      	movs	r2, #11
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	f7fe ff5e 	bl	8004dde <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2201      	movs	r2, #1
 8005f26:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3324      	adds	r3, #36	@ 0x24
 8005f48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005f4a:	220b      	movs	r2, #11
 8005f4c:	2120      	movs	r1, #32
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f7fe ff66 	bl	8004e20 <mem_set>
	si = i = 0; ni = 8;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	2308      	movs	r3, #8
 8005f5e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	61fa      	str	r2, [r7, #28]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005f6e:	7efb      	ldrb	r3, [r7, #27]
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d94e      	bls.n	8006012 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005f74:	7efb      	ldrb	r3, [r7, #27]
 8005f76:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f78:	d006      	beq.n	8005f88 <create_name+0x54>
 8005f7a:	7efb      	ldrb	r3, [r7, #27]
 8005f7c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f7e:	d110      	bne.n	8005fa2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005f80:	e002      	b.n	8005f88 <create_name+0x54>
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	3301      	adds	r3, #1
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f92:	d0f6      	beq.n	8005f82 <create_name+0x4e>
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	4413      	add	r3, r2
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f9e:	d0f0      	beq.n	8005f82 <create_name+0x4e>
			break;
 8005fa0:	e038      	b.n	8006014 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005fa2:	7efb      	ldrb	r3, [r7, #27]
 8005fa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fa6:	d003      	beq.n	8005fb0 <create_name+0x7c>
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d30c      	bcc.n	8005fca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b0b      	cmp	r3, #11
 8005fb4:	d002      	beq.n	8005fbc <create_name+0x88>
 8005fb6:	7efb      	ldrb	r3, [r7, #27]
 8005fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fba:	d001      	beq.n	8005fc0 <create_name+0x8c>
 8005fbc:	2306      	movs	r3, #6
 8005fbe:	e044      	b.n	800604a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	230b      	movs	r3, #11
 8005fc6:	617b      	str	r3, [r7, #20]
			continue;
 8005fc8:	e022      	b.n	8006010 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005fca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da04      	bge.n	8005fdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005fd2:	7efb      	ldrb	r3, [r7, #27]
 8005fd4:	3b80      	subs	r3, #128	@ 0x80
 8005fd6:	4a1f      	ldr	r2, [pc, #124]	@ (8006054 <create_name+0x120>)
 8005fd8:	5cd3      	ldrb	r3, [r2, r3]
 8005fda:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005fdc:	7efb      	ldrb	r3, [r7, #27]
 8005fde:	4619      	mov	r1, r3
 8005fe0:	481d      	ldr	r0, [pc, #116]	@ (8006058 <create_name+0x124>)
 8005fe2:	f7fe ff5f 	bl	8004ea4 <chk_chr>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d001      	beq.n	8005ff0 <create_name+0xbc>
 8005fec:	2306      	movs	r3, #6
 8005fee:	e02c      	b.n	800604a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005ff0:	7efb      	ldrb	r3, [r7, #27]
 8005ff2:	2b60      	cmp	r3, #96	@ 0x60
 8005ff4:	d905      	bls.n	8006002 <create_name+0xce>
 8005ff6:	7efb      	ldrb	r3, [r7, #27]
 8005ff8:	2b7a      	cmp	r3, #122	@ 0x7a
 8005ffa:	d802      	bhi.n	8006002 <create_name+0xce>
 8005ffc:	7efb      	ldrb	r3, [r7, #27]
 8005ffe:	3b20      	subs	r3, #32
 8006000:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	613a      	str	r2, [r7, #16]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	4413      	add	r3, r2
 800600c:	7efa      	ldrb	r2, [r7, #27]
 800600e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006010:	e7a6      	b.n	8005f60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006012:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	441a      	add	r2, r3
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <create_name+0xf4>
 8006024:	2306      	movs	r3, #6
 8006026:	e010      	b.n	800604a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2be5      	cmp	r3, #229	@ 0xe5
 800602e:	d102      	bne.n	8006036 <create_name+0x102>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	2205      	movs	r2, #5
 8006034:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006036:	7efb      	ldrb	r3, [r7, #27]
 8006038:	2b20      	cmp	r3, #32
 800603a:	d801      	bhi.n	8006040 <create_name+0x10c>
 800603c:	2204      	movs	r2, #4
 800603e:	e000      	b.n	8006042 <create_name+0x10e>
 8006040:	2200      	movs	r2, #0
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	330b      	adds	r3, #11
 8006046:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006048:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	0800a0fc 	.word	0x0800a0fc
 8006058:	0800a098 	.word	0x0800a098

0800605c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006070:	e002      	b.n	8006078 <follow_path+0x1c>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b2f      	cmp	r3, #47	@ 0x2f
 800607e:	d0f8      	beq.n	8006072 <follow_path+0x16>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b5c      	cmp	r3, #92	@ 0x5c
 8006086:	d0f4      	beq.n	8006072 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b1f      	cmp	r3, #31
 8006094:	d80a      	bhi.n	80060ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2280      	movs	r2, #128	@ 0x80
 800609a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800609e:	2100      	movs	r1, #0
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff fcda 	bl	8005a5a <dir_sdi>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]
 80060aa:	e048      	b.n	800613e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80060ac:	463b      	mov	r3, r7
 80060ae:	4619      	mov	r1, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff3f 	bl	8005f34 <create_name>
 80060b6:	4603      	mov	r3, r0
 80060b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d139      	bne.n	8006134 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff feaf 	bl	8005e24 <dir_find>
 80060c6:	4603      	mov	r3, r0
 80060c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80060d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d12c      	bne.n	8006138 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d127      	bne.n	8006138 <follow_path+0xdc>
 80060e8:	2305      	movs	r3, #5
 80060ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80060ec:	e024      	b.n	8006138 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80060ee:	7afb      	ldrb	r3, [r7, #11]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d121      	bne.n	800613c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	799b      	ldrb	r3, [r3, #6]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	d102      	bne.n	800610a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006104:	2305      	movs	r3, #5
 8006106:	75fb      	strb	r3, [r7, #23]
 8006108:	e019      	b.n	800613e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	8992      	ldrh	r2, [r2, #12]
 8006118:	fbb3 f0f2 	udiv	r0, r3, r2
 800611c:	fb00 f202 	mul.w	r2, r0, r2
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	440b      	add	r3, r1
 8006124:	4619      	mov	r1, r3
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f7ff fe3d 	bl	8005da6 <ld_clust>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006132:	e7bb      	b.n	80060ac <follow_path+0x50>
			if (res != FR_OK) break;
 8006134:	bf00      	nop
 8006136:	e002      	b.n	800613e <follow_path+0xe2>
				break;
 8006138:	bf00      	nop
 800613a:	e000      	b.n	800613e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800613c:	bf00      	nop
			}
		}
	}

	return res;
 800613e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d031      	beq.n	80061c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e002      	b.n	800616c <get_ldnumber+0x24>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3301      	adds	r3, #1
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b20      	cmp	r3, #32
 8006172:	d903      	bls.n	800617c <get_ldnumber+0x34>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b3a      	cmp	r3, #58	@ 0x3a
 800617a:	d1f4      	bne.n	8006166 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2b3a      	cmp	r3, #58	@ 0x3a
 8006182:	d11c      	bne.n	80061be <get_ldnumber+0x76>
			tp = *path;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	60fa      	str	r2, [r7, #12]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	3b30      	subs	r3, #48	@ 0x30
 8006194:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b09      	cmp	r3, #9
 800619a:	d80e      	bhi.n	80061ba <get_ldnumber+0x72>
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d10a      	bne.n	80061ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d107      	bne.n	80061ba <get_ldnumber+0x72>
					vol = (int)i;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	3301      	adds	r3, #1
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	e002      	b.n	80061c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80061c2:	693b      	ldr	r3, [r7, #16]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	70da      	strb	r2, [r3, #3]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f04f 32ff 	mov.w	r2, #4294967295
 80061e6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff f856 	bl	800529c <move_window>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <check_fs+0x2a>
 80061f6:	2304      	movs	r3, #4
 80061f8:	e038      	b.n	800626c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3338      	adds	r3, #56	@ 0x38
 80061fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006202:	4618      	mov	r0, r3
 8006204:	f7fe fd68 	bl	8004cd8 <ld_word>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006210:	429a      	cmp	r2, r3
 8006212:	d001      	beq.n	8006218 <check_fs+0x48>
 8006214:	2303      	movs	r3, #3
 8006216:	e029      	b.n	800626c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800621e:	2be9      	cmp	r3, #233	@ 0xe9
 8006220:	d009      	beq.n	8006236 <check_fs+0x66>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006228:	2beb      	cmp	r3, #235	@ 0xeb
 800622a:	d11e      	bne.n	800626a <check_fs+0x9a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8006232:	2b90      	cmp	r3, #144	@ 0x90
 8006234:	d119      	bne.n	800626a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3338      	adds	r3, #56	@ 0x38
 800623a:	3336      	adds	r3, #54	@ 0x36
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fd64 	bl	8004d0a <ld_dword>
 8006242:	4603      	mov	r3, r0
 8006244:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006248:	4a0a      	ldr	r2, [pc, #40]	@ (8006274 <check_fs+0xa4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d101      	bne.n	8006252 <check_fs+0x82>
 800624e:	2300      	movs	r3, #0
 8006250:	e00c      	b.n	800626c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3338      	adds	r3, #56	@ 0x38
 8006256:	3352      	adds	r3, #82	@ 0x52
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fd56 	bl	8004d0a <ld_dword>
 800625e:	4603      	mov	r3, r0
 8006260:	4a05      	ldr	r2, [pc, #20]	@ (8006278 <check_fs+0xa8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <check_fs+0x9a>
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800626a:	2302      	movs	r3, #2
}
 800626c:	4618      	mov	r0, r3
 800626e:	3708      	adds	r7, #8
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	00544146 	.word	0x00544146
 8006278:	33544146 	.word	0x33544146

0800627c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b096      	sub	sp, #88	@ 0x58
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f7ff ff59 	bl	8006148 <get_ldnumber>
 8006296:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	2b00      	cmp	r3, #0
 800629c:	da01      	bge.n	80062a2 <find_volume+0x26>
 800629e:	230b      	movs	r3, #11
 80062a0:	e26a      	b.n	8006778 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80062a2:	4aa3      	ldr	r2, [pc, #652]	@ (8006530 <find_volume+0x2b4>)
 80062a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80062ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <find_volume+0x3a>
 80062b2:	230c      	movs	r3, #12
 80062b4:	e260      	b.n	8006778 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 80062b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062b8:	f7fe fe0f 	bl	8004eda <lock_fs>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <find_volume+0x4a>
 80062c2:	230f      	movs	r3, #15
 80062c4:	e258      	b.n	8006778 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80062cc:	79fb      	ldrb	r3, [r7, #7]
 80062ce:	f023 0301 	bic.w	r3, r3, #1
 80062d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80062d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01a      	beq.n	8006312 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	785b      	ldrb	r3, [r3, #1]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fc5b 	bl	8004b9c <disk_status>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80062ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10c      	bne.n	8006312 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <find_volume+0x92>
 80062fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800630a:	230a      	movs	r3, #10
 800630c:	e234      	b.n	8006778 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800630e:	2300      	movs	r3, #0
 8006310:	e232      	b.n	8006778 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800631a:	b2da      	uxtb	r2, r3
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fc53 	bl	8004bd0 <disk_initialize>
 800632a:	4603      	mov	r3, r0
 800632c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006330:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800633c:	2303      	movs	r3, #3
 800633e:	e21b      	b.n	8006778 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <find_volume+0xda>
 8006346:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006352:	230a      	movs	r3, #10
 8006354:	e210      	b.n	8006778 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	7858      	ldrb	r0, [r3, #1]
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	330c      	adds	r3, #12
 800635e:	461a      	mov	r2, r3
 8006360:	2102      	movs	r1, #2
 8006362:	f7fe fc9b 	bl	8004c9c <disk_ioctl>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <find_volume+0xf4>
 800636c:	2301      	movs	r3, #1
 800636e:	e203      	b.n	8006778 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006372:	899b      	ldrh	r3, [r3, #12]
 8006374:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006378:	d80d      	bhi.n	8006396 <find_volume+0x11a>
 800637a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800637c:	899b      	ldrh	r3, [r3, #12]
 800637e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006382:	d308      	bcc.n	8006396 <find_volume+0x11a>
 8006384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006386:	899b      	ldrh	r3, [r3, #12]
 8006388:	461a      	mov	r2, r3
 800638a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800638c:	899b      	ldrh	r3, [r3, #12]
 800638e:	3b01      	subs	r3, #1
 8006390:	4013      	ands	r3, r2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <find_volume+0x11e>
 8006396:	2301      	movs	r3, #1
 8006398:	e1ee      	b.n	8006778 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800639e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80063a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80063a2:	f7ff ff15 	bl	80061d0 <check_fs>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80063ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d149      	bne.n	8006448 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063b4:	2300      	movs	r3, #0
 80063b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063b8:	e01e      	b.n	80063f8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80063ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063bc:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80063c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80063c8:	4413      	add	r3, r2
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80063cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ce:	3304      	adds	r3, #4
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d006      	beq.n	80063e4 <find_volume+0x168>
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	3308      	adds	r3, #8
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fc95 	bl	8004d0a <ld_dword>
 80063e0:	4602      	mov	r2, r0
 80063e2:	e000      	b.n	80063e6 <find_volume+0x16a>
 80063e4:	2200      	movs	r2, #0
 80063e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	3358      	adds	r3, #88	@ 0x58
 80063ec:	443b      	add	r3, r7
 80063ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80063f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f4:	3301      	adds	r3, #1
 80063f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d9dd      	bls.n	80063ba <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80063fe:	2300      	movs	r3, #0
 8006400:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <find_volume+0x192>
 8006408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800640a:	3b01      	subs	r3, #1
 800640c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800640e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	3358      	adds	r3, #88	@ 0x58
 8006414:	443b      	add	r3, r7
 8006416:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800641a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800641c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <find_volume+0x1b2>
 8006422:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006424:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006426:	f7ff fed3 	bl	80061d0 <check_fs>
 800642a:	4603      	mov	r3, r0
 800642c:	e000      	b.n	8006430 <find_volume+0x1b4>
 800642e:	2303      	movs	r3, #3
 8006430:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006434:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006438:	2b01      	cmp	r3, #1
 800643a:	d905      	bls.n	8006448 <find_volume+0x1cc>
 800643c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800643e:	3301      	adds	r3, #1
 8006440:	643b      	str	r3, [r7, #64]	@ 0x40
 8006442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006444:	2b03      	cmp	r3, #3
 8006446:	d9e2      	bls.n	800640e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006448:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800644c:	2b04      	cmp	r3, #4
 800644e:	d101      	bne.n	8006454 <find_volume+0x1d8>
 8006450:	2301      	movs	r3, #1
 8006452:	e191      	b.n	8006778 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006458:	2b01      	cmp	r3, #1
 800645a:	d901      	bls.n	8006460 <find_volume+0x1e4>
 800645c:	230d      	movs	r3, #13
 800645e:	e18b      	b.n	8006778 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006462:	3338      	adds	r3, #56	@ 0x38
 8006464:	330b      	adds	r3, #11
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe fc36 	bl	8004cd8 <ld_word>
 800646c:	4603      	mov	r3, r0
 800646e:	461a      	mov	r2, r3
 8006470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006472:	899b      	ldrh	r3, [r3, #12]
 8006474:	429a      	cmp	r2, r3
 8006476:	d001      	beq.n	800647c <find_volume+0x200>
 8006478:	230d      	movs	r3, #13
 800647a:	e17d      	b.n	8006778 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	3338      	adds	r3, #56	@ 0x38
 8006480:	3316      	adds	r3, #22
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fc28 	bl	8004cd8 <ld_word>
 8006488:	4603      	mov	r3, r0
 800648a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800648c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800648e:	2b00      	cmp	r3, #0
 8006490:	d106      	bne.n	80064a0 <find_volume+0x224>
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	3338      	adds	r3, #56	@ 0x38
 8006496:	3324      	adds	r3, #36	@ 0x24
 8006498:	4618      	mov	r0, r3
 800649a:	f7fe fc36 	bl	8004d0a <ld_dword>
 800649e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064a4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80064ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	789b      	ldrb	r3, [r3, #2]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d005      	beq.n	80064c4 <find_volume+0x248>
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	789b      	ldrb	r3, [r3, #2]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d001      	beq.n	80064c4 <find_volume+0x248>
 80064c0:	230d      	movs	r3, #13
 80064c2:	e159      	b.n	8006778 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	789b      	ldrb	r3, [r3, #2]
 80064c8:	461a      	mov	r2, r3
 80064ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064cc:	fb02 f303 	mul.w	r3, r2, r3
 80064d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80064d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064d8:	461a      	mov	r2, r3
 80064da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064dc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80064de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e0:	895b      	ldrh	r3, [r3, #10]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <find_volume+0x27c>
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	895b      	ldrh	r3, [r3, #10]
 80064ea:	461a      	mov	r2, r3
 80064ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ee:	895b      	ldrh	r3, [r3, #10]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <find_volume+0x280>
 80064f8:	230d      	movs	r3, #13
 80064fa:	e13d      	b.n	8006778 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80064fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064fe:	3338      	adds	r3, #56	@ 0x38
 8006500:	3311      	adds	r3, #17
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fbe8 	bl	8004cd8 <ld_word>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006512:	891b      	ldrh	r3, [r3, #8]
 8006514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006516:	8992      	ldrh	r2, [r2, #12]
 8006518:	0952      	lsrs	r2, r2, #5
 800651a:	b292      	uxth	r2, r2
 800651c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006520:	fb01 f202 	mul.w	r2, r1, r2
 8006524:	1a9b      	subs	r3, r3, r2
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <find_volume+0x2b8>
 800652c:	230d      	movs	r3, #13
 800652e:	e123      	b.n	8006778 <find_volume+0x4fc>
 8006530:	20001df0 	.word	0x20001df0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006536:	3338      	adds	r3, #56	@ 0x38
 8006538:	3313      	adds	r3, #19
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fbcc 	bl	8004cd8 <ld_word>
 8006540:	4603      	mov	r3, r0
 8006542:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006546:	2b00      	cmp	r3, #0
 8006548:	d106      	bne.n	8006558 <find_volume+0x2dc>
 800654a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654c:	3338      	adds	r3, #56	@ 0x38
 800654e:	3320      	adds	r3, #32
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fbda 	bl	8004d0a <ld_dword>
 8006556:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800655a:	3338      	adds	r3, #56	@ 0x38
 800655c:	330e      	adds	r3, #14
 800655e:	4618      	mov	r0, r3
 8006560:	f7fe fbba 	bl	8004cd8 <ld_word>
 8006564:	4603      	mov	r3, r0
 8006566:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006568:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <find_volume+0x2f6>
 800656e:	230d      	movs	r3, #13
 8006570:	e102      	b.n	8006778 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006572:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006574:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006576:	4413      	add	r3, r2
 8006578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800657a:	8911      	ldrh	r1, [r2, #8]
 800657c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800657e:	8992      	ldrh	r2, [r2, #12]
 8006580:	0952      	lsrs	r2, r2, #5
 8006582:	b292      	uxth	r2, r2
 8006584:	fbb1 f2f2 	udiv	r2, r1, r2
 8006588:	b292      	uxth	r2, r2
 800658a:	4413      	add	r3, r2
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800658e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006592:	429a      	cmp	r2, r3
 8006594:	d201      	bcs.n	800659a <find_volume+0x31e>
 8006596:	230d      	movs	r3, #13
 8006598:	e0ee      	b.n	8006778 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800659a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065a2:	8952      	ldrh	r2, [r2, #10]
 80065a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <find_volume+0x338>
 80065b0:	230d      	movs	r3, #13
 80065b2:	e0e1      	b.n	8006778 <find_volume+0x4fc>
		fmt = FS_FAT32;
 80065b4:	2303      	movs	r3, #3
 80065b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80065ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065bc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d802      	bhi.n	80065ca <find_volume+0x34e>
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d802      	bhi.n	80065da <find_volume+0x35e>
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	1c9a      	adds	r2, r3, #2
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065e6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80065e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80065ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ec:	441a      	add	r2, r3
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80065f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	441a      	add	r2, r3
 80065f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80065fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006600:	2b03      	cmp	r3, #3
 8006602:	d11e      	bne.n	8006642 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	3338      	adds	r3, #56	@ 0x38
 8006608:	332a      	adds	r3, #42	@ 0x2a
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fb64 	bl	8004cd8 <ld_word>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <find_volume+0x39e>
 8006616:	230d      	movs	r3, #13
 8006618:	e0ae      	b.n	8006778 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	891b      	ldrh	r3, [r3, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <find_volume+0x3aa>
 8006622:	230d      	movs	r3, #13
 8006624:	e0a8      	b.n	8006778 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	3338      	adds	r3, #56	@ 0x38
 800662a:	332c      	adds	r3, #44	@ 0x2c
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fb6c 	bl	8004d0a <ld_dword>
 8006632:	4602      	mov	r2, r0
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006640:	e01f      	b.n	8006682 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	891b      	ldrh	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <find_volume+0x3d2>
 800664a:	230d      	movs	r3, #13
 800664c:	e094      	b.n	8006778 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800664e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006652:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006654:	441a      	add	r2, r3
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800665a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800665e:	2b02      	cmp	r3, #2
 8006660:	d103      	bne.n	800666a <find_volume+0x3ee>
 8006662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	e00a      	b.n	8006680 <find_volume+0x404>
 800666a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666c:	69da      	ldr	r2, [r3, #28]
 800666e:	4613      	mov	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	4413      	add	r3, r2
 8006674:	085a      	lsrs	r2, r3, #1
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006680:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	6a1a      	ldr	r2, [r3, #32]
 8006686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006688:	899b      	ldrh	r3, [r3, #12]
 800668a:	4619      	mov	r1, r3
 800668c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668e:	440b      	add	r3, r1
 8006690:	3b01      	subs	r3, #1
 8006692:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006694:	8989      	ldrh	r1, [r1, #12]
 8006696:	fbb3 f3f1 	udiv	r3, r3, r1
 800669a:	429a      	cmp	r2, r3
 800669c:	d201      	bcs.n	80066a2 <find_volume+0x426>
 800669e:	230d      	movs	r3, #13
 80066a0:	e06a      	b.n	8006778 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	f04f 32ff 	mov.w	r2, #4294967295
 80066a8:	619a      	str	r2, [r3, #24]
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	699a      	ldr	r2, [r3, #24]
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	2280      	movs	r2, #128	@ 0x80
 80066b6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80066b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066bc:	2b03      	cmp	r3, #3
 80066be:	d149      	bne.n	8006754 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80066c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c2:	3338      	adds	r3, #56	@ 0x38
 80066c4:	3330      	adds	r3, #48	@ 0x30
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe fb06 	bl	8004cd8 <ld_word>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d140      	bne.n	8006754 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80066d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066d4:	3301      	adds	r3, #1
 80066d6:	4619      	mov	r1, r3
 80066d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066da:	f7fe fddf 	bl	800529c <move_window>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d137      	bne.n	8006754 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	2200      	movs	r2, #0
 80066e8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	3338      	adds	r3, #56	@ 0x38
 80066ee:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe faf0 	bl	8004cd8 <ld_word>
 80066f8:	4603      	mov	r3, r0
 80066fa:	461a      	mov	r2, r3
 80066fc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8006700:	429a      	cmp	r2, r3
 8006702:	d127      	bne.n	8006754 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006706:	3338      	adds	r3, #56	@ 0x38
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe fafe 	bl	8004d0a <ld_dword>
 800670e:	4603      	mov	r3, r0
 8006710:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <find_volume+0x504>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d11e      	bne.n	8006754 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	3338      	adds	r3, #56	@ 0x38
 800671a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe faf3 	bl	8004d0a <ld_dword>
 8006724:	4603      	mov	r3, r0
 8006726:	4a17      	ldr	r2, [pc, #92]	@ (8006784 <find_volume+0x508>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d113      	bne.n	8006754 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800672c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672e:	3338      	adds	r3, #56	@ 0x38
 8006730:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe fae8 	bl	8004d0a <ld_dword>
 800673a:	4602      	mov	r2, r0
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	3338      	adds	r3, #56	@ 0x38
 8006744:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fade 	bl	8004d0a <ld_dword>
 800674e:	4602      	mov	r2, r0
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006756:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800675a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800675c:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <find_volume+0x50c>)
 800675e:	881b      	ldrh	r3, [r3, #0]
 8006760:	3301      	adds	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	4b08      	ldr	r3, [pc, #32]	@ (8006788 <find_volume+0x50c>)
 8006766:	801a      	strh	r2, [r3, #0]
 8006768:	4b07      	ldr	r3, [pc, #28]	@ (8006788 <find_volume+0x50c>)
 800676a:	881a      	ldrh	r2, [r3, #0]
 800676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006770:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006772:	f7fe fd2b 	bl	80051cc <clear_lock>
#endif
	return FR_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3758      	adds	r7, #88	@ 0x58
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	41615252 	.word	0x41615252
 8006784:	61417272 	.word	0x61417272
 8006788:	20001df4 	.word	0x20001df4

0800678c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006796:	2309      	movs	r3, #9
 8006798:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02e      	beq.n	80067fe <validate+0x72>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d02a      	beq.n	80067fe <validate+0x72>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d025      	beq.n	80067fe <validate+0x72>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	889a      	ldrh	r2, [r3, #4]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	88db      	ldrh	r3, [r3, #6]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d11e      	bne.n	80067fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fb88 	bl	8004eda <lock_fs>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d014      	beq.n	80067fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	785b      	ldrb	r3, [r3, #1]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fe f9e0 	bl	8004b9c <disk_status>
 80067dc:	4603      	mov	r3, r0
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <validate+0x60>
				res = FR_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
 80067ea:	e008      	b.n	80067fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fb87 	bl	8004f06 <unlock_fs>
 80067f8:	e001      	b.n	80067fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80067fa:	230f      	movs	r3, #15
 80067fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d102      	bne.n	800680a <validate+0x7e>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	e000      	b.n	800680c <validate+0x80>
 800680a:	2300      	movs	r3, #0
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	6013      	str	r3, [r2, #0]
	return res;
 8006810:	7bfb      	ldrb	r3, [r7, #15]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b098      	sub	sp, #96	@ 0x60
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	4613      	mov	r3, r2
 8006826:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <f_open+0x18>
 800682e:	2309      	movs	r3, #9
 8006830:	e1be      	b.n	8006bb0 <f_open+0x396>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006838:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800683a:	79fa      	ldrb	r2, [r7, #7]
 800683c:	f107 0110 	add.w	r1, r7, #16
 8006840:	f107 0308 	add.w	r3, r7, #8
 8006844:	4618      	mov	r0, r3
 8006846:	f7ff fd19 	bl	800627c <find_volume>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8006850:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 819b 	bne.w	8006b90 <f_open+0x376>
		dj.obj.fs = fs;
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f7ff fbf8 	bl	800605c <follow_path>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006876:	2b00      	cmp	r3, #0
 8006878:	d118      	bne.n	80068ac <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800687a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800687e:	b25b      	sxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	da03      	bge.n	800688c <f_open+0x72>
				res = FR_INVALID_NAME;
 8006884:	2306      	movs	r3, #6
 8006886:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800688a:	e00f      	b.n	80068ac <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	2b01      	cmp	r3, #1
 8006890:	bf8c      	ite	hi
 8006892:	2301      	movhi	r3, #1
 8006894:	2300      	movls	r3, #0
 8006896:	b2db      	uxtb	r3, r3
 8006898:	461a      	mov	r2, r3
 800689a:	f107 0314 	add.w	r3, r7, #20
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fe fb4b 	bl	8004f3c <chk_lock>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	f003 031c 	and.w	r3, r3, #28
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d07f      	beq.n	80069b6 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80068b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d017      	beq.n	80068ee <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80068be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	d10e      	bne.n	80068e4 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80068c6:	f7fe fb95 	bl	8004ff4 <enq_lock>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d006      	beq.n	80068de <f_open+0xc4>
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7ff fafa 	bl	8005ece <dir_register>
 80068da:	4603      	mov	r3, r0
 80068dc:	e000      	b.n	80068e0 <f_open+0xc6>
 80068de:	2312      	movs	r3, #18
 80068e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	f043 0308 	orr.w	r3, r3, #8
 80068ea:	71fb      	strb	r3, [r7, #7]
 80068ec:	e010      	b.n	8006910 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80068ee:	7ebb      	ldrb	r3, [r7, #26]
 80068f0:	f003 0311 	and.w	r3, r3, #17
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <f_open+0xe6>
					res = FR_DENIED;
 80068f8:	2307      	movs	r3, #7
 80068fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80068fe:	e007      	b.n	8006910 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <f_open+0xf6>
 800690a:	2308      	movs	r3, #8
 800690c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006914:	2b00      	cmp	r3, #0
 8006916:	d168      	bne.n	80069ea <f_open+0x1d0>
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d063      	beq.n	80069ea <f_open+0x1d0>
				dw = GET_FATTIME();
 8006922:	f7fe f8db 	bl	8004adc <get_fattime>
 8006926:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	330e      	adds	r3, #14
 800692c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800692e:	4618      	mov	r0, r3
 8006930:	f7fe fa29 	bl	8004d86 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	3316      	adds	r3, #22
 8006938:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe fa23 	bl	8004d86 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006942:	330b      	adds	r3, #11
 8006944:	2220      	movs	r2, #32
 8006946:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800694c:	4611      	mov	r1, r2
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff fa29 	bl	8005da6 <ld_clust>
 8006954:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800695a:	2200      	movs	r2, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fa41 	bl	8005de4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006964:	331c      	adds	r3, #28
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe fa0c 	bl	8004d86 <st_dword>
					fs->wflag = 1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2201      	movs	r2, #1
 8006972:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d037      	beq.n	80069ea <f_open+0x1d0>
						dw = fs->winsect;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	2200      	movs	r2, #0
 8006986:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe ff31 	bl	80057f0 <remove_chain>
 800698e:	4603      	mov	r3, r0
 8006990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8006994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006998:	2b00      	cmp	r3, #0
 800699a:	d126      	bne.n	80069ea <f_open+0x1d0>
							res = move_window(fs, dw);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7fe fc7b 	bl	800529c <move_window>
 80069a6:	4603      	mov	r3, r0
 80069a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80069b0:	3a01      	subs	r2, #1
 80069b2:	615a      	str	r2, [r3, #20]
 80069b4:	e019      	b.n	80069ea <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80069b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d115      	bne.n	80069ea <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80069be:	7ebb      	ldrb	r3, [r7, #26]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <f_open+0x1b6>
					res = FR_NO_FILE;
 80069c8:	2304      	movs	r3, #4
 80069ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80069ce:	e00c      	b.n	80069ea <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80069d0:	79fb      	ldrb	r3, [r7, #7]
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <f_open+0x1d0>
 80069da:	7ebb      	ldrb	r3, [r7, #26]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <f_open+0x1d0>
						res = FR_DENIED;
 80069e4:	2307      	movs	r3, #7
 80069e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80069ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d126      	bne.n	8006a40 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a02:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006a12:	79fb      	ldrb	r3, [r7, #7]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	bf8c      	ite	hi
 8006a18:	2301      	movhi	r3, #1
 8006a1a:	2300      	movls	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fb06 	bl	8005038 <inc_lock>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <f_open+0x226>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006a40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f040 80a3 	bne.w	8006b90 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff f9a8 	bl	8005da6 <ld_clust>
 8006a56:	4602      	mov	r2, r0
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	331c      	adds	r3, #28
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe f952 	bl	8004d0a <ld_dword>
 8006a66:	4602      	mov	r2, r0
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	88da      	ldrh	r2, [r3, #6]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	79fa      	ldrb	r2, [r7, #7]
 8006a84:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3330      	adds	r3, #48	@ 0x30
 8006a9c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe f9bc 	bl	8004e20 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006aa8:	79fb      	ldrb	r3, [r7, #7]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d06e      	beq.n	8006b90 <f_open+0x376>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d06a      	beq.n	8006b90 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	68da      	ldr	r2, [r3, #12]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	895b      	ldrh	r3, [r3, #10]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	899b      	ldrh	r3, [r3, #12]
 8006acc:	fb02 f303 	mul.w	r3, r2, r3
 8006ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ade:	e016      	b.n	8006b0e <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7fe fc96 	bl	8005416 <get_fat>
 8006aea:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006aec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d802      	bhi.n	8006af8 <f_open+0x2de>
 8006af2:	2302      	movs	r3, #2
 8006af4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	d102      	bne.n	8006b06 <f_open+0x2ec>
 8006b00:	2301      	movs	r3, #1
 8006b02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b06:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <f_open+0x304>
 8006b16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d8e0      	bhi.n	8006ae0 <f_open+0x2c6>
				}
				fp->clust = clst;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b22:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d131      	bne.n	8006b90 <f_open+0x376>
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	899b      	ldrh	r3, [r3, #12]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b38:	fb01 f202 	mul.w	r2, r1, r2
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d026      	beq.n	8006b90 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fc46 	bl	80053d8 <clust2sect>
 8006b4c:	6478      	str	r0, [r7, #68]	@ 0x44
 8006b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <f_open+0x342>
						res = FR_INT_ERR;
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8006b5a:	e019      	b.n	8006b90 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	899b      	ldrh	r3, [r3, #12]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b64:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6a:	441a      	add	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	7858      	ldrb	r0, [r3, #1]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1a      	ldr	r2, [r3, #32]
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f7fe f84c 	bl	8004c1c <disk_read>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d002      	beq.n	8006b90 <f_open+0x376>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006b90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <f_open+0x384>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7fe f9ad 	bl	8004f06 <unlock_fs>
 8006bac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3760      	adds	r7, #96	@ 0x60
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08c      	sub	sp, #48	@ 0x30
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f107 0210 	add.w	r2, r7, #16
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7ff fdd7 	bl	800678c <validate>
 8006bde:	4603      	mov	r3, r0
 8006be0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006be4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d107      	bne.n	8006bfc <f_write+0x44>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	7d5b      	ldrb	r3, [r3, #21]
 8006bf0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006bf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <f_write+0x58>
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006c02:	4611      	mov	r1, r2
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe f97e 	bl	8004f06 <unlock_fs>
 8006c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006c0e:	e192      	b.n	8006f36 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	7d1b      	ldrb	r3, [r3, #20]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d106      	bne.n	8006c2a <f_write+0x72>
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	2107      	movs	r1, #7
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe f970 	bl	8004f06 <unlock_fs>
 8006c26:	2307      	movs	r3, #7
 8006c28:	e185      	b.n	8006f36 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	441a      	add	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	f080 816a 	bcs.w	8006f10 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	43db      	mvns	r3, r3
 8006c42:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006c44:	e164      	b.n	8006f10 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	8992      	ldrh	r2, [r2, #12]
 8006c4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c52:	fb01 f202 	mul.w	r2, r1, r2
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f040 810f 	bne.w	8006e7c <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	8992      	ldrh	r2, [r2, #12]
 8006c66:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	8952      	ldrh	r2, [r2, #10]
 8006c6e:	3a01      	subs	r2, #1
 8006c70:	4013      	ands	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d14d      	bne.n	8006d16 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d11a      	bne.n	8006cc4 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe fe11 	bl	80058ba <create_chain>
 8006c98:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006c9a:	e013      	b.n	8006cc4 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7fe fe9d 	bl	80059ea <clmt_clust>
 8006cb0:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006cb2:	e007      	b.n	8006cc4 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7fe fdfc 	bl	80058ba <create_chain>
 8006cc2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f000 8127 	beq.w	8006f1a <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d109      	bne.n	8006ce6 <f_write+0x12e>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	755a      	strb	r2, [r3, #21]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2102      	movs	r1, #2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe f912 	bl	8004f06 <unlock_fs>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e127      	b.n	8006f36 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d109      	bne.n	8006d02 <f_write+0x14a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	755a      	strb	r2, [r3, #21]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe f904 	bl	8004f06 <unlock_fs>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e119      	b.n	8006f36 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d102      	bne.n	8006d16 <f_write+0x15e>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	7d1b      	ldrb	r3, [r3, #20]
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	da1d      	bge.n	8006d5c <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	7858      	ldrb	r0, [r3, #1]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f7fd ff94 	bl	8004c5c <disk_write>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d009      	beq.n	8006d4e <f_write+0x196>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	755a      	strb	r2, [r3, #21]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2101      	movs	r1, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe f8de 	bl	8004f06 <unlock_fs>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e0f3      	b.n	8006f36 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	7d1b      	ldrb	r3, [r3, #20]
 8006d52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d56:	b2da      	uxtb	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f7fe fb37 	bl	80053d8 <clust2sect>
 8006d6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <f_write+0x1ce>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2202      	movs	r2, #2
 8006d76:	755a      	strb	r2, [r3, #21]
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2102      	movs	r1, #2
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fe f8c2 	bl	8004f06 <unlock_fs>
 8006d82:	2302      	movs	r3, #2
 8006d84:	e0d7      	b.n	8006f36 <f_write+0x37e>
			sect += csect;
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	899b      	ldrh	r3, [r3, #12]
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d048      	beq.n	8006e34 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	4413      	add	r3, r2
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	8952      	ldrh	r2, [r2, #10]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d905      	bls.n	8006dbc <f_write+0x204>
					cc = fs->csize - csect;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	895b      	ldrh	r3, [r3, #10]
 8006db4:	461a      	mov	r2, r3
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	7858      	ldrb	r0, [r3, #1]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	69f9      	ldr	r1, [r7, #28]
 8006dc6:	f7fd ff49 	bl	8004c5c <disk_write>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d009      	beq.n	8006de4 <f_write+0x22c>
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	755a      	strb	r2, [r3, #21]
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe f893 	bl	8004f06 <unlock_fs>
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0a8      	b.n	8006f36 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	6a3a      	ldr	r2, [r7, #32]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d918      	bls.n	8006e24 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	8992      	ldrh	r2, [r2, #12]
 8006e04:	fb02 f303 	mul.w	r3, r2, r3
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	18d1      	adds	r1, r2, r3
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	899b      	ldrh	r3, [r3, #12]
 8006e10:	461a      	mov	r2, r3
 8006e12:	f7fd ffe4 	bl	8004dde <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	7d1b      	ldrb	r3, [r3, #20]
 8006e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	899b      	ldrh	r3, [r3, #12]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	fb02 f303 	mul.w	r3, r2, r3
 8006e30:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006e32:	e050      	b.n	8006ed6 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d01b      	beq.n	8006e76 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d215      	bcs.n	8006e76 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	7858      	ldrb	r0, [r3, #1]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006e54:	2301      	movs	r3, #1
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	f7fd fee0 	bl	8004c1c <disk_read>
 8006e5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	755a      	strb	r2, [r3, #21]
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe f84a 	bl	8004f06 <unlock_fs>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e05f      	b.n	8006f36 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	899b      	ldrh	r3, [r3, #12]
 8006e80:	4618      	mov	r0, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	8992      	ldrh	r2, [r2, #12]
 8006e8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e8e:	fb01 f202 	mul.w	r2, r1, r2
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	1ac3      	subs	r3, r0, r3
 8006e96:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d901      	bls.n	8006ea4 <f_write+0x2ec>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	8992      	ldrh	r2, [r2, #12]
 8006eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eb6:	fb00 f202 	mul.w	r2, r0, r2
 8006eba:	1a9b      	subs	r3, r3, r2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fd ff8b 	bl	8004dde <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7d1b      	ldrb	r3, [r3, #20]
 8006ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	4413      	add	r3, r2
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	619a      	str	r2, [r3, #24]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	bf38      	it	cc
 8006ef6:	461a      	movcc	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	60da      	str	r2, [r3, #12]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	441a      	add	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f47f ae97 	bne.w	8006c46 <f_write+0x8e>
 8006f18:	e000      	b.n	8006f1c <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7d1b      	ldrb	r3, [r3, #20]
 8006f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fd ffe9 	bl	8004f06 <unlock_fs>
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3730      	adds	r7, #48	@ 0x30
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b086      	sub	sp, #24
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f107 0208 	add.w	r2, r7, #8
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff fc1c 	bl	800678c <validate>
 8006f54:	4603      	mov	r3, r0
 8006f56:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d16d      	bne.n	800703a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7d1b      	ldrb	r3, [r3, #20]
 8006f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d067      	beq.n	800703a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7d1b      	ldrb	r3, [r3, #20]
 8006f6e:	b25b      	sxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da1a      	bge.n	8006faa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	7858      	ldrb	r0, [r3, #1]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1a      	ldr	r2, [r3, #32]
 8006f82:	2301      	movs	r3, #1
 8006f84:	f7fd fe6a 	bl	8004c5c <disk_write>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d006      	beq.n	8006f9c <f_sync+0x5e>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	2101      	movs	r1, #1
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fd ffb7 	bl	8004f06 <unlock_fs>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e055      	b.n	8007048 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	7d1b      	ldrb	r3, [r3, #20]
 8006fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006faa:	f7fd fd97 	bl	8004adc <get_fattime>
 8006fae:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f7fe f96f 	bl	800529c <move_window>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d138      	bne.n	800703a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fcc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	330b      	adds	r3, #11
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	330b      	adds	r3, #11
 8006fd8:	f042 0220 	orr.w	r2, r2, #32
 8006fdc:	b2d2      	uxtb	r2, r2
 8006fde:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	f7fe fefa 	bl	8005de4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f103 021c 	add.w	r2, r3, #28
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	f7fd fec2 	bl	8004d86 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3316      	adds	r3, #22
 8007006:	6939      	ldr	r1, [r7, #16]
 8007008:	4618      	mov	r0, r3
 800700a:	f7fd febc 	bl	8004d86 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3312      	adds	r3, #18
 8007012:	2100      	movs	r1, #0
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fe9b 	bl	8004d50 <st_word>
					fs->wflag = 1;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2201      	movs	r2, #1
 800701e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f968 	bl	80052f8 <sync_fs>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007034:	b2da      	uxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	7dfa      	ldrb	r2, [r7, #23]
 800703e:	4611      	mov	r1, r2
 8007040:	4618      	mov	r0, r3
 8007042:	f7fd ff60 	bl	8004f06 <unlock_fs>
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff ff70 	bl	8006f3e <f_sync>
 800705e:	4603      	mov	r3, r0
 8007060:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d11d      	bne.n	80070a4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f107 0208 	add.w	r2, r7, #8
 800706e:	4611      	mov	r1, r2
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff fb8b 	bl	800678c <validate>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d111      	bne.n	80070a4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	4618      	mov	r0, r3
 8007086:	f7fe f865 	bl	8005154 <dec_lock>
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d102      	bne.n	800709a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fd ff31 	bl	8004f06 <unlock_fs>
#endif
		}
	}
	return res;
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80070be:	2301      	movs	r3, #1
 80070c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80070c6:	4b1f      	ldr	r3, [pc, #124]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070c8:	7a5b      	ldrb	r3, [r3, #9]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d131      	bne.n	8007134 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80070d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070d2:	7a5b      	ldrb	r3, [r3, #9]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070da:	2100      	movs	r1, #0
 80070dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80070de:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070e0:	7a5b      	ldrb	r3, [r3, #9]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	4a17      	ldr	r2, [pc, #92]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070f0:	7a5b      	ldrb	r3, [r3, #9]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 80070f8:	4413      	add	r3, r2
 80070fa:	79fa      	ldrb	r2, [r7, #7]
 80070fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80070fe:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 8007100:	7a5b      	ldrb	r3, [r3, #9]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	b2d1      	uxtb	r1, r2
 8007108:	4a0e      	ldr	r2, [pc, #56]	@ (8007144 <FATFS_LinkDriverEx+0x94>)
 800710a:	7251      	strb	r1, [r2, #9]
 800710c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800710e:	7dbb      	ldrb	r3, [r7, #22]
 8007110:	3330      	adds	r3, #48	@ 0x30
 8007112:	b2da      	uxtb	r2, r3
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	3301      	adds	r3, #1
 800711c:	223a      	movs	r2, #58	@ 0x3a
 800711e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	3302      	adds	r3, #2
 8007124:	222f      	movs	r2, #47	@ 0x2f
 8007126:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	3303      	adds	r3, #3
 800712c:	2200      	movs	r2, #0
 800712e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	371c      	adds	r7, #28
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20001e18 	.word	0x20001e18

08007148 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007152:	2200      	movs	r2, #0
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff ffaa 	bl	80070b0 <FATFS_LinkDriverEx>
 800715c:	4603      	mov	r3, r0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b084      	sub	sp, #16
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8007172:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8a6 	bl	80072c8 <osSemaphoreWait>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8007182:	2301      	movs	r3, #1
 8007184:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f8e3 	bl	8007364 <osSemaphoreRelease>
#endif
}
 800719e:	bf00      	nop
 80071a0:	3708      	adds	r7, #8
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	4603      	mov	r3, r0
 80071ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80071b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071b8:	2b84      	cmp	r3, #132	@ 0x84
 80071ba:	d005      	beq.n	80071c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80071bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	3303      	adds	r3, #3
 80071c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071dc:	f3ef 8305 	mrs	r3, IPSR
 80071e0:	607b      	str	r3, [r7, #4]
  return(result);
 80071e2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	bf14      	ite	ne
 80071e8:	2301      	movne	r3, #1
 80071ea:	2300      	moveq	r3, #0
 80071ec:	b2db      	uxtb	r3, r3
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80071fe:	f000 ffdd 	bl	80081bc <vTaskStartScheduler>
  
  return osOK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	bd80      	pop	{r7, pc}

08007208 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720a:	b089      	sub	sp, #36	@ 0x24
 800720c:	af04      	add	r7, sp, #16
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d020      	beq.n	800725c <osThreadCreate+0x54>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01c      	beq.n	800725c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685c      	ldr	r4, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691e      	ldr	r6, [r3, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff ffb6 	bl	80071a6 <makeFreeRtosPriority>
 800723a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	9100      	str	r1, [sp, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	4632      	mov	r2, r6
 800724e:	4629      	mov	r1, r5
 8007250:	4620      	mov	r0, r4
 8007252:	f000 fddb 	bl	8007e0c <xTaskCreateStatic>
 8007256:	4603      	mov	r3, r0
 8007258:	60fb      	str	r3, [r7, #12]
 800725a:	e01c      	b.n	8007296 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685c      	ldr	r4, [r3, #4]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007268:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007270:	4618      	mov	r0, r3
 8007272:	f7ff ff98 	bl	80071a6 <makeFreeRtosPriority>
 8007276:	4602      	mov	r2, r0
 8007278:	f107 030c 	add.w	r3, r7, #12
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	9200      	str	r2, [sp, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	4632      	mov	r2, r6
 8007284:	4629      	mov	r1, r5
 8007286:	4620      	mov	r0, r4
 8007288:	f000 fe26 	bl	8007ed8 <xTaskCreate>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d001      	beq.n	8007296 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	e000      	b.n	8007298 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007296:	68fb      	ldr	r3, [r7, #12]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072a0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <osDelay+0x16>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	e000      	b.n	80072b8 <osDelay+0x18>
 80072b6:	2301      	movs	r3, #1
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 ff47 	bl	800814c <vTaskDelay>
  
  return osOK;
 80072be:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80072d2:	2300      	movs	r3, #0
 80072d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80072dc:	2380      	movs	r3, #128	@ 0x80
 80072de:	e03a      	b.n	8007356 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d103      	bne.n	80072f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	e009      	b.n	8007308 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d006      	beq.n	8007308 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <osSemaphoreWait+0x40>
      ticks = 1;
 8007304:	2301      	movs	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007308:	f7ff ff65 	bl	80071d6 <inHandlerMode>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007312:	f107 0308 	add.w	r3, r7, #8
 8007316:	461a      	mov	r2, r3
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fbc6 	bl	8007aac <xQueueReceiveFromISR>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007326:	23ff      	movs	r3, #255	@ 0xff
 8007328:	e015      	b.n	8007356 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d011      	beq.n	8007354 <osSemaphoreWait+0x8c>
 8007330:	4b0b      	ldr	r3, [pc, #44]	@ (8007360 <osSemaphoreWait+0x98>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	e008      	b.n	8007354 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007342:	68f9      	ldr	r1, [r7, #12]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fa99 	bl	800787c <xQueueSemaphoreTake>
 800734a:	4603      	mov	r3, r0
 800734c:	2b01      	cmp	r3, #1
 800734e:	d001      	beq.n	8007354 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007350:	23ff      	movs	r3, #255	@ 0xff
 8007352:	e000      	b.n	8007356 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	e000ed04 	.word	0xe000ed04

08007364 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007374:	f7ff ff2f 	bl	80071d6 <inHandlerMode>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d016      	beq.n	80073ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 f9e1 	bl	800774c <xQueueGiveFromISR>
 800738a:	4603      	mov	r3, r0
 800738c:	2b01      	cmp	r3, #1
 800738e:	d001      	beq.n	8007394 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007390:	23ff      	movs	r3, #255	@ 0xff
 8007392:	e017      	b.n	80073c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d013      	beq.n	80073c2 <osSemaphoreRelease+0x5e>
 800739a:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <osSemaphoreRelease+0x68>)
 800739c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a0:	601a      	str	r2, [r3, #0]
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	e00a      	b.n	80073c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80073ac:	2300      	movs	r3, #0
 80073ae:	2200      	movs	r2, #0
 80073b0:	2100      	movs	r1, #0
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f8c0 	bl	8007538 <xQueueGenericSend>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d001      	beq.n	80073c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80073be:	23ff      	movs	r3, #255	@ 0xff
 80073c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	e000ed04 	.word	0xe000ed04

080073d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f103 0208 	add.w	r2, r3, #8
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295
 80073e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f103 0208 	add.w	r2, r3, #8
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f103 0208 	add.w	r2, r3, #8
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007404:	bf00      	nop
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	1c5a      	adds	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007472:	b480      	push	{r7}
 8007474:	b085      	sub	sp, #20
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d103      	bne.n	8007492 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	60fb      	str	r3, [r7, #12]
 8007490:	e00c      	b.n	80074ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3308      	adds	r3, #8
 8007496:	60fb      	str	r3, [r7, #12]
 8007498:	e002      	b.n	80074a0 <vListInsert+0x2e>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d2f6      	bcs.n	800749a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	601a      	str	r2, [r3, #0]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	691b      	ldr	r3, [r3, #16]
 80074f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6892      	ldr	r2, [r2, #8]
 80074fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6852      	ldr	r2, [r2, #4]
 8007504:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d103      	bne.n	8007518 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	1e5a      	subs	r2, r3, #1
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3714      	adds	r7, #20
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08e      	sub	sp, #56	@ 0x38
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007546:	2300      	movs	r3, #0
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800754e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <xQueueGenericSend+0x38>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007558:	b672      	cpsid	i
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	b662      	cpsie	i
 8007568:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <xQueueGenericSend+0x46>
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <xQueueGenericSend+0x4a>
 800757e:	2301      	movs	r3, #1
 8007580:	e000      	b.n	8007584 <xQueueGenericSend+0x4c>
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10d      	bne.n	80075a4 <xQueueGenericSend+0x6c>
	__asm volatile
 8007588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800758c:	b672      	cpsid	i
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	b662      	cpsie	i
 800759c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSend+0x7a>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <xQueueGenericSend+0x7e>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e000      	b.n	80075b8 <xQueueGenericSend+0x80>
 80075b6:	2300      	movs	r3, #0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <xQueueGenericSend+0xa0>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	b672      	cpsid	i
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	b662      	cpsie	i
 80075d0:	623b      	str	r3, [r7, #32]
}
 80075d2:	bf00      	nop
 80075d4:	bf00      	nop
 80075d6:	e7fd      	b.n	80075d4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075d8:	f001 fa0e 	bl	80089f8 <xTaskGetSchedulerState>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <xQueueGenericSend+0xb0>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <xQueueGenericSend+0xb4>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <xQueueGenericSend+0xb6>
 80075ec:	2300      	movs	r3, #0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10d      	bne.n	800760e <xQueueGenericSend+0xd6>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	b672      	cpsid	i
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	b662      	cpsie	i
 8007606:	61fb      	str	r3, [r7, #28]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800760e:	f001 fd45 	bl	800909c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800761a:	429a      	cmp	r2, r3
 800761c:	d302      	bcc.n	8007624 <xQueueGenericSend+0xec>
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d129      	bne.n	8007678 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800762a:	f000 fadf 	bl	8007bec <prvCopyDataToQueue>
 800762e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	d010      	beq.n	800765a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763a:	3324      	adds	r3, #36	@ 0x24
 800763c:	4618      	mov	r0, r3
 800763e:	f001 f813 	bl	8008668 <xTaskRemoveFromEventList>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d013      	beq.n	8007670 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007648:	4b3f      	ldr	r3, [pc, #252]	@ (8007748 <xQueueGenericSend+0x210>)
 800764a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	e00a      	b.n	8007670 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007660:	4b39      	ldr	r3, [pc, #228]	@ (8007748 <xQueueGenericSend+0x210>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007670:	f001 fd4a 	bl	8009108 <vPortExitCritical>
				return pdPASS;
 8007674:	2301      	movs	r3, #1
 8007676:	e063      	b.n	8007740 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d103      	bne.n	8007686 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800767e:	f001 fd43 	bl	8009108 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007682:	2300      	movs	r3, #0
 8007684:	e05c      	b.n	8007740 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007688:	2b00      	cmp	r3, #0
 800768a:	d106      	bne.n	800769a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800768c:	f107 0314 	add.w	r3, r7, #20
 8007690:	4618      	mov	r0, r3
 8007692:	f001 f84f 	bl	8008734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800769a:	f001 fd35 	bl	8009108 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800769e:	f000 fdf3 	bl	8008288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a2:	f001 fcfb 	bl	800909c <vPortEnterCritical>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b2:	d103      	bne.n	80076bc <xQueueGenericSend+0x184>
 80076b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076c2:	b25b      	sxtb	r3, r3
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d103      	bne.n	80076d2 <xQueueGenericSend+0x19a>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076d2:	f001 fd19 	bl	8009108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076d6:	1d3a      	adds	r2, r7, #4
 80076d8:	f107 0314 	add.w	r3, r7, #20
 80076dc:	4611      	mov	r1, r2
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 f83e 	bl	8008760 <xTaskCheckForTimeOut>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d124      	bne.n	8007734 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076ec:	f000 fb76 	bl	8007ddc <prvIsQueueFull>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d018      	beq.n	8007728 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	3310      	adds	r3, #16
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	4611      	mov	r1, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 ff8a 	bl	8008618 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007704:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007706:	f000 fb01 	bl	8007d0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800770a:	f000 fdcb 	bl	80082a4 <xTaskResumeAll>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	f47f af7c 	bne.w	800760e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8007716:	4b0c      	ldr	r3, [pc, #48]	@ (8007748 <xQueueGenericSend+0x210>)
 8007718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	f3bf 8f6f 	isb	sy
 8007726:	e772      	b.n	800760e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007728:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800772a:	f000 faef 	bl	8007d0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800772e:	f000 fdb9 	bl	80082a4 <xTaskResumeAll>
 8007732:	e76c      	b.n	800760e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007734:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007736:	f000 fae9 	bl	8007d0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800773a:	f000 fdb3 	bl	80082a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800773e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007740:	4618      	mov	r0, r3
 8007742:	3738      	adds	r7, #56	@ 0x38
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	e000ed04 	.word	0xe000ed04

0800774c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b08e      	sub	sp, #56	@ 0x38
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10d      	bne.n	800777c <xQueueGiveFromISR+0x30>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	b672      	cpsid	i
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	b662      	cpsie	i
 8007774:	623b      	str	r3, [r7, #32]
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00d      	beq.n	80077a0 <xQueueGiveFromISR+0x54>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	b672      	cpsid	i
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	b662      	cpsie	i
 8007798:	61fb      	str	r3, [r7, #28]
}
 800779a:	bf00      	nop
 800779c:	bf00      	nop
 800779e:	e7fd      	b.n	800779c <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d103      	bne.n	80077b0 <xQueueGiveFromISR+0x64>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d101      	bne.n	80077b4 <xQueueGiveFromISR+0x68>
 80077b0:	2301      	movs	r3, #1
 80077b2:	e000      	b.n	80077b6 <xQueueGiveFromISR+0x6a>
 80077b4:	2300      	movs	r3, #0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d10d      	bne.n	80077d6 <xQueueGiveFromISR+0x8a>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	b672      	cpsid	i
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	b662      	cpsie	i
 80077ce:	61bb      	str	r3, [r7, #24]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077d6:	f001 fd49 	bl	800926c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077da:	f3ef 8211 	mrs	r2, BASEPRI
 80077de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e2:	b672      	cpsid	i
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	b662      	cpsie	i
 80077f2:	617a      	str	r2, [r7, #20]
 80077f4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007806:	429a      	cmp	r2, r3
 8007808:	d22b      	bcs.n	8007862 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800781c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d112      	bne.n	800784c <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d016      	beq.n	800785c <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	3324      	adds	r3, #36	@ 0x24
 8007832:	4618      	mov	r0, r3
 8007834:	f000 ff18 	bl	8008668 <xTaskRemoveFromEventList>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00e      	beq.n	800785c <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	2201      	movs	r2, #1
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e007      	b.n	800785c <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800784c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007850:	3301      	adds	r3, #1
 8007852:	b2db      	uxtb	r3, r3
 8007854:	b25a      	sxtb	r2, r3
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800785c:	2301      	movs	r3, #1
 800785e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007860:	e001      	b.n	8007866 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007862:	2300      	movs	r3, #0
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007870:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007874:	4618      	mov	r0, r3
 8007876:	3738      	adds	r7, #56	@ 0x38
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08e      	sub	sp, #56	@ 0x38
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007886:	2300      	movs	r3, #0
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800788e:	2300      	movs	r3, #0
 8007890:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10d      	bne.n	80078b4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	b672      	cpsid	i
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	b662      	cpsie	i
 80078ac:	623b      	str	r3, [r7, #32]
}
 80078ae:	bf00      	nop
 80078b0:	bf00      	nop
 80078b2:	e7fd      	b.n	80078b0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00d      	beq.n	80078d8 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	61fb      	str	r3, [r7, #28]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078d8:	f001 f88e 	bl	80089f8 <xTaskGetSchedulerState>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d102      	bne.n	80078e8 <xQueueSemaphoreTake+0x6c>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <xQueueSemaphoreTake+0x70>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e000      	b.n	80078ee <xQueueSemaphoreTake+0x72>
 80078ec:	2300      	movs	r3, #0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10d      	bne.n	800790e <xQueueSemaphoreTake+0x92>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	b672      	cpsid	i
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	b662      	cpsie	i
 8007906:	61bb      	str	r3, [r7, #24]
}
 8007908:	bf00      	nop
 800790a:	bf00      	nop
 800790c:	e7fd      	b.n	800790a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800790e:	f001 fbc5 	bl	800909c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	2b00      	cmp	r3, #0
 800791c:	d024      	beq.n	8007968 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	1e5a      	subs	r2, r3, #1
 8007922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d104      	bne.n	8007938 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800792e:	f001 fa2d 	bl	8008d8c <pvTaskIncrementMutexHeldCount>
 8007932:	4602      	mov	r2, r0
 8007934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007936:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00f      	beq.n	8007960 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007942:	3310      	adds	r3, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fe8f 	bl	8008668 <xTaskRemoveFromEventList>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d007      	beq.n	8007960 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b55      	ldr	r3, [pc, #340]	@ (8007aa8 <xQueueSemaphoreTake+0x22c>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007960:	f001 fbd2 	bl	8009108 <vPortExitCritical>
				return pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	e09a      	b.n	8007a9e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d114      	bne.n	8007998 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00d      	beq.n	8007990 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8007974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007978:	b672      	cpsid	i
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	b662      	cpsie	i
 8007988:	617b      	str	r3, [r7, #20]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007990:	f001 fbba 	bl	8009108 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007994:	2300      	movs	r3, #0
 8007996:	e082      	b.n	8007a9e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800799e:	f107 030c 	add.w	r3, r7, #12
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fec6 	bl	8008734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079a8:	2301      	movs	r3, #1
 80079aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079ac:	f001 fbac 	bl	8009108 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079b0:	f000 fc6a 	bl	8008288 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079b4:	f001 fb72 	bl	800909c <vPortEnterCritical>
 80079b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079be:	b25b      	sxtb	r3, r3
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d103      	bne.n	80079ce <xQueueSemaphoreTake+0x152>
 80079c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079d4:	b25b      	sxtb	r3, r3
 80079d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079da:	d103      	bne.n	80079e4 <xQueueSemaphoreTake+0x168>
 80079dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079e4:	f001 fb90 	bl	8009108 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079e8:	463a      	mov	r2, r7
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 feb5 	bl	8008760 <xTaskCheckForTimeOut>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d132      	bne.n	8007a62 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079fe:	f000 f9d7 	bl	8007db0 <prvIsQueueEmpty>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d026      	beq.n	8007a56 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8007a10:	f001 fb44 	bl	800909c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f001 f80b 	bl	8008a34 <xTaskPriorityInherit>
 8007a1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007a20:	f001 fb72 	bl	8009108 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a26:	3324      	adds	r3, #36	@ 0x24
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f000 fdf3 	bl	8008618 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a34:	f000 f96a 	bl	8007d0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a38:	f000 fc34 	bl	80082a4 <xTaskResumeAll>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f47f af65 	bne.w	800790e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8007a44:	4b18      	ldr	r3, [pc, #96]	@ (8007aa8 <xQueueSemaphoreTake+0x22c>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	e75b      	b.n	800790e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a58:	f000 f958 	bl	8007d0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a5c:	f000 fc22 	bl	80082a4 <xTaskResumeAll>
 8007a60:	e755      	b.n	800790e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a64:	f000 f952 	bl	8007d0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a68:	f000 fc1c 	bl	80082a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a6e:	f000 f99f 	bl	8007db0 <prvIsQueueEmpty>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f43f af4a 	beq.w	800790e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00d      	beq.n	8007a9c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8007a80:	f001 fb0c 	bl	800909c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007a86:	f000 f899 	bl	8007bbc <prvGetDisinheritPriorityAfterTimeout>
 8007a8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a92:	4618      	mov	r0, r3
 8007a94:	f001 f8da 	bl	8008c4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a98:	f001 fb36 	bl	8009108 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3738      	adds	r7, #56	@ 0x38
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	@ 0x38
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <xQueueReceiveFromISR+0x32>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	b672      	cpsid	i
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	b662      	cpsie	i
 8007ad6:	623b      	str	r3, [r7, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <xQueueReceiveFromISR+0x40>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <xQueueReceiveFromISR+0x44>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e000      	b.n	8007af2 <xQueueReceiveFromISR+0x46>
 8007af0:	2300      	movs	r3, #0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10d      	bne.n	8007b12 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	b672      	cpsid	i
 8007afc:	f383 8811 	msr	BASEPRI, r3
 8007b00:	f3bf 8f6f 	isb	sy
 8007b04:	f3bf 8f4f 	dsb	sy
 8007b08:	b662      	cpsie	i
 8007b0a:	61fb      	str	r3, [r7, #28]
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	e7fd      	b.n	8007b0e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b12:	f001 fbab 	bl	800926c <vPortValidateInterruptPriority>
	__asm volatile
 8007b16:	f3ef 8211 	mrs	r2, BASEPRI
 8007b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1e:	b672      	cpsid	i
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	b662      	cpsie	i
 8007b2e:	61ba      	str	r2, [r7, #24]
 8007b30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d02f      	beq.n	8007ba2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b4c:	68b9      	ldr	r1, [r7, #8]
 8007b4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b50:	f000 f8b6 	bl	8007cc0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	1e5a      	subs	r2, r3, #1
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b64:	d112      	bne.n	8007b8c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d016      	beq.n	8007b9c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b70:	3310      	adds	r3, #16
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 fd78 	bl	8008668 <xTaskRemoveFromEventList>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00e      	beq.n	8007b9c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
 8007b8a:	e007      	b.n	8007b9c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b90:	3301      	adds	r3, #1
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	b25a      	sxtb	r2, r3
 8007b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba0:	e001      	b.n	8007ba6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f383 8811 	msr	BASEPRI, r3
}
 8007bb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3738      	adds	r7, #56	@ 0x38
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d006      	beq.n	8007bda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f1c3 0307 	rsb	r3, r3, #7
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e001      	b.n	8007bde <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bde:	68fb      	ldr	r3, [r7, #12]
	}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10d      	bne.n	8007c26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d14d      	bne.n	8007cae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 ff8c 	bl	8008b34 <xTaskPriorityDisinherit>
 8007c1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	609a      	str	r2, [r3, #8]
 8007c24:	e043      	b.n	8007cae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d119      	bne.n	8007c60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6858      	ldr	r0, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c34:	461a      	mov	r2, r3
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	f001 fd9e 	bl	8009778 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c44:	441a      	add	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d32b      	bcc.n	8007cae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	e026      	b.n	8007cae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68d8      	ldr	r0, [r3, #12]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	f001 fd84 	bl	8009778 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c78:	425b      	negs	r3, r3
 8007c7a:	441a      	add	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d207      	bcs.n	8007c9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	689a      	ldr	r2, [r3, #8]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c94:	425b      	negs	r3, r3
 8007c96:	441a      	add	r2, r3
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d105      	bne.n	8007cae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1c5a      	adds	r2, r3, #1
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007cb6:	697b      	ldr	r3, [r7, #20]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d018      	beq.n	8007d04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cda:	441a      	add	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d303      	bcc.n	8007cf4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68d9      	ldr	r1, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6838      	ldr	r0, [r7, #0]
 8007d00:	f001 fd3a 	bl	8009778 <memcpy>
	}
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d14:	f001 f9c2 	bl	800909c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d20:	e011      	b.n	8007d46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d012      	beq.n	8007d50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3324      	adds	r3, #36	@ 0x24
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fc9a 	bl	8008668 <xTaskRemoveFromEventList>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d3a:	f000 fd79 	bl	8008830 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	dce9      	bgt.n	8007d22 <prvUnlockQueue+0x16>
 8007d4e:	e000      	b.n	8007d52 <prvUnlockQueue+0x46>
					break;
 8007d50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	22ff      	movs	r2, #255	@ 0xff
 8007d56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d5a:	f001 f9d5 	bl	8009108 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d5e:	f001 f99d 	bl	800909c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d6a:	e011      	b.n	8007d90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d012      	beq.n	8007d9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3310      	adds	r3, #16
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fc75 	bl	8008668 <xTaskRemoveFromEventList>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d84:	f000 fd54 	bl	8008830 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d88:	7bbb      	ldrb	r3, [r7, #14]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	dce9      	bgt.n	8007d6c <prvUnlockQueue+0x60>
 8007d98:	e000      	b.n	8007d9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	22ff      	movs	r2, #255	@ 0xff
 8007da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007da4:	f001 f9b0 	bl	8009108 <vPortExitCritical>
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db8:	f001 f970 	bl	800909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dce:	f001 f99b 	bl	8009108 <vPortExitCritical>

	return xReturn;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007de4:	f001 f95a 	bl	800909c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d102      	bne.n	8007dfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007df4:	2301      	movs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e001      	b.n	8007dfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f001 f983 	bl	8009108 <vPortExitCritical>

	return xReturn;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08e      	sub	sp, #56	@ 0x38
 8007e10:	af04      	add	r7, sp, #16
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10d      	bne.n	8007e3c <xTaskCreateStatic+0x30>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e24:	b672      	cpsid	i
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	b662      	cpsie	i
 8007e34:	623b      	str	r3, [r7, #32]
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	e7fd      	b.n	8007e38 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10d      	bne.n	8007e5e <xTaskCreateStatic+0x52>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	b672      	cpsid	i
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	b662      	cpsie	i
 8007e56:	61fb      	str	r3, [r7, #28]
}
 8007e58:	bf00      	nop
 8007e5a:	bf00      	nop
 8007e5c:	e7fd      	b.n	8007e5a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e5e:	2354      	movs	r3, #84	@ 0x54
 8007e60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	2b54      	cmp	r3, #84	@ 0x54
 8007e66:	d00d      	beq.n	8007e84 <xTaskCreateStatic+0x78>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	b672      	cpsid	i
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	b662      	cpsie	i
 8007e7c:	61bb      	str	r3, [r7, #24]
}
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
 8007e82:	e7fd      	b.n	8007e80 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d01e      	beq.n	8007eca <xTaskCreateStatic+0xbe>
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d01b      	beq.n	8007eca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9303      	str	r3, [sp, #12]
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eaa:	9302      	str	r3, [sp, #8]
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	68f8      	ldr	r0, [r7, #12]
 8007ebe:	f000 f850 	bl	8007f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ec4:	f000 f8d8 	bl	8008078 <prvAddNewTaskToReadyList>
 8007ec8:	e001      	b.n	8007ece <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ece:	697b      	ldr	r3, [r7, #20]
	}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	@ 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08c      	sub	sp, #48	@ 0x30
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ee8:	88fb      	ldrh	r3, [r7, #6]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fa03 	bl	80092f8 <pvPortMalloc>
 8007ef2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007efa:	2054      	movs	r0, #84	@ 0x54
 8007efc:	f001 f9fc 	bl	80092f8 <pvPortMalloc>
 8007f00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d003      	beq.n	8007f10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f0e:	e005      	b.n	8007f1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f10:	6978      	ldr	r0, [r7, #20]
 8007f12:	f001 fabf 	bl	8009494 <vPortFree>
 8007f16:	e001      	b.n	8007f1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d017      	beq.n	8007f52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f2a:	88fa      	ldrh	r2, [r7, #6]
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9303      	str	r3, [sp, #12]
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	9302      	str	r3, [sp, #8]
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f80e 	bl	8007f62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f46:	69f8      	ldr	r0, [r7, #28]
 8007f48:	f000 f896 	bl	8008078 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e002      	b.n	8007f58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f52:	f04f 33ff 	mov.w	r3, #4294967295
 8007f56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f58:	69bb      	ldr	r3, [r7, #24]
	}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b088      	sub	sp, #32
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007f7a:	440b      	add	r3, r1
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00d      	beq.n	8007fb0 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	b672      	cpsid	i
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	b662      	cpsie	i
 8007fa8:	617b      	str	r3, [r7, #20]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d01f      	beq.n	8007ff6 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	61fb      	str	r3, [r7, #28]
 8007fba:	e012      	b.n	8007fe2 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007fbc:	68ba      	ldr	r2, [r7, #8]
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	7819      	ldrb	r1, [r3, #0]
 8007fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	4413      	add	r3, r2
 8007fca:	3334      	adds	r3, #52	@ 0x34
 8007fcc:	460a      	mov	r2, r1
 8007fce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	61fb      	str	r3, [r7, #28]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b0f      	cmp	r3, #15
 8007fe6:	d9e9      	bls.n	8007fbc <prvInitialiseNewTask+0x5a>
 8007fe8:	e000      	b.n	8007fec <prvInitialiseNewTask+0x8a>
			{
				break;
 8007fea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ff4:	e003      	b.n	8007ffe <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008000:	2b06      	cmp	r3, #6
 8008002:	d901      	bls.n	8008008 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008004:	2306      	movs	r3, #6
 8008006:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800800c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800800e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008012:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008016:	2200      	movs	r2, #0
 8008018:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800801a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801c:	3304      	adds	r3, #4
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff f9f6 	bl	8007410 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008026:	3318      	adds	r3, #24
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff f9f1 	bl	8007410 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800802e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008036:	f1c3 0207 	rsb	r2, r3, #7
 800803a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008042:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008046:	2200      	movs	r2, #0
 8008048:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800804a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	68f9      	ldr	r1, [r7, #12]
 8008056:	69b8      	ldr	r0, [r7, #24]
 8008058:	f000 ff12 	bl	8008e80 <pxPortInitialiseStack>
 800805c:	4602      	mov	r2, r0
 800805e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008060:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800806c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800806e:	bf00      	nop
 8008070:	3720      	adds	r7, #32
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008080:	f001 f80c 	bl	800909c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008084:	4b2a      	ldr	r3, [pc, #168]	@ (8008130 <prvAddNewTaskToReadyList+0xb8>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3301      	adds	r3, #1
 800808a:	4a29      	ldr	r2, [pc, #164]	@ (8008130 <prvAddNewTaskToReadyList+0xb8>)
 800808c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800808e:	4b29      	ldr	r3, [pc, #164]	@ (8008134 <prvAddNewTaskToReadyList+0xbc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d109      	bne.n	80080aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008096:	4a27      	ldr	r2, [pc, #156]	@ (8008134 <prvAddNewTaskToReadyList+0xbc>)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800809c:	4b24      	ldr	r3, [pc, #144]	@ (8008130 <prvAddNewTaskToReadyList+0xb8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d110      	bne.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80080a4:	f000 fbe8 	bl	8008878 <prvInitialiseTaskLists>
 80080a8:	e00d      	b.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80080aa:	4b23      	ldr	r3, [pc, #140]	@ (8008138 <prvAddNewTaskToReadyList+0xc0>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d109      	bne.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80080b2:	4b20      	ldr	r3, [pc, #128]	@ (8008134 <prvAddNewTaskToReadyList+0xbc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080bc:	429a      	cmp	r2, r3
 80080be:	d802      	bhi.n	80080c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80080c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008134 <prvAddNewTaskToReadyList+0xbc>)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80080c6:	4b1d      	ldr	r3, [pc, #116]	@ (800813c <prvAddNewTaskToReadyList+0xc4>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a1b      	ldr	r2, [pc, #108]	@ (800813c <prvAddNewTaskToReadyList+0xc4>)
 80080ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d4:	2201      	movs	r2, #1
 80080d6:	409a      	lsls	r2, r3
 80080d8:	4b19      	ldr	r3, [pc, #100]	@ (8008140 <prvAddNewTaskToReadyList+0xc8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4313      	orrs	r3, r2
 80080de:	4a18      	ldr	r2, [pc, #96]	@ (8008140 <prvAddNewTaskToReadyList+0xc8>)
 80080e0:	6013      	str	r3, [r2, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4a15      	ldr	r2, [pc, #84]	@ (8008144 <prvAddNewTaskToReadyList+0xcc>)
 80080f0:	441a      	add	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3304      	adds	r3, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f7ff f996 	bl	800742a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080fe:	f001 f803 	bl	8009108 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008102:	4b0d      	ldr	r3, [pc, #52]	@ (8008138 <prvAddNewTaskToReadyList+0xc0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800810a:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <prvAddNewTaskToReadyList+0xbc>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008114:	429a      	cmp	r2, r3
 8008116:	d207      	bcs.n	8008128 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008118:	4b0b      	ldr	r3, [pc, #44]	@ (8008148 <prvAddNewTaskToReadyList+0xd0>)
 800811a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800811e:	601a      	str	r2, [r3, #0]
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20001f24 	.word	0x20001f24
 8008134:	20001e24 	.word	0x20001e24
 8008138:	20001f30 	.word	0x20001f30
 800813c:	20001f40 	.word	0x20001f40
 8008140:	20001f2c 	.word	0x20001f2c
 8008144:	20001e28 	.word	0x20001e28
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <vTaskDelay+0x68>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00d      	beq.n	8008182 <vTaskDelay+0x36>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	b672      	cpsid	i
 800816c:	f383 8811 	msr	BASEPRI, r3
 8008170:	f3bf 8f6f 	isb	sy
 8008174:	f3bf 8f4f 	dsb	sy
 8008178:	b662      	cpsie	i
 800817a:	60bb      	str	r3, [r7, #8]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008182:	f000 f881 	bl	8008288 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008186:	2100      	movs	r1, #0
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fe13 	bl	8008db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800818e:	f000 f889 	bl	80082a4 <xTaskResumeAll>
 8008192:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d107      	bne.n	80081aa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800819a:	4b07      	ldr	r3, [pc, #28]	@ (80081b8 <vTaskDelay+0x6c>)
 800819c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20001f4c 	.word	0x20001f4c
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	@ 0x28
 80081c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ca:	463a      	mov	r2, r7
 80081cc:	1d39      	adds	r1, r7, #4
 80081ce:	f107 0308 	add.w	r3, r7, #8
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f8 fe48 	bl	8000e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	9202      	str	r2, [sp, #8]
 80081e0:	9301      	str	r3, [sp, #4]
 80081e2:	2300      	movs	r3, #0
 80081e4:	9300      	str	r3, [sp, #0]
 80081e6:	2300      	movs	r3, #0
 80081e8:	460a      	mov	r2, r1
 80081ea:	4921      	ldr	r1, [pc, #132]	@ (8008270 <vTaskStartScheduler+0xb4>)
 80081ec:	4821      	ldr	r0, [pc, #132]	@ (8008274 <vTaskStartScheduler+0xb8>)
 80081ee:	f7ff fe0d 	bl	8007e0c <xTaskCreateStatic>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4a20      	ldr	r2, [pc, #128]	@ (8008278 <vTaskStartScheduler+0xbc>)
 80081f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081f8:	4b1f      	ldr	r3, [pc, #124]	@ (8008278 <vTaskStartScheduler+0xbc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008200:	2301      	movs	r3, #1
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	e001      	b.n	800820a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d118      	bne.n	8008242 <vTaskStartScheduler+0x86>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	b672      	cpsid	i
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	b662      	cpsie	i
 8008224:	613b      	str	r3, [r7, #16]
}
 8008226:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008228:	4b14      	ldr	r3, [pc, #80]	@ (800827c <vTaskStartScheduler+0xc0>)
 800822a:	f04f 32ff 	mov.w	r2, #4294967295
 800822e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008230:	4b13      	ldr	r3, [pc, #76]	@ (8008280 <vTaskStartScheduler+0xc4>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008236:	4b13      	ldr	r3, [pc, #76]	@ (8008284 <vTaskStartScheduler+0xc8>)
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800823c:	f000 feb0 	bl	8008fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008240:	e011      	b.n	8008266 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d10d      	bne.n	8008266 <vTaskStartScheduler+0xaa>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	b672      	cpsid	i
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	b662      	cpsie	i
 800825e:	60fb      	str	r3, [r7, #12]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <vTaskStartScheduler+0xa6>
}
 8008266:	bf00      	nop
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	0800a0dc 	.word	0x0800a0dc
 8008274:	08008849 	.word	0x08008849
 8008278:	20001f48 	.word	0x20001f48
 800827c:	20001f44 	.word	0x20001f44
 8008280:	20001f30 	.word	0x20001f30
 8008284:	20001f28 	.word	0x20001f28

08008288 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008288:	b480      	push	{r7}
 800828a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800828c:	4b04      	ldr	r3, [pc, #16]	@ (80082a0 <vTaskSuspendAll+0x18>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	4a03      	ldr	r2, [pc, #12]	@ (80082a0 <vTaskSuspendAll+0x18>)
 8008294:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008296:	bf00      	nop
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	20001f4c 	.word	0x20001f4c

080082a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082b2:	4b43      	ldr	r3, [pc, #268]	@ (80083c0 <xTaskResumeAll+0x11c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10d      	bne.n	80082d6 <xTaskResumeAll+0x32>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	b672      	cpsid	i
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	b662      	cpsie	i
 80082ce:	603b      	str	r3, [r7, #0]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082d6:	f000 fee1 	bl	800909c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082da:	4b39      	ldr	r3, [pc, #228]	@ (80083c0 <xTaskResumeAll+0x11c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3b01      	subs	r3, #1
 80082e0:	4a37      	ldr	r2, [pc, #220]	@ (80083c0 <xTaskResumeAll+0x11c>)
 80082e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e4:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <xTaskResumeAll+0x11c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d161      	bne.n	80083b0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082ec:	4b35      	ldr	r3, [pc, #212]	@ (80083c4 <xTaskResumeAll+0x120>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05d      	beq.n	80083b0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082f4:	e02e      	b.n	8008354 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082f6:	4b34      	ldr	r3, [pc, #208]	@ (80083c8 <xTaskResumeAll+0x124>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3318      	adds	r3, #24
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff f8ee 	bl	80074e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	3304      	adds	r3, #4
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff f8e9 	bl	80074e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008316:	2201      	movs	r2, #1
 8008318:	409a      	lsls	r2, r3
 800831a:	4b2c      	ldr	r3, [pc, #176]	@ (80083cc <xTaskResumeAll+0x128>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4313      	orrs	r3, r2
 8008320:	4a2a      	ldr	r2, [pc, #168]	@ (80083cc <xTaskResumeAll+0x128>)
 8008322:	6013      	str	r3, [r2, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4a27      	ldr	r2, [pc, #156]	@ (80083d0 <xTaskResumeAll+0x12c>)
 8008332:	441a      	add	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7ff f875 	bl	800742a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008344:	4b23      	ldr	r3, [pc, #140]	@ (80083d4 <xTaskResumeAll+0x130>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	429a      	cmp	r2, r3
 800834c:	d302      	bcc.n	8008354 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800834e:	4b22      	ldr	r3, [pc, #136]	@ (80083d8 <xTaskResumeAll+0x134>)
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008354:	4b1c      	ldr	r3, [pc, #112]	@ (80083c8 <xTaskResumeAll+0x124>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1cc      	bne.n	80082f6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008362:	f000 fb29 	bl	80089b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008366:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <xTaskResumeAll+0x138>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008372:	f000 f837 	bl	80083e4 <xTaskIncrementTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800837c:	4b16      	ldr	r3, [pc, #88]	@ (80083d8 <xTaskResumeAll+0x134>)
 800837e:	2201      	movs	r2, #1
 8008380:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	3b01      	subs	r3, #1
 8008386:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1f1      	bne.n	8008372 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800838e:	4b13      	ldr	r3, [pc, #76]	@ (80083dc <xTaskResumeAll+0x138>)
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008394:	4b10      	ldr	r3, [pc, #64]	@ (80083d8 <xTaskResumeAll+0x134>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d009      	beq.n	80083b0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800839c:	2301      	movs	r3, #1
 800839e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083a0:	4b0f      	ldr	r3, [pc, #60]	@ (80083e0 <xTaskResumeAll+0x13c>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083b0:	f000 feaa 	bl	8009108 <vPortExitCritical>

	return xAlreadyYielded;
 80083b4:	68bb      	ldr	r3, [r7, #8]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	20001f4c 	.word	0x20001f4c
 80083c4:	20001f24 	.word	0x20001f24
 80083c8:	20001ee4 	.word	0x20001ee4
 80083cc:	20001f2c 	.word	0x20001f2c
 80083d0:	20001e28 	.word	0x20001e28
 80083d4:	20001e24 	.word	0x20001e24
 80083d8:	20001f38 	.word	0x20001f38
 80083dc:	20001f34 	.word	0x20001f34
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b086      	sub	sp, #24
 80083e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ee:	4b50      	ldr	r3, [pc, #320]	@ (8008530 <xTaskIncrementTick+0x14c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f040 808b 	bne.w	800850e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f8:	4b4e      	ldr	r3, [pc, #312]	@ (8008534 <xTaskIncrementTick+0x150>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008400:	4a4c      	ldr	r2, [pc, #304]	@ (8008534 <xTaskIncrementTick+0x150>)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d123      	bne.n	8008454 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800840c:	4b4a      	ldr	r3, [pc, #296]	@ (8008538 <xTaskIncrementTick+0x154>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00d      	beq.n	8008432 <xTaskIncrementTick+0x4e>
	__asm volatile
 8008416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841a:	b672      	cpsid	i
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	b662      	cpsie	i
 800842a:	603b      	str	r3, [r7, #0]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <xTaskIncrementTick+0x4a>
 8008432:	4b41      	ldr	r3, [pc, #260]	@ (8008538 <xTaskIncrementTick+0x154>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	4b40      	ldr	r3, [pc, #256]	@ (800853c <xTaskIncrementTick+0x158>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a3e      	ldr	r2, [pc, #248]	@ (8008538 <xTaskIncrementTick+0x154>)
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	4a3e      	ldr	r2, [pc, #248]	@ (800853c <xTaskIncrementTick+0x158>)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	4b3e      	ldr	r3, [pc, #248]	@ (8008540 <xTaskIncrementTick+0x15c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	3301      	adds	r3, #1
 800844c:	4a3c      	ldr	r2, [pc, #240]	@ (8008540 <xTaskIncrementTick+0x15c>)
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	f000 fab2 	bl	80089b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008454:	4b3b      	ldr	r3, [pc, #236]	@ (8008544 <xTaskIncrementTick+0x160>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	429a      	cmp	r2, r3
 800845c:	d348      	bcc.n	80084f0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800845e:	4b36      	ldr	r3, [pc, #216]	@ (8008538 <xTaskIncrementTick+0x154>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d104      	bne.n	8008472 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008468:	4b36      	ldr	r3, [pc, #216]	@ (8008544 <xTaskIncrementTick+0x160>)
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	601a      	str	r2, [r3, #0]
					break;
 8008470:	e03e      	b.n	80084f0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008472:	4b31      	ldr	r3, [pc, #196]	@ (8008538 <xTaskIncrementTick+0x154>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d203      	bcs.n	8008492 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800848a:	4a2e      	ldr	r2, [pc, #184]	@ (8008544 <xTaskIncrementTick+0x160>)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008490:	e02e      	b.n	80084f0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff f824 	bl	80074e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	3318      	adds	r3, #24
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7ff f81b 	bl	80074e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	2201      	movs	r2, #1
 80084b4:	409a      	lsls	r2, r3
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <xTaskIncrementTick+0x164>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	4a22      	ldr	r2, [pc, #136]	@ (8008548 <xTaskIncrementTick+0x164>)
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4a1f      	ldr	r2, [pc, #124]	@ (800854c <xTaskIncrementTick+0x168>)
 80084ce:	441a      	add	r2, r3
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3304      	adds	r3, #4
 80084d4:	4619      	mov	r1, r3
 80084d6:	4610      	mov	r0, r2
 80084d8:	f7fe ffa7 	bl	800742a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e0:	4b1b      	ldr	r3, [pc, #108]	@ (8008550 <xTaskIncrementTick+0x16c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d3b9      	bcc.n	800845e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80084ea:	2301      	movs	r3, #1
 80084ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084ee:	e7b6      	b.n	800845e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084f0:	4b17      	ldr	r3, [pc, #92]	@ (8008550 <xTaskIncrementTick+0x16c>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f6:	4915      	ldr	r1, [pc, #84]	@ (800854c <xTaskIncrementTick+0x168>)
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d907      	bls.n	8008518 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	617b      	str	r3, [r7, #20]
 800850c:	e004      	b.n	8008518 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800850e:	4b11      	ldr	r3, [pc, #68]	@ (8008554 <xTaskIncrementTick+0x170>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3301      	adds	r3, #1
 8008514:	4a0f      	ldr	r2, [pc, #60]	@ (8008554 <xTaskIncrementTick+0x170>)
 8008516:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008518:	4b0f      	ldr	r3, [pc, #60]	@ (8008558 <xTaskIncrementTick+0x174>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008520:	2301      	movs	r3, #1
 8008522:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008524:	697b      	ldr	r3, [r7, #20]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20001f4c 	.word	0x20001f4c
 8008534:	20001f28 	.word	0x20001f28
 8008538:	20001edc 	.word	0x20001edc
 800853c:	20001ee0 	.word	0x20001ee0
 8008540:	20001f3c 	.word	0x20001f3c
 8008544:	20001f44 	.word	0x20001f44
 8008548:	20001f2c 	.word	0x20001f2c
 800854c:	20001e28 	.word	0x20001e28
 8008550:	20001e24 	.word	0x20001e24
 8008554:	20001f34 	.word	0x20001f34
 8008558:	20001f38 	.word	0x20001f38

0800855c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008562:	4b28      	ldr	r3, [pc, #160]	@ (8008604 <vTaskSwitchContext+0xa8>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800856a:	4b27      	ldr	r3, [pc, #156]	@ (8008608 <vTaskSwitchContext+0xac>)
 800856c:	2201      	movs	r2, #1
 800856e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008570:	e042      	b.n	80085f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008572:	4b25      	ldr	r3, [pc, #148]	@ (8008608 <vTaskSwitchContext+0xac>)
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008578:	4b24      	ldr	r3, [pc, #144]	@ (800860c <vTaskSwitchContext+0xb0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	fab3 f383 	clz	r3, r3
 8008584:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	f1c3 031f 	rsb	r3, r3, #31
 800858c:	617b      	str	r3, [r7, #20]
 800858e:	4920      	ldr	r1, [pc, #128]	@ (8008610 <vTaskSwitchContext+0xb4>)
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10d      	bne.n	80085be <vTaskSwitchContext+0x62>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vTaskSwitchContext+0x5e>
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4a11      	ldr	r2, [pc, #68]	@ (8008610 <vTaskSwitchContext+0xb4>)
 80085ca:	4413      	add	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	605a      	str	r2, [r3, #4]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	3308      	adds	r3, #8
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d104      	bne.n	80085ee <vTaskSwitchContext+0x92>
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4a07      	ldr	r2, [pc, #28]	@ (8008614 <vTaskSwitchContext+0xb8>)
 80085f6:	6013      	str	r3, [r2, #0]
}
 80085f8:	bf00      	nop
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20001f4c 	.word	0x20001f4c
 8008608:	20001f38 	.word	0x20001f38
 800860c:	20001f2c 	.word	0x20001f2c
 8008610:	20001e28 	.word	0x20001e28
 8008614:	20001e24 	.word	0x20001e24

08008618 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10d      	bne.n	8008644 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	b672      	cpsid	i
 800862e:	f383 8811 	msr	BASEPRI, r3
 8008632:	f3bf 8f6f 	isb	sy
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	b662      	cpsie	i
 800863c:	60fb      	str	r3, [r7, #12]
}
 800863e:	bf00      	nop
 8008640:	bf00      	nop
 8008642:	e7fd      	b.n	8008640 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008644:	4b07      	ldr	r3, [pc, #28]	@ (8008664 <vTaskPlaceOnEventList+0x4c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3318      	adds	r3, #24
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fe ff10 	bl	8007472 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008652:	2101      	movs	r1, #1
 8008654:	6838      	ldr	r0, [r7, #0]
 8008656:	f000 fbad 	bl	8008db4 <prvAddCurrentTaskToDelayedList>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20001e24 	.word	0x20001e24

08008668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10d      	bne.n	800869a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	b672      	cpsid	i
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	b662      	cpsie	i
 8008692:	60fb      	str	r3, [r7, #12]
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	e7fd      	b.n	8008696 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3318      	adds	r3, #24
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe ff20 	bl	80074e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a4:	4b1d      	ldr	r3, [pc, #116]	@ (800871c <xTaskRemoveFromEventList+0xb4>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11c      	bne.n	80086e6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	3304      	adds	r3, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe ff17 	bl	80074e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ba:	2201      	movs	r2, #1
 80086bc:	409a      	lsls	r2, r3
 80086be:	4b18      	ldr	r3, [pc, #96]	@ (8008720 <xTaskRemoveFromEventList+0xb8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	4a16      	ldr	r2, [pc, #88]	@ (8008720 <xTaskRemoveFromEventList+0xb8>)
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086cc:	4613      	mov	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4a13      	ldr	r2, [pc, #76]	@ (8008724 <xTaskRemoveFromEventList+0xbc>)
 80086d6:	441a      	add	r2, r3
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	3304      	adds	r3, #4
 80086dc:	4619      	mov	r1, r3
 80086de:	4610      	mov	r0, r2
 80086e0:	f7fe fea3 	bl	800742a <vListInsertEnd>
 80086e4:	e005      	b.n	80086f2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	3318      	adds	r3, #24
 80086ea:	4619      	mov	r1, r3
 80086ec:	480e      	ldr	r0, [pc, #56]	@ (8008728 <xTaskRemoveFromEventList+0xc0>)
 80086ee:	f7fe fe9c 	bl	800742a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086f6:	4b0d      	ldr	r3, [pc, #52]	@ (800872c <xTaskRemoveFromEventList+0xc4>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d905      	bls.n	800870c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008704:	4b0a      	ldr	r3, [pc, #40]	@ (8008730 <xTaskRemoveFromEventList+0xc8>)
 8008706:	2201      	movs	r2, #1
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	e001      	b.n	8008710 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008710:	697b      	ldr	r3, [r7, #20]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	20001f4c 	.word	0x20001f4c
 8008720:	20001f2c 	.word	0x20001f2c
 8008724:	20001e28 	.word	0x20001e28
 8008728:	20001ee4 	.word	0x20001ee4
 800872c:	20001e24 	.word	0x20001e24
 8008730:	20001f38 	.word	0x20001f38

08008734 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800873c:	4b06      	ldr	r3, [pc, #24]	@ (8008758 <vTaskInternalSetTimeOutState+0x24>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008744:	4b05      	ldr	r3, [pc, #20]	@ (800875c <vTaskInternalSetTimeOutState+0x28>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	605a      	str	r2, [r3, #4]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20001f3c 	.word	0x20001f3c
 800875c:	20001f28 	.word	0x20001f28

08008760 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10d      	bne.n	800878c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008774:	b672      	cpsid	i
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	b662      	cpsie	i
 8008784:	613b      	str	r3, [r7, #16]
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	e7fd      	b.n	8008788 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10d      	bne.n	80087ae <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	e7fd      	b.n	80087aa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80087ae:	f000 fc75 	bl	800909c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008828 <xTaskCheckForTimeOut+0xc8>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	1ad3      	subs	r3, r2, r3
 80087c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d102      	bne.n	80087d2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	e023      	b.n	800881a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4b15      	ldr	r3, [pc, #84]	@ (800882c <xTaskCheckForTimeOut+0xcc>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d007      	beq.n	80087ee <xTaskCheckForTimeOut+0x8e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e015      	b.n	800881a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d20b      	bcs.n	8008810 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ff95 	bl	8008734 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800880a:	2300      	movs	r3, #0
 800880c:	61fb      	str	r3, [r7, #28]
 800880e:	e004      	b.n	800881a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008816:	2301      	movs	r3, #1
 8008818:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800881a:	f000 fc75 	bl	8009108 <vPortExitCritical>

	return xReturn;
 800881e:	69fb      	ldr	r3, [r7, #28]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20001f28 	.word	0x20001f28
 800882c:	20001f3c 	.word	0x20001f3c

08008830 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008834:	4b03      	ldr	r3, [pc, #12]	@ (8008844 <vTaskMissedYield+0x14>)
 8008836:	2201      	movs	r2, #1
 8008838:	601a      	str	r2, [r3, #0]
}
 800883a:	bf00      	nop
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	20001f38 	.word	0x20001f38

08008848 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008850:	f000 f852 	bl	80088f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008854:	4b06      	ldr	r3, [pc, #24]	@ (8008870 <prvIdleTask+0x28>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d9f9      	bls.n	8008850 <prvIdleTask+0x8>
			{
				taskYIELD();
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <prvIdleTask+0x2c>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800886c:	e7f0      	b.n	8008850 <prvIdleTask+0x8>
 800886e:	bf00      	nop
 8008870:	20001e28 	.word	0x20001e28
 8008874:	e000ed04 	.word	0xe000ed04

08008878 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800887e:	2300      	movs	r3, #0
 8008880:	607b      	str	r3, [r7, #4]
 8008882:	e00c      	b.n	800889e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	4613      	mov	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4a12      	ldr	r2, [pc, #72]	@ (80088d8 <prvInitialiseTaskLists+0x60>)
 8008890:	4413      	add	r3, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe fd9c 	bl	80073d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3301      	adds	r3, #1
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b06      	cmp	r3, #6
 80088a2:	d9ef      	bls.n	8008884 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088a4:	480d      	ldr	r0, [pc, #52]	@ (80088dc <prvInitialiseTaskLists+0x64>)
 80088a6:	f7fe fd93 	bl	80073d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088aa:	480d      	ldr	r0, [pc, #52]	@ (80088e0 <prvInitialiseTaskLists+0x68>)
 80088ac:	f7fe fd90 	bl	80073d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088b0:	480c      	ldr	r0, [pc, #48]	@ (80088e4 <prvInitialiseTaskLists+0x6c>)
 80088b2:	f7fe fd8d 	bl	80073d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088b6:	480c      	ldr	r0, [pc, #48]	@ (80088e8 <prvInitialiseTaskLists+0x70>)
 80088b8:	f7fe fd8a 	bl	80073d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088bc:	480b      	ldr	r0, [pc, #44]	@ (80088ec <prvInitialiseTaskLists+0x74>)
 80088be:	f7fe fd87 	bl	80073d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088c2:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <prvInitialiseTaskLists+0x78>)
 80088c4:	4a05      	ldr	r2, [pc, #20]	@ (80088dc <prvInitialiseTaskLists+0x64>)
 80088c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088c8:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <prvInitialiseTaskLists+0x7c>)
 80088ca:	4a05      	ldr	r2, [pc, #20]	@ (80088e0 <prvInitialiseTaskLists+0x68>)
 80088cc:	601a      	str	r2, [r3, #0]
}
 80088ce:	bf00      	nop
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20001e28 	.word	0x20001e28
 80088dc:	20001eb4 	.word	0x20001eb4
 80088e0:	20001ec8 	.word	0x20001ec8
 80088e4:	20001ee4 	.word	0x20001ee4
 80088e8:	20001ef8 	.word	0x20001ef8
 80088ec:	20001f10 	.word	0x20001f10
 80088f0:	20001edc 	.word	0x20001edc
 80088f4:	20001ee0 	.word	0x20001ee0

080088f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088fe:	e019      	b.n	8008934 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008900:	f000 fbcc 	bl	800909c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008904:	4b10      	ldr	r3, [pc, #64]	@ (8008948 <prvCheckTasksWaitingTermination+0x50>)
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	3304      	adds	r3, #4
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fde7 	bl	80074e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008916:	4b0d      	ldr	r3, [pc, #52]	@ (800894c <prvCheckTasksWaitingTermination+0x54>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	4a0b      	ldr	r2, [pc, #44]	@ (800894c <prvCheckTasksWaitingTermination+0x54>)
 800891e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008920:	4b0b      	ldr	r3, [pc, #44]	@ (8008950 <prvCheckTasksWaitingTermination+0x58>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3b01      	subs	r3, #1
 8008926:	4a0a      	ldr	r2, [pc, #40]	@ (8008950 <prvCheckTasksWaitingTermination+0x58>)
 8008928:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800892a:	f000 fbed 	bl	8009108 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f810 	bl	8008954 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008934:	4b06      	ldr	r3, [pc, #24]	@ (8008950 <prvCheckTasksWaitingTermination+0x58>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1e1      	bne.n	8008900 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800893c:	bf00      	nop
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	20001ef8 	.word	0x20001ef8
 800894c:	20001f24 	.word	0x20001f24
 8008950:	20001f0c 	.word	0x20001f0c

08008954 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008962:	2b00      	cmp	r3, #0
 8008964:	d108      	bne.n	8008978 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800896a:	4618      	mov	r0, r3
 800896c:	f000 fd92 	bl	8009494 <vPortFree>
				vPortFree( pxTCB );
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fd8f 	bl	8009494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008976:	e01b      	b.n	80089b0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800897e:	2b01      	cmp	r3, #1
 8008980:	d103      	bne.n	800898a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fd86 	bl	8009494 <vPortFree>
	}
 8008988:	e012      	b.n	80089b0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008990:	2b02      	cmp	r3, #2
 8008992:	d00d      	beq.n	80089b0 <prvDeleteTCB+0x5c>
	__asm volatile
 8008994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008998:	b672      	cpsid	i
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	b662      	cpsie	i
 80089a8:	60fb      	str	r3, [r7, #12]
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <prvDeleteTCB+0x58>
	}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089be:	4b0c      	ldr	r3, [pc, #48]	@ (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	@ (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089d0:	e008      	b.n	80089e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <prvResetNextTaskUnblockTime+0x38>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a04      	ldr	r2, [pc, #16]	@ (80089f4 <prvResetNextTaskUnblockTime+0x3c>)
 80089e2:	6013      	str	r3, [r2, #0]
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr
 80089f0:	20001edc 	.word	0x20001edc
 80089f4:	20001f44 	.word	0x20001f44

080089f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089fe:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <xTaskGetSchedulerState+0x34>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d102      	bne.n	8008a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a06:	2301      	movs	r3, #1
 8008a08:	607b      	str	r3, [r7, #4]
 8008a0a:	e008      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a0c:	4b08      	ldr	r3, [pc, #32]	@ (8008a30 <xTaskGetSchedulerState+0x38>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d102      	bne.n	8008a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a14:	2302      	movs	r3, #2
 8008a16:	607b      	str	r3, [r7, #4]
 8008a18:	e001      	b.n	8008a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a1e:	687b      	ldr	r3, [r7, #4]
	}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr
 8008a2c:	20001f30 	.word	0x20001f30
 8008a30:	20001f4c 	.word	0x20001f4c

08008a34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d069      	beq.n	8008b1e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4b36      	ldr	r3, [pc, #216]	@ (8008b28 <xTaskPriorityInherit+0xf4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d259      	bcs.n	8008b0c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	db06      	blt.n	8008a6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a60:	4b31      	ldr	r3, [pc, #196]	@ (8008b28 <xTaskPriorityInherit+0xf4>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a66:	f1c3 0207 	rsb	r2, r3, #7
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6959      	ldr	r1, [r3, #20]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a76:	4613      	mov	r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4a2b      	ldr	r2, [pc, #172]	@ (8008b2c <xTaskPriorityInherit+0xf8>)
 8008a80:	4413      	add	r3, r2
 8008a82:	4299      	cmp	r1, r3
 8008a84:	d13a      	bne.n	8008afc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fd2a 	bl	80074e4 <uxListRemove>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d115      	bne.n	8008ac2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9a:	4924      	ldr	r1, [pc, #144]	@ (8008b2c <xTaskPriorityInherit+0xf8>)
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	4413      	add	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	440b      	add	r3, r1
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10a      	bne.n	8008ac2 <xTaskPriorityInherit+0x8e>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	43da      	mvns	r2, r3
 8008ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b30 <xTaskPriorityInherit+0xfc>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4013      	ands	r3, r2
 8008abe:	4a1c      	ldr	r2, [pc, #112]	@ (8008b30 <xTaskPriorityInherit+0xfc>)
 8008ac0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ac2:	4b19      	ldr	r3, [pc, #100]	@ (8008b28 <xTaskPriorityInherit+0xf4>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	409a      	lsls	r2, r3
 8008ad4:	4b16      	ldr	r3, [pc, #88]	@ (8008b30 <xTaskPriorityInherit+0xfc>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	4a15      	ldr	r2, [pc, #84]	@ (8008b30 <xTaskPriorityInherit+0xfc>)
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	4a10      	ldr	r2, [pc, #64]	@ (8008b2c <xTaskPriorityInherit+0xf8>)
 8008aec:	441a      	add	r2, r3
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	3304      	adds	r3, #4
 8008af2:	4619      	mov	r1, r3
 8008af4:	4610      	mov	r0, r2
 8008af6:	f7fe fc98 	bl	800742a <vListInsertEnd>
 8008afa:	e004      	b.n	8008b06 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <xTaskPriorityInherit+0xf4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
 8008b0a:	e008      	b.n	8008b1e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b10:	4b05      	ldr	r3, [pc, #20]	@ (8008b28 <xTaskPriorityInherit+0xf4>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d201      	bcs.n	8008b1e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
	}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3710      	adds	r7, #16
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	20001e24 	.word	0x20001e24
 8008b2c:	20001e28 	.word	0x20001e28
 8008b30:	20001f2c 	.word	0x20001f2c

08008b34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d074      	beq.n	8008c34 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8008c40 <xTaskPriorityDisinherit+0x10c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d00d      	beq.n	8008b70 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	b672      	cpsid	i
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	b662      	cpsie	i
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	bf00      	nop
 8008b6e:	e7fd      	b.n	8008b6c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10d      	bne.n	8008b94 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	b672      	cpsid	i
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	b662      	cpsie	i
 8008b8c:	60bb      	str	r3, [r7, #8]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b98:	1e5a      	subs	r2, r3, #1
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d044      	beq.n	8008c34 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d140      	bne.n	8008c34 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fc94 	bl	80074e4 <uxListRemove>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d115      	bne.n	8008bee <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bc6:	491f      	ldr	r1, [pc, #124]	@ (8008c44 <xTaskPriorityDisinherit+0x110>)
 8008bc8:	4613      	mov	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10a      	bne.n	8008bee <xTaskPriorityDisinherit+0xba>
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	2201      	movs	r2, #1
 8008bde:	fa02 f303 	lsl.w	r3, r2, r3
 8008be2:	43da      	mvns	r2, r3
 8008be4:	4b18      	ldr	r3, [pc, #96]	@ (8008c48 <xTaskPriorityDisinherit+0x114>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4013      	ands	r3, r2
 8008bea:	4a17      	ldr	r2, [pc, #92]	@ (8008c48 <xTaskPriorityDisinherit+0x114>)
 8008bec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfa:	f1c3 0207 	rsb	r2, r3, #7
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c06:	2201      	movs	r2, #1
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8008c48 <xTaskPriorityDisinherit+0x114>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	4a0d      	ldr	r2, [pc, #52]	@ (8008c48 <xTaskPriorityDisinherit+0x114>)
 8008c12:	6013      	str	r3, [r2, #0]
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c18:	4613      	mov	r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4a08      	ldr	r2, [pc, #32]	@ (8008c44 <xTaskPriorityDisinherit+0x110>)
 8008c22:	441a      	add	r2, r3
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	3304      	adds	r3, #4
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4610      	mov	r0, r2
 8008c2c:	f7fe fbfd 	bl	800742a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c30:	2301      	movs	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c34:	697b      	ldr	r3, [r7, #20]
	}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20001e24 	.word	0x20001e24
 8008c44:	20001e28 	.word	0x20001e28
 8008c48:	20001f2c 	.word	0x20001f2c

08008c4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8089 	beq.w	8008d78 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c66:	69bb      	ldr	r3, [r7, #24]
 8008c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10d      	bne.n	8008c8a <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	60fb      	str	r3, [r7, #12]
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	e7fd      	b.n	8008c86 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d902      	bls.n	8008c9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	61fb      	str	r3, [r7, #28]
 8008c98:	e002      	b.n	8008ca0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d066      	beq.n	8008d78 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d161      	bne.n	8008d78 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008cb4:	4b32      	ldr	r3, [pc, #200]	@ (8008d80 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d10d      	bne.n	8008cda <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	b672      	cpsid	i
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	b662      	cpsie	i
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop
 8008cd8:	e7fd      	b.n	8008cd6 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cde:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	69fa      	ldr	r2, [r7, #28]
 8008ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	db04      	blt.n	8008cf8 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	f1c3 0207 	rsb	r2, r3, #7
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	6959      	ldr	r1, [r3, #20]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4a1f      	ldr	r2, [pc, #124]	@ (8008d84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d08:	4413      	add	r3, r2
 8008d0a:	4299      	cmp	r1, r3
 8008d0c:	d134      	bne.n	8008d78 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	3304      	adds	r3, #4
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fbe6 	bl	80074e4 <uxListRemove>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d115      	bne.n	8008d4a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d22:	4918      	ldr	r1, [pc, #96]	@ (8008d84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d24:	4613      	mov	r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	440b      	add	r3, r1
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d38:	2201      	movs	r2, #1
 8008d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3e:	43da      	mvns	r2, r3
 8008d40:	4b11      	ldr	r3, [pc, #68]	@ (8008d88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4013      	ands	r3, r2
 8008d46:	4a10      	ldr	r2, [pc, #64]	@ (8008d88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	2201      	movs	r2, #1
 8008d50:	409a      	lsls	r2, r3
 8008d52:	4b0d      	ldr	r3, [pc, #52]	@ (8008d88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	4a0b      	ldr	r2, [pc, #44]	@ (8008d88 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d60:	4613      	mov	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4a06      	ldr	r2, [pc, #24]	@ (8008d84 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008d6a:	441a      	add	r2, r3
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	3304      	adds	r3, #4
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7fe fb59 	bl	800742a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d78:	bf00      	nop
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20001e24 	.word	0x20001e24
 8008d84:	20001e28 	.word	0x20001e28
 8008d88:	20001f2c 	.word	0x20001f2c

08008d8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d90:	4b07      	ldr	r3, [pc, #28]	@ (8008db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d98:	4b05      	ldr	r3, [pc, #20]	@ (8008db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d9e:	3201      	adds	r2, #1
 8008da0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8008da2:	4b03      	ldr	r3, [pc, #12]	@ (8008db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008da4:	681b      	ldr	r3, [r3, #0]
	}
 8008da6:	4618      	mov	r0, r3
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	20001e24 	.word	0x20001e24

08008db4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008dbe:	4b29      	ldr	r3, [pc, #164]	@ (8008e64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dc4:	4b28      	ldr	r3, [pc, #160]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	3304      	adds	r3, #4
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe fb8a 	bl	80074e4 <uxListRemove>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10b      	bne.n	8008dee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008dd6:	4b24      	ldr	r3, [pc, #144]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ddc:	2201      	movs	r2, #1
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	43da      	mvns	r2, r3
 8008de4:	4b21      	ldr	r3, [pc, #132]	@ (8008e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4013      	ands	r3, r2
 8008dea:	4a20      	ldr	r2, [pc, #128]	@ (8008e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df4:	d10a      	bne.n	8008e0c <prvAddCurrentTaskToDelayedList+0x58>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d007      	beq.n	8008e0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4619      	mov	r1, r3
 8008e04:	481a      	ldr	r0, [pc, #104]	@ (8008e70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008e06:	f7fe fb10 	bl	800742a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e0a:	e026      	b.n	8008e5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e14:	4b14      	ldr	r3, [pc, #80]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e1c:	68ba      	ldr	r2, [r7, #8]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d209      	bcs.n	8008e38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e24:	4b13      	ldr	r3, [pc, #76]	@ (8008e74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	4b0f      	ldr	r3, [pc, #60]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f7fe fb1e 	bl	8007472 <vListInsert>
}
 8008e36:	e010      	b.n	8008e5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e38:	4b0f      	ldr	r3, [pc, #60]	@ (8008e78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3304      	adds	r3, #4
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f7fe fb14 	bl	8007472 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d202      	bcs.n	8008e5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e54:	4a09      	ldr	r2, [pc, #36]	@ (8008e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6013      	str	r3, [r2, #0]
}
 8008e5a:	bf00      	nop
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	20001f28 	.word	0x20001f28
 8008e68:	20001e24 	.word	0x20001e24
 8008e6c:	20001f2c 	.word	0x20001f2c
 8008e70:	20001f10 	.word	0x20001f10
 8008e74:	20001ee0 	.word	0x20001ee0
 8008e78:	20001edc 	.word	0x20001edc
 8008e7c:	20001f44 	.word	0x20001f44

08008e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3b04      	subs	r3, #4
 8008e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3b04      	subs	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0201 	bic.w	r2, r3, #1
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b04      	subs	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee4 <pxPortInitialiseStack+0x64>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3b14      	subs	r3, #20
 8008eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3b04      	subs	r3, #4
 8008ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f06f 0202 	mvn.w	r2, #2
 8008ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	3b20      	subs	r3, #32
 8008ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3714      	adds	r7, #20
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr
 8008ee4:	08008ee9 	.word	0x08008ee9

08008ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ef2:	4b15      	ldr	r3, [pc, #84]	@ (8008f48 <prvTaskExitError+0x60>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efa:	d00d      	beq.n	8008f18 <prvTaskExitError+0x30>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f00:	b672      	cpsid	i
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	b662      	cpsie	i
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <prvTaskExitError+0x2c>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	b672      	cpsid	i
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	b662      	cpsie	i
 8008f2c:	60bb      	str	r3, [r7, #8]
}
 8008f2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f30:	bf00      	nop
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0fc      	beq.n	8008f32 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f38:	bf00      	nop
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20000058 	.word	0x20000058
 8008f4c:	00000000 	.word	0x00000000

08008f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f50:	4b07      	ldr	r3, [pc, #28]	@ (8008f70 <pxCurrentTCBConst2>)
 8008f52:	6819      	ldr	r1, [r3, #0]
 8008f54:	6808      	ldr	r0, [r1, #0]
 8008f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5a:	f380 8809 	msr	PSP, r0
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f04f 0000 	mov.w	r0, #0
 8008f66:	f380 8811 	msr	BASEPRI, r0
 8008f6a:	4770      	bx	lr
 8008f6c:	f3af 8000 	nop.w

08008f70 <pxCurrentTCBConst2>:
 8008f70:	20001e24 	.word	0x20001e24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop

08008f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f78:	4808      	ldr	r0, [pc, #32]	@ (8008f9c <prvPortStartFirstTask+0x24>)
 8008f7a:	6800      	ldr	r0, [r0, #0]
 8008f7c:	6800      	ldr	r0, [r0, #0]
 8008f7e:	f380 8808 	msr	MSP, r0
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f380 8814 	msr	CONTROL, r0
 8008f8a:	b662      	cpsie	i
 8008f8c:	b661      	cpsie	f
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	df00      	svc	0
 8008f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f9a:	bf00      	nop
 8008f9c:	e000ed08 	.word	0xe000ed08

08008fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fa6:	4b37      	ldr	r3, [pc, #220]	@ (8009084 <xPortStartScheduler+0xe4>)
 8008fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	22ff      	movs	r2, #255	@ 0xff
 8008fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	4b2f      	ldr	r3, [pc, #188]	@ (8009088 <xPortStartScheduler+0xe8>)
 8008fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fce:	4b2f      	ldr	r3, [pc, #188]	@ (800908c <xPortStartScheduler+0xec>)
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fd4:	e009      	b.n	8008fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fd6:	4b2d      	ldr	r3, [pc, #180]	@ (800908c <xPortStartScheduler+0xec>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800908c <xPortStartScheduler+0xec>)
 8008fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ff2:	2b80      	cmp	r3, #128	@ 0x80
 8008ff4:	d0ef      	beq.n	8008fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ff6:	4b25      	ldr	r3, [pc, #148]	@ (800908c <xPortStartScheduler+0xec>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1c3 0307 	rsb	r3, r3, #7
 8008ffe:	2b04      	cmp	r3, #4
 8009000:	d00d      	beq.n	800901e <xPortStartScheduler+0x7e>
	__asm volatile
 8009002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009006:	b672      	cpsid	i
 8009008:	f383 8811 	msr	BASEPRI, r3
 800900c:	f3bf 8f6f 	isb	sy
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	b662      	cpsie	i
 8009016:	60bb      	str	r3, [r7, #8]
}
 8009018:	bf00      	nop
 800901a:	bf00      	nop
 800901c:	e7fd      	b.n	800901a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800901e:	4b1b      	ldr	r3, [pc, #108]	@ (800908c <xPortStartScheduler+0xec>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	021b      	lsls	r3, r3, #8
 8009024:	4a19      	ldr	r2, [pc, #100]	@ (800908c <xPortStartScheduler+0xec>)
 8009026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009028:	4b18      	ldr	r3, [pc, #96]	@ (800908c <xPortStartScheduler+0xec>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009030:	4a16      	ldr	r2, [pc, #88]	@ (800908c <xPortStartScheduler+0xec>)
 8009032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800903c:	4b14      	ldr	r3, [pc, #80]	@ (8009090 <xPortStartScheduler+0xf0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a13      	ldr	r2, [pc, #76]	@ (8009090 <xPortStartScheduler+0xf0>)
 8009042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009048:	4b11      	ldr	r3, [pc, #68]	@ (8009090 <xPortStartScheduler+0xf0>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a10      	ldr	r2, [pc, #64]	@ (8009090 <xPortStartScheduler+0xf0>)
 800904e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009054:	f000 f8dc 	bl	8009210 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009058:	4b0e      	ldr	r3, [pc, #56]	@ (8009094 <xPortStartScheduler+0xf4>)
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800905e:	f000 f8fb 	bl	8009258 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009062:	4b0d      	ldr	r3, [pc, #52]	@ (8009098 <xPortStartScheduler+0xf8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a0c      	ldr	r2, [pc, #48]	@ (8009098 <xPortStartScheduler+0xf8>)
 8009068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800906c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800906e:	f7ff ff83 	bl	8008f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009072:	f7ff fa73 	bl	800855c <vTaskSwitchContext>
	prvTaskExitError();
 8009076:	f7ff ff37 	bl	8008ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	e000e400 	.word	0xe000e400
 8009088:	20001f50 	.word	0x20001f50
 800908c:	20001f54 	.word	0x20001f54
 8009090:	e000ed20 	.word	0xe000ed20
 8009094:	20000058 	.word	0x20000058
 8009098:	e000ef34 	.word	0xe000ef34

0800909c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	607b      	str	r3, [r7, #4]
}
 80090b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090ba:	4b11      	ldr	r3, [pc, #68]	@ (8009100 <vPortEnterCritical+0x64>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	4a0f      	ldr	r2, [pc, #60]	@ (8009100 <vPortEnterCritical+0x64>)
 80090c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090c4:	4b0e      	ldr	r3, [pc, #56]	@ (8009100 <vPortEnterCritical+0x64>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d112      	bne.n	80090f2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009104 <vPortEnterCritical+0x68>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00d      	beq.n	80090f2 <vPortEnterCritical+0x56>
	__asm volatile
 80090d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090da:	b672      	cpsid	i
 80090dc:	f383 8811 	msr	BASEPRI, r3
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	f3bf 8f4f 	dsb	sy
 80090e8:	b662      	cpsie	i
 80090ea:	603b      	str	r3, [r7, #0]
}
 80090ec:	bf00      	nop
 80090ee:	bf00      	nop
 80090f0:	e7fd      	b.n	80090ee <vPortEnterCritical+0x52>
	}
}
 80090f2:	bf00      	nop
 80090f4:	370c      	adds	r7, #12
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	20000058 	.word	0x20000058
 8009104:	e000ed04 	.word	0xe000ed04

08009108 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800910e:	4b13      	ldr	r3, [pc, #76]	@ (800915c <vPortExitCritical+0x54>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10d      	bne.n	8009132 <vPortExitCritical+0x2a>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800911a:	b672      	cpsid	i
 800911c:	f383 8811 	msr	BASEPRI, r3
 8009120:	f3bf 8f6f 	isb	sy
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	b662      	cpsie	i
 800912a:	607b      	str	r3, [r7, #4]
}
 800912c:	bf00      	nop
 800912e:	bf00      	nop
 8009130:	e7fd      	b.n	800912e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009132:	4b0a      	ldr	r3, [pc, #40]	@ (800915c <vPortExitCritical+0x54>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3b01      	subs	r3, #1
 8009138:	4a08      	ldr	r2, [pc, #32]	@ (800915c <vPortExitCritical+0x54>)
 800913a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800913c:	4b07      	ldr	r3, [pc, #28]	@ (800915c <vPortExitCritical+0x54>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d105      	bne.n	8009150 <vPortExitCritical+0x48>
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000058 	.word	0x20000058

08009160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009160:	f3ef 8009 	mrs	r0, PSP
 8009164:	f3bf 8f6f 	isb	sy
 8009168:	4b15      	ldr	r3, [pc, #84]	@ (80091c0 <pxCurrentTCBConst>)
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	f01e 0f10 	tst.w	lr, #16
 8009170:	bf08      	it	eq
 8009172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917a:	6010      	str	r0, [r2, #0]
 800917c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009184:	b672      	cpsid	i
 8009186:	f380 8811 	msr	BASEPRI, r0
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	b662      	cpsie	i
 8009194:	f7ff f9e2 	bl	800855c <vTaskSwitchContext>
 8009198:	f04f 0000 	mov.w	r0, #0
 800919c:	f380 8811 	msr	BASEPRI, r0
 80091a0:	bc09      	pop	{r0, r3}
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	6808      	ldr	r0, [r1, #0]
 80091a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091aa:	f01e 0f10 	tst.w	lr, #16
 80091ae:	bf08      	it	eq
 80091b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091b4:	f380 8809 	msr	PSP, r0
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop

080091c0 <pxCurrentTCBConst>:
 80091c0:	20001e24 	.word	0x20001e24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop

080091c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d2:	b672      	cpsid	i
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	b662      	cpsie	i
 80091e2:	607b      	str	r3, [r7, #4]
}
 80091e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091e6:	f7ff f8fd 	bl	80083e4 <xTaskIncrementTick>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091f0:	4b06      	ldr	r3, [pc, #24]	@ (800920c <SysTick_Handler+0x44>)
 80091f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	f383 8811 	msr	BASEPRI, r3
}
 8009202:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	e000ed04 	.word	0xe000ed04

08009210 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009210:	b480      	push	{r7}
 8009212:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009214:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <vPortSetupTimerInterrupt+0x34>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800921a:	4b0b      	ldr	r3, [pc, #44]	@ (8009248 <vPortSetupTimerInterrupt+0x38>)
 800921c:	2200      	movs	r2, #0
 800921e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009220:	4b0a      	ldr	r3, [pc, #40]	@ (800924c <vPortSetupTimerInterrupt+0x3c>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a0a      	ldr	r2, [pc, #40]	@ (8009250 <vPortSetupTimerInterrupt+0x40>)
 8009226:	fba2 2303 	umull	r2, r3, r2, r3
 800922a:	099b      	lsrs	r3, r3, #6
 800922c:	4a09      	ldr	r2, [pc, #36]	@ (8009254 <vPortSetupTimerInterrupt+0x44>)
 800922e:	3b01      	subs	r3, #1
 8009230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009232:	4b04      	ldr	r3, [pc, #16]	@ (8009244 <vPortSetupTimerInterrupt+0x34>)
 8009234:	2207      	movs	r2, #7
 8009236:	601a      	str	r2, [r3, #0]
}
 8009238:	bf00      	nop
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	e000e010 	.word	0xe000e010
 8009248:	e000e018 	.word	0xe000e018
 800924c:	20000038 	.word	0x20000038
 8009250:	10624dd3 	.word	0x10624dd3
 8009254:	e000e014 	.word	0xe000e014

08009258 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009258:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009268 <vPortEnableVFP+0x10>
 800925c:	6801      	ldr	r1, [r0, #0]
 800925e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009262:	6001      	str	r1, [r0, #0]
 8009264:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009266:	bf00      	nop
 8009268:	e000ed88 	.word	0xe000ed88

0800926c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009272:	f3ef 8305 	mrs	r3, IPSR
 8009276:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2b0f      	cmp	r3, #15
 800927c:	d917      	bls.n	80092ae <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800927e:	4a1a      	ldr	r2, [pc, #104]	@ (80092e8 <vPortValidateInterruptPriority+0x7c>)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009288:	4b18      	ldr	r3, [pc, #96]	@ (80092ec <vPortValidateInterruptPriority+0x80>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	7afa      	ldrb	r2, [r7, #11]
 800928e:	429a      	cmp	r2, r3
 8009290:	d20d      	bcs.n	80092ae <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8009292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009296:	b672      	cpsid	i
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	b662      	cpsie	i
 80092a6:	607b      	str	r3, [r7, #4]
}
 80092a8:	bf00      	nop
 80092aa:	bf00      	nop
 80092ac:	e7fd      	b.n	80092aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092ae:	4b10      	ldr	r3, [pc, #64]	@ (80092f0 <vPortValidateInterruptPriority+0x84>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80092b6:	4b0f      	ldr	r3, [pc, #60]	@ (80092f4 <vPortValidateInterruptPriority+0x88>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d90d      	bls.n	80092da <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c2:	b672      	cpsid	i
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	b662      	cpsie	i
 80092d2:	603b      	str	r3, [r7, #0]
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	e7fd      	b.n	80092d6 <vPortValidateInterruptPriority+0x6a>
	}
 80092da:	bf00      	nop
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	e000e3f0 	.word	0xe000e3f0
 80092ec:	20001f50 	.word	0x20001f50
 80092f0:	e000ed0c 	.word	0xe000ed0c
 80092f4:	20001f54 	.word	0x20001f54

080092f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b08a      	sub	sp, #40	@ 0x28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009304:	f7fe ffc0 	bl	8008288 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009308:	4b5d      	ldr	r3, [pc, #372]	@ (8009480 <pvPortMalloc+0x188>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d101      	bne.n	8009314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009310:	f000 f920 	bl	8009554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009314:	4b5b      	ldr	r3, [pc, #364]	@ (8009484 <pvPortMalloc+0x18c>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4013      	ands	r3, r2
 800931c:	2b00      	cmp	r3, #0
 800931e:	f040 8094 	bne.w	800944a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d020      	beq.n	800936a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009328:	2208      	movs	r2, #8
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4413      	add	r3, r2
 800932e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f003 0307 	and.w	r3, r3, #7
 8009336:	2b00      	cmp	r3, #0
 8009338:	d017      	beq.n	800936a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f023 0307 	bic.w	r3, r3, #7
 8009340:	3308      	adds	r3, #8
 8009342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f003 0307 	and.w	r3, r3, #7
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00d      	beq.n	800936a <pvPortMalloc+0x72>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	b672      	cpsid	i
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	b662      	cpsie	i
 8009362:	617b      	str	r3, [r7, #20]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d06c      	beq.n	800944a <pvPortMalloc+0x152>
 8009370:	4b45      	ldr	r3, [pc, #276]	@ (8009488 <pvPortMalloc+0x190>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	429a      	cmp	r2, r3
 8009378:	d867      	bhi.n	800944a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800937a:	4b44      	ldr	r3, [pc, #272]	@ (800948c <pvPortMalloc+0x194>)
 800937c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800937e:	4b43      	ldr	r3, [pc, #268]	@ (800948c <pvPortMalloc+0x194>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009384:	e004      	b.n	8009390 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d903      	bls.n	80093a2 <pvPortMalloc+0xaa>
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1f1      	bne.n	8009386 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093a2:	4b37      	ldr	r3, [pc, #220]	@ (8009480 <pvPortMalloc+0x188>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d04e      	beq.n	800944a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2208      	movs	r2, #8
 80093b2:	4413      	add	r3, r2
 80093b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	1ad2      	subs	r2, r2, r3
 80093c6:	2308      	movs	r3, #8
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d922      	bls.n	8009414 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4413      	add	r3, r2
 80093d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00d      	beq.n	80093fc <pvPortMalloc+0x104>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	613b      	str	r3, [r7, #16]
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	e7fd      	b.n	80093f8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	1ad2      	subs	r2, r2, r3
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800940e:	69b8      	ldr	r0, [r7, #24]
 8009410:	f000 f902 	bl	8009618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009414:	4b1c      	ldr	r3, [pc, #112]	@ (8009488 <pvPortMalloc+0x190>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	4a1a      	ldr	r2, [pc, #104]	@ (8009488 <pvPortMalloc+0x190>)
 8009420:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009422:	4b19      	ldr	r3, [pc, #100]	@ (8009488 <pvPortMalloc+0x190>)
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	4b1a      	ldr	r3, [pc, #104]	@ (8009490 <pvPortMalloc+0x198>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d203      	bcs.n	8009436 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800942e:	4b16      	ldr	r3, [pc, #88]	@ (8009488 <pvPortMalloc+0x190>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a17      	ldr	r2, [pc, #92]	@ (8009490 <pvPortMalloc+0x198>)
 8009434:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	4b12      	ldr	r3, [pc, #72]	@ (8009484 <pvPortMalloc+0x18c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	431a      	orrs	r2, r3
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009446:	2200      	movs	r2, #0
 8009448:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800944a:	f7fe ff2b 	bl	80082a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	f003 0307 	and.w	r3, r3, #7
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00d      	beq.n	8009474 <pvPortMalloc+0x17c>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	60fb      	str	r3, [r7, #12]
}
 800946e:	bf00      	nop
 8009470:	bf00      	nop
 8009472:	e7fd      	b.n	8009470 <pvPortMalloc+0x178>
	return pvReturn;
 8009474:	69fb      	ldr	r3, [r7, #28]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3728      	adds	r7, #40	@ 0x28
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20005b60 	.word	0x20005b60
 8009484:	20005b6c 	.word	0x20005b6c
 8009488:	20005b64 	.word	0x20005b64
 800948c:	20005b58 	.word	0x20005b58
 8009490:	20005b68 	.word	0x20005b68

08009494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d04e      	beq.n	8009544 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094a6:	2308      	movs	r3, #8
 80094a8:	425b      	negs	r3, r3
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4413      	add	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	685a      	ldr	r2, [r3, #4]
 80094b8:	4b24      	ldr	r3, [pc, #144]	@ (800954c <vPortFree+0xb8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4013      	ands	r3, r2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <vPortFree+0x4a>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	b672      	cpsid	i
 80094c8:	f383 8811 	msr	BASEPRI, r3
 80094cc:	f3bf 8f6f 	isb	sy
 80094d0:	f3bf 8f4f 	dsb	sy
 80094d4:	b662      	cpsie	i
 80094d6:	60fb      	str	r3, [r7, #12]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00d      	beq.n	8009502 <vPortFree+0x6e>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	b672      	cpsid	i
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	b662      	cpsie	i
 80094fa:	60bb      	str	r3, [r7, #8]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	4b11      	ldr	r3, [pc, #68]	@ (800954c <vPortFree+0xb8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4013      	ands	r3, r2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d019      	beq.n	8009544 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d115      	bne.n	8009544 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	4b0b      	ldr	r3, [pc, #44]	@ (800954c <vPortFree+0xb8>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009528:	f7fe feae 	bl	8008288 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	4b07      	ldr	r3, [pc, #28]	@ (8009550 <vPortFree+0xbc>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4413      	add	r3, r2
 8009536:	4a06      	ldr	r2, [pc, #24]	@ (8009550 <vPortFree+0xbc>)
 8009538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800953a:	6938      	ldr	r0, [r7, #16]
 800953c:	f000 f86c 	bl	8009618 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009540:	f7fe feb0 	bl	80082a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20005b6c 	.word	0x20005b6c
 8009550:	20005b64 	.word	0x20005b64

08009554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800955a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800955e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009560:	4b27      	ldr	r3, [pc, #156]	@ (8009600 <prvHeapInit+0xac>)
 8009562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00c      	beq.n	8009588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3307      	adds	r3, #7
 8009572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f023 0307 	bic.w	r3, r3, #7
 800957a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	4a1f      	ldr	r2, [pc, #124]	@ (8009600 <prvHeapInit+0xac>)
 8009584:	4413      	add	r3, r2
 8009586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800958c:	4a1d      	ldr	r2, [pc, #116]	@ (8009604 <prvHeapInit+0xb0>)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009592:	4b1c      	ldr	r3, [pc, #112]	@ (8009604 <prvHeapInit+0xb0>)
 8009594:	2200      	movs	r2, #0
 8009596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4413      	add	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095a0:	2208      	movs	r2, #8
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1a9b      	subs	r3, r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0307 	bic.w	r3, r3, #7
 80095ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4a15      	ldr	r2, [pc, #84]	@ (8009608 <prvHeapInit+0xb4>)
 80095b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095b6:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <prvHeapInit+0xb4>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2200      	movs	r2, #0
 80095bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095be:	4b12      	ldr	r3, [pc, #72]	@ (8009608 <prvHeapInit+0xb4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	1ad2      	subs	r2, r2, r3
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009608 <prvHeapInit+0xb4>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	4a0a      	ldr	r2, [pc, #40]	@ (800960c <prvHeapInit+0xb8>)
 80095e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	4a09      	ldr	r2, [pc, #36]	@ (8009610 <prvHeapInit+0xbc>)
 80095ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095ec:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <prvHeapInit+0xc0>)
 80095ee:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80095f2:	601a      	str	r2, [r3, #0]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	20001f58 	.word	0x20001f58
 8009604:	20005b58 	.word	0x20005b58
 8009608:	20005b60 	.word	0x20005b60
 800960c:	20005b68 	.word	0x20005b68
 8009610:	20005b64 	.word	0x20005b64
 8009614:	20005b6c 	.word	0x20005b6c

08009618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009620:	4b28      	ldr	r3, [pc, #160]	@ (80096c4 <prvInsertBlockIntoFreeList+0xac>)
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	e002      	b.n	800962c <prvInsertBlockIntoFreeList+0x14>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d8f7      	bhi.n	8009626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	4413      	add	r3, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d108      	bne.n	800965a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	441a      	add	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	441a      	add	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d118      	bne.n	80096a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	4b15      	ldr	r3, [pc, #84]	@ (80096c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d00d      	beq.n	8009696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685a      	ldr	r2, [r3, #4]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	441a      	add	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	601a      	str	r2, [r3, #0]
 8009694:	e008      	b.n	80096a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009696:	4b0c      	ldr	r3, [pc, #48]	@ (80096c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	e003      	b.n	80096a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d002      	beq.n	80096b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096b6:	bf00      	nop
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	20005b58 	.word	0x20005b58
 80096c8:	20005b60 	.word	0x20005b60

080096cc <siprintf>:
 80096cc:	b40e      	push	{r1, r2, r3}
 80096ce:	b510      	push	{r4, lr}
 80096d0:	b09d      	sub	sp, #116	@ 0x74
 80096d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80096d4:	9002      	str	r0, [sp, #8]
 80096d6:	9006      	str	r0, [sp, #24]
 80096d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096dc:	480a      	ldr	r0, [pc, #40]	@ (8009708 <siprintf+0x3c>)
 80096de:	9107      	str	r1, [sp, #28]
 80096e0:	9104      	str	r1, [sp, #16]
 80096e2:	490a      	ldr	r1, [pc, #40]	@ (800970c <siprintf+0x40>)
 80096e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	2400      	movs	r4, #0
 80096ec:	a902      	add	r1, sp, #8
 80096ee:	6800      	ldr	r0, [r0, #0]
 80096f0:	9301      	str	r3, [sp, #4]
 80096f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80096f4:	f000 f9a2 	bl	8009a3c <_svfiprintf_r>
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	701c      	strb	r4, [r3, #0]
 80096fc:	b01d      	add	sp, #116	@ 0x74
 80096fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009702:	b003      	add	sp, #12
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	2000005c 	.word	0x2000005c
 800970c:	ffff0208 	.word	0xffff0208

08009710 <memset>:
 8009710:	4402      	add	r2, r0
 8009712:	4603      	mov	r3, r0
 8009714:	4293      	cmp	r3, r2
 8009716:	d100      	bne.n	800971a <memset+0xa>
 8009718:	4770      	bx	lr
 800971a:	f803 1b01 	strb.w	r1, [r3], #1
 800971e:	e7f9      	b.n	8009714 <memset+0x4>

08009720 <__errno>:
 8009720:	4b01      	ldr	r3, [pc, #4]	@ (8009728 <__errno+0x8>)
 8009722:	6818      	ldr	r0, [r3, #0]
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	2000005c 	.word	0x2000005c

0800972c <__libc_init_array>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4d0d      	ldr	r5, [pc, #52]	@ (8009764 <__libc_init_array+0x38>)
 8009730:	4c0d      	ldr	r4, [pc, #52]	@ (8009768 <__libc_init_array+0x3c>)
 8009732:	1b64      	subs	r4, r4, r5
 8009734:	10a4      	asrs	r4, r4, #2
 8009736:	2600      	movs	r6, #0
 8009738:	42a6      	cmp	r6, r4
 800973a:	d109      	bne.n	8009750 <__libc_init_array+0x24>
 800973c:	4d0b      	ldr	r5, [pc, #44]	@ (800976c <__libc_init_array+0x40>)
 800973e:	4c0c      	ldr	r4, [pc, #48]	@ (8009770 <__libc_init_array+0x44>)
 8009740:	f000 fc64 	bl	800a00c <_init>
 8009744:	1b64      	subs	r4, r4, r5
 8009746:	10a4      	asrs	r4, r4, #2
 8009748:	2600      	movs	r6, #0
 800974a:	42a6      	cmp	r6, r4
 800974c:	d105      	bne.n	800975a <__libc_init_array+0x2e>
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	f855 3b04 	ldr.w	r3, [r5], #4
 8009754:	4798      	blx	r3
 8009756:	3601      	adds	r6, #1
 8009758:	e7ee      	b.n	8009738 <__libc_init_array+0xc>
 800975a:	f855 3b04 	ldr.w	r3, [r5], #4
 800975e:	4798      	blx	r3
 8009760:	3601      	adds	r6, #1
 8009762:	e7f2      	b.n	800974a <__libc_init_array+0x1e>
 8009764:	0800a1b8 	.word	0x0800a1b8
 8009768:	0800a1b8 	.word	0x0800a1b8
 800976c:	0800a1b8 	.word	0x0800a1b8
 8009770:	0800a1bc 	.word	0x0800a1bc

08009774 <__retarget_lock_acquire_recursive>:
 8009774:	4770      	bx	lr

08009776 <__retarget_lock_release_recursive>:
 8009776:	4770      	bx	lr

08009778 <memcpy>:
 8009778:	440a      	add	r2, r1
 800977a:	4291      	cmp	r1, r2
 800977c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009780:	d100      	bne.n	8009784 <memcpy+0xc>
 8009782:	4770      	bx	lr
 8009784:	b510      	push	{r4, lr}
 8009786:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800978e:	4291      	cmp	r1, r2
 8009790:	d1f9      	bne.n	8009786 <memcpy+0xe>
 8009792:	bd10      	pop	{r4, pc}

08009794 <_free_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4605      	mov	r5, r0
 8009798:	2900      	cmp	r1, #0
 800979a:	d041      	beq.n	8009820 <_free_r+0x8c>
 800979c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097a0:	1f0c      	subs	r4, r1, #4
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bfb8      	it	lt
 80097a6:	18e4      	addlt	r4, r4, r3
 80097a8:	f000 f8e0 	bl	800996c <__malloc_lock>
 80097ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009824 <_free_r+0x90>)
 80097ae:	6813      	ldr	r3, [r2, #0]
 80097b0:	b933      	cbnz	r3, 80097c0 <_free_r+0x2c>
 80097b2:	6063      	str	r3, [r4, #4]
 80097b4:	6014      	str	r4, [r2, #0]
 80097b6:	4628      	mov	r0, r5
 80097b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097bc:	f000 b8dc 	b.w	8009978 <__malloc_unlock>
 80097c0:	42a3      	cmp	r3, r4
 80097c2:	d908      	bls.n	80097d6 <_free_r+0x42>
 80097c4:	6820      	ldr	r0, [r4, #0]
 80097c6:	1821      	adds	r1, r4, r0
 80097c8:	428b      	cmp	r3, r1
 80097ca:	bf01      	itttt	eq
 80097cc:	6819      	ldreq	r1, [r3, #0]
 80097ce:	685b      	ldreq	r3, [r3, #4]
 80097d0:	1809      	addeq	r1, r1, r0
 80097d2:	6021      	streq	r1, [r4, #0]
 80097d4:	e7ed      	b.n	80097b2 <_free_r+0x1e>
 80097d6:	461a      	mov	r2, r3
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	b10b      	cbz	r3, 80097e0 <_free_r+0x4c>
 80097dc:	42a3      	cmp	r3, r4
 80097de:	d9fa      	bls.n	80097d6 <_free_r+0x42>
 80097e0:	6811      	ldr	r1, [r2, #0]
 80097e2:	1850      	adds	r0, r2, r1
 80097e4:	42a0      	cmp	r0, r4
 80097e6:	d10b      	bne.n	8009800 <_free_r+0x6c>
 80097e8:	6820      	ldr	r0, [r4, #0]
 80097ea:	4401      	add	r1, r0
 80097ec:	1850      	adds	r0, r2, r1
 80097ee:	4283      	cmp	r3, r0
 80097f0:	6011      	str	r1, [r2, #0]
 80097f2:	d1e0      	bne.n	80097b6 <_free_r+0x22>
 80097f4:	6818      	ldr	r0, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	6053      	str	r3, [r2, #4]
 80097fa:	4408      	add	r0, r1
 80097fc:	6010      	str	r0, [r2, #0]
 80097fe:	e7da      	b.n	80097b6 <_free_r+0x22>
 8009800:	d902      	bls.n	8009808 <_free_r+0x74>
 8009802:	230c      	movs	r3, #12
 8009804:	602b      	str	r3, [r5, #0]
 8009806:	e7d6      	b.n	80097b6 <_free_r+0x22>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	1821      	adds	r1, r4, r0
 800980c:	428b      	cmp	r3, r1
 800980e:	bf04      	itt	eq
 8009810:	6819      	ldreq	r1, [r3, #0]
 8009812:	685b      	ldreq	r3, [r3, #4]
 8009814:	6063      	str	r3, [r4, #4]
 8009816:	bf04      	itt	eq
 8009818:	1809      	addeq	r1, r1, r0
 800981a:	6021      	streq	r1, [r4, #0]
 800981c:	6054      	str	r4, [r2, #4]
 800981e:	e7ca      	b.n	80097b6 <_free_r+0x22>
 8009820:	bd38      	pop	{r3, r4, r5, pc}
 8009822:	bf00      	nop
 8009824:	20005cb4 	.word	0x20005cb4

08009828 <sbrk_aligned>:
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	4e0f      	ldr	r6, [pc, #60]	@ (8009868 <sbrk_aligned+0x40>)
 800982c:	460c      	mov	r4, r1
 800982e:	6831      	ldr	r1, [r6, #0]
 8009830:	4605      	mov	r5, r0
 8009832:	b911      	cbnz	r1, 800983a <sbrk_aligned+0x12>
 8009834:	f000 fba4 	bl	8009f80 <_sbrk_r>
 8009838:	6030      	str	r0, [r6, #0]
 800983a:	4621      	mov	r1, r4
 800983c:	4628      	mov	r0, r5
 800983e:	f000 fb9f 	bl	8009f80 <_sbrk_r>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d103      	bne.n	800984e <sbrk_aligned+0x26>
 8009846:	f04f 34ff 	mov.w	r4, #4294967295
 800984a:	4620      	mov	r0, r4
 800984c:	bd70      	pop	{r4, r5, r6, pc}
 800984e:	1cc4      	adds	r4, r0, #3
 8009850:	f024 0403 	bic.w	r4, r4, #3
 8009854:	42a0      	cmp	r0, r4
 8009856:	d0f8      	beq.n	800984a <sbrk_aligned+0x22>
 8009858:	1a21      	subs	r1, r4, r0
 800985a:	4628      	mov	r0, r5
 800985c:	f000 fb90 	bl	8009f80 <_sbrk_r>
 8009860:	3001      	adds	r0, #1
 8009862:	d1f2      	bne.n	800984a <sbrk_aligned+0x22>
 8009864:	e7ef      	b.n	8009846 <sbrk_aligned+0x1e>
 8009866:	bf00      	nop
 8009868:	20005cb0 	.word	0x20005cb0

0800986c <_malloc_r>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	1ccd      	adds	r5, r1, #3
 8009872:	f025 0503 	bic.w	r5, r5, #3
 8009876:	3508      	adds	r5, #8
 8009878:	2d0c      	cmp	r5, #12
 800987a:	bf38      	it	cc
 800987c:	250c      	movcc	r5, #12
 800987e:	2d00      	cmp	r5, #0
 8009880:	4606      	mov	r6, r0
 8009882:	db01      	blt.n	8009888 <_malloc_r+0x1c>
 8009884:	42a9      	cmp	r1, r5
 8009886:	d904      	bls.n	8009892 <_malloc_r+0x26>
 8009888:	230c      	movs	r3, #12
 800988a:	6033      	str	r3, [r6, #0]
 800988c:	2000      	movs	r0, #0
 800988e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009892:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009968 <_malloc_r+0xfc>
 8009896:	f000 f869 	bl	800996c <__malloc_lock>
 800989a:	f8d8 3000 	ldr.w	r3, [r8]
 800989e:	461c      	mov	r4, r3
 80098a0:	bb44      	cbnz	r4, 80098f4 <_malloc_r+0x88>
 80098a2:	4629      	mov	r1, r5
 80098a4:	4630      	mov	r0, r6
 80098a6:	f7ff ffbf 	bl	8009828 <sbrk_aligned>
 80098aa:	1c43      	adds	r3, r0, #1
 80098ac:	4604      	mov	r4, r0
 80098ae:	d158      	bne.n	8009962 <_malloc_r+0xf6>
 80098b0:	f8d8 4000 	ldr.w	r4, [r8]
 80098b4:	4627      	mov	r7, r4
 80098b6:	2f00      	cmp	r7, #0
 80098b8:	d143      	bne.n	8009942 <_malloc_r+0xd6>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	d04b      	beq.n	8009956 <_malloc_r+0xea>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	4639      	mov	r1, r7
 80098c2:	4630      	mov	r0, r6
 80098c4:	eb04 0903 	add.w	r9, r4, r3
 80098c8:	f000 fb5a 	bl	8009f80 <_sbrk_r>
 80098cc:	4581      	cmp	r9, r0
 80098ce:	d142      	bne.n	8009956 <_malloc_r+0xea>
 80098d0:	6821      	ldr	r1, [r4, #0]
 80098d2:	1a6d      	subs	r5, r5, r1
 80098d4:	4629      	mov	r1, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7ff ffa6 	bl	8009828 <sbrk_aligned>
 80098dc:	3001      	adds	r0, #1
 80098de:	d03a      	beq.n	8009956 <_malloc_r+0xea>
 80098e0:	6823      	ldr	r3, [r4, #0]
 80098e2:	442b      	add	r3, r5
 80098e4:	6023      	str	r3, [r4, #0]
 80098e6:	f8d8 3000 	ldr.w	r3, [r8]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	bb62      	cbnz	r2, 8009948 <_malloc_r+0xdc>
 80098ee:	f8c8 7000 	str.w	r7, [r8]
 80098f2:	e00f      	b.n	8009914 <_malloc_r+0xa8>
 80098f4:	6822      	ldr	r2, [r4, #0]
 80098f6:	1b52      	subs	r2, r2, r5
 80098f8:	d420      	bmi.n	800993c <_malloc_r+0xd0>
 80098fa:	2a0b      	cmp	r2, #11
 80098fc:	d917      	bls.n	800992e <_malloc_r+0xc2>
 80098fe:	1961      	adds	r1, r4, r5
 8009900:	42a3      	cmp	r3, r4
 8009902:	6025      	str	r5, [r4, #0]
 8009904:	bf18      	it	ne
 8009906:	6059      	strne	r1, [r3, #4]
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	bf08      	it	eq
 800990c:	f8c8 1000 	streq.w	r1, [r8]
 8009910:	5162      	str	r2, [r4, r5]
 8009912:	604b      	str	r3, [r1, #4]
 8009914:	4630      	mov	r0, r6
 8009916:	f000 f82f 	bl	8009978 <__malloc_unlock>
 800991a:	f104 000b 	add.w	r0, r4, #11
 800991e:	1d23      	adds	r3, r4, #4
 8009920:	f020 0007 	bic.w	r0, r0, #7
 8009924:	1ac2      	subs	r2, r0, r3
 8009926:	bf1c      	itt	ne
 8009928:	1a1b      	subne	r3, r3, r0
 800992a:	50a3      	strne	r3, [r4, r2]
 800992c:	e7af      	b.n	800988e <_malloc_r+0x22>
 800992e:	6862      	ldr	r2, [r4, #4]
 8009930:	42a3      	cmp	r3, r4
 8009932:	bf0c      	ite	eq
 8009934:	f8c8 2000 	streq.w	r2, [r8]
 8009938:	605a      	strne	r2, [r3, #4]
 800993a:	e7eb      	b.n	8009914 <_malloc_r+0xa8>
 800993c:	4623      	mov	r3, r4
 800993e:	6864      	ldr	r4, [r4, #4]
 8009940:	e7ae      	b.n	80098a0 <_malloc_r+0x34>
 8009942:	463c      	mov	r4, r7
 8009944:	687f      	ldr	r7, [r7, #4]
 8009946:	e7b6      	b.n	80098b6 <_malloc_r+0x4a>
 8009948:	461a      	mov	r2, r3
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	42a3      	cmp	r3, r4
 800994e:	d1fb      	bne.n	8009948 <_malloc_r+0xdc>
 8009950:	2300      	movs	r3, #0
 8009952:	6053      	str	r3, [r2, #4]
 8009954:	e7de      	b.n	8009914 <_malloc_r+0xa8>
 8009956:	230c      	movs	r3, #12
 8009958:	6033      	str	r3, [r6, #0]
 800995a:	4630      	mov	r0, r6
 800995c:	f000 f80c 	bl	8009978 <__malloc_unlock>
 8009960:	e794      	b.n	800988c <_malloc_r+0x20>
 8009962:	6005      	str	r5, [r0, #0]
 8009964:	e7d6      	b.n	8009914 <_malloc_r+0xa8>
 8009966:	bf00      	nop
 8009968:	20005cb4 	.word	0x20005cb4

0800996c <__malloc_lock>:
 800996c:	4801      	ldr	r0, [pc, #4]	@ (8009974 <__malloc_lock+0x8>)
 800996e:	f7ff bf01 	b.w	8009774 <__retarget_lock_acquire_recursive>
 8009972:	bf00      	nop
 8009974:	20005cac 	.word	0x20005cac

08009978 <__malloc_unlock>:
 8009978:	4801      	ldr	r0, [pc, #4]	@ (8009980 <__malloc_unlock+0x8>)
 800997a:	f7ff befc 	b.w	8009776 <__retarget_lock_release_recursive>
 800997e:	bf00      	nop
 8009980:	20005cac 	.word	0x20005cac

08009984 <__ssputs_r>:
 8009984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009988:	688e      	ldr	r6, [r1, #8]
 800998a:	461f      	mov	r7, r3
 800998c:	42be      	cmp	r6, r7
 800998e:	680b      	ldr	r3, [r1, #0]
 8009990:	4682      	mov	sl, r0
 8009992:	460c      	mov	r4, r1
 8009994:	4690      	mov	r8, r2
 8009996:	d82d      	bhi.n	80099f4 <__ssputs_r+0x70>
 8009998:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800999c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099a0:	d026      	beq.n	80099f0 <__ssputs_r+0x6c>
 80099a2:	6965      	ldr	r5, [r4, #20]
 80099a4:	6909      	ldr	r1, [r1, #16]
 80099a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099aa:	eba3 0901 	sub.w	r9, r3, r1
 80099ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099b2:	1c7b      	adds	r3, r7, #1
 80099b4:	444b      	add	r3, r9
 80099b6:	106d      	asrs	r5, r5, #1
 80099b8:	429d      	cmp	r5, r3
 80099ba:	bf38      	it	cc
 80099bc:	461d      	movcc	r5, r3
 80099be:	0553      	lsls	r3, r2, #21
 80099c0:	d527      	bpl.n	8009a12 <__ssputs_r+0x8e>
 80099c2:	4629      	mov	r1, r5
 80099c4:	f7ff ff52 	bl	800986c <_malloc_r>
 80099c8:	4606      	mov	r6, r0
 80099ca:	b360      	cbz	r0, 8009a26 <__ssputs_r+0xa2>
 80099cc:	6921      	ldr	r1, [r4, #16]
 80099ce:	464a      	mov	r2, r9
 80099d0:	f7ff fed2 	bl	8009778 <memcpy>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	6126      	str	r6, [r4, #16]
 80099e2:	6165      	str	r5, [r4, #20]
 80099e4:	444e      	add	r6, r9
 80099e6:	eba5 0509 	sub.w	r5, r5, r9
 80099ea:	6026      	str	r6, [r4, #0]
 80099ec:	60a5      	str	r5, [r4, #8]
 80099ee:	463e      	mov	r6, r7
 80099f0:	42be      	cmp	r6, r7
 80099f2:	d900      	bls.n	80099f6 <__ssputs_r+0x72>
 80099f4:	463e      	mov	r6, r7
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	4632      	mov	r2, r6
 80099fa:	4641      	mov	r1, r8
 80099fc:	f000 faa6 	bl	8009f4c <memmove>
 8009a00:	68a3      	ldr	r3, [r4, #8]
 8009a02:	1b9b      	subs	r3, r3, r6
 8009a04:	60a3      	str	r3, [r4, #8]
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	4433      	add	r3, r6
 8009a0a:	6023      	str	r3, [r4, #0]
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a12:	462a      	mov	r2, r5
 8009a14:	f000 fac4 	bl	8009fa0 <_realloc_r>
 8009a18:	4606      	mov	r6, r0
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d1e0      	bne.n	80099e0 <__ssputs_r+0x5c>
 8009a1e:	6921      	ldr	r1, [r4, #16]
 8009a20:	4650      	mov	r0, sl
 8009a22:	f7ff feb7 	bl	8009794 <_free_r>
 8009a26:	230c      	movs	r3, #12
 8009a28:	f8ca 3000 	str.w	r3, [sl]
 8009a2c:	89a3      	ldrh	r3, [r4, #12]
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a32:	81a3      	strh	r3, [r4, #12]
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295
 8009a38:	e7e9      	b.n	8009a0e <__ssputs_r+0x8a>
	...

08009a3c <_svfiprintf_r>:
 8009a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a40:	4698      	mov	r8, r3
 8009a42:	898b      	ldrh	r3, [r1, #12]
 8009a44:	061b      	lsls	r3, r3, #24
 8009a46:	b09d      	sub	sp, #116	@ 0x74
 8009a48:	4607      	mov	r7, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	4614      	mov	r4, r2
 8009a4e:	d510      	bpl.n	8009a72 <_svfiprintf_r+0x36>
 8009a50:	690b      	ldr	r3, [r1, #16]
 8009a52:	b973      	cbnz	r3, 8009a72 <_svfiprintf_r+0x36>
 8009a54:	2140      	movs	r1, #64	@ 0x40
 8009a56:	f7ff ff09 	bl	800986c <_malloc_r>
 8009a5a:	6028      	str	r0, [r5, #0]
 8009a5c:	6128      	str	r0, [r5, #16]
 8009a5e:	b930      	cbnz	r0, 8009a6e <_svfiprintf_r+0x32>
 8009a60:	230c      	movs	r3, #12
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b01d      	add	sp, #116	@ 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	2340      	movs	r3, #64	@ 0x40
 8009a70:	616b      	str	r3, [r5, #20]
 8009a72:	2300      	movs	r3, #0
 8009a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a76:	2320      	movs	r3, #32
 8009a78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a80:	2330      	movs	r3, #48	@ 0x30
 8009a82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c20 <_svfiprintf_r+0x1e4>
 8009a86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a8a:	f04f 0901 	mov.w	r9, #1
 8009a8e:	4623      	mov	r3, r4
 8009a90:	469a      	mov	sl, r3
 8009a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a96:	b10a      	cbz	r2, 8009a9c <_svfiprintf_r+0x60>
 8009a98:	2a25      	cmp	r2, #37	@ 0x25
 8009a9a:	d1f9      	bne.n	8009a90 <_svfiprintf_r+0x54>
 8009a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8009aa0:	d00b      	beq.n	8009aba <_svfiprintf_r+0x7e>
 8009aa2:	465b      	mov	r3, fp
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4638      	mov	r0, r7
 8009aaa:	f7ff ff6b 	bl	8009984 <__ssputs_r>
 8009aae:	3001      	adds	r0, #1
 8009ab0:	f000 80a7 	beq.w	8009c02 <_svfiprintf_r+0x1c6>
 8009ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ab6:	445a      	add	r2, fp
 8009ab8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 809f 	beq.w	8009c02 <_svfiprintf_r+0x1c6>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ace:	f10a 0a01 	add.w	sl, sl, #1
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	9307      	str	r3, [sp, #28]
 8009ad6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ada:	931a      	str	r3, [sp, #104]	@ 0x68
 8009adc:	4654      	mov	r4, sl
 8009ade:	2205      	movs	r2, #5
 8009ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae4:	484e      	ldr	r0, [pc, #312]	@ (8009c20 <_svfiprintf_r+0x1e4>)
 8009ae6:	f7f6 fb9b 	bl	8000220 <memchr>
 8009aea:	9a04      	ldr	r2, [sp, #16]
 8009aec:	b9d8      	cbnz	r0, 8009b26 <_svfiprintf_r+0xea>
 8009aee:	06d0      	lsls	r0, r2, #27
 8009af0:	bf44      	itt	mi
 8009af2:	2320      	movmi	r3, #32
 8009af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009af8:	0711      	lsls	r1, r2, #28
 8009afa:	bf44      	itt	mi
 8009afc:	232b      	movmi	r3, #43	@ 0x2b
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b08:	d015      	beq.n	8009b36 <_svfiprintf_r+0xfa>
 8009b0a:	9a07      	ldr	r2, [sp, #28]
 8009b0c:	4654      	mov	r4, sl
 8009b0e:	2000      	movs	r0, #0
 8009b10:	f04f 0c0a 	mov.w	ip, #10
 8009b14:	4621      	mov	r1, r4
 8009b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b1a:	3b30      	subs	r3, #48	@ 0x30
 8009b1c:	2b09      	cmp	r3, #9
 8009b1e:	d94b      	bls.n	8009bb8 <_svfiprintf_r+0x17c>
 8009b20:	b1b0      	cbz	r0, 8009b50 <_svfiprintf_r+0x114>
 8009b22:	9207      	str	r2, [sp, #28]
 8009b24:	e014      	b.n	8009b50 <_svfiprintf_r+0x114>
 8009b26:	eba0 0308 	sub.w	r3, r0, r8
 8009b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	46a2      	mov	sl, r4
 8009b34:	e7d2      	b.n	8009adc <_svfiprintf_r+0xa0>
 8009b36:	9b03      	ldr	r3, [sp, #12]
 8009b38:	1d19      	adds	r1, r3, #4
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	9103      	str	r1, [sp, #12]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfbb      	ittet	lt
 8009b42:	425b      	neglt	r3, r3
 8009b44:	f042 0202 	orrlt.w	r2, r2, #2
 8009b48:	9307      	strge	r3, [sp, #28]
 8009b4a:	9307      	strlt	r3, [sp, #28]
 8009b4c:	bfb8      	it	lt
 8009b4e:	9204      	strlt	r2, [sp, #16]
 8009b50:	7823      	ldrb	r3, [r4, #0]
 8009b52:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b54:	d10a      	bne.n	8009b6c <_svfiprintf_r+0x130>
 8009b56:	7863      	ldrb	r3, [r4, #1]
 8009b58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b5a:	d132      	bne.n	8009bc2 <_svfiprintf_r+0x186>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	1d1a      	adds	r2, r3, #4
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	9203      	str	r2, [sp, #12]
 8009b64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b68:	3402      	adds	r4, #2
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c30 <_svfiprintf_r+0x1f4>
 8009b70:	7821      	ldrb	r1, [r4, #0]
 8009b72:	2203      	movs	r2, #3
 8009b74:	4650      	mov	r0, sl
 8009b76:	f7f6 fb53 	bl	8000220 <memchr>
 8009b7a:	b138      	cbz	r0, 8009b8c <_svfiprintf_r+0x150>
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	eba0 000a 	sub.w	r0, r0, sl
 8009b82:	2240      	movs	r2, #64	@ 0x40
 8009b84:	4082      	lsls	r2, r0
 8009b86:	4313      	orrs	r3, r2
 8009b88:	3401      	adds	r4, #1
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b90:	4824      	ldr	r0, [pc, #144]	@ (8009c24 <_svfiprintf_r+0x1e8>)
 8009b92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b96:	2206      	movs	r2, #6
 8009b98:	f7f6 fb42 	bl	8000220 <memchr>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d036      	beq.n	8009c0e <_svfiprintf_r+0x1d2>
 8009ba0:	4b21      	ldr	r3, [pc, #132]	@ (8009c28 <_svfiprintf_r+0x1ec>)
 8009ba2:	bb1b      	cbnz	r3, 8009bec <_svfiprintf_r+0x1b0>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	3307      	adds	r3, #7
 8009ba8:	f023 0307 	bic.w	r3, r3, #7
 8009bac:	3308      	adds	r3, #8
 8009bae:	9303      	str	r3, [sp, #12]
 8009bb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb2:	4433      	add	r3, r6
 8009bb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb6:	e76a      	b.n	8009a8e <_svfiprintf_r+0x52>
 8009bb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	2001      	movs	r0, #1
 8009bc0:	e7a8      	b.n	8009b14 <_svfiprintf_r+0xd8>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	3401      	adds	r4, #1
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	f04f 0c0a 	mov.w	ip, #10
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd4:	3a30      	subs	r2, #48	@ 0x30
 8009bd6:	2a09      	cmp	r2, #9
 8009bd8:	d903      	bls.n	8009be2 <_svfiprintf_r+0x1a6>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0c6      	beq.n	8009b6c <_svfiprintf_r+0x130>
 8009bde:	9105      	str	r1, [sp, #20]
 8009be0:	e7c4      	b.n	8009b6c <_svfiprintf_r+0x130>
 8009be2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009be6:	4604      	mov	r4, r0
 8009be8:	2301      	movs	r3, #1
 8009bea:	e7f0      	b.n	8009bce <_svfiprintf_r+0x192>
 8009bec:	ab03      	add	r3, sp, #12
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <_svfiprintf_r+0x1f0>)
 8009bf4:	a904      	add	r1, sp, #16
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	f3af 8000 	nop.w
 8009bfc:	1c42      	adds	r2, r0, #1
 8009bfe:	4606      	mov	r6, r0
 8009c00:	d1d6      	bne.n	8009bb0 <_svfiprintf_r+0x174>
 8009c02:	89ab      	ldrh	r3, [r5, #12]
 8009c04:	065b      	lsls	r3, r3, #25
 8009c06:	f53f af2d 	bmi.w	8009a64 <_svfiprintf_r+0x28>
 8009c0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c0c:	e72c      	b.n	8009a68 <_svfiprintf_r+0x2c>
 8009c0e:	ab03      	add	r3, sp, #12
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	462a      	mov	r2, r5
 8009c14:	4b05      	ldr	r3, [pc, #20]	@ (8009c2c <_svfiprintf_r+0x1f0>)
 8009c16:	a904      	add	r1, sp, #16
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f000 f879 	bl	8009d10 <_printf_i>
 8009c1e:	e7ed      	b.n	8009bfc <_svfiprintf_r+0x1c0>
 8009c20:	0800a17c 	.word	0x0800a17c
 8009c24:	0800a186 	.word	0x0800a186
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	08009985 	.word	0x08009985
 8009c30:	0800a182 	.word	0x0800a182

08009c34 <_printf_common>:
 8009c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	4616      	mov	r6, r2
 8009c3a:	4698      	mov	r8, r3
 8009c3c:	688a      	ldr	r2, [r1, #8]
 8009c3e:	690b      	ldr	r3, [r1, #16]
 8009c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c44:	4293      	cmp	r3, r2
 8009c46:	bfb8      	it	lt
 8009c48:	4613      	movlt	r3, r2
 8009c4a:	6033      	str	r3, [r6, #0]
 8009c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c50:	4607      	mov	r7, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	b10a      	cbz	r2, 8009c5a <_printf_common+0x26>
 8009c56:	3301      	adds	r3, #1
 8009c58:	6033      	str	r3, [r6, #0]
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	0699      	lsls	r1, r3, #26
 8009c5e:	bf42      	ittt	mi
 8009c60:	6833      	ldrmi	r3, [r6, #0]
 8009c62:	3302      	addmi	r3, #2
 8009c64:	6033      	strmi	r3, [r6, #0]
 8009c66:	6825      	ldr	r5, [r4, #0]
 8009c68:	f015 0506 	ands.w	r5, r5, #6
 8009c6c:	d106      	bne.n	8009c7c <_printf_common+0x48>
 8009c6e:	f104 0a19 	add.w	sl, r4, #25
 8009c72:	68e3      	ldr	r3, [r4, #12]
 8009c74:	6832      	ldr	r2, [r6, #0]
 8009c76:	1a9b      	subs	r3, r3, r2
 8009c78:	42ab      	cmp	r3, r5
 8009c7a:	dc26      	bgt.n	8009cca <_printf_common+0x96>
 8009c7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c80:	6822      	ldr	r2, [r4, #0]
 8009c82:	3b00      	subs	r3, #0
 8009c84:	bf18      	it	ne
 8009c86:	2301      	movne	r3, #1
 8009c88:	0692      	lsls	r2, r2, #26
 8009c8a:	d42b      	bmi.n	8009ce4 <_printf_common+0xb0>
 8009c8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c90:	4641      	mov	r1, r8
 8009c92:	4638      	mov	r0, r7
 8009c94:	47c8      	blx	r9
 8009c96:	3001      	adds	r0, #1
 8009c98:	d01e      	beq.n	8009cd8 <_printf_common+0xa4>
 8009c9a:	6823      	ldr	r3, [r4, #0]
 8009c9c:	6922      	ldr	r2, [r4, #16]
 8009c9e:	f003 0306 	and.w	r3, r3, #6
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	bf02      	ittt	eq
 8009ca6:	68e5      	ldreq	r5, [r4, #12]
 8009ca8:	6833      	ldreq	r3, [r6, #0]
 8009caa:	1aed      	subeq	r5, r5, r3
 8009cac:	68a3      	ldr	r3, [r4, #8]
 8009cae:	bf0c      	ite	eq
 8009cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cb4:	2500      	movne	r5, #0
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	bfc4      	itt	gt
 8009cba:	1a9b      	subgt	r3, r3, r2
 8009cbc:	18ed      	addgt	r5, r5, r3
 8009cbe:	2600      	movs	r6, #0
 8009cc0:	341a      	adds	r4, #26
 8009cc2:	42b5      	cmp	r5, r6
 8009cc4:	d11a      	bne.n	8009cfc <_printf_common+0xc8>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e008      	b.n	8009cdc <_printf_common+0xa8>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4652      	mov	r2, sl
 8009cce:	4641      	mov	r1, r8
 8009cd0:	4638      	mov	r0, r7
 8009cd2:	47c8      	blx	r9
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d103      	bne.n	8009ce0 <_printf_common+0xac>
 8009cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ce0:	3501      	adds	r5, #1
 8009ce2:	e7c6      	b.n	8009c72 <_printf_common+0x3e>
 8009ce4:	18e1      	adds	r1, r4, r3
 8009ce6:	1c5a      	adds	r2, r3, #1
 8009ce8:	2030      	movs	r0, #48	@ 0x30
 8009cea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cee:	4422      	add	r2, r4
 8009cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cf8:	3302      	adds	r3, #2
 8009cfa:	e7c7      	b.n	8009c8c <_printf_common+0x58>
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	4622      	mov	r2, r4
 8009d00:	4641      	mov	r1, r8
 8009d02:	4638      	mov	r0, r7
 8009d04:	47c8      	blx	r9
 8009d06:	3001      	adds	r0, #1
 8009d08:	d0e6      	beq.n	8009cd8 <_printf_common+0xa4>
 8009d0a:	3601      	adds	r6, #1
 8009d0c:	e7d9      	b.n	8009cc2 <_printf_common+0x8e>
	...

08009d10 <_printf_i>:
 8009d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d14:	7e0f      	ldrb	r7, [r1, #24]
 8009d16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d18:	2f78      	cmp	r7, #120	@ 0x78
 8009d1a:	4691      	mov	r9, r2
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	460c      	mov	r4, r1
 8009d20:	469a      	mov	sl, r3
 8009d22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d26:	d807      	bhi.n	8009d38 <_printf_i+0x28>
 8009d28:	2f62      	cmp	r7, #98	@ 0x62
 8009d2a:	d80a      	bhi.n	8009d42 <_printf_i+0x32>
 8009d2c:	2f00      	cmp	r7, #0
 8009d2e:	f000 80d1 	beq.w	8009ed4 <_printf_i+0x1c4>
 8009d32:	2f58      	cmp	r7, #88	@ 0x58
 8009d34:	f000 80b8 	beq.w	8009ea8 <_printf_i+0x198>
 8009d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d40:	e03a      	b.n	8009db8 <_printf_i+0xa8>
 8009d42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d46:	2b15      	cmp	r3, #21
 8009d48:	d8f6      	bhi.n	8009d38 <_printf_i+0x28>
 8009d4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d50 <_printf_i+0x40>)
 8009d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d50:	08009da9 	.word	0x08009da9
 8009d54:	08009dbd 	.word	0x08009dbd
 8009d58:	08009d39 	.word	0x08009d39
 8009d5c:	08009d39 	.word	0x08009d39
 8009d60:	08009d39 	.word	0x08009d39
 8009d64:	08009d39 	.word	0x08009d39
 8009d68:	08009dbd 	.word	0x08009dbd
 8009d6c:	08009d39 	.word	0x08009d39
 8009d70:	08009d39 	.word	0x08009d39
 8009d74:	08009d39 	.word	0x08009d39
 8009d78:	08009d39 	.word	0x08009d39
 8009d7c:	08009ebb 	.word	0x08009ebb
 8009d80:	08009de7 	.word	0x08009de7
 8009d84:	08009e75 	.word	0x08009e75
 8009d88:	08009d39 	.word	0x08009d39
 8009d8c:	08009d39 	.word	0x08009d39
 8009d90:	08009edd 	.word	0x08009edd
 8009d94:	08009d39 	.word	0x08009d39
 8009d98:	08009de7 	.word	0x08009de7
 8009d9c:	08009d39 	.word	0x08009d39
 8009da0:	08009d39 	.word	0x08009d39
 8009da4:	08009e7d 	.word	0x08009e7d
 8009da8:	6833      	ldr	r3, [r6, #0]
 8009daa:	1d1a      	adds	r2, r3, #4
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6032      	str	r2, [r6, #0]
 8009db0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009db4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009db8:	2301      	movs	r3, #1
 8009dba:	e09c      	b.n	8009ef6 <_printf_i+0x1e6>
 8009dbc:	6833      	ldr	r3, [r6, #0]
 8009dbe:	6820      	ldr	r0, [r4, #0]
 8009dc0:	1d19      	adds	r1, r3, #4
 8009dc2:	6031      	str	r1, [r6, #0]
 8009dc4:	0606      	lsls	r6, r0, #24
 8009dc6:	d501      	bpl.n	8009dcc <_printf_i+0xbc>
 8009dc8:	681d      	ldr	r5, [r3, #0]
 8009dca:	e003      	b.n	8009dd4 <_printf_i+0xc4>
 8009dcc:	0645      	lsls	r5, r0, #25
 8009dce:	d5fb      	bpl.n	8009dc8 <_printf_i+0xb8>
 8009dd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dd4:	2d00      	cmp	r5, #0
 8009dd6:	da03      	bge.n	8009de0 <_printf_i+0xd0>
 8009dd8:	232d      	movs	r3, #45	@ 0x2d
 8009dda:	426d      	negs	r5, r5
 8009ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009de0:	4858      	ldr	r0, [pc, #352]	@ (8009f44 <_printf_i+0x234>)
 8009de2:	230a      	movs	r3, #10
 8009de4:	e011      	b.n	8009e0a <_printf_i+0xfa>
 8009de6:	6821      	ldr	r1, [r4, #0]
 8009de8:	6833      	ldr	r3, [r6, #0]
 8009dea:	0608      	lsls	r0, r1, #24
 8009dec:	f853 5b04 	ldr.w	r5, [r3], #4
 8009df0:	d402      	bmi.n	8009df8 <_printf_i+0xe8>
 8009df2:	0649      	lsls	r1, r1, #25
 8009df4:	bf48      	it	mi
 8009df6:	b2ad      	uxthmi	r5, r5
 8009df8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dfa:	4852      	ldr	r0, [pc, #328]	@ (8009f44 <_printf_i+0x234>)
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	bf14      	ite	ne
 8009e00:	230a      	movne	r3, #10
 8009e02:	2308      	moveq	r3, #8
 8009e04:	2100      	movs	r1, #0
 8009e06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e0a:	6866      	ldr	r6, [r4, #4]
 8009e0c:	60a6      	str	r6, [r4, #8]
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	db05      	blt.n	8009e1e <_printf_i+0x10e>
 8009e12:	6821      	ldr	r1, [r4, #0]
 8009e14:	432e      	orrs	r6, r5
 8009e16:	f021 0104 	bic.w	r1, r1, #4
 8009e1a:	6021      	str	r1, [r4, #0]
 8009e1c:	d04b      	beq.n	8009eb6 <_printf_i+0x1a6>
 8009e1e:	4616      	mov	r6, r2
 8009e20:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e24:	fb03 5711 	mls	r7, r3, r1, r5
 8009e28:	5dc7      	ldrb	r7, [r0, r7]
 8009e2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e2e:	462f      	mov	r7, r5
 8009e30:	42bb      	cmp	r3, r7
 8009e32:	460d      	mov	r5, r1
 8009e34:	d9f4      	bls.n	8009e20 <_printf_i+0x110>
 8009e36:	2b08      	cmp	r3, #8
 8009e38:	d10b      	bne.n	8009e52 <_printf_i+0x142>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	07df      	lsls	r7, r3, #31
 8009e3e:	d508      	bpl.n	8009e52 <_printf_i+0x142>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	6861      	ldr	r1, [r4, #4]
 8009e44:	4299      	cmp	r1, r3
 8009e46:	bfde      	ittt	le
 8009e48:	2330      	movle	r3, #48	@ 0x30
 8009e4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e52:	1b92      	subs	r2, r2, r6
 8009e54:	6122      	str	r2, [r4, #16]
 8009e56:	f8cd a000 	str.w	sl, [sp]
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	aa03      	add	r2, sp, #12
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4640      	mov	r0, r8
 8009e62:	f7ff fee7 	bl	8009c34 <_printf_common>
 8009e66:	3001      	adds	r0, #1
 8009e68:	d14a      	bne.n	8009f00 <_printf_i+0x1f0>
 8009e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6e:	b004      	add	sp, #16
 8009e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	f043 0320 	orr.w	r3, r3, #32
 8009e7a:	6023      	str	r3, [r4, #0]
 8009e7c:	4832      	ldr	r0, [pc, #200]	@ (8009f48 <_printf_i+0x238>)
 8009e7e:	2778      	movs	r7, #120	@ 0x78
 8009e80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	6831      	ldr	r1, [r6, #0]
 8009e88:	061f      	lsls	r7, r3, #24
 8009e8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e8e:	d402      	bmi.n	8009e96 <_printf_i+0x186>
 8009e90:	065f      	lsls	r7, r3, #25
 8009e92:	bf48      	it	mi
 8009e94:	b2ad      	uxthmi	r5, r5
 8009e96:	6031      	str	r1, [r6, #0]
 8009e98:	07d9      	lsls	r1, r3, #31
 8009e9a:	bf44      	itt	mi
 8009e9c:	f043 0320 	orrmi.w	r3, r3, #32
 8009ea0:	6023      	strmi	r3, [r4, #0]
 8009ea2:	b11d      	cbz	r5, 8009eac <_printf_i+0x19c>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	e7ad      	b.n	8009e04 <_printf_i+0xf4>
 8009ea8:	4826      	ldr	r0, [pc, #152]	@ (8009f44 <_printf_i+0x234>)
 8009eaa:	e7e9      	b.n	8009e80 <_printf_i+0x170>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	f023 0320 	bic.w	r3, r3, #32
 8009eb2:	6023      	str	r3, [r4, #0]
 8009eb4:	e7f6      	b.n	8009ea4 <_printf_i+0x194>
 8009eb6:	4616      	mov	r6, r2
 8009eb8:	e7bd      	b.n	8009e36 <_printf_i+0x126>
 8009eba:	6833      	ldr	r3, [r6, #0]
 8009ebc:	6825      	ldr	r5, [r4, #0]
 8009ebe:	6961      	ldr	r1, [r4, #20]
 8009ec0:	1d18      	adds	r0, r3, #4
 8009ec2:	6030      	str	r0, [r6, #0]
 8009ec4:	062e      	lsls	r6, r5, #24
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	d501      	bpl.n	8009ece <_printf_i+0x1be>
 8009eca:	6019      	str	r1, [r3, #0]
 8009ecc:	e002      	b.n	8009ed4 <_printf_i+0x1c4>
 8009ece:	0668      	lsls	r0, r5, #25
 8009ed0:	d5fb      	bpl.n	8009eca <_printf_i+0x1ba>
 8009ed2:	8019      	strh	r1, [r3, #0]
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	6123      	str	r3, [r4, #16]
 8009ed8:	4616      	mov	r6, r2
 8009eda:	e7bc      	b.n	8009e56 <_printf_i+0x146>
 8009edc:	6833      	ldr	r3, [r6, #0]
 8009ede:	1d1a      	adds	r2, r3, #4
 8009ee0:	6032      	str	r2, [r6, #0]
 8009ee2:	681e      	ldr	r6, [r3, #0]
 8009ee4:	6862      	ldr	r2, [r4, #4]
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7f6 f999 	bl	8000220 <memchr>
 8009eee:	b108      	cbz	r0, 8009ef4 <_printf_i+0x1e4>
 8009ef0:	1b80      	subs	r0, r0, r6
 8009ef2:	6060      	str	r0, [r4, #4]
 8009ef4:	6863      	ldr	r3, [r4, #4]
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009efe:	e7aa      	b.n	8009e56 <_printf_i+0x146>
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	4632      	mov	r2, r6
 8009f04:	4649      	mov	r1, r9
 8009f06:	4640      	mov	r0, r8
 8009f08:	47d0      	blx	sl
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d0ad      	beq.n	8009e6a <_printf_i+0x15a>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	079b      	lsls	r3, r3, #30
 8009f12:	d413      	bmi.n	8009f3c <_printf_i+0x22c>
 8009f14:	68e0      	ldr	r0, [r4, #12]
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	4298      	cmp	r0, r3
 8009f1a:	bfb8      	it	lt
 8009f1c:	4618      	movlt	r0, r3
 8009f1e:	e7a6      	b.n	8009e6e <_printf_i+0x15e>
 8009f20:	2301      	movs	r3, #1
 8009f22:	4632      	mov	r2, r6
 8009f24:	4649      	mov	r1, r9
 8009f26:	4640      	mov	r0, r8
 8009f28:	47d0      	blx	sl
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	d09d      	beq.n	8009e6a <_printf_i+0x15a>
 8009f2e:	3501      	adds	r5, #1
 8009f30:	68e3      	ldr	r3, [r4, #12]
 8009f32:	9903      	ldr	r1, [sp, #12]
 8009f34:	1a5b      	subs	r3, r3, r1
 8009f36:	42ab      	cmp	r3, r5
 8009f38:	dcf2      	bgt.n	8009f20 <_printf_i+0x210>
 8009f3a:	e7eb      	b.n	8009f14 <_printf_i+0x204>
 8009f3c:	2500      	movs	r5, #0
 8009f3e:	f104 0619 	add.w	r6, r4, #25
 8009f42:	e7f5      	b.n	8009f30 <_printf_i+0x220>
 8009f44:	0800a18d 	.word	0x0800a18d
 8009f48:	0800a19e 	.word	0x0800a19e

08009f4c <memmove>:
 8009f4c:	4288      	cmp	r0, r1
 8009f4e:	b510      	push	{r4, lr}
 8009f50:	eb01 0402 	add.w	r4, r1, r2
 8009f54:	d902      	bls.n	8009f5c <memmove+0x10>
 8009f56:	4284      	cmp	r4, r0
 8009f58:	4623      	mov	r3, r4
 8009f5a:	d807      	bhi.n	8009f6c <memmove+0x20>
 8009f5c:	1e43      	subs	r3, r0, #1
 8009f5e:	42a1      	cmp	r1, r4
 8009f60:	d008      	beq.n	8009f74 <memmove+0x28>
 8009f62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f6a:	e7f8      	b.n	8009f5e <memmove+0x12>
 8009f6c:	4402      	add	r2, r0
 8009f6e:	4601      	mov	r1, r0
 8009f70:	428a      	cmp	r2, r1
 8009f72:	d100      	bne.n	8009f76 <memmove+0x2a>
 8009f74:	bd10      	pop	{r4, pc}
 8009f76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f7e:	e7f7      	b.n	8009f70 <memmove+0x24>

08009f80 <_sbrk_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4d06      	ldr	r5, [pc, #24]	@ (8009f9c <_sbrk_r+0x1c>)
 8009f84:	2300      	movs	r3, #0
 8009f86:	4604      	mov	r4, r0
 8009f88:	4608      	mov	r0, r1
 8009f8a:	602b      	str	r3, [r5, #0]
 8009f8c:	f7f8 f956 	bl	800223c <_sbrk>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_sbrk_r+0x1a>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_sbrk_r+0x1a>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20005ca8 	.word	0x20005ca8

08009fa0 <_realloc_r>:
 8009fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa4:	4607      	mov	r7, r0
 8009fa6:	4614      	mov	r4, r2
 8009fa8:	460d      	mov	r5, r1
 8009faa:	b921      	cbnz	r1, 8009fb6 <_realloc_r+0x16>
 8009fac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	4611      	mov	r1, r2
 8009fb2:	f7ff bc5b 	b.w	800986c <_malloc_r>
 8009fb6:	b92a      	cbnz	r2, 8009fc4 <_realloc_r+0x24>
 8009fb8:	f7ff fbec 	bl	8009794 <_free_r>
 8009fbc:	4625      	mov	r5, r4
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc4:	f000 f81a 	bl	8009ffc <_malloc_usable_size_r>
 8009fc8:	4284      	cmp	r4, r0
 8009fca:	4606      	mov	r6, r0
 8009fcc:	d802      	bhi.n	8009fd4 <_realloc_r+0x34>
 8009fce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009fd2:	d8f4      	bhi.n	8009fbe <_realloc_r+0x1e>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f7ff fc48 	bl	800986c <_malloc_r>
 8009fdc:	4680      	mov	r8, r0
 8009fde:	b908      	cbnz	r0, 8009fe4 <_realloc_r+0x44>
 8009fe0:	4645      	mov	r5, r8
 8009fe2:	e7ec      	b.n	8009fbe <_realloc_r+0x1e>
 8009fe4:	42b4      	cmp	r4, r6
 8009fe6:	4622      	mov	r2, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	bf28      	it	cs
 8009fec:	4632      	movcs	r2, r6
 8009fee:	f7ff fbc3 	bl	8009778 <memcpy>
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff fbcd 	bl	8009794 <_free_r>
 8009ffa:	e7f1      	b.n	8009fe0 <_realloc_r+0x40>

08009ffc <_malloc_usable_size_r>:
 8009ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a000:	1f18      	subs	r0, r3, #4
 800a002:	2b00      	cmp	r3, #0
 800a004:	bfbc      	itt	lt
 800a006:	580b      	ldrlt	r3, [r1, r0]
 800a008:	18c0      	addlt	r0, r0, r3
 800a00a:	4770      	bx	lr

0800a00c <_init>:
 800a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00e:	bf00      	nop
 800a010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a012:	bc08      	pop	{r3}
 800a014:	469e      	mov	lr, r3
 800a016:	4770      	bx	lr

0800a018 <_fini>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	bf00      	nop
 800a01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01e:	bc08      	pop	{r3}
 800a020:	469e      	mov	lr, r3
 800a022:	4770      	bx	lr
