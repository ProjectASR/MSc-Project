
RTOS_V1ASR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002ef0  08002ef0  00003ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f50  08002f50  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002f50  08002f50  00003f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f58  08002f58  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00003f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00003f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002f60  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dc8  20000010  08002f70  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003dd8  08002f70  00004dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccd7  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c7  00000000  00000000  00010d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00012ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa9  00000000  00000000  00013cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b9  00000000  00000000  00014761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea99  00000000  00000000  0001681a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42e9  00000000  00000000  000252b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011959c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000395c  00000000  00000000  001195e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011cf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002ed8 	.word	0x08002ed8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08002ed8 	.word	0x08002ed8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b5b0      	push	{r4, r5, r7, lr}
 800053e:	b08a      	sub	sp, #40	@ 0x28
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000542:	f000 f8c7 	bl	80006d4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  HAL_Init();
 8000546:	f000 fa0c 	bl	8000962 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  SystemClock_Config();
 800054a:	f000 f82f 	bl	80005ac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  MX_GPIO_Init();
 800054e:	f000 f889 	bl	8000664 <MX_GPIO_Init>
  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000552:	4b12      	ldr	r3, [pc, #72]	@ (800059c <main+0x60>)
 8000554:	f107 0414 	add.w	r4, r7, #20
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	682b      	ldr	r3, [r5, #0]
 8000560:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2100      	movs	r1, #0
 8000568:	4618      	mov	r0, r3
 800056a:	f001 fb1c 	bl	8001ba6 <osThreadCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0b      	ldr	r2, [pc, #44]	@ (80005a0 <main+0x64>)
 8000572:	6013      	str	r3, [r2, #0]

  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 8000574:	4b0b      	ldr	r3, [pc, #44]	@ (80005a4 <main+0x68>)
 8000576:	463c      	mov	r4, r7
 8000578:	461d      	mov	r5, r3
 800057a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800057c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800057e:	682b      	ldr	r3, [r5, #0]
 8000580:	6023      	str	r3, [r4, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000582:	463b      	mov	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fb0d 	bl	8001ba6 <osThreadCreate>
 800058c:	4603      	mov	r3, r0
 800058e:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <main+0x6c>)
 8000590:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  osKernelStart();
 8000592:	f001 fb01 	bl	8001b98 <osKernelStart>

  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0x5a>
 800059a:	bf00      	nop
 800059c:	08002efc 	.word	0x08002efc
 80005a0:	2000002c 	.word	0x2000002c
 80005a4:	08002f1c 	.word	0x08002f1c
 80005a8:	20000030 	.word	0x20000030

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	@ 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	@ 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f002 fc60 	bl	8002e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	4b22      	ldr	r3, [pc, #136]	@ (800065c <SystemClock_Config+0xb0>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	4a21      	ldr	r2, [pc, #132]	@ (800065c <SystemClock_Config+0xb0>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	@ 0x40
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <SystemClock_Config+0xb0>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000660 <SystemClock_Config+0xb4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000660 <SystemClock_Config+0xb4>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <SystemClock_Config+0xb4>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	2310      	movs	r3, #16
 800060e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000610:	2300      	movs	r3, #0
 8000612:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fb29 	bl	8000c70 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000624:	f000 f894 	bl	8000750 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fdb8 	bl	80011b8 <HAL_RCC_ClockConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800064e:	f000 f87f 	bl	8000750 <Error_Handler>
  }
}
 8000652:	bf00      	nop
 8000654:	3750      	adds	r7, #80	@ 0x50
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_GPIO_Init+0x2c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <MX_GPIO_Init+0x2c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_GPIO_Init+0x2c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  for(;;)
  {
    defaultTaskCounter++;
 800069c:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <StartDefaultTask+0x1c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a03      	ldr	r2, [pc, #12]	@ (80006b0 <StartDefaultTask+0x1c>)
 80006a4:	6013      	str	r3, [r2, #0]
    osDelay(5); // 1 second delay
 80006a6:	2005      	movs	r0, #5
 80006a8:	f001 faa4 	bl	8001bf4 <osDelay>
    defaultTaskCounter++;
 80006ac:	bf00      	nop
 80006ae:	e7f5      	b.n	800069c <StartDefaultTask+0x8>
 80006b0:	20000034 	.word	0x20000034

080006b4 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  for(;;)
  {
    task02Counter++;
 80006bc:	4b04      	ldr	r3, [pc, #16]	@ (80006d0 <StartTask02+0x1c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a03      	ldr	r2, [pc, #12]	@ (80006d0 <StartTask02+0x1c>)
 80006c4:	6013      	str	r3, [r2, #0]
    osDelay(20); // 0.5 second delay
 80006c6:	2014      	movs	r0, #20
 80006c8:	f001 fa94 	bl	8001bf4 <osDelay>
    task02Counter++;
 80006cc:	bf00      	nop
 80006ce:	e7f5      	b.n	80006bc <StartTask02+0x8>
 80006d0:	20000038 	.word	0x20000038

080006d4 <MPU_Config>:
  /* USER CODE END StartTask02 */
}

/* MPU Configuration */
void MPU_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  HAL_MPU_Disable();
 80006e6:	f000 fa4b 	bl	8000b80 <HAL_MPU_Disable>

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006ea:	2301      	movs	r3, #1
 80006ec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006f6:	231f      	movs	r3, #31
 80006f8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006fa:	2387      	movs	r3, #135	@ 0x87
 80006fc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006fe:	2300      	movs	r3, #0
 8000700:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000702:	2300      	movs	r3, #0
 8000704:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000706:	2301      	movs	r3, #1
 8000708:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800070a:	2301      	movs	r3, #1
 800070c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800070e:	2300      	movs	r3, #0
 8000710:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000716:	463b      	mov	r3, r7
 8000718:	4618      	mov	r0, r3
 800071a:	f000 fa69 	bl	8000bf0 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800071e:	2004      	movs	r0, #4
 8000720:	f000 fa46 	bl	8000bb0 <HAL_MPU_Enable>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM5)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800073e:	f000 f91d 	bl	800097c <HAL_IncTick>
  }
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40000c00 	.word	0x40000c00

08000750 <Error_Handler>:

void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  __disable_irq();
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <Error_Handler+0x8>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b11      	ldr	r3, [pc, #68]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a10      	ldr	r2, [pc, #64]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
 800076e:	4b0e      	ldr	r3, [pc, #56]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <HAL_MspInit+0x4c>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000784:	6453      	str	r3, [r2, #68]	@ 0x44
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <HAL_MspInit+0x4c>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 f9c7 	bl	8000b2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80007bc:	4b33      	ldr	r3, [pc, #204]	@ (800088c <HAL_InitTick+0xe0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c0:	4a32      	ldr	r2, [pc, #200]	@ (800088c <HAL_InitTick+0xe0>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c8:	4b30      	ldr	r3, [pc, #192]	@ (800088c <HAL_InitTick+0xe0>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007cc:	f003 0308 	and.w	r3, r3, #8
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007d4:	f107 0210 	add.w	r2, r7, #16
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4611      	mov	r1, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 febc 	bl	800155c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007e4:	6a3b      	ldr	r3, [r7, #32]
 80007e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d103      	bne.n	80007f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ee:	f000 fea1 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 80007f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80007f4:	e004      	b.n	8000800 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007f6:	f000 fe9d 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 80007fa:	4603      	mov	r3, r0
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <HAL_InitTick+0xe4>)
 8000804:	fba2 2303 	umull	r2, r3, r2, r3
 8000808:	0c9b      	lsrs	r3, r3, #18
 800080a:	3b01      	subs	r3, #1
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <HAL_InitTick+0xe8>)
 8000810:	4a21      	ldr	r2, [pc, #132]	@ (8000898 <HAL_InitTick+0xec>)
 8000812:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <HAL_InitTick+0xe8>)
 8000816:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800081a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800081c:	4a1d      	ldr	r2, [pc, #116]	@ (8000894 <HAL_InitTick+0xe8>)
 800081e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000820:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <HAL_InitTick+0xe8>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <HAL_InitTick+0xe8>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_InitTick+0xe8>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000834:	4817      	ldr	r0, [pc, #92]	@ (8000894 <HAL_InitTick+0xe8>)
 8000836:	f000 fec3 	bl	80015c0 <HAL_TIM_Base_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000844:	2b00      	cmp	r3, #0
 8000846:	d11b      	bne.n	8000880 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <HAL_InitTick+0xe8>)
 800084a:	f000 ff1b 	bl	8001684 <HAL_TIM_Base_Start_IT>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000854:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000858:	2b00      	cmp	r3, #0
 800085a:	d111      	bne.n	8000880 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800085c:	2032      	movs	r0, #50	@ 0x32
 800085e:	f000 f981 	bl	8000b64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b0f      	cmp	r3, #15
 8000866:	d808      	bhi.n	800087a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000868:	2200      	movs	r2, #0
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2032      	movs	r0, #50	@ 0x32
 800086e:	f000 f95d 	bl	8000b2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_InitTick+0xf0>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6013      	str	r3, [r2, #0]
 8000878:	e002      	b.n	8000880 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000884:	4618      	mov	r0, r3
 8000886:	3738      	adds	r7, #56	@ 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	431bde83 	.word	0x431bde83
 8000894:	2000003c 	.word	0x2000003c
 8000898:	40000c00 	.word	0x40000c00
 800089c:	20000004 	.word	0x20000004

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <MemManage_Handler+0x4>

080008b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <TIM5_IRQHandler+0x10>)
 80008de:	f000 ff49 	bl	8001774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000003c 	.word	0x2000003c

080008ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	@ (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000948 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000914:	f7ff ffea 	bl	80008ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	@ (8000950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	@ (800095c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800093e:	f002 faa7 	bl	8002e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000942:	f7ff fdfb 	bl	800053c <main>
  bx  lr    
 8000946:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000948:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000954:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 8000958:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800095c:	20003dd8 	.word	0x20003dd8

08000960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>

08000962 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000966:	2003      	movs	r0, #3
 8000968:	f000 f8d5 	bl	8000b16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096c:	200f      	movs	r0, #15
 800096e:	f7ff ff1d 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000972:	f7ff fef3 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000976:	2300      	movs	r3, #0
}
 8000978:	4618      	mov	r0, r3
 800097a:	bd80      	pop	{r7, pc}

0800097c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000088 	.word	0x20000088

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000088 	.word	0x20000088

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <__NVIC_SetPriorityGrouping+0x40>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	4313      	orrs	r3, r2
 80009e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ea:	4a04      	ldr	r2, [pc, #16]	@ (80009fc <__NVIC_SetPriorityGrouping+0x40>)
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	60d3      	str	r3, [r2, #12]
}
 80009f0:	bf00      	nop
 80009f2:	3714      	adds	r7, #20
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	05fa0000 	.word	0x05fa0000

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff4c 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3e:	f7ff ff61 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68b9      	ldr	r1, [r7, #8]
 8000b48:	6978      	ldr	r0, [r7, #20]
 8000b4a:	f7ff ffb1 	bl	8000ab0 <NVIC_EncodePriority>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b54:	4611      	mov	r1, r2
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff ff80 	bl	8000a5c <__NVIC_SetPriority>
}
 8000b5c:	bf00      	nop
 8000b5e:	3718      	adds	r7, #24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff54 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000b84:	f3bf 8f5f 	dmb	sy
}
 8000b88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HAL_MPU_Disable+0x28>)
 8000b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b8e:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_MPU_Disable+0x28>)
 8000b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000b94:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <HAL_MPU_Disable+0x2c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	e000ed90 	.word	0xe000ed90

08000bb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000be8 <HAL_MPU_Enable+0x38>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <HAL_MPU_Enable+0x3c>)
 8000bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc6:	4a09      	ldr	r2, [pc, #36]	@ (8000bec <HAL_MPU_Enable+0x3c>)
 8000bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bcc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bce:	f3bf 8f4f 	dsb	sy
}
 8000bd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bd4:	f3bf 8f6f 	isb	sy
}
 8000bd8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed90 	.word	0xe000ed90
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	785a      	ldrb	r2, [r3, #1]
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c6c <HAL_MPU_ConfigRegion+0x7c>)
 8000bfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000c00:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <HAL_MPU_ConfigRegion+0x7c>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_MPU_ConfigRegion+0x7c>)
 8000c06:	f023 0301 	bic.w	r3, r3, #1
 8000c0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000c0c:	4a17      	ldr	r2, [pc, #92]	@ (8000c6c <HAL_MPU_ConfigRegion+0x7c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b1b      	ldrb	r3, [r3, #12]
 8000c18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7adb      	ldrb	r3, [r3, #11]
 8000c1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7a9b      	ldrb	r3, [r3, #10]
 8000c26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7b5b      	ldrb	r3, [r3, #13]
 8000c2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7b9b      	ldrb	r3, [r3, #14]
 8000c36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7bdb      	ldrb	r3, [r3, #15]
 8000c3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7a5b      	ldrb	r3, [r3, #9]
 8000c46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7a1b      	ldrb	r3, [r3, #8]
 8000c4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c5c:	6113      	str	r3, [r2, #16]
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed90 	.word	0xe000ed90

08000c70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d101      	bne.n	8000c86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e291      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 8087 	beq.w	8000da2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c94:	4b96      	ldr	r3, [pc, #600]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b04      	cmp	r3, #4
 8000c9e:	d00c      	beq.n	8000cba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca0:	4b93      	ldr	r3, [pc, #588]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 030c 	and.w	r3, r3, #12
 8000ca8:	2b08      	cmp	r3, #8
 8000caa:	d112      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x62>
 8000cac:	4b90      	ldr	r3, [pc, #576]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000cb8:	d10b      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cba:	4b8d      	ldr	r3, [pc, #564]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d06c      	beq.n	8000da0 <HAL_RCC_OscConfig+0x130>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d168      	bne.n	8000da0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e26b      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cda:	d106      	bne.n	8000cea <HAL_RCC_OscConfig+0x7a>
 8000cdc:	4b84      	ldr	r3, [pc, #528]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a83      	ldr	r2, [pc, #524]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000ce2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	e02e      	b.n	8000d48 <HAL_RCC_OscConfig+0xd8>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x9c>
 8000cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a7b      	ldr	r2, [pc, #492]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e01d      	b.n	8000d48 <HAL_RCC_OscConfig+0xd8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0xc0>
 8000d16:	4b76      	ldr	r3, [pc, #472]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a75      	ldr	r2, [pc, #468]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b73      	ldr	r3, [pc, #460]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a72      	ldr	r2, [pc, #456]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e00b      	b.n	8000d48 <HAL_RCC_OscConfig+0xd8>
 8000d30:	4b6f      	ldr	r3, [pc, #444]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a6e      	ldr	r2, [pc, #440]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a6b      	ldr	r2, [pc, #428]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d013      	beq.n	8000d78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d50:	f7ff fe28 	bl	80009a4 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d58:	f7ff fe24 	bl	80009a4 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b64      	cmp	r3, #100	@ 0x64
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e21f      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	4b61      	ldr	r3, [pc, #388]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0xe8>
 8000d76:	e014      	b.n	8000da2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d78:	f7ff fe14 	bl	80009a4 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d80:	f7ff fe10 	bl	80009a4 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b64      	cmp	r3, #100	@ 0x64
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e20b      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d92:	4b57      	ldr	r3, [pc, #348]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f0      	bne.n	8000d80 <HAL_RCC_OscConfig+0x110>
 8000d9e:	e000      	b.n	8000da2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d069      	beq.n	8000e82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dae:	4b50      	ldr	r3, [pc, #320]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	f003 030c 	and.w	r3, r3, #12
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d00b      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000dba:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 030c 	and.w	r3, r3, #12
 8000dc2:	2b08      	cmp	r3, #8
 8000dc4:	d11c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x190>
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d116      	bne.n	8000e00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dd2:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <HAL_RCC_OscConfig+0x17a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e1df      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dea:	4b41      	ldr	r3, [pc, #260]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	691b      	ldr	r3, [r3, #16]
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	493d      	ldr	r1, [pc, #244]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dfe:	e040      	b.n	8000e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d023      	beq.n	8000e50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e08:	4b39      	ldr	r3, [pc, #228]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a38      	ldr	r2, [pc, #224]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e14:	f7ff fdc6 	bl	80009a4 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e1a:	e008      	b.n	8000e2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fdc2 	bl	80009a4 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d901      	bls.n	8000e2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e1bd      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2e:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d0f0      	beq.n	8000e1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691b      	ldr	r3, [r3, #16]
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	4929      	ldr	r1, [pc, #164]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	600b      	str	r3, [r1, #0]
 8000e4e:	e018      	b.n	8000e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e50:	4b27      	ldr	r3, [pc, #156]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a26      	ldr	r2, [pc, #152]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e56:	f023 0301 	bic.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5c:	f7ff fda2 	bl	80009a4 <HAL_GetTick>
 8000e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e62:	e008      	b.n	8000e76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e64:	f7ff fd9e 	bl	80009a4 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d901      	bls.n	8000e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e72:	2303      	movs	r3, #3
 8000e74:	e199      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f0      	bne.n	8000e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d038      	beq.n	8000f00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d019      	beq.n	8000eca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000e9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fd7f 	bl	80009a4 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fd7b 	bl	80009a4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e176      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000ebe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x23a>
 8000ec8:	e01a      	b.n	8000f00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ece:	4a08      	ldr	r2, [pc, #32]	@ (8000ef0 <HAL_RCC_OscConfig+0x280>)
 8000ed0:	f023 0301 	bic.w	r3, r3, #1
 8000ed4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fd65 	bl	80009a4 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	e00a      	b.n	8000ef4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff fd61 	bl	80009a4 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d903      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e15c      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
 8000ef0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef4:	4b91      	ldr	r3, [pc, #580]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1ee      	bne.n	8000ede <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a4 	beq.w	8001056 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f0e:	4b8b      	ldr	r3, [pc, #556]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d10d      	bne.n	8000f36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	4b88      	ldr	r3, [pc, #544]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1e:	4a87      	ldr	r2, [pc, #540]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f26:	4b85      	ldr	r3, [pc, #532]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f32:	2301      	movs	r3, #1
 8000f34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f36:	4b82      	ldr	r3, [pc, #520]	@ (8001140 <HAL_RCC_OscConfig+0x4d0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d118      	bne.n	8000f74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f42:	4b7f      	ldr	r3, [pc, #508]	@ (8001140 <HAL_RCC_OscConfig+0x4d0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a7e      	ldr	r2, [pc, #504]	@ (8001140 <HAL_RCC_OscConfig+0x4d0>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fd29 	bl	80009a4 <HAL_GetTick>
 8000f52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f56:	f7ff fd25 	bl	80009a4 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	@ 0x64
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e120      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f68:	4b75      	ldr	r3, [pc, #468]	@ (8001140 <HAL_RCC_OscConfig+0x4d0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d106      	bne.n	8000f8a <HAL_RCC_OscConfig+0x31a>
 8000f7c:	4b6f      	ldr	r3, [pc, #444]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f80:	4a6e      	ldr	r2, [pc, #440]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f88:	e02d      	b.n	8000fe6 <HAL_RCC_OscConfig+0x376>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <HAL_RCC_OscConfig+0x33c>
 8000f92:	4b6a      	ldr	r3, [pc, #424]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f96:	4a69      	ldr	r2, [pc, #420]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8000f9e:	4b67      	ldr	r3, [pc, #412]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fa2:	4a66      	ldr	r2, [pc, #408]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fa4:	f023 0304 	bic.w	r3, r3, #4
 8000fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000faa:	e01c      	b.n	8000fe6 <HAL_RCC_OscConfig+0x376>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	2b05      	cmp	r3, #5
 8000fb2:	d10c      	bne.n	8000fce <HAL_RCC_OscConfig+0x35e>
 8000fb4:	4b61      	ldr	r3, [pc, #388]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fb8:	4a60      	ldr	r2, [pc, #384]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fc0:	4b5e      	ldr	r3, [pc, #376]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fc4:	4a5d      	ldr	r2, [pc, #372]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fcc:	e00b      	b.n	8000fe6 <HAL_RCC_OscConfig+0x376>
 8000fce:	4b5b      	ldr	r3, [pc, #364]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fd2:	4a5a      	ldr	r2, [pc, #360]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8000fda:	4b58      	ldr	r3, [pc, #352]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000fde:	4a57      	ldr	r2, [pc, #348]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fee:	f7ff fcd9 	bl	80009a4 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fcd5 	bl	80009a4 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0ce      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800100c:	4b4b      	ldr	r3, [pc, #300]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800100e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0ee      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x386>
 8001018:	e014      	b.n	8001044 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800101a:	f7ff fcc3 	bl	80009a4 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001020:	e00a      	b.n	8001038 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	f7ff fcbf 	bl	80009a4 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001030:	4293      	cmp	r3, r2
 8001032:	d901      	bls.n	8001038 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001034:	2303      	movs	r3, #3
 8001036:	e0b8      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001038:	4b40      	ldr	r3, [pc, #256]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800103a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800103c:	f003 0302 	and.w	r3, r3, #2
 8001040:	2b00      	cmp	r3, #0
 8001042:	d1ee      	bne.n	8001022 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d105      	bne.n	8001056 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800104a:	4b3c      	ldr	r3, [pc, #240]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104e:	4a3b      	ldr	r2, [pc, #236]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8001050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001054:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80a4 	beq.w	80011a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 030c 	and.w	r3, r3, #12
 8001068:	2b08      	cmp	r3, #8
 800106a:	d06b      	beq.n	8001144 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d149      	bne.n	8001108 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001074:	4b31      	ldr	r3, [pc, #196]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a30      	ldr	r2, [pc, #192]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800107a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800107e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001080:	f7ff fc90 	bl	80009a4 <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001086:	e008      	b.n	800109a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001088:	f7ff fc8c 	bl	80009a4 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d901      	bls.n	800109a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e087      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800109a:	4b28      	ldr	r3, [pc, #160]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f0      	bne.n	8001088 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69da      	ldr	r2, [r3, #28]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	019b      	lsls	r3, r3, #6
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010bc:	085b      	lsrs	r3, r3, #1
 80010be:	3b01      	subs	r3, #1
 80010c0:	041b      	lsls	r3, r3, #16
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c8:	061b      	lsls	r3, r3, #24
 80010ca:	4313      	orrs	r3, r2
 80010cc:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80010d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a18      	ldr	r2, [pc, #96]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc60 	bl	80009a4 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff fc5c 	bl	80009a4 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e057      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	4b10      	ldr	r3, [pc, #64]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x478>
 8001106:	e04f      	b.n	80011a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 800110e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fc46 	bl	80009a4 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111c:	f7ff fc42 	bl	80009a4 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e03d      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800112e:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_RCC_OscConfig+0x4cc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x4ac>
 800113a:	e035      	b.n	80011a8 <HAL_RCC_OscConfig+0x538>
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_RCC_OscConfig+0x544>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d028      	beq.n	80011a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800115c:	429a      	cmp	r2, r3
 800115e:	d121      	bne.n	80011a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	429a      	cmp	r2, r3
 800116c:	d11a      	bne.n	80011a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001174:	4013      	ands	r3, r2
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800117a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800117c:	4293      	cmp	r3, r2
 800117e:	d111      	bne.n	80011a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800118a:	085b      	lsrs	r3, r3, #1
 800118c:	3b01      	subs	r3, #1
 800118e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001190:	429a      	cmp	r2, r3
 8001192:	d107      	bne.n	80011a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e0d0      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011d0:	4b6a      	ldr	r3, [pc, #424]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d910      	bls.n	8001200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b67      	ldr	r3, [pc, #412]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 020f 	bic.w	r2, r3, #15
 80011e6:	4965      	ldr	r1, [pc, #404]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ee:	4b63      	ldr	r3, [pc, #396]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0b8      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0304 	and.w	r3, r3, #4
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001218:	4b59      	ldr	r3, [pc, #356]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800121e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001230:	4b53      	ldr	r3, [pc, #332]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a52      	ldr	r2, [pc, #328]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800123a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800123c:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	494d      	ldr	r1, [pc, #308]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800124a:	4313      	orrs	r3, r2
 800124c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d040      	beq.n	80012dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d107      	bne.n	8001272 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d115      	bne.n	800129a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e07f      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4b41      	ldr	r3, [pc, #260]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d109      	bne.n	800129a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e073      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128a:	4b3d      	ldr	r3, [pc, #244]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e06b      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800129a:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f023 0203 	bic.w	r2, r3, #3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4936      	ldr	r1, [pc, #216]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ac:	f7ff fb7a 	bl	80009a4 <HAL_GetTick>
 80012b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012b2:	e00a      	b.n	80012ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b4:	f7ff fb76 	bl	80009a4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e053      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 020c 	and.w	r2, r3, #12
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	429a      	cmp	r2, r3
 80012da:	d1eb      	bne.n	80012b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d210      	bcs.n	800130c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 020f 	bic.w	r2, r3, #15
 80012f2:	4922      	ldr	r1, [pc, #136]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fa:	4b20      	ldr	r3, [pc, #128]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d001      	beq.n	800130c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e032      	b.n	8001372 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	2b00      	cmp	r3, #0
 8001316:	d008      	beq.n	800132a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	4916      	ldr	r1, [pc, #88]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001326:	4313      	orrs	r3, r2
 8001328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	490e      	ldr	r1, [pc, #56]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134a:	f000 f821 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 800134e:	4602      	mov	r2, r0
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	490a      	ldr	r1, [pc, #40]	@ (8001384 <HAL_RCC_ClockConfig+0x1cc>)
 800135c:	5ccb      	ldrb	r3, [r1, r3]
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a09      	ldr	r2, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1d0>)
 8001364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_RCC_ClockConfig+0x1d4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fa1e 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023c00 	.word	0x40023c00
 8001380:	40023800 	.word	0x40023800
 8001384:	08002f38 	.word	0x08002f38
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001394:	b090      	sub	sp, #64	@ 0x40
 8001396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
 800139c:	2300      	movs	r3, #0
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013a8:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d00d      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0x40>
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	f200 80a1 	bhi.w	80014fc <HAL_RCC_GetSysClockFreq+0x16c>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_RCC_GetSysClockFreq+0x34>
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d003      	beq.n	80013ca <HAL_RCC_GetSysClockFreq+0x3a>
 80013c2:	e09b      	b.n	80014fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013c4:	4b53      	ldr	r3, [pc, #332]	@ (8001514 <HAL_RCC_GetSysClockFreq+0x184>)
 80013c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013c8:	e09b      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013ca:	4b53      	ldr	r3, [pc, #332]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 80013cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013ce:	e098      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80013da:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d028      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	099b      	lsrs	r3, r3, #6
 80013ec:	2200      	movs	r2, #0
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013f8:	2100      	movs	r1, #0
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 80013fc:	fb03 f201 	mul.w	r2, r3, r1
 8001400:	2300      	movs	r3, #0
 8001402:	fb00 f303 	mul.w	r3, r0, r3
 8001406:	4413      	add	r3, r2
 8001408:	4a43      	ldr	r2, [pc, #268]	@ (8001518 <HAL_RCC_GetSysClockFreq+0x188>)
 800140a:	fba0 1202 	umull	r1, r2, r0, r2
 800140e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001410:	460a      	mov	r2, r1
 8001412:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001416:	4413      	add	r3, r2
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800141c:	2200      	movs	r2, #0
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	61fa      	str	r2, [r7, #28]
 8001422:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001426:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800142a:	f7fe fef1 	bl	8000210 <__aeabi_uldivmod>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4613      	mov	r3, r2
 8001434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001436:	e053      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800144a:	f04f 0b00 	mov.w	fp, #0
 800144e:	4652      	mov	r2, sl
 8001450:	465b      	mov	r3, fp
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	f04f 0100 	mov.w	r1, #0
 800145a:	0159      	lsls	r1, r3, #5
 800145c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001460:	0150      	lsls	r0, r2, #5
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	ebb2 080a 	subs.w	r8, r2, sl
 800146a:	eb63 090b 	sbc.w	r9, r3, fp
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800147a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800147e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001482:	ebb2 0408 	subs.w	r4, r2, r8
 8001486:	eb63 0509 	sbc.w	r5, r3, r9
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	f04f 0300 	mov.w	r3, #0
 8001492:	00eb      	lsls	r3, r5, #3
 8001494:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001498:	00e2      	lsls	r2, r4, #3
 800149a:	4614      	mov	r4, r2
 800149c:	461d      	mov	r5, r3
 800149e:	eb14 030a 	adds.w	r3, r4, sl
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	eb45 030b 	adc.w	r3, r5, fp
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014b6:	4629      	mov	r1, r5
 80014b8:	028b      	lsls	r3, r1, #10
 80014ba:	4621      	mov	r1, r4
 80014bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014c0:	4621      	mov	r1, r4
 80014c2:	028a      	lsls	r2, r1, #10
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ca:	2200      	movs	r2, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	60fa      	str	r2, [r7, #12]
 80014d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014d4:	f7fe fe9c 	bl	8000210 <__aeabi_uldivmod>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4613      	mov	r3, r2
 80014de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x180>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	3301      	adds	r3, #1
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80014f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80014f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80014fa:	e002      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <HAL_RCC_GetSysClockFreq+0x184>)
 80014fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001502:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001504:	4618      	mov	r0, r3
 8001506:	3740      	adds	r7, #64	@ 0x40
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	017d7840 	.word	0x017d7840

0800151c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_RCC_GetHCLKFreq+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff0 	bl	800151c <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0a9b      	lsrs	r3, r3, #10
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	@ (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	08002f48 	.word	0x08002f48

0800155c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	220f      	movs	r2, #15
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_RCC_GetClockConfig+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 020f 	and.w	r2, r3, #15
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e049      	b.n	8001666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f841 	bl	800166e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3304      	adds	r3, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f000 f9e8 	bl	80019d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b01      	cmp	r3, #1
 8001696:	d001      	beq.n	800169c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e054      	b.n	8001746 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0201 	orr.w	r2, r2, #1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_TIM_Base_Start_IT+0xd0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d022      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c6:	d01d      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a22      	ldr	r2, [pc, #136]	@ (8001758 <HAL_TIM_Base_Start_IT+0xd4>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d018      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a21      	ldr	r2, [pc, #132]	@ (800175c <HAL_TIM_Base_Start_IT+0xd8>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d013      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001760 <HAL_TIM_Base_Start_IT+0xdc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00e      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001764 <HAL_TIM_Base_Start_IT+0xe0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d009      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001768 <HAL_TIM_Base_Start_IT+0xe4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d004      	beq.n	8001704 <HAL_TIM_Base_Start_IT+0x80>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <HAL_TIM_Base_Start_IT+0xe8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d115      	bne.n	8001730 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_TIM_Base_Start_IT+0xec>)
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b06      	cmp	r3, #6
 8001714:	d015      	beq.n	8001742 <HAL_TIM_Base_Start_IT+0xbe>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d011      	beq.n	8001742 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800172e:	e008      	b.n	8001742 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e000      	b.n	8001744 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	40000400 	.word	0x40000400
 800175c:	40000800 	.word	0x40000800
 8001760:	40000c00 	.word	0x40000c00
 8001764:	40010400 	.word	0x40010400
 8001768:	40014000 	.word	0x40014000
 800176c:	40001800 	.word	0x40001800
 8001770:	00010007 	.word	0x00010007

08001774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d020      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d01b      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f06f 0202 	mvn.w	r2, #2
 80017a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8e9 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80017c4:	e005      	b.n	80017d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f8db 	bl	8001982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f8ec 	bl	80019aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d020      	beq.n	8001824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d01b      	beq.n	8001824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0204 	mvn.w	r2, #4
 80017f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f8c3 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 8001810:	e005      	b.n	800181e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f8b5 	bl	8001982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f8c6 	bl	80019aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d020      	beq.n	8001870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d01b      	beq.n	8001870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0208 	mvn.w	r2, #8
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2204      	movs	r2, #4
 8001846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f89d 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 800185c:	e005      	b.n	800186a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f88f 	bl	8001982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8a0 	bl	80019aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d020      	beq.n	80018bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0210 	mvn.w	r2, #16
 800188c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2208      	movs	r2, #8
 8001892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f877 	bl	8001996 <HAL_TIM_IC_CaptureCallback>
 80018a8:	e005      	b.n	80018b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f869 	bl	8001982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f87a 	bl	80019aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00c      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0201 	mvn.w	r2, #1
 80018d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7fe ff26 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00c      	beq.n	800190e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f919 	bl	8001b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00c      	beq.n	8001932 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800192a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f911 	bl	8001b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00c      	beq.n	8001956 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800194e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f834 	bl	80019be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f06f 0220 	mvn.w	r2, #32
 8001972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f8d9 	bl	8001b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a46      	ldr	r2, [pc, #280]	@ (8001b00 <TIM_Base_SetConfig+0x12c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d013      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019f2:	d00f      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a43      	ldr	r2, [pc, #268]	@ (8001b04 <TIM_Base_SetConfig+0x130>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00b      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a42      	ldr	r2, [pc, #264]	@ (8001b08 <TIM_Base_SetConfig+0x134>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a41      	ldr	r2, [pc, #260]	@ (8001b0c <TIM_Base_SetConfig+0x138>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d003      	beq.n	8001a14 <TIM_Base_SetConfig+0x40>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a40      	ldr	r2, [pc, #256]	@ (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d108      	bne.n	8001a26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a35      	ldr	r2, [pc, #212]	@ (8001b00 <TIM_Base_SetConfig+0x12c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a34:	d027      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a32      	ldr	r2, [pc, #200]	@ (8001b04 <TIM_Base_SetConfig+0x130>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d023      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a31      	ldr	r2, [pc, #196]	@ (8001b08 <TIM_Base_SetConfig+0x134>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d01f      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a30      	ldr	r2, [pc, #192]	@ (8001b0c <TIM_Base_SetConfig+0x138>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d01b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d017      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a2e      	ldr	r2, [pc, #184]	@ (8001b14 <TIM_Base_SetConfig+0x140>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a2d      	ldr	r2, [pc, #180]	@ (8001b18 <TIM_Base_SetConfig+0x144>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d00f      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a2c      	ldr	r2, [pc, #176]	@ (8001b1c <TIM_Base_SetConfig+0x148>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d00b      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a2b      	ldr	r2, [pc, #172]	@ (8001b20 <TIM_Base_SetConfig+0x14c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d007      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a2a      	ldr	r2, [pc, #168]	@ (8001b24 <TIM_Base_SetConfig+0x150>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <TIM_Base_SetConfig+0xb2>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a29      	ldr	r2, [pc, #164]	@ (8001b28 <TIM_Base_SetConfig+0x154>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d108      	bne.n	8001a98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <TIM_Base_SetConfig+0x12c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d003      	beq.n	8001acc <TIM_Base_SetConfig+0xf8>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <TIM_Base_SetConfig+0x13c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d103      	bne.n	8001ad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d105      	bne.n	8001af2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	f023 0201 	bic.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
  }
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40000400 	.word	0x40000400
 8001b08:	40000800 	.word	0x40000800
 8001b0c:	40000c00 	.word	0x40000c00
 8001b10:	40010400 	.word	0x40010400
 8001b14:	40014000 	.word	0x40014000
 8001b18:	40014400 	.word	0x40014400
 8001b1c:	40014800 	.word	0x40014800
 8001b20:	40001800 	.word	0x40001800
 8001b24:	40001c00 	.word	0x40001c00
 8001b28:	40002000 	.word	0x40002000

08001b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b7a:	2b84      	cmp	r3, #132	@ 0x84
 8001b7c:	d005      	beq.n	8001b8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	3303      	adds	r3, #3
 8001b88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b9c:	f000 fa60 	bl	8002060 <vTaskStartScheduler>
  
  return osOK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001ba6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba8:	b087      	sub	sp, #28
 8001baa:	af02      	add	r7, sp, #8
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685c      	ldr	r4, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bbc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ffcf 	bl	8001b68 <makeFreeRtosPriority>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f107 030c 	add.w	r3, r7, #12
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	9200      	str	r2, [sp, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	4632      	mov	r2, r6
 8001bd8:	4629      	mov	r1, r5
 8001bda:	4620      	mov	r0, r4
 8001bdc:	f000 f8d2 	bl	8001d84 <xTaskCreate>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d001      	beq.n	8001bea <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	e000      	b.n	8001bec <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <osDelay+0x16>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	e000      	b.n	8001c0c <osDelay+0x18>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 f9ef 	bl	8001ff0 <vTaskDelay>
  
  return osOK;
 8001c12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f103 0208 	add.w	r2, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f103 0208 	add.w	r2, r3, #8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0208 	add.w	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b085      	sub	sp, #20
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d103      	bne.n	8001cde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e00c      	b.n	8001cf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	3308      	adds	r3, #8
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e002      	b.n	8001cec <vListInsert+0x2e>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d2f6      	bcs.n	8001ce6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6892      	ldr	r2, [r2, #8]
 8001d46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6852      	ldr	r2, [r2, #4]
 8001d50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d103      	bne.n	8001d64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1e5a      	subs	r2, r3, #1
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	@ 0x30
 8001d88:	af04      	add	r7, sp, #16
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fe87 	bl	8002aac <pvPortMalloc>
 8001d9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00e      	beq.n	8001dc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001da6:	2054      	movs	r0, #84	@ 0x54
 8001da8:	f000 fe80 	bl	8002aac <pvPortMalloc>
 8001dac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dba:	e005      	b.n	8001dc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001dbc:	6978      	ldr	r0, [r7, #20]
 8001dbe:	f000 ff43 	bl	8002c48 <vPortFree>
 8001dc2:	e001      	b.n	8001dc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d013      	beq.n	8001df6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001dce:	88fa      	ldrh	r2, [r7, #6]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9303      	str	r3, [sp, #12]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 f80e 	bl	8001e06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001dea:	69f8      	ldr	r0, [r7, #28]
 8001dec:	f000 f896 	bl	8001f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001df0:	2301      	movs	r3, #1
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	e002      	b.n	8001dfc <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001df6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001dfc:	69bb      	ldr	r3, [r7, #24]
	}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b088      	sub	sp, #32
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001e18:	6879      	ldr	r1, [r7, #4]
 8001e1a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001e1e:	440b      	add	r3, r1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	f023 0307 	bic.w	r3, r3, #7
 8001e2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00d      	beq.n	8001e54 <prvInitialiseNewTask+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3c:	b672      	cpsid	i
 8001e3e:	f383 8811 	msr	BASEPRI, r3
 8001e42:	f3bf 8f6f 	isb	sy
 8001e46:	f3bf 8f4f 	dsb	sy
 8001e4a:	b662      	cpsie	i
 8001e4c:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001e4e:	bf00      	nop
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01f      	beq.n	8001e9a <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e012      	b.n	8001e86 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	4413      	add	r3, r2
 8001e66:	7819      	ldrb	r1, [r3, #0]
 8001e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3334      	adds	r3, #52	@ 0x34
 8001e70:	460a      	mov	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	3301      	adds	r3, #1
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d9e9      	bls.n	8001e60 <prvInitialiseNewTask+0x5a>
 8001e8c:	e000      	b.n	8001e90 <prvInitialiseNewTask+0x8a>
			{
				break;
 8001e8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e98:	e003      	b.n	8001ea2 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea4:	2b06      	cmp	r3, #6
 8001ea6:	d901      	bls.n	8001eac <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ea8:	2306      	movs	r3, #6
 8001eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eba:	2200      	movs	r2, #0
 8001ebc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff feca 	bl	8001c5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eca:	3318      	adds	r3, #24
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fec5 	bl	8001c5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ed6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eda:	f1c3 0207 	rsb	r2, r3, #7
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eea:	2200      	movs	r2, #0
 8001eec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	69b8      	ldr	r0, [r7, #24]
 8001efc:	f000 fbe0 	bl	80026c0 <pxPortInitialiseStack>
 8001f00:	4602      	mov	r2, r0
 8001f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f12:	bf00      	nop
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f24:	f000 fcda 	bl	80028dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001f28:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4a29      	ldr	r2, [pc, #164]	@ (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001f32:	4b29      	ldr	r3, [pc, #164]	@ (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001f3a:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001f40:	4b24      	ldr	r3, [pc, #144]	@ (8001fd4 <prvAddNewTaskToReadyList+0xb8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d110      	bne.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001f48:	f000 fab6 	bl	80024b8 <prvInitialiseTaskLists>
 8001f4c:	e00d      	b.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <prvAddNewTaskToReadyList+0xc0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d802      	bhi.n	8001f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001f64:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <prvAddNewTaskToReadyList+0xc4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe0 <prvAddNewTaskToReadyList+0xc4>)
 8001f72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	2201      	movs	r2, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <prvAddNewTaskToReadyList+0xc8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <prvAddNewTaskToReadyList+0xc8>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4a15      	ldr	r2, [pc, #84]	@ (8001fe8 <prvAddNewTaskToReadyList+0xcc>)
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7ff fe6a 	bl	8001c76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001fa2:	f000 fcd1 	bl	8002948 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <prvAddNewTaskToReadyList+0xc0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00e      	beq.n	8001fcc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001fae:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <prvAddNewTaskToReadyList+0xbc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d207      	bcs.n	8001fcc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <prvAddNewTaskToReadyList+0xd0>)
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	f3bf 8f4f 	dsb	sy
 8001fc8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000018c 	.word	0x2000018c
 8001fd8:	2000008c 	.word	0x2000008c
 8001fdc:	20000198 	.word	0x20000198
 8001fe0:	200001a8 	.word	0x200001a8
 8001fe4:	20000194 	.word	0x20000194
 8001fe8:	20000090 	.word	0x20000090
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d01a      	beq.n	8002038 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <vTaskDelay+0x68>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00d      	beq.n	8002026 <vTaskDelay+0x36>
	__asm volatile
 800200a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800200e:	b672      	cpsid	i
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	b662      	cpsie	i
 800201e:	60bb      	str	r3, [r7, #8]
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	e7fd      	b.n	8002022 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8002026:	f000 f867 	bl	80020f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800202a:	2100      	movs	r1, #0
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fae1 	bl	80025f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002032:	f000 f86f 	bl	8002114 <xTaskResumeAll>
 8002036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <vTaskDelay+0x6c>)
 8002040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200001b4 	.word	0x200001b4
 800205c:	e000ed04 	.word	0xe000ed04

08002060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002066:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <vTaskStartScheduler+0x80>)
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	2300      	movs	r3, #0
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	2300      	movs	r3, #0
 8002070:	2280      	movs	r2, #128	@ 0x80
 8002072:	491c      	ldr	r1, [pc, #112]	@ (80020e4 <vTaskStartScheduler+0x84>)
 8002074:	481c      	ldr	r0, [pc, #112]	@ (80020e8 <vTaskStartScheduler+0x88>)
 8002076:	f7ff fe85 	bl	8001d84 <xTaskCreate>
 800207a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d118      	bne.n	80020b4 <vTaskStartScheduler+0x54>
	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002086:	b672      	cpsid	i
 8002088:	f383 8811 	msr	BASEPRI, r3
 800208c:	f3bf 8f6f 	isb	sy
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	b662      	cpsie	i
 8002096:	60bb      	str	r3, [r7, #8]
}
 8002098:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800209a:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <vTaskStartScheduler+0x8c>)
 800209c:	f04f 32ff 	mov.w	r2, #4294967295
 80020a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80020a2:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <vTaskStartScheduler+0x90>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <vTaskStartScheduler+0x94>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80020ae:	f000 fb97 	bl	80027e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80020b2:	e011      	b.n	80020d8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ba:	d10d      	bne.n	80020d8 <vTaskStartScheduler+0x78>
	__asm volatile
 80020bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c0:	b672      	cpsid	i
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	b662      	cpsie	i
 80020d0:	607b      	str	r3, [r7, #4]
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <vTaskStartScheduler+0x74>
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	200001b0 	.word	0x200001b0
 80020e4:	08002f30 	.word	0x08002f30
 80020e8:	08002489 	.word	0x08002489
 80020ec:	200001ac 	.word	0x200001ac
 80020f0:	20000198 	.word	0x20000198
 80020f4:	20000190 	.word	0x20000190

080020f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80020fc:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <vTaskSuspendAll+0x18>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	3301      	adds	r3, #1
 8002102:	4a03      	ldr	r2, [pc, #12]	@ (8002110 <vTaskSuspendAll+0x18>)
 8002104:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	200001b4 	.word	0x200001b4

08002114 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <xTaskResumeAll+0x11c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <xTaskResumeAll+0x32>
	__asm volatile
 800212a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800212e:	b672      	cpsid	i
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	b662      	cpsie	i
 800213e:	603b      	str	r3, [r7, #0]
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	e7fd      	b.n	8002142 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002146:	f000 fbc9 	bl	80028dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800214a:	4b39      	ldr	r3, [pc, #228]	@ (8002230 <xTaskResumeAll+0x11c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	4a37      	ldr	r2, [pc, #220]	@ (8002230 <xTaskResumeAll+0x11c>)
 8002152:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002154:	4b36      	ldr	r3, [pc, #216]	@ (8002230 <xTaskResumeAll+0x11c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d161      	bne.n	8002220 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800215c:	4b35      	ldr	r3, [pc, #212]	@ (8002234 <xTaskResumeAll+0x120>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d05d      	beq.n	8002220 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002164:	e02e      	b.n	80021c4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <xTaskResumeAll+0x124>)
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3318      	adds	r3, #24
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fddc 	bl	8001d30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3304      	adds	r3, #4
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fdd7 	bl	8001d30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	2201      	movs	r2, #1
 8002188:	409a      	lsls	r2, r3
 800218a:	4b2c      	ldr	r3, [pc, #176]	@ (800223c <xTaskResumeAll+0x128>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	4a2a      	ldr	r2, [pc, #168]	@ (800223c <xTaskResumeAll+0x128>)
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <xTaskResumeAll+0x12c>)
 80021a2:	441a      	add	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3304      	adds	r3, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	4610      	mov	r0, r2
 80021ac:	f7ff fd63 	bl	8001c76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <xTaskResumeAll+0x130>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80021be:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <xTaskResumeAll+0x134>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <xTaskResumeAll+0x124>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1cc      	bne.n	8002166 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80021d2:	f000 f9ef 	bl	80025b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <xTaskResumeAll+0x138>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d010      	beq.n	8002204 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80021e2:	f000 f837 	bl	8002254 <xTaskIncrementTick>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80021ec:	4b16      	ldr	r3, [pc, #88]	@ (8002248 <xTaskResumeAll+0x134>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3b01      	subs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f1      	bne.n	80021e2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <xTaskResumeAll+0x138>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002204:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <xTaskResumeAll+0x134>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800220c:	2301      	movs	r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002210:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <xTaskResumeAll+0x13c>)
 8002212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002220:	f000 fb92 	bl	8002948 <vPortExitCritical>

	return xAlreadyYielded;
 8002224:	68bb      	ldr	r3, [r7, #8]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200001b4 	.word	0x200001b4
 8002234:	2000018c 	.word	0x2000018c
 8002238:	2000014c 	.word	0x2000014c
 800223c:	20000194 	.word	0x20000194
 8002240:	20000090 	.word	0x20000090
 8002244:	2000008c 	.word	0x2000008c
 8002248:	200001a0 	.word	0x200001a0
 800224c:	2000019c 	.word	0x2000019c
 8002250:	e000ed04 	.word	0xe000ed04

08002254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800225e:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <xTaskIncrementTick+0x14c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 808b 	bne.w	800237e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002268:	4b4e      	ldr	r3, [pc, #312]	@ (80023a4 <xTaskIncrementTick+0x150>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	3301      	adds	r3, #1
 800226e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002270:	4a4c      	ldr	r2, [pc, #304]	@ (80023a4 <xTaskIncrementTick+0x150>)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d123      	bne.n	80022c4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800227c:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <xTaskIncrementTick+0x154>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00d      	beq.n	80022a2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8002286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228a:	b672      	cpsid	i
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	b662      	cpsie	i
 800229a:	603b      	str	r3, [r7, #0]
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <xTaskIncrementTick+0x4a>
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <xTaskIncrementTick+0x154>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	4b40      	ldr	r3, [pc, #256]	@ (80023ac <xTaskIncrementTick+0x158>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3e      	ldr	r2, [pc, #248]	@ (80023a8 <xTaskIncrementTick+0x154>)
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4a3e      	ldr	r2, [pc, #248]	@ (80023ac <xTaskIncrementTick+0x158>)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b3e      	ldr	r3, [pc, #248]	@ (80023b0 <xTaskIncrementTick+0x15c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	4a3c      	ldr	r2, [pc, #240]	@ (80023b0 <xTaskIncrementTick+0x15c>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	f000 f978 	bl	80025b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80022c4:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <xTaskIncrementTick+0x160>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d348      	bcc.n	8002360 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ce:	4b36      	ldr	r3, [pc, #216]	@ (80023a8 <xTaskIncrementTick+0x154>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d104      	bne.n	80022e2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022d8:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <xTaskIncrementTick+0x160>)
 80022da:	f04f 32ff 	mov.w	r2, #4294967295
 80022de:	601a      	str	r2, [r3, #0]
					break;
 80022e0:	e03e      	b.n	8002360 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <xTaskIncrementTick+0x154>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d203      	bcs.n	8002302 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80022fa:	4a2e      	ldr	r2, [pc, #184]	@ (80023b4 <xTaskIncrementTick+0x160>)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002300:	e02e      	b.n	8002360 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3304      	adds	r3, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd12 	bl	8001d30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	2b00      	cmp	r3, #0
 8002312:	d004      	beq.n	800231e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3318      	adds	r3, #24
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fd09 	bl	8001d30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002322:	2201      	movs	r2, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <xTaskIncrementTick+0x164>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	4a22      	ldr	r2, [pc, #136]	@ (80023b8 <xTaskIncrementTick+0x164>)
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4a1f      	ldr	r2, [pc, #124]	@ (80023bc <xTaskIncrementTick+0x168>)
 800233e:	441a      	add	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	3304      	adds	r3, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4610      	mov	r0, r2
 8002348:	f7ff fc95 	bl	8001c76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	4b1b      	ldr	r3, [pc, #108]	@ (80023c0 <xTaskIncrementTick+0x16c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002356:	429a      	cmp	r2, r3
 8002358:	d3b9      	bcc.n	80022ce <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800235a:	2301      	movs	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800235e:	e7b6      	b.n	80022ce <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002360:	4b17      	ldr	r3, [pc, #92]	@ (80023c0 <xTaskIncrementTick+0x16c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002366:	4915      	ldr	r1, [pc, #84]	@ (80023bc <xTaskIncrementTick+0x168>)
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d907      	bls.n	8002388 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8002378:	2301      	movs	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e004      	b.n	8002388 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <xTaskIncrementTick+0x170>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3301      	adds	r3, #1
 8002384:	4a0f      	ldr	r2, [pc, #60]	@ (80023c4 <xTaskIncrementTick+0x170>)
 8002386:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002388:	4b0f      	ldr	r3, [pc, #60]	@ (80023c8 <xTaskIncrementTick+0x174>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8002390:	2301      	movs	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002394:	697b      	ldr	r3, [r7, #20]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200001b4 	.word	0x200001b4
 80023a4:	20000190 	.word	0x20000190
 80023a8:	20000144 	.word	0x20000144
 80023ac:	20000148 	.word	0x20000148
 80023b0:	200001a4 	.word	0x200001a4
 80023b4:	200001ac 	.word	0x200001ac
 80023b8:	20000194 	.word	0x20000194
 80023bc:	20000090 	.word	0x20000090
 80023c0:	2000008c 	.word	0x2000008c
 80023c4:	2000019c 	.word	0x2000019c
 80023c8:	200001a0 	.word	0x200001a0

080023cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80023d2:	4b28      	ldr	r3, [pc, #160]	@ (8002474 <vTaskSwitchContext+0xa8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80023da:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <vTaskSwitchContext+0xac>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80023e0:	e042      	b.n	8002468 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80023e2:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <vTaskSwitchContext+0xac>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <vTaskSwitchContext+0xb0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	f1c3 031f 	rsb	r3, r3, #31
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	4920      	ldr	r1, [pc, #128]	@ (8002480 <vTaskSwitchContext+0xb4>)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <vTaskSwitchContext+0x62>
	__asm volatile
 8002412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002416:	b672      	cpsid	i
 8002418:	f383 8811 	msr	BASEPRI, r3
 800241c:	f3bf 8f6f 	isb	sy
 8002420:	f3bf 8f4f 	dsb	sy
 8002424:	b662      	cpsie	i
 8002426:	607b      	str	r3, [r7, #4]
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	e7fd      	b.n	800242a <vTaskSwitchContext+0x5e>
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4a11      	ldr	r2, [pc, #68]	@ (8002480 <vTaskSwitchContext+0xb4>)
 800243a:	4413      	add	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	3308      	adds	r3, #8
 8002450:	429a      	cmp	r2, r3
 8002452:	d104      	bne.n	800245e <vTaskSwitchContext+0x92>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <vTaskSwitchContext+0xb8>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	371c      	adds	r7, #28
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	200001b4 	.word	0x200001b4
 8002478:	200001a0 	.word	0x200001a0
 800247c:	20000194 	.word	0x20000194
 8002480:	20000090 	.word	0x20000090
 8002484:	2000008c 	.word	0x2000008c

08002488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002490:	f000 f852 	bl	8002538 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <prvIdleTask+0x28>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d9f9      	bls.n	8002490 <prvIdleTask+0x8>
			{
				taskYIELD();
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <prvIdleTask+0x2c>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80024ac:	e7f0      	b.n	8002490 <prvIdleTask+0x8>
 80024ae:	bf00      	nop
 80024b0:	20000090 	.word	0x20000090
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e00c      	b.n	80024de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <prvInitialiseTaskLists+0x60>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fba2 	bl	8001c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d9ef      	bls.n	80024c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80024e4:	480d      	ldr	r0, [pc, #52]	@ (800251c <prvInitialiseTaskLists+0x64>)
 80024e6:	f7ff fb99 	bl	8001c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024ea:	480d      	ldr	r0, [pc, #52]	@ (8002520 <prvInitialiseTaskLists+0x68>)
 80024ec:	f7ff fb96 	bl	8001c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024f0:	480c      	ldr	r0, [pc, #48]	@ (8002524 <prvInitialiseTaskLists+0x6c>)
 80024f2:	f7ff fb93 	bl	8001c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024f6:	480c      	ldr	r0, [pc, #48]	@ (8002528 <prvInitialiseTaskLists+0x70>)
 80024f8:	f7ff fb90 	bl	8001c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024fc:	480b      	ldr	r0, [pc, #44]	@ (800252c <prvInitialiseTaskLists+0x74>)
 80024fe:	f7ff fb8d 	bl	8001c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002502:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <prvInitialiseTaskLists+0x78>)
 8002504:	4a05      	ldr	r2, [pc, #20]	@ (800251c <prvInitialiseTaskLists+0x64>)
 8002506:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002508:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <prvInitialiseTaskLists+0x7c>)
 800250a:	4a05      	ldr	r2, [pc, #20]	@ (8002520 <prvInitialiseTaskLists+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000090 	.word	0x20000090
 800251c:	2000011c 	.word	0x2000011c
 8002520:	20000130 	.word	0x20000130
 8002524:	2000014c 	.word	0x2000014c
 8002528:	20000160 	.word	0x20000160
 800252c:	20000178 	.word	0x20000178
 8002530:	20000144 	.word	0x20000144
 8002534:	20000148 	.word	0x20000148

08002538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800253e:	e019      	b.n	8002574 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002540:	f000 f9cc 	bl	80028dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <prvCheckTasksWaitingTermination+0x50>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fbed 	bl	8001d30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002556:	4b0d      	ldr	r3, [pc, #52]	@ (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a0b      	ldr	r2, [pc, #44]	@ (800258c <prvCheckTasksWaitingTermination+0x54>)
 800255e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002560:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <prvCheckTasksWaitingTermination+0x58>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <prvCheckTasksWaitingTermination+0x58>)
 8002568:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800256a:	f000 f9ed 	bl	8002948 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f810 	bl	8002594 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <prvCheckTasksWaitingTermination+0x58>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e1      	bne.n	8002540 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20000160 	.word	0x20000160
 800258c:	2000018c 	.word	0x2000018c
 8002590:	20000174 	.word	0x20000174

08002594 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fb51 	bl	8002c48 <vPortFree>
			vPortFree( pxTCB );
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fb4e 	bl	8002c48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025ba:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <prvResetNextTaskUnblockTime+0x38>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d104      	bne.n	80025ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <prvResetNextTaskUnblockTime+0x3c>)
 80025c6:	f04f 32ff 	mov.w	r2, #4294967295
 80025ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025cc:	e008      	b.n	80025e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025ce:	4b07      	ldr	r3, [pc, #28]	@ (80025ec <prvResetNextTaskUnblockTime+0x38>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <prvResetNextTaskUnblockTime+0x3c>)
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	20000144 	.word	0x20000144
 80025f0:	200001ac 	.word	0x200001ac

080025f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3304      	adds	r3, #4
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fb90 	bl	8001d30 <uxListRemove>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10b      	bne.n	800262e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	2201      	movs	r2, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	4b21      	ldr	r3, [pc, #132]	@ (80026ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4013      	ands	r3, r2
 800262a:	4a20      	ldr	r2, [pc, #128]	@ (80026ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800262c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d10a      	bne.n	800264c <prvAddCurrentTaskToDelayedList+0x58>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	481a      	ldr	r0, [pc, #104]	@ (80026b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002646:	f7ff fb16 	bl	8001c76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800264a:	e026      	b.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002654:	4b14      	ldr	r3, [pc, #80]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d209      	bcs.n	8002678 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4b0f      	ldr	r3, [pc, #60]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3304      	adds	r3, #4
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f7ff fb24 	bl	8001cbe <vListInsert>
}
 8002676:	e010      	b.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f7ff fb1a 	bl	8001cbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800268a:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	429a      	cmp	r2, r3
 8002692:	d202      	bcs.n	800269a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002694:	4a09      	ldr	r2, [pc, #36]	@ (80026bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6013      	str	r3, [r2, #0]
}
 800269a:	bf00      	nop
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20000190 	.word	0x20000190
 80026a8:	2000008c 	.word	0x2000008c
 80026ac:	20000194 	.word	0x20000194
 80026b0:	20000178 	.word	0x20000178
 80026b4:	20000148 	.word	0x20000148
 80026b8:	20000144 	.word	0x20000144
 80026bc:	200001ac 	.word	0x200001ac

080026c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b04      	subs	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80026d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	3b04      	subs	r3, #4
 80026de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f023 0201 	bic.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	3b04      	subs	r3, #4
 80026ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80026f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <pxPortInitialiseStack+0x64>)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3b14      	subs	r3, #20
 80026fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3b04      	subs	r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f06f 0202 	mvn.w	r2, #2
 800270e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3b20      	subs	r3, #32
 8002714:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	08002729 	.word	0x08002729

08002728 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <prvTaskExitError+0x60>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d00d      	beq.n	8002758 <prvTaskExitError+0x30>
	__asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002740:	b672      	cpsid	i
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	b662      	cpsie	i
 8002750:	60fb      	str	r3, [r7, #12]
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <prvTaskExitError+0x2c>
	__asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800275c:	b672      	cpsid	i
 800275e:	f383 8811 	msr	BASEPRI, r3
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	b662      	cpsie	i
 800276c:	60bb      	str	r3, [r7, #8]
}
 800276e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002770:	bf00      	nop
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0fc      	beq.n	8002772 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	2000000c 	.word	0x2000000c
 800278c:	00000000 	.word	0x00000000

08002790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002790:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <pxCurrentTCBConst2>)
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	6808      	ldr	r0, [r1, #0]
 8002796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800279a:	f380 8809 	msr	PSP, r0
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f380 8811 	msr	BASEPRI, r0
 80027aa:	4770      	bx	lr
 80027ac:	f3af 8000 	nop.w

080027b0 <pxCurrentTCBConst2>:
 80027b0:	2000008c 	.word	0x2000008c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop

080027b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027b8:	4808      	ldr	r0, [pc, #32]	@ (80027dc <prvPortStartFirstTask+0x24>)
 80027ba:	6800      	ldr	r0, [r0, #0]
 80027bc:	6800      	ldr	r0, [r0, #0]
 80027be:	f380 8808 	msr	MSP, r0
 80027c2:	f04f 0000 	mov.w	r0, #0
 80027c6:	f380 8814 	msr	CONTROL, r0
 80027ca:	b662      	cpsie	i
 80027cc:	b661      	cpsie	f
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	df00      	svc	0
 80027d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80027da:	bf00      	nop
 80027dc:	e000ed08 	.word	0xe000ed08

080027e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027e6:	4b37      	ldr	r3, [pc, #220]	@ (80028c4 <xPortStartScheduler+0xe4>)
 80027e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	22ff      	movs	r2, #255	@ 0xff
 80027f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b2f      	ldr	r3, [pc, #188]	@ (80028c8 <xPortStartScheduler+0xe8>)
 800280c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800280e:	4b2f      	ldr	r3, [pc, #188]	@ (80028cc <xPortStartScheduler+0xec>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002814:	e009      	b.n	800282a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002816:	4b2d      	ldr	r3, [pc, #180]	@ (80028cc <xPortStartScheduler+0xec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	4a2b      	ldr	r2, [pc, #172]	@ (80028cc <xPortStartScheduler+0xec>)
 800281e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b80      	cmp	r3, #128	@ 0x80
 8002834:	d0ef      	beq.n	8002816 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <xPortStartScheduler+0xec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1c3 0307 	rsb	r3, r3, #7
 800283e:	2b04      	cmp	r3, #4
 8002840:	d00d      	beq.n	800285e <xPortStartScheduler+0x7e>
	__asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002846:	b672      	cpsid	i
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	b662      	cpsie	i
 8002856:	60bb      	str	r3, [r7, #8]
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <xPortStartScheduler+0xec>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <xPortStartScheduler+0xec>)
 8002866:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002868:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <xPortStartScheduler+0xec>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002870:	4a16      	ldr	r2, [pc, #88]	@ (80028cc <xPortStartScheduler+0xec>)
 8002872:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <xPortStartScheduler+0xf0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a13      	ldr	r2, [pc, #76]	@ (80028d0 <xPortStartScheduler+0xf0>)
 8002882:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002886:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <xPortStartScheduler+0xf0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a10      	ldr	r2, [pc, #64]	@ (80028d0 <xPortStartScheduler+0xf0>)
 800288e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002892:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002894:	f000 f8dc 	bl	8002a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <xPortStartScheduler+0xf4>)
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800289e:	f000 f8fb 	bl	8002a98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80028a2:	4b0d      	ldr	r3, [pc, #52]	@ (80028d8 <xPortStartScheduler+0xf8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a0c      	ldr	r2, [pc, #48]	@ (80028d8 <xPortStartScheduler+0xf8>)
 80028a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80028ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80028ae:	f7ff ff83 	bl	80027b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80028b2:	f7ff fd8b 	bl	80023cc <vTaskSwitchContext>
	prvTaskExitError();
 80028b6:	f7ff ff37 	bl	8002728 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	e000e400 	.word	0xe000e400
 80028c8:	200001b8 	.word	0x200001b8
 80028cc:	200001bc 	.word	0x200001bc
 80028d0:	e000ed20 	.word	0xe000ed20
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	e000ef34 	.word	0xe000ef34

080028dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
	__asm volatile
 80028e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e6:	b672      	cpsid	i
 80028e8:	f383 8811 	msr	BASEPRI, r3
 80028ec:	f3bf 8f6f 	isb	sy
 80028f0:	f3bf 8f4f 	dsb	sy
 80028f4:	b662      	cpsie	i
 80028f6:	607b      	str	r3, [r7, #4]
}
 80028f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <vPortEnterCritical+0x64>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	3301      	adds	r3, #1
 8002900:	4a0f      	ldr	r2, [pc, #60]	@ (8002940 <vPortEnterCritical+0x64>)
 8002902:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <vPortEnterCritical+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d112      	bne.n	8002932 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800290c:	4b0d      	ldr	r3, [pc, #52]	@ (8002944 <vPortEnterCritical+0x68>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <vPortEnterCritical+0x56>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291a:	b672      	cpsid	i
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	b662      	cpsie	i
 800292a:	603b      	str	r3, [r7, #0]
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	e7fd      	b.n	800292e <vPortEnterCritical+0x52>
	}
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	2000000c 	.word	0x2000000c
 8002944:	e000ed04 	.word	0xe000ed04

08002948 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800294e:	4b13      	ldr	r3, [pc, #76]	@ (800299c <vPortExitCritical+0x54>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <vPortExitCritical+0x2a>
	__asm volatile
 8002956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295a:	b672      	cpsid	i
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	b662      	cpsie	i
 800296a:	607b      	str	r3, [r7, #4]
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8002972:	4b0a      	ldr	r3, [pc, #40]	@ (800299c <vPortExitCritical+0x54>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	4a08      	ldr	r2, [pc, #32]	@ (800299c <vPortExitCritical+0x54>)
 800297a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800297c:	4b07      	ldr	r3, [pc, #28]	@ (800299c <vPortExitCritical+0x54>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <vPortExitCritical+0x48>
 8002984:	2300      	movs	r3, #0
 8002986:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800298e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	2000000c 	.word	0x2000000c

080029a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80029a0:	f3ef 8009 	mrs	r0, PSP
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <pxCurrentTCBConst>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f01e 0f10 	tst.w	lr, #16
 80029b0:	bf08      	it	eq
 80029b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80029b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ba:	6010      	str	r0, [r2, #0]
 80029bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80029c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80029c4:	b672      	cpsid	i
 80029c6:	f380 8811 	msr	BASEPRI, r0
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	b662      	cpsie	i
 80029d4:	f7ff fcfa 	bl	80023cc <vTaskSwitchContext>
 80029d8:	f04f 0000 	mov.w	r0, #0
 80029dc:	f380 8811 	msr	BASEPRI, r0
 80029e0:	bc09      	pop	{r0, r3}
 80029e2:	6819      	ldr	r1, [r3, #0]
 80029e4:	6808      	ldr	r0, [r1, #0]
 80029e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ea:	f01e 0f10 	tst.w	lr, #16
 80029ee:	bf08      	it	eq
 80029f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80029f4:	f380 8809 	msr	PSP, r0
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop

08002a00 <pxCurrentTCBConst>:
 8002a00:	2000008c 	.word	0x2000008c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop

08002a08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a12:	b672      	cpsid	i
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	b662      	cpsie	i
 8002a22:	607b      	str	r3, [r7, #4]
}
 8002a24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a26:	f7ff fc15 	bl	8002254 <xTaskIncrementTick>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a30:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <SysTick_Handler+0x44>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	f383 8811 	msr	BASEPRI, r3
}
 8002a42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <vPortSetupTimerInterrupt+0x34>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <vPortSetupTimerInterrupt+0x38>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <vPortSetupTimerInterrupt+0x3c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <vPortSetupTimerInterrupt+0x40>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	4a09      	ldr	r2, [pc, #36]	@ (8002a94 <vPortSetupTimerInterrupt+0x44>)
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <vPortSetupTimerInterrupt+0x34>)
 8002a74:	2207      	movs	r2, #7
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e010 	.word	0xe000e010
 8002a88:	e000e018 	.word	0xe000e018
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	10624dd3 	.word	0x10624dd3
 8002a94:	e000e014 	.word	0xe000e014

08002a98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8002aa8 <vPortEnableVFP+0x10>
 8002a9c:	6801      	ldr	r1, [r0, #0]
 8002a9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002aa2:	6001      	str	r1, [r0, #0]
 8002aa4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002aa6:	bf00      	nop
 8002aa8:	e000ed88 	.word	0xe000ed88

08002aac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ab8:	f7ff fb1e 	bl	80020f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002abc:	4b5d      	ldr	r3, [pc, #372]	@ (8002c34 <pvPortMalloc+0x188>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ac4:	f000 f920 	bl	8002d08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <pvPortMalloc+0x18c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f040 8094 	bne.w	8002bfe <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8002adc:	2208      	movs	r2, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f023 0307 	bic.w	r3, r3, #7
 8002af4:	3308      	adds	r3, #8
 8002af6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00d      	beq.n	8002b1e <pvPortMalloc+0x72>
	__asm volatile
 8002b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b06:	b672      	cpsid	i
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	b662      	cpsie	i
 8002b16:	617b      	str	r3, [r7, #20]
}
 8002b18:	bf00      	nop
 8002b1a:	bf00      	nop
 8002b1c:	e7fd      	b.n	8002b1a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d06c      	beq.n	8002bfe <pvPortMalloc+0x152>
 8002b24:	4b45      	ldr	r3, [pc, #276]	@ (8002c3c <pvPortMalloc+0x190>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d867      	bhi.n	8002bfe <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b2e:	4b44      	ldr	r3, [pc, #272]	@ (8002c40 <pvPortMalloc+0x194>)
 8002b30:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b32:	4b43      	ldr	r3, [pc, #268]	@ (8002c40 <pvPortMalloc+0x194>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b38:	e004      	b.n	8002b44 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d903      	bls.n	8002b56 <pvPortMalloc+0xaa>
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f1      	bne.n	8002b3a <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <pvPortMalloc+0x188>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d04e      	beq.n	8002bfe <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	4413      	add	r3, r2
 8002b68:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	1ad2      	subs	r2, r2, r3
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d922      	bls.n	8002bc8 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00d      	beq.n	8002bb0 <pvPortMalloc+0x104>
	__asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	b672      	cpsid	i
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	b662      	cpsie	i
 8002ba8:	613b      	str	r3, [r7, #16]
}
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bc2:	69b8      	ldr	r0, [r7, #24]
 8002bc4:	f000 f902 	bl	8002dcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c3c <pvPortMalloc+0x190>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c3c <pvPortMalloc+0x190>)
 8002bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bd6:	4b19      	ldr	r3, [pc, #100]	@ (8002c3c <pvPortMalloc+0x190>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <pvPortMalloc+0x198>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d203      	bcs.n	8002bea <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002be2:	4b16      	ldr	r3, [pc, #88]	@ (8002c3c <pvPortMalloc+0x190>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a17      	ldr	r2, [pc, #92]	@ (8002c44 <pvPortMalloc+0x198>)
 8002be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <pvPortMalloc+0x18c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bfe:	f7ff fa89 	bl	8002114 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <pvPortMalloc+0x17c>
	__asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c10:	b672      	cpsid	i
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	b662      	cpsie	i
 8002c20:	60fb      	str	r3, [r7, #12]
}
 8002c22:	bf00      	nop
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <pvPortMalloc+0x178>
	return pvReturn;
 8002c28:	69fb      	ldr	r3, [r7, #28]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	@ 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20003dc8 	.word	0x20003dc8
 8002c38:	20003dd4 	.word	0x20003dd4
 8002c3c:	20003dcc 	.word	0x20003dcc
 8002c40:	20003dc0 	.word	0x20003dc0
 8002c44:	20003dd0 	.word	0x20003dd0

08002c48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04e      	beq.n	8002cf8 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	425b      	negs	r3, r3
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4413      	add	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	4b24      	ldr	r3, [pc, #144]	@ (8002d00 <vPortFree+0xb8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <vPortFree+0x4a>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7a:	b672      	cpsid	i
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	b662      	cpsie	i
 8002c8a:	60fb      	str	r3, [r7, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	e7fd      	b.n	8002c8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00d      	beq.n	8002cb6 <vPortFree+0x6e>
	__asm volatile
 8002c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c9e:	b672      	cpsid	i
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	b662      	cpsie	i
 8002cae:	60bb      	str	r3, [r7, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	bf00      	nop
 8002cb4:	e7fd      	b.n	8002cb2 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <vPortFree+0xb8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d019      	beq.n	8002cf8 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d115      	bne.n	8002cf8 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d00 <vPortFree+0xb8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	401a      	ands	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002cdc:	f7ff fa0c 	bl	80020f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4b07      	ldr	r3, [pc, #28]	@ (8002d04 <vPortFree+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a06      	ldr	r2, [pc, #24]	@ (8002d04 <vPortFree+0xbc>)
 8002cec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002cee:	6938      	ldr	r0, [r7, #16]
 8002cf0:	f000 f86c 	bl	8002dcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002cf4:	f7ff fa0e 	bl	8002114 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20003dd4 	.word	0x20003dd4
 8002d04:	20003dcc 	.word	0x20003dcc

08002d08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d0e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8002d12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d14:	4b27      	ldr	r3, [pc, #156]	@ (8002db4 <prvHeapInit+0xac>)
 8002d16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3307      	adds	r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0307 	bic.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4a1f      	ldr	r2, [pc, #124]	@ (8002db4 <prvHeapInit+0xac>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d40:	4a1d      	ldr	r2, [pc, #116]	@ (8002db8 <prvHeapInit+0xb0>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d46:	4b1c      	ldr	r3, [pc, #112]	@ (8002db8 <prvHeapInit+0xb0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d54:	2208      	movs	r2, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a15      	ldr	r2, [pc, #84]	@ (8002dbc <prvHeapInit+0xb4>)
 8002d68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d6a:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <prvHeapInit+0xb4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <prvHeapInit+0xb4>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	1ad2      	subs	r2, r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <prvHeapInit+0xb4>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <prvHeapInit+0xb8>)
 8002d96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <prvHeapInit+0xbc>)
 8002d9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <prvHeapInit+0xc0>)
 8002da2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002da6:	601a      	str	r2, [r3, #0]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	200001c0 	.word	0x200001c0
 8002db8:	20003dc0 	.word	0x20003dc0
 8002dbc:	20003dc8 	.word	0x20003dc8
 8002dc0:	20003dd0 	.word	0x20003dd0
 8002dc4:	20003dcc 	.word	0x20003dcc
 8002dc8:	20003dd4 	.word	0x20003dd4

08002dcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <prvInsertBlockIntoFreeList+0xac>)
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e002      	b.n	8002de0 <prvInsertBlockIntoFreeList+0x14>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d8f7      	bhi.n	8002dda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	4413      	add	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d108      	bne.n	8002e0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	441a      	add	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	441a      	add	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d118      	bne.n	8002e54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <prvInsertBlockIntoFreeList+0xb0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d00d      	beq.n	8002e4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	441a      	add	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e008      	b.n	8002e5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <prvInsertBlockIntoFreeList+0xb0>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e003      	b.n	8002e5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d002      	beq.n	8002e6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20003dc0 	.word	0x20003dc0
 8002e7c:	20003dc8 	.word	0x20003dc8

08002e80 <memset>:
 8002e80:	4402      	add	r2, r0
 8002e82:	4603      	mov	r3, r0
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d100      	bne.n	8002e8a <memset+0xa>
 8002e88:	4770      	bx	lr
 8002e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e8e:	e7f9      	b.n	8002e84 <memset+0x4>

08002e90 <__libc_init_array>:
 8002e90:	b570      	push	{r4, r5, r6, lr}
 8002e92:	4d0d      	ldr	r5, [pc, #52]	@ (8002ec8 <__libc_init_array+0x38>)
 8002e94:	4c0d      	ldr	r4, [pc, #52]	@ (8002ecc <__libc_init_array+0x3c>)
 8002e96:	1b64      	subs	r4, r4, r5
 8002e98:	10a4      	asrs	r4, r4, #2
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	42a6      	cmp	r6, r4
 8002e9e:	d109      	bne.n	8002eb4 <__libc_init_array+0x24>
 8002ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8002ed0 <__libc_init_array+0x40>)
 8002ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ed4 <__libc_init_array+0x44>)
 8002ea4:	f000 f818 	bl	8002ed8 <_init>
 8002ea8:	1b64      	subs	r4, r4, r5
 8002eaa:	10a4      	asrs	r4, r4, #2
 8002eac:	2600      	movs	r6, #0
 8002eae:	42a6      	cmp	r6, r4
 8002eb0:	d105      	bne.n	8002ebe <__libc_init_array+0x2e>
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb8:	4798      	blx	r3
 8002eba:	3601      	adds	r6, #1
 8002ebc:	e7ee      	b.n	8002e9c <__libc_init_array+0xc>
 8002ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec2:	4798      	blx	r3
 8002ec4:	3601      	adds	r6, #1
 8002ec6:	e7f2      	b.n	8002eae <__libc_init_array+0x1e>
 8002ec8:	08002f58 	.word	0x08002f58
 8002ecc:	08002f58 	.word	0x08002f58
 8002ed0:	08002f58 	.word	0x08002f58
 8002ed4:	08002f5c 	.word	0x08002f5c

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
