#include "DFR_i2c.h"

extern I2C_HandleTypeDef hi2c2; // Use your I2C handle (hi2c2, hi2c3 if needed)

/**
 * @brief Writes a buffer to a device register over I2C.
 * @param devAddr: 7-bit I2C device address
 * @param regAddr: Register address to write to
 * @param data: Pointer to data buffer
 * @param len: Length of data
 * @retval HAL status
 */
HAL_StatusTypeDef DFR_I2C_Write(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t len)
{
    uint8_t txBuf[1 + len];
    txBuf[0] = regAddr;
    for (uint16_t i = 0; i < len; i++)
        txBuf[i + 1] = data[i];

    return HAL_I2C_Master_Transmit(&hi2c2, devAddr << 1, txBuf, len + 1, HAL_MAX_DELAY);
}

/**
 * @brief Writes a single byte to a device register.
 * @param devAddr: 7-bit I2C device address
 * @param regAddr: Register address to write to
 * @param data: Byte to write
 * @retval HAL status
 */
HAL_StatusTypeDef DFR_I2C_WriteByte(uint8_t devAddr, uint8_t regAddr, uint8_t data)
{
    return DFR_I2C_Write(devAddr, regAddr, &data, 1);
}

/**
 * @brief Writes 2 bytes to a device register (MSB first).
 * @param devAddr: 7-bit I2C device address
 * @param regAddr: Register address to write to
 * @param data: 16-bit data to write
 * @retval HAL status
 */
HAL_StatusTypeDef DFR_I2C_Write2Bytes(uint8_t devAddr, uint8_t regAddr, uint16_t data)
{
    uint8_t buf[2];
    buf[0] = (uint8_t)(data >> 8);  // MSB
    buf[1] = (uint8_t)(data & 0xFF); // LSB
    return DFR_I2C_Write(devAddr, regAddr, buf, 2);
}
