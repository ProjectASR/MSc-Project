/*
 * DFR_i2c.h
 *
 *  Created on: Apr 9, 2024
 *
 */

#ifndef INC_DFR_I2C_H_
#define INC_DFR_I2C_H_

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct {
    GPIO_TypeDef* SDA_Port;
    uint16_t SDA_Pin;
    GPIO_TypeDef* SCL_Port;
    uint16_t SCL_Pin;
} GP8XXX_IIC_GPIO;

// 🔧 Fast GPIO operations (STM32 only)
#define SDA_HIGH(gpio)   ((gpio)->SDA_Port->BSRR = (gpio)->SDA_Pin)
#define SDA_LOW(gpio)    ((gpio)->SDA_Port->BRR  = (gpio)->SDA_Pin)
#define SCL_HIGH(gpio)   ((gpio)->SCL_Port->BSRR = (gpio)->SCL_Pin)
#define SCL_LOW(gpio)    ((gpio)->SCL_Port->BRR  = (gpio)->SCL_Pin)

#define SDA_READ(gpio)   (((gpio)->SDA_Port->IDR & (gpio)->SDA_Pin) != 0)
#define SDA_INPUT_MODE(gpio)   GPIO_Set_Pin_Input((gpio)->SDA_Port, (gpio)->SDA_Pin)
#define SDA_OUTPUT_MODE(gpio)  GPIO_Set_Pin_Output((gpio)->SDA_Port, (gpio)->SDA_Pin)

// 🔧 Inline short delay (no HAL_Delay)
#define I2C_SHORT_DELAY()  do { __NOP(); __NOP(); __NOP(); } while(0)

// 🔧 GPIO mode config (helper — platform-specific)
static inline void GPIO_Set_Pin_Input(GPIO_TypeDef *port, uint16_t pin) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(port, &GPIO_InitStruct);
}

static inline void GPIO_Set_Pin_Output(GPIO_TypeDef *port, uint16_t pin) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(port, &GPIO_InitStruct);
}

// 🔁 I2C low-level routines
static inline void I2C_Start(GP8XXX_IIC_GPIO *gpio) {
    SDA_OUTPUT_MODE(gpio);
    SDA_HIGH(gpio);
    SCL_HIGH(gpio);
    I2C_SHORT_DELAY();
    SDA_LOW(gpio);
    I2C_SHORT_DELAY();
    SCL_LOW(gpio);
}

static inline void I2C_Stop(GP8XXX_IIC_GPIO *gpio) {
    SDA_OUTPUT_MODE(gpio);
    SDA_LOW(gpio);
    SCL_HIGH(gpio);
    I2C_SHORT_DELAY();
    SDA_HIGH(gpio);
}

static inline void I2C_Write_Bit(GP8XXX_IIC_GPIO *gpio, uint8_t bit) {
    SDA_OUTPUT_MODE(gpio);
    if (bit) SDA_HIGH(gpio); else SDA_LOW(gpio);
    I2C_SHORT_DELAY();
    SCL_HIGH(gpio);
    I2C_SHORT_DELAY();
    SCL_LOW(gpio);
}

static inline uint8_t I2C_Read_Bit(GP8XXX_IIC_GPIO *gpio) {
    uint8_t bit;
    SDA_INPUT_MODE(gpio);
    I2C_SHORT_DELAY();
    SCL_HIGH(gpio);
    I2C_SHORT_DELAY();
    bit = SDA_READ(gpio);
    SCL_LOW(gpio);
    return bit;
}

static inline uint8_t I2C_Write_Byte(GP8XXX_IIC_GPIO *gpio, uint8_t data) {
    for (int8_t i = 7; i >= 0; i--) {
        I2C_Write_Bit(gpio, (data >> i) & 0x01);
    }
    return !I2C_Read_Bit(gpio); // ACK expected: 0 = ACK
}

// ✨ Public functions
void GP8XXX_IIC_Init(GP8XXX_IIC_GPIO *gpio);
void GP8XXX_IIC_SetVoltage(GP8XXX_IIC_GPIO *gpio, uint8_t addr, float voltage);
void GP8XXX_IIC_StoreDAC(GP8XXX_IIC_GPIO *gpio, uint8_t addr);

#ifdef __cplusplus
}
#endif
