#ifndef DFRobot_GP8XXX_H
#define DFRobot_GP8XXX_H

#include "stm32f4xx_hal.h"  // Include STM32 HAL library (adjust for your specific STM32 series)

#define GP8XXX_STORE_TIMING_HEAD   0x90
#define GP8XXX_STORE_TIMING_ADDR   0x95
#define GP8XXX_STORE_TIMING_CMD1   0xA1
#define GP8XXX_STORE_TIMING_CMD2   0xA2
#define GP8XXX_STORE_TIMING_DELAY  10
#define GP8XXX_CONFIG_CURRENT_REG  0x0F

#define RESOLUTION_12_BIT          12
#define RESOLUTION_15_BIT          15

// Output range options
typedef enum {
  eOutputRange5V,
  eOutputRange10V
} eOutPutRange_t;

// DFRobot_GP8XXX class definition
class DFRobot_GP8XXX_IIC
{
public:
    DFRobot_GP8XXX_IIC(uint8_t deviceAddr) : _deviceAddr(deviceAddr), _resolution(RESOLUTION_12_BIT) {}

    int begin(void);  // Initialize I2C communication
    void setDACOutRange(eOutPutRange_t range);  // Set output voltage range (5V or 10V)
    void setDACOutVoltage(uint16_t voltage, uint8_t channel);  // Set DAC output voltage for specific channel
    void store(void);  // Store DAC values

protected:
    uint8_t _deviceAddr;  // I2C address of the DAC
    uint8_t _resolution;  // DAC resolution (12-bit or 15-bit)

    // Methods for communication and signal handling
    uint8_t writeRegister(uint8_t reg, void* pBuf, size_t size);  // Write data to register
    void sendData(uint16_t data, uint8_t channel);  // Send DAC data to the specified channel
    void startSignal(void);  // Generate start signal for I2C communication
    void stopSignal(void);  // Generate stop signal for I2C communication
    uint8_t sendByte(uint8_t data, uint8_t ack, uint8_t bits, bool flag);  // Send a byte of data over I2C
    uint8_t recvAck(uint8_t ack);  // Receive acknowledgment from I2C bus
};

#endif // DFRobot_GP8XXX_H
