/*
 * DFR_i2c.h
 *
 *  Created on: Apr 9, 2024
 *
 */

#ifndef INC_DFR_I2C_H_
#define INC_DFR_I2C_H_

#include <stdint.h>
#include <main.h>

// Definitions for DAC resolutions
#define RESOLUTION_12_BIT 0x0FFF
#define RESOLUTION_15_BIT 0x7FFF

// Configuration registers and addresses
#define GP8XXX_CONFIG_CURRENT_REG     0x02
#define DFGP8XXX_I2C_DEVICEADDR       0x58  // 7 bit i2c address

#define GP8XXX_STORE_TIMING_HEAD            0x02  ///< Store function timing start head
#define GP8XXX_STORE_TIMING_ADDR            0x10  ///< The first address for entering store timing
#define GP8XXX_STORE_TIMING_CMD1            0x03  ///< The command 1 to enter store timing
#define GP8XXX_STORE_TIMING_CMD2            0x00  ///< The command 2 to enter store timing
#define GP8XXX_STORE_TIMING_DELAY           10    ///< Store procedure interval delay time: 10ms, more than 7ms
#define I2C_CYCLE_TOTAL                     5     ///< Total I2C communication cycle
#define I2C_CYCLE_BEFORE                    1     ///< Time before each clock cycle (us)
#define I2C_CYCLE_AFTER                     1     ///< Time after each clock cycle (us)
#define I2C_CYCLE_WAIT_ACK                  100   ///< Max wait time for ACK (in microseconds)

// DAC Names
typedef enum {
    GP8211_identifier,
    GP8211S_identifier,
    GP8512_identifier,
    GP8413_identifier,
    GP8302_identifier,
    GP8503_identifier,
    GP8403_identifier,
    GP8101_identifier
} eDAC_Name_t;

// Output range options
typedef enum {
    eOutputRange5V,
    eOutputRange10V
} eOutPutRange_t;

// Structure to hold I2C configuration for GP8XXX DAC
typedef struct {
    GPIO_TypeDef *I2C_scl_port;
    uint16_t I2C_scl_pin;
    GPIO_TypeDef *I2C_sda_port;
    uint16_t I2C_sda_pin;
    uint8_t deviceAddr;
    eDAC_Name_t DAC_Name;
    uint16_t resolution;
} DFRobot_GP8XXX_IIC;

// Function prototypes
void Delay_us(uint32_t delay);
void dfr_i2c_start(DFRobot_GP8XXX_IIC *gp8xxx);
void dfr_i2c_stop(DFRobot_GP8XXX_IIC *gp8xxx);
void dfr_i2c_write_1_bit(DFRobot_GP8XXX_IIC *gp8xxx, uint8_t bit);
HAL_StatusTypeDef dfr_i2c_write_byte(DFRobot_GP8XXX_IIC *gp8xxx, uint8_t data);
void GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, eDAC_Name_t dac_name,
                      uint8_t Addr, GPIO_TypeDef *SCL_port, uint16_t SCL_pin,
                      GPIO_TypeDef *SDA_port, uint16_t SDA_pin);
int GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range);
int GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage, uint8_t channel);
int GP8XXX_IIC_store(DFRobot_GP8XXX_IIC *gp8xxx);

#endif /* INC_DFR_I2C_H_ */
