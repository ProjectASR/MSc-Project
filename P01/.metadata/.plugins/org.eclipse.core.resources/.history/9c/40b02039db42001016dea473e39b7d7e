#define PIN_SCK   4
#define PIN_MOSI  6
#define PIN_MISO  5
#define PIN_CS    7

uint8_t recvBuf[24];  // 6 floats = 24 bytes

void setup() {
  pinMode(PIN_SCK, INPUT);
  pinMode(PIN_MOSI, INPUT);
  pinMode(PIN_MISO, OUTPUT);
  pinMode(PIN_CS, INPUT_PULLUP);

  digitalWrite(PIN_MISO, LOW);  // Default LOW

  Serial.begin(115200);
}

// Robust SPI bit reader
uint8_t ReadByteSPI() {
  uint8_t receivedByte = 0;
  uint8_t toSend = 0xA5;  // Dummy data to send back

  for (int i = 0; i < 8; i++) {
    // Wait for clock rising edge
    while (digitalRead(PIN_SCK) == LOW);
    delayMicroseconds(1); // Ensure MOSI line is stable

    int bit = digitalRead(PIN_MOSI);
    receivedByte = (receivedByte << 1) | (bit & 0x01);

    // Drive MISO line for next bit
    digitalWrite(PIN_MISO, (toSend & 0x80) ? HIGH : LOW);
    toSend <<= 1;

    // Wait for clock falling edge
    while (digitalRead(PIN_SCK) == HIGH);
  }

  return receivedByte;
}

void loop() {
  // Wait for chip select LOW to begin transaction
  while (digitalRead(PIN_CS) == HIGH);

  // Look for start byte 0xAA to sync
  uint8_t startByte = 0;
  do {
    startByte = ReadByteSPI();
  } while (startByte != 0xAA && digitalRead(PIN_CS) == LOW);

  // If CS goes high prematurely, abort
  if (startByte != 0xAA || digitalRead(PIN_CS) == HIGH) return;

  // Receive 24 bytes (6 floats)
  for (int i = 0; i < 24; i++) {
    recvBuf[i] = ReadByteSPI();
  }

  // Optional checksum read and validation
  /*
  uint8_t checksumByte = ReadByteSPI();
  uint8_t calcChecksum = 0;
  for (int i = 0; i < 24; i++) calcChecksum ^= recvBuf[i];
  if (checksumByte != calcChecksum) {
    Serial.println("Checksum error.");
    return; // discard packet
  }
  */

  // Wait until transaction ends
  while (digitalRead(PIN_CS) == LOW);

  // Extract float values
  float reaction_torque_input, desired_torque, velocity1, velocity2, theta1, theta2;

  memcpy(&reaction_torque_input, &recvBuf[0],  sizeof(float));
  memcpy(&desired_torque,        &recvBuf[4],  sizeof(float));
  memcpy(&velocity1,             &recvBuf[8],  sizeof(float));
  memcpy(&velocity2,             &recvBuf[12], sizeof(float));
  memcpy(&theta1,                &recvBuf[16], sizeof(float));
  memcpy(&theta2,                &recvBuf[20], sizeof(float));

  // Print values
  Serial.print("reaction_torque_input: "); Serial.print(reaction_torque_input, 4); Serial.print("\t");
  Serial.print("desired_torque: ");        Serial.print(desired_torque, 4);        Serial.print("\t");
  Serial.print("velocity1: ");             Serial.print(velocity1, 4);             Serial.print("\t");
  Serial.print("velocity2: ");             Serial.print(velocity2, 4);             Serial.print("\t");
  Serial.print("theta1: ");                Serial.print(theta1, 4);                Serial.print("\t");
  Serial.print("theta2: ");                Serial.println(theta2, 4);

  // Clear buffer for safety
  memset(recvBuf, 0, sizeof(recvBuf));

  delay(5); // Let SPI master finish cleanup
}
