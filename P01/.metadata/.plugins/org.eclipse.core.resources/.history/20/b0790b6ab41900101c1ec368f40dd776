



#ifndef DFRobot_GP8XXX_H
#define DFRobot_GP8XXX_H

#include "stm32f7xx_hal.h"  // Include STM32 HAL library (adjust for your specific STM32 series)
#include <stdbool.h>         // Include for 'bool' type
#define GP8XXX_STORE_TIMING_HEAD   0x90
#define GP8XXX_STORE_TIMING_ADDR   0x95
#define GP8XXX_STORE_TIMING_CMD1   0xA1
#define GP8XXX_STORE_TIMING_CMD2   0xA2
#define GP8XXX_STORE_TIMING_DELAY  10
#define GP8XXX_CONFIG_CURRENT_REG  0x0F

#define RESOLUTION_12_BIT          12
#define RESOLUTION_15_BIT          15

// Output range options
typedef enum {
  eOutputRange5V,
  eOutputRange10V
} eOutPutRange_t;

typedef struct {
    uint8_t deviceAddr;  // I2C address of the DAC
    uint8_t resolution;  // DAC resolution (12-bit or 15-bit)
} DFRobot_GP8XXX_IIC;

// Function declarations
int DFRobot_GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, uint8_t addr);
void DFRobot_GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range);
void DFRobot_GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage, uint8_t channel);
void DFRobot_GP8XXX_IIC_store(DFRobot_GP8XXX_IIC *gp8xxx);

// Helper functions
uint8_t writeRegister(uint8_t reg, void* pBuf, size_t size);
void sendData(uint16_t data, uint8_t channel);
void startSignal(void);
void stopSignal(void);
uint8_t sendByte(uint8_t data, uint8_t ack, uint8_t bits, bool flag);
uint8_t recvAck(uint8_t ack);

#endif // DFRobot_GP8XXX_H
