/*
 * DFR_i2c.h
 *
 *  Created on: Apr 9, 2024
 *
 */

#ifndef INC_DFR_I2C_H_
#define INC_DFR_I2C_H_

#include <stdint.h>
#include <main.h>

// Definitions for DAC resolutions
#define RESOLUTION_12_BIT 0x0FFF
#define RESOLUTION_15_BIT 0x7FFF

// Configuration registers and addresses
#define GP8XXX_REG_STATUS              0x00  // Status Register
#define GP8XXX_REG_CONTROL             0x01  // Control Register
#define GP8XXX_REG_CONFIG              0x02  // Configuration Register
#define GP8XXX_REG_DATA                0x03  // Data Register (DAC output)

// Store Timing Registers
#define GP8XXX_STORE_TIMING_HEAD       0x02  // Store function timing start head
#define GP8XXX_STORE_TIMING_ADDR       0x10  // Address to enter store timing
#define GP8XXX_STORE_TIMING_CMD1       0x03  // Command 1 to enter store timing
#define GP8XXX_STORE_TIMING_CMD2       0x00  // Command 2 to enter store timing
#define GP8XXX_STORE_TIMING_DELAY      10    // Store procedure interval delay time (10 ms)

// DAC Model-specific Registers (examples)
#define GP8XXX_REG_DAC_OUTPUT_VOLTAGE  0x04  // DAC output voltage register
#define GP8XXX_REG_DAC_RANGE           0x05  // DAC output range register

// Communication Control Registers
#define GP8XXX_REG_COMM_CTRL           0x06  // Communication control register
#define GP8XXX_REG_I2C_ADDR            0x07  // I2C Address register

// Additional Configuration Registers
#define GP8XXX_REG_CONFIG_MISC         0x08  // Miscellaneous Configuration Register
#define GP8XXX_REG_CONFIG_ADVANCED     0x09  // Advanced Configuration Register

// Calibration Registers (if available)
#define GP8XXX_REG_CALIBRATION         0x0A  // Calibration register
#define GP8XXX_REG_CALIBRATION_STATUS  0x0B  // Calibration status register

// Identification/Version Registers
#define GP8XXX_REG_ID                  0x0C  // Identification Register
#define GP8XXX_REG_VERSION             0x0D  // Version Register

// I2C Communication Cycle Constants
#define I2C_CYCLE_TOTAL                5
#define I2C_CYCLE_BEFORE               1
#define I2C_CYCLE_AFTER                2

#define CLOCK SystemCoreClock/18000000  // Change this according to SCL frequency

// DAC output range enum
typedef enum {
    eOutputRange2_5V = 0,
    eOutputRange5V = 1,
    eOutputRange10V = 2,
    eOutputRangeVCC = 3
} eOutPutRange_t;

// DAC model enum
typedef enum {
    GP8211_identifier = 0,
    GP8211S_identifier = 1,
    GP8512_identifier = 2,
    GP8302_identifier = 3,
    GP8403_identifier = 4,
    GP8413_identifier = 5,
    GP8503_identifier = 6
} eDAC_Name_t;

// DAC configuration structure
typedef struct {
    uint16_t resolution;        // Resolution of the DAC
    eDAC_Name_t DAC_Name;       // Identifier for the DAC model
    uint8_t deviceAddr;         // I2C device address
} DFRobot_GP8XXX_IIC;

// Function prototypes

/**
 * @brief Initializes I2C communication for the DAC
 * @param gp8xxx Pointer to DFRobot_GP8XXX_IIC struct containing DAC configuration
 * @param dac_name Identifier for the DAC model
 * @param Addr I2C device address
 * @return None
 */
void GP8XXX_IIC_begin(DFRobot_GP8XXX_IIC *gp8xxx, eDAC_Name_t dac_name, uint8_t Addr);

/**
 * @brief Sets the output range for the DAC
 * @param gp8xxx Pointer to DFRobot_GP8XXX_IIC struct containing DAC configuration
 * @param range Desired output range for the DAC
 * @return 0 for success, other values for failure
 */
int GP8XXX_IIC_setDACOutRange(DFRobot_GP8XXX_IIC *gp8xxx, eOutPutRange_t range);

/**
 * @brief Sets the output voltage for the DAC
 * @param gp8xxx Pointer to DFRobot_GP8XXX_IIC struct containing DAC configuration
 * @param voltage Desired output voltage value
 * @param channel Output channel (0: Channel 0, 1: Channel 1, 2: All channels)
 * @return 0 for success, other values for failure
 */
int GP8XXX_IIC_setDACOutVoltage(DFRobot_GP8XXX_IIC *gp8xxx, uint16_t voltage, uint8_t channel);

/**
 * @brief Stores the voltage value
 * @param gp8xxx Pointer to DFRobot_GP8XXX_IIC struct containing DAC configuration
 * @return 0 for success, other values for failure
 */
int GP8XXX_IIC_store(DFRobot_GP8XXX_IIC *gp8xxx);

#endif /* INC_DFR_I2C_H_ */
