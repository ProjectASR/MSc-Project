#ifndef _DFRobot_GP8XXX_H_
#define _DFRobot_GP8XXX_H_

#include "stm32f4xx_hal.h"  // Use HAL for STM32

class DFRobot_GP8XXX
{
public:
    typedef enum {
        eOutputRange2_5V  = 0,
        eOutputRange5V    = 1,
        eOutputRange10V   = 2,
        eOutputRangeVCC   = 3
    } eOutPutRange_t;

    virtual int begin(void) = 0;
    virtual void setDACOutVoltage(uint16_t data, uint8_t channel) = 0;
};

class DFRobot_GP8XXX_IIC : public DFRobot_GP8XXX
{
public:
    #define RESOLUTION_12_BIT 0x0FFF
    #define RESOLUTION_15_BIT 0x7FFF
    #define GP8XXX_CONFIG_CURRENT_REG 0x02
    #define DFGP8XXX_I2C_DEVICEADDR 0x58  //!< I2C address

    #define GP8XXX_STORE_TIMING_HEAD 0x02
    #define GP8XXX_STORE_TIMING_ADDR 0x10
    #define GP8XXX_STORE_TIMING_CMD1 0x03
    #define GP8XXX_STORE_TIMING_CMD2 0x00
    #define GP8XXX_STORE_TIMING_DELAY 10
    #define I2C_CYCLE_TOTAL 5
    #define I2C_CYCLE_BEFORE 1
    #define I2C_CYCLE_AFTER 2

    DFRobot_GP8XXX_IIC(uint16_t resolution, uint8_t deviceAddr = DFGP8XXX_I2C_DEVICEADDR, I2C_HandleTypeDef* hi2c = &hi2c1)
        : _resolution(resolution), _deviceAddr(deviceAddr), _hi2c(hi2c)
    {
    }

    int begin(void);
    void setDACOutRange(eOutPutRange_t range);
    void setDACOutVoltage(uint16_t data, uint8_t channel = 0);
    void store(void);

protected:
    void sendData(uint16_t data, uint8_t channel);
    uint8_t writeRegister(uint8_t reg, void* pBuf, size_t size);
    void startSignal(void);
    void stopSignal(void);
    uint8_t recvAck(uint8_t ack);
    uint8_t sendByte(uint8_t data, uint8_t ack = 0, uint8_t bits = 8, bool flag = true);

protected:
    uint16_t _resolution = 0;
    uint8_t _deviceAddr;
    I2C_HandleTypeDef* _hi2c;
};
#endif
